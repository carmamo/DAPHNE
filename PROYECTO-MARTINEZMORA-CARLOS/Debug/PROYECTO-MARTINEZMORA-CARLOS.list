
PROYECTO-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152dc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001290  080153a0  080153a0  000253a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016630  08016630  00030244  2**0
                  CONTENTS
  4 .ARM          00000000  08016630  08016630  00030244  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016630  08016630  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016630  08016630  00026630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016634  08016634  00026634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08016638  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca8  20000248  0801687c  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002ef0  0801687c  00032ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000620d1  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063b1  00000000  00000000  0009233d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000040f8  00000000  00000000  000986f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003e10  00000000  00000000  0009c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bc7  00000000  00000000  000a05f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000306a9  00000000  00000000  000b81bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009361b  00000000  00000000  000e8868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017be83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010a20  00000000  00000000  0017bed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000248 	.word	0x20000248
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08015384 	.word	0x08015384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000024c 	.word	0x2000024c
 8000104:	08015384 	.word	0x08015384

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb9d 	bl	8001b7c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 faed 	bl	8001a2c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb8f 	bl	8001b7c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb85 	bl	8001b7c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb15 	bl	8001ab0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb0b 	bl	8001ab0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fb70 	bl	8002b94 <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fc17 	bl	8000cec <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fa63 	bl	8000990 <__aeabi_fsub>
 80004ca:	f000 fc0f 	bl	8000cec <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_d2uiz>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	2200      	movs	r2, #0
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <__aeabi_d2uiz+0x38>)
 80004de:	0004      	movs	r4, r0
 80004e0:	000d      	movs	r5, r1
 80004e2:	f7ff ffd7 	bl	8000494 <__aeabi_dcmpge>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d104      	bne.n	80004f4 <__aeabi_d2uiz+0x1c>
 80004ea:	0020      	movs	r0, r4
 80004ec:	0029      	movs	r1, r5
 80004ee:	f002 f9c5 	bl	800287c <__aeabi_d2iz>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <__aeabi_d2uiz+0x38>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	0020      	movs	r0, r4
 80004fa:	0029      	movs	r1, r5
 80004fc:	f001 fe0e 	bl	800211c <__aeabi_dsub>
 8000500:	f002 f9bc 	bl	800287c <__aeabi_d2iz>
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	469c      	mov	ip, r3
 800050a:	4460      	add	r0, ip
 800050c:	e7f1      	b.n	80004f2 <__aeabi_d2uiz+0x1a>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	41e00000 	.word	0x41e00000

08000514 <__aeabi_fdiv>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	464f      	mov	r7, r9
 8000518:	4646      	mov	r6, r8
 800051a:	46d6      	mov	lr, sl
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	b5c0      	push	{r6, r7, lr}
 8000520:	0047      	lsls	r7, r0, #1
 8000522:	1c0c      	adds	r4, r1, #0
 8000524:	0a6d      	lsrs	r5, r5, #9
 8000526:	0e3f      	lsrs	r7, r7, #24
 8000528:	0fc6      	lsrs	r6, r0, #31
 800052a:	2f00      	cmp	r7, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x1c>
 800052e:	e070      	b.n	8000612 <__aeabi_fdiv+0xfe>
 8000530:	2fff      	cmp	r7, #255	; 0xff
 8000532:	d100      	bne.n	8000536 <__aeabi_fdiv+0x22>
 8000534:	e075      	b.n	8000622 <__aeabi_fdiv+0x10e>
 8000536:	00eb      	lsls	r3, r5, #3
 8000538:	2580      	movs	r5, #128	; 0x80
 800053a:	04ed      	lsls	r5, r5, #19
 800053c:	431d      	orrs	r5, r3
 800053e:	2300      	movs	r3, #0
 8000540:	4699      	mov	r9, r3
 8000542:	469a      	mov	sl, r3
 8000544:	3f7f      	subs	r7, #127	; 0x7f
 8000546:	0260      	lsls	r0, r4, #9
 8000548:	0a43      	lsrs	r3, r0, #9
 800054a:	4698      	mov	r8, r3
 800054c:	0063      	lsls	r3, r4, #1
 800054e:	0e1b      	lsrs	r3, r3, #24
 8000550:	0fe4      	lsrs	r4, r4, #31
 8000552:	2b00      	cmp	r3, #0
 8000554:	d04e      	beq.n	80005f4 <__aeabi_fdiv+0xe0>
 8000556:	2bff      	cmp	r3, #255	; 0xff
 8000558:	d046      	beq.n	80005e8 <__aeabi_fdiv+0xd4>
 800055a:	4642      	mov	r2, r8
 800055c:	00d0      	lsls	r0, r2, #3
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	04d2      	lsls	r2, r2, #19
 8000562:	4302      	orrs	r2, r0
 8000564:	4690      	mov	r8, r2
 8000566:	2200      	movs	r2, #0
 8000568:	3b7f      	subs	r3, #127	; 0x7f
 800056a:	0031      	movs	r1, r6
 800056c:	1aff      	subs	r7, r7, r3
 800056e:	464b      	mov	r3, r9
 8000570:	4061      	eors	r1, r4
 8000572:	b2c9      	uxtb	r1, r1
 8000574:	4313      	orrs	r3, r2
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d900      	bls.n	800057c <__aeabi_fdiv+0x68>
 800057a:	e0b5      	b.n	80006e8 <__aeabi_fdiv+0x1d4>
 800057c:	486e      	ldr	r0, [pc, #440]	; (8000738 <__aeabi_fdiv+0x224>)
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	58c3      	ldr	r3, [r0, r3]
 8000582:	469f      	mov	pc, r3
 8000584:	2300      	movs	r3, #0
 8000586:	4698      	mov	r8, r3
 8000588:	0026      	movs	r6, r4
 800058a:	4645      	mov	r5, r8
 800058c:	4692      	mov	sl, r2
 800058e:	4653      	mov	r3, sl
 8000590:	2b02      	cmp	r3, #2
 8000592:	d100      	bne.n	8000596 <__aeabi_fdiv+0x82>
 8000594:	e089      	b.n	80006aa <__aeabi_fdiv+0x196>
 8000596:	2b03      	cmp	r3, #3
 8000598:	d100      	bne.n	800059c <__aeabi_fdiv+0x88>
 800059a:	e09e      	b.n	80006da <__aeabi_fdiv+0x1c6>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d018      	beq.n	80005d2 <__aeabi_fdiv+0xbe>
 80005a0:	003b      	movs	r3, r7
 80005a2:	337f      	adds	r3, #127	; 0x7f
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	dd69      	ble.n	800067c <__aeabi_fdiv+0x168>
 80005a8:	076a      	lsls	r2, r5, #29
 80005aa:	d004      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005ac:	220f      	movs	r2, #15
 80005ae:	402a      	ands	r2, r5
 80005b0:	2a04      	cmp	r2, #4
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fdiv+0xa2>
 80005b4:	3504      	adds	r5, #4
 80005b6:	012a      	lsls	r2, r5, #4
 80005b8:	d503      	bpl.n	80005c2 <__aeabi_fdiv+0xae>
 80005ba:	4b60      	ldr	r3, [pc, #384]	; (800073c <__aeabi_fdiv+0x228>)
 80005bc:	401d      	ands	r5, r3
 80005be:	003b      	movs	r3, r7
 80005c0:	3380      	adds	r3, #128	; 0x80
 80005c2:	2bfe      	cmp	r3, #254	; 0xfe
 80005c4:	dd00      	ble.n	80005c8 <__aeabi_fdiv+0xb4>
 80005c6:	e070      	b.n	80006aa <__aeabi_fdiv+0x196>
 80005c8:	01ad      	lsls	r5, r5, #6
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	b2d8      	uxtb	r0, r3
 80005ce:	e002      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80005d0:	000e      	movs	r6, r1
 80005d2:	2000      	movs	r0, #0
 80005d4:	2500      	movs	r5, #0
 80005d6:	05c0      	lsls	r0, r0, #23
 80005d8:	4328      	orrs	r0, r5
 80005da:	07f6      	lsls	r6, r6, #31
 80005dc:	4330      	orrs	r0, r6
 80005de:	bce0      	pop	{r5, r6, r7}
 80005e0:	46ba      	mov	sl, r7
 80005e2:	46b1      	mov	r9, r6
 80005e4:	46a8      	mov	r8, r5
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4643      	mov	r3, r8
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d13f      	bne.n	800066e <__aeabi_fdiv+0x15a>
 80005ee:	2202      	movs	r2, #2
 80005f0:	3fff      	subs	r7, #255	; 0xff
 80005f2:	e003      	b.n	80005fc <__aeabi_fdiv+0xe8>
 80005f4:	4643      	mov	r3, r8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d12d      	bne.n	8000656 <__aeabi_fdiv+0x142>
 80005fa:	2201      	movs	r2, #1
 80005fc:	0031      	movs	r1, r6
 80005fe:	464b      	mov	r3, r9
 8000600:	4061      	eors	r1, r4
 8000602:	b2c9      	uxtb	r1, r1
 8000604:	4313      	orrs	r3, r2
 8000606:	2b0f      	cmp	r3, #15
 8000608:	d834      	bhi.n	8000674 <__aeabi_fdiv+0x160>
 800060a:	484d      	ldr	r0, [pc, #308]	; (8000740 <__aeabi_fdiv+0x22c>)
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	58c3      	ldr	r3, [r0, r3]
 8000610:	469f      	mov	pc, r3
 8000612:	2d00      	cmp	r5, #0
 8000614:	d113      	bne.n	800063e <__aeabi_fdiv+0x12a>
 8000616:	2304      	movs	r3, #4
 8000618:	4699      	mov	r9, r3
 800061a:	3b03      	subs	r3, #3
 800061c:	2700      	movs	r7, #0
 800061e:	469a      	mov	sl, r3
 8000620:	e791      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d105      	bne.n	8000632 <__aeabi_fdiv+0x11e>
 8000626:	2308      	movs	r3, #8
 8000628:	4699      	mov	r9, r3
 800062a:	3b06      	subs	r3, #6
 800062c:	27ff      	movs	r7, #255	; 0xff
 800062e:	469a      	mov	sl, r3
 8000630:	e789      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000632:	230c      	movs	r3, #12
 8000634:	4699      	mov	r9, r3
 8000636:	3b09      	subs	r3, #9
 8000638:	27ff      	movs	r7, #255	; 0xff
 800063a:	469a      	mov	sl, r3
 800063c:	e783      	b.n	8000546 <__aeabi_fdiv+0x32>
 800063e:	0028      	movs	r0, r5
 8000640:	f002 fab2 	bl	8002ba8 <__clzsi2>
 8000644:	2776      	movs	r7, #118	; 0x76
 8000646:	1f43      	subs	r3, r0, #5
 8000648:	409d      	lsls	r5, r3
 800064a:	2300      	movs	r3, #0
 800064c:	427f      	negs	r7, r7
 800064e:	4699      	mov	r9, r3
 8000650:	469a      	mov	sl, r3
 8000652:	1a3f      	subs	r7, r7, r0
 8000654:	e777      	b.n	8000546 <__aeabi_fdiv+0x32>
 8000656:	4640      	mov	r0, r8
 8000658:	f002 faa6 	bl	8002ba8 <__clzsi2>
 800065c:	4642      	mov	r2, r8
 800065e:	1f43      	subs	r3, r0, #5
 8000660:	409a      	lsls	r2, r3
 8000662:	2376      	movs	r3, #118	; 0x76
 8000664:	425b      	negs	r3, r3
 8000666:	4690      	mov	r8, r2
 8000668:	1a1b      	subs	r3, r3, r0
 800066a:	2200      	movs	r2, #0
 800066c:	e77d      	b.n	800056a <__aeabi_fdiv+0x56>
 800066e:	23ff      	movs	r3, #255	; 0xff
 8000670:	2203      	movs	r2, #3
 8000672:	e77a      	b.n	800056a <__aeabi_fdiv+0x56>
 8000674:	000e      	movs	r6, r1
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	2500      	movs	r5, #0
 800067a:	e7ac      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 800067c:	2001      	movs	r0, #1
 800067e:	1ac0      	subs	r0, r0, r3
 8000680:	281b      	cmp	r0, #27
 8000682:	dca6      	bgt.n	80005d2 <__aeabi_fdiv+0xbe>
 8000684:	379e      	adds	r7, #158	; 0x9e
 8000686:	002a      	movs	r2, r5
 8000688:	40bd      	lsls	r5, r7
 800068a:	40c2      	lsrs	r2, r0
 800068c:	1e6b      	subs	r3, r5, #1
 800068e:	419d      	sbcs	r5, r3
 8000690:	4315      	orrs	r5, r2
 8000692:	076b      	lsls	r3, r5, #29
 8000694:	d004      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 8000696:	230f      	movs	r3, #15
 8000698:	402b      	ands	r3, r5
 800069a:	2b04      	cmp	r3, #4
 800069c:	d000      	beq.n	80006a0 <__aeabi_fdiv+0x18c>
 800069e:	3504      	adds	r5, #4
 80006a0:	016b      	lsls	r3, r5, #5
 80006a2:	d544      	bpl.n	800072e <__aeabi_fdiv+0x21a>
 80006a4:	2001      	movs	r0, #1
 80006a6:	2500      	movs	r5, #0
 80006a8:	e795      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006aa:	20ff      	movs	r0, #255	; 0xff
 80006ac:	2500      	movs	r5, #0
 80006ae:	e792      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006b0:	2580      	movs	r5, #128	; 0x80
 80006b2:	2600      	movs	r6, #0
 80006b4:	20ff      	movs	r0, #255	; 0xff
 80006b6:	03ed      	lsls	r5, r5, #15
 80006b8:	e78d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006ba:	2300      	movs	r3, #0
 80006bc:	4698      	mov	r8, r3
 80006be:	2080      	movs	r0, #128	; 0x80
 80006c0:	03c0      	lsls	r0, r0, #15
 80006c2:	4205      	tst	r5, r0
 80006c4:	d009      	beq.n	80006da <__aeabi_fdiv+0x1c6>
 80006c6:	4643      	mov	r3, r8
 80006c8:	4203      	tst	r3, r0
 80006ca:	d106      	bne.n	80006da <__aeabi_fdiv+0x1c6>
 80006cc:	4645      	mov	r5, r8
 80006ce:	4305      	orrs	r5, r0
 80006d0:	026d      	lsls	r5, r5, #9
 80006d2:	0026      	movs	r6, r4
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	e77d      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006da:	2080      	movs	r0, #128	; 0x80
 80006dc:	03c0      	lsls	r0, r0, #15
 80006de:	4305      	orrs	r5, r0
 80006e0:	026d      	lsls	r5, r5, #9
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	e776      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 80006e8:	4642      	mov	r2, r8
 80006ea:	016b      	lsls	r3, r5, #5
 80006ec:	0150      	lsls	r0, r2, #5
 80006ee:	4283      	cmp	r3, r0
 80006f0:	d219      	bcs.n	8000726 <__aeabi_fdiv+0x212>
 80006f2:	221b      	movs	r2, #27
 80006f4:	2500      	movs	r5, #0
 80006f6:	3f01      	subs	r7, #1
 80006f8:	2601      	movs	r6, #1
 80006fa:	001c      	movs	r4, r3
 80006fc:	006d      	lsls	r5, r5, #1
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2c00      	cmp	r4, #0
 8000702:	db01      	blt.n	8000708 <__aeabi_fdiv+0x1f4>
 8000704:	4298      	cmp	r0, r3
 8000706:	d801      	bhi.n	800070c <__aeabi_fdiv+0x1f8>
 8000708:	1a1b      	subs	r3, r3, r0
 800070a:	4335      	orrs	r5, r6
 800070c:	3a01      	subs	r2, #1
 800070e:	2a00      	cmp	r2, #0
 8000710:	d1f3      	bne.n	80006fa <__aeabi_fdiv+0x1e6>
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	4193      	sbcs	r3, r2
 8000716:	431d      	orrs	r5, r3
 8000718:	003b      	movs	r3, r7
 800071a:	337f      	adds	r3, #127	; 0x7f
 800071c:	000e      	movs	r6, r1
 800071e:	2b00      	cmp	r3, #0
 8000720:	dd00      	ble.n	8000724 <__aeabi_fdiv+0x210>
 8000722:	e741      	b.n	80005a8 <__aeabi_fdiv+0x94>
 8000724:	e7aa      	b.n	800067c <__aeabi_fdiv+0x168>
 8000726:	221a      	movs	r2, #26
 8000728:	2501      	movs	r5, #1
 800072a:	1a1b      	subs	r3, r3, r0
 800072c:	e7e4      	b.n	80006f8 <__aeabi_fdiv+0x1e4>
 800072e:	01ad      	lsls	r5, r5, #6
 8000730:	2000      	movs	r0, #0
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	e74f      	b.n	80005d6 <__aeabi_fdiv+0xc2>
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	08015498 	.word	0x08015498
 800073c:	f7ffffff 	.word	0xf7ffffff
 8000740:	080154d8 	.word	0x080154d8

08000744 <__aeabi_fmul>:
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	464f      	mov	r7, r9
 8000748:	4646      	mov	r6, r8
 800074a:	46d6      	mov	lr, sl
 800074c:	0244      	lsls	r4, r0, #9
 800074e:	0045      	lsls	r5, r0, #1
 8000750:	b5c0      	push	{r6, r7, lr}
 8000752:	0a64      	lsrs	r4, r4, #9
 8000754:	1c0f      	adds	r7, r1, #0
 8000756:	0e2d      	lsrs	r5, r5, #24
 8000758:	0fc6      	lsrs	r6, r0, #31
 800075a:	2d00      	cmp	r5, #0
 800075c:	d100      	bne.n	8000760 <__aeabi_fmul+0x1c>
 800075e:	e08d      	b.n	800087c <__aeabi_fmul+0x138>
 8000760:	2dff      	cmp	r5, #255	; 0xff
 8000762:	d100      	bne.n	8000766 <__aeabi_fmul+0x22>
 8000764:	e092      	b.n	800088c <__aeabi_fmul+0x148>
 8000766:	2300      	movs	r3, #0
 8000768:	2080      	movs	r0, #128	; 0x80
 800076a:	4699      	mov	r9, r3
 800076c:	469a      	mov	sl, r3
 800076e:	00e4      	lsls	r4, r4, #3
 8000770:	04c0      	lsls	r0, r0, #19
 8000772:	4304      	orrs	r4, r0
 8000774:	3d7f      	subs	r5, #127	; 0x7f
 8000776:	0278      	lsls	r0, r7, #9
 8000778:	0a43      	lsrs	r3, r0, #9
 800077a:	4698      	mov	r8, r3
 800077c:	007b      	lsls	r3, r7, #1
 800077e:	0e1b      	lsrs	r3, r3, #24
 8000780:	0fff      	lsrs	r7, r7, #31
 8000782:	2b00      	cmp	r3, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fmul+0x44>
 8000786:	e070      	b.n	800086a <__aeabi_fmul+0x126>
 8000788:	2bff      	cmp	r3, #255	; 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fmul+0x4a>
 800078c:	e086      	b.n	800089c <__aeabi_fmul+0x158>
 800078e:	4642      	mov	r2, r8
 8000790:	00d0      	lsls	r0, r2, #3
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	3b7f      	subs	r3, #127	; 0x7f
 8000796:	18ed      	adds	r5, r5, r3
 8000798:	2300      	movs	r3, #0
 800079a:	04d2      	lsls	r2, r2, #19
 800079c:	4302      	orrs	r2, r0
 800079e:	4690      	mov	r8, r2
 80007a0:	469c      	mov	ip, r3
 80007a2:	0031      	movs	r1, r6
 80007a4:	464b      	mov	r3, r9
 80007a6:	4079      	eors	r1, r7
 80007a8:	1c68      	adds	r0, r5, #1
 80007aa:	2b0f      	cmp	r3, #15
 80007ac:	d81c      	bhi.n	80007e8 <__aeabi_fmul+0xa4>
 80007ae:	4a76      	ldr	r2, [pc, #472]	; (8000988 <__aeabi_fmul+0x244>)
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	58d3      	ldr	r3, [r2, r3]
 80007b4:	469f      	mov	pc, r3
 80007b6:	0039      	movs	r1, r7
 80007b8:	4644      	mov	r4, r8
 80007ba:	46e2      	mov	sl, ip
 80007bc:	4653      	mov	r3, sl
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d00f      	beq.n	80007e2 <__aeabi_fmul+0x9e>
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fmul+0x84>
 80007c6:	e0d7      	b.n	8000978 <__aeabi_fmul+0x234>
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d137      	bne.n	800083c <__aeabi_fmul+0xf8>
 80007cc:	2000      	movs	r0, #0
 80007ce:	2400      	movs	r4, #0
 80007d0:	05c0      	lsls	r0, r0, #23
 80007d2:	4320      	orrs	r0, r4
 80007d4:	07c9      	lsls	r1, r1, #31
 80007d6:	4308      	orrs	r0, r1
 80007d8:	bce0      	pop	{r5, r6, r7}
 80007da:	46ba      	mov	sl, r7
 80007dc:	46b1      	mov	r9, r6
 80007de:	46a8      	mov	r8, r5
 80007e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e2:	20ff      	movs	r0, #255	; 0xff
 80007e4:	2400      	movs	r4, #0
 80007e6:	e7f3      	b.n	80007d0 <__aeabi_fmul+0x8c>
 80007e8:	0c26      	lsrs	r6, r4, #16
 80007ea:	0424      	lsls	r4, r4, #16
 80007ec:	0c22      	lsrs	r2, r4, #16
 80007ee:	4644      	mov	r4, r8
 80007f0:	0424      	lsls	r4, r4, #16
 80007f2:	0c24      	lsrs	r4, r4, #16
 80007f4:	4643      	mov	r3, r8
 80007f6:	0027      	movs	r7, r4
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	4357      	muls	r7, r2
 80007fc:	4374      	muls	r4, r6
 80007fe:	435a      	muls	r2, r3
 8000800:	435e      	muls	r6, r3
 8000802:	1912      	adds	r2, r2, r4
 8000804:	0c3b      	lsrs	r3, r7, #16
 8000806:	189b      	adds	r3, r3, r2
 8000808:	429c      	cmp	r4, r3
 800080a:	d903      	bls.n	8000814 <__aeabi_fmul+0xd0>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	0252      	lsls	r2, r2, #9
 8000810:	4694      	mov	ip, r2
 8000812:	4466      	add	r6, ip
 8000814:	043f      	lsls	r7, r7, #16
 8000816:	041a      	lsls	r2, r3, #16
 8000818:	0c3f      	lsrs	r7, r7, #16
 800081a:	19d2      	adds	r2, r2, r7
 800081c:	0194      	lsls	r4, r2, #6
 800081e:	1e67      	subs	r7, r4, #1
 8000820:	41bc      	sbcs	r4, r7
 8000822:	0c1b      	lsrs	r3, r3, #16
 8000824:	0e92      	lsrs	r2, r2, #26
 8000826:	199b      	adds	r3, r3, r6
 8000828:	4314      	orrs	r4, r2
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	431c      	orrs	r4, r3
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	d400      	bmi.n	8000834 <__aeabi_fmul+0xf0>
 8000832:	e09b      	b.n	800096c <__aeabi_fmul+0x228>
 8000834:	2301      	movs	r3, #1
 8000836:	0862      	lsrs	r2, r4, #1
 8000838:	401c      	ands	r4, r3
 800083a:	4314      	orrs	r4, r2
 800083c:	0002      	movs	r2, r0
 800083e:	327f      	adds	r2, #127	; 0x7f
 8000840:	2a00      	cmp	r2, #0
 8000842:	dd64      	ble.n	800090e <__aeabi_fmul+0x1ca>
 8000844:	0763      	lsls	r3, r4, #29
 8000846:	d004      	beq.n	8000852 <__aeabi_fmul+0x10e>
 8000848:	230f      	movs	r3, #15
 800084a:	4023      	ands	r3, r4
 800084c:	2b04      	cmp	r3, #4
 800084e:	d000      	beq.n	8000852 <__aeabi_fmul+0x10e>
 8000850:	3404      	adds	r4, #4
 8000852:	0123      	lsls	r3, r4, #4
 8000854:	d503      	bpl.n	800085e <__aeabi_fmul+0x11a>
 8000856:	0002      	movs	r2, r0
 8000858:	4b4c      	ldr	r3, [pc, #304]	; (800098c <__aeabi_fmul+0x248>)
 800085a:	3280      	adds	r2, #128	; 0x80
 800085c:	401c      	ands	r4, r3
 800085e:	2afe      	cmp	r2, #254	; 0xfe
 8000860:	dcbf      	bgt.n	80007e2 <__aeabi_fmul+0x9e>
 8000862:	01a4      	lsls	r4, r4, #6
 8000864:	0a64      	lsrs	r4, r4, #9
 8000866:	b2d0      	uxtb	r0, r2
 8000868:	e7b2      	b.n	80007d0 <__aeabi_fmul+0x8c>
 800086a:	4643      	mov	r3, r8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d13d      	bne.n	80008ec <__aeabi_fmul+0x1a8>
 8000870:	464a      	mov	r2, r9
 8000872:	3301      	adds	r3, #1
 8000874:	431a      	orrs	r2, r3
 8000876:	4691      	mov	r9, r2
 8000878:	469c      	mov	ip, r3
 800087a:	e792      	b.n	80007a2 <__aeabi_fmul+0x5e>
 800087c:	2c00      	cmp	r4, #0
 800087e:	d129      	bne.n	80008d4 <__aeabi_fmul+0x190>
 8000880:	2304      	movs	r3, #4
 8000882:	4699      	mov	r9, r3
 8000884:	3b03      	subs	r3, #3
 8000886:	2500      	movs	r5, #0
 8000888:	469a      	mov	sl, r3
 800088a:	e774      	b.n	8000776 <__aeabi_fmul+0x32>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d11b      	bne.n	80008c8 <__aeabi_fmul+0x184>
 8000890:	2308      	movs	r3, #8
 8000892:	4699      	mov	r9, r3
 8000894:	3b06      	subs	r3, #6
 8000896:	25ff      	movs	r5, #255	; 0xff
 8000898:	469a      	mov	sl, r3
 800089a:	e76c      	b.n	8000776 <__aeabi_fmul+0x32>
 800089c:	4643      	mov	r3, r8
 800089e:	35ff      	adds	r5, #255	; 0xff
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <__aeabi_fmul+0x178>
 80008a4:	2302      	movs	r3, #2
 80008a6:	464a      	mov	r2, r9
 80008a8:	431a      	orrs	r2, r3
 80008aa:	4691      	mov	r9, r2
 80008ac:	469c      	mov	ip, r3
 80008ae:	e778      	b.n	80007a2 <__aeabi_fmul+0x5e>
 80008b0:	4653      	mov	r3, sl
 80008b2:	0031      	movs	r1, r6
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d000      	beq.n	80008ba <__aeabi_fmul+0x176>
 80008b8:	e783      	b.n	80007c2 <__aeabi_fmul+0x7e>
 80008ba:	e792      	b.n	80007e2 <__aeabi_fmul+0x9e>
 80008bc:	2303      	movs	r3, #3
 80008be:	464a      	mov	r2, r9
 80008c0:	431a      	orrs	r2, r3
 80008c2:	4691      	mov	r9, r2
 80008c4:	469c      	mov	ip, r3
 80008c6:	e76c      	b.n	80007a2 <__aeabi_fmul+0x5e>
 80008c8:	230c      	movs	r3, #12
 80008ca:	4699      	mov	r9, r3
 80008cc:	3b09      	subs	r3, #9
 80008ce:	25ff      	movs	r5, #255	; 0xff
 80008d0:	469a      	mov	sl, r3
 80008d2:	e750      	b.n	8000776 <__aeabi_fmul+0x32>
 80008d4:	0020      	movs	r0, r4
 80008d6:	f002 f967 	bl	8002ba8 <__clzsi2>
 80008da:	2576      	movs	r5, #118	; 0x76
 80008dc:	1f43      	subs	r3, r0, #5
 80008de:	409c      	lsls	r4, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	426d      	negs	r5, r5
 80008e4:	4699      	mov	r9, r3
 80008e6:	469a      	mov	sl, r3
 80008e8:	1a2d      	subs	r5, r5, r0
 80008ea:	e744      	b.n	8000776 <__aeabi_fmul+0x32>
 80008ec:	4640      	mov	r0, r8
 80008ee:	f002 f95b 	bl	8002ba8 <__clzsi2>
 80008f2:	4642      	mov	r2, r8
 80008f4:	1f43      	subs	r3, r0, #5
 80008f6:	409a      	lsls	r2, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	1a2d      	subs	r5, r5, r0
 80008fc:	4690      	mov	r8, r2
 80008fe:	469c      	mov	ip, r3
 8000900:	3d76      	subs	r5, #118	; 0x76
 8000902:	e74e      	b.n	80007a2 <__aeabi_fmul+0x5e>
 8000904:	2480      	movs	r4, #128	; 0x80
 8000906:	2100      	movs	r1, #0
 8000908:	20ff      	movs	r0, #255	; 0xff
 800090a:	03e4      	lsls	r4, r4, #15
 800090c:	e760      	b.n	80007d0 <__aeabi_fmul+0x8c>
 800090e:	2301      	movs	r3, #1
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	2b1b      	cmp	r3, #27
 8000914:	dd00      	ble.n	8000918 <__aeabi_fmul+0x1d4>
 8000916:	e759      	b.n	80007cc <__aeabi_fmul+0x88>
 8000918:	0022      	movs	r2, r4
 800091a:	309e      	adds	r0, #158	; 0x9e
 800091c:	40da      	lsrs	r2, r3
 800091e:	4084      	lsls	r4, r0
 8000920:	0013      	movs	r3, r2
 8000922:	1e62      	subs	r2, r4, #1
 8000924:	4194      	sbcs	r4, r2
 8000926:	431c      	orrs	r4, r3
 8000928:	0763      	lsls	r3, r4, #29
 800092a:	d004      	beq.n	8000936 <__aeabi_fmul+0x1f2>
 800092c:	230f      	movs	r3, #15
 800092e:	4023      	ands	r3, r4
 8000930:	2b04      	cmp	r3, #4
 8000932:	d000      	beq.n	8000936 <__aeabi_fmul+0x1f2>
 8000934:	3404      	adds	r4, #4
 8000936:	0163      	lsls	r3, r4, #5
 8000938:	d51a      	bpl.n	8000970 <__aeabi_fmul+0x22c>
 800093a:	2001      	movs	r0, #1
 800093c:	2400      	movs	r4, #0
 800093e:	e747      	b.n	80007d0 <__aeabi_fmul+0x8c>
 8000940:	2080      	movs	r0, #128	; 0x80
 8000942:	03c0      	lsls	r0, r0, #15
 8000944:	4204      	tst	r4, r0
 8000946:	d009      	beq.n	800095c <__aeabi_fmul+0x218>
 8000948:	4643      	mov	r3, r8
 800094a:	4203      	tst	r3, r0
 800094c:	d106      	bne.n	800095c <__aeabi_fmul+0x218>
 800094e:	4644      	mov	r4, r8
 8000950:	4304      	orrs	r4, r0
 8000952:	0264      	lsls	r4, r4, #9
 8000954:	0039      	movs	r1, r7
 8000956:	20ff      	movs	r0, #255	; 0xff
 8000958:	0a64      	lsrs	r4, r4, #9
 800095a:	e739      	b.n	80007d0 <__aeabi_fmul+0x8c>
 800095c:	2080      	movs	r0, #128	; 0x80
 800095e:	03c0      	lsls	r0, r0, #15
 8000960:	4304      	orrs	r4, r0
 8000962:	0264      	lsls	r4, r4, #9
 8000964:	0031      	movs	r1, r6
 8000966:	20ff      	movs	r0, #255	; 0xff
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	e731      	b.n	80007d0 <__aeabi_fmul+0x8c>
 800096c:	0028      	movs	r0, r5
 800096e:	e765      	b.n	800083c <__aeabi_fmul+0xf8>
 8000970:	01a4      	lsls	r4, r4, #6
 8000972:	2000      	movs	r0, #0
 8000974:	0a64      	lsrs	r4, r4, #9
 8000976:	e72b      	b.n	80007d0 <__aeabi_fmul+0x8c>
 8000978:	2080      	movs	r0, #128	; 0x80
 800097a:	03c0      	lsls	r0, r0, #15
 800097c:	4304      	orrs	r4, r0
 800097e:	0264      	lsls	r4, r4, #9
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a64      	lsrs	r4, r4, #9
 8000984:	e724      	b.n	80007d0 <__aeabi_fmul+0x8c>
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	08015518 	.word	0x08015518
 800098c:	f7ffffff 	.word	0xf7ffffff

08000990 <__aeabi_fsub>:
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	46ce      	mov	lr, r9
 8000994:	4647      	mov	r7, r8
 8000996:	0243      	lsls	r3, r0, #9
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	024e      	lsls	r6, r1, #9
 800099c:	00da      	lsls	r2, r3, #3
 800099e:	4694      	mov	ip, r2
 80009a0:	0a72      	lsrs	r2, r6, #9
 80009a2:	4691      	mov	r9, r2
 80009a4:	0045      	lsls	r5, r0, #1
 80009a6:	004a      	lsls	r2, r1, #1
 80009a8:	b580      	push	{r7, lr}
 80009aa:	0e2d      	lsrs	r5, r5, #24
 80009ac:	001f      	movs	r7, r3
 80009ae:	0fc4      	lsrs	r4, r0, #31
 80009b0:	0e12      	lsrs	r2, r2, #24
 80009b2:	0fc9      	lsrs	r1, r1, #31
 80009b4:	09b6      	lsrs	r6, r6, #6
 80009b6:	2aff      	cmp	r2, #255	; 0xff
 80009b8:	d05b      	beq.n	8000a72 <__aeabi_fsub+0xe2>
 80009ba:	2001      	movs	r0, #1
 80009bc:	4041      	eors	r1, r0
 80009be:	428c      	cmp	r4, r1
 80009c0:	d039      	beq.n	8000a36 <__aeabi_fsub+0xa6>
 80009c2:	1aa8      	subs	r0, r5, r2
 80009c4:	2800      	cmp	r0, #0
 80009c6:	dd5a      	ble.n	8000a7e <__aeabi_fsub+0xee>
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d06a      	beq.n	8000aa2 <__aeabi_fsub+0x112>
 80009cc:	2dff      	cmp	r5, #255	; 0xff
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fsub+0x42>
 80009d0:	e0d9      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	04d2      	lsls	r2, r2, #19
 80009d6:	4316      	orrs	r6, r2
 80009d8:	281b      	cmp	r0, #27
 80009da:	dc00      	bgt.n	80009de <__aeabi_fsub+0x4e>
 80009dc:	e0e9      	b.n	8000bb2 <__aeabi_fsub+0x222>
 80009de:	2001      	movs	r0, #1
 80009e0:	4663      	mov	r3, ip
 80009e2:	1a18      	subs	r0, r3, r0
 80009e4:	0143      	lsls	r3, r0, #5
 80009e6:	d400      	bmi.n	80009ea <__aeabi_fsub+0x5a>
 80009e8:	e0b4      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 80009ea:	0180      	lsls	r0, r0, #6
 80009ec:	0987      	lsrs	r7, r0, #6
 80009ee:	0038      	movs	r0, r7
 80009f0:	f002 f8da 	bl	8002ba8 <__clzsi2>
 80009f4:	3805      	subs	r0, #5
 80009f6:	4087      	lsls	r7, r0
 80009f8:	4285      	cmp	r5, r0
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_fsub+0x6e>
 80009fc:	e0cc      	b.n	8000b98 <__aeabi_fsub+0x208>
 80009fe:	1a2d      	subs	r5, r5, r0
 8000a00:	48b5      	ldr	r0, [pc, #724]	; (8000cd8 <__aeabi_fsub+0x348>)
 8000a02:	4038      	ands	r0, r7
 8000a04:	0743      	lsls	r3, r0, #29
 8000a06:	d004      	beq.n	8000a12 <__aeabi_fsub+0x82>
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4003      	ands	r3, r0
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fsub+0x82>
 8000a10:	3004      	adds	r0, #4
 8000a12:	0143      	lsls	r3, r0, #5
 8000a14:	d400      	bmi.n	8000a18 <__aeabi_fsub+0x88>
 8000a16:	e0a0      	b.n	8000b5a <__aeabi_fsub+0x1ca>
 8000a18:	1c6a      	adds	r2, r5, #1
 8000a1a:	2dfe      	cmp	r5, #254	; 0xfe
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fsub+0x90>
 8000a1e:	e08d      	b.n	8000b3c <__aeabi_fsub+0x1ac>
 8000a20:	0180      	lsls	r0, r0, #6
 8000a22:	0a47      	lsrs	r7, r0, #9
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	05d0      	lsls	r0, r2, #23
 8000a28:	4338      	orrs	r0, r7
 8000a2a:	07e4      	lsls	r4, r4, #31
 8000a2c:	4320      	orrs	r0, r4
 8000a2e:	bcc0      	pop	{r6, r7}
 8000a30:	46b9      	mov	r9, r7
 8000a32:	46b0      	mov	r8, r6
 8000a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a36:	1aa8      	subs	r0, r5, r2
 8000a38:	4680      	mov	r8, r0
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	dd45      	ble.n	8000aca <__aeabi_fsub+0x13a>
 8000a3e:	2a00      	cmp	r2, #0
 8000a40:	d070      	beq.n	8000b24 <__aeabi_fsub+0x194>
 8000a42:	2dff      	cmp	r5, #255	; 0xff
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0xb8>
 8000a46:	e09e      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	04db      	lsls	r3, r3, #19
 8000a4c:	431e      	orrs	r6, r3
 8000a4e:	4643      	mov	r3, r8
 8000a50:	2b1b      	cmp	r3, #27
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0xc6>
 8000a54:	e0d2      	b.n	8000bfc <__aeabi_fsub+0x26c>
 8000a56:	2001      	movs	r0, #1
 8000a58:	4460      	add	r0, ip
 8000a5a:	0143      	lsls	r3, r0, #5
 8000a5c:	d57a      	bpl.n	8000b54 <__aeabi_fsub+0x1c4>
 8000a5e:	3501      	adds	r5, #1
 8000a60:	2dff      	cmp	r5, #255	; 0xff
 8000a62:	d06b      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000a64:	2301      	movs	r3, #1
 8000a66:	4a9d      	ldr	r2, [pc, #628]	; (8000cdc <__aeabi_fsub+0x34c>)
 8000a68:	4003      	ands	r3, r0
 8000a6a:	0840      	lsrs	r0, r0, #1
 8000a6c:	4010      	ands	r0, r2
 8000a6e:	4318      	orrs	r0, r3
 8000a70:	e7c8      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000a72:	2e00      	cmp	r6, #0
 8000a74:	d020      	beq.n	8000ab8 <__aeabi_fsub+0x128>
 8000a76:	428c      	cmp	r4, r1
 8000a78:	d023      	beq.n	8000ac2 <__aeabi_fsub+0x132>
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	38ff      	subs	r0, #255	; 0xff
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d039      	beq.n	8000af6 <__aeabi_fsub+0x166>
 8000a82:	1b57      	subs	r7, r2, r5
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0xfa>
 8000a88:	e09d      	b.n	8000bc6 <__aeabi_fsub+0x236>
 8000a8a:	4663      	mov	r3, ip
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0x102>
 8000a90:	e0db      	b.n	8000c4a <__aeabi_fsub+0x2ba>
 8000a92:	1e7b      	subs	r3, r7, #1
 8000a94:	2f01      	cmp	r7, #1
 8000a96:	d100      	bne.n	8000a9a <__aeabi_fsub+0x10a>
 8000a98:	e10d      	b.n	8000cb6 <__aeabi_fsub+0x326>
 8000a9a:	2fff      	cmp	r7, #255	; 0xff
 8000a9c:	d071      	beq.n	8000b82 <__aeabi_fsub+0x1f2>
 8000a9e:	001f      	movs	r7, r3
 8000aa0:	e098      	b.n	8000bd4 <__aeabi_fsub+0x244>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x118>
 8000aa6:	e0a7      	b.n	8000bf8 <__aeabi_fsub+0x268>
 8000aa8:	1e42      	subs	r2, r0, #1
 8000aaa:	2801      	cmp	r0, #1
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x120>
 8000aae:	e0e6      	b.n	8000c7e <__aeabi_fsub+0x2ee>
 8000ab0:	28ff      	cmp	r0, #255	; 0xff
 8000ab2:	d068      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000ab4:	0010      	movs	r0, r2
 8000ab6:	e78f      	b.n	80009d8 <__aeabi_fsub+0x48>
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4041      	eors	r1, r0
 8000abc:	42a1      	cmp	r1, r4
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x132>
 8000ac0:	e77f      	b.n	80009c2 <__aeabi_fsub+0x32>
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	4240      	negs	r0, r0
 8000ac6:	4680      	mov	r8, r0
 8000ac8:	44a8      	add	r8, r5
 8000aca:	4640      	mov	r0, r8
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d038      	beq.n	8000b42 <__aeabi_fsub+0x1b2>
 8000ad0:	1b51      	subs	r1, r2, r5
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_fsub+0x148>
 8000ad6:	e0ae      	b.n	8000c36 <__aeabi_fsub+0x2a6>
 8000ad8:	2aff      	cmp	r2, #255	; 0xff
 8000ada:	d100      	bne.n	8000ade <__aeabi_fsub+0x14e>
 8000adc:	e0df      	b.n	8000c9e <__aeabi_fsub+0x30e>
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	4660      	mov	r0, ip
 8000ae2:	04db      	lsls	r3, r3, #19
 8000ae4:	4318      	orrs	r0, r3
 8000ae6:	4684      	mov	ip, r0
 8000ae8:	291b      	cmp	r1, #27
 8000aea:	dc00      	bgt.n	8000aee <__aeabi_fsub+0x15e>
 8000aec:	e0d9      	b.n	8000ca2 <__aeabi_fsub+0x312>
 8000aee:	2001      	movs	r0, #1
 8000af0:	0015      	movs	r5, r2
 8000af2:	1980      	adds	r0, r0, r6
 8000af4:	e7b1      	b.n	8000a5a <__aeabi_fsub+0xca>
 8000af6:	20fe      	movs	r0, #254	; 0xfe
 8000af8:	1c6a      	adds	r2, r5, #1
 8000afa:	4210      	tst	r0, r2
 8000afc:	d171      	bne.n	8000be2 <__aeabi_fsub+0x252>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fsub+0x174>
 8000b02:	e0a6      	b.n	8000c52 <__aeabi_fsub+0x2c2>
 8000b04:	4663      	mov	r3, ip
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x17c>
 8000b0a:	e0d9      	b.n	8000cc0 <__aeabi_fsub+0x330>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x184>
 8000b12:	e788      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b14:	1b98      	subs	r0, r3, r6
 8000b16:	0143      	lsls	r3, r0, #5
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_fsub+0x18c>
 8000b1a:	e0e1      	b.n	8000ce0 <__aeabi_fsub+0x350>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	000c      	movs	r4, r1
 8000b20:	1af0      	subs	r0, r6, r3
 8000b22:	e76f      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_fsub+0x19a>
 8000b28:	e0b7      	b.n	8000c9a <__aeabi_fsub+0x30a>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	2801      	cmp	r0, #1
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x1a4>
 8000b32:	e09c      	b.n	8000c6e <__aeabi_fsub+0x2de>
 8000b34:	28ff      	cmp	r0, #255	; 0xff
 8000b36:	d026      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b38:	4690      	mov	r8, r2
 8000b3a:	e788      	b.n	8000a4e <__aeabi_fsub+0xbe>
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	2700      	movs	r7, #0
 8000b40:	e771      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b42:	20fe      	movs	r0, #254	; 0xfe
 8000b44:	1c6a      	adds	r2, r5, #1
 8000b46:	4210      	tst	r0, r2
 8000b48:	d064      	beq.n	8000c14 <__aeabi_fsub+0x284>
 8000b4a:	2aff      	cmp	r2, #255	; 0xff
 8000b4c:	d0f6      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000b4e:	0015      	movs	r5, r2
 8000b50:	4466      	add	r6, ip
 8000b52:	0870      	lsrs	r0, r6, #1
 8000b54:	0743      	lsls	r3, r0, #29
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x1ca>
 8000b58:	e756      	b.n	8000a08 <__aeabi_fsub+0x78>
 8000b5a:	08c3      	lsrs	r3, r0, #3
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d012      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b60:	025b      	lsls	r3, r3, #9
 8000b62:	0a5f      	lsrs	r7, r3, #9
 8000b64:	b2ea      	uxtb	r2, r5
 8000b66:	e75e      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b68:	4662      	mov	r2, ip
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fsub+0x1e0>
 8000b6e:	e096      	b.n	8000c9e <__aeabi_fsub+0x30e>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d008      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	03d2      	lsls	r2, r2, #15
 8000b78:	4213      	tst	r3, r2
 8000b7a:	d004      	beq.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b7c:	4648      	mov	r0, r9
 8000b7e:	4210      	tst	r0, r2
 8000b80:	d101      	bne.n	8000b86 <__aeabi_fsub+0x1f6>
 8000b82:	000c      	movs	r4, r1
 8000b84:	464b      	mov	r3, r9
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0d8      	beq.n	8000b3c <__aeabi_fsub+0x1ac>
 8000b8a:	2780      	movs	r7, #128	; 0x80
 8000b8c:	03ff      	lsls	r7, r7, #15
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	027f      	lsls	r7, r7, #9
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	0a7f      	lsrs	r7, r7, #9
 8000b96:	e746      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000b98:	2320      	movs	r3, #32
 8000b9a:	003a      	movs	r2, r7
 8000b9c:	1b45      	subs	r5, r0, r5
 8000b9e:	0038      	movs	r0, r7
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	40ea      	lsrs	r2, r5
 8000ba4:	1b5d      	subs	r5, r3, r5
 8000ba6:	40a8      	lsls	r0, r5
 8000ba8:	1e43      	subs	r3, r0, #1
 8000baa:	4198      	sbcs	r0, r3
 8000bac:	2500      	movs	r5, #0
 8000bae:	4310      	orrs	r0, r2
 8000bb0:	e728      	b.n	8000a04 <__aeabi_fsub+0x74>
 8000bb2:	2320      	movs	r3, #32
 8000bb4:	1a1b      	subs	r3, r3, r0
 8000bb6:	0032      	movs	r2, r6
 8000bb8:	409e      	lsls	r6, r3
 8000bba:	40c2      	lsrs	r2, r0
 8000bbc:	0030      	movs	r0, r6
 8000bbe:	1e43      	subs	r3, r0, #1
 8000bc0:	4198      	sbcs	r0, r3
 8000bc2:	4310      	orrs	r0, r2
 8000bc4:	e70c      	b.n	80009e0 <__aeabi_fsub+0x50>
 8000bc6:	2aff      	cmp	r2, #255	; 0xff
 8000bc8:	d0db      	beq.n	8000b82 <__aeabi_fsub+0x1f2>
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	4660      	mov	r0, ip
 8000bce:	04db      	lsls	r3, r3, #19
 8000bd0:	4318      	orrs	r0, r3
 8000bd2:	4684      	mov	ip, r0
 8000bd4:	2f1b      	cmp	r7, #27
 8000bd6:	dd56      	ble.n	8000c86 <__aeabi_fsub+0x2f6>
 8000bd8:	2001      	movs	r0, #1
 8000bda:	000c      	movs	r4, r1
 8000bdc:	0015      	movs	r5, r2
 8000bde:	1a30      	subs	r0, r6, r0
 8000be0:	e700      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000be2:	4663      	mov	r3, ip
 8000be4:	1b9f      	subs	r7, r3, r6
 8000be6:	017b      	lsls	r3, r7, #5
 8000be8:	d43d      	bmi.n	8000c66 <__aeabi_fsub+0x2d6>
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_fsub+0x260>
 8000bee:	e6fe      	b.n	80009ee <__aeabi_fsub+0x5e>
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e716      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000bf8:	0005      	movs	r5, r0
 8000bfa:	e7af      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000bfc:	0032      	movs	r2, r6
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4641      	mov	r1, r8
 8000c02:	40da      	lsrs	r2, r3
 8000c04:	2320      	movs	r3, #32
 8000c06:	1a5b      	subs	r3, r3, r1
 8000c08:	409e      	lsls	r6, r3
 8000c0a:	0030      	movs	r0, r6
 8000c0c:	1e43      	subs	r3, r0, #1
 8000c0e:	4198      	sbcs	r0, r3
 8000c10:	4310      	orrs	r0, r2
 8000c12:	e721      	b.n	8000a58 <__aeabi_fsub+0xc8>
 8000c14:	2d00      	cmp	r5, #0
 8000c16:	d1a7      	bne.n	8000b68 <__aeabi_fsub+0x1d8>
 8000c18:	4663      	mov	r3, ip
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d059      	beq.n	8000cd2 <__aeabi_fsub+0x342>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_fsub+0x296>
 8000c24:	e6ff      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000c26:	0030      	movs	r0, r6
 8000c28:	4460      	add	r0, ip
 8000c2a:	0143      	lsls	r3, r0, #5
 8000c2c:	d592      	bpl.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <__aeabi_fsub+0x348>)
 8000c30:	3501      	adds	r5, #1
 8000c32:	4018      	ands	r0, r3
 8000c34:	e78e      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c36:	4663      	mov	r3, ip
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d047      	beq.n	8000ccc <__aeabi_fsub+0x33c>
 8000c3c:	1e4b      	subs	r3, r1, #1
 8000c3e:	2901      	cmp	r1, #1
 8000c40:	d015      	beq.n	8000c6e <__aeabi_fsub+0x2de>
 8000c42:	29ff      	cmp	r1, #255	; 0xff
 8000c44:	d02b      	beq.n	8000c9e <__aeabi_fsub+0x30e>
 8000c46:	0019      	movs	r1, r3
 8000c48:	e74e      	b.n	8000ae8 <__aeabi_fsub+0x158>
 8000c4a:	000c      	movs	r4, r1
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	003d      	movs	r5, r7
 8000c50:	e784      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000c52:	4662      	mov	r2, ip
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d18b      	bne.n	8000b70 <__aeabi_fsub+0x1e0>
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d192      	bne.n	8000b82 <__aeabi_fsub+0x1f2>
 8000c5c:	2780      	movs	r7, #128	; 0x80
 8000c5e:	2400      	movs	r4, #0
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	03ff      	lsls	r7, r7, #15
 8000c64:	e6df      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000c66:	4663      	mov	r3, ip
 8000c68:	000c      	movs	r4, r1
 8000c6a:	1af7      	subs	r7, r6, r3
 8000c6c:	e6bf      	b.n	80009ee <__aeabi_fsub+0x5e>
 8000c6e:	0030      	movs	r0, r6
 8000c70:	4460      	add	r0, ip
 8000c72:	2501      	movs	r5, #1
 8000c74:	0143      	lsls	r3, r0, #5
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_fsub+0x2ea>
 8000c78:	e76c      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000c7a:	2502      	movs	r5, #2
 8000c7c:	e6f2      	b.n	8000a64 <__aeabi_fsub+0xd4>
 8000c7e:	4663      	mov	r3, ip
 8000c80:	2501      	movs	r5, #1
 8000c82:	1b98      	subs	r0, r3, r6
 8000c84:	e6ae      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000c86:	2320      	movs	r3, #32
 8000c88:	4664      	mov	r4, ip
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	40fc      	lsrs	r4, r7
 8000c8e:	1bdf      	subs	r7, r3, r7
 8000c90:	40b8      	lsls	r0, r7
 8000c92:	1e43      	subs	r3, r0, #1
 8000c94:	4198      	sbcs	r0, r3
 8000c96:	4320      	orrs	r0, r4
 8000c98:	e79f      	b.n	8000bda <__aeabi_fsub+0x24a>
 8000c9a:	0005      	movs	r5, r0
 8000c9c:	e75e      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	e771      	b.n	8000b86 <__aeabi_fsub+0x1f6>
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	4665      	mov	r5, ip
 8000ca6:	4660      	mov	r0, ip
 8000ca8:	40cd      	lsrs	r5, r1
 8000caa:	1a59      	subs	r1, r3, r1
 8000cac:	4088      	lsls	r0, r1
 8000cae:	1e43      	subs	r3, r0, #1
 8000cb0:	4198      	sbcs	r0, r3
 8000cb2:	4328      	orrs	r0, r5
 8000cb4:	e71c      	b.n	8000af0 <__aeabi_fsub+0x160>
 8000cb6:	4663      	mov	r3, ip
 8000cb8:	000c      	movs	r4, r1
 8000cba:	2501      	movs	r5, #1
 8000cbc:	1af0      	subs	r0, r6, r3
 8000cbe:	e691      	b.n	80009e4 <__aeabi_fsub+0x54>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d095      	beq.n	8000bf0 <__aeabi_fsub+0x260>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	464f      	mov	r7, r9
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e6ac      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000ccc:	464b      	mov	r3, r9
 8000cce:	000d      	movs	r5, r1
 8000cd0:	e744      	b.n	8000b5c <__aeabi_fsub+0x1cc>
 8000cd2:	464f      	mov	r7, r9
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e6a6      	b.n	8000a26 <__aeabi_fsub+0x96>
 8000cd8:	fbffffff 	.word	0xfbffffff
 8000cdc:	7dffffff 	.word	0x7dffffff
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d000      	beq.n	8000ce6 <__aeabi_fsub+0x356>
 8000ce4:	e736      	b.n	8000b54 <__aeabi_fsub+0x1c4>
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e69c      	b.n	8000a26 <__aeabi_fsub+0x96>

08000cec <__aeabi_f2iz>:
 8000cec:	0241      	lsls	r1, r0, #9
 8000cee:	0042      	lsls	r2, r0, #1
 8000cf0:	0fc3      	lsrs	r3, r0, #31
 8000cf2:	0a49      	lsrs	r1, r1, #9
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	0e12      	lsrs	r2, r2, #24
 8000cf8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cfa:	dd03      	ble.n	8000d04 <__aeabi_f2iz+0x18>
 8000cfc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cfe:	dd02      	ble.n	8000d06 <__aeabi_f2iz+0x1a>
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <__aeabi_f2iz+0x3c>)
 8000d02:	1898      	adds	r0, r3, r2
 8000d04:	4770      	bx	lr
 8000d06:	2080      	movs	r0, #128	; 0x80
 8000d08:	0400      	lsls	r0, r0, #16
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	2a95      	cmp	r2, #149	; 0x95
 8000d0e:	dc07      	bgt.n	8000d20 <__aeabi_f2iz+0x34>
 8000d10:	2096      	movs	r0, #150	; 0x96
 8000d12:	1a82      	subs	r2, r0, r2
 8000d14:	40d1      	lsrs	r1, r2
 8000d16:	4248      	negs	r0, r1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f3      	bne.n	8000d04 <__aeabi_f2iz+0x18>
 8000d1c:	0008      	movs	r0, r1
 8000d1e:	e7f1      	b.n	8000d04 <__aeabi_f2iz+0x18>
 8000d20:	3a96      	subs	r2, #150	; 0x96
 8000d22:	4091      	lsls	r1, r2
 8000d24:	e7f7      	b.n	8000d16 <__aeabi_f2iz+0x2a>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	7fffffff 	.word	0x7fffffff

08000d2c <__aeabi_i2f>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d013      	beq.n	8000d5a <__aeabi_i2f+0x2e>
 8000d32:	17c3      	asrs	r3, r0, #31
 8000d34:	18c6      	adds	r6, r0, r3
 8000d36:	405e      	eors	r6, r3
 8000d38:	0fc4      	lsrs	r4, r0, #31
 8000d3a:	0030      	movs	r0, r6
 8000d3c:	f001 ff34 	bl	8002ba8 <__clzsi2>
 8000d40:	239e      	movs	r3, #158	; 0x9e
 8000d42:	0005      	movs	r5, r0
 8000d44:	1a1b      	subs	r3, r3, r0
 8000d46:	2b96      	cmp	r3, #150	; 0x96
 8000d48:	dc0f      	bgt.n	8000d6a <__aeabi_i2f+0x3e>
 8000d4a:	2808      	cmp	r0, #8
 8000d4c:	dd01      	ble.n	8000d52 <__aeabi_i2f+0x26>
 8000d4e:	3d08      	subs	r5, #8
 8000d50:	40ae      	lsls	r6, r5
 8000d52:	0276      	lsls	r6, r6, #9
 8000d54:	0a76      	lsrs	r6, r6, #9
 8000d56:	b2d8      	uxtb	r0, r3
 8000d58:	e002      	b.n	8000d60 <__aeabi_i2f+0x34>
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	2600      	movs	r6, #0
 8000d60:	05c0      	lsls	r0, r0, #23
 8000d62:	4330      	orrs	r0, r6
 8000d64:	07e4      	lsls	r4, r4, #31
 8000d66:	4320      	orrs	r0, r4
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6a:	2b99      	cmp	r3, #153	; 0x99
 8000d6c:	dd0c      	ble.n	8000d88 <__aeabi_i2f+0x5c>
 8000d6e:	2205      	movs	r2, #5
 8000d70:	0031      	movs	r1, r6
 8000d72:	1a12      	subs	r2, r2, r0
 8000d74:	40d1      	lsrs	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	0001      	movs	r1, r0
 8000d7a:	0030      	movs	r0, r6
 8000d7c:	311b      	adds	r1, #27
 8000d7e:	4088      	lsls	r0, r1
 8000d80:	1e41      	subs	r1, r0, #1
 8000d82:	4188      	sbcs	r0, r1
 8000d84:	4302      	orrs	r2, r0
 8000d86:	0016      	movs	r6, r2
 8000d88:	2d05      	cmp	r5, #5
 8000d8a:	dc12      	bgt.n	8000db2 <__aeabi_i2f+0x86>
 8000d8c:	0031      	movs	r1, r6
 8000d8e:	4f0d      	ldr	r7, [pc, #52]	; (8000dc4 <__aeabi_i2f+0x98>)
 8000d90:	4039      	ands	r1, r7
 8000d92:	0772      	lsls	r2, r6, #29
 8000d94:	d009      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000d96:	200f      	movs	r0, #15
 8000d98:	4030      	ands	r0, r6
 8000d9a:	2804      	cmp	r0, #4
 8000d9c:	d005      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000d9e:	3104      	adds	r1, #4
 8000da0:	014a      	lsls	r2, r1, #5
 8000da2:	d502      	bpl.n	8000daa <__aeabi_i2f+0x7e>
 8000da4:	239f      	movs	r3, #159	; 0x9f
 8000da6:	4039      	ands	r1, r7
 8000da8:	1b5b      	subs	r3, r3, r5
 8000daa:	0189      	lsls	r1, r1, #6
 8000dac:	0a4e      	lsrs	r6, r1, #9
 8000dae:	b2d8      	uxtb	r0, r3
 8000db0:	e7d6      	b.n	8000d60 <__aeabi_i2f+0x34>
 8000db2:	1f6a      	subs	r2, r5, #5
 8000db4:	4096      	lsls	r6, r2
 8000db6:	0031      	movs	r1, r6
 8000db8:	4f02      	ldr	r7, [pc, #8]	; (8000dc4 <__aeabi_i2f+0x98>)
 8000dba:	4039      	ands	r1, r7
 8000dbc:	0772      	lsls	r2, r6, #29
 8000dbe:	d0f4      	beq.n	8000daa <__aeabi_i2f+0x7e>
 8000dc0:	e7e9      	b.n	8000d96 <__aeabi_i2f+0x6a>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	fbffffff 	.word	0xfbffffff

08000dc8 <__aeabi_dadd>:
 8000dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dca:	464f      	mov	r7, r9
 8000dcc:	4646      	mov	r6, r8
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	000d      	movs	r5, r1
 8000dd2:	0004      	movs	r4, r0
 8000dd4:	b5c0      	push	{r6, r7, lr}
 8000dd6:	001f      	movs	r7, r3
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0328      	lsls	r0, r5, #12
 8000ddc:	0f62      	lsrs	r2, r4, #29
 8000dde:	0a40      	lsrs	r0, r0, #9
 8000de0:	4310      	orrs	r0, r2
 8000de2:	007a      	lsls	r2, r7, #1
 8000de4:	0d52      	lsrs	r2, r2, #21
 8000de6:	00e3      	lsls	r3, r4, #3
 8000de8:	033c      	lsls	r4, r7, #12
 8000dea:	4691      	mov	r9, r2
 8000dec:	0a64      	lsrs	r4, r4, #9
 8000dee:	0ffa      	lsrs	r2, r7, #31
 8000df0:	0f4f      	lsrs	r7, r1, #29
 8000df2:	006e      	lsls	r6, r5, #1
 8000df4:	4327      	orrs	r7, r4
 8000df6:	4692      	mov	sl, r2
 8000df8:	46b8      	mov	r8, r7
 8000dfa:	0d76      	lsrs	r6, r6, #21
 8000dfc:	0fed      	lsrs	r5, r5, #31
 8000dfe:	00c9      	lsls	r1, r1, #3
 8000e00:	4295      	cmp	r5, r2
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x3e>
 8000e04:	e099      	b.n	8000f3a <__aeabi_dadd+0x172>
 8000e06:	464c      	mov	r4, r9
 8000e08:	1b34      	subs	r4, r6, r4
 8000e0a:	46a4      	mov	ip, r4
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	dc00      	bgt.n	8000e12 <__aeabi_dadd+0x4a>
 8000e10:	e07c      	b.n	8000f0c <__aeabi_dadd+0x144>
 8000e12:	464a      	mov	r2, r9
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_dadd+0x52>
 8000e18:	e0b8      	b.n	8000f8c <__aeabi_dadd+0x1c4>
 8000e1a:	4ac5      	ldr	r2, [pc, #788]	; (8001130 <__aeabi_dadd+0x368>)
 8000e1c:	4296      	cmp	r6, r2
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dadd+0x5a>
 8000e20:	e11c      	b.n	800105c <__aeabi_dadd+0x294>
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	003c      	movs	r4, r7
 8000e26:	0412      	lsls	r2, r2, #16
 8000e28:	4314      	orrs	r4, r2
 8000e2a:	46a0      	mov	r8, r4
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	2a38      	cmp	r2, #56	; 0x38
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_dadd+0x6c>
 8000e32:	e161      	b.n	80010f8 <__aeabi_dadd+0x330>
 8000e34:	2a1f      	cmp	r2, #31
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dadd+0x72>
 8000e38:	e1cc      	b.n	80011d4 <__aeabi_dadd+0x40c>
 8000e3a:	4664      	mov	r4, ip
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	1b12      	subs	r2, r2, r4
 8000e40:	4644      	mov	r4, r8
 8000e42:	4094      	lsls	r4, r2
 8000e44:	000f      	movs	r7, r1
 8000e46:	46a1      	mov	r9, r4
 8000e48:	4664      	mov	r4, ip
 8000e4a:	4091      	lsls	r1, r2
 8000e4c:	40e7      	lsrs	r7, r4
 8000e4e:	464c      	mov	r4, r9
 8000e50:	1e4a      	subs	r2, r1, #1
 8000e52:	4191      	sbcs	r1, r2
 8000e54:	433c      	orrs	r4, r7
 8000e56:	4642      	mov	r2, r8
 8000e58:	4321      	orrs	r1, r4
 8000e5a:	4664      	mov	r4, ip
 8000e5c:	40e2      	lsrs	r2, r4
 8000e5e:	1a80      	subs	r0, r0, r2
 8000e60:	1a5c      	subs	r4, r3, r1
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	419b      	sbcs	r3, r3
 8000e66:	425f      	negs	r7, r3
 8000e68:	1bc7      	subs	r7, r0, r7
 8000e6a:	023b      	lsls	r3, r7, #8
 8000e6c:	d400      	bmi.n	8000e70 <__aeabi_dadd+0xa8>
 8000e6e:	e0d0      	b.n	8001012 <__aeabi_dadd+0x24a>
 8000e70:	027f      	lsls	r7, r7, #9
 8000e72:	0a7f      	lsrs	r7, r7, #9
 8000e74:	2f00      	cmp	r7, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dadd+0xb2>
 8000e78:	e0ff      	b.n	800107a <__aeabi_dadd+0x2b2>
 8000e7a:	0038      	movs	r0, r7
 8000e7c:	f001 fe94 	bl	8002ba8 <__clzsi2>
 8000e80:	0001      	movs	r1, r0
 8000e82:	3908      	subs	r1, #8
 8000e84:	2320      	movs	r3, #32
 8000e86:	0022      	movs	r2, r4
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	408f      	lsls	r7, r1
 8000e8c:	40da      	lsrs	r2, r3
 8000e8e:	408c      	lsls	r4, r1
 8000e90:	4317      	orrs	r7, r2
 8000e92:	42b1      	cmp	r1, r6
 8000e94:	da00      	bge.n	8000e98 <__aeabi_dadd+0xd0>
 8000e96:	e0ff      	b.n	8001098 <__aeabi_dadd+0x2d0>
 8000e98:	1b89      	subs	r1, r1, r6
 8000e9a:	1c4b      	adds	r3, r1, #1
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	dd00      	ble.n	8000ea2 <__aeabi_dadd+0xda>
 8000ea0:	e0a8      	b.n	8000ff4 <__aeabi_dadd+0x22c>
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	0039      	movs	r1, r7
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	0020      	movs	r0, r4
 8000eaa:	4094      	lsls	r4, r2
 8000eac:	4091      	lsls	r1, r2
 8000eae:	40d8      	lsrs	r0, r3
 8000eb0:	1e62      	subs	r2, r4, #1
 8000eb2:	4194      	sbcs	r4, r2
 8000eb4:	40df      	lsrs	r7, r3
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4301      	orrs	r1, r0
 8000eba:	430c      	orrs	r4, r1
 8000ebc:	0763      	lsls	r3, r4, #29
 8000ebe:	d009      	beq.n	8000ed4 <__aeabi_dadd+0x10c>
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	4023      	ands	r3, r4
 8000ec4:	2b04      	cmp	r3, #4
 8000ec6:	d005      	beq.n	8000ed4 <__aeabi_dadd+0x10c>
 8000ec8:	1d23      	adds	r3, r4, #4
 8000eca:	42a3      	cmp	r3, r4
 8000ecc:	41a4      	sbcs	r4, r4
 8000ece:	4264      	negs	r4, r4
 8000ed0:	193f      	adds	r7, r7, r4
 8000ed2:	001c      	movs	r4, r3
 8000ed4:	023b      	lsls	r3, r7, #8
 8000ed6:	d400      	bmi.n	8000eda <__aeabi_dadd+0x112>
 8000ed8:	e09e      	b.n	8001018 <__aeabi_dadd+0x250>
 8000eda:	4b95      	ldr	r3, [pc, #596]	; (8001130 <__aeabi_dadd+0x368>)
 8000edc:	3601      	adds	r6, #1
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x11c>
 8000ee2:	e0b7      	b.n	8001054 <__aeabi_dadd+0x28c>
 8000ee4:	4a93      	ldr	r2, [pc, #588]	; (8001134 <__aeabi_dadd+0x36c>)
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	4017      	ands	r7, r2
 8000eea:	077b      	lsls	r3, r7, #29
 8000eec:	0571      	lsls	r1, r6, #21
 8000eee:	027f      	lsls	r7, r7, #9
 8000ef0:	4323      	orrs	r3, r4
 8000ef2:	0b3f      	lsrs	r7, r7, #12
 8000ef4:	0d4a      	lsrs	r2, r1, #21
 8000ef6:	0512      	lsls	r2, r2, #20
 8000ef8:	433a      	orrs	r2, r7
 8000efa:	07ed      	lsls	r5, r5, #31
 8000efc:	432a      	orrs	r2, r5
 8000efe:	0018      	movs	r0, r3
 8000f00:	0011      	movs	r1, r2
 8000f02:	bce0      	pop	{r5, r6, r7}
 8000f04:	46ba      	mov	sl, r7
 8000f06:	46b1      	mov	r9, r6
 8000f08:	46a8      	mov	r8, r5
 8000f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d04b      	beq.n	8000fa8 <__aeabi_dadd+0x1e0>
 8000f10:	464c      	mov	r4, r9
 8000f12:	1ba4      	subs	r4, r4, r6
 8000f14:	46a4      	mov	ip, r4
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dadd+0x154>
 8000f1a:	e123      	b.n	8001164 <__aeabi_dadd+0x39c>
 8000f1c:	0004      	movs	r4, r0
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x15c>
 8000f22:	e1af      	b.n	8001284 <__aeabi_dadd+0x4bc>
 8000f24:	4662      	mov	r2, ip
 8000f26:	1e54      	subs	r4, r2, #1
 8000f28:	2a01      	cmp	r2, #1
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x166>
 8000f2c:	e215      	b.n	800135a <__aeabi_dadd+0x592>
 8000f2e:	4d80      	ldr	r5, [pc, #512]	; (8001130 <__aeabi_dadd+0x368>)
 8000f30:	45ac      	cmp	ip, r5
 8000f32:	d100      	bne.n	8000f36 <__aeabi_dadd+0x16e>
 8000f34:	e1c8      	b.n	80012c8 <__aeabi_dadd+0x500>
 8000f36:	46a4      	mov	ip, r4
 8000f38:	e11b      	b.n	8001172 <__aeabi_dadd+0x3aa>
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	1ab2      	subs	r2, r6, r2
 8000f3e:	4694      	mov	ip, r2
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_dadd+0x17e>
 8000f44:	e0ac      	b.n	80010a0 <__aeabi_dadd+0x2d8>
 8000f46:	464a      	mov	r2, r9
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d043      	beq.n	8000fd4 <__aeabi_dadd+0x20c>
 8000f4c:	4a78      	ldr	r2, [pc, #480]	; (8001130 <__aeabi_dadd+0x368>)
 8000f4e:	4296      	cmp	r6, r2
 8000f50:	d100      	bne.n	8000f54 <__aeabi_dadd+0x18c>
 8000f52:	e1af      	b.n	80012b4 <__aeabi_dadd+0x4ec>
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	003c      	movs	r4, r7
 8000f58:	0412      	lsls	r2, r2, #16
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	46a0      	mov	r8, r4
 8000f5e:	4662      	mov	r2, ip
 8000f60:	2a38      	cmp	r2, #56	; 0x38
 8000f62:	dc67      	bgt.n	8001034 <__aeabi_dadd+0x26c>
 8000f64:	2a1f      	cmp	r2, #31
 8000f66:	dc00      	bgt.n	8000f6a <__aeabi_dadd+0x1a2>
 8000f68:	e15f      	b.n	800122a <__aeabi_dadd+0x462>
 8000f6a:	4647      	mov	r7, r8
 8000f6c:	3a20      	subs	r2, #32
 8000f6e:	40d7      	lsrs	r7, r2
 8000f70:	4662      	mov	r2, ip
 8000f72:	2a20      	cmp	r2, #32
 8000f74:	d005      	beq.n	8000f82 <__aeabi_dadd+0x1ba>
 8000f76:	4664      	mov	r4, ip
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	1b12      	subs	r2, r2, r4
 8000f7c:	4644      	mov	r4, r8
 8000f7e:	4094      	lsls	r4, r2
 8000f80:	4321      	orrs	r1, r4
 8000f82:	1e4a      	subs	r2, r1, #1
 8000f84:	4191      	sbcs	r1, r2
 8000f86:	000c      	movs	r4, r1
 8000f88:	433c      	orrs	r4, r7
 8000f8a:	e057      	b.n	800103c <__aeabi_dadd+0x274>
 8000f8c:	003a      	movs	r2, r7
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_dadd+0x1cc>
 8000f92:	e105      	b.n	80011a0 <__aeabi_dadd+0x3d8>
 8000f94:	0022      	movs	r2, r4
 8000f96:	3a01      	subs	r2, #1
 8000f98:	2c01      	cmp	r4, #1
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x1d6>
 8000f9c:	e182      	b.n	80012a4 <__aeabi_dadd+0x4dc>
 8000f9e:	4c64      	ldr	r4, [pc, #400]	; (8001130 <__aeabi_dadd+0x368>)
 8000fa0:	45a4      	cmp	ip, r4
 8000fa2:	d05b      	beq.n	800105c <__aeabi_dadd+0x294>
 8000fa4:	4694      	mov	ip, r2
 8000fa6:	e741      	b.n	8000e2c <__aeabi_dadd+0x64>
 8000fa8:	4c63      	ldr	r4, [pc, #396]	; (8001138 <__aeabi_dadd+0x370>)
 8000faa:	1c77      	adds	r7, r6, #1
 8000fac:	4227      	tst	r7, r4
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_dadd+0x1ea>
 8000fb0:	e0c4      	b.n	800113c <__aeabi_dadd+0x374>
 8000fb2:	0004      	movs	r4, r0
 8000fb4:	431c      	orrs	r4, r3
 8000fb6:	2e00      	cmp	r6, #0
 8000fb8:	d000      	beq.n	8000fbc <__aeabi_dadd+0x1f4>
 8000fba:	e169      	b.n	8001290 <__aeabi_dadd+0x4c8>
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dadd+0x1fa>
 8000fc0:	e1bf      	b.n	8001342 <__aeabi_dadd+0x57a>
 8000fc2:	4644      	mov	r4, r8
 8000fc4:	430c      	orrs	r4, r1
 8000fc6:	d000      	beq.n	8000fca <__aeabi_dadd+0x202>
 8000fc8:	e1d0      	b.n	800136c <__aeabi_dadd+0x5a4>
 8000fca:	0742      	lsls	r2, r0, #29
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	08c0      	lsrs	r0, r0, #3
 8000fd2:	e029      	b.n	8001028 <__aeabi_dadd+0x260>
 8000fd4:	003a      	movs	r2, r7
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x214>
 8000fda:	e170      	b.n	80012be <__aeabi_dadd+0x4f6>
 8000fdc:	4662      	mov	r2, ip
 8000fde:	4664      	mov	r4, ip
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	2c01      	cmp	r4, #1
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x220>
 8000fe6:	e0e0      	b.n	80011aa <__aeabi_dadd+0x3e2>
 8000fe8:	4c51      	ldr	r4, [pc, #324]	; (8001130 <__aeabi_dadd+0x368>)
 8000fea:	45a4      	cmp	ip, r4
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x228>
 8000fee:	e161      	b.n	80012b4 <__aeabi_dadd+0x4ec>
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	e7b4      	b.n	8000f5e <__aeabi_dadd+0x196>
 8000ff4:	003a      	movs	r2, r7
 8000ff6:	391f      	subs	r1, #31
 8000ff8:	40ca      	lsrs	r2, r1
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	2b20      	cmp	r3, #32
 8000ffe:	d003      	beq.n	8001008 <__aeabi_dadd+0x240>
 8001000:	2240      	movs	r2, #64	; 0x40
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	409f      	lsls	r7, r3
 8001006:	433c      	orrs	r4, r7
 8001008:	1e63      	subs	r3, r4, #1
 800100a:	419c      	sbcs	r4, r3
 800100c:	2700      	movs	r7, #0
 800100e:	2600      	movs	r6, #0
 8001010:	430c      	orrs	r4, r1
 8001012:	0763      	lsls	r3, r4, #29
 8001014:	d000      	beq.n	8001018 <__aeabi_dadd+0x250>
 8001016:	e753      	b.n	8000ec0 <__aeabi_dadd+0xf8>
 8001018:	46b4      	mov	ip, r6
 800101a:	08e4      	lsrs	r4, r4, #3
 800101c:	077b      	lsls	r3, r7, #29
 800101e:	4323      	orrs	r3, r4
 8001020:	08f8      	lsrs	r0, r7, #3
 8001022:	4a43      	ldr	r2, [pc, #268]	; (8001130 <__aeabi_dadd+0x368>)
 8001024:	4594      	cmp	ip, r2
 8001026:	d01d      	beq.n	8001064 <__aeabi_dadd+0x29c>
 8001028:	4662      	mov	r2, ip
 800102a:	0307      	lsls	r7, r0, #12
 800102c:	0552      	lsls	r2, r2, #21
 800102e:	0b3f      	lsrs	r7, r7, #12
 8001030:	0d52      	lsrs	r2, r2, #21
 8001032:	e760      	b.n	8000ef6 <__aeabi_dadd+0x12e>
 8001034:	4644      	mov	r4, r8
 8001036:	430c      	orrs	r4, r1
 8001038:	1e62      	subs	r2, r4, #1
 800103a:	4194      	sbcs	r4, r2
 800103c:	18e4      	adds	r4, r4, r3
 800103e:	429c      	cmp	r4, r3
 8001040:	419b      	sbcs	r3, r3
 8001042:	425f      	negs	r7, r3
 8001044:	183f      	adds	r7, r7, r0
 8001046:	023b      	lsls	r3, r7, #8
 8001048:	d5e3      	bpl.n	8001012 <__aeabi_dadd+0x24a>
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <__aeabi_dadd+0x368>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x28c>
 8001052:	e0b5      	b.n	80011c0 <__aeabi_dadd+0x3f8>
 8001054:	0032      	movs	r2, r6
 8001056:	2700      	movs	r7, #0
 8001058:	2300      	movs	r3, #0
 800105a:	e74c      	b.n	8000ef6 <__aeabi_dadd+0x12e>
 800105c:	0742      	lsls	r2, r0, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	08c0      	lsrs	r0, r0, #3
 8001064:	001a      	movs	r2, r3
 8001066:	4302      	orrs	r2, r0
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x2a4>
 800106a:	e1e1      	b.n	8001430 <__aeabi_dadd+0x668>
 800106c:	2780      	movs	r7, #128	; 0x80
 800106e:	033f      	lsls	r7, r7, #12
 8001070:	4307      	orrs	r7, r0
 8001072:	033f      	lsls	r7, r7, #12
 8001074:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <__aeabi_dadd+0x368>)
 8001076:	0b3f      	lsrs	r7, r7, #12
 8001078:	e73d      	b.n	8000ef6 <__aeabi_dadd+0x12e>
 800107a:	0020      	movs	r0, r4
 800107c:	f001 fd94 	bl	8002ba8 <__clzsi2>
 8001080:	0001      	movs	r1, r0
 8001082:	3118      	adds	r1, #24
 8001084:	291f      	cmp	r1, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_dadd+0x2c2>
 8001088:	e6fc      	b.n	8000e84 <__aeabi_dadd+0xbc>
 800108a:	3808      	subs	r0, #8
 800108c:	4084      	lsls	r4, r0
 800108e:	0027      	movs	r7, r4
 8001090:	2400      	movs	r4, #0
 8001092:	42b1      	cmp	r1, r6
 8001094:	db00      	blt.n	8001098 <__aeabi_dadd+0x2d0>
 8001096:	e6ff      	b.n	8000e98 <__aeabi_dadd+0xd0>
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <__aeabi_dadd+0x36c>)
 800109a:	1a76      	subs	r6, r6, r1
 800109c:	4017      	ands	r7, r2
 800109e:	e70d      	b.n	8000ebc <__aeabi_dadd+0xf4>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d02f      	beq.n	8001104 <__aeabi_dadd+0x33c>
 80010a4:	464a      	mov	r2, r9
 80010a6:	1b92      	subs	r2, r2, r6
 80010a8:	4694      	mov	ip, r2
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x2e8>
 80010ae:	e0ad      	b.n	800120c <__aeabi_dadd+0x444>
 80010b0:	4a1f      	ldr	r2, [pc, #124]	; (8001130 <__aeabi_dadd+0x368>)
 80010b2:	4591      	cmp	r9, r2
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dadd+0x2f0>
 80010b6:	e10f      	b.n	80012d8 <__aeabi_dadd+0x510>
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	0412      	lsls	r2, r2, #16
 80010bc:	4310      	orrs	r0, r2
 80010be:	4662      	mov	r2, ip
 80010c0:	2a38      	cmp	r2, #56	; 0x38
 80010c2:	dd00      	ble.n	80010c6 <__aeabi_dadd+0x2fe>
 80010c4:	e10f      	b.n	80012e6 <__aeabi_dadd+0x51e>
 80010c6:	2a1f      	cmp	r2, #31
 80010c8:	dd00      	ble.n	80010cc <__aeabi_dadd+0x304>
 80010ca:	e180      	b.n	80013ce <__aeabi_dadd+0x606>
 80010cc:	4664      	mov	r4, ip
 80010ce:	2220      	movs	r2, #32
 80010d0:	001e      	movs	r6, r3
 80010d2:	1b12      	subs	r2, r2, r4
 80010d4:	4667      	mov	r7, ip
 80010d6:	0004      	movs	r4, r0
 80010d8:	4093      	lsls	r3, r2
 80010da:	4094      	lsls	r4, r2
 80010dc:	40fe      	lsrs	r6, r7
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	4193      	sbcs	r3, r2
 80010e2:	40f8      	lsrs	r0, r7
 80010e4:	4334      	orrs	r4, r6
 80010e6:	431c      	orrs	r4, r3
 80010e8:	4480      	add	r8, r0
 80010ea:	1864      	adds	r4, r4, r1
 80010ec:	428c      	cmp	r4, r1
 80010ee:	41bf      	sbcs	r7, r7
 80010f0:	427f      	negs	r7, r7
 80010f2:	464e      	mov	r6, r9
 80010f4:	4447      	add	r7, r8
 80010f6:	e7a6      	b.n	8001046 <__aeabi_dadd+0x27e>
 80010f8:	4642      	mov	r2, r8
 80010fa:	430a      	orrs	r2, r1
 80010fc:	0011      	movs	r1, r2
 80010fe:	1e4a      	subs	r2, r1, #1
 8001100:	4191      	sbcs	r1, r2
 8001102:	e6ad      	b.n	8000e60 <__aeabi_dadd+0x98>
 8001104:	4c0c      	ldr	r4, [pc, #48]	; (8001138 <__aeabi_dadd+0x370>)
 8001106:	1c72      	adds	r2, r6, #1
 8001108:	4222      	tst	r2, r4
 800110a:	d000      	beq.n	800110e <__aeabi_dadd+0x346>
 800110c:	e0a1      	b.n	8001252 <__aeabi_dadd+0x48a>
 800110e:	0002      	movs	r2, r0
 8001110:	431a      	orrs	r2, r3
 8001112:	2e00      	cmp	r6, #0
 8001114:	d000      	beq.n	8001118 <__aeabi_dadd+0x350>
 8001116:	e0fa      	b.n	800130e <__aeabi_dadd+0x546>
 8001118:	2a00      	cmp	r2, #0
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x356>
 800111c:	e145      	b.n	80013aa <__aeabi_dadd+0x5e2>
 800111e:	003a      	movs	r2, r7
 8001120:	430a      	orrs	r2, r1
 8001122:	d000      	beq.n	8001126 <__aeabi_dadd+0x35e>
 8001124:	e146      	b.n	80013b4 <__aeabi_dadd+0x5ec>
 8001126:	0742      	lsls	r2, r0, #29
 8001128:	08db      	lsrs	r3, r3, #3
 800112a:	4313      	orrs	r3, r2
 800112c:	08c0      	lsrs	r0, r0, #3
 800112e:	e77b      	b.n	8001028 <__aeabi_dadd+0x260>
 8001130:	000007ff 	.word	0x000007ff
 8001134:	ff7fffff 	.word	0xff7fffff
 8001138:	000007fe 	.word	0x000007fe
 800113c:	4647      	mov	r7, r8
 800113e:	1a5c      	subs	r4, r3, r1
 8001140:	1bc2      	subs	r2, r0, r7
 8001142:	42a3      	cmp	r3, r4
 8001144:	41bf      	sbcs	r7, r7
 8001146:	427f      	negs	r7, r7
 8001148:	46b9      	mov	r9, r7
 800114a:	0017      	movs	r7, r2
 800114c:	464a      	mov	r2, r9
 800114e:	1abf      	subs	r7, r7, r2
 8001150:	023a      	lsls	r2, r7, #8
 8001152:	d500      	bpl.n	8001156 <__aeabi_dadd+0x38e>
 8001154:	e08d      	b.n	8001272 <__aeabi_dadd+0x4aa>
 8001156:	0023      	movs	r3, r4
 8001158:	433b      	orrs	r3, r7
 800115a:	d000      	beq.n	800115e <__aeabi_dadd+0x396>
 800115c:	e68a      	b.n	8000e74 <__aeabi_dadd+0xac>
 800115e:	2000      	movs	r0, #0
 8001160:	2500      	movs	r5, #0
 8001162:	e761      	b.n	8001028 <__aeabi_dadd+0x260>
 8001164:	4cb4      	ldr	r4, [pc, #720]	; (8001438 <__aeabi_dadd+0x670>)
 8001166:	45a1      	cmp	r9, r4
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x3a4>
 800116a:	e0ad      	b.n	80012c8 <__aeabi_dadd+0x500>
 800116c:	2480      	movs	r4, #128	; 0x80
 800116e:	0424      	lsls	r4, r4, #16
 8001170:	4320      	orrs	r0, r4
 8001172:	4664      	mov	r4, ip
 8001174:	2c38      	cmp	r4, #56	; 0x38
 8001176:	dc3d      	bgt.n	80011f4 <__aeabi_dadd+0x42c>
 8001178:	4662      	mov	r2, ip
 800117a:	2c1f      	cmp	r4, #31
 800117c:	dd00      	ble.n	8001180 <__aeabi_dadd+0x3b8>
 800117e:	e0b7      	b.n	80012f0 <__aeabi_dadd+0x528>
 8001180:	2520      	movs	r5, #32
 8001182:	001e      	movs	r6, r3
 8001184:	1b2d      	subs	r5, r5, r4
 8001186:	0004      	movs	r4, r0
 8001188:	40ab      	lsls	r3, r5
 800118a:	40ac      	lsls	r4, r5
 800118c:	40d6      	lsrs	r6, r2
 800118e:	40d0      	lsrs	r0, r2
 8001190:	4642      	mov	r2, r8
 8001192:	1e5d      	subs	r5, r3, #1
 8001194:	41ab      	sbcs	r3, r5
 8001196:	4334      	orrs	r4, r6
 8001198:	1a12      	subs	r2, r2, r0
 800119a:	4690      	mov	r8, r2
 800119c:	4323      	orrs	r3, r4
 800119e:	e02c      	b.n	80011fa <__aeabi_dadd+0x432>
 80011a0:	0742      	lsls	r2, r0, #29
 80011a2:	08db      	lsrs	r3, r3, #3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	08c0      	lsrs	r0, r0, #3
 80011a8:	e73b      	b.n	8001022 <__aeabi_dadd+0x25a>
 80011aa:	185c      	adds	r4, r3, r1
 80011ac:	429c      	cmp	r4, r3
 80011ae:	419b      	sbcs	r3, r3
 80011b0:	4440      	add	r0, r8
 80011b2:	425b      	negs	r3, r3
 80011b4:	18c7      	adds	r7, r0, r3
 80011b6:	2601      	movs	r6, #1
 80011b8:	023b      	lsls	r3, r7, #8
 80011ba:	d400      	bmi.n	80011be <__aeabi_dadd+0x3f6>
 80011bc:	e729      	b.n	8001012 <__aeabi_dadd+0x24a>
 80011be:	2602      	movs	r6, #2
 80011c0:	4a9e      	ldr	r2, [pc, #632]	; (800143c <__aeabi_dadd+0x674>)
 80011c2:	0863      	lsrs	r3, r4, #1
 80011c4:	4017      	ands	r7, r2
 80011c6:	2201      	movs	r2, #1
 80011c8:	4014      	ands	r4, r2
 80011ca:	431c      	orrs	r4, r3
 80011cc:	07fb      	lsls	r3, r7, #31
 80011ce:	431c      	orrs	r4, r3
 80011d0:	087f      	lsrs	r7, r7, #1
 80011d2:	e673      	b.n	8000ebc <__aeabi_dadd+0xf4>
 80011d4:	4644      	mov	r4, r8
 80011d6:	3a20      	subs	r2, #32
 80011d8:	40d4      	lsrs	r4, r2
 80011da:	4662      	mov	r2, ip
 80011dc:	2a20      	cmp	r2, #32
 80011de:	d005      	beq.n	80011ec <__aeabi_dadd+0x424>
 80011e0:	4667      	mov	r7, ip
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	1bd2      	subs	r2, r2, r7
 80011e6:	4647      	mov	r7, r8
 80011e8:	4097      	lsls	r7, r2
 80011ea:	4339      	orrs	r1, r7
 80011ec:	1e4a      	subs	r2, r1, #1
 80011ee:	4191      	sbcs	r1, r2
 80011f0:	4321      	orrs	r1, r4
 80011f2:	e635      	b.n	8000e60 <__aeabi_dadd+0x98>
 80011f4:	4303      	orrs	r3, r0
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	4183      	sbcs	r3, r0
 80011fa:	1acc      	subs	r4, r1, r3
 80011fc:	42a1      	cmp	r1, r4
 80011fe:	41bf      	sbcs	r7, r7
 8001200:	4643      	mov	r3, r8
 8001202:	427f      	negs	r7, r7
 8001204:	4655      	mov	r5, sl
 8001206:	464e      	mov	r6, r9
 8001208:	1bdf      	subs	r7, r3, r7
 800120a:	e62e      	b.n	8000e6a <__aeabi_dadd+0xa2>
 800120c:	0002      	movs	r2, r0
 800120e:	431a      	orrs	r2, r3
 8001210:	d100      	bne.n	8001214 <__aeabi_dadd+0x44c>
 8001212:	e0bd      	b.n	8001390 <__aeabi_dadd+0x5c8>
 8001214:	4662      	mov	r2, ip
 8001216:	4664      	mov	r4, ip
 8001218:	3a01      	subs	r2, #1
 800121a:	2c01      	cmp	r4, #1
 800121c:	d100      	bne.n	8001220 <__aeabi_dadd+0x458>
 800121e:	e0e5      	b.n	80013ec <__aeabi_dadd+0x624>
 8001220:	4c85      	ldr	r4, [pc, #532]	; (8001438 <__aeabi_dadd+0x670>)
 8001222:	45a4      	cmp	ip, r4
 8001224:	d058      	beq.n	80012d8 <__aeabi_dadd+0x510>
 8001226:	4694      	mov	ip, r2
 8001228:	e749      	b.n	80010be <__aeabi_dadd+0x2f6>
 800122a:	4664      	mov	r4, ip
 800122c:	2220      	movs	r2, #32
 800122e:	1b12      	subs	r2, r2, r4
 8001230:	4644      	mov	r4, r8
 8001232:	4094      	lsls	r4, r2
 8001234:	000f      	movs	r7, r1
 8001236:	46a1      	mov	r9, r4
 8001238:	4664      	mov	r4, ip
 800123a:	4091      	lsls	r1, r2
 800123c:	40e7      	lsrs	r7, r4
 800123e:	464c      	mov	r4, r9
 8001240:	1e4a      	subs	r2, r1, #1
 8001242:	4191      	sbcs	r1, r2
 8001244:	433c      	orrs	r4, r7
 8001246:	4642      	mov	r2, r8
 8001248:	430c      	orrs	r4, r1
 800124a:	4661      	mov	r1, ip
 800124c:	40ca      	lsrs	r2, r1
 800124e:	1880      	adds	r0, r0, r2
 8001250:	e6f4      	b.n	800103c <__aeabi_dadd+0x274>
 8001252:	4c79      	ldr	r4, [pc, #484]	; (8001438 <__aeabi_dadd+0x670>)
 8001254:	42a2      	cmp	r2, r4
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x492>
 8001258:	e6fd      	b.n	8001056 <__aeabi_dadd+0x28e>
 800125a:	1859      	adds	r1, r3, r1
 800125c:	4299      	cmp	r1, r3
 800125e:	419b      	sbcs	r3, r3
 8001260:	4440      	add	r0, r8
 8001262:	425f      	negs	r7, r3
 8001264:	19c7      	adds	r7, r0, r7
 8001266:	07fc      	lsls	r4, r7, #31
 8001268:	0849      	lsrs	r1, r1, #1
 800126a:	0016      	movs	r6, r2
 800126c:	430c      	orrs	r4, r1
 800126e:	087f      	lsrs	r7, r7, #1
 8001270:	e6cf      	b.n	8001012 <__aeabi_dadd+0x24a>
 8001272:	1acc      	subs	r4, r1, r3
 8001274:	42a1      	cmp	r1, r4
 8001276:	41bf      	sbcs	r7, r7
 8001278:	4643      	mov	r3, r8
 800127a:	427f      	negs	r7, r7
 800127c:	1a18      	subs	r0, r3, r0
 800127e:	4655      	mov	r5, sl
 8001280:	1bc7      	subs	r7, r0, r7
 8001282:	e5f7      	b.n	8000e74 <__aeabi_dadd+0xac>
 8001284:	08c9      	lsrs	r1, r1, #3
 8001286:	077b      	lsls	r3, r7, #29
 8001288:	4655      	mov	r5, sl
 800128a:	430b      	orrs	r3, r1
 800128c:	08f8      	lsrs	r0, r7, #3
 800128e:	e6c8      	b.n	8001022 <__aeabi_dadd+0x25a>
 8001290:	2c00      	cmp	r4, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x4ce>
 8001294:	e081      	b.n	800139a <__aeabi_dadd+0x5d2>
 8001296:	4643      	mov	r3, r8
 8001298:	430b      	orrs	r3, r1
 800129a:	d115      	bne.n	80012c8 <__aeabi_dadd+0x500>
 800129c:	2080      	movs	r0, #128	; 0x80
 800129e:	2500      	movs	r5, #0
 80012a0:	0300      	lsls	r0, r0, #12
 80012a2:	e6e3      	b.n	800106c <__aeabi_dadd+0x2a4>
 80012a4:	1a5c      	subs	r4, r3, r1
 80012a6:	42a3      	cmp	r3, r4
 80012a8:	419b      	sbcs	r3, r3
 80012aa:	1bc7      	subs	r7, r0, r7
 80012ac:	425b      	negs	r3, r3
 80012ae:	2601      	movs	r6, #1
 80012b0:	1aff      	subs	r7, r7, r3
 80012b2:	e5da      	b.n	8000e6a <__aeabi_dadd+0xa2>
 80012b4:	0742      	lsls	r2, r0, #29
 80012b6:	08db      	lsrs	r3, r3, #3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	08c0      	lsrs	r0, r0, #3
 80012bc:	e6d2      	b.n	8001064 <__aeabi_dadd+0x29c>
 80012be:	0742      	lsls	r2, r0, #29
 80012c0:	08db      	lsrs	r3, r3, #3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	08c0      	lsrs	r0, r0, #3
 80012c6:	e6ac      	b.n	8001022 <__aeabi_dadd+0x25a>
 80012c8:	4643      	mov	r3, r8
 80012ca:	4642      	mov	r2, r8
 80012cc:	08c9      	lsrs	r1, r1, #3
 80012ce:	075b      	lsls	r3, r3, #29
 80012d0:	4655      	mov	r5, sl
 80012d2:	430b      	orrs	r3, r1
 80012d4:	08d0      	lsrs	r0, r2, #3
 80012d6:	e6c5      	b.n	8001064 <__aeabi_dadd+0x29c>
 80012d8:	4643      	mov	r3, r8
 80012da:	4642      	mov	r2, r8
 80012dc:	075b      	lsls	r3, r3, #29
 80012de:	08c9      	lsrs	r1, r1, #3
 80012e0:	430b      	orrs	r3, r1
 80012e2:	08d0      	lsrs	r0, r2, #3
 80012e4:	e6be      	b.n	8001064 <__aeabi_dadd+0x29c>
 80012e6:	4303      	orrs	r3, r0
 80012e8:	001c      	movs	r4, r3
 80012ea:	1e63      	subs	r3, r4, #1
 80012ec:	419c      	sbcs	r4, r3
 80012ee:	e6fc      	b.n	80010ea <__aeabi_dadd+0x322>
 80012f0:	0002      	movs	r2, r0
 80012f2:	3c20      	subs	r4, #32
 80012f4:	40e2      	lsrs	r2, r4
 80012f6:	0014      	movs	r4, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	2a20      	cmp	r2, #32
 80012fc:	d003      	beq.n	8001306 <__aeabi_dadd+0x53e>
 80012fe:	2540      	movs	r5, #64	; 0x40
 8001300:	1aad      	subs	r5, r5, r2
 8001302:	40a8      	lsls	r0, r5
 8001304:	4303      	orrs	r3, r0
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	4183      	sbcs	r3, r0
 800130a:	4323      	orrs	r3, r4
 800130c:	e775      	b.n	80011fa <__aeabi_dadd+0x432>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d0e2      	beq.n	80012d8 <__aeabi_dadd+0x510>
 8001312:	003a      	movs	r2, r7
 8001314:	430a      	orrs	r2, r1
 8001316:	d0cd      	beq.n	80012b4 <__aeabi_dadd+0x4ec>
 8001318:	0742      	lsls	r2, r0, #29
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	4313      	orrs	r3, r2
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	08c0      	lsrs	r0, r0, #3
 8001322:	0312      	lsls	r2, r2, #12
 8001324:	4210      	tst	r0, r2
 8001326:	d006      	beq.n	8001336 <__aeabi_dadd+0x56e>
 8001328:	08fc      	lsrs	r4, r7, #3
 800132a:	4214      	tst	r4, r2
 800132c:	d103      	bne.n	8001336 <__aeabi_dadd+0x56e>
 800132e:	0020      	movs	r0, r4
 8001330:	08cb      	lsrs	r3, r1, #3
 8001332:	077a      	lsls	r2, r7, #29
 8001334:	4313      	orrs	r3, r2
 8001336:	0f5a      	lsrs	r2, r3, #29
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	0752      	lsls	r2, r2, #29
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	4313      	orrs	r3, r2
 8001340:	e690      	b.n	8001064 <__aeabi_dadd+0x29c>
 8001342:	4643      	mov	r3, r8
 8001344:	430b      	orrs	r3, r1
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x582>
 8001348:	e709      	b.n	800115e <__aeabi_dadd+0x396>
 800134a:	4643      	mov	r3, r8
 800134c:	4642      	mov	r2, r8
 800134e:	08c9      	lsrs	r1, r1, #3
 8001350:	075b      	lsls	r3, r3, #29
 8001352:	4655      	mov	r5, sl
 8001354:	430b      	orrs	r3, r1
 8001356:	08d0      	lsrs	r0, r2, #3
 8001358:	e666      	b.n	8001028 <__aeabi_dadd+0x260>
 800135a:	1acc      	subs	r4, r1, r3
 800135c:	42a1      	cmp	r1, r4
 800135e:	4189      	sbcs	r1, r1
 8001360:	1a3f      	subs	r7, r7, r0
 8001362:	4249      	negs	r1, r1
 8001364:	4655      	mov	r5, sl
 8001366:	2601      	movs	r6, #1
 8001368:	1a7f      	subs	r7, r7, r1
 800136a:	e57e      	b.n	8000e6a <__aeabi_dadd+0xa2>
 800136c:	4642      	mov	r2, r8
 800136e:	1a5c      	subs	r4, r3, r1
 8001370:	1a87      	subs	r7, r0, r2
 8001372:	42a3      	cmp	r3, r4
 8001374:	4192      	sbcs	r2, r2
 8001376:	4252      	negs	r2, r2
 8001378:	1abf      	subs	r7, r7, r2
 800137a:	023a      	lsls	r2, r7, #8
 800137c:	d53d      	bpl.n	80013fa <__aeabi_dadd+0x632>
 800137e:	1acc      	subs	r4, r1, r3
 8001380:	42a1      	cmp	r1, r4
 8001382:	4189      	sbcs	r1, r1
 8001384:	4643      	mov	r3, r8
 8001386:	4249      	negs	r1, r1
 8001388:	1a1f      	subs	r7, r3, r0
 800138a:	4655      	mov	r5, sl
 800138c:	1a7f      	subs	r7, r7, r1
 800138e:	e595      	b.n	8000ebc <__aeabi_dadd+0xf4>
 8001390:	077b      	lsls	r3, r7, #29
 8001392:	08c9      	lsrs	r1, r1, #3
 8001394:	430b      	orrs	r3, r1
 8001396:	08f8      	lsrs	r0, r7, #3
 8001398:	e643      	b.n	8001022 <__aeabi_dadd+0x25a>
 800139a:	4644      	mov	r4, r8
 800139c:	08db      	lsrs	r3, r3, #3
 800139e:	430c      	orrs	r4, r1
 80013a0:	d130      	bne.n	8001404 <__aeabi_dadd+0x63c>
 80013a2:	0742      	lsls	r2, r0, #29
 80013a4:	4313      	orrs	r3, r2
 80013a6:	08c0      	lsrs	r0, r0, #3
 80013a8:	e65c      	b.n	8001064 <__aeabi_dadd+0x29c>
 80013aa:	077b      	lsls	r3, r7, #29
 80013ac:	08c9      	lsrs	r1, r1, #3
 80013ae:	430b      	orrs	r3, r1
 80013b0:	08f8      	lsrs	r0, r7, #3
 80013b2:	e639      	b.n	8001028 <__aeabi_dadd+0x260>
 80013b4:	185c      	adds	r4, r3, r1
 80013b6:	429c      	cmp	r4, r3
 80013b8:	419b      	sbcs	r3, r3
 80013ba:	4440      	add	r0, r8
 80013bc:	425b      	negs	r3, r3
 80013be:	18c7      	adds	r7, r0, r3
 80013c0:	023b      	lsls	r3, r7, #8
 80013c2:	d400      	bmi.n	80013c6 <__aeabi_dadd+0x5fe>
 80013c4:	e625      	b.n	8001012 <__aeabi_dadd+0x24a>
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <__aeabi_dadd+0x674>)
 80013c8:	2601      	movs	r6, #1
 80013ca:	401f      	ands	r7, r3
 80013cc:	e621      	b.n	8001012 <__aeabi_dadd+0x24a>
 80013ce:	0004      	movs	r4, r0
 80013d0:	3a20      	subs	r2, #32
 80013d2:	40d4      	lsrs	r4, r2
 80013d4:	4662      	mov	r2, ip
 80013d6:	2a20      	cmp	r2, #32
 80013d8:	d004      	beq.n	80013e4 <__aeabi_dadd+0x61c>
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	4666      	mov	r6, ip
 80013de:	1b92      	subs	r2, r2, r6
 80013e0:	4090      	lsls	r0, r2
 80013e2:	4303      	orrs	r3, r0
 80013e4:	1e5a      	subs	r2, r3, #1
 80013e6:	4193      	sbcs	r3, r2
 80013e8:	431c      	orrs	r4, r3
 80013ea:	e67e      	b.n	80010ea <__aeabi_dadd+0x322>
 80013ec:	185c      	adds	r4, r3, r1
 80013ee:	428c      	cmp	r4, r1
 80013f0:	4189      	sbcs	r1, r1
 80013f2:	4440      	add	r0, r8
 80013f4:	4249      	negs	r1, r1
 80013f6:	1847      	adds	r7, r0, r1
 80013f8:	e6dd      	b.n	80011b6 <__aeabi_dadd+0x3ee>
 80013fa:	0023      	movs	r3, r4
 80013fc:	433b      	orrs	r3, r7
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x63a>
 8001400:	e6ad      	b.n	800115e <__aeabi_dadd+0x396>
 8001402:	e606      	b.n	8001012 <__aeabi_dadd+0x24a>
 8001404:	0744      	lsls	r4, r0, #29
 8001406:	4323      	orrs	r3, r4
 8001408:	2480      	movs	r4, #128	; 0x80
 800140a:	08c0      	lsrs	r0, r0, #3
 800140c:	0324      	lsls	r4, r4, #12
 800140e:	4220      	tst	r0, r4
 8001410:	d008      	beq.n	8001424 <__aeabi_dadd+0x65c>
 8001412:	4642      	mov	r2, r8
 8001414:	08d6      	lsrs	r6, r2, #3
 8001416:	4226      	tst	r6, r4
 8001418:	d104      	bne.n	8001424 <__aeabi_dadd+0x65c>
 800141a:	4655      	mov	r5, sl
 800141c:	0030      	movs	r0, r6
 800141e:	08cb      	lsrs	r3, r1, #3
 8001420:	0751      	lsls	r1, r2, #29
 8001422:	430b      	orrs	r3, r1
 8001424:	0f5a      	lsrs	r2, r3, #29
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	0752      	lsls	r2, r2, #29
 800142c:	4313      	orrs	r3, r2
 800142e:	e619      	b.n	8001064 <__aeabi_dadd+0x29c>
 8001430:	2300      	movs	r3, #0
 8001432:	4a01      	ldr	r2, [pc, #4]	; (8001438 <__aeabi_dadd+0x670>)
 8001434:	001f      	movs	r7, r3
 8001436:	e55e      	b.n	8000ef6 <__aeabi_dadd+0x12e>
 8001438:	000007ff 	.word	0x000007ff
 800143c:	ff7fffff 	.word	0xff7fffff

08001440 <__aeabi_ddiv>:
 8001440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	4645      	mov	r5, r8
 8001448:	46de      	mov	lr, fp
 800144a:	b5e0      	push	{r5, r6, r7, lr}
 800144c:	4681      	mov	r9, r0
 800144e:	0005      	movs	r5, r0
 8001450:	030c      	lsls	r4, r1, #12
 8001452:	0048      	lsls	r0, r1, #1
 8001454:	4692      	mov	sl, r2
 8001456:	001f      	movs	r7, r3
 8001458:	b085      	sub	sp, #20
 800145a:	0b24      	lsrs	r4, r4, #12
 800145c:	0d40      	lsrs	r0, r0, #21
 800145e:	0fce      	lsrs	r6, r1, #31
 8001460:	2800      	cmp	r0, #0
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x26>
 8001464:	e156      	b.n	8001714 <__aeabi_ddiv+0x2d4>
 8001466:	4bd4      	ldr	r3, [pc, #848]	; (80017b8 <__aeabi_ddiv+0x378>)
 8001468:	4298      	cmp	r0, r3
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x2e>
 800146c:	e172      	b.n	8001754 <__aeabi_ddiv+0x314>
 800146e:	0f6b      	lsrs	r3, r5, #29
 8001470:	00e4      	lsls	r4, r4, #3
 8001472:	431c      	orrs	r4, r3
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	4323      	orrs	r3, r4
 800147a:	4698      	mov	r8, r3
 800147c:	4bcf      	ldr	r3, [pc, #828]	; (80017bc <__aeabi_ddiv+0x37c>)
 800147e:	00ed      	lsls	r5, r5, #3
 8001480:	469b      	mov	fp, r3
 8001482:	2300      	movs	r3, #0
 8001484:	4699      	mov	r9, r3
 8001486:	4483      	add	fp, r0
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	033c      	lsls	r4, r7, #12
 800148c:	007b      	lsls	r3, r7, #1
 800148e:	4650      	mov	r0, sl
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fff      	lsrs	r7, r7, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_ddiv+0x5c>
 800149a:	e11f      	b.n	80016dc <__aeabi_ddiv+0x29c>
 800149c:	4ac6      	ldr	r2, [pc, #792]	; (80017b8 <__aeabi_ddiv+0x378>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d100      	bne.n	80014a4 <__aeabi_ddiv+0x64>
 80014a2:	e162      	b.n	800176a <__aeabi_ddiv+0x32a>
 80014a4:	49c5      	ldr	r1, [pc, #788]	; (80017bc <__aeabi_ddiv+0x37c>)
 80014a6:	0f42      	lsrs	r2, r0, #29
 80014a8:	468c      	mov	ip, r1
 80014aa:	00e4      	lsls	r4, r4, #3
 80014ac:	4659      	mov	r1, fp
 80014ae:	4314      	orrs	r4, r2
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	4463      	add	r3, ip
 80014b4:	0412      	lsls	r2, r2, #16
 80014b6:	1acb      	subs	r3, r1, r3
 80014b8:	4314      	orrs	r4, r2
 80014ba:	469b      	mov	fp, r3
 80014bc:	00c2      	lsls	r2, r0, #3
 80014be:	2000      	movs	r0, #0
 80014c0:	0033      	movs	r3, r6
 80014c2:	407b      	eors	r3, r7
 80014c4:	469a      	mov	sl, r3
 80014c6:	464b      	mov	r3, r9
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d827      	bhi.n	800151c <__aeabi_ddiv+0xdc>
 80014cc:	49bc      	ldr	r1, [pc, #752]	; (80017c0 <__aeabi_ddiv+0x380>)
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	58cb      	ldr	r3, [r1, r3]
 80014d2:	469f      	mov	pc, r3
 80014d4:	46b2      	mov	sl, r6
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d016      	beq.n	800150a <__aeabi_ddiv+0xca>
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d100      	bne.n	80014e2 <__aeabi_ddiv+0xa2>
 80014e0:	e28e      	b.n	8001a00 <__aeabi_ddiv+0x5c0>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d000      	beq.n	80014e8 <__aeabi_ddiv+0xa8>
 80014e6:	e0d9      	b.n	800169c <__aeabi_ddiv+0x25c>
 80014e8:	2300      	movs	r3, #0
 80014ea:	2400      	movs	r4, #0
 80014ec:	2500      	movs	r5, #0
 80014ee:	4652      	mov	r2, sl
 80014f0:	051b      	lsls	r3, r3, #20
 80014f2:	4323      	orrs	r3, r4
 80014f4:	07d2      	lsls	r2, r2, #31
 80014f6:	4313      	orrs	r3, r2
 80014f8:	0028      	movs	r0, r5
 80014fa:	0019      	movs	r1, r3
 80014fc:	b005      	add	sp, #20
 80014fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001500:	46bb      	mov	fp, r7
 8001502:	46b2      	mov	sl, r6
 8001504:	46a9      	mov	r9, r5
 8001506:	46a0      	mov	r8, r4
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800150a:	2400      	movs	r4, #0
 800150c:	2500      	movs	r5, #0
 800150e:	4baa      	ldr	r3, [pc, #680]	; (80017b8 <__aeabi_ddiv+0x378>)
 8001510:	e7ed      	b.n	80014ee <__aeabi_ddiv+0xae>
 8001512:	46ba      	mov	sl, r7
 8001514:	46a0      	mov	r8, r4
 8001516:	0015      	movs	r5, r2
 8001518:	9000      	str	r0, [sp, #0]
 800151a:	e7dc      	b.n	80014d6 <__aeabi_ddiv+0x96>
 800151c:	4544      	cmp	r4, r8
 800151e:	d200      	bcs.n	8001522 <__aeabi_ddiv+0xe2>
 8001520:	e1c7      	b.n	80018b2 <__aeabi_ddiv+0x472>
 8001522:	d100      	bne.n	8001526 <__aeabi_ddiv+0xe6>
 8001524:	e1c2      	b.n	80018ac <__aeabi_ddiv+0x46c>
 8001526:	2301      	movs	r3, #1
 8001528:	425b      	negs	r3, r3
 800152a:	469c      	mov	ip, r3
 800152c:	002e      	movs	r6, r5
 800152e:	4640      	mov	r0, r8
 8001530:	2500      	movs	r5, #0
 8001532:	44e3      	add	fp, ip
 8001534:	0223      	lsls	r3, r4, #8
 8001536:	0e14      	lsrs	r4, r2, #24
 8001538:	431c      	orrs	r4, r3
 800153a:	0c1b      	lsrs	r3, r3, #16
 800153c:	4699      	mov	r9, r3
 800153e:	0423      	lsls	r3, r4, #16
 8001540:	0c1f      	lsrs	r7, r3, #16
 8001542:	0212      	lsls	r2, r2, #8
 8001544:	4649      	mov	r1, r9
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9701      	str	r7, [sp, #4]
 800154a:	f7fe fe7f 	bl	800024c <__aeabi_uidivmod>
 800154e:	0002      	movs	r2, r0
 8001550:	437a      	muls	r2, r7
 8001552:	040b      	lsls	r3, r1, #16
 8001554:	0c31      	lsrs	r1, r6, #16
 8001556:	4680      	mov	r8, r0
 8001558:	4319      	orrs	r1, r3
 800155a:	428a      	cmp	r2, r1
 800155c:	d907      	bls.n	800156e <__aeabi_ddiv+0x12e>
 800155e:	2301      	movs	r3, #1
 8001560:	425b      	negs	r3, r3
 8001562:	469c      	mov	ip, r3
 8001564:	1909      	adds	r1, r1, r4
 8001566:	44e0      	add	r8, ip
 8001568:	428c      	cmp	r4, r1
 800156a:	d800      	bhi.n	800156e <__aeabi_ddiv+0x12e>
 800156c:	e207      	b.n	800197e <__aeabi_ddiv+0x53e>
 800156e:	1a88      	subs	r0, r1, r2
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe fe6b 	bl	800024c <__aeabi_uidivmod>
 8001576:	0409      	lsls	r1, r1, #16
 8001578:	468c      	mov	ip, r1
 800157a:	0431      	lsls	r1, r6, #16
 800157c:	4666      	mov	r6, ip
 800157e:	9a01      	ldr	r2, [sp, #4]
 8001580:	0c09      	lsrs	r1, r1, #16
 8001582:	4342      	muls	r2, r0
 8001584:	0003      	movs	r3, r0
 8001586:	4331      	orrs	r1, r6
 8001588:	428a      	cmp	r2, r1
 800158a:	d904      	bls.n	8001596 <__aeabi_ddiv+0x156>
 800158c:	1909      	adds	r1, r1, r4
 800158e:	3b01      	subs	r3, #1
 8001590:	428c      	cmp	r4, r1
 8001592:	d800      	bhi.n	8001596 <__aeabi_ddiv+0x156>
 8001594:	e1ed      	b.n	8001972 <__aeabi_ddiv+0x532>
 8001596:	1a88      	subs	r0, r1, r2
 8001598:	4642      	mov	r2, r8
 800159a:	0412      	lsls	r2, r2, #16
 800159c:	431a      	orrs	r2, r3
 800159e:	4690      	mov	r8, r2
 80015a0:	4641      	mov	r1, r8
 80015a2:	9b00      	ldr	r3, [sp, #0]
 80015a4:	040e      	lsls	r6, r1, #16
 80015a6:	0c1b      	lsrs	r3, r3, #16
 80015a8:	001f      	movs	r7, r3
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	9b00      	ldr	r3, [sp, #0]
 80015ae:	0c36      	lsrs	r6, r6, #16
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	0c19      	lsrs	r1, r3, #16
 80015b4:	000b      	movs	r3, r1
 80015b6:	4373      	muls	r3, r6
 80015b8:	0c12      	lsrs	r2, r2, #16
 80015ba:	437e      	muls	r6, r7
 80015bc:	9103      	str	r1, [sp, #12]
 80015be:	4351      	muls	r1, r2
 80015c0:	437a      	muls	r2, r7
 80015c2:	0c1f      	lsrs	r7, r3, #16
 80015c4:	46bc      	mov	ip, r7
 80015c6:	1876      	adds	r6, r6, r1
 80015c8:	4466      	add	r6, ip
 80015ca:	42b1      	cmp	r1, r6
 80015cc:	d903      	bls.n	80015d6 <__aeabi_ddiv+0x196>
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0249      	lsls	r1, r1, #9
 80015d2:	468c      	mov	ip, r1
 80015d4:	4462      	add	r2, ip
 80015d6:	0c31      	lsrs	r1, r6, #16
 80015d8:	188a      	adds	r2, r1, r2
 80015da:	0431      	lsls	r1, r6, #16
 80015dc:	041e      	lsls	r6, r3, #16
 80015de:	0c36      	lsrs	r6, r6, #16
 80015e0:	198e      	adds	r6, r1, r6
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d302      	bcc.n	80015ec <__aeabi_ddiv+0x1ac>
 80015e6:	d112      	bne.n	800160e <__aeabi_ddiv+0x1ce>
 80015e8:	42b5      	cmp	r5, r6
 80015ea:	d210      	bcs.n	800160e <__aeabi_ddiv+0x1ce>
 80015ec:	4643      	mov	r3, r8
 80015ee:	1e59      	subs	r1, r3, #1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	469c      	mov	ip, r3
 80015f4:	4465      	add	r5, ip
 80015f6:	001f      	movs	r7, r3
 80015f8:	429d      	cmp	r5, r3
 80015fa:	419b      	sbcs	r3, r3
 80015fc:	425b      	negs	r3, r3
 80015fe:	191b      	adds	r3, r3, r4
 8001600:	18c0      	adds	r0, r0, r3
 8001602:	4284      	cmp	r4, r0
 8001604:	d200      	bcs.n	8001608 <__aeabi_ddiv+0x1c8>
 8001606:	e1a0      	b.n	800194a <__aeabi_ddiv+0x50a>
 8001608:	d100      	bne.n	800160c <__aeabi_ddiv+0x1cc>
 800160a:	e19b      	b.n	8001944 <__aeabi_ddiv+0x504>
 800160c:	4688      	mov	r8, r1
 800160e:	1bae      	subs	r6, r5, r6
 8001610:	42b5      	cmp	r5, r6
 8001612:	41ad      	sbcs	r5, r5
 8001614:	1a80      	subs	r0, r0, r2
 8001616:	426d      	negs	r5, r5
 8001618:	1b40      	subs	r0, r0, r5
 800161a:	4284      	cmp	r4, r0
 800161c:	d100      	bne.n	8001620 <__aeabi_ddiv+0x1e0>
 800161e:	e1d5      	b.n	80019cc <__aeabi_ddiv+0x58c>
 8001620:	4649      	mov	r1, r9
 8001622:	f7fe fe13 	bl	800024c <__aeabi_uidivmod>
 8001626:	9a01      	ldr	r2, [sp, #4]
 8001628:	040b      	lsls	r3, r1, #16
 800162a:	4342      	muls	r2, r0
 800162c:	0c31      	lsrs	r1, r6, #16
 800162e:	0005      	movs	r5, r0
 8001630:	4319      	orrs	r1, r3
 8001632:	428a      	cmp	r2, r1
 8001634:	d900      	bls.n	8001638 <__aeabi_ddiv+0x1f8>
 8001636:	e16c      	b.n	8001912 <__aeabi_ddiv+0x4d2>
 8001638:	1a88      	subs	r0, r1, r2
 800163a:	4649      	mov	r1, r9
 800163c:	f7fe fe06 	bl	800024c <__aeabi_uidivmod>
 8001640:	9a01      	ldr	r2, [sp, #4]
 8001642:	0436      	lsls	r6, r6, #16
 8001644:	4342      	muls	r2, r0
 8001646:	0409      	lsls	r1, r1, #16
 8001648:	0c36      	lsrs	r6, r6, #16
 800164a:	0003      	movs	r3, r0
 800164c:	430e      	orrs	r6, r1
 800164e:	42b2      	cmp	r2, r6
 8001650:	d900      	bls.n	8001654 <__aeabi_ddiv+0x214>
 8001652:	e153      	b.n	80018fc <__aeabi_ddiv+0x4bc>
 8001654:	9803      	ldr	r0, [sp, #12]
 8001656:	1ab6      	subs	r6, r6, r2
 8001658:	0002      	movs	r2, r0
 800165a:	042d      	lsls	r5, r5, #16
 800165c:	431d      	orrs	r5, r3
 800165e:	9f02      	ldr	r7, [sp, #8]
 8001660:	042b      	lsls	r3, r5, #16
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	435a      	muls	r2, r3
 8001666:	437b      	muls	r3, r7
 8001668:	469c      	mov	ip, r3
 800166a:	0c29      	lsrs	r1, r5, #16
 800166c:	4348      	muls	r0, r1
 800166e:	0c13      	lsrs	r3, r2, #16
 8001670:	4484      	add	ip, r0
 8001672:	4463      	add	r3, ip
 8001674:	4379      	muls	r1, r7
 8001676:	4298      	cmp	r0, r3
 8001678:	d903      	bls.n	8001682 <__aeabi_ddiv+0x242>
 800167a:	2080      	movs	r0, #128	; 0x80
 800167c:	0240      	lsls	r0, r0, #9
 800167e:	4684      	mov	ip, r0
 8001680:	4461      	add	r1, ip
 8001682:	0c18      	lsrs	r0, r3, #16
 8001684:	0412      	lsls	r2, r2, #16
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	0c12      	lsrs	r2, r2, #16
 800168a:	1841      	adds	r1, r0, r1
 800168c:	189b      	adds	r3, r3, r2
 800168e:	428e      	cmp	r6, r1
 8001690:	d200      	bcs.n	8001694 <__aeabi_ddiv+0x254>
 8001692:	e0ff      	b.n	8001894 <__aeabi_ddiv+0x454>
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x258>
 8001696:	e0fa      	b.n	800188e <__aeabi_ddiv+0x44e>
 8001698:	2301      	movs	r3, #1
 800169a:	431d      	orrs	r5, r3
 800169c:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <__aeabi_ddiv+0x384>)
 800169e:	445a      	add	r2, fp
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	dc00      	bgt.n	80016a6 <__aeabi_ddiv+0x266>
 80016a4:	e0aa      	b.n	80017fc <__aeabi_ddiv+0x3bc>
 80016a6:	076b      	lsls	r3, r5, #29
 80016a8:	d000      	beq.n	80016ac <__aeabi_ddiv+0x26c>
 80016aa:	e13d      	b.n	8001928 <__aeabi_ddiv+0x4e8>
 80016ac:	08ed      	lsrs	r5, r5, #3
 80016ae:	4643      	mov	r3, r8
 80016b0:	01db      	lsls	r3, r3, #7
 80016b2:	d506      	bpl.n	80016c2 <__aeabi_ddiv+0x282>
 80016b4:	4642      	mov	r2, r8
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <__aeabi_ddiv+0x388>)
 80016b8:	401a      	ands	r2, r3
 80016ba:	4690      	mov	r8, r2
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	445a      	add	r2, fp
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <__aeabi_ddiv+0x38c>)
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dd00      	ble.n	80016ca <__aeabi_ddiv+0x28a>
 80016c8:	e71f      	b.n	800150a <__aeabi_ddiv+0xca>
 80016ca:	4643      	mov	r3, r8
 80016cc:	075b      	lsls	r3, r3, #29
 80016ce:	431d      	orrs	r5, r3
 80016d0:	4643      	mov	r3, r8
 80016d2:	0552      	lsls	r2, r2, #21
 80016d4:	025c      	lsls	r4, r3, #9
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	0d53      	lsrs	r3, r2, #21
 80016da:	e708      	b.n	80014ee <__aeabi_ddiv+0xae>
 80016dc:	4652      	mov	r2, sl
 80016de:	4322      	orrs	r2, r4
 80016e0:	d100      	bne.n	80016e4 <__aeabi_ddiv+0x2a4>
 80016e2:	e07b      	b.n	80017dc <__aeabi_ddiv+0x39c>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	d100      	bne.n	80016ea <__aeabi_ddiv+0x2aa>
 80016e8:	e0fa      	b.n	80018e0 <__aeabi_ddiv+0x4a0>
 80016ea:	0020      	movs	r0, r4
 80016ec:	f001 fa5c 	bl	8002ba8 <__clzsi2>
 80016f0:	0002      	movs	r2, r0
 80016f2:	3a0b      	subs	r2, #11
 80016f4:	231d      	movs	r3, #29
 80016f6:	0001      	movs	r1, r0
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	4652      	mov	r2, sl
 80016fc:	3908      	subs	r1, #8
 80016fe:	40da      	lsrs	r2, r3
 8001700:	408c      	lsls	r4, r1
 8001702:	4314      	orrs	r4, r2
 8001704:	4652      	mov	r2, sl
 8001706:	408a      	lsls	r2, r1
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <__aeabi_ddiv+0x390>)
 800170a:	4458      	add	r0, fp
 800170c:	469b      	mov	fp, r3
 800170e:	4483      	add	fp, r0
 8001710:	2000      	movs	r0, #0
 8001712:	e6d5      	b.n	80014c0 <__aeabi_ddiv+0x80>
 8001714:	464b      	mov	r3, r9
 8001716:	4323      	orrs	r3, r4
 8001718:	4698      	mov	r8, r3
 800171a:	d044      	beq.n	80017a6 <__aeabi_ddiv+0x366>
 800171c:	2c00      	cmp	r4, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_ddiv+0x2e2>
 8001720:	e0ce      	b.n	80018c0 <__aeabi_ddiv+0x480>
 8001722:	0020      	movs	r0, r4
 8001724:	f001 fa40 	bl	8002ba8 <__clzsi2>
 8001728:	0001      	movs	r1, r0
 800172a:	0002      	movs	r2, r0
 800172c:	390b      	subs	r1, #11
 800172e:	231d      	movs	r3, #29
 8001730:	1a5b      	subs	r3, r3, r1
 8001732:	4649      	mov	r1, r9
 8001734:	0010      	movs	r0, r2
 8001736:	40d9      	lsrs	r1, r3
 8001738:	3808      	subs	r0, #8
 800173a:	4084      	lsls	r4, r0
 800173c:	000b      	movs	r3, r1
 800173e:	464d      	mov	r5, r9
 8001740:	4323      	orrs	r3, r4
 8001742:	4698      	mov	r8, r3
 8001744:	4085      	lsls	r5, r0
 8001746:	4823      	ldr	r0, [pc, #140]	; (80017d4 <__aeabi_ddiv+0x394>)
 8001748:	1a83      	subs	r3, r0, r2
 800174a:	469b      	mov	fp, r3
 800174c:	2300      	movs	r3, #0
 800174e:	4699      	mov	r9, r3
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	e69a      	b.n	800148a <__aeabi_ddiv+0x4a>
 8001754:	464b      	mov	r3, r9
 8001756:	4323      	orrs	r3, r4
 8001758:	4698      	mov	r8, r3
 800175a:	d11d      	bne.n	8001798 <__aeabi_ddiv+0x358>
 800175c:	2308      	movs	r3, #8
 800175e:	4699      	mov	r9, r3
 8001760:	3b06      	subs	r3, #6
 8001762:	2500      	movs	r5, #0
 8001764:	4683      	mov	fp, r0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	e68f      	b.n	800148a <__aeabi_ddiv+0x4a>
 800176a:	4652      	mov	r2, sl
 800176c:	4322      	orrs	r2, r4
 800176e:	d109      	bne.n	8001784 <__aeabi_ddiv+0x344>
 8001770:	2302      	movs	r3, #2
 8001772:	4649      	mov	r1, r9
 8001774:	4319      	orrs	r1, r3
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <__aeabi_ddiv+0x398>)
 8001778:	4689      	mov	r9, r1
 800177a:	469c      	mov	ip, r3
 800177c:	2400      	movs	r4, #0
 800177e:	2002      	movs	r0, #2
 8001780:	44e3      	add	fp, ip
 8001782:	e69d      	b.n	80014c0 <__aeabi_ddiv+0x80>
 8001784:	2303      	movs	r3, #3
 8001786:	464a      	mov	r2, r9
 8001788:	431a      	orrs	r2, r3
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <__aeabi_ddiv+0x398>)
 800178c:	4691      	mov	r9, r2
 800178e:	469c      	mov	ip, r3
 8001790:	4652      	mov	r2, sl
 8001792:	2003      	movs	r0, #3
 8001794:	44e3      	add	fp, ip
 8001796:	e693      	b.n	80014c0 <__aeabi_ddiv+0x80>
 8001798:	230c      	movs	r3, #12
 800179a:	4699      	mov	r9, r3
 800179c:	3b09      	subs	r3, #9
 800179e:	46a0      	mov	r8, r4
 80017a0:	4683      	mov	fp, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	e671      	b.n	800148a <__aeabi_ddiv+0x4a>
 80017a6:	2304      	movs	r3, #4
 80017a8:	4699      	mov	r9, r3
 80017aa:	2300      	movs	r3, #0
 80017ac:	469b      	mov	fp, r3
 80017ae:	3301      	adds	r3, #1
 80017b0:	2500      	movs	r5, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	e669      	b.n	800148a <__aeabi_ddiv+0x4a>
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	000007ff 	.word	0x000007ff
 80017bc:	fffffc01 	.word	0xfffffc01
 80017c0:	08015558 	.word	0x08015558
 80017c4:	000003ff 	.word	0x000003ff
 80017c8:	feffffff 	.word	0xfeffffff
 80017cc:	000007fe 	.word	0x000007fe
 80017d0:	000003f3 	.word	0x000003f3
 80017d4:	fffffc0d 	.word	0xfffffc0d
 80017d8:	fffff801 	.word	0xfffff801
 80017dc:	4649      	mov	r1, r9
 80017de:	2301      	movs	r3, #1
 80017e0:	4319      	orrs	r1, r3
 80017e2:	4689      	mov	r9, r1
 80017e4:	2400      	movs	r4, #0
 80017e6:	2001      	movs	r0, #1
 80017e8:	e66a      	b.n	80014c0 <__aeabi_ddiv+0x80>
 80017ea:	2300      	movs	r3, #0
 80017ec:	2480      	movs	r4, #128	; 0x80
 80017ee:	469a      	mov	sl, r3
 80017f0:	2500      	movs	r5, #0
 80017f2:	4b8a      	ldr	r3, [pc, #552]	; (8001a1c <__aeabi_ddiv+0x5dc>)
 80017f4:	0324      	lsls	r4, r4, #12
 80017f6:	e67a      	b.n	80014ee <__aeabi_ddiv+0xae>
 80017f8:	2501      	movs	r5, #1
 80017fa:	426d      	negs	r5, r5
 80017fc:	2301      	movs	r3, #1
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	2b38      	cmp	r3, #56	; 0x38
 8001802:	dd00      	ble.n	8001806 <__aeabi_ddiv+0x3c6>
 8001804:	e670      	b.n	80014e8 <__aeabi_ddiv+0xa8>
 8001806:	2b1f      	cmp	r3, #31
 8001808:	dc00      	bgt.n	800180c <__aeabi_ddiv+0x3cc>
 800180a:	e0bf      	b.n	800198c <__aeabi_ddiv+0x54c>
 800180c:	211f      	movs	r1, #31
 800180e:	4249      	negs	r1, r1
 8001810:	1a8a      	subs	r2, r1, r2
 8001812:	4641      	mov	r1, r8
 8001814:	40d1      	lsrs	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	2b20      	cmp	r3, #32
 800181a:	d004      	beq.n	8001826 <__aeabi_ddiv+0x3e6>
 800181c:	4641      	mov	r1, r8
 800181e:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <__aeabi_ddiv+0x5e0>)
 8001820:	445b      	add	r3, fp
 8001822:	4099      	lsls	r1, r3
 8001824:	430d      	orrs	r5, r1
 8001826:	1e6b      	subs	r3, r5, #1
 8001828:	419d      	sbcs	r5, r3
 800182a:	2307      	movs	r3, #7
 800182c:	432a      	orrs	r2, r5
 800182e:	001d      	movs	r5, r3
 8001830:	2400      	movs	r4, #0
 8001832:	4015      	ands	r5, r2
 8001834:	4213      	tst	r3, r2
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x3fa>
 8001838:	e0d4      	b.n	80019e4 <__aeabi_ddiv+0x5a4>
 800183a:	210f      	movs	r1, #15
 800183c:	2300      	movs	r3, #0
 800183e:	4011      	ands	r1, r2
 8001840:	2904      	cmp	r1, #4
 8001842:	d100      	bne.n	8001846 <__aeabi_ddiv+0x406>
 8001844:	e0cb      	b.n	80019de <__aeabi_ddiv+0x59e>
 8001846:	1d11      	adds	r1, r2, #4
 8001848:	4291      	cmp	r1, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	000a      	movs	r2, r1
 8001852:	0219      	lsls	r1, r3, #8
 8001854:	d400      	bmi.n	8001858 <__aeabi_ddiv+0x418>
 8001856:	e0c2      	b.n	80019de <__aeabi_ddiv+0x59e>
 8001858:	2301      	movs	r3, #1
 800185a:	2400      	movs	r4, #0
 800185c:	2500      	movs	r5, #0
 800185e:	e646      	b.n	80014ee <__aeabi_ddiv+0xae>
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	4641      	mov	r1, r8
 8001864:	031b      	lsls	r3, r3, #12
 8001866:	4219      	tst	r1, r3
 8001868:	d008      	beq.n	800187c <__aeabi_ddiv+0x43c>
 800186a:	421c      	tst	r4, r3
 800186c:	d106      	bne.n	800187c <__aeabi_ddiv+0x43c>
 800186e:	431c      	orrs	r4, r3
 8001870:	0324      	lsls	r4, r4, #12
 8001872:	46ba      	mov	sl, r7
 8001874:	0015      	movs	r5, r2
 8001876:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <__aeabi_ddiv+0x5dc>)
 8001878:	0b24      	lsrs	r4, r4, #12
 800187a:	e638      	b.n	80014ee <__aeabi_ddiv+0xae>
 800187c:	2480      	movs	r4, #128	; 0x80
 800187e:	4643      	mov	r3, r8
 8001880:	0324      	lsls	r4, r4, #12
 8001882:	431c      	orrs	r4, r3
 8001884:	0324      	lsls	r4, r4, #12
 8001886:	46b2      	mov	sl, r6
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <__aeabi_ddiv+0x5dc>)
 800188a:	0b24      	lsrs	r4, r4, #12
 800188c:	e62f      	b.n	80014ee <__aeabi_ddiv+0xae>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <__aeabi_ddiv+0x454>
 8001892:	e703      	b.n	800169c <__aeabi_ddiv+0x25c>
 8001894:	19a6      	adds	r6, r4, r6
 8001896:	1e68      	subs	r0, r5, #1
 8001898:	42a6      	cmp	r6, r4
 800189a:	d200      	bcs.n	800189e <__aeabi_ddiv+0x45e>
 800189c:	e08d      	b.n	80019ba <__aeabi_ddiv+0x57a>
 800189e:	428e      	cmp	r6, r1
 80018a0:	d200      	bcs.n	80018a4 <__aeabi_ddiv+0x464>
 80018a2:	e0a3      	b.n	80019ec <__aeabi_ddiv+0x5ac>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x468>
 80018a6:	e0b3      	b.n	8001a10 <__aeabi_ddiv+0x5d0>
 80018a8:	0005      	movs	r5, r0
 80018aa:	e6f5      	b.n	8001698 <__aeabi_ddiv+0x258>
 80018ac:	42aa      	cmp	r2, r5
 80018ae:	d900      	bls.n	80018b2 <__aeabi_ddiv+0x472>
 80018b0:	e639      	b.n	8001526 <__aeabi_ddiv+0xe6>
 80018b2:	4643      	mov	r3, r8
 80018b4:	07de      	lsls	r6, r3, #31
 80018b6:	0858      	lsrs	r0, r3, #1
 80018b8:	086b      	lsrs	r3, r5, #1
 80018ba:	431e      	orrs	r6, r3
 80018bc:	07ed      	lsls	r5, r5, #31
 80018be:	e639      	b.n	8001534 <__aeabi_ddiv+0xf4>
 80018c0:	4648      	mov	r0, r9
 80018c2:	f001 f971 	bl	8002ba8 <__clzsi2>
 80018c6:	0001      	movs	r1, r0
 80018c8:	0002      	movs	r2, r0
 80018ca:	3115      	adds	r1, #21
 80018cc:	3220      	adds	r2, #32
 80018ce:	291c      	cmp	r1, #28
 80018d0:	dc00      	bgt.n	80018d4 <__aeabi_ddiv+0x494>
 80018d2:	e72c      	b.n	800172e <__aeabi_ddiv+0x2ee>
 80018d4:	464b      	mov	r3, r9
 80018d6:	3808      	subs	r0, #8
 80018d8:	4083      	lsls	r3, r0
 80018da:	2500      	movs	r5, #0
 80018dc:	4698      	mov	r8, r3
 80018de:	e732      	b.n	8001746 <__aeabi_ddiv+0x306>
 80018e0:	f001 f962 	bl	8002ba8 <__clzsi2>
 80018e4:	0003      	movs	r3, r0
 80018e6:	001a      	movs	r2, r3
 80018e8:	3215      	adds	r2, #21
 80018ea:	3020      	adds	r0, #32
 80018ec:	2a1c      	cmp	r2, #28
 80018ee:	dc00      	bgt.n	80018f2 <__aeabi_ddiv+0x4b2>
 80018f0:	e700      	b.n	80016f4 <__aeabi_ddiv+0x2b4>
 80018f2:	4654      	mov	r4, sl
 80018f4:	3b08      	subs	r3, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	409c      	lsls	r4, r3
 80018fa:	e705      	b.n	8001708 <__aeabi_ddiv+0x2c8>
 80018fc:	1936      	adds	r6, r6, r4
 80018fe:	3b01      	subs	r3, #1
 8001900:	42b4      	cmp	r4, r6
 8001902:	d900      	bls.n	8001906 <__aeabi_ddiv+0x4c6>
 8001904:	e6a6      	b.n	8001654 <__aeabi_ddiv+0x214>
 8001906:	42b2      	cmp	r2, r6
 8001908:	d800      	bhi.n	800190c <__aeabi_ddiv+0x4cc>
 800190a:	e6a3      	b.n	8001654 <__aeabi_ddiv+0x214>
 800190c:	1e83      	subs	r3, r0, #2
 800190e:	1936      	adds	r6, r6, r4
 8001910:	e6a0      	b.n	8001654 <__aeabi_ddiv+0x214>
 8001912:	1909      	adds	r1, r1, r4
 8001914:	3d01      	subs	r5, #1
 8001916:	428c      	cmp	r4, r1
 8001918:	d900      	bls.n	800191c <__aeabi_ddiv+0x4dc>
 800191a:	e68d      	b.n	8001638 <__aeabi_ddiv+0x1f8>
 800191c:	428a      	cmp	r2, r1
 800191e:	d800      	bhi.n	8001922 <__aeabi_ddiv+0x4e2>
 8001920:	e68a      	b.n	8001638 <__aeabi_ddiv+0x1f8>
 8001922:	1e85      	subs	r5, r0, #2
 8001924:	1909      	adds	r1, r1, r4
 8001926:	e687      	b.n	8001638 <__aeabi_ddiv+0x1f8>
 8001928:	230f      	movs	r3, #15
 800192a:	402b      	ands	r3, r5
 800192c:	2b04      	cmp	r3, #4
 800192e:	d100      	bne.n	8001932 <__aeabi_ddiv+0x4f2>
 8001930:	e6bc      	b.n	80016ac <__aeabi_ddiv+0x26c>
 8001932:	2305      	movs	r3, #5
 8001934:	425b      	negs	r3, r3
 8001936:	42ab      	cmp	r3, r5
 8001938:	419b      	sbcs	r3, r3
 800193a:	3504      	adds	r5, #4
 800193c:	425b      	negs	r3, r3
 800193e:	08ed      	lsrs	r5, r5, #3
 8001940:	4498      	add	r8, r3
 8001942:	e6b4      	b.n	80016ae <__aeabi_ddiv+0x26e>
 8001944:	42af      	cmp	r7, r5
 8001946:	d900      	bls.n	800194a <__aeabi_ddiv+0x50a>
 8001948:	e660      	b.n	800160c <__aeabi_ddiv+0x1cc>
 800194a:	4282      	cmp	r2, r0
 800194c:	d804      	bhi.n	8001958 <__aeabi_ddiv+0x518>
 800194e:	d000      	beq.n	8001952 <__aeabi_ddiv+0x512>
 8001950:	e65c      	b.n	800160c <__aeabi_ddiv+0x1cc>
 8001952:	42ae      	cmp	r6, r5
 8001954:	d800      	bhi.n	8001958 <__aeabi_ddiv+0x518>
 8001956:	e659      	b.n	800160c <__aeabi_ddiv+0x1cc>
 8001958:	2302      	movs	r3, #2
 800195a:	425b      	negs	r3, r3
 800195c:	469c      	mov	ip, r3
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	44e0      	add	r8, ip
 8001962:	469c      	mov	ip, r3
 8001964:	4465      	add	r5, ip
 8001966:	429d      	cmp	r5, r3
 8001968:	419b      	sbcs	r3, r3
 800196a:	425b      	negs	r3, r3
 800196c:	191b      	adds	r3, r3, r4
 800196e:	18c0      	adds	r0, r0, r3
 8001970:	e64d      	b.n	800160e <__aeabi_ddiv+0x1ce>
 8001972:	428a      	cmp	r2, r1
 8001974:	d800      	bhi.n	8001978 <__aeabi_ddiv+0x538>
 8001976:	e60e      	b.n	8001596 <__aeabi_ddiv+0x156>
 8001978:	1e83      	subs	r3, r0, #2
 800197a:	1909      	adds	r1, r1, r4
 800197c:	e60b      	b.n	8001596 <__aeabi_ddiv+0x156>
 800197e:	428a      	cmp	r2, r1
 8001980:	d800      	bhi.n	8001984 <__aeabi_ddiv+0x544>
 8001982:	e5f4      	b.n	800156e <__aeabi_ddiv+0x12e>
 8001984:	1e83      	subs	r3, r0, #2
 8001986:	4698      	mov	r8, r3
 8001988:	1909      	adds	r1, r1, r4
 800198a:	e5f0      	b.n	800156e <__aeabi_ddiv+0x12e>
 800198c:	4925      	ldr	r1, [pc, #148]	; (8001a24 <__aeabi_ddiv+0x5e4>)
 800198e:	0028      	movs	r0, r5
 8001990:	4459      	add	r1, fp
 8001992:	408d      	lsls	r5, r1
 8001994:	4642      	mov	r2, r8
 8001996:	408a      	lsls	r2, r1
 8001998:	1e69      	subs	r1, r5, #1
 800199a:	418d      	sbcs	r5, r1
 800199c:	4641      	mov	r1, r8
 800199e:	40d8      	lsrs	r0, r3
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	4302      	orrs	r2, r0
 80019a4:	432a      	orrs	r2, r5
 80019a6:	000b      	movs	r3, r1
 80019a8:	0751      	lsls	r1, r2, #29
 80019aa:	d100      	bne.n	80019ae <__aeabi_ddiv+0x56e>
 80019ac:	e751      	b.n	8001852 <__aeabi_ddiv+0x412>
 80019ae:	210f      	movs	r1, #15
 80019b0:	4011      	ands	r1, r2
 80019b2:	2904      	cmp	r1, #4
 80019b4:	d000      	beq.n	80019b8 <__aeabi_ddiv+0x578>
 80019b6:	e746      	b.n	8001846 <__aeabi_ddiv+0x406>
 80019b8:	e74b      	b.n	8001852 <__aeabi_ddiv+0x412>
 80019ba:	0005      	movs	r5, r0
 80019bc:	428e      	cmp	r6, r1
 80019be:	d000      	beq.n	80019c2 <__aeabi_ddiv+0x582>
 80019c0:	e66a      	b.n	8001698 <__aeabi_ddiv+0x258>
 80019c2:	9a00      	ldr	r2, [sp, #0]
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d000      	beq.n	80019ca <__aeabi_ddiv+0x58a>
 80019c8:	e666      	b.n	8001698 <__aeabi_ddiv+0x258>
 80019ca:	e667      	b.n	800169c <__aeabi_ddiv+0x25c>
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <__aeabi_ddiv+0x5e8>)
 80019ce:	445a      	add	r2, fp
 80019d0:	2a00      	cmp	r2, #0
 80019d2:	dc00      	bgt.n	80019d6 <__aeabi_ddiv+0x596>
 80019d4:	e710      	b.n	80017f8 <__aeabi_ddiv+0x3b8>
 80019d6:	2301      	movs	r3, #1
 80019d8:	2500      	movs	r5, #0
 80019da:	4498      	add	r8, r3
 80019dc:	e667      	b.n	80016ae <__aeabi_ddiv+0x26e>
 80019de:	075d      	lsls	r5, r3, #29
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	0b1c      	lsrs	r4, r3, #12
 80019e4:	08d2      	lsrs	r2, r2, #3
 80019e6:	2300      	movs	r3, #0
 80019e8:	4315      	orrs	r5, r2
 80019ea:	e580      	b.n	80014ee <__aeabi_ddiv+0xae>
 80019ec:	9800      	ldr	r0, [sp, #0]
 80019ee:	3d02      	subs	r5, #2
 80019f0:	0042      	lsls	r2, r0, #1
 80019f2:	4282      	cmp	r2, r0
 80019f4:	41bf      	sbcs	r7, r7
 80019f6:	427f      	negs	r7, r7
 80019f8:	193c      	adds	r4, r7, r4
 80019fa:	1936      	adds	r6, r6, r4
 80019fc:	9200      	str	r2, [sp, #0]
 80019fe:	e7dd      	b.n	80019bc <__aeabi_ddiv+0x57c>
 8001a00:	2480      	movs	r4, #128	; 0x80
 8001a02:	4643      	mov	r3, r8
 8001a04:	0324      	lsls	r4, r4, #12
 8001a06:	431c      	orrs	r4, r3
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__aeabi_ddiv+0x5dc>)
 8001a0c:	0b24      	lsrs	r4, r4, #12
 8001a0e:	e56e      	b.n	80014ee <__aeabi_ddiv+0xae>
 8001a10:	9a00      	ldr	r2, [sp, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d3ea      	bcc.n	80019ec <__aeabi_ddiv+0x5ac>
 8001a16:	0005      	movs	r5, r0
 8001a18:	e7d3      	b.n	80019c2 <__aeabi_ddiv+0x582>
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	000007ff 	.word	0x000007ff
 8001a20:	0000043e 	.word	0x0000043e
 8001a24:	0000041e 	.word	0x0000041e
 8001a28:	000003ff 	.word	0x000003ff

08001a2c <__eqdf2>:
 8001a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2e:	464e      	mov	r6, r9
 8001a30:	4645      	mov	r5, r8
 8001a32:	46de      	mov	lr, fp
 8001a34:	4657      	mov	r7, sl
 8001a36:	4690      	mov	r8, r2
 8001a38:	b5e0      	push	{r5, r6, r7, lr}
 8001a3a:	0017      	movs	r7, r2
 8001a3c:	031a      	lsls	r2, r3, #12
 8001a3e:	0b12      	lsrs	r2, r2, #12
 8001a40:	0005      	movs	r5, r0
 8001a42:	4684      	mov	ip, r0
 8001a44:	4819      	ldr	r0, [pc, #100]	; (8001aac <__eqdf2+0x80>)
 8001a46:	030e      	lsls	r6, r1, #12
 8001a48:	004c      	lsls	r4, r1, #1
 8001a4a:	4691      	mov	r9, r2
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	0fdb      	lsrs	r3, r3, #31
 8001a50:	469b      	mov	fp, r3
 8001a52:	0b36      	lsrs	r6, r6, #12
 8001a54:	0d64      	lsrs	r4, r4, #21
 8001a56:	0fc9      	lsrs	r1, r1, #31
 8001a58:	0d52      	lsrs	r2, r2, #21
 8001a5a:	4284      	cmp	r4, r0
 8001a5c:	d019      	beq.n	8001a92 <__eqdf2+0x66>
 8001a5e:	4282      	cmp	r2, r0
 8001a60:	d010      	beq.n	8001a84 <__eqdf2+0x58>
 8001a62:	2001      	movs	r0, #1
 8001a64:	4294      	cmp	r4, r2
 8001a66:	d10e      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a68:	454e      	cmp	r6, r9
 8001a6a:	d10c      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	45c4      	cmp	ip, r8
 8001a70:	d109      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a72:	4559      	cmp	r1, fp
 8001a74:	d017      	beq.n	8001aa6 <__eqdf2+0x7a>
 8001a76:	2c00      	cmp	r4, #0
 8001a78:	d105      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a7a:	0030      	movs	r0, r6
 8001a7c:	4328      	orrs	r0, r5
 8001a7e:	1e43      	subs	r3, r0, #1
 8001a80:	4198      	sbcs	r0, r3
 8001a82:	e000      	b.n	8001a86 <__eqdf2+0x5a>
 8001a84:	2001      	movs	r0, #1
 8001a86:	bcf0      	pop	{r4, r5, r6, r7}
 8001a88:	46bb      	mov	fp, r7
 8001a8a:	46b2      	mov	sl, r6
 8001a8c:	46a9      	mov	r9, r5
 8001a8e:	46a0      	mov	r8, r4
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a92:	0033      	movs	r3, r6
 8001a94:	2001      	movs	r0, #1
 8001a96:	432b      	orrs	r3, r5
 8001a98:	d1f5      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a9a:	42a2      	cmp	r2, r4
 8001a9c:	d1f3      	bne.n	8001a86 <__eqdf2+0x5a>
 8001a9e:	464b      	mov	r3, r9
 8001aa0:	433b      	orrs	r3, r7
 8001aa2:	d1f0      	bne.n	8001a86 <__eqdf2+0x5a>
 8001aa4:	e7e2      	b.n	8001a6c <__eqdf2+0x40>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e7ed      	b.n	8001a86 <__eqdf2+0x5a>
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	000007ff 	.word	0x000007ff

08001ab0 <__gedf2>:
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	4647      	mov	r7, r8
 8001ab4:	46ce      	mov	lr, r9
 8001ab6:	0004      	movs	r4, r0
 8001ab8:	0018      	movs	r0, r3
 8001aba:	0016      	movs	r6, r2
 8001abc:	031b      	lsls	r3, r3, #12
 8001abe:	0b1b      	lsrs	r3, r3, #12
 8001ac0:	4d2d      	ldr	r5, [pc, #180]	; (8001b78 <__gedf2+0xc8>)
 8001ac2:	004a      	lsls	r2, r1, #1
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	0043      	lsls	r3, r0, #1
 8001aca:	030f      	lsls	r7, r1, #12
 8001acc:	46a4      	mov	ip, r4
 8001ace:	46b0      	mov	r8, r6
 8001ad0:	0b3f      	lsrs	r7, r7, #12
 8001ad2:	0d52      	lsrs	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	0d5b      	lsrs	r3, r3, #21
 8001ad8:	0fc0      	lsrs	r0, r0, #31
 8001ada:	42aa      	cmp	r2, r5
 8001adc:	d021      	beq.n	8001b22 <__gedf2+0x72>
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	d013      	beq.n	8001b0a <__gedf2+0x5a>
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d122      	bne.n	8001b2c <__gedf2+0x7c>
 8001ae6:	433c      	orrs	r4, r7
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <__gedf2+0x42>
 8001aec:	464d      	mov	r5, r9
 8001aee:	432e      	orrs	r6, r5
 8001af0:	d022      	beq.n	8001b38 <__gedf2+0x88>
 8001af2:	2c00      	cmp	r4, #0
 8001af4:	d010      	beq.n	8001b18 <__gedf2+0x68>
 8001af6:	4281      	cmp	r1, r0
 8001af8:	d022      	beq.n	8001b40 <__gedf2+0x90>
 8001afa:	2002      	movs	r0, #2
 8001afc:	3901      	subs	r1, #1
 8001afe:	4008      	ands	r0, r1
 8001b00:	3801      	subs	r0, #1
 8001b02:	bcc0      	pop	{r6, r7}
 8001b04:	46b9      	mov	r9, r7
 8001b06:	46b0      	mov	r8, r6
 8001b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b0a:	464d      	mov	r5, r9
 8001b0c:	432e      	orrs	r6, r5
 8001b0e:	d129      	bne.n	8001b64 <__gedf2+0xb4>
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d1f0      	bne.n	8001af6 <__gedf2+0x46>
 8001b14:	433c      	orrs	r4, r7
 8001b16:	d1ee      	bne.n	8001af6 <__gedf2+0x46>
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	d1f2      	bne.n	8001b02 <__gedf2+0x52>
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	4240      	negs	r0, r0
 8001b20:	e7ef      	b.n	8001b02 <__gedf2+0x52>
 8001b22:	003d      	movs	r5, r7
 8001b24:	4325      	orrs	r5, r4
 8001b26:	d11d      	bne.n	8001b64 <__gedf2+0xb4>
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d0ee      	beq.n	8001b0a <__gedf2+0x5a>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e2      	bne.n	8001af6 <__gedf2+0x46>
 8001b30:	464c      	mov	r4, r9
 8001b32:	4326      	orrs	r6, r4
 8001b34:	d1df      	bne.n	8001af6 <__gedf2+0x46>
 8001b36:	e7e0      	b.n	8001afa <__gedf2+0x4a>
 8001b38:	2000      	movs	r0, #0
 8001b3a:	2c00      	cmp	r4, #0
 8001b3c:	d0e1      	beq.n	8001b02 <__gedf2+0x52>
 8001b3e:	e7dc      	b.n	8001afa <__gedf2+0x4a>
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dc0a      	bgt.n	8001b5a <__gedf2+0xaa>
 8001b44:	dbe8      	blt.n	8001b18 <__gedf2+0x68>
 8001b46:	454f      	cmp	r7, r9
 8001b48:	d8d7      	bhi.n	8001afa <__gedf2+0x4a>
 8001b4a:	d00e      	beq.n	8001b6a <__gedf2+0xba>
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	454f      	cmp	r7, r9
 8001b50:	d2d7      	bcs.n	8001b02 <__gedf2+0x52>
 8001b52:	2900      	cmp	r1, #0
 8001b54:	d0e2      	beq.n	8001b1c <__gedf2+0x6c>
 8001b56:	0008      	movs	r0, r1
 8001b58:	e7d3      	b.n	8001b02 <__gedf2+0x52>
 8001b5a:	4243      	negs	r3, r0
 8001b5c:	4158      	adcs	r0, r3
 8001b5e:	0040      	lsls	r0, r0, #1
 8001b60:	3801      	subs	r0, #1
 8001b62:	e7ce      	b.n	8001b02 <__gedf2+0x52>
 8001b64:	2002      	movs	r0, #2
 8001b66:	4240      	negs	r0, r0
 8001b68:	e7cb      	b.n	8001b02 <__gedf2+0x52>
 8001b6a:	45c4      	cmp	ip, r8
 8001b6c:	d8c5      	bhi.n	8001afa <__gedf2+0x4a>
 8001b6e:	2000      	movs	r0, #0
 8001b70:	45c4      	cmp	ip, r8
 8001b72:	d2c6      	bcs.n	8001b02 <__gedf2+0x52>
 8001b74:	e7ed      	b.n	8001b52 <__gedf2+0xa2>
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	000007ff 	.word	0x000007ff

08001b7c <__ledf2>:
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	4647      	mov	r7, r8
 8001b80:	46ce      	mov	lr, r9
 8001b82:	0004      	movs	r4, r0
 8001b84:	0018      	movs	r0, r3
 8001b86:	0016      	movs	r6, r2
 8001b88:	031b      	lsls	r3, r3, #12
 8001b8a:	0b1b      	lsrs	r3, r3, #12
 8001b8c:	4d2c      	ldr	r5, [pc, #176]	; (8001c40 <__ledf2+0xc4>)
 8001b8e:	004a      	lsls	r2, r1, #1
 8001b90:	4699      	mov	r9, r3
 8001b92:	b580      	push	{r7, lr}
 8001b94:	0043      	lsls	r3, r0, #1
 8001b96:	030f      	lsls	r7, r1, #12
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	46b0      	mov	r8, r6
 8001b9c:	0b3f      	lsrs	r7, r7, #12
 8001b9e:	0d52      	lsrs	r2, r2, #21
 8001ba0:	0fc9      	lsrs	r1, r1, #31
 8001ba2:	0d5b      	lsrs	r3, r3, #21
 8001ba4:	0fc0      	lsrs	r0, r0, #31
 8001ba6:	42aa      	cmp	r2, r5
 8001ba8:	d00d      	beq.n	8001bc6 <__ledf2+0x4a>
 8001baa:	42ab      	cmp	r3, r5
 8001bac:	d010      	beq.n	8001bd0 <__ledf2+0x54>
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d127      	bne.n	8001c02 <__ledf2+0x86>
 8001bb2:	433c      	orrs	r4, r7
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <__ledf2+0x60>
 8001bb8:	464d      	mov	r5, r9
 8001bba:	432e      	orrs	r6, r5
 8001bbc:	d10e      	bne.n	8001bdc <__ledf2+0x60>
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	2c00      	cmp	r4, #0
 8001bc2:	d015      	beq.n	8001bf0 <__ledf2+0x74>
 8001bc4:	e00e      	b.n	8001be4 <__ledf2+0x68>
 8001bc6:	003d      	movs	r5, r7
 8001bc8:	4325      	orrs	r5, r4
 8001bca:	d110      	bne.n	8001bee <__ledf2+0x72>
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d118      	bne.n	8001c02 <__ledf2+0x86>
 8001bd0:	464d      	mov	r5, r9
 8001bd2:	432e      	orrs	r6, r5
 8001bd4:	d10b      	bne.n	8001bee <__ledf2+0x72>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d102      	bne.n	8001be0 <__ledf2+0x64>
 8001bda:	433c      	orrs	r4, r7
 8001bdc:	2c00      	cmp	r4, #0
 8001bde:	d00b      	beq.n	8001bf8 <__ledf2+0x7c>
 8001be0:	4281      	cmp	r1, r0
 8001be2:	d014      	beq.n	8001c0e <__ledf2+0x92>
 8001be4:	2002      	movs	r0, #2
 8001be6:	3901      	subs	r1, #1
 8001be8:	4008      	ands	r0, r1
 8001bea:	3801      	subs	r0, #1
 8001bec:	e000      	b.n	8001bf0 <__ledf2+0x74>
 8001bee:	2002      	movs	r0, #2
 8001bf0:	bcc0      	pop	{r6, r7}
 8001bf2:	46b9      	mov	r9, r7
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <__ledf2+0x74>
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	4240      	negs	r0, r0
 8001c00:	e7f6      	b.n	8001bf0 <__ledf2+0x74>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1ec      	bne.n	8001be0 <__ledf2+0x64>
 8001c06:	464c      	mov	r4, r9
 8001c08:	4326      	orrs	r6, r4
 8001c0a:	d1e9      	bne.n	8001be0 <__ledf2+0x64>
 8001c0c:	e7ea      	b.n	8001be4 <__ledf2+0x68>
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	dd04      	ble.n	8001c1c <__ledf2+0xa0>
 8001c12:	4243      	negs	r3, r0
 8001c14:	4158      	adcs	r0, r3
 8001c16:	0040      	lsls	r0, r0, #1
 8001c18:	3801      	subs	r0, #1
 8001c1a:	e7e9      	b.n	8001bf0 <__ledf2+0x74>
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbeb      	blt.n	8001bf8 <__ledf2+0x7c>
 8001c20:	454f      	cmp	r7, r9
 8001c22:	d8df      	bhi.n	8001be4 <__ledf2+0x68>
 8001c24:	d006      	beq.n	8001c34 <__ledf2+0xb8>
 8001c26:	2000      	movs	r0, #0
 8001c28:	454f      	cmp	r7, r9
 8001c2a:	d2e1      	bcs.n	8001bf0 <__ledf2+0x74>
 8001c2c:	2900      	cmp	r1, #0
 8001c2e:	d0e5      	beq.n	8001bfc <__ledf2+0x80>
 8001c30:	0008      	movs	r0, r1
 8001c32:	e7dd      	b.n	8001bf0 <__ledf2+0x74>
 8001c34:	45c4      	cmp	ip, r8
 8001c36:	d8d5      	bhi.n	8001be4 <__ledf2+0x68>
 8001c38:	2000      	movs	r0, #0
 8001c3a:	45c4      	cmp	ip, r8
 8001c3c:	d2d8      	bcs.n	8001bf0 <__ledf2+0x74>
 8001c3e:	e7f5      	b.n	8001c2c <__ledf2+0xb0>
 8001c40:	000007ff 	.word	0x000007ff

08001c44 <__aeabi_dmul>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	4657      	mov	r7, sl
 8001c48:	464e      	mov	r6, r9
 8001c4a:	4645      	mov	r5, r8
 8001c4c:	46de      	mov	lr, fp
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	4698      	mov	r8, r3
 8001c52:	030c      	lsls	r4, r1, #12
 8001c54:	004b      	lsls	r3, r1, #1
 8001c56:	0006      	movs	r6, r0
 8001c58:	4692      	mov	sl, r2
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	0b24      	lsrs	r4, r4, #12
 8001c5e:	0d5b      	lsrs	r3, r3, #21
 8001c60:	0fcf      	lsrs	r7, r1, #31
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dmul+0x24>
 8001c66:	e15c      	b.n	8001f22 <__aeabi_dmul+0x2de>
 8001c68:	4ad9      	ldr	r2, [pc, #868]	; (8001fd0 <__aeabi_dmul+0x38c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dmul+0x2c>
 8001c6e:	e175      	b.n	8001f5c <__aeabi_dmul+0x318>
 8001c70:	0f42      	lsrs	r2, r0, #29
 8001c72:	00e4      	lsls	r4, r4, #3
 8001c74:	4314      	orrs	r4, r2
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0412      	lsls	r2, r2, #16
 8001c7a:	4314      	orrs	r4, r2
 8001c7c:	4ad5      	ldr	r2, [pc, #852]	; (8001fd4 <__aeabi_dmul+0x390>)
 8001c7e:	00c5      	lsls	r5, r0, #3
 8001c80:	4694      	mov	ip, r2
 8001c82:	4463      	add	r3, ip
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2300      	movs	r3, #0
 8001c88:	4699      	mov	r9, r3
 8001c8a:	469b      	mov	fp, r3
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	4642      	mov	r2, r8
 8001c90:	031e      	lsls	r6, r3, #12
 8001c92:	0fd2      	lsrs	r2, r2, #31
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4650      	mov	r0, sl
 8001c98:	4690      	mov	r8, r2
 8001c9a:	0b36      	lsrs	r6, r6, #12
 8001c9c:	0d5b      	lsrs	r3, r3, #21
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dmul+0x5e>
 8001ca0:	e120      	b.n	8001ee4 <__aeabi_dmul+0x2a0>
 8001ca2:	4acb      	ldr	r2, [pc, #812]	; (8001fd0 <__aeabi_dmul+0x38c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dmul+0x66>
 8001ca8:	e162      	b.n	8001f70 <__aeabi_dmul+0x32c>
 8001caa:	49ca      	ldr	r1, [pc, #808]	; (8001fd4 <__aeabi_dmul+0x390>)
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	468c      	mov	ip, r1
 8001cb0:	9900      	ldr	r1, [sp, #0]
 8001cb2:	4463      	add	r3, ip
 8001cb4:	00f6      	lsls	r6, r6, #3
 8001cb6:	468c      	mov	ip, r1
 8001cb8:	4316      	orrs	r6, r2
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	449c      	add	ip, r3
 8001cbe:	0412      	lsls	r2, r2, #16
 8001cc0:	4663      	mov	r3, ip
 8001cc2:	4316      	orrs	r6, r2
 8001cc4:	00c2      	lsls	r2, r0, #3
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	9900      	ldr	r1, [sp, #0]
 8001ccc:	4643      	mov	r3, r8
 8001cce:	3101      	adds	r1, #1
 8001cd0:	468c      	mov	ip, r1
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	407b      	eors	r3, r7
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	290f      	cmp	r1, #15
 8001cda:	d826      	bhi.n	8001d2a <__aeabi_dmul+0xe6>
 8001cdc:	4bbe      	ldr	r3, [pc, #760]	; (8001fd8 <__aeabi_dmul+0x394>)
 8001cde:	0089      	lsls	r1, r1, #2
 8001ce0:	5859      	ldr	r1, [r3, r1]
 8001ce2:	468f      	mov	pc, r1
 8001ce4:	4643      	mov	r3, r8
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	0034      	movs	r4, r6
 8001cea:	0015      	movs	r5, r2
 8001cec:	4683      	mov	fp, r0
 8001cee:	465b      	mov	r3, fp
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d016      	beq.n	8001d22 <__aeabi_dmul+0xde>
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d100      	bne.n	8001cfa <__aeabi_dmul+0xb6>
 8001cf8:	e203      	b.n	8002102 <__aeabi_dmul+0x4be>
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dmul+0xbc>
 8001cfe:	e0cd      	b.n	8001e9c <__aeabi_dmul+0x258>
 8001d00:	2200      	movs	r2, #0
 8001d02:	2400      	movs	r4, #0
 8001d04:	2500      	movs	r5, #0
 8001d06:	9b01      	ldr	r3, [sp, #4]
 8001d08:	0512      	lsls	r2, r2, #20
 8001d0a:	4322      	orrs	r2, r4
 8001d0c:	07db      	lsls	r3, r3, #31
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	0028      	movs	r0, r5
 8001d12:	0011      	movs	r1, r2
 8001d14:	b007      	add	sp, #28
 8001d16:	bcf0      	pop	{r4, r5, r6, r7}
 8001d18:	46bb      	mov	fp, r7
 8001d1a:	46b2      	mov	sl, r6
 8001d1c:	46a9      	mov	r9, r5
 8001d1e:	46a0      	mov	r8, r4
 8001d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d22:	2400      	movs	r4, #0
 8001d24:	2500      	movs	r5, #0
 8001d26:	4aaa      	ldr	r2, [pc, #680]	; (8001fd0 <__aeabi_dmul+0x38c>)
 8001d28:	e7ed      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8001d2a:	0c28      	lsrs	r0, r5, #16
 8001d2c:	042d      	lsls	r5, r5, #16
 8001d2e:	0c2d      	lsrs	r5, r5, #16
 8001d30:	002b      	movs	r3, r5
 8001d32:	0c11      	lsrs	r1, r2, #16
 8001d34:	0412      	lsls	r2, r2, #16
 8001d36:	0c12      	lsrs	r2, r2, #16
 8001d38:	4353      	muls	r3, r2
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	0013      	movs	r3, r2
 8001d3e:	002f      	movs	r7, r5
 8001d40:	4343      	muls	r3, r0
 8001d42:	4699      	mov	r9, r3
 8001d44:	434f      	muls	r7, r1
 8001d46:	444f      	add	r7, r9
 8001d48:	46bb      	mov	fp, r7
 8001d4a:	4647      	mov	r7, r8
 8001d4c:	000b      	movs	r3, r1
 8001d4e:	0c3f      	lsrs	r7, r7, #16
 8001d50:	46ba      	mov	sl, r7
 8001d52:	4343      	muls	r3, r0
 8001d54:	44da      	add	sl, fp
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	45d1      	cmp	r9, sl
 8001d5a:	d904      	bls.n	8001d66 <__aeabi_dmul+0x122>
 8001d5c:	2780      	movs	r7, #128	; 0x80
 8001d5e:	027f      	lsls	r7, r7, #9
 8001d60:	46b9      	mov	r9, r7
 8001d62:	444b      	add	r3, r9
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	4653      	mov	r3, sl
 8001d68:	0c1b      	lsrs	r3, r3, #16
 8001d6a:	469b      	mov	fp, r3
 8001d6c:	4653      	mov	r3, sl
 8001d6e:	041f      	lsls	r7, r3, #16
 8001d70:	4643      	mov	r3, r8
 8001d72:	041b      	lsls	r3, r3, #16
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	4698      	mov	r8, r3
 8001d78:	003b      	movs	r3, r7
 8001d7a:	4443      	add	r3, r8
 8001d7c:	9304      	str	r3, [sp, #16]
 8001d7e:	0c33      	lsrs	r3, r6, #16
 8001d80:	0436      	lsls	r6, r6, #16
 8001d82:	0c36      	lsrs	r6, r6, #16
 8001d84:	4698      	mov	r8, r3
 8001d86:	0033      	movs	r3, r6
 8001d88:	4343      	muls	r3, r0
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4343      	muls	r3, r0
 8001d90:	002f      	movs	r7, r5
 8001d92:	469a      	mov	sl, r3
 8001d94:	4643      	mov	r3, r8
 8001d96:	4377      	muls	r7, r6
 8001d98:	435d      	muls	r5, r3
 8001d9a:	0c38      	lsrs	r0, r7, #16
 8001d9c:	444d      	add	r5, r9
 8001d9e:	1945      	adds	r5, r0, r5
 8001da0:	45a9      	cmp	r9, r5
 8001da2:	d903      	bls.n	8001dac <__aeabi_dmul+0x168>
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	4699      	mov	r9, r3
 8001daa:	44ca      	add	sl, r9
 8001dac:	043f      	lsls	r7, r7, #16
 8001dae:	0c28      	lsrs	r0, r5, #16
 8001db0:	0c3f      	lsrs	r7, r7, #16
 8001db2:	042d      	lsls	r5, r5, #16
 8001db4:	19ed      	adds	r5, r5, r7
 8001db6:	0c27      	lsrs	r7, r4, #16
 8001db8:	0424      	lsls	r4, r4, #16
 8001dba:	0c24      	lsrs	r4, r4, #16
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	4350      	muls	r0, r2
 8001dc2:	437a      	muls	r2, r7
 8001dc4:	4691      	mov	r9, r2
 8001dc6:	003a      	movs	r2, r7
 8001dc8:	4453      	add	r3, sl
 8001dca:	9305      	str	r3, [sp, #20]
 8001dcc:	0c03      	lsrs	r3, r0, #16
 8001dce:	469a      	mov	sl, r3
 8001dd0:	434a      	muls	r2, r1
 8001dd2:	4361      	muls	r1, r4
 8001dd4:	4449      	add	r1, r9
 8001dd6:	4451      	add	r1, sl
 8001dd8:	44ab      	add	fp, r5
 8001dda:	4589      	cmp	r9, r1
 8001ddc:	d903      	bls.n	8001de6 <__aeabi_dmul+0x1a2>
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	025b      	lsls	r3, r3, #9
 8001de2:	4699      	mov	r9, r3
 8001de4:	444a      	add	r2, r9
 8001de6:	0400      	lsls	r0, r0, #16
 8001de8:	0c0b      	lsrs	r3, r1, #16
 8001dea:	0c00      	lsrs	r0, r0, #16
 8001dec:	0409      	lsls	r1, r1, #16
 8001dee:	1809      	adds	r1, r1, r0
 8001df0:	0020      	movs	r0, r4
 8001df2:	4699      	mov	r9, r3
 8001df4:	4643      	mov	r3, r8
 8001df6:	4370      	muls	r0, r6
 8001df8:	435c      	muls	r4, r3
 8001dfa:	437e      	muls	r6, r7
 8001dfc:	435f      	muls	r7, r3
 8001dfe:	0c03      	lsrs	r3, r0, #16
 8001e00:	4698      	mov	r8, r3
 8001e02:	19a4      	adds	r4, r4, r6
 8001e04:	4444      	add	r4, r8
 8001e06:	444a      	add	r2, r9
 8001e08:	9703      	str	r7, [sp, #12]
 8001e0a:	42a6      	cmp	r6, r4
 8001e0c:	d904      	bls.n	8001e18 <__aeabi_dmul+0x1d4>
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	025b      	lsls	r3, r3, #9
 8001e12:	4698      	mov	r8, r3
 8001e14:	4447      	add	r7, r8
 8001e16:	9703      	str	r7, [sp, #12]
 8001e18:	0423      	lsls	r3, r4, #16
 8001e1a:	9e02      	ldr	r6, [sp, #8]
 8001e1c:	469a      	mov	sl, r3
 8001e1e:	9b05      	ldr	r3, [sp, #20]
 8001e20:	445e      	add	r6, fp
 8001e22:	4698      	mov	r8, r3
 8001e24:	42ae      	cmp	r6, r5
 8001e26:	41ad      	sbcs	r5, r5
 8001e28:	1876      	adds	r6, r6, r1
 8001e2a:	428e      	cmp	r6, r1
 8001e2c:	4189      	sbcs	r1, r1
 8001e2e:	0400      	lsls	r0, r0, #16
 8001e30:	0c00      	lsrs	r0, r0, #16
 8001e32:	4450      	add	r0, sl
 8001e34:	4440      	add	r0, r8
 8001e36:	426d      	negs	r5, r5
 8001e38:	1947      	adds	r7, r0, r5
 8001e3a:	46b8      	mov	r8, r7
 8001e3c:	4693      	mov	fp, r2
 8001e3e:	4249      	negs	r1, r1
 8001e40:	4689      	mov	r9, r1
 8001e42:	44c3      	add	fp, r8
 8001e44:	44d9      	add	r9, fp
 8001e46:	4298      	cmp	r0, r3
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	45a8      	cmp	r8, r5
 8001e4c:	41ad      	sbcs	r5, r5
 8001e4e:	4593      	cmp	fp, r2
 8001e50:	4192      	sbcs	r2, r2
 8001e52:	4589      	cmp	r9, r1
 8001e54:	4189      	sbcs	r1, r1
 8001e56:	426d      	negs	r5, r5
 8001e58:	4240      	negs	r0, r0
 8001e5a:	4328      	orrs	r0, r5
 8001e5c:	0c24      	lsrs	r4, r4, #16
 8001e5e:	4252      	negs	r2, r2
 8001e60:	4249      	negs	r1, r1
 8001e62:	430a      	orrs	r2, r1
 8001e64:	9b03      	ldr	r3, [sp, #12]
 8001e66:	1900      	adds	r0, r0, r4
 8001e68:	1880      	adds	r0, r0, r2
 8001e6a:	18c7      	adds	r7, r0, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	0ddc      	lsrs	r4, r3, #23
 8001e70:	9b04      	ldr	r3, [sp, #16]
 8001e72:	0275      	lsls	r5, r6, #9
 8001e74:	431d      	orrs	r5, r3
 8001e76:	1e6a      	subs	r2, r5, #1
 8001e78:	4195      	sbcs	r5, r2
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	0df6      	lsrs	r6, r6, #23
 8001e7e:	027f      	lsls	r7, r7, #9
 8001e80:	4335      	orrs	r5, r6
 8001e82:	025a      	lsls	r2, r3, #9
 8001e84:	433c      	orrs	r4, r7
 8001e86:	4315      	orrs	r5, r2
 8001e88:	01fb      	lsls	r3, r7, #7
 8001e8a:	d400      	bmi.n	8001e8e <__aeabi_dmul+0x24a>
 8001e8c:	e11c      	b.n	80020c8 <__aeabi_dmul+0x484>
 8001e8e:	2101      	movs	r1, #1
 8001e90:	086a      	lsrs	r2, r5, #1
 8001e92:	400d      	ands	r5, r1
 8001e94:	4315      	orrs	r5, r2
 8001e96:	07e2      	lsls	r2, r4, #31
 8001e98:	4315      	orrs	r5, r2
 8001e9a:	0864      	lsrs	r4, r4, #1
 8001e9c:	494f      	ldr	r1, [pc, #316]	; (8001fdc <__aeabi_dmul+0x398>)
 8001e9e:	4461      	add	r1, ip
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_dmul+0x262>
 8001ea4:	e0b0      	b.n	8002008 <__aeabi_dmul+0x3c4>
 8001ea6:	076b      	lsls	r3, r5, #29
 8001ea8:	d009      	beq.n	8001ebe <__aeabi_dmul+0x27a>
 8001eaa:	220f      	movs	r2, #15
 8001eac:	402a      	ands	r2, r5
 8001eae:	2a04      	cmp	r2, #4
 8001eb0:	d005      	beq.n	8001ebe <__aeabi_dmul+0x27a>
 8001eb2:	1d2a      	adds	r2, r5, #4
 8001eb4:	42aa      	cmp	r2, r5
 8001eb6:	41ad      	sbcs	r5, r5
 8001eb8:	426d      	negs	r5, r5
 8001eba:	1964      	adds	r4, r4, r5
 8001ebc:	0015      	movs	r5, r2
 8001ebe:	01e3      	lsls	r3, r4, #7
 8001ec0:	d504      	bpl.n	8001ecc <__aeabi_dmul+0x288>
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <__aeabi_dmul+0x39c>)
 8001ec6:	00c9      	lsls	r1, r1, #3
 8001ec8:	4014      	ands	r4, r2
 8001eca:	4461      	add	r1, ip
 8001ecc:	4a45      	ldr	r2, [pc, #276]	; (8001fe4 <__aeabi_dmul+0x3a0>)
 8001ece:	4291      	cmp	r1, r2
 8001ed0:	dd00      	ble.n	8001ed4 <__aeabi_dmul+0x290>
 8001ed2:	e726      	b.n	8001d22 <__aeabi_dmul+0xde>
 8001ed4:	0762      	lsls	r2, r4, #29
 8001ed6:	08ed      	lsrs	r5, r5, #3
 8001ed8:	0264      	lsls	r4, r4, #9
 8001eda:	0549      	lsls	r1, r1, #21
 8001edc:	4315      	orrs	r5, r2
 8001ede:	0b24      	lsrs	r4, r4, #12
 8001ee0:	0d4a      	lsrs	r2, r1, #21
 8001ee2:	e710      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	4332      	orrs	r2, r6
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dmul+0x2a8>
 8001eea:	e07f      	b.n	8001fec <__aeabi_dmul+0x3a8>
 8001eec:	2e00      	cmp	r6, #0
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dmul+0x2ae>
 8001ef0:	e0dc      	b.n	80020ac <__aeabi_dmul+0x468>
 8001ef2:	0030      	movs	r0, r6
 8001ef4:	f000 fe58 	bl	8002ba8 <__clzsi2>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	3a0b      	subs	r2, #11
 8001efc:	231d      	movs	r3, #29
 8001efe:	0001      	movs	r1, r0
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	4652      	mov	r2, sl
 8001f04:	3908      	subs	r1, #8
 8001f06:	40da      	lsrs	r2, r3
 8001f08:	408e      	lsls	r6, r1
 8001f0a:	4316      	orrs	r6, r2
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	408a      	lsls	r2, r1
 8001f10:	9b00      	ldr	r3, [sp, #0]
 8001f12:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <__aeabi_dmul+0x3a4>)
 8001f14:	1a18      	subs	r0, r3, r0
 8001f16:	0003      	movs	r3, r0
 8001f18:	468c      	mov	ip, r1
 8001f1a:	4463      	add	r3, ip
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	e6d3      	b.n	8001cca <__aeabi_dmul+0x86>
 8001f22:	0025      	movs	r5, r4
 8001f24:	4305      	orrs	r5, r0
 8001f26:	d04a      	beq.n	8001fbe <__aeabi_dmul+0x37a>
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_dmul+0x2ea>
 8001f2c:	e0b0      	b.n	8002090 <__aeabi_dmul+0x44c>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fe3a 	bl	8002ba8 <__clzsi2>
 8001f34:	0001      	movs	r1, r0
 8001f36:	0002      	movs	r2, r0
 8001f38:	390b      	subs	r1, #11
 8001f3a:	231d      	movs	r3, #29
 8001f3c:	0010      	movs	r0, r2
 8001f3e:	1a5b      	subs	r3, r3, r1
 8001f40:	0031      	movs	r1, r6
 8001f42:	0035      	movs	r5, r6
 8001f44:	3808      	subs	r0, #8
 8001f46:	4084      	lsls	r4, r0
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	4085      	lsls	r5, r0
 8001f4c:	430c      	orrs	r4, r1
 8001f4e:	4826      	ldr	r0, [pc, #152]	; (8001fe8 <__aeabi_dmul+0x3a4>)
 8001f50:	1a83      	subs	r3, r0, r2
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2300      	movs	r3, #0
 8001f56:	4699      	mov	r9, r3
 8001f58:	469b      	mov	fp, r3
 8001f5a:	e697      	b.n	8001c8c <__aeabi_dmul+0x48>
 8001f5c:	0005      	movs	r5, r0
 8001f5e:	4325      	orrs	r5, r4
 8001f60:	d126      	bne.n	8001fb0 <__aeabi_dmul+0x36c>
 8001f62:	2208      	movs	r2, #8
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2302      	movs	r3, #2
 8001f68:	2400      	movs	r4, #0
 8001f6a:	4691      	mov	r9, r2
 8001f6c:	469b      	mov	fp, r3
 8001f6e:	e68d      	b.n	8001c8c <__aeabi_dmul+0x48>
 8001f70:	4652      	mov	r2, sl
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	4332      	orrs	r2, r6
 8001f76:	d110      	bne.n	8001f9a <__aeabi_dmul+0x356>
 8001f78:	4915      	ldr	r1, [pc, #84]	; (8001fd0 <__aeabi_dmul+0x38c>)
 8001f7a:	2600      	movs	r6, #0
 8001f7c:	468c      	mov	ip, r1
 8001f7e:	4463      	add	r3, ip
 8001f80:	4649      	mov	r1, r9
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2302      	movs	r3, #2
 8001f86:	4319      	orrs	r1, r3
 8001f88:	4689      	mov	r9, r1
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	e69d      	b.n	8001cca <__aeabi_dmul+0x86>
 8001f8e:	465b      	mov	r3, fp
 8001f90:	9701      	str	r7, [sp, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d000      	beq.n	8001f98 <__aeabi_dmul+0x354>
 8001f96:	e6ad      	b.n	8001cf4 <__aeabi_dmul+0xb0>
 8001f98:	e6c3      	b.n	8001d22 <__aeabi_dmul+0xde>
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <__aeabi_dmul+0x38c>)
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	4694      	mov	ip, r2
 8001fa0:	4463      	add	r3, ip
 8001fa2:	464a      	mov	r2, r9
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4691      	mov	r9, r2
 8001fac:	4652      	mov	r2, sl
 8001fae:	e68c      	b.n	8001cca <__aeabi_dmul+0x86>
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	0005      	movs	r5, r0
 8001fb8:	4691      	mov	r9, r2
 8001fba:	469b      	mov	fp, r3
 8001fbc:	e666      	b.n	8001c8c <__aeabi_dmul+0x48>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	4699      	mov	r9, r3
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	2400      	movs	r4, #0
 8001fca:	469b      	mov	fp, r3
 8001fcc:	e65e      	b.n	8001c8c <__aeabi_dmul+0x48>
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	000007ff 	.word	0x000007ff
 8001fd4:	fffffc01 	.word	0xfffffc01
 8001fd8:	08015598 	.word	0x08015598
 8001fdc:	000003ff 	.word	0x000003ff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	fffffc0d 	.word	0xfffffc0d
 8001fec:	4649      	mov	r1, r9
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4319      	orrs	r1, r3
 8001ff2:	4689      	mov	r9, r1
 8001ff4:	2600      	movs	r6, #0
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	e667      	b.n	8001cca <__aeabi_dmul+0x86>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2480      	movs	r4, #128	; 0x80
 8001ffe:	2500      	movs	r5, #0
 8002000:	4a43      	ldr	r2, [pc, #268]	; (8002110 <__aeabi_dmul+0x4cc>)
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	0324      	lsls	r4, r4, #12
 8002006:	e67e      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002008:	2001      	movs	r0, #1
 800200a:	1a40      	subs	r0, r0, r1
 800200c:	2838      	cmp	r0, #56	; 0x38
 800200e:	dd00      	ble.n	8002012 <__aeabi_dmul+0x3ce>
 8002010:	e676      	b.n	8001d00 <__aeabi_dmul+0xbc>
 8002012:	281f      	cmp	r0, #31
 8002014:	dd5b      	ble.n	80020ce <__aeabi_dmul+0x48a>
 8002016:	221f      	movs	r2, #31
 8002018:	0023      	movs	r3, r4
 800201a:	4252      	negs	r2, r2
 800201c:	1a51      	subs	r1, r2, r1
 800201e:	40cb      	lsrs	r3, r1
 8002020:	0019      	movs	r1, r3
 8002022:	2820      	cmp	r0, #32
 8002024:	d003      	beq.n	800202e <__aeabi_dmul+0x3ea>
 8002026:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <__aeabi_dmul+0x4d0>)
 8002028:	4462      	add	r2, ip
 800202a:	4094      	lsls	r4, r2
 800202c:	4325      	orrs	r5, r4
 800202e:	1e6a      	subs	r2, r5, #1
 8002030:	4195      	sbcs	r5, r2
 8002032:	002a      	movs	r2, r5
 8002034:	430a      	orrs	r2, r1
 8002036:	2107      	movs	r1, #7
 8002038:	000d      	movs	r5, r1
 800203a:	2400      	movs	r4, #0
 800203c:	4015      	ands	r5, r2
 800203e:	4211      	tst	r1, r2
 8002040:	d05b      	beq.n	80020fa <__aeabi_dmul+0x4b6>
 8002042:	210f      	movs	r1, #15
 8002044:	2400      	movs	r4, #0
 8002046:	4011      	ands	r1, r2
 8002048:	2904      	cmp	r1, #4
 800204a:	d053      	beq.n	80020f4 <__aeabi_dmul+0x4b0>
 800204c:	1d11      	adds	r1, r2, #4
 800204e:	4291      	cmp	r1, r2
 8002050:	4192      	sbcs	r2, r2
 8002052:	4252      	negs	r2, r2
 8002054:	18a4      	adds	r4, r4, r2
 8002056:	000a      	movs	r2, r1
 8002058:	0223      	lsls	r3, r4, #8
 800205a:	d54b      	bpl.n	80020f4 <__aeabi_dmul+0x4b0>
 800205c:	2201      	movs	r2, #1
 800205e:	2400      	movs	r4, #0
 8002060:	2500      	movs	r5, #0
 8002062:	e650      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	031b      	lsls	r3, r3, #12
 8002068:	421c      	tst	r4, r3
 800206a:	d009      	beq.n	8002080 <__aeabi_dmul+0x43c>
 800206c:	421e      	tst	r6, r3
 800206e:	d107      	bne.n	8002080 <__aeabi_dmul+0x43c>
 8002070:	4333      	orrs	r3, r6
 8002072:	031c      	lsls	r4, r3, #12
 8002074:	4643      	mov	r3, r8
 8002076:	0015      	movs	r5, r2
 8002078:	0b24      	lsrs	r4, r4, #12
 800207a:	4a25      	ldr	r2, [pc, #148]	; (8002110 <__aeabi_dmul+0x4cc>)
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	e642      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	0312      	lsls	r2, r2, #12
 8002084:	4314      	orrs	r4, r2
 8002086:	0324      	lsls	r4, r4, #12
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <__aeabi_dmul+0x4cc>)
 800208a:	0b24      	lsrs	r4, r4, #12
 800208c:	9701      	str	r7, [sp, #4]
 800208e:	e63a      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002090:	f000 fd8a 	bl	8002ba8 <__clzsi2>
 8002094:	0001      	movs	r1, r0
 8002096:	0002      	movs	r2, r0
 8002098:	3115      	adds	r1, #21
 800209a:	3220      	adds	r2, #32
 800209c:	291c      	cmp	r1, #28
 800209e:	dc00      	bgt.n	80020a2 <__aeabi_dmul+0x45e>
 80020a0:	e74b      	b.n	8001f3a <__aeabi_dmul+0x2f6>
 80020a2:	0034      	movs	r4, r6
 80020a4:	3808      	subs	r0, #8
 80020a6:	2500      	movs	r5, #0
 80020a8:	4084      	lsls	r4, r0
 80020aa:	e750      	b.n	8001f4e <__aeabi_dmul+0x30a>
 80020ac:	f000 fd7c 	bl	8002ba8 <__clzsi2>
 80020b0:	0003      	movs	r3, r0
 80020b2:	001a      	movs	r2, r3
 80020b4:	3215      	adds	r2, #21
 80020b6:	3020      	adds	r0, #32
 80020b8:	2a1c      	cmp	r2, #28
 80020ba:	dc00      	bgt.n	80020be <__aeabi_dmul+0x47a>
 80020bc:	e71e      	b.n	8001efc <__aeabi_dmul+0x2b8>
 80020be:	4656      	mov	r6, sl
 80020c0:	3b08      	subs	r3, #8
 80020c2:	2200      	movs	r2, #0
 80020c4:	409e      	lsls	r6, r3
 80020c6:	e723      	b.n	8001f10 <__aeabi_dmul+0x2cc>
 80020c8:	9b00      	ldr	r3, [sp, #0]
 80020ca:	469c      	mov	ip, r3
 80020cc:	e6e6      	b.n	8001e9c <__aeabi_dmul+0x258>
 80020ce:	4912      	ldr	r1, [pc, #72]	; (8002118 <__aeabi_dmul+0x4d4>)
 80020d0:	0022      	movs	r2, r4
 80020d2:	4461      	add	r1, ip
 80020d4:	002e      	movs	r6, r5
 80020d6:	408d      	lsls	r5, r1
 80020d8:	408a      	lsls	r2, r1
 80020da:	40c6      	lsrs	r6, r0
 80020dc:	1e69      	subs	r1, r5, #1
 80020de:	418d      	sbcs	r5, r1
 80020e0:	4332      	orrs	r2, r6
 80020e2:	432a      	orrs	r2, r5
 80020e4:	40c4      	lsrs	r4, r0
 80020e6:	0753      	lsls	r3, r2, #29
 80020e8:	d0b6      	beq.n	8002058 <__aeabi_dmul+0x414>
 80020ea:	210f      	movs	r1, #15
 80020ec:	4011      	ands	r1, r2
 80020ee:	2904      	cmp	r1, #4
 80020f0:	d1ac      	bne.n	800204c <__aeabi_dmul+0x408>
 80020f2:	e7b1      	b.n	8002058 <__aeabi_dmul+0x414>
 80020f4:	0765      	lsls	r5, r4, #29
 80020f6:	0264      	lsls	r4, r4, #9
 80020f8:	0b24      	lsrs	r4, r4, #12
 80020fa:	08d2      	lsrs	r2, r2, #3
 80020fc:	4315      	orrs	r5, r2
 80020fe:	2200      	movs	r2, #0
 8002100:	e601      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	4314      	orrs	r4, r2
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	4a01      	ldr	r2, [pc, #4]	; (8002110 <__aeabi_dmul+0x4cc>)
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	e5fa      	b.n	8001d06 <__aeabi_dmul+0xc2>
 8002110:	000007ff 	.word	0x000007ff
 8002114:	0000043e 	.word	0x0000043e
 8002118:	0000041e 	.word	0x0000041e

0800211c <__aeabi_dsub>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	4657      	mov	r7, sl
 8002120:	464e      	mov	r6, r9
 8002122:	4645      	mov	r5, r8
 8002124:	46de      	mov	lr, fp
 8002126:	b5e0      	push	{r5, r6, r7, lr}
 8002128:	001e      	movs	r6, r3
 800212a:	0017      	movs	r7, r2
 800212c:	004a      	lsls	r2, r1, #1
 800212e:	030b      	lsls	r3, r1, #12
 8002130:	0d52      	lsrs	r2, r2, #21
 8002132:	0a5b      	lsrs	r3, r3, #9
 8002134:	4690      	mov	r8, r2
 8002136:	0f42      	lsrs	r2, r0, #29
 8002138:	431a      	orrs	r2, r3
 800213a:	0fcd      	lsrs	r5, r1, #31
 800213c:	4ccd      	ldr	r4, [pc, #820]	; (8002474 <__aeabi_dsub+0x358>)
 800213e:	0331      	lsls	r1, r6, #12
 8002140:	00c3      	lsls	r3, r0, #3
 8002142:	4694      	mov	ip, r2
 8002144:	0070      	lsls	r0, r6, #1
 8002146:	0f7a      	lsrs	r2, r7, #29
 8002148:	0a49      	lsrs	r1, r1, #9
 800214a:	00ff      	lsls	r7, r7, #3
 800214c:	469a      	mov	sl, r3
 800214e:	46b9      	mov	r9, r7
 8002150:	0d40      	lsrs	r0, r0, #21
 8002152:	0ff6      	lsrs	r6, r6, #31
 8002154:	4311      	orrs	r1, r2
 8002156:	42a0      	cmp	r0, r4
 8002158:	d100      	bne.n	800215c <__aeabi_dsub+0x40>
 800215a:	e0b1      	b.n	80022c0 <__aeabi_dsub+0x1a4>
 800215c:	2201      	movs	r2, #1
 800215e:	4056      	eors	r6, r2
 8002160:	46b3      	mov	fp, r6
 8002162:	42b5      	cmp	r5, r6
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x4c>
 8002166:	e088      	b.n	800227a <__aeabi_dsub+0x15e>
 8002168:	4642      	mov	r2, r8
 800216a:	1a12      	subs	r2, r2, r0
 800216c:	2a00      	cmp	r2, #0
 800216e:	dc00      	bgt.n	8002172 <__aeabi_dsub+0x56>
 8002170:	e0ae      	b.n	80022d0 <__aeabi_dsub+0x1b4>
 8002172:	2800      	cmp	r0, #0
 8002174:	d100      	bne.n	8002178 <__aeabi_dsub+0x5c>
 8002176:	e0c1      	b.n	80022fc <__aeabi_dsub+0x1e0>
 8002178:	48be      	ldr	r0, [pc, #760]	; (8002474 <__aeabi_dsub+0x358>)
 800217a:	4580      	cmp	r8, r0
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x64>
 800217e:	e151      	b.n	8002424 <__aeabi_dsub+0x308>
 8002180:	2080      	movs	r0, #128	; 0x80
 8002182:	0400      	lsls	r0, r0, #16
 8002184:	4301      	orrs	r1, r0
 8002186:	2a38      	cmp	r2, #56	; 0x38
 8002188:	dd00      	ble.n	800218c <__aeabi_dsub+0x70>
 800218a:	e17b      	b.n	8002484 <__aeabi_dsub+0x368>
 800218c:	2a1f      	cmp	r2, #31
 800218e:	dd00      	ble.n	8002192 <__aeabi_dsub+0x76>
 8002190:	e1ee      	b.n	8002570 <__aeabi_dsub+0x454>
 8002192:	2020      	movs	r0, #32
 8002194:	003e      	movs	r6, r7
 8002196:	1a80      	subs	r0, r0, r2
 8002198:	000c      	movs	r4, r1
 800219a:	40d6      	lsrs	r6, r2
 800219c:	40d1      	lsrs	r1, r2
 800219e:	4087      	lsls	r7, r0
 80021a0:	4662      	mov	r2, ip
 80021a2:	4084      	lsls	r4, r0
 80021a4:	1a52      	subs	r2, r2, r1
 80021a6:	1e78      	subs	r0, r7, #1
 80021a8:	4187      	sbcs	r7, r0
 80021aa:	4694      	mov	ip, r2
 80021ac:	4334      	orrs	r4, r6
 80021ae:	4327      	orrs	r7, r4
 80021b0:	1bdc      	subs	r4, r3, r7
 80021b2:	42a3      	cmp	r3, r4
 80021b4:	419b      	sbcs	r3, r3
 80021b6:	4662      	mov	r2, ip
 80021b8:	425b      	negs	r3, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	4699      	mov	r9, r3
 80021be:	464b      	mov	r3, r9
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	d400      	bmi.n	80021c6 <__aeabi_dsub+0xaa>
 80021c4:	e118      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 80021c6:	464b      	mov	r3, r9
 80021c8:	0258      	lsls	r0, r3, #9
 80021ca:	0a43      	lsrs	r3, r0, #9
 80021cc:	4699      	mov	r9, r3
 80021ce:	464b      	mov	r3, r9
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dsub+0xba>
 80021d4:	e137      	b.n	8002446 <__aeabi_dsub+0x32a>
 80021d6:	4648      	mov	r0, r9
 80021d8:	f000 fce6 	bl	8002ba8 <__clzsi2>
 80021dc:	0001      	movs	r1, r0
 80021de:	3908      	subs	r1, #8
 80021e0:	2320      	movs	r3, #32
 80021e2:	0022      	movs	r2, r4
 80021e4:	4648      	mov	r0, r9
 80021e6:	1a5b      	subs	r3, r3, r1
 80021e8:	40da      	lsrs	r2, r3
 80021ea:	4088      	lsls	r0, r1
 80021ec:	408c      	lsls	r4, r1
 80021ee:	4643      	mov	r3, r8
 80021f0:	4310      	orrs	r0, r2
 80021f2:	4588      	cmp	r8, r1
 80021f4:	dd00      	ble.n	80021f8 <__aeabi_dsub+0xdc>
 80021f6:	e136      	b.n	8002466 <__aeabi_dsub+0x34a>
 80021f8:	1ac9      	subs	r1, r1, r3
 80021fa:	1c4b      	adds	r3, r1, #1
 80021fc:	2b1f      	cmp	r3, #31
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0xe6>
 8002200:	e0ea      	b.n	80023d8 <__aeabi_dsub+0x2bc>
 8002202:	2220      	movs	r2, #32
 8002204:	0026      	movs	r6, r4
 8002206:	1ad2      	subs	r2, r2, r3
 8002208:	0001      	movs	r1, r0
 800220a:	4094      	lsls	r4, r2
 800220c:	40de      	lsrs	r6, r3
 800220e:	40d8      	lsrs	r0, r3
 8002210:	2300      	movs	r3, #0
 8002212:	4091      	lsls	r1, r2
 8002214:	1e62      	subs	r2, r4, #1
 8002216:	4194      	sbcs	r4, r2
 8002218:	4681      	mov	r9, r0
 800221a:	4698      	mov	r8, r3
 800221c:	4331      	orrs	r1, r6
 800221e:	430c      	orrs	r4, r1
 8002220:	0763      	lsls	r3, r4, #29
 8002222:	d009      	beq.n	8002238 <__aeabi_dsub+0x11c>
 8002224:	230f      	movs	r3, #15
 8002226:	4023      	ands	r3, r4
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <__aeabi_dsub+0x11c>
 800222c:	1d23      	adds	r3, r4, #4
 800222e:	42a3      	cmp	r3, r4
 8002230:	41a4      	sbcs	r4, r4
 8002232:	4264      	negs	r4, r4
 8002234:	44a1      	add	r9, r4
 8002236:	001c      	movs	r4, r3
 8002238:	464b      	mov	r3, r9
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	d400      	bmi.n	8002240 <__aeabi_dsub+0x124>
 800223e:	e0de      	b.n	80023fe <__aeabi_dsub+0x2e2>
 8002240:	4641      	mov	r1, r8
 8002242:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <__aeabi_dsub+0x358>)
 8002244:	3101      	adds	r1, #1
 8002246:	4299      	cmp	r1, r3
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x130>
 800224a:	e0e7      	b.n	800241c <__aeabi_dsub+0x300>
 800224c:	464b      	mov	r3, r9
 800224e:	488a      	ldr	r0, [pc, #552]	; (8002478 <__aeabi_dsub+0x35c>)
 8002250:	08e4      	lsrs	r4, r4, #3
 8002252:	4003      	ands	r3, r0
 8002254:	0018      	movs	r0, r3
 8002256:	0549      	lsls	r1, r1, #21
 8002258:	075b      	lsls	r3, r3, #29
 800225a:	0240      	lsls	r0, r0, #9
 800225c:	4323      	orrs	r3, r4
 800225e:	0d4a      	lsrs	r2, r1, #21
 8002260:	0b04      	lsrs	r4, r0, #12
 8002262:	0512      	lsls	r2, r2, #20
 8002264:	07ed      	lsls	r5, r5, #31
 8002266:	4322      	orrs	r2, r4
 8002268:	432a      	orrs	r2, r5
 800226a:	0018      	movs	r0, r3
 800226c:	0011      	movs	r1, r2
 800226e:	bcf0      	pop	{r4, r5, r6, r7}
 8002270:	46bb      	mov	fp, r7
 8002272:	46b2      	mov	sl, r6
 8002274:	46a9      	mov	r9, r5
 8002276:	46a0      	mov	r8, r4
 8002278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227a:	4642      	mov	r2, r8
 800227c:	1a12      	subs	r2, r2, r0
 800227e:	2a00      	cmp	r2, #0
 8002280:	dd52      	ble.n	8002328 <__aeabi_dsub+0x20c>
 8002282:	2800      	cmp	r0, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x16c>
 8002286:	e09c      	b.n	80023c2 <__aeabi_dsub+0x2a6>
 8002288:	45a0      	cmp	r8, r4
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x172>
 800228c:	e0ca      	b.n	8002424 <__aeabi_dsub+0x308>
 800228e:	2080      	movs	r0, #128	; 0x80
 8002290:	0400      	lsls	r0, r0, #16
 8002292:	4301      	orrs	r1, r0
 8002294:	2a38      	cmp	r2, #56	; 0x38
 8002296:	dd00      	ble.n	800229a <__aeabi_dsub+0x17e>
 8002298:	e149      	b.n	800252e <__aeabi_dsub+0x412>
 800229a:	2a1f      	cmp	r2, #31
 800229c:	dc00      	bgt.n	80022a0 <__aeabi_dsub+0x184>
 800229e:	e197      	b.n	80025d0 <__aeabi_dsub+0x4b4>
 80022a0:	0010      	movs	r0, r2
 80022a2:	000e      	movs	r6, r1
 80022a4:	3820      	subs	r0, #32
 80022a6:	40c6      	lsrs	r6, r0
 80022a8:	2a20      	cmp	r2, #32
 80022aa:	d004      	beq.n	80022b6 <__aeabi_dsub+0x19a>
 80022ac:	2040      	movs	r0, #64	; 0x40
 80022ae:	1a82      	subs	r2, r0, r2
 80022b0:	4091      	lsls	r1, r2
 80022b2:	430f      	orrs	r7, r1
 80022b4:	46b9      	mov	r9, r7
 80022b6:	464c      	mov	r4, r9
 80022b8:	1e62      	subs	r2, r4, #1
 80022ba:	4194      	sbcs	r4, r2
 80022bc:	4334      	orrs	r4, r6
 80022be:	e13a      	b.n	8002536 <__aeabi_dsub+0x41a>
 80022c0:	000a      	movs	r2, r1
 80022c2:	433a      	orrs	r2, r7
 80022c4:	d028      	beq.n	8002318 <__aeabi_dsub+0x1fc>
 80022c6:	46b3      	mov	fp, r6
 80022c8:	42b5      	cmp	r5, r6
 80022ca:	d02b      	beq.n	8002324 <__aeabi_dsub+0x208>
 80022cc:	4a6b      	ldr	r2, [pc, #428]	; (800247c <__aeabi_dsub+0x360>)
 80022ce:	4442      	add	r2, r8
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d05d      	beq.n	8002390 <__aeabi_dsub+0x274>
 80022d4:	4642      	mov	r2, r8
 80022d6:	4644      	mov	r4, r8
 80022d8:	1a82      	subs	r2, r0, r2
 80022da:	2c00      	cmp	r4, #0
 80022dc:	d000      	beq.n	80022e0 <__aeabi_dsub+0x1c4>
 80022de:	e0f5      	b.n	80024cc <__aeabi_dsub+0x3b0>
 80022e0:	4665      	mov	r5, ip
 80022e2:	431d      	orrs	r5, r3
 80022e4:	d100      	bne.n	80022e8 <__aeabi_dsub+0x1cc>
 80022e6:	e19c      	b.n	8002622 <__aeabi_dsub+0x506>
 80022e8:	1e55      	subs	r5, r2, #1
 80022ea:	2a01      	cmp	r2, #1
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x1d4>
 80022ee:	e1fb      	b.n	80026e8 <__aeabi_dsub+0x5cc>
 80022f0:	4c60      	ldr	r4, [pc, #384]	; (8002474 <__aeabi_dsub+0x358>)
 80022f2:	42a2      	cmp	r2, r4
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x1dc>
 80022f6:	e1bd      	b.n	8002674 <__aeabi_dsub+0x558>
 80022f8:	002a      	movs	r2, r5
 80022fa:	e0f0      	b.n	80024de <__aeabi_dsub+0x3c2>
 80022fc:	0008      	movs	r0, r1
 80022fe:	4338      	orrs	r0, r7
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x1e8>
 8002302:	e0c3      	b.n	800248c <__aeabi_dsub+0x370>
 8002304:	1e50      	subs	r0, r2, #1
 8002306:	2a01      	cmp	r2, #1
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x1f0>
 800230a:	e1a8      	b.n	800265e <__aeabi_dsub+0x542>
 800230c:	4c59      	ldr	r4, [pc, #356]	; (8002474 <__aeabi_dsub+0x358>)
 800230e:	42a2      	cmp	r2, r4
 8002310:	d100      	bne.n	8002314 <__aeabi_dsub+0x1f8>
 8002312:	e087      	b.n	8002424 <__aeabi_dsub+0x308>
 8002314:	0002      	movs	r2, r0
 8002316:	e736      	b.n	8002186 <__aeabi_dsub+0x6a>
 8002318:	2201      	movs	r2, #1
 800231a:	4056      	eors	r6, r2
 800231c:	46b3      	mov	fp, r6
 800231e:	42b5      	cmp	r5, r6
 8002320:	d000      	beq.n	8002324 <__aeabi_dsub+0x208>
 8002322:	e721      	b.n	8002168 <__aeabi_dsub+0x4c>
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <__aeabi_dsub+0x360>)
 8002326:	4442      	add	r2, r8
 8002328:	2a00      	cmp	r2, #0
 800232a:	d100      	bne.n	800232e <__aeabi_dsub+0x212>
 800232c:	e0b5      	b.n	800249a <__aeabi_dsub+0x37e>
 800232e:	4642      	mov	r2, r8
 8002330:	4644      	mov	r4, r8
 8002332:	1a82      	subs	r2, r0, r2
 8002334:	2c00      	cmp	r4, #0
 8002336:	d100      	bne.n	800233a <__aeabi_dsub+0x21e>
 8002338:	e138      	b.n	80025ac <__aeabi_dsub+0x490>
 800233a:	4e4e      	ldr	r6, [pc, #312]	; (8002474 <__aeabi_dsub+0x358>)
 800233c:	42b0      	cmp	r0, r6
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x226>
 8002340:	e1de      	b.n	8002700 <__aeabi_dsub+0x5e4>
 8002342:	2680      	movs	r6, #128	; 0x80
 8002344:	4664      	mov	r4, ip
 8002346:	0436      	lsls	r6, r6, #16
 8002348:	4334      	orrs	r4, r6
 800234a:	46a4      	mov	ip, r4
 800234c:	2a38      	cmp	r2, #56	; 0x38
 800234e:	dd00      	ble.n	8002352 <__aeabi_dsub+0x236>
 8002350:	e196      	b.n	8002680 <__aeabi_dsub+0x564>
 8002352:	2a1f      	cmp	r2, #31
 8002354:	dd00      	ble.n	8002358 <__aeabi_dsub+0x23c>
 8002356:	e224      	b.n	80027a2 <__aeabi_dsub+0x686>
 8002358:	2620      	movs	r6, #32
 800235a:	1ab4      	subs	r4, r6, r2
 800235c:	46a2      	mov	sl, r4
 800235e:	4664      	mov	r4, ip
 8002360:	4656      	mov	r6, sl
 8002362:	40b4      	lsls	r4, r6
 8002364:	46a1      	mov	r9, r4
 8002366:	001c      	movs	r4, r3
 8002368:	464e      	mov	r6, r9
 800236a:	40d4      	lsrs	r4, r2
 800236c:	4326      	orrs	r6, r4
 800236e:	0034      	movs	r4, r6
 8002370:	4656      	mov	r6, sl
 8002372:	40b3      	lsls	r3, r6
 8002374:	1e5e      	subs	r6, r3, #1
 8002376:	41b3      	sbcs	r3, r6
 8002378:	431c      	orrs	r4, r3
 800237a:	4663      	mov	r3, ip
 800237c:	40d3      	lsrs	r3, r2
 800237e:	18c9      	adds	r1, r1, r3
 8002380:	19e4      	adds	r4, r4, r7
 8002382:	42bc      	cmp	r4, r7
 8002384:	41bf      	sbcs	r7, r7
 8002386:	427f      	negs	r7, r7
 8002388:	46b9      	mov	r9, r7
 800238a:	4680      	mov	r8, r0
 800238c:	4489      	add	r9, r1
 800238e:	e0d8      	b.n	8002542 <__aeabi_dsub+0x426>
 8002390:	4640      	mov	r0, r8
 8002392:	4c3b      	ldr	r4, [pc, #236]	; (8002480 <__aeabi_dsub+0x364>)
 8002394:	3001      	adds	r0, #1
 8002396:	4220      	tst	r0, r4
 8002398:	d000      	beq.n	800239c <__aeabi_dsub+0x280>
 800239a:	e0b4      	b.n	8002506 <__aeabi_dsub+0x3ea>
 800239c:	4640      	mov	r0, r8
 800239e:	2800      	cmp	r0, #0
 80023a0:	d000      	beq.n	80023a4 <__aeabi_dsub+0x288>
 80023a2:	e144      	b.n	800262e <__aeabi_dsub+0x512>
 80023a4:	4660      	mov	r0, ip
 80023a6:	4318      	orrs	r0, r3
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x290>
 80023aa:	e190      	b.n	80026ce <__aeabi_dsub+0x5b2>
 80023ac:	0008      	movs	r0, r1
 80023ae:	4338      	orrs	r0, r7
 80023b0:	d000      	beq.n	80023b4 <__aeabi_dsub+0x298>
 80023b2:	e1aa      	b.n	800270a <__aeabi_dsub+0x5ee>
 80023b4:	4661      	mov	r1, ip
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	0749      	lsls	r1, r1, #29
 80023ba:	430b      	orrs	r3, r1
 80023bc:	4661      	mov	r1, ip
 80023be:	08cc      	lsrs	r4, r1, #3
 80023c0:	e027      	b.n	8002412 <__aeabi_dsub+0x2f6>
 80023c2:	0008      	movs	r0, r1
 80023c4:	4338      	orrs	r0, r7
 80023c6:	d061      	beq.n	800248c <__aeabi_dsub+0x370>
 80023c8:	1e50      	subs	r0, r2, #1
 80023ca:	2a01      	cmp	r2, #1
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x2b4>
 80023ce:	e139      	b.n	8002644 <__aeabi_dsub+0x528>
 80023d0:	42a2      	cmp	r2, r4
 80023d2:	d027      	beq.n	8002424 <__aeabi_dsub+0x308>
 80023d4:	0002      	movs	r2, r0
 80023d6:	e75d      	b.n	8002294 <__aeabi_dsub+0x178>
 80023d8:	0002      	movs	r2, r0
 80023da:	391f      	subs	r1, #31
 80023dc:	40ca      	lsrs	r2, r1
 80023de:	0011      	movs	r1, r2
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d003      	beq.n	80023ec <__aeabi_dsub+0x2d0>
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	4098      	lsls	r0, r3
 80023ea:	4304      	orrs	r4, r0
 80023ec:	1e63      	subs	r3, r4, #1
 80023ee:	419c      	sbcs	r4, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	4699      	mov	r9, r3
 80023f4:	4698      	mov	r8, r3
 80023f6:	430c      	orrs	r4, r1
 80023f8:	0763      	lsls	r3, r4, #29
 80023fa:	d000      	beq.n	80023fe <__aeabi_dsub+0x2e2>
 80023fc:	e712      	b.n	8002224 <__aeabi_dsub+0x108>
 80023fe:	464b      	mov	r3, r9
 8002400:	464a      	mov	r2, r9
 8002402:	08e4      	lsrs	r4, r4, #3
 8002404:	075b      	lsls	r3, r3, #29
 8002406:	4323      	orrs	r3, r4
 8002408:	08d4      	lsrs	r4, r2, #3
 800240a:	4642      	mov	r2, r8
 800240c:	4919      	ldr	r1, [pc, #100]	; (8002474 <__aeabi_dsub+0x358>)
 800240e:	428a      	cmp	r2, r1
 8002410:	d00e      	beq.n	8002430 <__aeabi_dsub+0x314>
 8002412:	0324      	lsls	r4, r4, #12
 8002414:	0552      	lsls	r2, r2, #21
 8002416:	0b24      	lsrs	r4, r4, #12
 8002418:	0d52      	lsrs	r2, r2, #21
 800241a:	e722      	b.n	8002262 <__aeabi_dsub+0x146>
 800241c:	000a      	movs	r2, r1
 800241e:	2400      	movs	r4, #0
 8002420:	2300      	movs	r3, #0
 8002422:	e71e      	b.n	8002262 <__aeabi_dsub+0x146>
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	4662      	mov	r2, ip
 8002428:	0752      	lsls	r2, r2, #29
 800242a:	4313      	orrs	r3, r2
 800242c:	4662      	mov	r2, ip
 800242e:	08d4      	lsrs	r4, r2, #3
 8002430:	001a      	movs	r2, r3
 8002432:	4322      	orrs	r2, r4
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x31c>
 8002436:	e1fc      	b.n	8002832 <__aeabi_dsub+0x716>
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	4314      	orrs	r4, r2
 800243e:	0324      	lsls	r4, r4, #12
 8002440:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <__aeabi_dsub+0x358>)
 8002442:	0b24      	lsrs	r4, r4, #12
 8002444:	e70d      	b.n	8002262 <__aeabi_dsub+0x146>
 8002446:	0020      	movs	r0, r4
 8002448:	f000 fbae 	bl	8002ba8 <__clzsi2>
 800244c:	0001      	movs	r1, r0
 800244e:	3118      	adds	r1, #24
 8002450:	291f      	cmp	r1, #31
 8002452:	dc00      	bgt.n	8002456 <__aeabi_dsub+0x33a>
 8002454:	e6c4      	b.n	80021e0 <__aeabi_dsub+0xc4>
 8002456:	3808      	subs	r0, #8
 8002458:	4084      	lsls	r4, r0
 800245a:	4643      	mov	r3, r8
 800245c:	0020      	movs	r0, r4
 800245e:	2400      	movs	r4, #0
 8002460:	4588      	cmp	r8, r1
 8002462:	dc00      	bgt.n	8002466 <__aeabi_dsub+0x34a>
 8002464:	e6c8      	b.n	80021f8 <__aeabi_dsub+0xdc>
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <__aeabi_dsub+0x35c>)
 8002468:	1a5b      	subs	r3, r3, r1
 800246a:	4010      	ands	r0, r2
 800246c:	4698      	mov	r8, r3
 800246e:	4681      	mov	r9, r0
 8002470:	e6d6      	b.n	8002220 <__aeabi_dsub+0x104>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	000007ff 	.word	0x000007ff
 8002478:	ff7fffff 	.word	0xff7fffff
 800247c:	fffff801 	.word	0xfffff801
 8002480:	000007fe 	.word	0x000007fe
 8002484:	430f      	orrs	r7, r1
 8002486:	1e7a      	subs	r2, r7, #1
 8002488:	4197      	sbcs	r7, r2
 800248a:	e691      	b.n	80021b0 <__aeabi_dsub+0x94>
 800248c:	4661      	mov	r1, ip
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	0749      	lsls	r1, r1, #29
 8002492:	430b      	orrs	r3, r1
 8002494:	4661      	mov	r1, ip
 8002496:	08cc      	lsrs	r4, r1, #3
 8002498:	e7b8      	b.n	800240c <__aeabi_dsub+0x2f0>
 800249a:	4640      	mov	r0, r8
 800249c:	4cd3      	ldr	r4, [pc, #844]	; (80027ec <__aeabi_dsub+0x6d0>)
 800249e:	3001      	adds	r0, #1
 80024a0:	4220      	tst	r0, r4
 80024a2:	d000      	beq.n	80024a6 <__aeabi_dsub+0x38a>
 80024a4:	e0a2      	b.n	80025ec <__aeabi_dsub+0x4d0>
 80024a6:	4640      	mov	r0, r8
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d000      	beq.n	80024ae <__aeabi_dsub+0x392>
 80024ac:	e101      	b.n	80026b2 <__aeabi_dsub+0x596>
 80024ae:	4660      	mov	r0, ip
 80024b0:	4318      	orrs	r0, r3
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x39a>
 80024b4:	e15e      	b.n	8002774 <__aeabi_dsub+0x658>
 80024b6:	0008      	movs	r0, r1
 80024b8:	4338      	orrs	r0, r7
 80024ba:	d000      	beq.n	80024be <__aeabi_dsub+0x3a2>
 80024bc:	e15f      	b.n	800277e <__aeabi_dsub+0x662>
 80024be:	4661      	mov	r1, ip
 80024c0:	08db      	lsrs	r3, r3, #3
 80024c2:	0749      	lsls	r1, r1, #29
 80024c4:	430b      	orrs	r3, r1
 80024c6:	4661      	mov	r1, ip
 80024c8:	08cc      	lsrs	r4, r1, #3
 80024ca:	e7a2      	b.n	8002412 <__aeabi_dsub+0x2f6>
 80024cc:	4dc8      	ldr	r5, [pc, #800]	; (80027f0 <__aeabi_dsub+0x6d4>)
 80024ce:	42a8      	cmp	r0, r5
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x3b8>
 80024d2:	e0cf      	b.n	8002674 <__aeabi_dsub+0x558>
 80024d4:	2580      	movs	r5, #128	; 0x80
 80024d6:	4664      	mov	r4, ip
 80024d8:	042d      	lsls	r5, r5, #16
 80024da:	432c      	orrs	r4, r5
 80024dc:	46a4      	mov	ip, r4
 80024de:	2a38      	cmp	r2, #56	; 0x38
 80024e0:	dc56      	bgt.n	8002590 <__aeabi_dsub+0x474>
 80024e2:	2a1f      	cmp	r2, #31
 80024e4:	dd00      	ble.n	80024e8 <__aeabi_dsub+0x3cc>
 80024e6:	e0d1      	b.n	800268c <__aeabi_dsub+0x570>
 80024e8:	2520      	movs	r5, #32
 80024ea:	001e      	movs	r6, r3
 80024ec:	1aad      	subs	r5, r5, r2
 80024ee:	4664      	mov	r4, ip
 80024f0:	40ab      	lsls	r3, r5
 80024f2:	40ac      	lsls	r4, r5
 80024f4:	40d6      	lsrs	r6, r2
 80024f6:	1e5d      	subs	r5, r3, #1
 80024f8:	41ab      	sbcs	r3, r5
 80024fa:	4334      	orrs	r4, r6
 80024fc:	4323      	orrs	r3, r4
 80024fe:	4664      	mov	r4, ip
 8002500:	40d4      	lsrs	r4, r2
 8002502:	1b09      	subs	r1, r1, r4
 8002504:	e049      	b.n	800259a <__aeabi_dsub+0x47e>
 8002506:	4660      	mov	r0, ip
 8002508:	1bdc      	subs	r4, r3, r7
 800250a:	1a46      	subs	r6, r0, r1
 800250c:	42a3      	cmp	r3, r4
 800250e:	4180      	sbcs	r0, r0
 8002510:	4240      	negs	r0, r0
 8002512:	4681      	mov	r9, r0
 8002514:	0030      	movs	r0, r6
 8002516:	464e      	mov	r6, r9
 8002518:	1b80      	subs	r0, r0, r6
 800251a:	4681      	mov	r9, r0
 800251c:	0200      	lsls	r0, r0, #8
 800251e:	d476      	bmi.n	800260e <__aeabi_dsub+0x4f2>
 8002520:	464b      	mov	r3, r9
 8002522:	4323      	orrs	r3, r4
 8002524:	d000      	beq.n	8002528 <__aeabi_dsub+0x40c>
 8002526:	e652      	b.n	80021ce <__aeabi_dsub+0xb2>
 8002528:	2400      	movs	r4, #0
 800252a:	2500      	movs	r5, #0
 800252c:	e771      	b.n	8002412 <__aeabi_dsub+0x2f6>
 800252e:	4339      	orrs	r1, r7
 8002530:	000c      	movs	r4, r1
 8002532:	1e62      	subs	r2, r4, #1
 8002534:	4194      	sbcs	r4, r2
 8002536:	18e4      	adds	r4, r4, r3
 8002538:	429c      	cmp	r4, r3
 800253a:	419b      	sbcs	r3, r3
 800253c:	425b      	negs	r3, r3
 800253e:	4463      	add	r3, ip
 8002540:	4699      	mov	r9, r3
 8002542:	464b      	mov	r3, r9
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	d400      	bmi.n	800254a <__aeabi_dsub+0x42e>
 8002548:	e756      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 800254a:	2301      	movs	r3, #1
 800254c:	469c      	mov	ip, r3
 800254e:	4ba8      	ldr	r3, [pc, #672]	; (80027f0 <__aeabi_dsub+0x6d4>)
 8002550:	44e0      	add	r8, ip
 8002552:	4598      	cmp	r8, r3
 8002554:	d038      	beq.n	80025c8 <__aeabi_dsub+0x4ac>
 8002556:	464b      	mov	r3, r9
 8002558:	48a6      	ldr	r0, [pc, #664]	; (80027f4 <__aeabi_dsub+0x6d8>)
 800255a:	2201      	movs	r2, #1
 800255c:	4003      	ands	r3, r0
 800255e:	0018      	movs	r0, r3
 8002560:	0863      	lsrs	r3, r4, #1
 8002562:	4014      	ands	r4, r2
 8002564:	431c      	orrs	r4, r3
 8002566:	07c3      	lsls	r3, r0, #31
 8002568:	431c      	orrs	r4, r3
 800256a:	0843      	lsrs	r3, r0, #1
 800256c:	4699      	mov	r9, r3
 800256e:	e657      	b.n	8002220 <__aeabi_dsub+0x104>
 8002570:	0010      	movs	r0, r2
 8002572:	000e      	movs	r6, r1
 8002574:	3820      	subs	r0, #32
 8002576:	40c6      	lsrs	r6, r0
 8002578:	2a20      	cmp	r2, #32
 800257a:	d004      	beq.n	8002586 <__aeabi_dsub+0x46a>
 800257c:	2040      	movs	r0, #64	; 0x40
 800257e:	1a82      	subs	r2, r0, r2
 8002580:	4091      	lsls	r1, r2
 8002582:	430f      	orrs	r7, r1
 8002584:	46b9      	mov	r9, r7
 8002586:	464f      	mov	r7, r9
 8002588:	1e7a      	subs	r2, r7, #1
 800258a:	4197      	sbcs	r7, r2
 800258c:	4337      	orrs	r7, r6
 800258e:	e60f      	b.n	80021b0 <__aeabi_dsub+0x94>
 8002590:	4662      	mov	r2, ip
 8002592:	431a      	orrs	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	4193      	sbcs	r3, r2
 800259a:	1afc      	subs	r4, r7, r3
 800259c:	42a7      	cmp	r7, r4
 800259e:	41bf      	sbcs	r7, r7
 80025a0:	427f      	negs	r7, r7
 80025a2:	1bcb      	subs	r3, r1, r7
 80025a4:	4699      	mov	r9, r3
 80025a6:	465d      	mov	r5, fp
 80025a8:	4680      	mov	r8, r0
 80025aa:	e608      	b.n	80021be <__aeabi_dsub+0xa2>
 80025ac:	4666      	mov	r6, ip
 80025ae:	431e      	orrs	r6, r3
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x498>
 80025b2:	e0be      	b.n	8002732 <__aeabi_dsub+0x616>
 80025b4:	1e56      	subs	r6, r2, #1
 80025b6:	2a01      	cmp	r2, #1
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x4a0>
 80025ba:	e109      	b.n	80027d0 <__aeabi_dsub+0x6b4>
 80025bc:	4c8c      	ldr	r4, [pc, #560]	; (80027f0 <__aeabi_dsub+0x6d4>)
 80025be:	42a2      	cmp	r2, r4
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dsub+0x4a8>
 80025c2:	e119      	b.n	80027f8 <__aeabi_dsub+0x6dc>
 80025c4:	0032      	movs	r2, r6
 80025c6:	e6c1      	b.n	800234c <__aeabi_dsub+0x230>
 80025c8:	4642      	mov	r2, r8
 80025ca:	2400      	movs	r4, #0
 80025cc:	2300      	movs	r3, #0
 80025ce:	e648      	b.n	8002262 <__aeabi_dsub+0x146>
 80025d0:	2020      	movs	r0, #32
 80025d2:	000c      	movs	r4, r1
 80025d4:	1a80      	subs	r0, r0, r2
 80025d6:	003e      	movs	r6, r7
 80025d8:	4087      	lsls	r7, r0
 80025da:	4084      	lsls	r4, r0
 80025dc:	40d6      	lsrs	r6, r2
 80025de:	1e78      	subs	r0, r7, #1
 80025e0:	4187      	sbcs	r7, r0
 80025e2:	40d1      	lsrs	r1, r2
 80025e4:	4334      	orrs	r4, r6
 80025e6:	433c      	orrs	r4, r7
 80025e8:	448c      	add	ip, r1
 80025ea:	e7a4      	b.n	8002536 <__aeabi_dsub+0x41a>
 80025ec:	4a80      	ldr	r2, [pc, #512]	; (80027f0 <__aeabi_dsub+0x6d4>)
 80025ee:	4290      	cmp	r0, r2
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x4d8>
 80025f2:	e0e9      	b.n	80027c8 <__aeabi_dsub+0x6ac>
 80025f4:	19df      	adds	r7, r3, r7
 80025f6:	429f      	cmp	r7, r3
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	4461      	add	r1, ip
 80025fc:	425b      	negs	r3, r3
 80025fe:	18c9      	adds	r1, r1, r3
 8002600:	07cc      	lsls	r4, r1, #31
 8002602:	087f      	lsrs	r7, r7, #1
 8002604:	084b      	lsrs	r3, r1, #1
 8002606:	4699      	mov	r9, r3
 8002608:	4680      	mov	r8, r0
 800260a:	433c      	orrs	r4, r7
 800260c:	e6f4      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 800260e:	1afc      	subs	r4, r7, r3
 8002610:	42a7      	cmp	r7, r4
 8002612:	41bf      	sbcs	r7, r7
 8002614:	4663      	mov	r3, ip
 8002616:	427f      	negs	r7, r7
 8002618:	1ac9      	subs	r1, r1, r3
 800261a:	1bcb      	subs	r3, r1, r7
 800261c:	4699      	mov	r9, r3
 800261e:	465d      	mov	r5, fp
 8002620:	e5d5      	b.n	80021ce <__aeabi_dsub+0xb2>
 8002622:	08ff      	lsrs	r7, r7, #3
 8002624:	074b      	lsls	r3, r1, #29
 8002626:	465d      	mov	r5, fp
 8002628:	433b      	orrs	r3, r7
 800262a:	08cc      	lsrs	r4, r1, #3
 800262c:	e6ee      	b.n	800240c <__aeabi_dsub+0x2f0>
 800262e:	4662      	mov	r2, ip
 8002630:	431a      	orrs	r2, r3
 8002632:	d000      	beq.n	8002636 <__aeabi_dsub+0x51a>
 8002634:	e082      	b.n	800273c <__aeabi_dsub+0x620>
 8002636:	000b      	movs	r3, r1
 8002638:	433b      	orrs	r3, r7
 800263a:	d11b      	bne.n	8002674 <__aeabi_dsub+0x558>
 800263c:	2480      	movs	r4, #128	; 0x80
 800263e:	2500      	movs	r5, #0
 8002640:	0324      	lsls	r4, r4, #12
 8002642:	e6f9      	b.n	8002438 <__aeabi_dsub+0x31c>
 8002644:	19dc      	adds	r4, r3, r7
 8002646:	429c      	cmp	r4, r3
 8002648:	419b      	sbcs	r3, r3
 800264a:	4461      	add	r1, ip
 800264c:	4689      	mov	r9, r1
 800264e:	425b      	negs	r3, r3
 8002650:	4499      	add	r9, r3
 8002652:	464b      	mov	r3, r9
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	d444      	bmi.n	80026e2 <__aeabi_dsub+0x5c6>
 8002658:	2301      	movs	r3, #1
 800265a:	4698      	mov	r8, r3
 800265c:	e6cc      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 800265e:	1bdc      	subs	r4, r3, r7
 8002660:	4662      	mov	r2, ip
 8002662:	42a3      	cmp	r3, r4
 8002664:	419b      	sbcs	r3, r3
 8002666:	1a51      	subs	r1, r2, r1
 8002668:	425b      	negs	r3, r3
 800266a:	1acb      	subs	r3, r1, r3
 800266c:	4699      	mov	r9, r3
 800266e:	2301      	movs	r3, #1
 8002670:	4698      	mov	r8, r3
 8002672:	e5a4      	b.n	80021be <__aeabi_dsub+0xa2>
 8002674:	08ff      	lsrs	r7, r7, #3
 8002676:	074b      	lsls	r3, r1, #29
 8002678:	465d      	mov	r5, fp
 800267a:	433b      	orrs	r3, r7
 800267c:	08cc      	lsrs	r4, r1, #3
 800267e:	e6d7      	b.n	8002430 <__aeabi_dsub+0x314>
 8002680:	4662      	mov	r2, ip
 8002682:	431a      	orrs	r2, r3
 8002684:	0014      	movs	r4, r2
 8002686:	1e63      	subs	r3, r4, #1
 8002688:	419c      	sbcs	r4, r3
 800268a:	e679      	b.n	8002380 <__aeabi_dsub+0x264>
 800268c:	0015      	movs	r5, r2
 800268e:	4664      	mov	r4, ip
 8002690:	3d20      	subs	r5, #32
 8002692:	40ec      	lsrs	r4, r5
 8002694:	46a0      	mov	r8, r4
 8002696:	2a20      	cmp	r2, #32
 8002698:	d005      	beq.n	80026a6 <__aeabi_dsub+0x58a>
 800269a:	2540      	movs	r5, #64	; 0x40
 800269c:	4664      	mov	r4, ip
 800269e:	1aaa      	subs	r2, r5, r2
 80026a0:	4094      	lsls	r4, r2
 80026a2:	4323      	orrs	r3, r4
 80026a4:	469a      	mov	sl, r3
 80026a6:	4654      	mov	r4, sl
 80026a8:	1e63      	subs	r3, r4, #1
 80026aa:	419c      	sbcs	r4, r3
 80026ac:	4643      	mov	r3, r8
 80026ae:	4323      	orrs	r3, r4
 80026b0:	e773      	b.n	800259a <__aeabi_dsub+0x47e>
 80026b2:	4662      	mov	r2, ip
 80026b4:	431a      	orrs	r2, r3
 80026b6:	d023      	beq.n	8002700 <__aeabi_dsub+0x5e4>
 80026b8:	000a      	movs	r2, r1
 80026ba:	433a      	orrs	r2, r7
 80026bc:	d000      	beq.n	80026c0 <__aeabi_dsub+0x5a4>
 80026be:	e0a0      	b.n	8002802 <__aeabi_dsub+0x6e6>
 80026c0:	4662      	mov	r2, ip
 80026c2:	08db      	lsrs	r3, r3, #3
 80026c4:	0752      	lsls	r2, r2, #29
 80026c6:	4313      	orrs	r3, r2
 80026c8:	4662      	mov	r2, ip
 80026ca:	08d4      	lsrs	r4, r2, #3
 80026cc:	e6b0      	b.n	8002430 <__aeabi_dsub+0x314>
 80026ce:	000b      	movs	r3, r1
 80026d0:	433b      	orrs	r3, r7
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x5ba>
 80026d4:	e728      	b.n	8002528 <__aeabi_dsub+0x40c>
 80026d6:	08ff      	lsrs	r7, r7, #3
 80026d8:	074b      	lsls	r3, r1, #29
 80026da:	465d      	mov	r5, fp
 80026dc:	433b      	orrs	r3, r7
 80026de:	08cc      	lsrs	r4, r1, #3
 80026e0:	e697      	b.n	8002412 <__aeabi_dsub+0x2f6>
 80026e2:	2302      	movs	r3, #2
 80026e4:	4698      	mov	r8, r3
 80026e6:	e736      	b.n	8002556 <__aeabi_dsub+0x43a>
 80026e8:	1afc      	subs	r4, r7, r3
 80026ea:	42a7      	cmp	r7, r4
 80026ec:	41bf      	sbcs	r7, r7
 80026ee:	4663      	mov	r3, ip
 80026f0:	427f      	negs	r7, r7
 80026f2:	1ac9      	subs	r1, r1, r3
 80026f4:	1bcb      	subs	r3, r1, r7
 80026f6:	4699      	mov	r9, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	465d      	mov	r5, fp
 80026fc:	4698      	mov	r8, r3
 80026fe:	e55e      	b.n	80021be <__aeabi_dsub+0xa2>
 8002700:	074b      	lsls	r3, r1, #29
 8002702:	08ff      	lsrs	r7, r7, #3
 8002704:	433b      	orrs	r3, r7
 8002706:	08cc      	lsrs	r4, r1, #3
 8002708:	e692      	b.n	8002430 <__aeabi_dsub+0x314>
 800270a:	1bdc      	subs	r4, r3, r7
 800270c:	4660      	mov	r0, ip
 800270e:	42a3      	cmp	r3, r4
 8002710:	41b6      	sbcs	r6, r6
 8002712:	1a40      	subs	r0, r0, r1
 8002714:	4276      	negs	r6, r6
 8002716:	1b80      	subs	r0, r0, r6
 8002718:	4681      	mov	r9, r0
 800271a:	0200      	lsls	r0, r0, #8
 800271c:	d560      	bpl.n	80027e0 <__aeabi_dsub+0x6c4>
 800271e:	1afc      	subs	r4, r7, r3
 8002720:	42a7      	cmp	r7, r4
 8002722:	41bf      	sbcs	r7, r7
 8002724:	4663      	mov	r3, ip
 8002726:	427f      	negs	r7, r7
 8002728:	1ac9      	subs	r1, r1, r3
 800272a:	1bcb      	subs	r3, r1, r7
 800272c:	4699      	mov	r9, r3
 800272e:	465d      	mov	r5, fp
 8002730:	e576      	b.n	8002220 <__aeabi_dsub+0x104>
 8002732:	08ff      	lsrs	r7, r7, #3
 8002734:	074b      	lsls	r3, r1, #29
 8002736:	433b      	orrs	r3, r7
 8002738:	08cc      	lsrs	r4, r1, #3
 800273a:	e667      	b.n	800240c <__aeabi_dsub+0x2f0>
 800273c:	000a      	movs	r2, r1
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	433a      	orrs	r2, r7
 8002742:	d100      	bne.n	8002746 <__aeabi_dsub+0x62a>
 8002744:	e66f      	b.n	8002426 <__aeabi_dsub+0x30a>
 8002746:	4662      	mov	r2, ip
 8002748:	0752      	lsls	r2, r2, #29
 800274a:	4313      	orrs	r3, r2
 800274c:	4662      	mov	r2, ip
 800274e:	08d4      	lsrs	r4, r2, #3
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0312      	lsls	r2, r2, #12
 8002754:	4214      	tst	r4, r2
 8002756:	d007      	beq.n	8002768 <__aeabi_dsub+0x64c>
 8002758:	08c8      	lsrs	r0, r1, #3
 800275a:	4210      	tst	r0, r2
 800275c:	d104      	bne.n	8002768 <__aeabi_dsub+0x64c>
 800275e:	465d      	mov	r5, fp
 8002760:	0004      	movs	r4, r0
 8002762:	08fb      	lsrs	r3, r7, #3
 8002764:	0749      	lsls	r1, r1, #29
 8002766:	430b      	orrs	r3, r1
 8002768:	0f5a      	lsrs	r2, r3, #29
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	0752      	lsls	r2, r2, #29
 8002770:	4313      	orrs	r3, r2
 8002772:	e65d      	b.n	8002430 <__aeabi_dsub+0x314>
 8002774:	074b      	lsls	r3, r1, #29
 8002776:	08ff      	lsrs	r7, r7, #3
 8002778:	433b      	orrs	r3, r7
 800277a:	08cc      	lsrs	r4, r1, #3
 800277c:	e649      	b.n	8002412 <__aeabi_dsub+0x2f6>
 800277e:	19dc      	adds	r4, r3, r7
 8002780:	429c      	cmp	r4, r3
 8002782:	419b      	sbcs	r3, r3
 8002784:	4461      	add	r1, ip
 8002786:	4689      	mov	r9, r1
 8002788:	425b      	negs	r3, r3
 800278a:	4499      	add	r9, r3
 800278c:	464b      	mov	r3, r9
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	d400      	bmi.n	8002794 <__aeabi_dsub+0x678>
 8002792:	e631      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 8002794:	464a      	mov	r2, r9
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <__aeabi_dsub+0x6d8>)
 8002798:	401a      	ands	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	4691      	mov	r9, r2
 800279e:	4698      	mov	r8, r3
 80027a0:	e62a      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 80027a2:	0016      	movs	r6, r2
 80027a4:	4664      	mov	r4, ip
 80027a6:	3e20      	subs	r6, #32
 80027a8:	40f4      	lsrs	r4, r6
 80027aa:	46a0      	mov	r8, r4
 80027ac:	2a20      	cmp	r2, #32
 80027ae:	d005      	beq.n	80027bc <__aeabi_dsub+0x6a0>
 80027b0:	2640      	movs	r6, #64	; 0x40
 80027b2:	4664      	mov	r4, ip
 80027b4:	1ab2      	subs	r2, r6, r2
 80027b6:	4094      	lsls	r4, r2
 80027b8:	4323      	orrs	r3, r4
 80027ba:	469a      	mov	sl, r3
 80027bc:	4654      	mov	r4, sl
 80027be:	1e63      	subs	r3, r4, #1
 80027c0:	419c      	sbcs	r4, r3
 80027c2:	4643      	mov	r3, r8
 80027c4:	431c      	orrs	r4, r3
 80027c6:	e5db      	b.n	8002380 <__aeabi_dsub+0x264>
 80027c8:	0002      	movs	r2, r0
 80027ca:	2400      	movs	r4, #0
 80027cc:	2300      	movs	r3, #0
 80027ce:	e548      	b.n	8002262 <__aeabi_dsub+0x146>
 80027d0:	19dc      	adds	r4, r3, r7
 80027d2:	42bc      	cmp	r4, r7
 80027d4:	41bf      	sbcs	r7, r7
 80027d6:	4461      	add	r1, ip
 80027d8:	4689      	mov	r9, r1
 80027da:	427f      	negs	r7, r7
 80027dc:	44b9      	add	r9, r7
 80027de:	e738      	b.n	8002652 <__aeabi_dsub+0x536>
 80027e0:	464b      	mov	r3, r9
 80027e2:	4323      	orrs	r3, r4
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x6cc>
 80027e6:	e69f      	b.n	8002528 <__aeabi_dsub+0x40c>
 80027e8:	e606      	b.n	80023f8 <__aeabi_dsub+0x2dc>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	000007fe 	.word	0x000007fe
 80027f0:	000007ff 	.word	0x000007ff
 80027f4:	ff7fffff 	.word	0xff7fffff
 80027f8:	08ff      	lsrs	r7, r7, #3
 80027fa:	074b      	lsls	r3, r1, #29
 80027fc:	433b      	orrs	r3, r7
 80027fe:	08cc      	lsrs	r4, r1, #3
 8002800:	e616      	b.n	8002430 <__aeabi_dsub+0x314>
 8002802:	4662      	mov	r2, ip
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	0752      	lsls	r2, r2, #29
 8002808:	4313      	orrs	r3, r2
 800280a:	4662      	mov	r2, ip
 800280c:	08d4      	lsrs	r4, r2, #3
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	0312      	lsls	r2, r2, #12
 8002812:	4214      	tst	r4, r2
 8002814:	d007      	beq.n	8002826 <__aeabi_dsub+0x70a>
 8002816:	08c8      	lsrs	r0, r1, #3
 8002818:	4210      	tst	r0, r2
 800281a:	d104      	bne.n	8002826 <__aeabi_dsub+0x70a>
 800281c:	465d      	mov	r5, fp
 800281e:	0004      	movs	r4, r0
 8002820:	08fb      	lsrs	r3, r7, #3
 8002822:	0749      	lsls	r1, r1, #29
 8002824:	430b      	orrs	r3, r1
 8002826:	0f5a      	lsrs	r2, r3, #29
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	0752      	lsls	r2, r2, #29
 800282c:	08db      	lsrs	r3, r3, #3
 800282e:	4313      	orrs	r3, r2
 8002830:	e5fe      	b.n	8002430 <__aeabi_dsub+0x314>
 8002832:	2300      	movs	r3, #0
 8002834:	4a01      	ldr	r2, [pc, #4]	; (800283c <__aeabi_dsub+0x720>)
 8002836:	001c      	movs	r4, r3
 8002838:	e513      	b.n	8002262 <__aeabi_dsub+0x146>
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	000007ff 	.word	0x000007ff

08002840 <__aeabi_dcmpun>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	0005      	movs	r5, r0
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <__aeabi_dcmpun+0x38>)
 8002846:	031c      	lsls	r4, r3, #12
 8002848:	0016      	movs	r6, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	030a      	lsls	r2, r1, #12
 800284e:	0049      	lsls	r1, r1, #1
 8002850:	0b12      	lsrs	r2, r2, #12
 8002852:	0d49      	lsrs	r1, r1, #21
 8002854:	0b24      	lsrs	r4, r4, #12
 8002856:	0d5b      	lsrs	r3, r3, #21
 8002858:	4281      	cmp	r1, r0
 800285a:	d008      	beq.n	800286e <__aeabi_dcmpun+0x2e>
 800285c:	4a06      	ldr	r2, [pc, #24]	; (8002878 <__aeabi_dcmpun+0x38>)
 800285e:	2000      	movs	r0, #0
 8002860:	4293      	cmp	r3, r2
 8002862:	d103      	bne.n	800286c <__aeabi_dcmpun+0x2c>
 8002864:	0020      	movs	r0, r4
 8002866:	4330      	orrs	r0, r6
 8002868:	1e43      	subs	r3, r0, #1
 800286a:	4198      	sbcs	r0, r3
 800286c:	bd70      	pop	{r4, r5, r6, pc}
 800286e:	2001      	movs	r0, #1
 8002870:	432a      	orrs	r2, r5
 8002872:	d1fb      	bne.n	800286c <__aeabi_dcmpun+0x2c>
 8002874:	e7f2      	b.n	800285c <__aeabi_dcmpun+0x1c>
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	000007ff 	.word	0x000007ff

0800287c <__aeabi_d2iz>:
 800287c:	000a      	movs	r2, r1
 800287e:	b530      	push	{r4, r5, lr}
 8002880:	4c13      	ldr	r4, [pc, #76]	; (80028d0 <__aeabi_d2iz+0x54>)
 8002882:	0053      	lsls	r3, r2, #1
 8002884:	0309      	lsls	r1, r1, #12
 8002886:	0005      	movs	r5, r0
 8002888:	0b09      	lsrs	r1, r1, #12
 800288a:	2000      	movs	r0, #0
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	0fd2      	lsrs	r2, r2, #31
 8002890:	42a3      	cmp	r3, r4
 8002892:	dd04      	ble.n	800289e <__aeabi_d2iz+0x22>
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <__aeabi_d2iz+0x58>)
 8002896:	4283      	cmp	r3, r0
 8002898:	dd02      	ble.n	80028a0 <__aeabi_d2iz+0x24>
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <__aeabi_d2iz+0x5c>)
 800289c:	18d0      	adds	r0, r2, r3
 800289e:	bd30      	pop	{r4, r5, pc}
 80028a0:	2080      	movs	r0, #128	; 0x80
 80028a2:	0340      	lsls	r0, r0, #13
 80028a4:	4301      	orrs	r1, r0
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <__aeabi_d2iz+0x60>)
 80028a8:	1ac0      	subs	r0, r0, r3
 80028aa:	281f      	cmp	r0, #31
 80028ac:	dd08      	ble.n	80028c0 <__aeabi_d2iz+0x44>
 80028ae:	480c      	ldr	r0, [pc, #48]	; (80028e0 <__aeabi_d2iz+0x64>)
 80028b0:	1ac3      	subs	r3, r0, r3
 80028b2:	40d9      	lsrs	r1, r3
 80028b4:	000b      	movs	r3, r1
 80028b6:	4258      	negs	r0, r3
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1f0      	bne.n	800289e <__aeabi_d2iz+0x22>
 80028bc:	0018      	movs	r0, r3
 80028be:	e7ee      	b.n	800289e <__aeabi_d2iz+0x22>
 80028c0:	4c08      	ldr	r4, [pc, #32]	; (80028e4 <__aeabi_d2iz+0x68>)
 80028c2:	40c5      	lsrs	r5, r0
 80028c4:	46a4      	mov	ip, r4
 80028c6:	4463      	add	r3, ip
 80028c8:	4099      	lsls	r1, r3
 80028ca:	000b      	movs	r3, r1
 80028cc:	432b      	orrs	r3, r5
 80028ce:	e7f2      	b.n	80028b6 <__aeabi_d2iz+0x3a>
 80028d0:	000003fe 	.word	0x000003fe
 80028d4:	0000041d 	.word	0x0000041d
 80028d8:	7fffffff 	.word	0x7fffffff
 80028dc:	00000433 	.word	0x00000433
 80028e0:	00000413 	.word	0x00000413
 80028e4:	fffffbed 	.word	0xfffffbed

080028e8 <__aeabi_i2d>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d016      	beq.n	800291c <__aeabi_i2d+0x34>
 80028ee:	17c3      	asrs	r3, r0, #31
 80028f0:	18c5      	adds	r5, r0, r3
 80028f2:	405d      	eors	r5, r3
 80028f4:	0fc4      	lsrs	r4, r0, #31
 80028f6:	0028      	movs	r0, r5
 80028f8:	f000 f956 	bl	8002ba8 <__clzsi2>
 80028fc:	4a11      	ldr	r2, [pc, #68]	; (8002944 <__aeabi_i2d+0x5c>)
 80028fe:	1a12      	subs	r2, r2, r0
 8002900:	280a      	cmp	r0, #10
 8002902:	dc16      	bgt.n	8002932 <__aeabi_i2d+0x4a>
 8002904:	0003      	movs	r3, r0
 8002906:	002e      	movs	r6, r5
 8002908:	3315      	adds	r3, #21
 800290a:	409e      	lsls	r6, r3
 800290c:	230b      	movs	r3, #11
 800290e:	1a18      	subs	r0, r3, r0
 8002910:	40c5      	lsrs	r5, r0
 8002912:	0552      	lsls	r2, r2, #21
 8002914:	032d      	lsls	r5, r5, #12
 8002916:	0b2d      	lsrs	r5, r5, #12
 8002918:	0d53      	lsrs	r3, r2, #21
 800291a:	e003      	b.n	8002924 <__aeabi_i2d+0x3c>
 800291c:	2400      	movs	r4, #0
 800291e:	2300      	movs	r3, #0
 8002920:	2500      	movs	r5, #0
 8002922:	2600      	movs	r6, #0
 8002924:	051b      	lsls	r3, r3, #20
 8002926:	432b      	orrs	r3, r5
 8002928:	07e4      	lsls	r4, r4, #31
 800292a:	4323      	orrs	r3, r4
 800292c:	0030      	movs	r0, r6
 800292e:	0019      	movs	r1, r3
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	380b      	subs	r0, #11
 8002934:	4085      	lsls	r5, r0
 8002936:	0552      	lsls	r2, r2, #21
 8002938:	032d      	lsls	r5, r5, #12
 800293a:	2600      	movs	r6, #0
 800293c:	0b2d      	lsrs	r5, r5, #12
 800293e:	0d53      	lsrs	r3, r2, #21
 8002940:	e7f0      	b.n	8002924 <__aeabi_i2d+0x3c>
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	0000041e 	.word	0x0000041e

08002948 <__aeabi_ui2d>:
 8002948:	b510      	push	{r4, lr}
 800294a:	1e04      	subs	r4, r0, #0
 800294c:	d010      	beq.n	8002970 <__aeabi_ui2d+0x28>
 800294e:	f000 f92b 	bl	8002ba8 <__clzsi2>
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <__aeabi_ui2d+0x48>)
 8002954:	1a1b      	subs	r3, r3, r0
 8002956:	280a      	cmp	r0, #10
 8002958:	dc11      	bgt.n	800297e <__aeabi_ui2d+0x36>
 800295a:	220b      	movs	r2, #11
 800295c:	0021      	movs	r1, r4
 800295e:	1a12      	subs	r2, r2, r0
 8002960:	40d1      	lsrs	r1, r2
 8002962:	3015      	adds	r0, #21
 8002964:	030a      	lsls	r2, r1, #12
 8002966:	055b      	lsls	r3, r3, #21
 8002968:	4084      	lsls	r4, r0
 800296a:	0b12      	lsrs	r2, r2, #12
 800296c:	0d5b      	lsrs	r3, r3, #21
 800296e:	e001      	b.n	8002974 <__aeabi_ui2d+0x2c>
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	4313      	orrs	r3, r2
 8002978:	0020      	movs	r0, r4
 800297a:	0019      	movs	r1, r3
 800297c:	bd10      	pop	{r4, pc}
 800297e:	0022      	movs	r2, r4
 8002980:	380b      	subs	r0, #11
 8002982:	4082      	lsls	r2, r0
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	0312      	lsls	r2, r2, #12
 8002988:	2400      	movs	r4, #0
 800298a:	0b12      	lsrs	r2, r2, #12
 800298c:	0d5b      	lsrs	r3, r3, #21
 800298e:	e7f1      	b.n	8002974 <__aeabi_ui2d+0x2c>
 8002990:	0000041e 	.word	0x0000041e

08002994 <__aeabi_f2d>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	0043      	lsls	r3, r0, #1
 8002998:	0246      	lsls	r6, r0, #9
 800299a:	0fc4      	lsrs	r4, r0, #31
 800299c:	20fe      	movs	r0, #254	; 0xfe
 800299e:	0e1b      	lsrs	r3, r3, #24
 80029a0:	1c59      	adds	r1, r3, #1
 80029a2:	0a75      	lsrs	r5, r6, #9
 80029a4:	4208      	tst	r0, r1
 80029a6:	d00c      	beq.n	80029c2 <__aeabi_f2d+0x2e>
 80029a8:	22e0      	movs	r2, #224	; 0xe0
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4694      	mov	ip, r2
 80029ae:	076d      	lsls	r5, r5, #29
 80029b0:	0b36      	lsrs	r6, r6, #12
 80029b2:	4463      	add	r3, ip
 80029b4:	051b      	lsls	r3, r3, #20
 80029b6:	4333      	orrs	r3, r6
 80029b8:	07e4      	lsls	r4, r4, #31
 80029ba:	4323      	orrs	r3, r4
 80029bc:	0028      	movs	r0, r5
 80029be:	0019      	movs	r1, r3
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <__aeabi_f2d+0x5c>
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	d01b      	beq.n	8002a02 <__aeabi_f2d+0x6e>
 80029ca:	0028      	movs	r0, r5
 80029cc:	f000 f8ec 	bl	8002ba8 <__clzsi2>
 80029d0:	280a      	cmp	r0, #10
 80029d2:	dc1c      	bgt.n	8002a0e <__aeabi_f2d+0x7a>
 80029d4:	230b      	movs	r3, #11
 80029d6:	002e      	movs	r6, r5
 80029d8:	1a1b      	subs	r3, r3, r0
 80029da:	40de      	lsrs	r6, r3
 80029dc:	0003      	movs	r3, r0
 80029de:	3315      	adds	r3, #21
 80029e0:	409d      	lsls	r5, r3
 80029e2:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <__aeabi_f2d+0x88>)
 80029e4:	0336      	lsls	r6, r6, #12
 80029e6:	1a12      	subs	r2, r2, r0
 80029e8:	0552      	lsls	r2, r2, #21
 80029ea:	0b36      	lsrs	r6, r6, #12
 80029ec:	0d53      	lsrs	r3, r2, #21
 80029ee:	e7e1      	b.n	80029b4 <__aeabi_f2d+0x20>
 80029f0:	2d00      	cmp	r5, #0
 80029f2:	d009      	beq.n	8002a08 <__aeabi_f2d+0x74>
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0b36      	lsrs	r6, r6, #12
 80029f8:	0312      	lsls	r2, r2, #12
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <__aeabi_f2d+0x8c>)
 80029fc:	076d      	lsls	r5, r5, #29
 80029fe:	4316      	orrs	r6, r2
 8002a00:	e7d8      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a02:	2300      	movs	r3, #0
 8002a04:	2600      	movs	r6, #0
 8002a06:	e7d5      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a08:	2600      	movs	r6, #0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <__aeabi_f2d+0x8c>)
 8002a0c:	e7d2      	b.n	80029b4 <__aeabi_f2d+0x20>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	3b0b      	subs	r3, #11
 8002a12:	409d      	lsls	r5, r3
 8002a14:	002e      	movs	r6, r5
 8002a16:	2500      	movs	r5, #0
 8002a18:	e7e3      	b.n	80029e2 <__aeabi_f2d+0x4e>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	00000389 	.word	0x00000389
 8002a20:	000007ff 	.word	0x000007ff

08002a24 <__aeabi_d2f>:
 8002a24:	0002      	movs	r2, r0
 8002a26:	004b      	lsls	r3, r1, #1
 8002a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2a:	0d5b      	lsrs	r3, r3, #21
 8002a2c:	030c      	lsls	r4, r1, #12
 8002a2e:	4e3d      	ldr	r6, [pc, #244]	; (8002b24 <__aeabi_d2f+0x100>)
 8002a30:	0a64      	lsrs	r4, r4, #9
 8002a32:	0f40      	lsrs	r0, r0, #29
 8002a34:	1c5f      	adds	r7, r3, #1
 8002a36:	0fc9      	lsrs	r1, r1, #31
 8002a38:	4304      	orrs	r4, r0
 8002a3a:	00d5      	lsls	r5, r2, #3
 8002a3c:	4237      	tst	r7, r6
 8002a3e:	d00a      	beq.n	8002a56 <__aeabi_d2f+0x32>
 8002a40:	4839      	ldr	r0, [pc, #228]	; (8002b28 <__aeabi_d2f+0x104>)
 8002a42:	181e      	adds	r6, r3, r0
 8002a44:	2efe      	cmp	r6, #254	; 0xfe
 8002a46:	dd16      	ble.n	8002a76 <__aeabi_d2f+0x52>
 8002a48:	20ff      	movs	r0, #255	; 0xff
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	05c0      	lsls	r0, r0, #23
 8002a4e:	4320      	orrs	r0, r4
 8002a50:	07c9      	lsls	r1, r1, #31
 8002a52:	4308      	orrs	r0, r1
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <__aeabi_d2f+0x44>
 8002a5a:	432c      	orrs	r4, r5
 8002a5c:	d026      	beq.n	8002aac <__aeabi_d2f+0x88>
 8002a5e:	2205      	movs	r2, #5
 8002a60:	0192      	lsls	r2, r2, #6
 8002a62:	0a54      	lsrs	r4, r2, #9
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	e7f1      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a68:	4325      	orrs	r5, r4
 8002a6a:	d0ed      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002a6c:	2080      	movs	r0, #128	; 0x80
 8002a6e:	03c0      	lsls	r0, r0, #15
 8002a70:	4304      	orrs	r4, r0
 8002a72:	20ff      	movs	r0, #255	; 0xff
 8002a74:	e7ea      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	dd1b      	ble.n	8002ab2 <__aeabi_d2f+0x8e>
 8002a7a:	0192      	lsls	r2, r2, #6
 8002a7c:	1e53      	subs	r3, r2, #1
 8002a7e:	419a      	sbcs	r2, r3
 8002a80:	00e4      	lsls	r4, r4, #3
 8002a82:	0f6d      	lsrs	r5, r5, #29
 8002a84:	4322      	orrs	r2, r4
 8002a86:	432a      	orrs	r2, r5
 8002a88:	0753      	lsls	r3, r2, #29
 8002a8a:	d048      	beq.n	8002b1e <__aeabi_d2f+0xfa>
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d000      	beq.n	8002a96 <__aeabi_d2f+0x72>
 8002a94:	3204      	adds	r2, #4
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	04db      	lsls	r3, r3, #19
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d03f      	beq.n	8002b1e <__aeabi_d2f+0xfa>
 8002a9e:	1c70      	adds	r0, r6, #1
 8002aa0:	2efe      	cmp	r6, #254	; 0xfe
 8002aa2:	d0d1      	beq.n	8002a48 <__aeabi_d2f+0x24>
 8002aa4:	0192      	lsls	r2, r2, #6
 8002aa6:	0a54      	lsrs	r4, r2, #9
 8002aa8:	b2c0      	uxtb	r0, r0
 8002aaa:	e7cf      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002aac:	2000      	movs	r0, #0
 8002aae:	2400      	movs	r4, #0
 8002ab0:	e7cc      	b.n	8002a4c <__aeabi_d2f+0x28>
 8002ab2:	0032      	movs	r2, r6
 8002ab4:	3217      	adds	r2, #23
 8002ab6:	db22      	blt.n	8002afe <__aeabi_d2f+0xda>
 8002ab8:	2080      	movs	r0, #128	; 0x80
 8002aba:	0400      	lsls	r0, r0, #16
 8002abc:	4320      	orrs	r0, r4
 8002abe:	241e      	movs	r4, #30
 8002ac0:	1ba4      	subs	r4, r4, r6
 8002ac2:	2c1f      	cmp	r4, #31
 8002ac4:	dd1d      	ble.n	8002b02 <__aeabi_d2f+0xde>
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4252      	negs	r2, r2
 8002aca:	1b96      	subs	r6, r2, r6
 8002acc:	0002      	movs	r2, r0
 8002ace:	40f2      	lsrs	r2, r6
 8002ad0:	0016      	movs	r6, r2
 8002ad2:	2c20      	cmp	r4, #32
 8002ad4:	d004      	beq.n	8002ae0 <__aeabi_d2f+0xbc>
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <__aeabi_d2f+0x108>)
 8002ad8:	4694      	mov	ip, r2
 8002ada:	4463      	add	r3, ip
 8002adc:	4098      	lsls	r0, r3
 8002ade:	4305      	orrs	r5, r0
 8002ae0:	002a      	movs	r2, r5
 8002ae2:	1e53      	subs	r3, r2, #1
 8002ae4:	419a      	sbcs	r2, r3
 8002ae6:	4332      	orrs	r2, r6
 8002ae8:	2600      	movs	r6, #0
 8002aea:	0753      	lsls	r3, r2, #29
 8002aec:	d1ce      	bne.n	8002a8c <__aeabi_d2f+0x68>
 8002aee:	2480      	movs	r4, #128	; 0x80
 8002af0:	0013      	movs	r3, r2
 8002af2:	04e4      	lsls	r4, r4, #19
 8002af4:	2001      	movs	r0, #1
 8002af6:	4023      	ands	r3, r4
 8002af8:	4222      	tst	r2, r4
 8002afa:	d1d3      	bne.n	8002aa4 <__aeabi_d2f+0x80>
 8002afc:	e7b0      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002afe:	2300      	movs	r3, #0
 8002b00:	e7ad      	b.n	8002a5e <__aeabi_d2f+0x3a>
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <__aeabi_d2f+0x10c>)
 8002b04:	4694      	mov	ip, r2
 8002b06:	002a      	movs	r2, r5
 8002b08:	40e2      	lsrs	r2, r4
 8002b0a:	0014      	movs	r4, r2
 8002b0c:	002a      	movs	r2, r5
 8002b0e:	4463      	add	r3, ip
 8002b10:	409a      	lsls	r2, r3
 8002b12:	4098      	lsls	r0, r3
 8002b14:	1e55      	subs	r5, r2, #1
 8002b16:	41aa      	sbcs	r2, r5
 8002b18:	4302      	orrs	r2, r0
 8002b1a:	4322      	orrs	r2, r4
 8002b1c:	e7e4      	b.n	8002ae8 <__aeabi_d2f+0xc4>
 8002b1e:	0033      	movs	r3, r6
 8002b20:	e79e      	b.n	8002a60 <__aeabi_d2f+0x3c>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	000007fe 	.word	0x000007fe
 8002b28:	fffffc80 	.word	0xfffffc80
 8002b2c:	fffffca2 	.word	0xfffffca2
 8002b30:	fffffc82 	.word	0xfffffc82

08002b34 <__aeabi_cfrcmple>:
 8002b34:	4684      	mov	ip, r0
 8002b36:	0008      	movs	r0, r1
 8002b38:	4661      	mov	r1, ip
 8002b3a:	e7ff      	b.n	8002b3c <__aeabi_cfcmpeq>

08002b3c <__aeabi_cfcmpeq>:
 8002b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b3e:	f000 f8bd 	bl	8002cbc <__lesf2>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d401      	bmi.n	8002b4a <__aeabi_cfcmpeq+0xe>
 8002b46:	2100      	movs	r1, #0
 8002b48:	42c8      	cmn	r0, r1
 8002b4a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b4c <__aeabi_fcmpeq>:
 8002b4c:	b510      	push	{r4, lr}
 8002b4e:	f000 f849 	bl	8002be4 <__eqsf2>
 8002b52:	4240      	negs	r0, r0
 8002b54:	3001      	adds	r0, #1
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <__aeabi_fcmplt>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	f000 f8af 	bl	8002cbc <__lesf2>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	db01      	blt.n	8002b66 <__aeabi_fcmplt+0xe>
 8002b62:	2000      	movs	r0, #0
 8002b64:	bd10      	pop	{r4, pc}
 8002b66:	2001      	movs	r0, #1
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)

08002b6c <__aeabi_fcmple>:
 8002b6c:	b510      	push	{r4, lr}
 8002b6e:	f000 f8a5 	bl	8002cbc <__lesf2>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	dd01      	ble.n	8002b7a <__aeabi_fcmple+0xe>
 8002b76:	2000      	movs	r0, #0
 8002b78:	bd10      	pop	{r4, pc}
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	bd10      	pop	{r4, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)

08002b80 <__aeabi_fcmpgt>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	f000 f855 	bl	8002c30 <__gesf2>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	dc01      	bgt.n	8002b8e <__aeabi_fcmpgt+0xe>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	2001      	movs	r0, #1
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)

08002b94 <__aeabi_fcmpge>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	f000 f84b 	bl	8002c30 <__gesf2>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	da01      	bge.n	8002ba2 <__aeabi_fcmpge+0xe>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)

08002ba8 <__clzsi2>:
 8002ba8:	211c      	movs	r1, #28
 8002baa:	2301      	movs	r3, #1
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d301      	bcc.n	8002bb6 <__clzsi2+0xe>
 8002bb2:	0c00      	lsrs	r0, r0, #16
 8002bb4:	3910      	subs	r1, #16
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	4298      	cmp	r0, r3
 8002bba:	d301      	bcc.n	8002bc0 <__clzsi2+0x18>
 8002bbc:	0a00      	lsrs	r0, r0, #8
 8002bbe:	3908      	subs	r1, #8
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	4298      	cmp	r0, r3
 8002bc4:	d301      	bcc.n	8002bca <__clzsi2+0x22>
 8002bc6:	0900      	lsrs	r0, r0, #4
 8002bc8:	3904      	subs	r1, #4
 8002bca:	a202      	add	r2, pc, #8	; (adr r2, 8002bd4 <__clzsi2+0x2c>)
 8002bcc:	5c10      	ldrb	r0, [r2, r0]
 8002bce:	1840      	adds	r0, r0, r1
 8002bd0:	4770      	bx	lr
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	02020304 	.word	0x02020304
 8002bd8:	01010101 	.word	0x01010101
	...

08002be4 <__eqsf2>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	0042      	lsls	r2, r0, #1
 8002be8:	0245      	lsls	r5, r0, #9
 8002bea:	024e      	lsls	r6, r1, #9
 8002bec:	004c      	lsls	r4, r1, #1
 8002bee:	0fc3      	lsrs	r3, r0, #31
 8002bf0:	0a6d      	lsrs	r5, r5, #9
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	0e12      	lsrs	r2, r2, #24
 8002bf6:	0a76      	lsrs	r6, r6, #9
 8002bf8:	0e24      	lsrs	r4, r4, #24
 8002bfa:	0fc9      	lsrs	r1, r1, #31
 8002bfc:	2aff      	cmp	r2, #255	; 0xff
 8002bfe:	d006      	beq.n	8002c0e <__eqsf2+0x2a>
 8002c00:	2cff      	cmp	r4, #255	; 0xff
 8002c02:	d003      	beq.n	8002c0c <__eqsf2+0x28>
 8002c04:	42a2      	cmp	r2, r4
 8002c06:	d101      	bne.n	8002c0c <__eqsf2+0x28>
 8002c08:	42b5      	cmp	r5, r6
 8002c0a:	d006      	beq.n	8002c1a <__eqsf2+0x36>
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	d1fc      	bne.n	8002c0c <__eqsf2+0x28>
 8002c12:	2cff      	cmp	r4, #255	; 0xff
 8002c14:	d1fa      	bne.n	8002c0c <__eqsf2+0x28>
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d1f8      	bne.n	8002c0c <__eqsf2+0x28>
 8002c1a:	428b      	cmp	r3, r1
 8002c1c:	d006      	beq.n	8002c2c <__eqsf2+0x48>
 8002c1e:	2001      	movs	r0, #1
 8002c20:	2a00      	cmp	r2, #0
 8002c22:	d1f3      	bne.n	8002c0c <__eqsf2+0x28>
 8002c24:	0028      	movs	r0, r5
 8002c26:	1e43      	subs	r3, r0, #1
 8002c28:	4198      	sbcs	r0, r3
 8002c2a:	e7ef      	b.n	8002c0c <__eqsf2+0x28>
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e7ed      	b.n	8002c0c <__eqsf2+0x28>

08002c30 <__gesf2>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	0042      	lsls	r2, r0, #1
 8002c34:	0245      	lsls	r5, r0, #9
 8002c36:	024e      	lsls	r6, r1, #9
 8002c38:	004c      	lsls	r4, r1, #1
 8002c3a:	0fc3      	lsrs	r3, r0, #31
 8002c3c:	0a6d      	lsrs	r5, r5, #9
 8002c3e:	0e12      	lsrs	r2, r2, #24
 8002c40:	0a76      	lsrs	r6, r6, #9
 8002c42:	0e24      	lsrs	r4, r4, #24
 8002c44:	0fc8      	lsrs	r0, r1, #31
 8002c46:	2aff      	cmp	r2, #255	; 0xff
 8002c48:	d01b      	beq.n	8002c82 <__gesf2+0x52>
 8002c4a:	2cff      	cmp	r4, #255	; 0xff
 8002c4c:	d00e      	beq.n	8002c6c <__gesf2+0x3c>
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d11b      	bne.n	8002c8a <__gesf2+0x5a>
 8002c52:	2c00      	cmp	r4, #0
 8002c54:	d101      	bne.n	8002c5a <__gesf2+0x2a>
 8002c56:	2e00      	cmp	r6, #0
 8002c58:	d01c      	beq.n	8002c94 <__gesf2+0x64>
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	d00c      	beq.n	8002c78 <__gesf2+0x48>
 8002c5e:	4283      	cmp	r3, r0
 8002c60:	d01c      	beq.n	8002c9c <__gesf2+0x6c>
 8002c62:	2102      	movs	r1, #2
 8002c64:	1e58      	subs	r0, r3, #1
 8002c66:	4008      	ands	r0, r1
 8002c68:	3801      	subs	r0, #1
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	2e00      	cmp	r6, #0
 8002c6e:	d122      	bne.n	8002cb6 <__gesf2+0x86>
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	d1f4      	bne.n	8002c5e <__gesf2+0x2e>
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d1f2      	bne.n	8002c5e <__gesf2+0x2e>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1f6      	bne.n	8002c6a <__gesf2+0x3a>
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	4240      	negs	r0, r0
 8002c80:	e7f3      	b.n	8002c6a <__gesf2+0x3a>
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	d117      	bne.n	8002cb6 <__gesf2+0x86>
 8002c86:	2cff      	cmp	r4, #255	; 0xff
 8002c88:	d0f0      	beq.n	8002c6c <__gesf2+0x3c>
 8002c8a:	2c00      	cmp	r4, #0
 8002c8c:	d1e7      	bne.n	8002c5e <__gesf2+0x2e>
 8002c8e:	2e00      	cmp	r6, #0
 8002c90:	d1e5      	bne.n	8002c5e <__gesf2+0x2e>
 8002c92:	e7e6      	b.n	8002c62 <__gesf2+0x32>
 8002c94:	2000      	movs	r0, #0
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	d0e7      	beq.n	8002c6a <__gesf2+0x3a>
 8002c9a:	e7e2      	b.n	8002c62 <__gesf2+0x32>
 8002c9c:	42a2      	cmp	r2, r4
 8002c9e:	dc05      	bgt.n	8002cac <__gesf2+0x7c>
 8002ca0:	dbea      	blt.n	8002c78 <__gesf2+0x48>
 8002ca2:	42b5      	cmp	r5, r6
 8002ca4:	d802      	bhi.n	8002cac <__gesf2+0x7c>
 8002ca6:	d3e7      	bcc.n	8002c78 <__gesf2+0x48>
 8002ca8:	2000      	movs	r0, #0
 8002caa:	e7de      	b.n	8002c6a <__gesf2+0x3a>
 8002cac:	4243      	negs	r3, r0
 8002cae:	4158      	adcs	r0, r3
 8002cb0:	0040      	lsls	r0, r0, #1
 8002cb2:	3801      	subs	r0, #1
 8002cb4:	e7d9      	b.n	8002c6a <__gesf2+0x3a>
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	4240      	negs	r0, r0
 8002cba:	e7d6      	b.n	8002c6a <__gesf2+0x3a>

08002cbc <__lesf2>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	0042      	lsls	r2, r0, #1
 8002cc0:	0245      	lsls	r5, r0, #9
 8002cc2:	024e      	lsls	r6, r1, #9
 8002cc4:	004c      	lsls	r4, r1, #1
 8002cc6:	0fc3      	lsrs	r3, r0, #31
 8002cc8:	0a6d      	lsrs	r5, r5, #9
 8002cca:	0e12      	lsrs	r2, r2, #24
 8002ccc:	0a76      	lsrs	r6, r6, #9
 8002cce:	0e24      	lsrs	r4, r4, #24
 8002cd0:	0fc8      	lsrs	r0, r1, #31
 8002cd2:	2aff      	cmp	r2, #255	; 0xff
 8002cd4:	d00b      	beq.n	8002cee <__lesf2+0x32>
 8002cd6:	2cff      	cmp	r4, #255	; 0xff
 8002cd8:	d00d      	beq.n	8002cf6 <__lesf2+0x3a>
 8002cda:	2a00      	cmp	r2, #0
 8002cdc:	d11f      	bne.n	8002d1e <__lesf2+0x62>
 8002cde:	2c00      	cmp	r4, #0
 8002ce0:	d116      	bne.n	8002d10 <__lesf2+0x54>
 8002ce2:	2e00      	cmp	r6, #0
 8002ce4:	d114      	bne.n	8002d10 <__lesf2+0x54>
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	d010      	beq.n	8002d0e <__lesf2+0x52>
 8002cec:	e009      	b.n	8002d02 <__lesf2+0x46>
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	d10c      	bne.n	8002d0c <__lesf2+0x50>
 8002cf2:	2cff      	cmp	r4, #255	; 0xff
 8002cf4:	d113      	bne.n	8002d1e <__lesf2+0x62>
 8002cf6:	2e00      	cmp	r6, #0
 8002cf8:	d108      	bne.n	8002d0c <__lesf2+0x50>
 8002cfa:	2a00      	cmp	r2, #0
 8002cfc:	d008      	beq.n	8002d10 <__lesf2+0x54>
 8002cfe:	4283      	cmp	r3, r0
 8002d00:	d012      	beq.n	8002d28 <__lesf2+0x6c>
 8002d02:	2102      	movs	r1, #2
 8002d04:	1e58      	subs	r0, r3, #1
 8002d06:	4008      	ands	r0, r1
 8002d08:	3801      	subs	r0, #1
 8002d0a:	e000      	b.n	8002d0e <__lesf2+0x52>
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	d1f4      	bne.n	8002cfe <__lesf2+0x42>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d1fa      	bne.n	8002d0e <__lesf2+0x52>
 8002d18:	2001      	movs	r0, #1
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	e7f7      	b.n	8002d0e <__lesf2+0x52>
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	d1ed      	bne.n	8002cfe <__lesf2+0x42>
 8002d22:	2e00      	cmp	r6, #0
 8002d24:	d1eb      	bne.n	8002cfe <__lesf2+0x42>
 8002d26:	e7ec      	b.n	8002d02 <__lesf2+0x46>
 8002d28:	42a2      	cmp	r2, r4
 8002d2a:	dc05      	bgt.n	8002d38 <__lesf2+0x7c>
 8002d2c:	dbf2      	blt.n	8002d14 <__lesf2+0x58>
 8002d2e:	42b5      	cmp	r5, r6
 8002d30:	d802      	bhi.n	8002d38 <__lesf2+0x7c>
 8002d32:	d3ef      	bcc.n	8002d14 <__lesf2+0x58>
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7ea      	b.n	8002d0e <__lesf2+0x52>
 8002d38:	4243      	negs	r3, r0
 8002d3a:	4158      	adcs	r0, r3
 8002d3c:	0040      	lsls	r0, r0, #1
 8002d3e:	3801      	subs	r0, #1
 8002d40:	e7e5      	b.n	8002d0e <__lesf2+0x52>
 8002d42:	46c0      	nop			; (mov r8, r8)

08002d44 <ICI2022_Init>:

/***************************************************************************/
/* INITIALIZE LIBRARY */
/***************************************************************************/

void ICI2022_Init(I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uartHandle) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev.i2cHandle = i2cHandle;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <ICI2022_Init+0x20>)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
	dev.uartHandle = uartHandle;
 8002d54:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <ICI2022_Init+0x20>)
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	605a      	str	r2, [r3, #4]

}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	200002ac 	.word	0x200002ac

08002d68 <u8x8_stm32_gpio_and_delay>:
/***************************************************************************/
/* OLED FUNCTIONS */
/***************************************************************************/

// Byte GPIO and Delay Callback
uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	0008      	movs	r0, r1
 8002d72:	0011      	movs	r1, r2
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	240b      	movs	r4, #11
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	1c02      	adds	r2, r0, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	230a      	movs	r3, #10
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	1c0a      	adds	r2, r1, #0
 8002d84:	701a      	strb	r2, [r3, #0]
	switch (msg) {
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b28      	cmp	r3, #40	; 0x28
 8002d8c:	d002      	beq.n	8002d94 <u8x8_stm32_gpio_and_delay+0x2c>
 8002d8e:	2b29      	cmp	r3, #41	; 0x29
 8002d90:	d004      	beq.n	8002d9c <u8x8_stm32_gpio_and_delay+0x34>
 8002d92:	e00a      	b.n	8002daa <u8x8_stm32_gpio_and_delay+0x42>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		osDelay(1);
 8002d94:	2001      	movs	r0, #1
 8002d96:	f00a ff7f 	bl	800dc98 <osDelay>
		break;
 8002d9a:	e00b      	b.n	8002db4 <u8x8_stm32_gpio_and_delay+0x4c>
	case U8X8_MSG_DELAY_MILLI:
		osDelay(arg_int);
 8002d9c:	230a      	movs	r3, #10
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f00a ff78 	bl	800dc98 <osDelay>
		break;
 8002da8:	e004      	b.n	8002db4 <u8x8_stm32_gpio_and_delay+0x4c>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2227      	movs	r2, #39	; 0x27
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]
		break;
 8002db2:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8002db4:	2301      	movs	r3, #1
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b005      	add	sp, #20
 8002dbc:	bd90      	pop	{r4, r7, pc}
	...

08002dc0 <u8x8_byte_i2c>:

// Communication Callback
uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	0008      	movs	r0, r1
 8002dca:	0011      	movs	r1, r2
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	240b      	movs	r4, #11
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	230a      	movs	r3, #10
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	1c0a      	adds	r2, r1, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3b14      	subs	r3, #20
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d836      	bhi.n	8002e56 <u8x8_byte_i2c+0x96>
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <u8x8_byte_i2c+0xa8>)
 8002dec:	18d3      	adds	r3, r2, r3
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	469f      	mov	pc, r3
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8002df6:	e013      	b.n	8002e20 <u8x8_byte_i2c+0x60>
		{
			buffer[buf_idx++] = *data;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <u8x8_byte_i2c+0xac>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	b2d1      	uxtb	r1, r2
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <u8x8_byte_i2c+0xac>)
 8002e02:	7011      	strb	r1, [r2, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	7819      	ldrb	r1, [r3, #0]
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <u8x8_byte_i2c+0xb0>)
 8002e0c:	5499      	strb	r1, [r3, r2]
			data++;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
			arg_int--;
 8002e14:	210a      	movs	r1, #10
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
		while( arg_int > 0 )
 8002e20:	230a      	movs	r3, #10
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e6      	bne.n	8002df8 <u8x8_byte_i2c+0x38>
		}
		break;
 8002e2a:	e017      	b.n	8002e5c <u8x8_byte_i2c+0x9c>
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <u8x8_byte_i2c+0xac>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
		break;
 8002e32:	e013      	b.n	8002e5c <u8x8_byte_i2c+0x9c>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(dev.i2cHandle, u8x8_GetI2CAddress(u8x8), buffer, buf_idx, 1000);
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <u8x8_byte_i2c+0xb4>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <u8x8_byte_i2c+0xac>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b29c      	uxth	r4, r3
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <u8x8_byte_i2c+0xb0>)
 8002e48:	23fa      	movs	r3, #250	; 0xfa
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	0023      	movs	r3, r4
 8002e50:	f003 faae 	bl	80063b0 <HAL_I2C_Master_Transmit>
		break;
 8002e54:	e002      	b.n	8002e5c <u8x8_byte_i2c+0x9c>
	default:
		return 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e001      	b.n	8002e5e <u8x8_byte_i2c+0x9e>
		break;
 8002e5a:	46c0      	nop			; (mov r8, r8)
	}
	return 1;
 8002e5c:	2301      	movs	r3, #1
}
 8002e5e:	0018      	movs	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b007      	add	sp, #28
 8002e64:	bd90      	pop	{r4, r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	080159c4 	.word	0x080159c4
 8002e6c:	200002bc 	.word	0x200002bc
 8002e70:	200002c0 	.word	0x200002c0
 8002e74:	200002ac 	.word	0x200002ac

08002e78 <map>:
/***************************************************************************/
/* MATH FUNCTIONS */
/***************************************************************************/

uint32_t map(uint32_t IN, uint32_t INmin, uint32_t INmax, uint32_t OUTmin, uint32_t OUTmax)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
    return ((((IN - INmin)*(OUTmax - OUTmin))/(INmax - INmin)) + OUTmin);
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	1a8a      	subs	r2, r1, r2
 8002e92:	435a      	muls	r2, r3
 8002e94:	0010      	movs	r0, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	f7fd f94f 	bl	8000140 <__udivsi3>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	001a      	movs	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	18d3      	adds	r3, r2, r3
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <calc_needle>:

void calc_needle(needle *s)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6178      	str	r0, [r7, #20]
	s->end_x = (s->big * -sin(radians(s->angle))) + s->center_x;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff fd11 	bl	80028e8 <__aeabi_i2d>
 8002ec6:	0004      	movs	r4, r0
 8002ec8:	000d      	movs	r5, r1
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7ff fd0a 	bl	80028e8 <__aeabi_i2d>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	000b      	movs	r3, r1
 8002ed8:	0010      	movs	r0, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	f000 f95c 	bl	8003198 <radians>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	f011 fa3e 	bl	8014368 <sin>
 8002eec:	0002      	movs	r2, r0
 8002eee:	000b      	movs	r3, r1
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	0609      	lsls	r1, r1, #24
 8002ef8:	4059      	eors	r1, r3
 8002efa:	60f9      	str	r1, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	0020      	movs	r0, r4
 8002f02:	0029      	movs	r1, r5
 8002f04:	f7fe fe9e 	bl	8001c44 <__aeabi_dmul>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	000b      	movs	r3, r1
 8002f0c:	0014      	movs	r4, r2
 8002f0e:	001d      	movs	r5, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff fce7 	bl	80028e8 <__aeabi_i2d>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	000b      	movs	r3, r1
 8002f1e:	0020      	movs	r0, r4
 8002f20:	0029      	movs	r1, r5
 8002f22:	f7fd ff51 	bl	8000dc8 <__aeabi_dadd>
 8002f26:	0002      	movs	r2, r0
 8002f28:	000b      	movs	r3, r1
 8002f2a:	0010      	movs	r0, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	f7ff fca5 	bl	800287c <__aeabi_d2iz>
 8002f32:	0002      	movs	r2, r0
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	619a      	str	r2, [r3, #24]
	s->end_y = (s->big * cos(radians(s->angle))) + s->center_y;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff fcd3 	bl	80028e8 <__aeabi_i2d>
 8002f42:	0004      	movs	r4, r0
 8002f44:	000d      	movs	r5, r1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7ff fccc 	bl	80028e8 <__aeabi_i2d>
 8002f50:	0002      	movs	r2, r0
 8002f52:	000b      	movs	r3, r1
 8002f54:	0010      	movs	r0, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	f000 f91e 	bl	8003198 <radians>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	000b      	movs	r3, r1
 8002f60:	0010      	movs	r0, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	f011 f970 	bl	8014248 <cos>
 8002f68:	0002      	movs	r2, r0
 8002f6a:	000b      	movs	r3, r1
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	0029      	movs	r1, r5
 8002f70:	f7fe fe68 	bl	8001c44 <__aeabi_dmul>
 8002f74:	0002      	movs	r2, r0
 8002f76:	000b      	movs	r3, r1
 8002f78:	0014      	movs	r4, r2
 8002f7a:	001d      	movs	r5, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fcb1 	bl	80028e8 <__aeabi_i2d>
 8002f86:	0002      	movs	r2, r0
 8002f88:	000b      	movs	r3, r1
 8002f8a:	0020      	movs	r0, r4
 8002f8c:	0029      	movs	r1, r5
 8002f8e:	f7fd ff1b 	bl	8000dc8 <__aeabi_dadd>
 8002f92:	0002      	movs	r2, r0
 8002f94:	000b      	movs	r3, r1
 8002f96:	0010      	movs	r0, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	f7ff fc6f 	bl	800287c <__aeabi_d2iz>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	61da      	str	r2, [r3, #28]
	s->start_x = (s->small * -sin(radians(s->angle + 180.0))) + s->center_x;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fc9d 	bl	80028e8 <__aeabi_i2d>
 8002fae:	0004      	movs	r4, r0
 8002fb0:	000d      	movs	r5, r1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff fc96 	bl	80028e8 <__aeabi_i2d>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <calc_needle+0x1f0>)
 8002fc0:	f7fd ff02 	bl	8000dc8 <__aeabi_dadd>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	0010      	movs	r0, r2
 8002fca:	0019      	movs	r1, r3
 8002fcc:	f000 f8e4 	bl	8003198 <radians>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	000b      	movs	r3, r1
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	f011 f9c6 	bl	8014368 <sin>
 8002fdc:	0002      	movs	r2, r0
 8002fde:	000b      	movs	r3, r1
 8002fe0:	0011      	movs	r1, r2
 8002fe2:	6039      	str	r1, [r7, #0]
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	0609      	lsls	r1, r1, #24
 8002fe8:	4059      	eors	r1, r3
 8002fea:	6079      	str	r1, [r7, #4]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0020      	movs	r0, r4
 8002ff2:	0029      	movs	r1, r5
 8002ff4:	f7fe fe26 	bl	8001c44 <__aeabi_dmul>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	000b      	movs	r3, r1
 8002ffc:	0014      	movs	r4, r2
 8002ffe:	001d      	movs	r5, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff fc6f 	bl	80028e8 <__aeabi_i2d>
 800300a:	0002      	movs	r2, r0
 800300c:	000b      	movs	r3, r1
 800300e:	0020      	movs	r0, r4
 8003010:	0029      	movs	r1, r5
 8003012:	f7fd fed9 	bl	8000dc8 <__aeabi_dadd>
 8003016:	0002      	movs	r2, r0
 8003018:	000b      	movs	r3, r1
 800301a:	0010      	movs	r0, r2
 800301c:	0019      	movs	r1, r3
 800301e:	f7ff fc2d 	bl	800287c <__aeabi_d2iz>
 8003022:	0002      	movs	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	611a      	str	r2, [r3, #16]
	s->start_y = (s->small * cos(radians(s->angle + 180.0))) + s->center_y;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fc5b 	bl	80028e8 <__aeabi_i2d>
 8003032:	0004      	movs	r4, r0
 8003034:	000d      	movs	r5, r1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff fc54 	bl	80028e8 <__aeabi_i2d>
 8003040:	2200      	movs	r2, #0
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <calc_needle+0x1f0>)
 8003044:	f7fd fec0 	bl	8000dc8 <__aeabi_dadd>
 8003048:	0002      	movs	r2, r0
 800304a:	000b      	movs	r3, r1
 800304c:	0010      	movs	r0, r2
 800304e:	0019      	movs	r1, r3
 8003050:	f000 f8a2 	bl	8003198 <radians>
 8003054:	0002      	movs	r2, r0
 8003056:	000b      	movs	r3, r1
 8003058:	0010      	movs	r0, r2
 800305a:	0019      	movs	r1, r3
 800305c:	f011 f8f4 	bl	8014248 <cos>
 8003060:	0002      	movs	r2, r0
 8003062:	000b      	movs	r3, r1
 8003064:	0020      	movs	r0, r4
 8003066:	0029      	movs	r1, r5
 8003068:	f7fe fdec 	bl	8001c44 <__aeabi_dmul>
 800306c:	0002      	movs	r2, r0
 800306e:	000b      	movs	r3, r1
 8003070:	0014      	movs	r4, r2
 8003072:	001d      	movs	r5, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fc35 	bl	80028e8 <__aeabi_i2d>
 800307e:	0002      	movs	r2, r0
 8003080:	000b      	movs	r3, r1
 8003082:	0020      	movs	r0, r4
 8003084:	0029      	movs	r1, r5
 8003086:	f7fd fe9f 	bl	8000dc8 <__aeabi_dadd>
 800308a:	0002      	movs	r2, r0
 800308c:	000b      	movs	r3, r1
 800308e:	0010      	movs	r0, r2
 8003090:	0019      	movs	r1, r3
 8003092:	f7ff fbf3 	bl	800287c <__aeabi_d2iz>
 8003096:	0002      	movs	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	615a      	str	r2, [r3, #20]
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b006      	add	sp, #24
 80030a2:	bdb0      	pop	{r4, r5, r7, pc}
 80030a4:	40668000 	.word	0x40668000

080030a8 <calc_rpm>:

void calc_rpm(void)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
/*
 * CALCULATE RPM TABLE
 */
for(int i = 2; i < 16; i++)
 80030ae:	2302      	movs	r3, #2
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	e022      	b.n	80030fa <calc_rpm+0x52>
{
	steps_sec = 1000/(i);									// pf = pulse frequency
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	23fa      	movs	r3, #250	; 0xfa
 80030b8:	0098      	lsls	r0, r3, #2
 80030ba:	f7fd f8cb 	bl	8000254 <__divsi3>
 80030be:	0003      	movs	r3, r0
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7fd fe33 	bl	8000d2c <__aeabi_i2f>
 80030c6:	1c02      	adds	r2, r0, #0
 80030c8:	4b10      	ldr	r3, [pc, #64]	; (800310c <calc_rpm+0x64>)
 80030ca:	601a      	str	r2, [r3, #0]
	rpm[i-2] = 60*(steps_sec/4096);							// 4096 half steps
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <calc_rpm+0x64>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	218b      	movs	r1, #139	; 0x8b
 80030d2:	05c9      	lsls	r1, r1, #23
 80030d4:	1c18      	adds	r0, r3, #0
 80030d6:	f7fd fa1d 	bl	8000514 <__aeabi_fdiv>
 80030da:	1c03      	adds	r3, r0, #0
 80030dc:	1c1a      	adds	r2, r3, #0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1e9c      	subs	r4, r3, #2
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <calc_rpm+0x68>)
 80030e4:	1c10      	adds	r0, r2, #0
 80030e6:	f7fd fb2d 	bl	8000744 <__aeabi_fmul>
 80030ea:	1c03      	adds	r3, r0, #0
 80030ec:	1c19      	adds	r1, r3, #0
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <calc_rpm+0x6c>)
 80030f0:	00a2      	lsls	r2, r4, #2
 80030f2:	50d1      	str	r1, [r2, r3]
for(int i = 2; i < 16; i++)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3301      	adds	r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b0f      	cmp	r3, #15
 80030fe:	ddd9      	ble.n	80030b4 <calc_rpm+0xc>
}
}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b003      	add	sp, #12
 8003108:	bd90      	pop	{r4, r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	20000264 	.word	0x20000264
 8003110:	42700000 	.word	0x42700000
 8003114:	20000268 	.word	0x20000268

08003118 <calc_periodos>:

void calc_periodos(void) {
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
        static double steps_sec;
  // CALCULAMOS EL ARRAY DE PERÍODOS
  for(int i = 1; i < 10; i++) {
 800311e:	2301      	movs	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	e02a      	b.n	800317a <calc_periodos+0x62>
    steps_sec = (i*4096)/60;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	031b      	lsls	r3, r3, #12
 8003128:	213c      	movs	r1, #60	; 0x3c
 800312a:	0018      	movs	r0, r3
 800312c:	f7fd f892 	bl	8000254 <__divsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	0018      	movs	r0, r3
 8003134:	f7ff fbd8 	bl	80028e8 <__aeabi_i2d>
 8003138:	0002      	movs	r2, r0
 800313a:	000b      	movs	r3, r1
 800313c:	4913      	ldr	r1, [pc, #76]	; (800318c <calc_periodos+0x74>)
 800313e:	600a      	str	r2, [r1, #0]
 8003140:	604b      	str	r3, [r1, #4]
    periodos[i-1] = round(1000/steps_sec);
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <calc_periodos+0x74>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2000      	movs	r0, #0
 800314a:	4911      	ldr	r1, [pc, #68]	; (8003190 <calc_periodos+0x78>)
 800314c:	f7fe f978 	bl	8001440 <__aeabi_ddiv>
 8003150:	0002      	movs	r2, r0
 8003152:	000b      	movs	r3, r1
 8003154:	0010      	movs	r0, r2
 8003156:	0019      	movs	r1, r3
 8003158:	f011 f8b8 	bl	80142cc <round>
 800315c:	0002      	movs	r2, r0
 800315e:	000b      	movs	r3, r1
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	1e4c      	subs	r4, r1, #1
 8003164:	0010      	movs	r0, r2
 8003166:	0019      	movs	r1, r3
 8003168:	f7fd f9b6 	bl	80004d8 <__aeabi_d2uiz>
 800316c:	0003      	movs	r3, r0
 800316e:	b2da      	uxtb	r2, r3
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <calc_periodos+0x7c>)
 8003172:	551a      	strb	r2, [r3, r4]
  for(int i = 1; i < 10; i++) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b09      	cmp	r3, #9
 800317e:	ddd1      	ble.n	8003124 <calc_periodos+0xc>
  }
}
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b003      	add	sp, #12
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	200002e0 	.word	0x200002e0
 8003190:	408f4000 	.word	0x408f4000
 8003194:	200002a0 	.word	0x200002a0

08003198 <radians>:


double radians(double degrees)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6038      	str	r0, [r7, #0]
 80031a0:	6079      	str	r1, [r7, #4]
	return degrees * M_PI / 180.0;
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <radians+0x34>)
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <radians+0x38>)
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	f7fe fd4b 	bl	8001c44 <__aeabi_dmul>
 80031ae:	0002      	movs	r2, r0
 80031b0:	000b      	movs	r3, r1
 80031b2:	0010      	movs	r0, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <radians+0x3c>)
 80031ba:	f7fe f941 	bl	8001440 <__aeabi_ddiv>
 80031be:	0002      	movs	r2, r0
 80031c0:	000b      	movs	r3, r1
}
 80031c2:	0010      	movs	r0, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	54442d18 	.word	0x54442d18
 80031d0:	400921fb 	.word	0x400921fb
 80031d4:	40668000 	.word	0x40668000

080031d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031dc:	f001 ff9e 	bl	800511c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031e0:	f000 f93c 	bl	800345c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e4:	f000 fb78 	bl	80038d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031e8:	f000 fb46 	bl	8003878 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80031ec:	f000 f99e 	bl	800352c <MX_ADC_Init>
  MX_I2C1_Init();
 80031f0:	f000 fa04 	bl	80035fc <MX_I2C1_Init>
  MX_TIM3_Init();
 80031f4:	f000 fabe 	bl	8003774 <MX_TIM3_Init>
  MX_SPI1_Init();
 80031f8:	f000 fa40 	bl	800367c <MX_SPI1_Init>
  MX_SPI2_Init();
 80031fc:	f000 fa7c 	bl	80036f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ICI2022_Init(&hi2c1, &huart2);
 8003200:	4a63      	ldr	r2, [pc, #396]	; (8003390 <main+0x1b8>)
 8003202:	4b64      	ldr	r3, [pc, #400]	; (8003394 <main+0x1bc>)
 8003204:	0011      	movs	r1, r2
 8003206:	0018      	movs	r0, r3
 8003208:	f7ff fd9c 	bl	8002d44 <ICI2022_Init>
  calc_rpm();
 800320c:	f7ff ff4c 	bl	80030a8 <calc_rpm>
  calc_periodos();
 8003210:	f7ff ff82 	bl	8003118 <calc_periodos>
  if(CANSPI_Initialize(CAN1))
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <main+0x1c0>)
 8003216:	0018      	movs	r0, r3
 8003218:	f007 fb4d 	bl	800a8b6 <CANSPI_Initialize>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d008      	beq.n	8003232 <main+0x5a>
  {
  if(CANSPI_Initialize(CAN2)) can_ok = true;
 8003220:	4b5e      	ldr	r3, [pc, #376]	; (800339c <main+0x1c4>)
 8003222:	0018      	movs	r0, r3
 8003224:	f007 fb47 	bl	800a8b6 <CANSPI_Initialize>
 8003228:	1e03      	subs	r3, r0, #0
 800322a:	d002      	beq.n	8003232 <main+0x5a>
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <main+0x1c8>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003232:	f00a fbd3 	bl	800d9dc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CanUart_mtx */
  CanUart_mtxHandle = osMutexNew(&CanUart_mtx_attributes);
 8003236:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <main+0x1cc>)
 8003238:	0018      	movs	r0, r3
 800323a:	f00a fd55 	bl	800dce8 <osMutexNew>
 800323e:	0002      	movs	r2, r0
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <main+0x1d0>)
 8003242:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Adc_Sem */
  Adc_SemHandle = osSemaphoreNew(1, 1, &Adc_Sem_attributes);
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <main+0x1d4>)
 8003246:	001a      	movs	r2, r3
 8003248:	2101      	movs	r1, #1
 800324a:	2001      	movs	r0, #1
 800324c:	f00a fe8c 	bl	800df68 <osSemaphoreNew>
 8003250:	0002      	movs	r2, r0
 8003252:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <main+0x1d8>)
 8003254:	601a      	str	r2, [r3, #0]

  /* creation of Tx_Sem */
  Tx_SemHandle = osSemaphoreNew(1, 1, &Tx_Sem_attributes);
 8003256:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <main+0x1dc>)
 8003258:	001a      	movs	r2, r3
 800325a:	2101      	movs	r1, #1
 800325c:	2001      	movs	r0, #1
 800325e:	f00a fe83 	bl	800df68 <osSemaphoreNew>
 8003262:	0002      	movs	r2, r0
 8003264:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <main+0x1e0>)
 8003266:	601a      	str	r2, [r3, #0]

  /* creation of Can_tx_sem */
  Can_tx_semHandle = osSemaphoreNew(1, 1, &Can_tx_sem_attributes);
 8003268:	4b54      	ldr	r3, [pc, #336]	; (80033bc <main+0x1e4>)
 800326a:	001a      	movs	r2, r3
 800326c:	2101      	movs	r1, #1
 800326e:	2001      	movs	r0, #1
 8003270:	f00a fe7a 	bl	800df68 <osSemaphoreNew>
 8003274:	0002      	movs	r2, r0
 8003276:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <main+0x1e8>)
 8003278:	601a      	str	r2, [r3, #0]

  /* creation of Can_rx_sem */
  Can_rx_semHandle = osSemaphoreNew(1, 1, &Can_rx_sem_attributes);
 800327a:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <main+0x1ec>)
 800327c:	001a      	movs	r2, r3
 800327e:	2101      	movs	r1, #1
 8003280:	2001      	movs	r0, #1
 8003282:	f00a fe71 	bl	800df68 <osSemaphoreNew>
 8003286:	0002      	movs	r2, r0
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <main+0x1f0>)
 800328a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
//  Rx_SemHandle = osSemaphoreNew(1, 0, &Rx_Sem_attributes);
  Can_rx_semHandle = osSemaphoreNew(1, 0, &Can_rx_sem_attributes);
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <main+0x1ec>)
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	2001      	movs	r0, #1
 8003294:	f00a fe68 	bl	800df68 <osSemaphoreNew>
 8003298:	0002      	movs	r2, r0
 800329a:	4b4b      	ldr	r3, [pc, #300]	; (80033c8 <main+0x1f0>)
 800329c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of lock_queue */
  lock_queueHandle = osMessageQueueNew (5, sizeof(lock_q), &lock_queue_attributes);
 800329e:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <main+0x1f4>)
 80032a0:	001a      	movs	r2, r3
 80032a2:	2104      	movs	r1, #4
 80032a4:	2005      	movs	r0, #5
 80032a6:	f00a ffad 	bl	800e204 <osMessageQueueNew>
 80032aa:	0002      	movs	r2, r0
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <main+0x1f8>)
 80032ae:	601a      	str	r2, [r3, #0]

  /* creation of rx_queue */
  rx_queueHandle = osMessageQueueNew (40, sizeof(uint8_t), &rx_queue_attributes);
 80032b0:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <main+0x1fc>)
 80032b2:	001a      	movs	r2, r3
 80032b4:	2101      	movs	r1, #1
 80032b6:	2028      	movs	r0, #40	; 0x28
 80032b8:	f00a ffa4 	bl	800e204 <osMessageQueueNew>
 80032bc:	0002      	movs	r2, r0
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <main+0x200>)
 80032c0:	601a      	str	r2, [r3, #0]

  /* creation of can_queue */
  can_queueHandle = osMessageQueueNew (5, sizeof(uCAN_MSG), &can_queue_attributes);
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <main+0x204>)
 80032c4:	001a      	movs	r2, r3
 80032c6:	2114      	movs	r1, #20
 80032c8:	2005      	movs	r0, #5
 80032ca:	f00a ff9b 	bl	800e204 <osMessageQueueNew>
 80032ce:	0002      	movs	r2, r0
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <main+0x208>)
 80032d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032d4:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <main+0x20c>)
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <main+0x210>)
 80032d8:	2100      	movs	r1, #0
 80032da:	0018      	movs	r0, r3
 80032dc:	f00a fbd8 	bl	800da90 <osThreadNew>
 80032e0:	0002      	movs	r2, r0
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <main+0x214>)
 80032e4:	601a      	str	r2, [r3, #0]

  /* creation of OLED */
  OLEDHandle = osThreadNew(oled_update, NULL, &OLED_attributes);
 80032e6:	4a42      	ldr	r2, [pc, #264]	; (80033f0 <main+0x218>)
 80032e8:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <main+0x21c>)
 80032ea:	2100      	movs	r1, #0
 80032ec:	0018      	movs	r0, r3
 80032ee:	f00a fbcf 	bl	800da90 <osThreadNew>
 80032f2:	0002      	movs	r2, r0
 80032f4:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <main+0x220>)
 80032f6:	601a      	str	r2, [r3, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(adc_read, NULL, &ADC_attributes);
 80032f8:	4a40      	ldr	r2, [pc, #256]	; (80033fc <main+0x224>)
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <main+0x228>)
 80032fc:	2100      	movs	r1, #0
 80032fe:	0018      	movs	r0, r3
 8003300:	f00a fbc6 	bl	800da90 <osThreadNew>
 8003304:	0002      	movs	r2, r0
 8003306:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <main+0x22c>)
 8003308:	601a      	str	r2, [r3, #0]

  /* creation of SERVO */
  SERVOHandle = osThreadNew(servo_pos, NULL, &SERVO_attributes);
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <main+0x230>)
 800330c:	4b3f      	ldr	r3, [pc, #252]	; (800340c <main+0x234>)
 800330e:	2100      	movs	r1, #0
 8003310:	0018      	movs	r0, r3
 8003312:	f00a fbbd 	bl	800da90 <osThreadNew>
 8003316:	0002      	movs	r2, r0
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <main+0x238>)
 800331a:	601a      	str	r2, [r3, #0]

  /* creation of STEPPER */
  STEPPERHandle = osThreadNew(stepper_fx, NULL, &STEPPER_attributes);
 800331c:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <main+0x23c>)
 800331e:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <main+0x240>)
 8003320:	2100      	movs	r1, #0
 8003322:	0018      	movs	r0, r3
 8003324:	f00a fbb4 	bl	800da90 <osThreadNew>
 8003328:	0002      	movs	r2, r0
 800332a:	4b3c      	ldr	r3, [pc, #240]	; (800341c <main+0x244>)
 800332c:	601a      	str	r2, [r3, #0]

  /* creation of UART_RX */
  UART_RXHandle = osThreadNew(receive, NULL, &UART_RX_attributes);
 800332e:	4a3c      	ldr	r2, [pc, #240]	; (8003420 <main+0x248>)
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <main+0x24c>)
 8003332:	2100      	movs	r1, #0
 8003334:	0018      	movs	r0, r3
 8003336:	f00a fbab 	bl	800da90 <osThreadNew>
 800333a:	0002      	movs	r2, r0
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <main+0x250>)
 800333e:	601a      	str	r2, [r3, #0]

  /* creation of LOCK */
  LOCKHandle = osThreadNew(servo_lock, NULL, &LOCK_attributes);
 8003340:	4a3a      	ldr	r2, [pc, #232]	; (800342c <main+0x254>)
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <main+0x258>)
 8003344:	2100      	movs	r1, #0
 8003346:	0018      	movs	r0, r3
 8003348:	f00a fba2 	bl	800da90 <osThreadNew>
 800334c:	0002      	movs	r2, r0
 800334e:	4b39      	ldr	r3, [pc, #228]	; (8003434 <main+0x25c>)
 8003350:	601a      	str	r2, [r3, #0]

  /* creation of UART_TX */
  UART_TXHandle = osThreadNew(transmit, NULL, &UART_TX_attributes);
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <main+0x260>)
 8003354:	4b39      	ldr	r3, [pc, #228]	; (800343c <main+0x264>)
 8003356:	2100      	movs	r1, #0
 8003358:	0018      	movs	r0, r3
 800335a:	f00a fb99 	bl	800da90 <osThreadNew>
 800335e:	0002      	movs	r2, r0
 8003360:	4b37      	ldr	r3, [pc, #220]	; (8003440 <main+0x268>)
 8003362:	601a      	str	r2, [r3, #0]

  /* creation of CAN_RX */
  CAN_RXHandle = osThreadNew(can_receive, NULL, &CAN_RX_attributes);
 8003364:	4a37      	ldr	r2, [pc, #220]	; (8003444 <main+0x26c>)
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <main+0x270>)
 8003368:	2100      	movs	r1, #0
 800336a:	0018      	movs	r0, r3
 800336c:	f00a fb90 	bl	800da90 <osThreadNew>
 8003370:	0002      	movs	r2, r0
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <main+0x274>)
 8003374:	601a      	str	r2, [r3, #0]

  /* creation of CAN_TX */
  CAN_TXHandle = osThreadNew(can_transmit, NULL, &CAN_TX_attributes);
 8003376:	4a36      	ldr	r2, [pc, #216]	; (8003450 <main+0x278>)
 8003378:	4b36      	ldr	r3, [pc, #216]	; (8003454 <main+0x27c>)
 800337a:	2100      	movs	r1, #0
 800337c:	0018      	movs	r0, r3
 800337e:	f00a fb87 	bl	800da90 <osThreadNew>
 8003382:	0002      	movs	r2, r0
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <main+0x280>)
 8003386:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003388:	f00a fb54 	bl	800da34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800338c:	e7fe      	b.n	800338c <main+0x1b4>
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000484 	.word	0x20000484
 8003394:	20000328 	.word	0x20000328
 8003398:	20000374 	.word	0x20000374
 800339c:	200003d8 	.word	0x200003d8
 80033a0:	200005f0 	.word	0x200005f0
 80033a4:	08015ba8 	.word	0x08015ba8
 80033a8:	2000053c 	.word	0x2000053c
 80033ac:	08015bb8 	.word	0x08015bb8
 80033b0:	20000540 	.word	0x20000540
 80033b4:	08015bc8 	.word	0x08015bc8
 80033b8:	20000544 	.word	0x20000544
 80033bc:	08015bd8 	.word	0x08015bd8
 80033c0:	20000548 	.word	0x20000548
 80033c4:	08015be8 	.word	0x08015be8
 80033c8:	2000054c 	.word	0x2000054c
 80033cc:	08015b60 	.word	0x08015b60
 80033d0:	20000530 	.word	0x20000530
 80033d4:	08015b78 	.word	0x08015b78
 80033d8:	20000534 	.word	0x20000534
 80033dc:	08015b90 	.word	0x08015b90
 80033e0:	20000538 	.word	0x20000538
 80033e4:	080159f8 	.word	0x080159f8
 80033e8:	08003bb9 	.word	0x08003bb9
 80033ec:	20000508 	.word	0x20000508
 80033f0:	08015a1c 	.word	0x08015a1c
 80033f4:	08003bcd 	.word	0x08003bcd
 80033f8:	2000050c 	.word	0x2000050c
 80033fc:	08015a40 	.word	0x08015a40
 8003400:	08003f59 	.word	0x08003f59
 8003404:	20000510 	.word	0x20000510
 8003408:	08015a64 	.word	0x08015a64
 800340c:	08003f91 	.word	0x08003f91
 8003410:	20000514 	.word	0x20000514
 8003414:	08015a88 	.word	0x08015a88
 8003418:	08003fd5 	.word	0x08003fd5
 800341c:	20000518 	.word	0x20000518
 8003420:	08015aac 	.word	0x08015aac
 8003424:	0800409d 	.word	0x0800409d
 8003428:	2000051c 	.word	0x2000051c
 800342c:	08015ad0 	.word	0x08015ad0
 8003430:	080043a5 	.word	0x080043a5
 8003434:	20000520 	.word	0x20000520
 8003438:	08015af4 	.word	0x08015af4
 800343c:	080044bd 	.word	0x080044bd
 8003440:	20000524 	.word	0x20000524
 8003444:	08015b18 	.word	0x08015b18
 8003448:	08004801 	.word	0x08004801
 800344c:	20000528 	.word	0x20000528
 8003450:	08015b3c 	.word	0x08015b3c
 8003454:	08004939 	.word	0x08004939
 8003458:	2000052c 	.word	0x2000052c

0800345c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b097      	sub	sp, #92	; 0x5c
 8003460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003462:	2428      	movs	r4, #40	; 0x28
 8003464:	193b      	adds	r3, r7, r4
 8003466:	0018      	movs	r0, r3
 8003468:	2330      	movs	r3, #48	; 0x30
 800346a:	001a      	movs	r2, r3
 800346c:	2100      	movs	r1, #0
 800346e:	f00d ffe5 	bl	801143c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003472:	2318      	movs	r3, #24
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	0018      	movs	r0, r3
 8003478:	2310      	movs	r3, #16
 800347a:	001a      	movs	r2, r3
 800347c:	2100      	movs	r1, #0
 800347e:	f00d ffdd 	bl	801143c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	0018      	movs	r0, r3
 8003486:	2314      	movs	r3, #20
 8003488:	001a      	movs	r2, r3
 800348a:	2100      	movs	r1, #0
 800348c:	f00d ffd6 	bl	801143c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8003490:	0021      	movs	r1, r4
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2212      	movs	r2, #18
 8003496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003498:	187b      	adds	r3, r7, r1
 800349a:	2201      	movs	r2, #1
 800349c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	2201      	movs	r2, #1
 80034a2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	2210      	movs	r2, #16
 80034a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2210      	movs	r2, #16
 80034ae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	2202      	movs	r2, #2
 80034b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034b6:	187b      	adds	r3, r7, r1
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	0212      	lsls	r2, r2, #8
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0352      	lsls	r2, r2, #13
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	2200      	movs	r2, #0
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	0018      	movs	r0, r3
 80034d0:	f003 fa9a 	bl	8006a08 <HAL_RCC_OscConfig>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80034d8:	f001 fa68 	bl	80049ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034dc:	2118      	movs	r1, #24
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	2202      	movs	r2, #2
 80034e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034f0:	187b      	adds	r3, r7, r1
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80034f6:	187b      	adds	r3, r7, r1
 80034f8:	2101      	movs	r1, #1
 80034fa:	0018      	movs	r0, r3
 80034fc:	f003 fda2 	bl	8007044 <HAL_RCC_ClockConfig>
 8003500:	1e03      	subs	r3, r0, #0
 8003502:	d001      	beq.n	8003508 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003504:	f001 fa52 	bl	80049ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	2220      	movs	r2, #32
 800350c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2200      	movs	r2, #0
 8003512:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	0018      	movs	r0, r3
 8003518:	f003 ff12 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003520:	f001 fa44 	bl	80049ac <Error_Handler>
  }
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b017      	add	sp, #92	; 0x5c
 800352a:	bd90      	pop	{r4, r7, pc}

0800352c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	0018      	movs	r0, r3
 8003536:	230c      	movs	r3, #12
 8003538:	001a      	movs	r2, r3
 800353a:	2100      	movs	r1, #0
 800353c:	f00d ff7e 	bl	801143c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <MX_ADC_Init+0xcc>)
 8003544:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <MX_ADC_Init+0xc8>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <MX_ADC_Init+0xc8>)
 800355a:	2201      	movs	r2, #1
 800355c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003560:	2204      	movs	r2, #4
 8003562:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003566:	2200      	movs	r2, #0
 8003568:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <MX_ADC_Init+0xc8>)
 800356c:	2200      	movs	r2, #0
 800356e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003572:	2200      	movs	r2, #0
 8003574:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003578:	2201      	movs	r2, #1
 800357a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <MX_ADC_Init+0xc8>)
 800357e:	22c2      	movs	r2, #194	; 0xc2
 8003580:	32ff      	adds	r2, #255	; 0xff
 8003582:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800358a:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_ADC_Init+0xc8>)
 800358c:	2224      	movs	r2, #36	; 0x24
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <MX_ADC_Init+0xc8>)
 8003594:	2201      	movs	r2, #1
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <MX_ADC_Init+0xc8>)
 800359a:	0018      	movs	r0, r3
 800359c:	f001 fdee 	bl	800517c <HAL_ADC_Init>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d001      	beq.n	80035a8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80035a4:	f001 fa02 	bl	80049ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	2280      	movs	r2, #128	; 0x80
 80035b2:	0152      	lsls	r2, r2, #5
 80035b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2202      	movs	r2, #2
 80035ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035bc:	1d3a      	adds	r2, r7, #4
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <MX_ADC_Init+0xc8>)
 80035c0:	0011      	movs	r1, r2
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 f8aa 	bl	800571c <HAL_ADC_ConfigChannel>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80035cc:	f001 f9ee 	bl	80049ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80035d0:	1d3b      	adds	r3, r7, #4
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035d6:	1d3a      	adds	r2, r7, #4
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <MX_ADC_Init+0xc8>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f002 f89d 	bl	800571c <HAL_ADC_ConfigChannel>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d001      	beq.n	80035ea <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80035e6:	f001 f9e1 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b004      	add	sp, #16
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	200002e8 	.word	0x200002e8
 80035f8:	40012400 	.word	0x40012400

080035fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <MX_I2C1_Init+0x74>)
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <MX_I2C1_Init+0x78>)
 8003604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <MX_I2C1_Init+0x74>)
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <MX_I2C1_Init+0x7c>)
 800360a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <MX_I2C1_Init+0x74>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003612:	4b17      	ldr	r3, [pc, #92]	; (8003670 <MX_I2C1_Init+0x74>)
 8003614:	2201      	movs	r2, #1
 8003616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <MX_I2C1_Init+0x74>)
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <MX_I2C1_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <MX_I2C1_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <MX_I2C1_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <MX_I2C1_Init+0x74>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <MX_I2C1_Init+0x74>)
 8003638:	0018      	movs	r0, r3
 800363a:	f002 fe23 	bl	8006284 <HAL_I2C_Init>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003642:	f001 f9b3 	bl	80049ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <MX_I2C1_Init+0x74>)
 8003648:	2100      	movs	r1, #0
 800364a:	0018      	movs	r0, r3
 800364c:	f003 f944 	bl	80068d8 <HAL_I2CEx_ConfigAnalogFilter>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d001      	beq.n	8003658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003654:	f001 f9aa 	bl	80049ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <MX_I2C1_Init+0x74>)
 800365a:	2100      	movs	r1, #0
 800365c:	0018      	movs	r0, r3
 800365e:	f003 f987 	bl	8006970 <HAL_I2CEx_ConfigDigitalFilter>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d001      	beq.n	800366a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003666:	f001 f9a1 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000328 	.word	0x20000328
 8003674:	40005400 	.word	0x40005400
 8003678:	0000020b 	.word	0x0000020b

0800367c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <MX_SPI1_Init+0x74>)
 8003682:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <MX_SPI1_Init+0x78>)
 8003684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <MX_SPI1_Init+0x74>)
 8003688:	2282      	movs	r2, #130	; 0x82
 800368a:	0052      	lsls	r2, r2, #1
 800368c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <MX_SPI1_Init+0x74>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <MX_SPI1_Init+0x74>)
 8003696:	22e0      	movs	r2, #224	; 0xe0
 8003698:	00d2      	lsls	r2, r2, #3
 800369a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <MX_SPI1_Init+0x74>)
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036ca:	2207      	movs	r2, #7
 80036cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <MX_SPI1_Init+0x74>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f003 ff0d 	bl	80074fc <HAL_SPI_Init>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80036e6:	f001 f961 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000374 	.word	0x20000374
 80036f4:	40013000 	.word	0x40013000

080036f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036fc:	4b1b      	ldr	r3, [pc, #108]	; (800376c <MX_SPI2_Init+0x74>)
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <MX_SPI2_Init+0x78>)
 8003700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <MX_SPI2_Init+0x74>)
 8003704:	2282      	movs	r2, #130	; 0x82
 8003706:	0052      	lsls	r2, r2, #1
 8003708:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <MX_SPI2_Init+0x74>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <MX_SPI2_Init+0x74>)
 8003712:	22e0      	movs	r2, #224	; 0xe0
 8003714:	00d2      	lsls	r2, r2, #3
 8003716:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <MX_SPI2_Init+0x74>)
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800371e:	4b13      	ldr	r3, [pc, #76]	; (800376c <MX_SPI2_Init+0x74>)
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <MX_SPI2_Init+0x74>)
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <MX_SPI2_Init+0x74>)
 800372e:	2220      	movs	r2, #32
 8003730:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <MX_SPI2_Init+0x74>)
 8003734:	2200      	movs	r2, #0
 8003736:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <MX_SPI2_Init+0x74>)
 800373a:	2200      	movs	r2, #0
 800373c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <MX_SPI2_Init+0x74>)
 8003740:	2200      	movs	r2, #0
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <MX_SPI2_Init+0x74>)
 8003746:	2207      	movs	r2, #7
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <MX_SPI2_Init+0x74>)
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <MX_SPI2_Init+0x74>)
 8003752:	2200      	movs	r2, #0
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <MX_SPI2_Init+0x74>)
 8003758:	0018      	movs	r0, r3
 800375a:	f003 fecf 	bl	80074fc <HAL_SPI_Init>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d001      	beq.n	8003766 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003762:	f001 f923 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200003d8 	.word	0x200003d8
 8003770:	40003800 	.word	0x40003800

08003774 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08e      	sub	sp, #56	; 0x38
 8003778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800377a:	2328      	movs	r3, #40	; 0x28
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	0018      	movs	r0, r3
 8003780:	2310      	movs	r3, #16
 8003782:	001a      	movs	r2, r3
 8003784:	2100      	movs	r1, #0
 8003786:	f00d fe59 	bl	801143c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378a:	2320      	movs	r3, #32
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	0018      	movs	r0, r3
 8003790:	2308      	movs	r3, #8
 8003792:	001a      	movs	r2, r3
 8003794:	2100      	movs	r1, #0
 8003796:	f00d fe51 	bl	801143c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	0018      	movs	r0, r3
 800379e:	231c      	movs	r3, #28
 80037a0:	001a      	movs	r2, r3
 80037a2:	2100      	movs	r1, #0
 80037a4:	f00d fe4a 	bl	801143c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <MX_TIM3_Init+0xf8>)
 80037aa:	4a31      	ldr	r2, [pc, #196]	; (8003870 <MX_TIM3_Init+0xfc>)
 80037ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 480-1;
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <MX_TIM3_Init+0xf8>)
 80037b0:	22e0      	movs	r2, #224	; 0xe0
 80037b2:	32ff      	adds	r2, #255	; 0xff
 80037b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <MX_TIM3_Init+0xf8>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80037bc:	4b2b      	ldr	r3, [pc, #172]	; (800386c <MX_TIM3_Init+0xf8>)
 80037be:	4a2d      	ldr	r2, [pc, #180]	; (8003874 <MX_TIM3_Init+0x100>)
 80037c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <MX_TIM3_Init+0xf8>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c8:	4b28      	ldr	r3, [pc, #160]	; (800386c <MX_TIM3_Init+0xf8>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <MX_TIM3_Init+0xf8>)
 80037d0:	0018      	movs	r0, r3
 80037d2:	f004 fda1 	bl	8008318 <HAL_TIM_Base_Init>
 80037d6:	1e03      	subs	r3, r0, #0
 80037d8:	d001      	beq.n	80037de <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80037da:	f001 f8e7 	bl	80049ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037de:	2128      	movs	r1, #40	; 0x28
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	2280      	movs	r2, #128	; 0x80
 80037e4:	0152      	lsls	r2, r2, #5
 80037e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80037e8:	187a      	adds	r2, r7, r1
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <MX_TIM3_Init+0xf8>)
 80037ec:	0011      	movs	r1, r2
 80037ee:	0018      	movs	r0, r3
 80037f0:	f005 f914 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80037f8:	f001 f8d8 	bl	80049ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <MX_TIM3_Init+0xf8>)
 80037fe:	0018      	movs	r0, r3
 8003800:	f004 fe26 	bl	8008450 <HAL_TIM_PWM_Init>
 8003804:	1e03      	subs	r3, r0, #0
 8003806:	d001      	beq.n	800380c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003808:	f001 f8d0 	bl	80049ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380c:	2120      	movs	r1, #32
 800380e:	187b      	adds	r3, r7, r1
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003814:	187b      	adds	r3, r7, r1
 8003816:	2200      	movs	r2, #0
 8003818:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800381a:	187a      	adds	r2, r7, r1
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <MX_TIM3_Init+0xf8>)
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f005 fd1f 	bl	8009264 <HAL_TIMEx_MasterConfigSynchronization>
 8003826:	1e03      	subs	r3, r0, #0
 8003828:	d001      	beq.n	800382e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800382a:	f001 f8bf 	bl	80049ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2260      	movs	r2, #96	; 0x60
 8003832:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800383a:	1d3b      	adds	r3, r7, #4
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003846:	1d39      	adds	r1, r7, #4
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <MX_TIM3_Init+0xf8>)
 800384a:	2204      	movs	r2, #4
 800384c:	0018      	movs	r0, r3
 800384e:	f005 f81f 	bl	8008890 <HAL_TIM_PWM_ConfigChannel>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d001      	beq.n	800385a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003856:	f001 f8a9 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <MX_TIM3_Init+0xf8>)
 800385c:	0018      	movs	r0, r3
 800385e:	f001 fa19 	bl	8004c94 <HAL_TIM_MspPostInit>

}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b00e      	add	sp, #56	; 0x38
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	2000043c 	.word	0x2000043c
 8003870:	40000400 	.word	0x40000400
 8003874:	000007cf 	.word	0x000007cf

08003878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <MX_USART2_UART_Init+0x5c>)
 8003880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 8003884:	2296      	movs	r2, #150	; 0x96
 8003886:	0212      	lsls	r2, r2, #8
 8003888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <MX_USART2_UART_Init+0x58>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f005 fd39 	bl	8009334 <HAL_UART_Init>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038c6:	f001 f871 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000484 	.word	0x20000484
 80038d4:	40004400 	.word	0x40004400

080038d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b08b      	sub	sp, #44	; 0x2c
 80038dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038de:	2414      	movs	r4, #20
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	0018      	movs	r0, r3
 80038e4:	2314      	movs	r3, #20
 80038e6:	001a      	movs	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	f00d fda7 	bl	801143c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <MX_GPIO_Init+0x114>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <MX_GPIO_Init+0x114>)
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	0309      	lsls	r1, r1, #12
 80038f8:	430a      	orrs	r2, r1
 80038fa:	615a      	str	r2, [r3, #20]
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <MX_GPIO_Init+0x114>)
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	031b      	lsls	r3, r3, #12
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <MX_GPIO_Init+0x114>)
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	4b37      	ldr	r3, [pc, #220]	; (80039ec <MX_GPIO_Init+0x114>)
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	03c9      	lsls	r1, r1, #15
 8003914:	430a      	orrs	r2, r1
 8003916:	615a      	str	r2, [r3, #20]
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <MX_GPIO_Init+0x114>)
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	03db      	lsls	r3, r3, #15
 8003920:	4013      	ands	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <MX_GPIO_Init+0x114>)
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <MX_GPIO_Init+0x114>)
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	0289      	lsls	r1, r1, #10
 8003930:	430a      	orrs	r2, r1
 8003932:	615a      	str	r2, [r3, #20]
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <MX_GPIO_Init+0x114>)
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <MX_GPIO_Init+0x114>)
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <MX_GPIO_Init+0x114>)
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	02c9      	lsls	r1, r1, #11
 800394c:	430a      	orrs	r2, r1
 800394e:	615a      	str	r2, [r3, #20]
 8003950:	4b26      	ldr	r3, [pc, #152]	; (80039ec <MX_GPIO_Init+0x114>)
 8003952:	695a      	ldr	r2, [r3, #20]
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	02db      	lsls	r3, r3, #11
 8003958:	4013      	ands	r3, r2
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_4_Pin|CAN2_CS_Pin|STEPPER_1_Pin|STEPPER_3_Pin
 800395e:	4924      	ldr	r1, [pc, #144]	; (80039f0 <MX_GPIO_Init+0x118>)
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <MX_GPIO_Init+0x11c>)
 8003962:	2200      	movs	r2, #0
 8003964:	0018      	movs	r0, r3
 8003966:	f002 fc53 	bl	8006210 <HAL_GPIO_WritePin>
                          |STEPPER_2_Pin|CAN1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin Ican2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Ican2_Pin;
 800396a:	193b      	adds	r3, r7, r4
 800396c:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <MX_GPIO_Init+0x120>)
 800396e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003970:	193b      	adds	r3, r7, r4
 8003972:	2284      	movs	r2, #132	; 0x84
 8003974:	0392      	lsls	r2, r2, #14
 8003976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	193b      	adds	r3, r7, r4
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	193b      	adds	r3, r7, r4
 8003980:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <MX_GPIO_Init+0x124>)
 8003982:	0019      	movs	r1, r3
 8003984:	0010      	movs	r0, r2
 8003986:	f002 fad3 	bl	8005f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : STEPPER_4_Pin CAN2_CS_Pin STEPPER_1_Pin STEPPER_3_Pin
                           STEPPER_2_Pin CAN1_CS_Pin */
  GPIO_InitStruct.Pin = STEPPER_4_Pin|CAN2_CS_Pin|STEPPER_1_Pin|STEPPER_3_Pin
 800398a:	193b      	adds	r3, r7, r4
 800398c:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <MX_GPIO_Init+0x118>)
 800398e:	601a      	str	r2, [r3, #0]
                          |STEPPER_2_Pin|CAN1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003990:	193b      	adds	r3, r7, r4
 8003992:	2201      	movs	r2, #1
 8003994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	193b      	adds	r3, r7, r4
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	193b      	adds	r3, r7, r4
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <MX_GPIO_Init+0x11c>)
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f002 fac1 	bl	8005f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ican1_Pin */
  GPIO_InitStruct.Pin = Ican1_Pin;
 80039ae:	0021      	movs	r1, r4
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2280      	movs	r2, #128	; 0x80
 80039b4:	00d2      	lsls	r2, r2, #3
 80039b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	2284      	movs	r2, #132	; 0x84
 80039bc:	0392      	lsls	r2, r2, #14
 80039be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ican1_GPIO_Port, &GPIO_InitStruct);
 80039c6:	187a      	adds	r2, r7, r1
 80039c8:	2390      	movs	r3, #144	; 0x90
 80039ca:	05db      	lsls	r3, r3, #23
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f002 faae 	bl	8005f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2103      	movs	r1, #3
 80039d8:	2007      	movs	r0, #7
 80039da:	f002 fa07 	bl	8005dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80039de:	2007      	movs	r0, #7
 80039e0:	f002 fa19 	bl	8005e16 <HAL_NVIC_EnableIRQ>

}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b00b      	add	sp, #44	; 0x2c
 80039ea:	bd90      	pop	{r4, r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	00001478 	.word	0x00001478
 80039f4:	48000400 	.word	0x48000400
 80039f8:	00002010 	.word	0x00002010
 80039fc:	48000800 	.word	0x48000800

08003a00 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	if(adc_value.first_conv)
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d038      	beq.n	8003a82 <HAL_ADC_ConvCpltCallback+0x82>
	{
		adc_value.adc_ch0 = HAL_ADC_GetValue(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f001 fdae 	bl	8005574 <HAL_ADC_GetValue>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a1e:	801a      	strh	r2, [r3, #0]
		adc_value.temp = (adc_value.adc_ch0/4096.0) * 3.3;
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fe ff5f 	bl	80028e8 <__aeabi_i2d>
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_ADC_ConvCpltCallback+0x100>)
 8003a2e:	f7fd fd07 	bl	8001440 <__aeabi_ddiv>
 8003a32:	0002      	movs	r2, r0
 8003a34:	000b      	movs	r3, r1
 8003a36:	0010      	movs	r0, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	4a32      	ldr	r2, [pc, #200]	; (8003b04 <HAL_ADC_ConvCpltCallback+0x104>)
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_ADC_ConvCpltCallback+0x108>)
 8003a3e:	f7fe f901 	bl	8001c44 <__aeabi_dmul>
 8003a42:	0002      	movs	r2, r0
 8003a44:	000b      	movs	r3, r1
 8003a46:	0010      	movs	r0, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	f7fe ffeb 	bl	8002a24 <__aeabi_d2f>
 8003a4e:	1c02      	adds	r2, r0, #0
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a52:	605a      	str	r2, [r3, #4]
		adc_value.temp = adc_value.temp/0.01;
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	1c18      	adds	r0, r3, #0
 8003a5a:	f7fe ff9b 	bl	8002994 <__aeabi_f2d>
 8003a5e:	4a2b      	ldr	r2, [pc, #172]	; (8003b0c <HAL_ADC_ConvCpltCallback+0x10c>)
 8003a60:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <HAL_ADC_ConvCpltCallback+0x110>)
 8003a62:	f7fd fced 	bl	8001440 <__aeabi_ddiv>
 8003a66:	0002      	movs	r2, r0
 8003a68:	000b      	movs	r3, r1
 8003a6a:	0010      	movs	r0, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	f7fe ffd9 	bl	8002a24 <__aeabi_d2f>
 8003a72:	1c02      	adds	r2, r0, #0
 8003a74:	4b21      	ldr	r3, [pc, #132]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a76:	605a      	str	r2, [r3, #4]
		HAL_ADC_Start_IT(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f001 fcbe 	bl	80053fc <HAL_ADC_Start_IT>
 8003a80:	e02a      	b.n	8003ad8 <HAL_ADC_ConvCpltCallback+0xd8>

	}
	else
	{
		adc_value.adc_ch1 = HAL_ADC_GetValue(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f001 fd75 	bl	8005574 <HAL_ADC_GetValue>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a90:	805a      	strh	r2, [r3, #2]
		adc_value.pot = (adc_value.adc_ch1/4096.0) * 3.3;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003a94:	885b      	ldrh	r3, [r3, #2]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fe ff26 	bl	80028e8 <__aeabi_i2d>
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <HAL_ADC_ConvCpltCallback+0x100>)
 8003aa0:	f7fd fcce 	bl	8001440 <__aeabi_ddiv>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	000b      	movs	r3, r1
 8003aa8:	0010      	movs	r0, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <HAL_ADC_ConvCpltCallback+0x104>)
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_ADC_ConvCpltCallback+0x108>)
 8003ab0:	f7fe f8c8 	bl	8001c44 <__aeabi_dmul>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	000b      	movs	r3, r1
 8003ab8:	0010      	movs	r0, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	f7fe ffb2 	bl	8002a24 <__aeabi_d2f>
 8003ac0:	1c02      	adds	r2, r0, #0
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003ac4:	609a      	str	r2, [r3, #8]
		osSemaphoreRelease(Adc_SemHandle);
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_ADC_ConvCpltCallback+0x114>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f00a fb4c 	bl	800e168 <osSemaphoreRelease>
		HAL_ADC_Stop_IT(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f001 fd04 	bl	80054e0 <HAL_ADC_Stop_IT>
	}
	adc_value.first_conv = !adc_value.first_conv;
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003ada:	7b1b      	ldrb	r3, [r3, #12]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	4193      	sbcs	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4053      	eors	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	1c1a      	adds	r2, r3, #0
 8003aea:	2301      	movs	r3, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_ADC_ConvCpltCallback+0xfc>)
 8003af2:	731a      	strb	r2, [r3, #12]

}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20000000 	.word	0x20000000
 8003b00:	40b00000 	.word	0x40b00000
 8003b04:	66666666 	.word	0x66666666
 8003b08:	400a6666 	.word	0x400a6666
 8003b0c:	47ae147b 	.word	0x47ae147b
 8003b10:	3f847ae1 	.word	0x3f847ae1
 8003b14:	20000540 	.word	0x20000540

08003b18 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	000a      	movs	r2, r1
 8003b22:	1cbb      	adds	r3, r7, #2
 8003b24:	801a      	strh	r2, [r3, #0]
	osMessageQueuePut(rx_queueHandle, buf, 0L, 0);
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_UARTEx_RxEventCallback+0x30>)
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	4908      	ldr	r1, [pc, #32]	; (8003b4c <HAL_UARTEx_RxEventCallback+0x34>)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f00a fbee 	bl	800e310 <osMessageQueuePut>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 4);
 8003b34:	4905      	ldr	r1, [pc, #20]	; (8003b4c <HAL_UARTEx_RxEventCallback+0x34>)
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_UARTEx_RxEventCallback+0x38>)
 8003b38:	2204      	movs	r2, #4
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f006 fe2a 	bl	800a794 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000534 	.word	0x20000534
 8003b4c:	20000554 	.word	0x20000554
 8003b50:	20000484 	.word	0x20000484

08003b54 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(Tx_SemHandle);
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <HAL_UART_TxCpltCallback+0x1c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f00a fb01 	bl	800e168 <osSemaphoreRelease>
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	20000544 	.word	0x20000544

08003b74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	1dbb      	adds	r3, r7, #6
 8003b7e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == Ican1_Pin) osSemaphoreRelease(Can_tx_semHandle);
 8003b80:	1dbb      	adds	r3, r7, #6
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d104      	bne.n	8003b96 <HAL_GPIO_EXTI_Callback+0x22>
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f00a fae9 	bl	800e168 <osSemaphoreRelease>

	if(GPIO_Pin == Ican2_Pin) osSemaphoreRelease(Can_rx_semHandle);
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d104      	bne.n	8003ba8 <HAL_GPIO_EXTI_Callback+0x34>
 8003b9e:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_GPIO_EXTI_Callback+0x40>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f00a fae0 	bl	800e168 <osSemaphoreRelease>
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000548 	.word	0x20000548
 8003bb4:	2000054c 	.word	0x2000054c

08003bb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 8003bc0:	23fa      	movs	r3, #250	; 0xfa
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f00a f867 	bl	800dc98 <osDelay>
 8003bca:	e7f9      	b.n	8003bc0 <StartDefaultTask+0x8>

08003bcc <oled_update>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_update */
void oled_update(void *argument)
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
			.start_y = 0,
			.end_x = 0,
			.end_y = 0,
			.angle = 45 };

	u8g2_Setup_ssd1306_i2c_128x64_noname_2(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_stm32_gpio_and_delay);
 8003bd4:	4bc6      	ldr	r3, [pc, #792]	; (8003ef0 <oled_update+0x324>)
 8003bd6:	4ac7      	ldr	r2, [pc, #796]	; (8003ef4 <oled_update+0x328>)
 8003bd8:	49c7      	ldr	r1, [pc, #796]	; (8003ef8 <oled_update+0x32c>)
 8003bda:	48c8      	ldr	r0, [pc, #800]	; (8003efc <oled_update+0x330>)
 8003bdc:	f007 fdd8 	bl	800b790 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>
	u8g2_SetI2CAddress(&u8g2, OLED_ADDR);	// 0x78
 8003be0:	4bc6      	ldr	r3, [pc, #792]	; (8003efc <oled_update+0x330>)
 8003be2:	2224      	movs	r2, #36	; 0x24
 8003be4:	2178      	movs	r1, #120	; 0x78
 8003be6:	5499      	strb	r1, [r3, r2]
	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 8003be8:	4bc4      	ldr	r3, [pc, #784]	; (8003efc <oled_update+0x330>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f009 fe4b 	bl	800d886 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8003bf0:	4bc2      	ldr	r3, [pc, #776]	; (8003efc <oled_update+0x330>)
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f009 fe55 	bl	800d8a4 <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 8003bfa:	4ac1      	ldr	r2, [pc, #772]	; (8003f00 <oled_update+0x334>)
 8003bfc:	4bbf      	ldr	r3, [pc, #764]	; (8003efc <oled_update+0x330>)
 8003bfe:	0011      	movs	r1, r2
 8003c00:	0018      	movs	r0, r3
 8003c02:	f008 fd0b 	bl	800c61c <u8g2_SetFont>
  /* Infinite loop */
	for(;;)
	{
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 8003c06:	4bbf      	ldr	r3, [pc, #764]	; (8003f04 <oled_update+0x338>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c0c:	233c      	movs	r3, #60	; 0x3c
 8003c0e:	33ff      	adds	r3, #255	; 0xff
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	232d      	movs	r3, #45	; 0x2d
 8003c14:	22c7      	movs	r2, #199	; 0xc7
 8003c16:	2163      	movs	r1, #99	; 0x63
 8003c18:	f7ff f92e 	bl	8002e78 <map>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	001a      	movs	r2, r3
 8003c20:	4bb9      	ldr	r3, [pc, #740]	; (8003f08 <oled_update+0x33c>)
 8003c22:	621a      	str	r2, [r3, #32]
		right.angle = map(rpm[periodo-2], 0, 15, 45, 270+45);
 8003c24:	4bb9      	ldr	r3, [pc, #740]	; (8003f0c <oled_update+0x340>)
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	1e9a      	subs	r2, r3, #2
 8003c2a:	4bb9      	ldr	r3, [pc, #740]	; (8003f10 <oled_update+0x344>)
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	58d3      	ldr	r3, [r2, r3]
 8003c30:	1c18      	adds	r0, r3, #0
 8003c32:	f7fc fc39 	bl	80004a8 <__aeabi_f2uiz>
 8003c36:	233c      	movs	r3, #60	; 0x3c
 8003c38:	33ff      	adds	r3, #255	; 0xff
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	232d      	movs	r3, #45	; 0x2d
 8003c3e:	220f      	movs	r2, #15
 8003c40:	2100      	movs	r1, #0
 8003c42:	f7ff f919 	bl	8002e78 <map>
 8003c46:	0003      	movs	r3, r0
 8003c48:	001a      	movs	r2, r3
 8003c4a:	4bb2      	ldr	r3, [pc, #712]	; (8003f14 <oled_update+0x348>)
 8003c4c:	621a      	str	r2, [r3, #32]


		calc_needle(&left);
 8003c4e:	4bae      	ldr	r3, [pc, #696]	; (8003f08 <oled_update+0x33c>)
 8003c50:	0018      	movs	r0, r3
 8003c52:	f7ff f92f 	bl	8002eb4 <calc_needle>
		calc_needle(&right);
 8003c56:	4baf      	ldr	r3, [pc, #700]	; (8003f14 <oled_update+0x348>)
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff f92b 	bl	8002eb4 <calc_needle>

		sprintf(temp, "%0.2f", adc_value.temp);
 8003c5e:	4bae      	ldr	r3, [pc, #696]	; (8003f18 <oled_update+0x34c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	1c18      	adds	r0, r3, #0
 8003c64:	f7fe fe96 	bl	8002994 <__aeabi_f2d>
 8003c68:	0002      	movs	r2, r0
 8003c6a:	000b      	movs	r3, r1
 8003c6c:	49ab      	ldr	r1, [pc, #684]	; (8003f1c <oled_update+0x350>)
 8003c6e:	48ac      	ldr	r0, [pc, #688]	; (8003f20 <oled_update+0x354>)
 8003c70:	f00e f978 	bl	8011f64 <siprintf>
		sprintf(pos, "%li", map(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2), 99, 199, 0, 90));
 8003c74:	4ba3      	ldr	r3, [pc, #652]	; (8003f04 <oled_update+0x338>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c7a:	235a      	movs	r3, #90	; 0x5a
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	22c7      	movs	r2, #199	; 0xc7
 8003c82:	2163      	movs	r1, #99	; 0x63
 8003c84:	f7ff f8f8 	bl	8002e78 <map>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	49a6      	ldr	r1, [pc, #664]	; (8003f24 <oled_update+0x358>)
 8003c8c:	4ba6      	ldr	r3, [pc, #664]	; (8003f28 <oled_update+0x35c>)
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f00e f968 	bl	8011f64 <siprintf>
		sprintf(speed, "%0.2fRPM", rpm[periodo-2]);
 8003c94:	4b9d      	ldr	r3, [pc, #628]	; (8003f0c <oled_update+0x340>)
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	1e9a      	subs	r2, r3, #2
 8003c9a:	4b9d      	ldr	r3, [pc, #628]	; (8003f10 <oled_update+0x344>)
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	58d3      	ldr	r3, [r2, r3]
 8003ca0:	1c18      	adds	r0, r3, #0
 8003ca2:	f7fe fe77 	bl	8002994 <__aeabi_f2d>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	000b      	movs	r3, r1
 8003caa:	49a0      	ldr	r1, [pc, #640]	; (8003f2c <oled_update+0x360>)
 8003cac:	48a0      	ldr	r0, [pc, #640]	; (8003f30 <oled_update+0x364>)
 8003cae:	f00e f959 	bl	8011f64 <siprintf>

		if((left.angle > 45 && left.angle < 135) || (left.angle > 225 && left.angle < 315))
 8003cb2:	4b95      	ldr	r3, [pc, #596]	; (8003f08 <oled_update+0x33c>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b2d      	cmp	r3, #45	; 0x2d
 8003cb8:	dd03      	ble.n	8003cc2 <oled_update+0xf6>
 8003cba:	4b93      	ldr	r3, [pc, #588]	; (8003f08 <oled_update+0x33c>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	2b86      	cmp	r3, #134	; 0x86
 8003cc0:	dd09      	ble.n	8003cd6 <oled_update+0x10a>
 8003cc2:	4b91      	ldr	r3, [pc, #580]	; (8003f08 <oled_update+0x33c>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	2be1      	cmp	r3, #225	; 0xe1
 8003cc8:	dd0c      	ble.n	8003ce4 <oled_update+0x118>
 8003cca:	4b8f      	ldr	r3, [pc, #572]	; (8003f08 <oled_update+0x33c>)
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	239d      	movs	r3, #157	; 0x9d
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	dc06      	bgt.n	8003ce4 <oled_update+0x118>
		{
			needle_offset_x_left = 0;
 8003cd6:	4b97      	ldr	r3, [pc, #604]	; (8003f34 <oled_update+0x368>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 1;
 8003cdc:	4b96      	ldr	r3, [pc, #600]	; (8003f38 <oled_update+0x36c>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e005      	b.n	8003cf0 <oled_update+0x124>
		}
		else
		{
			needle_offset_x_left = 1;
 8003ce4:	4b93      	ldr	r3, [pc, #588]	; (8003f34 <oled_update+0x368>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
			needle_offset_y_left = 0;
 8003cea:	4b93      	ldr	r3, [pc, #588]	; (8003f38 <oled_update+0x36c>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
		}
		if((right.angle > 45 && right.angle < 135) || (right.angle > 225 && right.angle < 315))
 8003cf0:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <oled_update+0x348>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8003cf6:	dd03      	ble.n	8003d00 <oled_update+0x134>
 8003cf8:	4b86      	ldr	r3, [pc, #536]	; (8003f14 <oled_update+0x348>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	2b86      	cmp	r3, #134	; 0x86
 8003cfe:	dd09      	ble.n	8003d14 <oled_update+0x148>
 8003d00:	4b84      	ldr	r3, [pc, #528]	; (8003f14 <oled_update+0x348>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	2be1      	cmp	r3, #225	; 0xe1
 8003d06:	dd0c      	ble.n	8003d22 <oled_update+0x156>
 8003d08:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <oled_update+0x348>)
 8003d0a:	6a1a      	ldr	r2, [r3, #32]
 8003d0c:	239d      	movs	r3, #157	; 0x9d
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dc06      	bgt.n	8003d22 <oled_update+0x156>
		{
			needle_offset_x_right = 0;
 8003d14:	4b89      	ldr	r3, [pc, #548]	; (8003f3c <oled_update+0x370>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 1;
 8003d1a:	4b89      	ldr	r3, [pc, #548]	; (8003f40 <oled_update+0x374>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e005      	b.n	8003d2e <oled_update+0x162>
		}
		else
		{
			needle_offset_x_right = 1;
 8003d22:	4b86      	ldr	r3, [pc, #536]	; (8003f3c <oled_update+0x370>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
			needle_offset_y_right = 0;
 8003d28:	4b85      	ldr	r3, [pc, #532]	; (8003f40 <oled_update+0x374>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
		}

		u8g2_FirstPage(&u8g2);
 8003d2e:	4b73      	ldr	r3, [pc, #460]	; (8003efc <oled_update+0x330>)
 8003d30:	0018      	movs	r0, r3
 8003d32:	f007 fccf 	bl	800b6d4 <u8g2_FirstPage>
		do {

			// draw gauges & termometer
			u8g2_DrawBitmap(&u8g2, 0, 0, 64/8, 56, Left_Gauge);
 8003d36:	4871      	ldr	r0, [pc, #452]	; (8003efc <oled_update+0x330>)
 8003d38:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <oled_update+0x378>)
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	2338      	movs	r3, #56	; 0x38
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2308      	movs	r3, #8
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	f007 fbae 	bl	800b4a6 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 64, 0, 64/8, 56, Right_Gauge);
 8003d4a:	486c      	ldr	r0, [pc, #432]	; (8003efc <oled_update+0x330>)
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <oled_update+0x37c>)
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	2338      	movs	r3, #56	; 0x38
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2308      	movs	r3, #8
 8003d56:	2200      	movs	r2, #0
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	f007 fba4 	bl	800b4a6 <u8g2_DrawBitmap>
			u8g2_DrawBitmap(&u8g2, 60, 0, 8/8, 56, Termometer);
 8003d5e:	4867      	ldr	r0, [pc, #412]	; (8003efc <oled_update+0x330>)
 8003d60:	4b7a      	ldr	r3, [pc, #488]	; (8003f4c <oled_update+0x380>)
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	2338      	movs	r3, #56	; 0x38
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2301      	movs	r3, #1
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	213c      	movs	r1, #60	; 0x3c
 8003d6e:	f007 fb9a 	bl	800b4a6 <u8g2_DrawBitmap>

			// draw temperature
			u8g2_DrawLine(&u8g2, 64, 49, 64, 39-map(adc_value.adc_ch0, 0, 4096, 0, 49));
 8003d72:	4b69      	ldr	r3, [pc, #420]	; (8003f18 <oled_update+0x34c>)
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	2331      	movs	r3, #49	; 0x31
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	f7ff f878 	bl	8002e78 <map>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2227      	movs	r2, #39	; 0x27
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	485a      	ldr	r0, [pc, #360]	; (8003efc <oled_update+0x330>)
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	2231      	movs	r2, #49	; 0x31
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	f008 fe60 	bl	800ca60 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 52, 64, temp);
 8003da0:	4b5f      	ldr	r3, [pc, #380]	; (8003f20 <oled_update+0x354>)
 8003da2:	4856      	ldr	r0, [pc, #344]	; (8003efc <oled_update+0x330>)
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	2134      	movs	r1, #52	; 0x34
 8003da8:	f008 fb94 	bl	800c4d4 <u8g2_DrawStr>

			// draw needle and center circle Left Gauge
			u8g2_DrawLine(&u8g2, left.start_x, left.start_y, left.end_x, left.end_y);
 8003dac:	4b56      	ldr	r3, [pc, #344]	; (8003f08 <oled_update+0x33c>)
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	b299      	uxth	r1, r3
 8003db2:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <oled_update+0x33c>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <oled_update+0x33c>)
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	b29c      	uxth	r4, r3
 8003dbe:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <oled_update+0x33c>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	484d      	ldr	r0, [pc, #308]	; (8003efc <oled_update+0x330>)
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	0023      	movs	r3, r4
 8003dca:	f008 fe49 	bl	800ca60 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003dce:	4b4e      	ldr	r3, [pc, #312]	; (8003f08 <oled_update+0x33c>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <oled_update+0x368>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	18d3      	adds	r3, r2, r3
 8003ddc:	b299      	uxth	r1, r3
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <oled_update+0x33c>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <oled_update+0x36c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	b29c      	uxth	r4, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003dee:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <oled_update+0x33c>)
 8003df0:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <oled_update+0x368>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	18d3      	adds	r3, r2, r3
 8003dfc:	b29d      	uxth	r5, r3
								 left.end_x + needle_offset_x_left, left.end_y + needle_offset_y_left);
 8003dfe:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <oled_update+0x33c>)
 8003e00:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, left.start_x + needle_offset_x_left, left.start_y + needle_offset_y_left,
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <oled_update+0x36c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	483b      	ldr	r0, [pc, #236]	; (8003efc <oled_update+0x330>)
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	002b      	movs	r3, r5
 8003e14:	0022      	movs	r2, r4
 8003e16:	f008 fe23 	bl	800ca60 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26, 64, pos);
 8003e1a:	4b43      	ldr	r3, [pc, #268]	; (8003f28 <oled_update+0x35c>)
 8003e1c:	4837      	ldr	r0, [pc, #220]	; (8003efc <oled_update+0x330>)
 8003e1e:	2240      	movs	r2, #64	; 0x40
 8003e20:	211a      	movs	r1, #26
 8003e22:	f008 fb57 	bl	800c4d4 <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26, 28, 8/8, 8, Contour_Needle);
 8003e26:	4835      	ldr	r0, [pc, #212]	; (8003efc <oled_update+0x330>)
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <oled_update+0x384>)
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	2301      	movs	r3, #1
 8003e32:	221c      	movs	r2, #28
 8003e34:	211a      	movs	r1, #26
 8003e36:	f007 fb36 	bl	800b4a6 <u8g2_DrawBitmap>

			// draw needle and center circle Right Gauge
			u8g2_DrawLine(&u8g2, right.start_x, right.start_y, right.end_x, right.end_y);
 8003e3a:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <oled_update+0x348>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	b299      	uxth	r1, r3
 8003e40:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <oled_update+0x348>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <oled_update+0x348>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	b29c      	uxth	r4, r3
 8003e4c:	4b31      	ldr	r3, [pc, #196]	; (8003f14 <oled_update+0x348>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	482a      	ldr	r0, [pc, #168]	; (8003efc <oled_update+0x330>)
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	0023      	movs	r3, r4
 8003e58:	f008 fe02 	bl	800ca60 <u8g2_DrawLine>
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <oled_update+0x348>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <oled_update+0x370>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	4b29      	ldr	r3, [pc, #164]	; (8003f14 <oled_update+0x348>)
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <oled_update+0x374>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	18d3      	adds	r3, r2, r3
 8003e7a:	b29c      	uxth	r4, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <oled_update+0x348>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <oled_update+0x370>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	18d3      	adds	r3, r2, r3
 8003e8a:	b29d      	uxth	r5, r3
								 right.end_x + needle_offset_x_right, right.end_y + needle_offset_y_right);
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <oled_update+0x348>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
			u8g2_DrawLine(&u8g2, right.start_x + needle_offset_x_right, right.start_y + needle_offset_y_right,
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <oled_update+0x374>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	4817      	ldr	r0, [pc, #92]	; (8003efc <oled_update+0x330>)
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	002b      	movs	r3, r5
 8003ea2:	0022      	movs	r2, r4
 8003ea4:	f008 fddc 	bl	800ca60 <u8g2_DrawLine>
			u8g2_DrawStr(&u8g2, 26 + right_offset, 64, speed);
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <oled_update+0x388>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	331a      	adds	r3, #26
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <oled_update+0x364>)
 8003eb4:	4811      	ldr	r0, [pc, #68]	; (8003efc <oled_update+0x330>)
 8003eb6:	2240      	movs	r2, #64	; 0x40
 8003eb8:	f008 fb0c 	bl	800c4d4 <u8g2_DrawStr>


			u8g2_DrawBitmap(&u8g2, 26 + right_offset, 28, 8/8, 8, Contour_Needle);
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <oled_update+0x388>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	331a      	adds	r3, #26
 8003ec4:	b299      	uxth	r1, r3
 8003ec6:	480d      	ldr	r0, [pc, #52]	; (8003efc <oled_update+0x330>)
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <oled_update+0x384>)
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	2308      	movs	r3, #8
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	221c      	movs	r2, #28
 8003ed4:	f007 fae7 	bl	800b4a6 <u8g2_DrawBitmap>

		} while (u8g2_NextPage(&u8g2));
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <oled_update+0x330>)
 8003eda:	0018      	movs	r0, r3
 8003edc:	f007 fc10 	bl	800b700 <u8g2_NextPage>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d000      	beq.n	8003ee6 <oled_update+0x31a>
 8003ee4:	e727      	b.n	8003d36 <oled_update+0x16a>

		osDelay(250);
 8003ee6:	20fa      	movs	r0, #250	; 0xfa
 8003ee8:	f009 fed6 	bl	800dc98 <osDelay>
		left.angle = map(__HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_2), 99, 199, 45, 270+45);
 8003eec:	e68b      	b.n	8003c06 <oled_update+0x3a>
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	08002d69 	.word	0x08002d69
 8003ef4:	08002dc1 	.word	0x08002dc1
 8003ef8:	08015fbc 	.word	0x08015fbc
 8003efc:	2000055c 	.word	0x2000055c
 8003f00:	08015c70 	.word	0x08015c70
 8003f04:	2000043c 	.word	0x2000043c
 8003f08:	20000014 	.word	0x20000014
 8003f0c:	20000010 	.word	0x20000010
 8003f10:	20000268 	.word	0x20000268
 8003f14:	20000038 	.word	0x20000038
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	08015448 	.word	0x08015448
 8003f20:	200005f8 	.word	0x200005f8
 8003f24:	08015450 	.word	0x08015450
 8003f28:	20000600 	.word	0x20000600
 8003f2c:	08015454 	.word	0x08015454
 8003f30:	20000608 	.word	0x20000608
 8003f34:	20000614 	.word	0x20000614
 8003f38:	20000618 	.word	0x20000618
 8003f3c:	2000061c 	.word	0x2000061c
 8003f40:	20000620 	.word	0x20000620
 8003f44:	080157d8 	.word	0x080157d8
 8003f48:	08015618 	.word	0x08015618
 8003f4c:	080155d8 	.word	0x080155d8
 8003f50:	08015610 	.word	0x08015610
 8003f54:	2000005c 	.word	0x2000005c

08003f58 <adc_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_read */
void adc_read(void *argument)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_read */
	HAL_ADCEx_Calibration_Start(&hadc);
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <adc_read+0x30>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f001 fe12 	bl	8005b8c <HAL_ADCEx_Calibration_Start>
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <adc_read+0x34>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	4252      	negs	r2, r2
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f00a f89a 	bl	800e0ac <osSemaphoreAcquire>
		HAL_ADC_Start_IT(&hadc);
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <adc_read+0x30>)
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 fa3e 	bl	80053fc <HAL_ADC_Start_IT>
		osDelay(10);
 8003f80:	200a      	movs	r0, #10
 8003f82:	f009 fe89 	bl	800dc98 <osDelay>
		osSemaphoreAcquire(Adc_SemHandle, osWaitForever);
 8003f86:	e7ef      	b.n	8003f68 <adc_read+0x10>
 8003f88:	200002e8 	.word	0x200002e8
 8003f8c:	20000540 	.word	0x20000540

08003f90 <servo_pos>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_pos */
void servo_pos(void *argument)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_pos */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <servo_pos+0x38>)
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f004 faaf 	bl	8008500 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	for(;;)
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4095, 99, 199));
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <servo_pos+0x3c>)
 8003fa4:	885b      	ldrh	r3, [r3, #2]
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <servo_pos+0x38>)
 8003faa:	681c      	ldr	r4, [r3, #0]
 8003fac:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <servo_pos+0x40>)
 8003fae:	23c7      	movs	r3, #199	; 0xc7
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2363      	movs	r3, #99	; 0x63
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	f7fe ff5f 	bl	8002e78 <map>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	63a3      	str	r3, [r4, #56]	; 0x38
		osDelay(10);
 8003fbe:	200a      	movs	r0, #10
 8003fc0:	f009 fe6a 	bl	800dc98 <osDelay>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, map(adc_value.adc_ch1, 0, 4095, 99, 199));
 8003fc4:	e7ed      	b.n	8003fa2 <servo_pos+0x12>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	2000043c 	.word	0x2000043c
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	00000fff 	.word	0x00000fff

08003fd4 <stepper_fx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_fx */
void stepper_fx(void *argument)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_fx */
int ciclo = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

/* Infinite loop */
for(;;)
{
	switch(giro_stepper)
 8003fe0:	4b29      	ldr	r3, [pc, #164]	; (8004088 <stepper_fx+0xb4>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d022      	beq.n	800402e <stepper_fx+0x5a>
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d141      	bne.n	8004070 <stepper_fx+0x9c>
	{
	case Horario:
	{
		for(int i = 0; i < 4; i++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	e011      	b.n	8004016 <stepper_fx+0x42>
		{
			HAL_GPIO_WritePin(GPIOB, pins[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <stepper_fx+0xb8>)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	0052      	lsls	r2, r2, #1
 8003ff8:	5ad1      	ldrh	r1, [r2, r3]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <stepper_fx+0xbc>)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	18d2      	adds	r2, r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	18d3      	adds	r3, r2, r3
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4822      	ldr	r0, [pc, #136]	; (8004094 <stepper_fx+0xc0>)
 800400a:	001a      	movs	r2, r3
 800400c:	f002 f900 	bl	8006210 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	3301      	adds	r3, #1
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b03      	cmp	r3, #3
 800401a:	ddea      	ble.n	8003ff2 <stepper_fx+0x1e>
		}
		ciclo++;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3301      	adds	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
		//			if(ciclo > 3) ciclo = 0;											// Pasos completos
		if(ciclo > 7) ciclo = 0;											// Medios pasos
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b07      	cmp	r3, #7
 8004026:	dd25      	ble.n	8004074 <stepper_fx+0xa0>
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
		break;
 800402c:	e022      	b.n	8004074 <stepper_fx+0xa0>
	}
	case Antihorario:
	{
		for(int i = 0; i < 4; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e011      	b.n	8004058 <stepper_fx+0x84>
		{
			HAL_GPIO_WritePin(GPIOB, pins[i], matrix_half[ciclo][i]);		// Medios pasos, quitar _half para paso completo
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <stepper_fx+0xb8>)
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0052      	lsls	r2, r2, #1
 800403a:	5ad1      	ldrh	r1, [r2, r3]
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <stepper_fx+0xbc>)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	18d2      	adds	r2, r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	4812      	ldr	r0, [pc, #72]	; (8004094 <stepper_fx+0xc0>)
 800404c:	001a      	movs	r2, r3
 800404e:	f002 f8df 	bl	8006210 <HAL_GPIO_WritePin>
		for(int i = 0; i < 4; i++)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3301      	adds	r3, #1
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b03      	cmp	r3, #3
 800405c:	ddea      	ble.n	8004034 <stepper_fx+0x60>
		}
		ciclo--;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	3b01      	subs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
		//			if(ciclo < 0) ciclo = 3;											// Pasos completos
		if(ciclo < 0) ciclo = 7;											// Medios pasos
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	da06      	bge.n	8004078 <stepper_fx+0xa4>
 800406a:	2307      	movs	r3, #7
 800406c:	617b      	str	r3, [r7, #20]
		break;
 800406e:	e003      	b.n	8004078 <stepper_fx+0xa4>
	}
	default:
	{
		break;
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	e002      	b.n	800407a <stepper_fx+0xa6>
		break;
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	e000      	b.n	800407a <stepper_fx+0xa6>
		break;
 8004078:	46c0      	nop			; (mov r8, r8)
	}
	}
	osDelay(periodo);
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <stepper_fx+0xc4>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	0018      	movs	r0, r3
 8004080:	f009 fe0a 	bl	800dc98 <osDelay>
	switch(giro_stepper)
 8004084:	e7ac      	b.n	8003fe0 <stepper_fx+0xc>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000558 	.word	0x20000558
 800408c:	08015998 	.word	0x08015998
 8004090:	080159a0 	.word	0x080159a0
 8004094:	48000400 	.word	0x48000400
 8004098:	20000010 	.word	0x20000010

0800409c <receive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receive */
void receive(void *argument)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receive */
	static uint8_t angulo = 0;
	static uCAN_MSG PutTxQ;

	osThreadSuspend(OLEDHandle);
 80040a4:	4bab      	ldr	r3, [pc, #684]	; (8004354 <receive+0x2b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f009 fd99 	bl	800dbe0 <osThreadSuspend>
	osThreadSuspend(LOCKHandle);
 80040ae:	4baa      	ldr	r3, [pc, #680]	; (8004358 <receive+0x2bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f009 fd94 	bl	800dbe0 <osThreadSuspend>
	osThreadSuspend(SERVOHandle);
 80040b8:	4ba8      	ldr	r3, [pc, #672]	; (800435c <receive+0x2c0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0018      	movs	r0, r3
 80040be:	f009 fd8f 	bl	800dbe0 <osThreadSuspend>
	osThreadSuspend(STEPPERHandle);
 80040c2:	4ba7      	ldr	r3, [pc, #668]	; (8004360 <receive+0x2c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f009 fd8a 	bl	800dbe0 <osThreadSuspend>
	u8g2_SetPowerSave(&u8g2, 1); // sleep display
 80040cc:	4ba5      	ldr	r3, [pc, #660]	; (8004364 <receive+0x2c8>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	0018      	movs	r0, r3
 80040d2:	f009 fbe7 	bl	800d8a4 <u8x8_SetPowerSave>
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)buf, 4);
 80040d6:	49a4      	ldr	r1, [pc, #656]	; (8004368 <receive+0x2cc>)
 80040d8:	4ba4      	ldr	r3, [pc, #656]	; (800436c <receive+0x2d0>)
 80040da:	2204      	movs	r2, #4
 80040dc:	0018      	movs	r0, r3
 80040de:	f006 fb59 	bl	800a794 <HAL_UARTEx_ReceiveToIdle_IT>
	/* Infinite loop */
	for(;;)
	{

		osMessageQueueGet(rx_queueHandle, buf, 0l, osWaitForever);
 80040e2:	4ba3      	ldr	r3, [pc, #652]	; (8004370 <receive+0x2d4>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	2301      	movs	r3, #1
 80040e8:	425b      	negs	r3, r3
 80040ea:	499f      	ldr	r1, [pc, #636]	; (8004368 <receive+0x2cc>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	f00a f979 	bl	800e3e4 <osMessageQueueGet>
		switch(buf[0])
 80040f2:	4b9d      	ldr	r3, [pc, #628]	; (8004368 <receive+0x2cc>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	3b41      	subs	r3, #65	; 0x41
 80040f8:	2b17      	cmp	r3, #23
 80040fa:	d900      	bls.n	80040fe <receive+0x62>
 80040fc:	e114      	b.n	8004328 <receive+0x28c>
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	4b9c      	ldr	r3, [pc, #624]	; (8004374 <receive+0x2d8>)
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	469f      	mov	pc, r3
		{
		case 'P':

			if(buf[3] != 0xE0) break;
 8004108:	4b97      	ldr	r3, [pc, #604]	; (8004368 <receive+0x2cc>)
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	2be0      	cmp	r3, #224	; 0xe0
 800410e:	d000      	beq.n	8004112 <receive+0x76>
 8004110:	e10c      	b.n	800432c <receive+0x290>
			osThreadResume(SERVOHandle);
 8004112:	4b92      	ldr	r3, [pc, #584]	; (800435c <receive+0x2c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	f009 fd90 	bl	800dc3c <osThreadResume>
			osThreadSuspend(LOCKHandle);
 800411c:	4b8e      	ldr	r3, [pc, #568]	; (8004358 <receive+0x2bc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0018      	movs	r0, r3
 8004122:	f009 fd5d 	bl	800dbe0 <osThreadSuspend>
			break;
 8004126:	e114      	b.n	8004352 <receive+0x2b6>

		case 'S':

			if(buf[3] != 0xE0) break;
 8004128:	4b8f      	ldr	r3, [pc, #572]	; (8004368 <receive+0x2cc>)
 800412a:	78db      	ldrb	r3, [r3, #3]
 800412c:	2be0      	cmp	r3, #224	; 0xe0
 800412e:	d000      	beq.n	8004132 <receive+0x96>
 8004130:	e0fe      	b.n	8004330 <receive+0x294>
			osThreadSuspend(SERVOHandle);
 8004132:	4b8a      	ldr	r3, [pc, #552]	; (800435c <receive+0x2c0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	0018      	movs	r0, r3
 8004138:	f009 fd52 	bl	800dbe0 <osThreadSuspend>
			osThreadSuspend(LOCKHandle);
 800413c:	4b86      	ldr	r3, [pc, #536]	; (8004358 <receive+0x2bc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0018      	movs	r0, r3
 8004142:	f009 fd4d 	bl	800dbe0 <osThreadSuspend>
			angulo = map(buf[1], 0, 90, 99, 199);
 8004146:	4b88      	ldr	r3, [pc, #544]	; (8004368 <receive+0x2cc>)
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	0018      	movs	r0, r3
 800414c:	23c7      	movs	r3, #199	; 0xc7
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2363      	movs	r3, #99	; 0x63
 8004152:	225a      	movs	r2, #90	; 0x5a
 8004154:	2100      	movs	r1, #0
 8004156:	f7fe fe8f 	bl	8002e78 <map>
 800415a:	0003      	movs	r3, r0
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b86      	ldr	r3, [pc, #536]	; (8004378 <receive+0x2dc>)
 8004160:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, angulo);
 8004162:	4b85      	ldr	r3, [pc, #532]	; (8004378 <receive+0x2dc>)
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	4b85      	ldr	r3, [pc, #532]	; (800437c <receive+0x2e0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800416c:	e0f1      	b.n	8004352 <receive+0x2b6>

		case 'A':

			if(buf[3] != 0xE0) break;
 800416e:	4b7e      	ldr	r3, [pc, #504]	; (8004368 <receive+0x2cc>)
 8004170:	78db      	ldrb	r3, [r3, #3]
 8004172:	2be0      	cmp	r3, #224	; 0xe0
 8004174:	d000      	beq.n	8004178 <receive+0xdc>
 8004176:	e0dd      	b.n	8004334 <receive+0x298>
			osThreadSuspend(SERVOHandle);
 8004178:	4b78      	ldr	r3, [pc, #480]	; (800435c <receive+0x2c0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0018      	movs	r0, r3
 800417e:	f009 fd2f 	bl	800dbe0 <osThreadSuspend>
			osThreadResume(LOCKHandle);
 8004182:	4b75      	ldr	r3, [pc, #468]	; (8004358 <receive+0x2bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	0018      	movs	r0, r3
 8004188:	f009 fd58 	bl	800dc3c <osThreadResume>

			segvel_value.espera = buf[1];
 800418c:	4b76      	ldr	r3, [pc, #472]	; (8004368 <receive+0x2cc>)
 800418e:	785b      	ldrb	r3, [r3, #1]
 8004190:	b29a      	uxth	r2, r3
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <receive+0x2e4>)
 8004194:	801a      	strh	r2, [r3, #0]

			segvel_value.velocidad = buf[2];
 8004196:	4b74      	ldr	r3, [pc, #464]	; (8004368 <receive+0x2cc>)
 8004198:	789b      	ldrb	r3, [r3, #2]
 800419a:	b29a      	uxth	r2, r3
 800419c:	4b78      	ldr	r3, [pc, #480]	; (8004380 <receive+0x2e4>)
 800419e:	805a      	strh	r2, [r3, #2]
			if(segvel_value.velocidad == 0) segvel_value.velocidad++;
 80041a0:	4b77      	ldr	r3, [pc, #476]	; (8004380 <receive+0x2e4>)
 80041a2:	885b      	ldrh	r3, [r3, #2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <receive+0x118>
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <receive+0x2e4>)
 80041aa:	885b      	ldrh	r3, [r3, #2]
 80041ac:	3301      	adds	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	4b73      	ldr	r3, [pc, #460]	; (8004380 <receive+0x2e4>)
 80041b2:	805a      	strh	r2, [r3, #2]

			segvel_value.espera = segvel_value.espera * 1000;
 80041b4:	4b72      	ldr	r3, [pc, #456]	; (8004380 <receive+0x2e4>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	22fa      	movs	r2, #250	; 0xfa
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4353      	muls	r3, r2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	4b6f      	ldr	r3, [pc, #444]	; (8004380 <receive+0x2e4>)
 80041c2:	801a      	strh	r2, [r3, #0]
			segvel_value.velocidad = 1000/segvel_value.velocidad;
 80041c4:	4b6e      	ldr	r3, [pc, #440]	; (8004380 <receive+0x2e4>)
 80041c6:	885b      	ldrh	r3, [r3, #2]
 80041c8:	0019      	movs	r1, r3
 80041ca:	23fa      	movs	r3, #250	; 0xfa
 80041cc:	0098      	lsls	r0, r3, #2
 80041ce:	f7fc f841 	bl	8000254 <__divsi3>
 80041d2:	0003      	movs	r3, r0
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <receive+0x2e4>)
 80041d8:	805a      	strh	r2, [r3, #2]
			osMessageQueuePut(lock_queueHandle, &segvel_value, 1, 0);
 80041da:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <receive+0x2e8>)
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	4968      	ldr	r1, [pc, #416]	; (8004380 <receive+0x2e4>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	2201      	movs	r2, #1
 80041e4:	f00a f894 	bl	800e310 <osMessageQueuePut>
			break;
 80041e8:	e0b3      	b.n	8004352 <receive+0x2b6>

		case 'D':

			if(buf[3] != 0xE0) break;
 80041ea:	4b5f      	ldr	r3, [pc, #380]	; (8004368 <receive+0x2cc>)
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	2be0      	cmp	r3, #224	; 0xe0
 80041f0:	d000      	beq.n	80041f4 <receive+0x158>
 80041f2:	e0a1      	b.n	8004338 <receive+0x29c>

			giro_stepper = Horario;
 80041f4:	4b64      	ldr	r3, [pc, #400]	; (8004388 <receive+0x2ec>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
			break;
 80041fa:	e0aa      	b.n	8004352 <receive+0x2b6>

		case 'I':

			if(buf[3] != 0xE0) break;
 80041fc:	4b5a      	ldr	r3, [pc, #360]	; (8004368 <receive+0x2cc>)
 80041fe:	78db      	ldrb	r3, [r3, #3]
 8004200:	2be0      	cmp	r3, #224	; 0xe0
 8004202:	d000      	beq.n	8004206 <receive+0x16a>
 8004204:	e09a      	b.n	800433c <receive+0x2a0>

			giro_stepper = Antihorario;
 8004206:	4b60      	ldr	r3, [pc, #384]	; (8004388 <receive+0x2ec>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
			break;
 800420c:	e0a1      	b.n	8004352 <receive+0x2b6>

		case 'M':
			if(buf[3] != 0xE0) break;
 800420e:	4b56      	ldr	r3, [pc, #344]	; (8004368 <receive+0x2cc>)
 8004210:	78db      	ldrb	r3, [r3, #3]
 8004212:	2be0      	cmp	r3, #224	; 0xe0
 8004214:	d000      	beq.n	8004218 <receive+0x17c>
 8004216:	e093      	b.n	8004340 <receive+0x2a4>
			osThreadResume(STEPPERHandle);
 8004218:	4b51      	ldr	r3, [pc, #324]	; (8004360 <receive+0x2c4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0018      	movs	r0, r3
 800421e:	f009 fd0d 	bl	800dc3c <osThreadResume>
			if(buf[1] == 0)
 8004222:	4b51      	ldr	r3, [pc, #324]	; (8004368 <receive+0x2cc>)
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <receive+0x1a0>
				{
				periodo = 15;
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <receive+0x2f0>)
 800422c:	220f      	movs	r2, #15
 800422e:	801a      	strh	r2, [r3, #0]
				osThreadSuspend(STEPPERHandle);
 8004230:	4b4b      	ldr	r3, [pc, #300]	; (8004360 <receive+0x2c4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	0018      	movs	r0, r3
 8004236:	f009 fcd3 	bl	800dbe0 <osThreadSuspend>
				break;
 800423a:	e08a      	b.n	8004352 <receive+0x2b6>
				}

			periodo = periodos[buf[1]-1];
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <receive+0x2cc>)
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	3b01      	subs	r3, #1
 8004242:	4a53      	ldr	r2, [pc, #332]	; (8004390 <receive+0x2f4>)
 8004244:	5cd3      	ldrb	r3, [r2, r3]
 8004246:	b29a      	uxth	r2, r3
 8004248:	4b50      	ldr	r3, [pc, #320]	; (800438c <receive+0x2f0>)
 800424a:	801a      	strh	r2, [r3, #0]

			break;
 800424c:	e081      	b.n	8004352 <receive+0x2b6>

		case 'X':

			if(buf[3] != 0xE0) break;
 800424e:	4b46      	ldr	r3, [pc, #280]	; (8004368 <receive+0x2cc>)
 8004250:	78db      	ldrb	r3, [r3, #3]
 8004252:	2be0      	cmp	r3, #224	; 0xe0
 8004254:	d000      	beq.n	8004258 <receive+0x1bc>
 8004256:	e075      	b.n	8004344 <receive+0x2a8>

			osThreadResume(OLEDHandle);
 8004258:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <receive+0x2b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0018      	movs	r0, r3
 800425e:	f009 fced 	bl	800dc3c <osThreadResume>
			u8g2_SetPowerSave(&u8g2, 0); // wake up display
 8004262:	4b40      	ldr	r3, [pc, #256]	; (8004364 <receive+0x2c8>)
 8004264:	2100      	movs	r1, #0
 8004266:	0018      	movs	r0, r3
 8004268:	f009 fb1c 	bl	800d8a4 <u8x8_SetPowerSave>
			break;
 800426c:	e071      	b.n	8004352 <receive+0x2b6>

		case 'C':

			if(buf[3] != 0xE0) break;
 800426e:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <receive+0x2cc>)
 8004270:	78db      	ldrb	r3, [r3, #3]
 8004272:	2be0      	cmp	r3, #224	; 0xe0
 8004274:	d168      	bne.n	8004348 <receive+0x2ac>

			osThreadSuspend(OLEDHandle);
 8004276:	4b37      	ldr	r3, [pc, #220]	; (8004354 <receive+0x2b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0018      	movs	r0, r3
 800427c:	f009 fcb0 	bl	800dbe0 <osThreadSuspend>
			osThreadSuspend(SERVOHandle);
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <receive+0x2c0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0018      	movs	r0, r3
 8004286:	f009 fcab 	bl	800dbe0 <osThreadSuspend>
			osThreadSuspend(LOCKHandle);
 800428a:	4b33      	ldr	r3, [pc, #204]	; (8004358 <receive+0x2bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0018      	movs	r0, r3
 8004290:	f009 fca6 	bl	800dbe0 <osThreadSuspend>
			osThreadSuspend(STEPPERHandle);
 8004294:	4b32      	ldr	r3, [pc, #200]	; (8004360 <receive+0x2c4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0018      	movs	r0, r3
 800429a:	f009 fca1 	bl	800dbe0 <osThreadSuspend>
			flag_monitorizacion = false;
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <receive+0x2f8>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]

			u8g2_SetPowerSave(&u8g2, 1); // sleep display
 80042a4:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <receive+0x2c8>)
 80042a6:	2101      	movs	r1, #1
 80042a8:	0018      	movs	r0, r3
 80042aa:	f009 fafb 	bl	800d8a4 <u8x8_SetPowerSave>
			break;
 80042ae:	e050      	b.n	8004352 <receive+0x2b6>

		case 'T':

			if(buf[3] != 0xE0) break;
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <receive+0x2cc>)
 80042b2:	78db      	ldrb	r3, [r3, #3]
 80042b4:	2be0      	cmp	r3, #224	; 0xe0
 80042b6:	d149      	bne.n	800434c <receive+0x2b0>

			periodo_temp = buf[1]*10;
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <receive+0x2cc>)
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	1c1a      	adds	r2, r3, #0
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	18db      	adds	r3, r3, r3
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <receive+0x2fc>)
 80042ca:	801a      	strh	r2, [r3, #0]
			break;
 80042cc:	e041      	b.n	8004352 <receive+0x2b6>

		case 'R':
			if(buf[3] != 0xE0) break;
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <receive+0x2cc>)
 80042d0:	78db      	ldrb	r3, [r3, #3]
 80042d2:	2be0      	cmp	r3, #224	; 0xe0
 80042d4:	d13c      	bne.n	8004350 <receive+0x2b4>

			//semaphore?
			PutTxQ.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <receive+0x300>)
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
			PutTxQ.frame.id = ORDENO_A;
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <receive+0x300>)
 80042de:	2222      	movs	r2, #34	; 0x22
 80042e0:	605a      	str	r2, [r3, #4]
			PutTxQ.frame.dlc = 8;
 80042e2:	4b2e      	ldr	r3, [pc, #184]	; (800439c <receive+0x300>)
 80042e4:	2208      	movs	r2, #8
 80042e6:	721a      	strb	r2, [r3, #8]

			PutTxQ.frame.data0 = 0;
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <receive+0x300>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	725a      	strb	r2, [r3, #9]
			PutTxQ.frame.data1 = 0;
 80042ee:	4b2b      	ldr	r3, [pc, #172]	; (800439c <receive+0x300>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	729a      	strb	r2, [r3, #10]
			PutTxQ.frame.data2 = 0;
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <receive+0x300>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	72da      	strb	r2, [r3, #11]
			PutTxQ.frame.data3 = 0;
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <receive+0x300>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	731a      	strb	r2, [r3, #12]
			PutTxQ.frame.data4 = 0;
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <receive+0x300>)
 8004302:	2200      	movs	r2, #0
 8004304:	735a      	strb	r2, [r3, #13]
			PutTxQ.frame.data5 = 0;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <receive+0x300>)
 8004308:	2200      	movs	r2, #0
 800430a:	739a      	strb	r2, [r3, #14]
			PutTxQ.frame.data6 = 0;
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <receive+0x300>)
 800430e:	2200      	movs	r2, #0
 8004310:	73da      	strb	r2, [r3, #15]
			PutTxQ.frame.data7 = 0;
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <receive+0x300>)
 8004314:	2200      	movs	r2, #0
 8004316:	741a      	strb	r2, [r3, #16]

			osMessageQueuePut(can_queueHandle, &PutTxQ, 0U, 0U);
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <receive+0x304>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	491f      	ldr	r1, [pc, #124]	; (800439c <receive+0x300>)
 800431e:	2300      	movs	r3, #0
 8004320:	2200      	movs	r2, #0
 8004322:	f009 fff5 	bl	800e310 <osMessageQueuePut>

			break;
 8004326:	e014      	b.n	8004352 <receive+0x2b6>

		default:
			break;
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	e6da      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	e6d8      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	e6d6      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	e6d4      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	e6d2      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	e6d0      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	e6ce      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	e6cc      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	e6ca      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 800434c:	46c0      	nop			; (mov r8, r8)
 800434e:	e6c8      	b.n	80040e2 <receive+0x46>
			if(buf[3] != 0xE0) break;
 8004350:	46c0      	nop			; (mov r8, r8)
		osMessageQueueGet(rx_queueHandle, buf, 0l, osWaitForever);
 8004352:	e6c6      	b.n	80040e2 <receive+0x46>
 8004354:	2000050c 	.word	0x2000050c
 8004358:	20000520 	.word	0x20000520
 800435c:	20000514 	.word	0x20000514
 8004360:	20000518 	.word	0x20000518
 8004364:	2000055c 	.word	0x2000055c
 8004368:	20000554 	.word	0x20000554
 800436c:	20000484 	.word	0x20000484
 8004370:	20000534 	.word	0x20000534
 8004374:	08015bf8 	.word	0x08015bf8
 8004378:	20000624 	.word	0x20000624
 800437c:	2000043c 	.word	0x2000043c
 8004380:	20000550 	.word	0x20000550
 8004384:	20000530 	.word	0x20000530
 8004388:	20000558 	.word	0x20000558
 800438c:	20000010 	.word	0x20000010
 8004390:	200002a0 	.word	0x200002a0
 8004394:	200005f7 	.word	0x200005f7
 8004398:	20000012 	.word	0x20000012
 800439c:	20000628 	.word	0x20000628
 80043a0:	20000538 	.word	0x20000538

080043a4 <servo_lock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_lock */
void servo_lock(void *argument)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b089      	sub	sp, #36	; 0x24
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_lock */
	enum maquina {
		Reposo, Abriendo, Espera, Cerrando
	} estados;
	estados = Reposo;
 80043ac:	2317      	movs	r3, #23
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

	static lock_q segvel_procesing;
	/* Infinite loop */
	for(;;)
	{
		switch(estados)
 80043b4:	2317      	movs	r3, #23
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d043      	beq.n	8004446 <servo_lock+0xa2>
 80043be:	dd00      	ble.n	80043c2 <servo_lock+0x1e>
 80043c0:	e06c      	b.n	800449c <servo_lock+0xf8>
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d035      	beq.n	8004432 <servo_lock+0x8e>
 80043c6:	dc69      	bgt.n	800449c <servo_lock+0xf8>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <servo_lock+0x2e>
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d011      	beq.n	80043f4 <servo_lock+0x50>
			}
			estados = Reposo;
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
			break;
		default:
			break;
 80043d0:	e064      	b.n	800449c <servo_lock+0xf8>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 99);
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <servo_lock+0x108>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2263      	movs	r2, #99	; 0x63
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
			osMessageQueueGet(lock_queueHandle, &segvel_procesing, (uint8_t *)1, osWaitForever);
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <servo_lock+0x10c>)
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	2301      	movs	r3, #1
 80043e0:	425b      	negs	r3, r3
 80043e2:	4934      	ldr	r1, [pc, #208]	; (80044b4 <servo_lock+0x110>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	f009 fffd 	bl	800e3e4 <osMessageQueueGet>
			estados = Abriendo;
 80043ea:	2317      	movs	r3, #23
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
			break;
 80043f2:	e056      	b.n	80044a2 <servo_lock+0xfe>
			for(int i = 0; i<91; i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	e013      	b.n	8004422 <servo_lock+0x7e>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 80043fa:	6938      	ldr	r0, [r7, #16]
 80043fc:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <servo_lock+0x108>)
 80043fe:	681c      	ldr	r4, [r3, #0]
 8004400:	23c7      	movs	r3, #199	; 0xc7
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2363      	movs	r3, #99	; 0x63
 8004406:	225a      	movs	r2, #90	; 0x5a
 8004408:	2100      	movs	r1, #0
 800440a:	f7fe fd35 	bl	8002e78 <map>
 800440e:	0003      	movs	r3, r0
 8004410:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_procesing.velocidad);
 8004412:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <servo_lock+0x110>)
 8004414:	885b      	ldrh	r3, [r3, #2]
 8004416:	0018      	movs	r0, r3
 8004418:	f009 fc3e 	bl	800dc98 <osDelay>
			for(int i = 0; i<91; i++)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	3301      	adds	r3, #1
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b5a      	cmp	r3, #90	; 0x5a
 8004426:	dde8      	ble.n	80043fa <servo_lock+0x56>
			estados = Espera;
 8004428:	2317      	movs	r3, #23
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	2202      	movs	r2, #2
 800442e:	701a      	strb	r2, [r3, #0]
			break;
 8004430:	e037      	b.n	80044a2 <servo_lock+0xfe>
			osDelay(segvel_procesing.espera);
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <servo_lock+0x110>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	0018      	movs	r0, r3
 8004438:	f009 fc2e 	bl	800dc98 <osDelay>
			estados = Cerrando;
 800443c:	2317      	movs	r3, #23
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	2203      	movs	r2, #3
 8004442:	701a      	strb	r2, [r3, #0]
			break;
 8004444:	e02d      	b.n	80044a2 <servo_lock+0xfe>
			for(int i = 90; i>=0; i--)
 8004446:	235a      	movs	r3, #90	; 0x5a
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	e013      	b.n	8004474 <servo_lock+0xd0>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, map(i, 0, 90, 99, 199));
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <servo_lock+0x108>)
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	23c7      	movs	r3, #199	; 0xc7
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2363      	movs	r3, #99	; 0x63
 8004458:	225a      	movs	r2, #90	; 0x5a
 800445a:	2100      	movs	r1, #0
 800445c:	f7fe fd0c 	bl	8002e78 <map>
 8004460:	0003      	movs	r3, r0
 8004462:	63a3      	str	r3, [r4, #56]	; 0x38
				osDelay(segvel_procesing.velocidad);
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <servo_lock+0x110>)
 8004466:	885b      	ldrh	r3, [r3, #2]
 8004468:	0018      	movs	r0, r3
 800446a:	f009 fc15 	bl	800dc98 <osDelay>
			for(int i = 90; i>=0; i--)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b01      	subs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	dae8      	bge.n	800444c <servo_lock+0xa8>
			estados = Reposo;
 800447a:	2317      	movs	r3, #23
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
			if(osMessageQueueGetCount(lock_queueHandle) == 0) osThreadSuspend(LOCKHandle);
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <servo_lock+0x10c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	0018      	movs	r0, r3
 8004488:	f00a f814 	bl	800e4b4 <osMessageQueueGetCount>
 800448c:	1e03      	subs	r3, r0, #0
 800448e:	d107      	bne.n	80044a0 <servo_lock+0xfc>
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <servo_lock+0x114>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	0018      	movs	r0, r3
 8004496:	f009 fba3 	bl	800dbe0 <osThreadSuspend>
			break;
 800449a:	e001      	b.n	80044a0 <servo_lock+0xfc>
			break;
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	e000      	b.n	80044a2 <servo_lock+0xfe>
			break;
 80044a0:	46c0      	nop			; (mov r8, r8)

		}
		osDelay(1);
 80044a2:	2001      	movs	r0, #1
 80044a4:	f009 fbf8 	bl	800dc98 <osDelay>
		switch(estados)
 80044a8:	e784      	b.n	80043b4 <servo_lock+0x10>
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	2000043c 	.word	0x2000043c
 80044b0:	20000530 	.word	0x20000530
 80044b4:	2000063c 	.word	0x2000063c
 80044b8:	20000520 	.word	0x20000520

080044bc <transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit */
void transmit(void *argument)
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
	static uCAN_MSG PutTxQ;


	// Inicializa "timestamp1" y "timestamp2" con el valor del tick actual del sistema

	timestamp1 = HAL_GetTick();
 80044c4:	f000 fe50 	bl	8005168 <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	4bb9      	ldr	r3, [pc, #740]	; (80047b0 <transmit+0x2f4>)
 80044cc:	601a      	str	r2, [r3, #0]
	timestamp2 = timestamp1;
 80044ce:	4bb8      	ldr	r3, [pc, #736]	; (80047b0 <transmit+0x2f4>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4bb8      	ldr	r3, [pc, #736]	; (80047b4 <transmit+0x2f8>)
 80044d4:	601a      	str	r2, [r3, #0]
	{

		/* Temperatura Local */
		// Construye una trama de datos con la temperatura y la envía a través de la interfaz UART

		if(HAL_GetTick() - timestamp1 >= periodo_temp)
 80044d6:	f000 fe47 	bl	8005168 <HAL_GetTick>
 80044da:	0002      	movs	r2, r0
 80044dc:	4bb4      	ldr	r3, [pc, #720]	; (80047b0 <transmit+0x2f4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	4ab5      	ldr	r2, [pc, #724]	; (80047b8 <transmit+0x2fc>)
 80044e4:	8812      	ldrh	r2, [r2, #0]
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d337      	bcc.n	800455a <transmit+0x9e>
		{
			trama[0] = 0x30;
 80044ea:	4bb4      	ldr	r3, [pc, #720]	; (80047bc <transmit+0x300>)
 80044ec:	2230      	movs	r2, #48	; 0x30
 80044ee:	701a      	strb	r2, [r3, #0]
			trama[1] = (uint8_t)adc_value.temp;
 80044f0:	4bb3      	ldr	r3, [pc, #716]	; (80047c0 <transmit+0x304>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	1c18      	adds	r0, r3, #0
 80044f6:	f7fb ffd7 	bl	80004a8 <__aeabi_f2uiz>
 80044fa:	0003      	movs	r3, r0
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4baf      	ldr	r3, [pc, #700]	; (80047bc <transmit+0x300>)
 8004500:	705a      	strb	r2, [r3, #1]
			trama[2] = (uint8_t)((adc_value.temp - trama[1])*100);
 8004502:	4baf      	ldr	r3, [pc, #700]	; (80047c0 <transmit+0x304>)
 8004504:	685c      	ldr	r4, [r3, #4]
 8004506:	4bad      	ldr	r3, [pc, #692]	; (80047bc <transmit+0x300>)
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	0018      	movs	r0, r3
 800450c:	f7fc fc0e 	bl	8000d2c <__aeabi_i2f>
 8004510:	1c03      	adds	r3, r0, #0
 8004512:	1c19      	adds	r1, r3, #0
 8004514:	1c20      	adds	r0, r4, #0
 8004516:	f7fc fa3b 	bl	8000990 <__aeabi_fsub>
 800451a:	1c03      	adds	r3, r0, #0
 800451c:	49a9      	ldr	r1, [pc, #676]	; (80047c4 <transmit+0x308>)
 800451e:	1c18      	adds	r0, r3, #0
 8004520:	f7fc f910 	bl	8000744 <__aeabi_fmul>
 8004524:	1c03      	adds	r3, r0, #0
 8004526:	1c18      	adds	r0, r3, #0
 8004528:	f7fb ffbe 	bl	80004a8 <__aeabi_f2uiz>
 800452c:	0003      	movs	r3, r0
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4ba2      	ldr	r3, [pc, #648]	; (80047bc <transmit+0x300>)
 8004532:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 8004534:	49a1      	ldr	r1, [pc, #644]	; (80047bc <transmit+0x300>)
 8004536:	4ba4      	ldr	r3, [pc, #656]	; (80047c8 <transmit+0x30c>)
 8004538:	2204      	movs	r2, #4
 800453a:	0018      	movs	r0, r3
 800453c:	f004 ff4e 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 8004540:	4ba2      	ldr	r3, [pc, #648]	; (80047cc <transmit+0x310>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2201      	movs	r2, #1
 8004546:	4252      	negs	r2, r2
 8004548:	0011      	movs	r1, r2
 800454a:	0018      	movs	r0, r3
 800454c:	f009 fdae 	bl	800e0ac <osSemaphoreAcquire>

			// Actualiza el valor de "timestamp1" con el tick actual del sistema

			timestamp1 = HAL_GetTick();
 8004550:	f000 fe0a 	bl	8005168 <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <transmit+0x2f4>)
 8004558:	601a      	str	r2, [r3, #0]
		}

		if(HAL_GetTick() - timestamp2 >= 500)
 800455a:	f000 fe05 	bl	8005168 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	4b94      	ldr	r3, [pc, #592]	; (80047b4 <transmit+0x2f8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1ad2      	subs	r2, r2, r3
 8004566:	23fa      	movs	r3, #250	; 0xfa
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	429a      	cmp	r2, r3
 800456c:	d200      	bcs.n	8004570 <transmit+0xb4>
 800456e:	e0be      	b.n	80046ee <transmit+0x232>
		{
			/* Posicion Servo Local */
			// Construye una trama de datos con la posición del servo local y la envía a través de la interfaz UART

			trama[0] = 0x20;
 8004570:	4b92      	ldr	r3, [pc, #584]	; (80047bc <transmit+0x300>)
 8004572:	2220      	movs	r2, #32
 8004574:	701a      	strb	r2, [r3, #0]
			trama[1] = map(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2), 99, 199, 0, 90);
 8004576:	4b96      	ldr	r3, [pc, #600]	; (80047d0 <transmit+0x314>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800457c:	235a      	movs	r3, #90	; 0x5a
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	22c7      	movs	r2, #199	; 0xc7
 8004584:	2163      	movs	r1, #99	; 0x63
 8004586:	f7fe fc77 	bl	8002e78 <map>
 800458a:	0003      	movs	r3, r0
 800458c:	b2da      	uxtb	r2, r3
 800458e:	4b8b      	ldr	r3, [pc, #556]	; (80047bc <transmit+0x300>)
 8004590:	705a      	strb	r2, [r3, #1]
			trama[2] = 0xff;
 8004592:	4b8a      	ldr	r3, [pc, #552]	; (80047bc <transmit+0x300>)
 8004594:	22ff      	movs	r2, #255	; 0xff
 8004596:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 8004598:	4988      	ldr	r1, [pc, #544]	; (80047bc <transmit+0x300>)
 800459a:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <transmit+0x30c>)
 800459c:	2204      	movs	r2, #4
 800459e:	0018      	movs	r0, r3
 80045a0:	f004 ff1c 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 80045a4:	4b89      	ldr	r3, [pc, #548]	; (80047cc <transmit+0x310>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2201      	movs	r2, #1
 80045aa:	4252      	negs	r2, r2
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f009 fd7c 	bl	800e0ac <osSemaphoreAcquire>

			/* Velocidad Motor Local */
			// Construye una trama de datos con la velocidad del motor local y la envía a través de la interfaz UART

			trama[0] = 0x40;
 80045b4:	4b81      	ldr	r3, [pc, #516]	; (80047bc <transmit+0x300>)
 80045b6:	2240      	movs	r2, #64	; 0x40
 80045b8:	701a      	strb	r2, [r3, #0]
			trama[1] = rpm[periodo-2];
 80045ba:	4b86      	ldr	r3, [pc, #536]	; (80047d4 <transmit+0x318>)
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	1e9a      	subs	r2, r3, #2
 80045c0:	4b85      	ldr	r3, [pc, #532]	; (80047d8 <transmit+0x31c>)
 80045c2:	0092      	lsls	r2, r2, #2
 80045c4:	58d3      	ldr	r3, [r2, r3]
 80045c6:	1c18      	adds	r0, r3, #0
 80045c8:	f7fb ff6e 	bl	80004a8 <__aeabi_f2uiz>
 80045cc:	0003      	movs	r3, r0
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	4b7a      	ldr	r3, [pc, #488]	; (80047bc <transmit+0x300>)
 80045d2:	705a      	strb	r2, [r3, #1]
			trama[2] = 0xff;
 80045d4:	4b79      	ldr	r3, [pc, #484]	; (80047bc <transmit+0x300>)
 80045d6:	22ff      	movs	r2, #255	; 0xff
 80045d8:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 80045da:	4978      	ldr	r1, [pc, #480]	; (80047bc <transmit+0x300>)
 80045dc:	4b7a      	ldr	r3, [pc, #488]	; (80047c8 <transmit+0x30c>)
 80045de:	2204      	movs	r2, #4
 80045e0:	0018      	movs	r0, r3
 80045e2:	f004 fefb 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 80045e6:	4b79      	ldr	r3, [pc, #484]	; (80047cc <transmit+0x310>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	4252      	negs	r2, r2
 80045ee:	0011      	movs	r1, r2
 80045f0:	0018      	movs	r0, r3
 80045f2:	f009 fd5b 	bl	800e0ac <osSemaphoreAcquire>


			if(flag_monitorizacion)
 80045f6:	4b79      	ldr	r3, [pc, #484]	; (80047dc <transmit+0x320>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d072      	beq.n	80046e4 <transmit+0x228>
			{
				PutTxQ.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80045fe:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <transmit+0x324>)
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
				PutTxQ.frame.id = ENVIO_A;
 8004604:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <transmit+0x324>)
 8004606:	2215      	movs	r2, #21
 8004608:	605a      	str	r2, [r3, #4]
				PutTxQ.frame.dlc = 8;
 800460a:	4b75      	ldr	r3, [pc, #468]	; (80047e0 <transmit+0x324>)
 800460c:	2208      	movs	r2, #8
 800460e:	721a      	strb	r2, [r3, #8]

				PutTxQ.frame.data0 = (uint8_t)adc_value.temp;
 8004610:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <transmit+0x304>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	1c18      	adds	r0, r3, #0
 8004616:	f7fb ff47 	bl	80004a8 <__aeabi_f2uiz>
 800461a:	0003      	movs	r3, r0
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <transmit+0x324>)
 8004620:	725a      	strb	r2, [r3, #9]
				PutTxQ.frame.data1 = (uint8_t)((adc_value.temp - PutTxQ.frame.data0)*100);
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <transmit+0x304>)
 8004624:	685c      	ldr	r4, [r3, #4]
 8004626:	4b6e      	ldr	r3, [pc, #440]	; (80047e0 <transmit+0x324>)
 8004628:	7a5b      	ldrb	r3, [r3, #9]
 800462a:	0018      	movs	r0, r3
 800462c:	f7fc fb7e 	bl	8000d2c <__aeabi_i2f>
 8004630:	1c03      	adds	r3, r0, #0
 8004632:	1c19      	adds	r1, r3, #0
 8004634:	1c20      	adds	r0, r4, #0
 8004636:	f7fc f9ab 	bl	8000990 <__aeabi_fsub>
 800463a:	1c03      	adds	r3, r0, #0
 800463c:	4961      	ldr	r1, [pc, #388]	; (80047c4 <transmit+0x308>)
 800463e:	1c18      	adds	r0, r3, #0
 8004640:	f7fc f880 	bl	8000744 <__aeabi_fmul>
 8004644:	1c03      	adds	r3, r0, #0
 8004646:	1c18      	adds	r0, r3, #0
 8004648:	f7fb ff2e 	bl	80004a8 <__aeabi_f2uiz>
 800464c:	0003      	movs	r3, r0
 800464e:	b2da      	uxtb	r2, r3
 8004650:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <transmit+0x324>)
 8004652:	729a      	strb	r2, [r3, #10]
				PutTxQ.frame.data2 = map(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2), 99, 199, 0, 90);
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <transmit+0x314>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800465a:	235a      	movs	r3, #90	; 0x5a
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2300      	movs	r3, #0
 8004660:	22c7      	movs	r2, #199	; 0xc7
 8004662:	2163      	movs	r1, #99	; 0x63
 8004664:	f7fe fc08 	bl	8002e78 <map>
 8004668:	0003      	movs	r3, r0
 800466a:	b2da      	uxtb	r2, r3
 800466c:	4b5c      	ldr	r3, [pc, #368]	; (80047e0 <transmit+0x324>)
 800466e:	72da      	strb	r2, [r3, #11]
				PutTxQ.frame.data3 = (uint8_t)rpm[periodo-2];
 8004670:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <transmit+0x318>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	1e9a      	subs	r2, r3, #2
 8004676:	4b58      	ldr	r3, [pc, #352]	; (80047d8 <transmit+0x31c>)
 8004678:	0092      	lsls	r2, r2, #2
 800467a:	58d3      	ldr	r3, [r2, r3]
 800467c:	1c18      	adds	r0, r3, #0
 800467e:	f7fb ff13 	bl	80004a8 <__aeabi_f2uiz>
 8004682:	0003      	movs	r3, r0
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b56      	ldr	r3, [pc, #344]	; (80047e0 <transmit+0x324>)
 8004688:	731a      	strb	r2, [r3, #12]
				PutTxQ.frame.data4 = (uint8_t)((rpm[periodo-2] - PutTxQ.frame.data3)*100);
 800468a:	4b52      	ldr	r3, [pc, #328]	; (80047d4 <transmit+0x318>)
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	1e9a      	subs	r2, r3, #2
 8004690:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <transmit+0x31c>)
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	58d4      	ldr	r4, [r2, r3]
 8004696:	4b52      	ldr	r3, [pc, #328]	; (80047e0 <transmit+0x324>)
 8004698:	7b1b      	ldrb	r3, [r3, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f7fc fb46 	bl	8000d2c <__aeabi_i2f>
 80046a0:	1c03      	adds	r3, r0, #0
 80046a2:	1c19      	adds	r1, r3, #0
 80046a4:	1c20      	adds	r0, r4, #0
 80046a6:	f7fc f973 	bl	8000990 <__aeabi_fsub>
 80046aa:	1c03      	adds	r3, r0, #0
 80046ac:	4945      	ldr	r1, [pc, #276]	; (80047c4 <transmit+0x308>)
 80046ae:	1c18      	adds	r0, r3, #0
 80046b0:	f7fc f848 	bl	8000744 <__aeabi_fmul>
 80046b4:	1c03      	adds	r3, r0, #0
 80046b6:	1c18      	adds	r0, r3, #0
 80046b8:	f7fb fef6 	bl	80004a8 <__aeabi_f2uiz>
 80046bc:	0003      	movs	r3, r0
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <transmit+0x324>)
 80046c2:	735a      	strb	r2, [r3, #13]
				PutTxQ.frame.data5 = 0x1;
 80046c4:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <transmit+0x324>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	739a      	strb	r2, [r3, #14]
				PutTxQ.frame.data6 = 0xC;
 80046ca:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <transmit+0x324>)
 80046cc:	220c      	movs	r2, #12
 80046ce:	73da      	strb	r2, [r3, #15]
				PutTxQ.frame.data7 = 0x1;
 80046d0:	4b43      	ldr	r3, [pc, #268]	; (80047e0 <transmit+0x324>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	741a      	strb	r2, [r3, #16]

				osMessageQueuePut(can_queueHandle, &PutTxQ, 0U, 0U);
 80046d6:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <transmit+0x328>)
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	4941      	ldr	r1, [pc, #260]	; (80047e0 <transmit+0x324>)
 80046dc:	2300      	movs	r3, #0
 80046de:	2200      	movs	r2, #0
 80046e0:	f009 fe16 	bl	800e310 <osMessageQueuePut>
			}


			// Actualiza el valor de "timestamp2" con el tick actual del sistema
			timestamp2 = HAL_GetTick();
 80046e4:	f000 fd40 	bl	8005168 <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <transmit+0x2f8>)
 80046ec:	601a      	str	r2, [r3, #0]
		}


		if(datos_rmt)
 80046ee:	4b3e      	ldr	r3, [pc, #248]	; (80047e8 <transmit+0x32c>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d058      	beq.n	80047a8 <transmit+0x2ec>
		{
			// Adquiere el mutex "CanTx_mtxHandle" para proteger el acceso a los datos remotos de la posición del
			// servo, temperatura y velocidad del motor

			osMutexAcquire(CanUart_mtxHandle, osWaitForever);
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <transmit+0x330>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4252      	negs	r2, r2
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f009 fb8b 	bl	800de1c <osMutexAcquire>

			/* Posicion Servo Remota */
			// Construye una trama de datos con la posición del servo remoto y la envía a través de la interfaz UART

			trama[0] = 0x21;
 8004706:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <transmit+0x300>)
 8004708:	2221      	movs	r2, #33	; 0x21
 800470a:	701a      	strb	r2, [r3, #0]
			trama[1] = servo_rmt;
 800470c:	4b38      	ldr	r3, [pc, #224]	; (80047f0 <transmit+0x334>)
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <transmit+0x300>)
 8004712:	705a      	strb	r2, [r3, #1]
			trama[2] = 0xff;
 8004714:	4b29      	ldr	r3, [pc, #164]	; (80047bc <transmit+0x300>)
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 800471a:	4928      	ldr	r1, [pc, #160]	; (80047bc <transmit+0x300>)
 800471c:	4b2a      	ldr	r3, [pc, #168]	; (80047c8 <transmit+0x30c>)
 800471e:	2204      	movs	r2, #4
 8004720:	0018      	movs	r0, r3
 8004722:	f004 fe5b 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 8004726:	4b29      	ldr	r3, [pc, #164]	; (80047cc <transmit+0x310>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	4252      	negs	r2, r2
 800472e:	0011      	movs	r1, r2
 8004730:	0018      	movs	r0, r3
 8004732:	f009 fcbb 	bl	800e0ac <osSemaphoreAcquire>

			/* Temperatura Remota */
			// Construye una trama de datos con la temperatura remota y la envía a través de la interfaz UART

			trama[0] = 0x31;
 8004736:	4b21      	ldr	r3, [pc, #132]	; (80047bc <transmit+0x300>)
 8004738:	2231      	movs	r2, #49	; 0x31
 800473a:	701a      	strb	r2, [r3, #0]
			trama[1] = temp_rmt_ent;
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <transmit+0x338>)
 800473e:	781a      	ldrb	r2, [r3, #0]
 8004740:	4b1e      	ldr	r3, [pc, #120]	; (80047bc <transmit+0x300>)
 8004742:	705a      	strb	r2, [r3, #1]
			trama[2] = temp_rmt_dec;
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <transmit+0x33c>)
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <transmit+0x300>)
 800474a:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 800474c:	491b      	ldr	r1, [pc, #108]	; (80047bc <transmit+0x300>)
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <transmit+0x30c>)
 8004750:	2204      	movs	r2, #4
 8004752:	0018      	movs	r0, r3
 8004754:	f004 fe42 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 8004758:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <transmit+0x310>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4252      	negs	r2, r2
 8004760:	0011      	movs	r1, r2
 8004762:	0018      	movs	r0, r3
 8004764:	f009 fca2 	bl	800e0ac <osSemaphoreAcquire>

			/* Velocidad Motor Remota */
			// Construye una trama de datos con la velocidad del motor remoto y la envía a través de la interfaz UART

			trama[0] = 0x41;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <transmit+0x300>)
 800476a:	2241      	movs	r2, #65	; 0x41
 800476c:	701a      	strb	r2, [r3, #0]
			trama[1] = rpm_rmt_ent;
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <transmit+0x340>)
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <transmit+0x300>)
 8004774:	705a      	strb	r2, [r3, #1]
			trama[2] = 0xff;
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <transmit+0x300>)
 8004778:	22ff      	movs	r2, #255	; 0xff
 800477a:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart2, trama, 4);
 800477c:	490f      	ldr	r1, [pc, #60]	; (80047bc <transmit+0x300>)
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <transmit+0x30c>)
 8004780:	2204      	movs	r2, #4
 8004782:	0018      	movs	r0, r3
 8004784:	f004 fe2a 	bl	80093dc <HAL_UART_Transmit_IT>

			// Bloquea el hilo hasta que se complete la transmisión

			osSemaphoreAcquire(Tx_SemHandle, osWaitForever);
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <transmit+0x310>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	4252      	negs	r2, r2
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f009 fc8a 	bl	800e0ac <osSemaphoreAcquire>

			// Establece "datos_rmt" en falso y libera el mutex "CanUart_mtxHandle"

			datos_rmt = false;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <transmit+0x32c>)
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
			osMutexRelease(CanUart_mtxHandle);
 800479e:	4b13      	ldr	r3, [pc, #76]	; (80047ec <transmit+0x330>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0018      	movs	r0, r3
 80047a4:	f009 fb96 	bl	800ded4 <osMutexRelease>
		}

		// Retrasa el hilo durante 50 milisegundos
		osDelay(50);
 80047a8:	2032      	movs	r0, #50	; 0x32
 80047aa:	f009 fa75 	bl	800dc98 <osDelay>
		if(HAL_GetTick() - timestamp1 >= periodo_temp)
 80047ae:	e692      	b.n	80044d6 <transmit+0x1a>
 80047b0:	20000640 	.word	0x20000640
 80047b4:	20000644 	.word	0x20000644
 80047b8:	20000012 	.word	0x20000012
 80047bc:	20000060 	.word	0x20000060
 80047c0:	20000000 	.word	0x20000000
 80047c4:	42c80000 	.word	0x42c80000
 80047c8:	20000484 	.word	0x20000484
 80047cc:	20000544 	.word	0x20000544
 80047d0:	2000043c 	.word	0x2000043c
 80047d4:	20000010 	.word	0x20000010
 80047d8:	20000268 	.word	0x20000268
 80047dc:	200005f7 	.word	0x200005f7
 80047e0:	20000648 	.word	0x20000648
 80047e4:	20000538 	.word	0x20000538
 80047e8:	200005f1 	.word	0x200005f1
 80047ec:	2000053c 	.word	0x2000053c
 80047f0:	200005f4 	.word	0x200005f4
 80047f4:	200005f2 	.word	0x200005f2
 80047f8:	200005f3 	.word	0x200005f3
 80047fc:	200005f5 	.word	0x200005f5

08004800 <can_receive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_receive */
void can_receive(void *argument)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Can_rx_semHandle, osWaitForever);
 8004808:	4b40      	ldr	r3, [pc, #256]	; (800490c <can_receive+0x10c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	4252      	negs	r2, r2
 8004810:	0011      	movs	r1, r2
 8004812:	0018      	movs	r0, r3
 8004814:	f009 fc4a 	bl	800e0ac <osSemaphoreAcquire>
		if(CANSPI_Receive(CAN2, &RxCanmsg))
 8004818:	4a3d      	ldr	r2, [pc, #244]	; (8004910 <can_receive+0x110>)
 800481a:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <can_receive+0x114>)
 800481c:	0011      	movs	r1, r2
 800481e:	0018      	movs	r0, r3
 8004820:	f006 f9ce 	bl	800abc0 <CANSPI_Receive>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d0ef      	beq.n	8004808 <can_receive+0x8>
		{
			switch(RxCanmsg.frame.id)
 8004828:	4b39      	ldr	r3, [pc, #228]	; (8004910 <can_receive+0x110>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b15      	cmp	r3, #21
 800482e:	d029      	beq.n	8004884 <can_receive+0x84>
 8004830:	2b22      	cmp	r3, #34	; 0x22
 8004832:	d15c      	bne.n	80048ee <can_receive+0xee>
			{
			case ME_ORDENA:

				if(RxCanmsg.frame.dlc != 8) break;
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <can_receive+0x110>)
 8004836:	7a1b      	ldrb	r3, [r3, #8]
 8004838:	2b08      	cmp	r3, #8
 800483a:	d15a      	bne.n	80048f2 <can_receive+0xf2>
				if(RxCanmsg.frame.data0!=0 && RxCanmsg.frame.data1!=0 &&
 800483c:	4b34      	ldr	r3, [pc, #208]	; (8004910 <can_receive+0x110>)
 800483e:	7a5b      	ldrb	r3, [r3, #9]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <can_receive+0x7c>
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <can_receive+0x110>)
 8004846:	7a9b      	ldrb	r3, [r3, #10]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d017      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data2!=0 && RxCanmsg.frame.data3!=0 &&
 800484c:	4b30      	ldr	r3, [pc, #192]	; (8004910 <can_receive+0x110>)
 800484e:	7adb      	ldrb	r3, [r3, #11]
				if(RxCanmsg.frame.data0!=0 && RxCanmsg.frame.data1!=0 &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data2!=0 && RxCanmsg.frame.data3!=0 &&
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <can_receive+0x110>)
 8004856:	7b1b      	ldrb	r3, [r3, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00f      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data4!=0 && RxCanmsg.frame.data5!=0 &&
 800485c:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <can_receive+0x110>)
 800485e:	7b5b      	ldrb	r3, [r3, #13]
						RxCanmsg.frame.data2!=0 && RxCanmsg.frame.data3!=0 &&
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data4!=0 && RxCanmsg.frame.data5!=0 &&
 8004864:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <can_receive+0x110>)
 8004866:	7b9b      	ldrb	r3, [r3, #14]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data6!=0 && RxCanmsg.frame.data7!=0) break;
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <can_receive+0x110>)
 800486e:	7bdb      	ldrb	r3, [r3, #15]
						RxCanmsg.frame.data4!=0 && RxCanmsg.frame.data5!=0 &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <can_receive+0x7c>
						RxCanmsg.frame.data6!=0 && RxCanmsg.frame.data7!=0) break;
 8004874:	4b26      	ldr	r3, [pc, #152]	; (8004910 <can_receive+0x110>)
 8004876:	7c1b      	ldrb	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d13c      	bne.n	80048f6 <can_receive+0xf6>
				flag_monitorizacion = true;
 800487c:	4b26      	ldr	r3, [pc, #152]	; (8004918 <can_receive+0x118>)
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]

				break;
 8004882:	e03d      	b.n	8004900 <can_receive+0x100>
			case ME_ENVIA:

				if(RxCanmsg.frame.dlc != 8) break;
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <can_receive+0x110>)
 8004886:	7a1b      	ldrb	r3, [r3, #8]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d136      	bne.n	80048fa <can_receive+0xfa>
				if(RxCanmsg.frame.data5!=0x1 && RxCanmsg.frame.data6!=0xC &&
 800488c:	4b20      	ldr	r3, [pc, #128]	; (8004910 <can_receive+0x110>)
 800488e:	7b9b      	ldrb	r3, [r3, #14]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d007      	beq.n	80048a4 <can_receive+0xa4>
 8004894:	4b1e      	ldr	r3, [pc, #120]	; (8004910 <can_receive+0x110>)
 8004896:	7bdb      	ldrb	r3, [r3, #15]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d003      	beq.n	80048a4 <can_receive+0xa4>
						RxCanmsg.frame.data7!=0x1) break;
 800489c:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <can_receive+0x110>)
 800489e:	7c1b      	ldrb	r3, [r3, #16]
				if(RxCanmsg.frame.data5!=0x1 && RxCanmsg.frame.data6!=0xC &&
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d12c      	bne.n	80048fe <can_receive+0xfe>
				osMutexAcquire(CanUart_mtxHandle, osWaitForever);
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <can_receive+0x11c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4252      	negs	r2, r2
 80048ac:	0011      	movs	r1, r2
 80048ae:	0018      	movs	r0, r3
 80048b0:	f009 fab4 	bl	800de1c <osMutexAcquire>
				datos_rmt = true;
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <can_receive+0x120>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	701a      	strb	r2, [r3, #0]
				temp_rmt_ent = RxCanmsg.frame.data0;
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <can_receive+0x110>)
 80048bc:	7a5a      	ldrb	r2, [r3, #9]
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <can_receive+0x124>)
 80048c0:	701a      	strb	r2, [r3, #0]
				temp_rmt_dec = RxCanmsg.frame.data1;
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <can_receive+0x110>)
 80048c4:	7a9a      	ldrb	r2, [r3, #10]
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <can_receive+0x128>)
 80048c8:	701a      	strb	r2, [r3, #0]
				servo_rmt = RxCanmsg.frame.data2;
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <can_receive+0x110>)
 80048cc:	7ada      	ldrb	r2, [r3, #11]
 80048ce:	4b17      	ldr	r3, [pc, #92]	; (800492c <can_receive+0x12c>)
 80048d0:	701a      	strb	r2, [r3, #0]
				rpm_rmt_ent = RxCanmsg.frame.data3;
 80048d2:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <can_receive+0x110>)
 80048d4:	7b1a      	ldrb	r2, [r3, #12]
 80048d6:	4b16      	ldr	r3, [pc, #88]	; (8004930 <can_receive+0x130>)
 80048d8:	701a      	strb	r2, [r3, #0]
				rpm_rmt_dec = RxCanmsg.frame.data4;
 80048da:	4b0d      	ldr	r3, [pc, #52]	; (8004910 <can_receive+0x110>)
 80048dc:	7b5a      	ldrb	r2, [r3, #13]
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <can_receive+0x134>)
 80048e0:	701a      	strb	r2, [r3, #0]
				osMutexRelease(CanUart_mtxHandle);
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <can_receive+0x11c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f009 faf4 	bl	800ded4 <osMutexRelease>

				break;
 80048ec:	e008      	b.n	8004900 <can_receive+0x100>
			default:
				break;
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	e006      	b.n	8004900 <can_receive+0x100>
				if(RxCanmsg.frame.dlc != 8) break;
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	e004      	b.n	8004900 <can_receive+0x100>
						RxCanmsg.frame.data6!=0 && RxCanmsg.frame.data7!=0) break;
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	e002      	b.n	8004900 <can_receive+0x100>
				if(RxCanmsg.frame.dlc != 8) break;
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	e000      	b.n	8004900 <can_receive+0x100>
						RxCanmsg.frame.data7!=0x1) break;
 80048fe:	46c0      	nop			; (mov r8, r8)
			}
			CANSPI_CL_Flag_Int(CAN2);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <can_receive+0x114>)
 8004902:	0018      	movs	r0, r3
 8004904:	f005 ffc9 	bl	800a89a <CANSPI_CL_Flag_Int>
		osSemaphoreAcquire(Can_rx_semHandle, osWaitForever);
 8004908:	e77e      	b.n	8004808 <can_receive+0x8>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	2000054c 	.word	0x2000054c
 8004910:	2000065c 	.word	0x2000065c
 8004914:	200003d8 	.word	0x200003d8
 8004918:	200005f7 	.word	0x200005f7
 800491c:	2000053c 	.word	0x2000053c
 8004920:	200005f1 	.word	0x200005f1
 8004924:	200005f2 	.word	0x200005f2
 8004928:	200005f3 	.word	0x200005f3
 800492c:	200005f4 	.word	0x200005f4
 8004930:	200005f5 	.word	0x200005f5
 8004934:	200005f6 	.word	0x200005f6

08004938 <can_transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_transmit */
void can_transmit(void *argument)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(Can_tx_semHandle, osWaitForever);
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <can_transmit+0x40>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2201      	movs	r2, #1
 8004946:	4252      	negs	r2, r2
 8004948:	0011      	movs	r1, r2
 800494a:	0018      	movs	r0, r3
 800494c:	f009 fbae 	bl	800e0ac <osSemaphoreAcquire>
		osMessageQueueGet(can_queueHandle, &TxCanmsg, 0U, osWaitForever);
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <can_transmit+0x44>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	2301      	movs	r3, #1
 8004956:	425b      	negs	r3, r3
 8004958:	4909      	ldr	r1, [pc, #36]	; (8004980 <can_transmit+0x48>)
 800495a:	2200      	movs	r2, #0
 800495c:	f009 fd42 	bl	800e3e4 <osMessageQueueGet>
		CANSPI_CL_Flag_Int(CAN1);
 8004960:	4b08      	ldr	r3, [pc, #32]	; (8004984 <can_transmit+0x4c>)
 8004962:	0018      	movs	r0, r3
 8004964:	f005 ff99 	bl	800a89a <CANSPI_CL_Flag_Int>
		CANSPI_Transmit(CAN1, &TxCanmsg);
 8004968:	4a05      	ldr	r2, [pc, #20]	; (8004980 <can_transmit+0x48>)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <can_transmit+0x4c>)
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f006 f894 	bl	800aa9c <CANSPI_Transmit>
		osSemaphoreAcquire(Can_tx_semHandle, osWaitForever);
 8004974:	e7e4      	b.n	8004940 <can_transmit+0x8>
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	20000548 	.word	0x20000548
 800497c:	20000538 	.word	0x20000538
 8004980:	20000670 	.word	0x20000670
 8004984:	20000374 	.word	0x20000374

08004988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800499a:	f000 fbd3 	bl	8005144 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	40012c00 	.word	0x40012c00

080049ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049b0:	b672      	cpsid	i
}
 80049b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <Error_Handler+0x8>
	...

080049b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_MspInit+0x50>)
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_MspInit+0x50>)
 80049c4:	2101      	movs	r1, #1
 80049c6:	430a      	orrs	r2, r1
 80049c8:	619a      	str	r2, [r3, #24]
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_MspInit+0x50>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2201      	movs	r2, #1
 80049d0:	4013      	ands	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_MspInit+0x50>)
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <HAL_MspInit+0x50>)
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	0549      	lsls	r1, r1, #21
 80049e0:	430a      	orrs	r2, r1
 80049e2:	61da      	str	r2, [r3, #28]
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_MspInit+0x50>)
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	055b      	lsls	r3, r3, #21
 80049ec:	4013      	ands	r3, r2
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80049f2:	2302      	movs	r3, #2
 80049f4:	425b      	negs	r3, r3
 80049f6:	2200      	movs	r2, #0
 80049f8:	2103      	movs	r1, #3
 80049fa:	0018      	movs	r0, r3
 80049fc:	f001 f9f6 	bl	8005dec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b08b      	sub	sp, #44	; 0x2c
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	2414      	movs	r4, #20
 8004a16:	193b      	adds	r3, r7, r4
 8004a18:	0018      	movs	r0, r3
 8004a1a:	2314      	movs	r3, #20
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	2100      	movs	r1, #0
 8004a20:	f00c fd0c 	bl	801143c <memset>
  if(hadc->Instance==ADC1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <HAL_ADC_MspInit+0x94>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d133      	bne.n	8004a96 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a34:	2180      	movs	r1, #128	; 0x80
 8004a36:	0089      	lsls	r1, r1, #2
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0289      	lsls	r1, r1, #10
 8004a54:	430a      	orrs	r2, r1
 8004a56:	615a      	str	r2, [r3, #20]
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_ADC_MspInit+0x98>)
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	2203      	movs	r2, #3
 8004a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a6c:	193b      	adds	r3, r7, r4
 8004a6e:	2203      	movs	r2, #3
 8004a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a78:	193a      	adds	r2, r7, r4
 8004a7a:	2390      	movs	r3, #144	; 0x90
 8004a7c:	05db      	lsls	r3, r3, #23
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f001 fa55 	bl	8005f30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 3, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	2103      	movs	r1, #3
 8004a8a:	200c      	movs	r0, #12
 8004a8c:	f001 f9ae 	bl	8005dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004a90:	200c      	movs	r0, #12
 8004a92:	f001 f9c0 	bl	8005e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b00b      	add	sp, #44	; 0x2c
 8004a9c:	bd90      	pop	{r4, r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	40012400 	.word	0x40012400
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08b      	sub	sp, #44	; 0x2c
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	2414      	movs	r4, #20
 8004ab2:	193b      	adds	r3, r7, r4
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	2314      	movs	r3, #20
 8004ab8:	001a      	movs	r2, r3
 8004aba:	2100      	movs	r1, #0
 8004abc:	f00c fcbe 	bl	801143c <memset>
  if(hi2c->Instance==I2C1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1c      	ldr	r2, [pc, #112]	; (8004b38 <HAL_I2C_MspInit+0x90>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d132      	bne.n	8004b30 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	4b1c      	ldr	r3, [pc, #112]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004ad0:	2180      	movs	r1, #128	; 0x80
 8004ad2:	02c9      	lsls	r1, r1, #11
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	615a      	str	r2, [r3, #20]
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	02db      	lsls	r3, r3, #11
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ae6:	193b      	adds	r3, r7, r4
 8004ae8:	22c0      	movs	r2, #192	; 0xc0
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aee:	0021      	movs	r1, r4
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	2212      	movs	r2, #18
 8004af4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	2203      	movs	r2, #3
 8004b00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004b02:	187b      	adds	r3, r7, r1
 8004b04:	2201      	movs	r2, #1
 8004b06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b08:	187b      	adds	r3, r7, r1
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <HAL_I2C_MspInit+0x98>)
 8004b0c:	0019      	movs	r1, r3
 8004b0e:	0010      	movs	r0, r2
 8004b10:	f001 fa0e 	bl	8005f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	0389      	lsls	r1, r1, #14
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <HAL_I2C_MspInit+0x94>)
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	2380      	movs	r3, #128	; 0x80
 8004b28:	039b      	lsls	r3, r3, #14
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b00b      	add	sp, #44	; 0x2c
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	40005400 	.word	0x40005400
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	48000400 	.word	0x48000400

08004b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b08d      	sub	sp, #52	; 0x34
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4c:	241c      	movs	r4, #28
 8004b4e:	193b      	adds	r3, r7, r4
 8004b50:	0018      	movs	r0, r3
 8004b52:	2314      	movs	r3, #20
 8004b54:	001a      	movs	r2, r3
 8004b56:	2100      	movs	r1, #0
 8004b58:	f00c fc70 	bl	801143c <memset>
  if(hspi->Instance==SPI1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a39      	ldr	r2, [pc, #228]	; (8004c48 <HAL_SPI_MspInit+0x104>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d133      	bne.n	8004bce <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b68:	699a      	ldr	r2, [r3, #24]
 8004b6a:	4b38      	ldr	r3, [pc, #224]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	0149      	lsls	r1, r1, #5
 8004b70:	430a      	orrs	r2, r1
 8004b72:	619a      	str	r2, [r3, #24]
 8004b74:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	015b      	lsls	r3, r3, #5
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b82:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	4b31      	ldr	r3, [pc, #196]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b88:	2180      	movs	r1, #128	; 0x80
 8004b8a:	0289      	lsls	r1, r1, #10
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	615a      	str	r2, [r3, #20]
 8004b90:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	029b      	lsls	r3, r3, #10
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004b9e:	0021      	movs	r1, r4
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	22e0      	movs	r2, #224	; 0xe0
 8004ba4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	2202      	movs	r2, #2
 8004baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bbe:	187a      	adds	r2, r7, r1
 8004bc0:	2390      	movs	r3, #144	; 0x90
 8004bc2:	05db      	lsls	r3, r3, #23
 8004bc4:	0011      	movs	r1, r2
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f001 f9b2 	bl	8005f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004bcc:	e037      	b.n	8004c3e <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <HAL_SPI_MspInit+0x10c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d132      	bne.n	8004c3e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004bde:	2180      	movs	r1, #128	; 0x80
 8004be0:	01c9      	lsls	r1, r1, #7
 8004be2:	430a      	orrs	r2, r1
 8004be4:	61da      	str	r2, [r3, #28]
 8004be6:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf4:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	02c9      	lsls	r1, r1, #11
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	615a      	str	r2, [r3, #20]
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_SPI_MspInit+0x108>)
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	02db      	lsls	r3, r3, #11
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004c10:	211c      	movs	r1, #28
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	22e0      	movs	r2, #224	; 0xe0
 8004c16:	0212      	lsls	r2, r2, #8
 8004c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	2203      	movs	r2, #3
 8004c2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_SPI_MspInit+0x110>)
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f001 f979 	bl	8005f30 <HAL_GPIO_Init>
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b00d      	add	sp, #52	; 0x34
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	40013000 	.word	0x40013000
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40003800 	.word	0x40003800
 8004c54:	48000400 	.word	0x48000400

08004c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <HAL_TIM_Base_MspInit+0x34>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10b      	bne.n	8004c82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_TIM_Base_MspInit+0x38>)
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <HAL_TIM_Base_MspInit+0x38>)
 8004c70:	2102      	movs	r1, #2
 8004c72:	430a      	orrs	r2, r1
 8004c74:	61da      	str	r2, [r3, #28]
 8004c76:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <HAL_TIM_Base_MspInit+0x38>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b004      	add	sp, #16
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40021000 	.word	0x40021000

08004c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	240c      	movs	r4, #12
 8004c9e:	193b      	adds	r3, r7, r4
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	2314      	movs	r3, #20
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	f00c fbc8 	bl	801143c <memset>
  if(htim->Instance==TIM3)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <HAL_TIM_MspPostInit+0x74>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d123      	bne.n	8004cfe <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_TIM_MspPostInit+0x78>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_TIM_MspPostInit+0x78>)
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	0309      	lsls	r1, r1, #12
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	615a      	str	r2, [r3, #20]
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_TIM_MspPostInit+0x78>)
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	031b      	lsls	r3, r3, #12
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004cd2:	0021      	movs	r1, r4
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	2202      	movs	r2, #2
 8004cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	187b      	adds	r3, r7, r1
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce6:	187b      	adds	r3, r7, r1
 8004ce8:	2200      	movs	r2, #0
 8004cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf2:	187b      	adds	r3, r7, r1
 8004cf4:	4a06      	ldr	r2, [pc, #24]	; (8004d10 <HAL_TIM_MspPostInit+0x7c>)
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	0010      	movs	r0, r2
 8004cfa:	f001 f919 	bl	8005f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b009      	add	sp, #36	; 0x24
 8004d04:	bd90      	pop	{r4, r7, pc}
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	48000800 	.word	0x48000800

08004d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b08b      	sub	sp, #44	; 0x2c
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1c:	2414      	movs	r4, #20
 8004d1e:	193b      	adds	r3, r7, r4
 8004d20:	0018      	movs	r0, r3
 8004d22:	2314      	movs	r3, #20
 8004d24:	001a      	movs	r2, r3
 8004d26:	2100      	movs	r1, #0
 8004d28:	f00c fb88 	bl	801143c <memset>
  if(huart->Instance==USART2)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <HAL_UART_MspInit+0xa0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d13a      	bne.n	8004dac <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	0289      	lsls	r1, r1, #10
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
 8004d44:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	0289      	lsls	r1, r1, #10
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	615a      	str	r2, [r3, #20]
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_UART_MspInit+0xa4>)
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	029b      	lsls	r3, r3, #10
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d6e:	0021      	movs	r1, r4
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	220c      	movs	r2, #12
 8004d74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	2202      	movs	r2, #2
 8004d7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d82:	187b      	adds	r3, r7, r1
 8004d84:	2203      	movs	r2, #3
 8004d86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d8e:	187a      	adds	r2, r7, r1
 8004d90:	2390      	movs	r3, #144	; 0x90
 8004d92:	05db      	lsls	r3, r3, #23
 8004d94:	0011      	movs	r1, r2
 8004d96:	0018      	movs	r0, r3
 8004d98:	f001 f8ca 	bl	8005f30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2103      	movs	r1, #3
 8004da0:	201c      	movs	r0, #28
 8004da2:	f001 f823 	bl	8005dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004da6:	201c      	movs	r0, #28
 8004da8:	f001 f835 	bl	8005e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b00b      	add	sp, #44	; 0x2c
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	40004400 	.word	0x40004400
 8004db8:	40021000 	.word	0x40021000

08004dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b08c      	sub	sp, #48	; 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004dcc:	4b38      	ldr	r3, [pc, #224]	; (8004eb0 <HAL_InitTick+0xf4>)
 8004dce:	699a      	ldr	r2, [r3, #24]
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_InitTick+0xf4>)
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	0109      	lsls	r1, r1, #4
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	619a      	str	r2, [r3, #24]
 8004dda:	4b35      	ldr	r3, [pc, #212]	; (8004eb0 <HAL_InitTick+0xf4>)
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	4013      	ands	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004de8:	230c      	movs	r3, #12
 8004dea:	18fa      	adds	r2, r7, r3
 8004dec:	2410      	movs	r4, #16
 8004dee:	193b      	adds	r3, r7, r4
 8004df0:	0011      	movs	r1, r2
 8004df2:	0018      	movs	r0, r3
 8004df4:	f002 fa7a 	bl	80072ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004df8:	193b      	adds	r3, r7, r4
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e04:	f002 fa5c 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0c:	e004      	b.n	8004e18 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e0e:	f002 fa57 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 8004e12:	0003      	movs	r3, r0
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	4926      	ldr	r1, [pc, #152]	; (8004eb4 <HAL_InitTick+0xf8>)
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7fb f98f 	bl	8000140 <__udivsi3>
 8004e22:	0003      	movs	r3, r0
 8004e24:	3b01      	subs	r3, #1
 8004e26:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e28:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e2a:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <HAL_InitTick+0x100>)
 8004e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e30:	4a23      	ldr	r2, [pc, #140]	; (8004ec0 <HAL_InitTick+0x104>)
 8004e32:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e34:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004e4c:	252b      	movs	r5, #43	; 0x2b
 8004e4e:	197c      	adds	r4, r7, r5
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e52:	0018      	movs	r0, r3
 8004e54:	f003 fa60 	bl	8008318 <HAL_TIM_Base_Init>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004e5c:	197b      	adds	r3, r7, r5
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d11e      	bne.n	8004ea2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004e64:	197c      	adds	r4, r7, r5
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_InitTick+0xfc>)
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f003 faa5 	bl	80083b8 <HAL_TIM_Base_Start_IT>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004e72:	197b      	adds	r3, r7, r5
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d113      	bne.n	8004ea2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004e7a:	200d      	movs	r0, #13
 8004e7c:	f000 ffcb 	bl	8005e16 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d809      	bhi.n	8004e9a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	200d      	movs	r0, #13
 8004e8e:	f000 ffad 	bl	8005dec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_InitTick+0x108>)
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e003      	b.n	8004ea2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8004e9a:	232b      	movs	r3, #43	; 0x2b
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004ea2:	232b      	movs	r3, #43	; 0x2b
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	781b      	ldrb	r3, [r3, #0]
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b00c      	add	sp, #48	; 0x30
 8004eae:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	000f4240 	.word	0x000f4240
 8004eb8:	20000684 	.word	0x20000684
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	000003e7 	.word	0x000003e7
 8004ec4:	20000068 	.word	0x20000068

08004ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <NMI_Handler+0x4>

08004ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <HardFault_Handler+0x4>

08004ed4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ican2_Pin);
 8004ed8:	2010      	movs	r0, #16
 8004eda:	f001 f9b7 	bl	800624c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ican1_Pin);
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f001 f9b2 	bl	800624c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	019b      	lsls	r3, r3, #6
 8004eec:	0018      	movs	r0, r3
 8004eee:	f001 f9ad 	bl	800624c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004efc:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <ADC1_IRQHandler+0x14>)
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 fb44 	bl	800558c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200002e8 	.word	0x200002e8

08004f10 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8004f16:	0018      	movs	r0, r3
 8004f18:	f003 fba4 	bl	8008664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	20000684 	.word	0x20000684

08004f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <USART2_IRQHandler+0x14>)
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f004 fad4 	bl	80094dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	20000484 	.word	0x20000484

08004f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
	return 1;
 8004f44:	2301      	movs	r3, #1
}
 8004f46:	0018      	movs	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_kill>:

int _kill(int pid, int sig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f56:	f00c f939 	bl	80111cc <__errno>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	2216      	movs	r2, #22
 8004f5e:	601a      	str	r2, [r3, #0]
	return -1;
 8004f60:	2301      	movs	r3, #1
 8004f62:	425b      	negs	r3, r3
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_exit>:

void _exit (int status)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f74:	2301      	movs	r3, #1
 8004f76:	425a      	negs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	0011      	movs	r1, r2
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7ff ffe5 	bl	8004f4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f82:	e7fe      	b.n	8004f82 <_exit+0x16>

08004f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e00a      	b.n	8004fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f96:	e000      	b.n	8004f9a <_read+0x16>
 8004f98:	bf00      	nop
 8004f9a:	0001      	movs	r1, r0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	60ba      	str	r2, [r7, #8]
 8004fa2:	b2ca      	uxtb	r2, r1
 8004fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dbf0      	blt.n	8004f96 <_read+0x12>
	}

return len;
 8004fb4:	687b      	ldr	r3, [r7, #4]
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b006      	add	sp, #24
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e009      	b.n	8004fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	60ba      	str	r2, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	e000      	b.n	8004fde <_write+0x20>
 8004fdc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	dbf1      	blt.n	8004fd0 <_write+0x12>
	}
	return len;
 8004fec:	687b      	ldr	r3, [r7, #4]
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b006      	add	sp, #24
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_close>:

int _close(int file)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	425b      	negs	r3, r3
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}

0800500a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	0192      	lsls	r2, r2, #6
 800501a:	605a      	str	r2, [r3, #4]
	return 0;
 800501c:	2300      	movs	r3, #0
}
 800501e:	0018      	movs	r0, r3
 8005020:	46bd      	mov	sp, r7
 8005022:	b002      	add	sp, #8
 8005024:	bd80      	pop	{r7, pc}

08005026 <_isatty>:

int _isatty(int file)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
	return 1;
 800502e:	2301      	movs	r3, #1
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b002      	add	sp, #8
 8005036:	bd80      	pop	{r7, pc}

08005038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	return 0;
 8005044:	2300      	movs	r3, #0
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b004      	add	sp, #16
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005058:	4a14      	ldr	r2, [pc, #80]	; (80050ac <_sbrk+0x5c>)
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <_sbrk+0x60>)
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <_sbrk+0x64>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d102      	bne.n	8005072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <_sbrk+0x64>)
 800506e:	4a12      	ldr	r2, [pc, #72]	; (80050b8 <_sbrk+0x68>)
 8005070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005072:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <_sbrk+0x64>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	18d3      	adds	r3, r2, r3
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	429a      	cmp	r2, r3
 800507e:	d207      	bcs.n	8005090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005080:	f00c f8a4 	bl	80111cc <__errno>
 8005084:	0003      	movs	r3, r0
 8005086:	220c      	movs	r2, #12
 8005088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800508a:	2301      	movs	r3, #1
 800508c:	425b      	negs	r3, r3
 800508e:	e009      	b.n	80050a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <_sbrk+0x64>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <_sbrk+0x64>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	18d2      	adds	r2, r2, r3
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <_sbrk+0x64>)
 80050a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	0018      	movs	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b006      	add	sp, #24
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20004000 	.word	0x20004000
 80050b0:	00000400 	.word	0x00000400
 80050b4:	200006cc 	.word	0x200006cc
 80050b8:	20002ef0 	.word	0x20002ef0

080050bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050c8:	480d      	ldr	r0, [pc, #52]	; (8005100 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050cc:	480d      	ldr	r0, [pc, #52]	; (8005104 <LoopForever+0x6>)
  ldr r1, =_edata
 80050ce:	490e      	ldr	r1, [pc, #56]	; (8005108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050d0:	4a0e      	ldr	r2, [pc, #56]	; (800510c <LoopForever+0xe>)
  movs r3, #0
 80050d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050d4:	e002      	b.n	80050dc <LoopCopyDataInit>

080050d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050da:	3304      	adds	r3, #4

080050dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050e0:	d3f9      	bcc.n	80050d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050e4:	4c0b      	ldr	r4, [pc, #44]	; (8005114 <LoopForever+0x16>)
  movs r3, #0
 80050e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050e8:	e001      	b.n	80050ee <LoopFillZerobss>

080050ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050ec:	3204      	adds	r2, #4

080050ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050f0:	d3fb      	bcc.n	80050ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80050f2:	f7ff ffe3 	bl	80050bc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80050f6:	f00c f971 	bl	80113dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050fa:	f7fe f86d 	bl	80031d8 <main>

080050fe <LoopForever>:

LoopForever:
    b LoopForever
 80050fe:	e7fe      	b.n	80050fe <LoopForever>
  ldr   r0, =_estack
 8005100:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005108:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 800510c:	08016638 	.word	0x08016638
  ldr r2, =_sbss
 8005110:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8005114:	20002ef0 	.word	0x20002ef0

08005118 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005118:	e7fe      	b.n	8005118 <DMA1_Channel1_IRQHandler>
	...

0800511c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_Init+0x24>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_Init+0x24>)
 8005126:	2110      	movs	r1, #16
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800512c:	2003      	movs	r0, #3
 800512e:	f7ff fe45 	bl	8004dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005132:	f7ff fc41 	bl	80049b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40022000 	.word	0x40022000

08005144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_IncTick+0x1c>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	001a      	movs	r2, r3
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_IncTick+0x20>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	18d2      	adds	r2, r2, r3
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <HAL_IncTick+0x20>)
 8005156:	601a      	str	r2, [r3, #0]
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	2000006c 	.word	0x2000006c
 8005164:	200006d0 	.word	0x200006d0

08005168 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b02      	ldr	r3, [pc, #8]	; (8005178 <HAL_GetTick+0x10>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	200006d0 	.word	0x200006d0

0800517c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005184:	230f      	movs	r3, #15
 8005186:	18fb      	adds	r3, r7, r3
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e125      	b.n	80053e6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2234      	movs	r2, #52	; 0x34
 80051ac:	2100      	movs	r1, #0
 80051ae:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff fc2a 	bl	8004a0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	2210      	movs	r2, #16
 80051be:	4013      	ands	r3, r2
 80051c0:	d000      	beq.n	80051c4 <HAL_ADC_Init+0x48>
 80051c2:	e103      	b.n	80053cc <HAL_ADC_Init+0x250>
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <HAL_ADC_Init+0x54>
 80051ce:	e0fd      	b.n	80053cc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2204      	movs	r2, #4
 80051d8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80051da:	d000      	beq.n	80051de <HAL_ADC_Init+0x62>
 80051dc:	e0f6      	b.n	80053cc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	4a83      	ldr	r2, [pc, #524]	; (80053f0 <HAL_ADC_Init+0x274>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	2202      	movs	r2, #2
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d112      	bne.n	8005222 <HAL_ADC_Init+0xa6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2201      	movs	r2, #1
 8005204:	4013      	ands	r3, r2
 8005206:	2b01      	cmp	r3, #1
 8005208:	d009      	beq.n	800521e <HAL_ADC_Init+0xa2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	401a      	ands	r2, r3
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	429a      	cmp	r2, r3
 800521c:	d101      	bne.n	8005222 <HAL_ADC_Init+0xa6>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <HAL_ADC_Init+0xa8>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d116      	bne.n	8005256 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2218      	movs	r2, #24
 8005230:	4393      	bics	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	0899      	lsrs	r1, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4964      	ldr	r1, [pc, #400]	; (80053f4 <HAL_ADC_Init+0x278>)
 8005262:	400a      	ands	r2, r1
 8005264:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7e1b      	ldrb	r3, [r3, #24]
 800526a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	7e5b      	ldrb	r3, [r3, #25]
 8005270:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005272:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7e9b      	ldrb	r3, [r3, #26]
 8005278:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800527a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <HAL_ADC_Init+0x10e>
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	015b      	lsls	r3, r3, #5
 8005288:	e000      	b.n	800528c <HAL_ADC_Init+0x110>
 800528a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800528c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005292:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d101      	bne.n	80052a0 <HAL_ADC_Init+0x124>
 800529c:	2304      	movs	r3, #4
 800529e:	e000      	b.n	80052a2 <HAL_ADC_Init+0x126>
 80052a0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80052a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2124      	movs	r1, #36	; 0x24
 80052a8:	5c5b      	ldrb	r3, [r3, r1]
 80052aa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80052ac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7edb      	ldrb	r3, [r3, #27]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d115      	bne.n	80052e8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7e9b      	ldrb	r3, [r3, #26]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d105      	bne.n	80052d0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	0252      	lsls	r2, r2, #9
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	e00b      	b.n	80052e8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2220      	movs	r2, #32
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	2201      	movs	r2, #1
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	23c2      	movs	r3, #194	; 0xc2
 80052ee:	33ff      	adds	r3, #255	; 0xff
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d007      	beq.n	8005304 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80052fc:	4313      	orrs	r3, r2
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	4313      	orrs	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68d9      	ldr	r1, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	430a      	orrs	r2, r1
 8005312:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	2380      	movs	r3, #128	; 0x80
 800531a:	055b      	lsls	r3, r3, #21
 800531c:	429a      	cmp	r2, r3
 800531e:	d01b      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d017      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	2b02      	cmp	r3, #2
 800532e:	d013      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2b03      	cmp	r3, #3
 8005336:	d00f      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	2b04      	cmp	r3, #4
 800533e:	d00b      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	2b05      	cmp	r3, #5
 8005346:	d007      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	2b06      	cmp	r3, #6
 800534e:	d003      	beq.n	8005358 <HAL_ADC_Init+0x1dc>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	2b07      	cmp	r3, #7
 8005356:	d112      	bne.n	800537e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2107      	movs	r1, #7
 8005364:	438a      	bics	r2, r1
 8005366:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6959      	ldr	r1, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	2207      	movs	r2, #7
 8005374:	401a      	ands	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <HAL_ADC_Init+0x27c>)
 8005386:	4013      	ands	r3, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d10b      	bne.n	80053a6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	2203      	movs	r2, #3
 800539a:	4393      	bics	r3, r2
 800539c:	2201      	movs	r2, #1
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80053a4:	e01c      	b.n	80053e0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	2212      	movs	r2, #18
 80053ac:	4393      	bics	r3, r2
 80053ae:	2210      	movs	r2, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	2201      	movs	r2, #1
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80053ca:	e009      	b.n	80053e0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	2210      	movs	r2, #16
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80053d8:	230f      	movs	r3, #15
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80053e0:	230f      	movs	r3, #15
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	781b      	ldrb	r3, [r3, #0]
}
 80053e6:	0018      	movs	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b004      	add	sp, #16
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	fffffefd 	.word	0xfffffefd
 80053f4:	fffe0219 	.word	0xfffe0219
 80053f8:	833fffe7 	.word	0x833fffe7

080053fc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005404:	230f      	movs	r3, #15
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2204      	movs	r2, #4
 8005414:	4013      	ands	r3, r2
 8005416:	d156      	bne.n	80054c6 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2234      	movs	r2, #52	; 0x34
 800541c:	5c9b      	ldrb	r3, [r3, r2]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_ADC_Start_IT+0x2a>
 8005422:	2302      	movs	r3, #2
 8005424:	e056      	b.n	80054d4 <HAL_ADC_Start_IT+0xd8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2234      	movs	r2, #52	; 0x34
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	7e5b      	ldrb	r3, [r3, #25]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d007      	beq.n	8005446 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005436:	230f      	movs	r3, #15
 8005438:	18fc      	adds	r4, r7, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 fa63 	bl	8005908 <ADC_Enable>
 8005442:	0003      	movs	r3, r0
 8005444:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005446:	230f      	movs	r3, #15
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d13e      	bne.n	80054ce <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_ADC_Start_IT+0xe0>)
 8005456:	4013      	ands	r3, r2
 8005458:	2280      	movs	r2, #128	; 0x80
 800545a:	0052      	lsls	r2, r2, #1
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2234      	movs	r2, #52	; 0x34
 800546c:	2100      	movs	r1, #0
 800546e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	221c      	movs	r2, #28
 8005476:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	2b08      	cmp	r3, #8
 800547e:	d110      	bne.n	80054a2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2104      	movs	r1, #4
 800548c:	438a      	bics	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2118      	movs	r1, #24
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
          break;
 80054a0:	e008      	b.n	80054b4 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	211c      	movs	r1, #28
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
          break;
 80054b2:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2104      	movs	r1, #4
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	e003      	b.n	80054ce <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80054c6:	230f      	movs	r3, #15
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	2202      	movs	r2, #2
 80054cc:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80054ce:	230f      	movs	r3, #15
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	781b      	ldrb	r3, [r3, #0]
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b005      	add	sp, #20
 80054da:	bd90      	pop	{r4, r7, pc}
 80054dc:	fffff0fe 	.word	0xfffff0fe

080054e0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80054e0:	b5b0      	push	{r4, r5, r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e8:	230f      	movs	r3, #15
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2234      	movs	r2, #52	; 0x34
 80054f4:	5c9b      	ldrb	r3, [r3, r2]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_ADC_Stop_IT+0x1e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e033      	b.n	8005566 <HAL_ADC_Stop_IT+0x86>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2234      	movs	r2, #52	; 0x34
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005506:	250f      	movs	r5, #15
 8005508:	197c      	adds	r4, r7, r5
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0018      	movs	r0, r3
 800550e:	f000 faf0 	bl	8005af2 <ADC_ConversionStop>
 8005512:	0003      	movs	r3, r0
 8005514:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005516:	0028      	movs	r0, r5
 8005518:	183b      	adds	r3, r7, r0
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d11b      	bne.n	8005558 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	211c      	movs	r1, #28
 800552c:	438a      	bics	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005530:	0005      	movs	r5, r0
 8005532:	183c      	adds	r4, r7, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0018      	movs	r0, r3
 8005538:	f000 fa6a 	bl	8005a10 <ADC_Disable>
 800553c:	0003      	movs	r3, r0
 800553e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005540:	197b      	adds	r3, r7, r5
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <HAL_ADC_Stop_IT+0x90>)
 800554e:	4013      	ands	r3, r2
 8005550:	2201      	movs	r2, #1
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2234      	movs	r2, #52	; 0x34
 800555c:	2100      	movs	r1, #0
 800555e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005560:	230f      	movs	r3, #15
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b004      	add	sp, #16
 800556c:	bdb0      	pop	{r4, r5, r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	fffffefe 	.word	0xfffffefe

08005574 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005582:	0018      	movs	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	b002      	add	sp, #8
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2204      	movs	r2, #4
 800559c:	4013      	ands	r3, r2
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d106      	bne.n	80055b0 <HAL_ADC_IRQHandler+0x24>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00d      	beq.n	80055cc <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2208      	movs	r2, #8
 80055b8:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d14f      	bne.n	800565e <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2208      	movs	r2, #8
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d148      	bne.n	800565e <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	2210      	movs	r2, #16
 80055d2:	4013      	ands	r3, r2
 80055d4:	d106      	bne.n	80055e4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	0092      	lsls	r2, r2, #2
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	23c0      	movs	r3, #192	; 0xc0
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	4013      	ands	r3, r2
 80055f0:	d12d      	bne.n	800564e <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d129      	bne.n	800564e <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	4013      	ands	r3, r2
 8005604:	2b08      	cmp	r3, #8
 8005606:	d122      	bne.n	800564e <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	d110      	bne.n	8005636 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	210c      	movs	r1, #12
 8005620:	438a      	bics	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	4a33      	ldr	r2, [pc, #204]	; (80056f8 <HAL_ADC_IRQHandler+0x16c>)
 800562a:	4013      	ands	r3, r2
 800562c:	2201      	movs	r2, #1
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
 8005634:	e00b      	b.n	800564e <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	2220      	movs	r2, #32
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005646:	2201      	movs	r2, #1
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	0018      	movs	r0, r3
 8005652:	f7fe f9d5 	bl	8003a00 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	220c      	movs	r2, #12
 800565c:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2280      	movs	r2, #128	; 0x80
 8005666:	4013      	ands	r3, r2
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d115      	bne.n	8005698 <HAL_ADC_IRQHandler+0x10c>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	4013      	ands	r3, r2
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d10e      	bne.n	8005698 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	0252      	lsls	r2, r2, #9
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	0018      	movs	r0, r3
 800568c:	f000 f836 	bl	80056fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2280      	movs	r2, #128	; 0x80
 8005696:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2210      	movs	r2, #16
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d123      	bne.n	80056ee <HAL_ADC_IRQHandler+0x162>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2210      	movs	r2, #16
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	d11c      	bne.n	80056ee <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d006      	beq.n	80056ca <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10d      	bne.n	80056e6 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	2202      	movs	r2, #2
 80056d0:	431a      	orrs	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2210      	movs	r2, #16
 80056dc:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f813 	bl	800570c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2210      	movs	r2, #16
 80056ec:	601a      	str	r2, [r3, #0]
  }

}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b002      	add	sp, #8
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	fffffefe 	.word	0xfffffefe

080056fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	46bd      	mov	sp, r7
 8005718:	b002      	add	sp, #8
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005726:	230f      	movs	r3, #15
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	055b      	lsls	r3, r3, #21
 800573a:	429a      	cmp	r2, r3
 800573c:	d011      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x46>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d00d      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x46>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	2b02      	cmp	r3, #2
 800574c:	d009      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x46>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	2b03      	cmp	r3, #3
 8005754:	d005      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x46>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	2b04      	cmp	r3, #4
 800575c:	d001      	beq.n	8005762 <HAL_ADC_ConfigChannel+0x46>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2234      	movs	r2, #52	; 0x34
 8005766:	5c9b      	ldrb	r3, [r3, r2]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_ADC_ConfigChannel+0x54>
 800576c:	2302      	movs	r3, #2
 800576e:	e0bb      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x1cc>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2234      	movs	r2, #52	; 0x34
 8005774:	2101      	movs	r1, #1
 8005776:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2204      	movs	r2, #4
 8005780:	4013      	ands	r3, r2
 8005782:	d000      	beq.n	8005786 <HAL_ADC_ConfigChannel+0x6a>
 8005784:	e09f      	b.n	80058c6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4a59      	ldr	r2, [pc, #356]	; (80058f0 <HAL_ADC_ConfigChannel+0x1d4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d100      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x76>
 8005790:	e077      	b.n	8005882 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2201      	movs	r2, #1
 800579e:	409a      	lsls	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	055b      	lsls	r3, r3, #21
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d037      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d033      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d02f      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d02b      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d027      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	2b05      	cmp	r3, #5
 80057da:	d023      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2b06      	cmp	r3, #6
 80057e2:	d01f      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	2b07      	cmp	r3, #7
 80057ea:	d01b      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2107      	movs	r1, #7
 80057f8:	400b      	ands	r3, r1
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d012      	beq.n	8005824 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695a      	ldr	r2, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2107      	movs	r1, #7
 800580a:	438a      	bics	r2, r1
 800580c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6959      	ldr	r1, [r3, #20]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2207      	movs	r2, #7
 800581a:	401a      	ands	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b10      	cmp	r3, #16
 800582a:	d003      	beq.n	8005834 <HAL_ADC_ConfigChannel+0x118>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b11      	cmp	r3, #17
 8005832:	d152      	bne.n	80058da <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_ADC_ConfigChannel+0x1d8>)
 8005836:	6819      	ldr	r1, [r3, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b10      	cmp	r3, #16
 800583e:	d102      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x12a>
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	041b      	lsls	r3, r3, #16
 8005844:	e001      	b.n	800584a <HAL_ADC_ConfigChannel+0x12e>
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	03db      	lsls	r3, r3, #15
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <HAL_ADC_ConfigChannel+0x1d8>)
 800584c:	430b      	orrs	r3, r1
 800584e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b10      	cmp	r3, #16
 8005856:	d140      	bne.n	80058da <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_ADC_ConfigChannel+0x1dc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4927      	ldr	r1, [pc, #156]	; (80058fc <HAL_ADC_ConfigChannel+0x1e0>)
 800585e:	0018      	movs	r0, r3
 8005860:	f7fa fc6e 	bl	8000140 <__udivsi3>
 8005864:	0003      	movs	r3, r0
 8005866:	001a      	movs	r2, r3
 8005868:	0013      	movs	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	189b      	adds	r3, r3, r2
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005872:	e002      	b.n	800587a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f9      	bne.n	8005874 <HAL_ADC_ConfigChannel+0x158>
 8005880:	e02b      	b.n	80058da <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2101      	movs	r1, #1
 800588e:	4099      	lsls	r1, r3
 8005890:	000b      	movs	r3, r1
 8005892:	43d9      	mvns	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	400a      	ands	r2, r1
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d003      	beq.n	80058ac <HAL_ADC_ConfigChannel+0x190>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b11      	cmp	r3, #17
 80058aa:	d116      	bne.n	80058da <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_ADC_ConfigChannel+0x1d8>)
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b10      	cmp	r3, #16
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x1a0>
 80058b8:	4a11      	ldr	r2, [pc, #68]	; (8005900 <HAL_ADC_ConfigChannel+0x1e4>)
 80058ba:	e000      	b.n	80058be <HAL_ADC_ConfigChannel+0x1a2>
 80058bc:	4a11      	ldr	r2, [pc, #68]	; (8005904 <HAL_ADC_ConfigChannel+0x1e8>)
 80058be:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_ADC_ConfigChannel+0x1d8>)
 80058c0:	400a      	ands	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e009      	b.n	80058da <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	2220      	movs	r2, #32
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80058d2:	230f      	movs	r3, #15
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2234      	movs	r2, #52	; 0x34
 80058de:	2100      	movs	r1, #0
 80058e0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80058e2:	230f      	movs	r3, #15
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	781b      	ldrb	r3, [r3, #0]
}
 80058e8:	0018      	movs	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b004      	add	sp, #16
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	00001001 	.word	0x00001001
 80058f4:	40012708 	.word	0x40012708
 80058f8:	20000064 	.word	0x20000064
 80058fc:	000f4240 	.word	0x000f4240
 8005900:	ff7fffff 	.word	0xff7fffff
 8005904:	ffbfffff 	.word	0xffbfffff

08005908 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2203      	movs	r2, #3
 8005920:	4013      	ands	r3, r2
 8005922:	2b01      	cmp	r3, #1
 8005924:	d112      	bne.n	800594c <ADC_Enable+0x44>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2201      	movs	r2, #1
 800592e:	4013      	ands	r3, r2
 8005930:	2b01      	cmp	r3, #1
 8005932:	d009      	beq.n	8005948 <ADC_Enable+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	401a      	ands	r2, r3
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	429a      	cmp	r2, r3
 8005946:	d101      	bne.n	800594c <ADC_Enable+0x44>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <ADC_Enable+0x46>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d152      	bne.n	80059f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <ADC_Enable+0xfc>)
 800595a:	4013      	ands	r3, r2
 800595c:	d00d      	beq.n	800597a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	2210      	movs	r2, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	2201      	movs	r2, #1
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e03f      	b.n	80059fa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2101      	movs	r1, #1
 8005986:	430a      	orrs	r2, r1
 8005988:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800598a:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <ADC_Enable+0x100>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	491f      	ldr	r1, [pc, #124]	; (8005a0c <ADC_Enable+0x104>)
 8005990:	0018      	movs	r0, r3
 8005992:	f7fa fbd5 	bl	8000140 <__udivsi3>
 8005996:	0003      	movs	r3, r0
 8005998:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800599a:	e002      	b.n	80059a2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f9      	bne.n	800599c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80059a8:	f7ff fbde 	bl	8005168 <HAL_GetTick>
 80059ac:	0003      	movs	r3, r0
 80059ae:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80059b0:	e01b      	b.n	80059ea <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059b2:	f7ff fbd9 	bl	8005168 <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d914      	bls.n	80059ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2201      	movs	r2, #1
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d00d      	beq.n	80059ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	2210      	movs	r2, #16
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	2201      	movs	r2, #1
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e007      	b.n	80059fa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2201      	movs	r2, #1
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d1dc      	bne.n	80059b2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b004      	add	sp, #16
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	80000017 	.word	0x80000017
 8005a08:	20000064 	.word	0x20000064
 8005a0c:	000f4240 	.word	0x000f4240

08005a10 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d112      	bne.n	8005a50 <ADC_Disable+0x40>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2201      	movs	r2, #1
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d009      	beq.n	8005a4c <ADC_Disable+0x3c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	401a      	ands	r2, r3
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d101      	bne.n	8005a50 <ADC_Disable+0x40>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <ADC_Disable+0x42>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d048      	beq.n	8005ae8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2205      	movs	r2, #5
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d110      	bne.n	8005a86 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2102      	movs	r1, #2
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a7c:	f7ff fb74 	bl	8005168 <HAL_GetTick>
 8005a80:	0003      	movs	r3, r0
 8005a82:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005a84:	e029      	b.n	8005ada <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	2210      	movs	r2, #16
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	2201      	movs	r2, #1
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e023      	b.n	8005aea <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005aa2:	f7ff fb61 	bl	8005168 <HAL_GetTick>
 8005aa6:	0002      	movs	r2, r0
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d914      	bls.n	8005ada <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d10d      	bne.n	8005ada <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	2201      	movs	r2, #1
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e007      	b.n	8005aea <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d0dc      	beq.n	8005aa2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	0018      	movs	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	b004      	add	sp, #16
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2204      	movs	r2, #4
 8005b06:	4013      	ands	r3, r2
 8005b08:	d03a      	beq.n	8005b80 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2204      	movs	r2, #4
 8005b12:	4013      	ands	r3, r2
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d10d      	bne.n	8005b34 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005b22:	d107      	bne.n	8005b34 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2110      	movs	r1, #16
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b34:	f7ff fb18 	bl	8005168 <HAL_GetTick>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005b3c:	e01a      	b.n	8005b74 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005b3e:	f7ff fb13 	bl	8005168 <HAL_GetTick>
 8005b42:	0002      	movs	r2, r0
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d913      	bls.n	8005b74 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2204      	movs	r2, #4
 8005b54:	4013      	ands	r3, r2
 8005b56:	d00d      	beq.n	8005b74 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2210      	movs	r2, #16
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b68:	2201      	movs	r2, #1
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e006      	b.n	8005b82 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d1de      	bne.n	8005b3e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	0018      	movs	r0, r3
 8005b84:	46bd      	mov	sp, r7
 8005b86:	b004      	add	sp, #16
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b94:	2317      	movs	r3, #23
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2234      	movs	r2, #52	; 0x34
 8005ba8:	5c9b      	ldrb	r3, [r3, r2]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_ADCEx_Calibration_Start+0x26>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e08d      	b.n	8005cce <HAL_ADCEx_Calibration_Start+0x142>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2234      	movs	r2, #52	; 0x34
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d112      	bne.n	8005bee <HAL_ADCEx_Calibration_Start+0x62>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d009      	beq.n	8005bea <HAL_ADCEx_Calibration_Start+0x5e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	401a      	ands	r2, r3
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d101      	bne.n	8005bee <HAL_ADCEx_Calibration_Start+0x62>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_ADCEx_Calibration_Start+0x64>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d15b      	bne.n	8005cac <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	4a37      	ldr	r2, [pc, #220]	; (8005cd8 <HAL_ADCEx_Calibration_Start+0x14c>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2203      	movs	r2, #3
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2103      	movs	r1, #3
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	0609      	lsls	r1, r1, #24
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8005c32:	f7ff fa99 	bl	8005168 <HAL_GetTick>
 8005c36:	0003      	movs	r3, r0
 8005c38:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005c3a:	e01d      	b.n	8005c78 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005c3c:	f7ff fa94 	bl	8005168 <HAL_GetTick>
 8005c40:	0002      	movs	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d916      	bls.n	8005c78 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0fdb      	lsrs	r3, r3, #31
 8005c52:	07da      	lsls	r2, r3, #31
 8005c54:	2380      	movs	r3, #128	; 0x80
 8005c56:	061b      	lsls	r3, r3, #24
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d10d      	bne.n	8005c78 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	2212      	movs	r2, #18
 8005c62:	4393      	bics	r3, r2
 8005c64:	2210      	movs	r2, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2234      	movs	r2, #52	; 0x34
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e02a      	b.n	8005cce <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	0fdb      	lsrs	r3, r3, #31
 8005c80:	07da      	lsls	r2, r3, #31
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	061b      	lsls	r3, r3, #24
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d0d8      	beq.n	8005c3c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68d9      	ldr	r1, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	4393      	bics	r3, r2
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8005caa:	e009      	b.n	8005cc0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005cb8:	2317      	movs	r3, #23
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2234      	movs	r2, #52	; 0x34
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005cc8:	2317      	movs	r3, #23
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	781b      	ldrb	r3, [r3, #0]
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b006      	add	sp, #24
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	fffffefd 	.word	0xfffffefd

08005cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	1dfb      	adds	r3, r7, #7
 8005ce6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	1dfb      	adds	r3, r7, #7
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b7f      	cmp	r3, #127	; 0x7f
 8005cee:	d809      	bhi.n	8005d04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf0:	1dfb      	adds	r3, r7, #7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	231f      	movs	r3, #31
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <__NVIC_EnableIRQ+0x30>)
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4091      	lsls	r1, r2
 8005d00:	000a      	movs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
  }
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	e000e100 	.word	0xe000e100

08005d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	0002      	movs	r2, r0
 8005d18:	6039      	str	r1, [r7, #0]
 8005d1a:	1dfb      	adds	r3, r7, #7
 8005d1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005d1e:	1dfb      	adds	r3, r7, #7
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b7f      	cmp	r3, #127	; 0x7f
 8005d24:	d828      	bhi.n	8005d78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <__NVIC_SetPriority+0xd4>)
 8005d28:	1dfb      	adds	r3, r7, #7
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	b25b      	sxtb	r3, r3
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	33c0      	adds	r3, #192	; 0xc0
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	589b      	ldr	r3, [r3, r2]
 8005d36:	1dfa      	adds	r2, r7, #7
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	0011      	movs	r1, r2
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	400a      	ands	r2, r1
 8005d40:	00d2      	lsls	r2, r2, #3
 8005d42:	21ff      	movs	r1, #255	; 0xff
 8005d44:	4091      	lsls	r1, r2
 8005d46:	000a      	movs	r2, r1
 8005d48:	43d2      	mvns	r2, r2
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	019b      	lsls	r3, r3, #6
 8005d52:	22ff      	movs	r2, #255	; 0xff
 8005d54:	401a      	ands	r2, r3
 8005d56:	1dfb      	adds	r3, r7, #7
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	4003      	ands	r3, r0
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d64:	481f      	ldr	r0, [pc, #124]	; (8005de4 <__NVIC_SetPriority+0xd4>)
 8005d66:	1dfb      	adds	r3, r7, #7
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	33c0      	adds	r3, #192	; 0xc0
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005d76:	e031      	b.n	8005ddc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d78:	4a1b      	ldr	r2, [pc, #108]	; (8005de8 <__NVIC_SetPriority+0xd8>)
 8005d7a:	1dfb      	adds	r3, r7, #7
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	0019      	movs	r1, r3
 8005d80:	230f      	movs	r3, #15
 8005d82:	400b      	ands	r3, r1
 8005d84:	3b08      	subs	r3, #8
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	3306      	adds	r3, #6
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	18d3      	adds	r3, r2, r3
 8005d8e:	3304      	adds	r3, #4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	1dfa      	adds	r2, r7, #7
 8005d94:	7812      	ldrb	r2, [r2, #0]
 8005d96:	0011      	movs	r1, r2
 8005d98:	2203      	movs	r2, #3
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	00d2      	lsls	r2, r2, #3
 8005d9e:	21ff      	movs	r1, #255	; 0xff
 8005da0:	4091      	lsls	r1, r2
 8005da2:	000a      	movs	r2, r1
 8005da4:	43d2      	mvns	r2, r2
 8005da6:	401a      	ands	r2, r3
 8005da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	019b      	lsls	r3, r3, #6
 8005dae:	22ff      	movs	r2, #255	; 0xff
 8005db0:	401a      	ands	r2, r3
 8005db2:	1dfb      	adds	r3, r7, #7
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	0018      	movs	r0, r3
 8005db8:	2303      	movs	r3, #3
 8005dba:	4003      	ands	r3, r0
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005dc0:	4809      	ldr	r0, [pc, #36]	; (8005de8 <__NVIC_SetPriority+0xd8>)
 8005dc2:	1dfb      	adds	r3, r7, #7
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	001c      	movs	r4, r3
 8005dc8:	230f      	movs	r3, #15
 8005dca:	4023      	ands	r3, r4
 8005dcc:	3b08      	subs	r3, #8
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	3306      	adds	r3, #6
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	18c3      	adds	r3, r0, r3
 8005dd8:	3304      	adds	r3, #4
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b003      	add	sp, #12
 8005de2:	bd90      	pop	{r4, r7, pc}
 8005de4:	e000e100 	.word	0xe000e100
 8005de8:	e000ed00 	.word	0xe000ed00

08005dec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	210f      	movs	r1, #15
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	1c02      	adds	r2, r0, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	0011      	movs	r1, r2
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7ff ff81 	bl	8005d10 <__NVIC_SetPriority>
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b004      	add	sp, #16
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	0002      	movs	r2, r0
 8005e1e:	1dfb      	adds	r3, r7, #7
 8005e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e22:	1dfb      	adds	r3, r7, #7
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff ff57 	bl	8005cdc <__NVIC_EnableIRQ>
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b002      	add	sp, #8
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2221      	movs	r2, #33	; 0x21
 8005e42:	5c9b      	ldrb	r3, [r3, r2]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d008      	beq.n	8005e5c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2220      	movs	r2, #32
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e020      	b.n	8005e9e <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	210e      	movs	r1, #14
 8005e68:	438a      	bics	r2, r1
 8005e6a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2101      	movs	r1, #1
 8005e78:	438a      	bics	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	2101      	movs	r1, #1
 8005e86:	4091      	lsls	r1, r2
 8005e88:	000a      	movs	r2, r1
 8005e8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2221      	movs	r2, #33	; 0x21
 8005e90:	2101      	movs	r1, #1
 8005e92:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	2100      	movs	r1, #0
 8005e9a:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eae:	210f      	movs	r1, #15
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2221      	movs	r2, #33	; 0x21
 8005eba:	5c9b      	ldrb	r3, [r3, r2]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d006      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2204      	movs	r2, #4
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e028      	b.n	8005f22 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	210e      	movs	r1, #14
 8005edc:	438a      	bics	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2101      	movs	r1, #1
 8005eec:	438a      	bics	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef8:	2101      	movs	r1, #1
 8005efa:	4091      	lsls	r1, r2
 8005efc:	000a      	movs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2221      	movs	r2, #33	; 0x21
 8005f04:	2101      	movs	r1, #1
 8005f06:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	0010      	movs	r0, r2
 8005f20:	4798      	blx	r3
    } 
  }
  return status;
 8005f22:	230f      	movs	r3, #15
 8005f24:	18fb      	adds	r3, r7, r3
 8005f26:	781b      	ldrb	r3, [r3, #0]
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f3e:	e14f      	b.n	80061e0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2101      	movs	r1, #1
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4091      	lsls	r1, r2
 8005f4a:	000a      	movs	r2, r1
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d100      	bne.n	8005f58 <HAL_GPIO_Init+0x28>
 8005f56:	e140      	b.n	80061da <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d005      	beq.n	8005f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2203      	movs	r2, #3
 8005f6a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d130      	bne.n	8005fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	0013      	movs	r3, r2
 8005f80:	43da      	mvns	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	409a      	lsls	r2, r3
 8005f92:	0013      	movs	r3, r2
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	409a      	lsls	r2, r3
 8005fac:	0013      	movs	r3, r2
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	091b      	lsrs	r3, r3, #4
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	409a      	lsls	r2, r3
 8005fc4:	0013      	movs	r3, r2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d017      	beq.n	800600e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	2203      	movs	r2, #3
 8005fea:	409a      	lsls	r2, r3
 8005fec:	0013      	movs	r3, r2
 8005fee:	43da      	mvns	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	409a      	lsls	r2, r3
 8006000:	0013      	movs	r3, r2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	4013      	ands	r3, r2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d123      	bne.n	8006062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	08da      	lsrs	r2, r3, #3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3208      	adds	r2, #8
 8006022:	0092      	lsls	r2, r2, #2
 8006024:	58d3      	ldr	r3, [r2, r3]
 8006026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2207      	movs	r2, #7
 800602c:	4013      	ands	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	220f      	movs	r2, #15
 8006032:	409a      	lsls	r2, r3
 8006034:	0013      	movs	r3, r2
 8006036:	43da      	mvns	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4013      	ands	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2107      	movs	r1, #7
 8006046:	400b      	ands	r3, r1
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	409a      	lsls	r2, r3
 800604c:	0013      	movs	r3, r2
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	08da      	lsrs	r2, r3, #3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3208      	adds	r2, #8
 800605c:	0092      	lsls	r2, r2, #2
 800605e:	6939      	ldr	r1, [r7, #16]
 8006060:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	2203      	movs	r2, #3
 800606e:	409a      	lsls	r2, r3
 8006070:	0013      	movs	r3, r2
 8006072:	43da      	mvns	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4013      	ands	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2203      	movs	r2, #3
 8006080:	401a      	ands	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	409a      	lsls	r2, r3
 8006088:	0013      	movs	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	23c0      	movs	r3, #192	; 0xc0
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	4013      	ands	r3, r2
 80060a0:	d100      	bne.n	80060a4 <HAL_GPIO_Init+0x174>
 80060a2:	e09a      	b.n	80061da <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060a4:	4b54      	ldr	r3, [pc, #336]	; (80061f8 <HAL_GPIO_Init+0x2c8>)
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <HAL_GPIO_Init+0x2c8>)
 80060aa:	2101      	movs	r1, #1
 80060ac:	430a      	orrs	r2, r1
 80060ae:	619a      	str	r2, [r3, #24]
 80060b0:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <HAL_GPIO_Init+0x2c8>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2201      	movs	r2, #1
 80060b6:	4013      	ands	r3, r2
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060bc:	4a4f      	ldr	r2, [pc, #316]	; (80061fc <HAL_GPIO_Init+0x2cc>)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	3302      	adds	r3, #2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	589b      	ldr	r3, [r3, r2]
 80060c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2203      	movs	r2, #3
 80060ce:	4013      	ands	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	220f      	movs	r2, #15
 80060d4:	409a      	lsls	r2, r3
 80060d6:	0013      	movs	r3, r2
 80060d8:	43da      	mvns	r2, r3
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4013      	ands	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	2390      	movs	r3, #144	; 0x90
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d013      	beq.n	8006112 <HAL_GPIO_Init+0x1e2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a44      	ldr	r2, [pc, #272]	; (8006200 <HAL_GPIO_Init+0x2d0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00d      	beq.n	800610e <HAL_GPIO_Init+0x1de>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_GPIO_Init+0x2d4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <HAL_GPIO_Init+0x1da>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a42      	ldr	r2, [pc, #264]	; (8006208 <HAL_GPIO_Init+0x2d8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d101      	bne.n	8006106 <HAL_GPIO_Init+0x1d6>
 8006102:	2303      	movs	r3, #3
 8006104:	e006      	b.n	8006114 <HAL_GPIO_Init+0x1e4>
 8006106:	2305      	movs	r3, #5
 8006108:	e004      	b.n	8006114 <HAL_GPIO_Init+0x1e4>
 800610a:	2302      	movs	r3, #2
 800610c:	e002      	b.n	8006114 <HAL_GPIO_Init+0x1e4>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_GPIO_Init+0x1e4>
 8006112:	2300      	movs	r3, #0
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	2103      	movs	r1, #3
 8006118:	400a      	ands	r2, r1
 800611a:	0092      	lsls	r2, r2, #2
 800611c:	4093      	lsls	r3, r2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006124:	4935      	ldr	r1, [pc, #212]	; (80061fc <HAL_GPIO_Init+0x2cc>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	3302      	adds	r3, #2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006132:	4b36      	ldr	r3, [pc, #216]	; (800620c <HAL_GPIO_Init+0x2dc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	43da      	mvns	r2, r3
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4013      	ands	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	025b      	lsls	r3, r3, #9
 800614a:	4013      	ands	r3, r2
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006156:	4b2d      	ldr	r3, [pc, #180]	; (800620c <HAL_GPIO_Init+0x2dc>)
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800615c:	4b2b      	ldr	r3, [pc, #172]	; (800620c <HAL_GPIO_Init+0x2dc>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	43da      	mvns	r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	4013      	ands	r3, r2
 8006176:	d003      	beq.n	8006180 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006180:	4b22      	ldr	r3, [pc, #136]	; (800620c <HAL_GPIO_Init+0x2dc>)
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_GPIO_Init+0x2dc>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	43da      	mvns	r2, r3
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	4013      	ands	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	035b      	lsls	r3, r3, #13
 800619e:	4013      	ands	r3, r2
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <HAL_GPIO_Init+0x2dc>)
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <HAL_GPIO_Init+0x2dc>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	43da      	mvns	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	039b      	lsls	r3, r3, #14
 80061c8:	4013      	ands	r3, r2
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80061d4:	4b0d      	ldr	r3, [pc, #52]	; (800620c <HAL_GPIO_Init+0x2dc>)
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	3301      	adds	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	40da      	lsrs	r2, r3
 80061e8:	1e13      	subs	r3, r2, #0
 80061ea:	d000      	beq.n	80061ee <HAL_GPIO_Init+0x2be>
 80061ec:	e6a8      	b.n	8005f40 <HAL_GPIO_Init+0x10>
  } 
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b006      	add	sp, #24
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40021000 	.word	0x40021000
 80061fc:	40010000 	.word	0x40010000
 8006200:	48000400 	.word	0x48000400
 8006204:	48000800 	.word	0x48000800
 8006208:	48000c00 	.word	0x48000c00
 800620c:	40010400 	.word	0x40010400

08006210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	0008      	movs	r0, r1
 800621a:	0011      	movs	r1, r2
 800621c:	1cbb      	adds	r3, r7, #2
 800621e:	1c02      	adds	r2, r0, #0
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	1c7b      	adds	r3, r7, #1
 8006224:	1c0a      	adds	r2, r1, #0
 8006226:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006228:	1c7b      	adds	r3, r7, #1
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006230:	1cbb      	adds	r3, r7, #2
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006238:	e003      	b.n	8006242 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800623a:	1cbb      	adds	r3, r7, #2
 800623c:	881a      	ldrh	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	0002      	movs	r2, r0
 8006254:	1dbb      	adds	r3, r7, #6
 8006256:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	1dba      	adds	r2, r7, #6
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	4013      	ands	r3, r2
 8006262:	d008      	beq.n	8006276 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006266:	1dba      	adds	r2, r7, #6
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800626c:	1dbb      	adds	r3, r7, #6
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	0018      	movs	r0, r3
 8006272:	f7fd fc7f 	bl	8003b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	46bd      	mov	sp, r7
 800627a:	b002      	add	sp, #8
 800627c:	bd80      	pop	{r7, pc}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	40010400 	.word	0x40010400

08006284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e082      	b.n	800639c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2241      	movs	r2, #65	; 0x41
 800629a:	5c9b      	ldrb	r3, [r3, r2]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2240      	movs	r2, #64	; 0x40
 80062a6:	2100      	movs	r1, #0
 80062a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	0018      	movs	r0, r3
 80062ae:	f7fe fbfb 	bl	8004aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2241      	movs	r2, #65	; 0x41
 80062b6:	2124      	movs	r1, #36	; 0x24
 80062b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2101      	movs	r1, #1
 80062c6:	438a      	bics	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4934      	ldr	r1, [pc, #208]	; (80063a4 <HAL_I2C_Init+0x120>)
 80062d4:	400a      	ands	r2, r1
 80062d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4931      	ldr	r1, [pc, #196]	; (80063a8 <HAL_I2C_Init+0x124>)
 80062e4:	400a      	ands	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d108      	bne.n	8006302 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	0209      	lsls	r1, r1, #8
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	e007      	b.n	8006312 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2184      	movs	r1, #132	; 0x84
 800630c:	0209      	lsls	r1, r1, #8
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d104      	bne.n	8006324 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2280      	movs	r2, #128	; 0x80
 8006320:	0112      	lsls	r2, r2, #4
 8006322:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	491f      	ldr	r1, [pc, #124]	; (80063ac <HAL_I2C_Init+0x128>)
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	491a      	ldr	r1, [pc, #104]	; (80063a8 <HAL_I2C_Init+0x124>)
 8006340:	400a      	ands	r2, r1
 8006342:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	431a      	orrs	r2, r3
 800634e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	69d9      	ldr	r1, [r3, #28]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1a      	ldr	r2, [r3, #32]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2241      	movs	r2, #65	; 0x41
 8006388:	2120      	movs	r1, #32
 800638a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2242      	movs	r2, #66	; 0x42
 8006396:	2100      	movs	r1, #0
 8006398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	0018      	movs	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	f0ffffff 	.word	0xf0ffffff
 80063a8:	ffff7fff 	.word	0xffff7fff
 80063ac:	02008000 	.word	0x02008000

080063b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b089      	sub	sp, #36	; 0x24
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	0008      	movs	r0, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	0019      	movs	r1, r3
 80063be:	230a      	movs	r3, #10
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	1c02      	adds	r2, r0, #0
 80063c4:	801a      	strh	r2, [r3, #0]
 80063c6:	2308      	movs	r3, #8
 80063c8:	18fb      	adds	r3, r7, r3
 80063ca:	1c0a      	adds	r2, r1, #0
 80063cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2241      	movs	r2, #65	; 0x41
 80063d2:	5c9b      	ldrb	r3, [r3, r2]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d000      	beq.n	80063dc <HAL_I2C_Master_Transmit+0x2c>
 80063da:	e0e7      	b.n	80065ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	5c9b      	ldrb	r3, [r3, r2]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_I2C_Master_Transmit+0x3a>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0e1      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	2101      	movs	r1, #1
 80063f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063f2:	f7fe feb9 	bl	8005168 <HAL_GetTick>
 80063f6:	0003      	movs	r3, r0
 80063f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063fa:	2380      	movs	r3, #128	; 0x80
 80063fc:	0219      	lsls	r1, r3, #8
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2319      	movs	r3, #25
 8006406:	2201      	movs	r2, #1
 8006408:	f000 f8fc 	bl	8006604 <I2C_WaitOnFlagUntilTimeout>
 800640c:	1e03      	subs	r3, r0, #0
 800640e:	d001      	beq.n	8006414 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0cc      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2241      	movs	r2, #65	; 0x41
 8006418:	2121      	movs	r1, #33	; 0x21
 800641a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2242      	movs	r2, #66	; 0x42
 8006420:	2110      	movs	r1, #16
 8006422:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2208      	movs	r2, #8
 8006434:	18ba      	adds	r2, r7, r2
 8006436:	8812      	ldrh	r2, [r2, #0]
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2bff      	cmp	r3, #255	; 0xff
 8006448:	d911      	bls.n	800646e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006454:	b2da      	uxtb	r2, r3
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	045c      	lsls	r4, r3, #17
 800645a:	230a      	movs	r3, #10
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	8819      	ldrh	r1, [r3, #0]
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	4b55      	ldr	r3, [pc, #340]	; (80065b8 <HAL_I2C_Master_Transmit+0x208>)
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	0023      	movs	r3, r4
 8006468:	f000 fa00 	bl	800686c <I2C_TransferConfig>
 800646c:	e075      	b.n	800655a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647c:	b2da      	uxtb	r2, r3
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	049c      	lsls	r4, r3, #18
 8006482:	230a      	movs	r3, #10
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	8819      	ldrh	r1, [r3, #0]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	4b4b      	ldr	r3, [pc, #300]	; (80065b8 <HAL_I2C_Master_Transmit+0x208>)
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	0023      	movs	r3, r4
 8006490:	f000 f9ec 	bl	800686c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006494:	e061      	b.n	800655a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	0018      	movs	r0, r3
 800649e:	f000 f8f0 	bl	8006682 <I2C_WaitOnTXISFlagUntilTimeout>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e081      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	781a      	ldrb	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064de:	b29b      	uxth	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d03a      	beq.n	800655a <HAL_I2C_Master_Transmit+0x1aa>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d136      	bne.n	800655a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	0013      	movs	r3, r2
 80064f6:	2200      	movs	r2, #0
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	f000 f883 	bl	8006604 <I2C_WaitOnFlagUntilTimeout>
 80064fe:	1e03      	subs	r3, r0, #0
 8006500:	d001      	beq.n	8006506 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e053      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d911      	bls.n	8006534 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651a:	b2da      	uxtb	r2, r3
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	045c      	lsls	r4, r3, #17
 8006520:	230a      	movs	r3, #10
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	8819      	ldrh	r1, [r3, #0]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	2300      	movs	r3, #0
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	0023      	movs	r3, r4
 800652e:	f000 f99d 	bl	800686c <I2C_TransferConfig>
 8006532:	e012      	b.n	800655a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006542:	b2da      	uxtb	r2, r3
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	049c      	lsls	r4, r3, #18
 8006548:	230a      	movs	r3, #10
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	8819      	ldrh	r1, [r3, #0]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	2300      	movs	r3, #0
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	0023      	movs	r3, r4
 8006556:	f000 f989 	bl	800686c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d198      	bne.n	8006496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f8c8 	bl	8006700 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006570:	1e03      	subs	r3, r0, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e01a      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2220      	movs	r2, #32
 800657e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	490c      	ldr	r1, [pc, #48]	; (80065bc <HAL_I2C_Master_Transmit+0x20c>)
 800658c:	400a      	ands	r2, r1
 800658e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2241      	movs	r2, #65	; 0x41
 8006594:	2120      	movs	r1, #32
 8006596:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2242      	movs	r2, #66	; 0x42
 800659c:	2100      	movs	r1, #0
 800659e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2240      	movs	r2, #64	; 0x40
 80065a4:	2100      	movs	r1, #0
 80065a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e000      	b.n	80065ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
  }
}
 80065ae:	0018      	movs	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	b007      	add	sp, #28
 80065b4:	bd90      	pop	{r4, r7, pc}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	80002000 	.word	0x80002000
 80065bc:	fe00e800 	.word	0xfe00e800

080065c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2202      	movs	r2, #2
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d103      	bne.n	80065de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2201      	movs	r2, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d007      	beq.n	80065fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2101      	movs	r1, #1
 80065f8:	430a      	orrs	r2, r1
 80065fa:	619a      	str	r2, [r3, #24]
  }
}
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	46bd      	mov	sp, r7
 8006600:	b002      	add	sp, #8
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	1dfb      	adds	r3, r7, #7
 8006612:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006614:	e021      	b.n	800665a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	3301      	adds	r3, #1
 800661a:	d01e      	beq.n	800665a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fe fda4 	bl	8005168 <HAL_GetTick>
 8006620:	0002      	movs	r2, r0
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d113      	bne.n	800665a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	2220      	movs	r2, #32
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2241      	movs	r2, #65	; 0x41
 8006642:	2120      	movs	r1, #32
 8006644:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2242      	movs	r2, #66	; 0x42
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2240      	movs	r2, #64	; 0x40
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e00f      	b.n	800667a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	425a      	negs	r2, r3
 800666a:	4153      	adcs	r3, r2
 800666c:	b2db      	uxtb	r3, r3
 800666e:	001a      	movs	r2, r3
 8006670:	1dfb      	adds	r3, r7, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d0ce      	beq.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bd80      	pop	{r7, pc}

08006682 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800668e:	e02b      	b.n	80066e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	0018      	movs	r0, r3
 8006698:	f000 f86e 	bl	8006778 <I2C_IsAcknowledgeFailed>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d001      	beq.n	80066a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e029      	b.n	80066f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	3301      	adds	r3, #1
 80066a8:	d01e      	beq.n	80066e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066aa:	f7fe fd5d 	bl	8005168 <HAL_GetTick>
 80066ae:	0002      	movs	r2, r0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d302      	bcc.n	80066c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d113      	bne.n	80066e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	2220      	movs	r2, #32
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2241      	movs	r2, #65	; 0x41
 80066d0:	2120      	movs	r1, #32
 80066d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2242      	movs	r2, #66	; 0x42
 80066d8:	2100      	movs	r1, #0
 80066da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	2100      	movs	r1, #0
 80066e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e007      	b.n	80066f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2202      	movs	r2, #2
 80066f0:	4013      	ands	r3, r2
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d1cc      	bne.n	8006690 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	0018      	movs	r0, r3
 80066fa:	46bd      	mov	sp, r7
 80066fc:	b004      	add	sp, #16
 80066fe:	bd80      	pop	{r7, pc}

08006700 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800670c:	e028      	b.n	8006760 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f82f 	bl	8006778 <I2C_IsAcknowledgeFailed>
 800671a:	1e03      	subs	r3, r0, #0
 800671c:	d001      	beq.n	8006722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e026      	b.n	8006770 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fe fd21 	bl	8005168 <HAL_GetTick>
 8006726:	0002      	movs	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d113      	bne.n	8006760 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673c:	2220      	movs	r2, #32
 800673e:	431a      	orrs	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2241      	movs	r2, #65	; 0x41
 8006748:	2120      	movs	r1, #32
 800674a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2242      	movs	r2, #66	; 0x42
 8006750:	2100      	movs	r1, #0
 8006752:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2240      	movs	r2, #64	; 0x40
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e007      	b.n	8006770 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	2220      	movs	r2, #32
 8006768:	4013      	ands	r3, r2
 800676a:	2b20      	cmp	r3, #32
 800676c:	d1cf      	bne.n	800670e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	0018      	movs	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	b004      	add	sp, #16
 8006776:	bd80      	pop	{r7, pc}

08006778 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2210      	movs	r2, #16
 800678c:	4013      	ands	r3, r2
 800678e:	2b10      	cmp	r3, #16
 8006790:	d164      	bne.n	800685c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	2380      	movs	r3, #128	; 0x80
 800679a:	049b      	lsls	r3, r3, #18
 800679c:	401a      	ands	r2, r3
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	049b      	lsls	r3, r3, #18
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d02b      	beq.n	80067fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	01c9      	lsls	r1, r1, #7
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067b8:	e021      	b.n	80067fe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	d01e      	beq.n	80067fe <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c0:	f7fe fcd2 	bl	8005168 <HAL_GetTick>
 80067c4:	0002      	movs	r2, r0
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d302      	bcc.n	80067d6 <I2C_IsAcknowledgeFailed+0x5e>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d113      	bne.n	80067fe <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	2220      	movs	r2, #32
 80067dc:	431a      	orrs	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2241      	movs	r2, #65	; 0x41
 80067e6:	2120      	movs	r1, #32
 80067e8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2242      	movs	r2, #66	; 0x42
 80067ee:	2100      	movs	r1, #0
 80067f0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2240      	movs	r2, #64	; 0x40
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02f      	b.n	800685e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2220      	movs	r2, #32
 8006806:	4013      	ands	r3, r2
 8006808:	2b20      	cmp	r3, #32
 800680a:	d1d6      	bne.n	80067ba <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2210      	movs	r2, #16
 8006812:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2220      	movs	r2, #32
 800681a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	0018      	movs	r0, r3
 8006820:	f7ff fece 	bl	80065c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	490e      	ldr	r1, [pc, #56]	; (8006868 <I2C_IsAcknowledgeFailed+0xf0>)
 8006830:	400a      	ands	r2, r1
 8006832:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006838:	2204      	movs	r2, #4
 800683a:	431a      	orrs	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2241      	movs	r2, #65	; 0x41
 8006844:	2120      	movs	r1, #32
 8006846:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2242      	movs	r2, #66	; 0x42
 800684c:	2100      	movs	r1, #0
 800684e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2240      	movs	r2, #64	; 0x40
 8006854:	2100      	movs	r1, #0
 8006856:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	b004      	add	sp, #16
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	fe00e800 	.word	0xfe00e800

0800686c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	0008      	movs	r0, r1
 8006876:	0011      	movs	r1, r2
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	240a      	movs	r4, #10
 800687c:	193b      	adds	r3, r7, r4
 800687e:	1c02      	adds	r2, r0, #0
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	2009      	movs	r0, #9
 8006884:	183b      	adds	r3, r7, r0
 8006886:	1c0a      	adds	r2, r1, #0
 8006888:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	6a3a      	ldr	r2, [r7, #32]
 8006892:	0d51      	lsrs	r1, r2, #21
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	400a      	ands	r2, r1
 800689a:	490e      	ldr	r1, [pc, #56]	; (80068d4 <I2C_TransferConfig+0x68>)
 800689c:	430a      	orrs	r2, r1
 800689e:	43d2      	mvns	r2, r2
 80068a0:	401a      	ands	r2, r3
 80068a2:	0011      	movs	r1, r2
 80068a4:	193b      	adds	r3, r7, r4
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	0d9a      	lsrs	r2, r3, #22
 80068ac:	183b      	adds	r3, r7, r0
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	0418      	lsls	r0, r3, #16
 80068b2:	23ff      	movs	r3, #255	; 0xff
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	4003      	ands	r3, r0
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	431a      	orrs	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b005      	add	sp, #20
 80068d0:	bd90      	pop	{r4, r7, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	03ff63ff 	.word	0x03ff63ff

080068d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2241      	movs	r2, #65	; 0x41
 80068e6:	5c9b      	ldrb	r3, [r3, r2]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d138      	bne.n	8006960 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	5c9b      	ldrb	r3, [r3, r2]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e032      	b.n	8006962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2240      	movs	r2, #64	; 0x40
 8006900:	2101      	movs	r1, #1
 8006902:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2241      	movs	r2, #65	; 0x41
 8006908:	2124      	movs	r1, #36	; 0x24
 800690a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2101      	movs	r1, #1
 8006918:	438a      	bics	r2, r1
 800691a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4911      	ldr	r1, [pc, #68]	; (800696c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006928:	400a      	ands	r2, r1
 800692a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6819      	ldr	r1, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2101      	movs	r1, #1
 8006948:	430a      	orrs	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2241      	movs	r2, #65	; 0x41
 8006950:	2120      	movs	r1, #32
 8006952:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2240      	movs	r2, #64	; 0x40
 8006958:	2100      	movs	r1, #0
 800695a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	e000      	b.n	8006962 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006960:	2302      	movs	r3, #2
  }
}
 8006962:	0018      	movs	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	b002      	add	sp, #8
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	ffffefff 	.word	0xffffefff

08006970 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2241      	movs	r2, #65	; 0x41
 800697e:	5c9b      	ldrb	r3, [r3, r2]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b20      	cmp	r3, #32
 8006984:	d139      	bne.n	80069fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2240      	movs	r2, #64	; 0x40
 800698a:	5c9b      	ldrb	r3, [r3, r2]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006990:	2302      	movs	r3, #2
 8006992:	e033      	b.n	80069fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2240      	movs	r2, #64	; 0x40
 8006998:	2101      	movs	r1, #1
 800699a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2241      	movs	r2, #65	; 0x41
 80069a0:	2124      	movs	r1, #36	; 0x24
 80069a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2101      	movs	r1, #1
 80069b0:	438a      	bics	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2101      	movs	r1, #1
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2241      	movs	r2, #65	; 0x41
 80069ea:	2120      	movs	r1, #32
 80069ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	2100      	movs	r1, #0
 80069f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e000      	b.n	80069fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069fa:	2302      	movs	r3, #2
  }
}
 80069fc:	0018      	movs	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	b004      	add	sp, #16
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	fffff0ff 	.word	0xfffff0ff

08006a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e305      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4013      	ands	r3, r2
 8006a22:	d100      	bne.n	8006a26 <HAL_RCC_OscConfig+0x1e>
 8006a24:	e08d      	b.n	8006b42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a26:	4bc5      	ldr	r3, [pc, #788]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	220c      	movs	r2, #12
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d00e      	beq.n	8006a50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a32:	4bc2      	ldr	r3, [pc, #776]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	220c      	movs	r2, #12
 8006a38:	4013      	ands	r3, r2
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d116      	bne.n	8006a6c <HAL_RCC_OscConfig+0x64>
 8006a3e:	4bbf      	ldr	r3, [pc, #764]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	23c0      	movs	r3, #192	; 0xc0
 8006a44:	025b      	lsls	r3, r3, #9
 8006a46:	401a      	ands	r2, r3
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	025b      	lsls	r3, r3, #9
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d10d      	bne.n	8006a6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a50:	4bba      	ldr	r3, [pc, #744]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	029b      	lsls	r3, r3, #10
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d100      	bne.n	8006a5e <HAL_RCC_OscConfig+0x56>
 8006a5c:	e070      	b.n	8006b40 <HAL_RCC_OscConfig+0x138>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d000      	beq.n	8006a68 <HAL_RCC_OscConfig+0x60>
 8006a66:	e06b      	b.n	8006b40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e2dc      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d107      	bne.n	8006a84 <HAL_RCC_OscConfig+0x7c>
 8006a74:	4bb1      	ldr	r3, [pc, #708]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4bb0      	ldr	r3, [pc, #704]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	0249      	lsls	r1, r1, #9
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e02f      	b.n	8006ae4 <HAL_RCC_OscConfig+0xdc>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x9e>
 8006a8c:	4bab      	ldr	r3, [pc, #684]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4baa      	ldr	r3, [pc, #680]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a92:	49ab      	ldr	r1, [pc, #684]	; (8006d40 <HAL_RCC_OscConfig+0x338>)
 8006a94:	400a      	ands	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	4ba8      	ldr	r3, [pc, #672]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4ba7      	ldr	r3, [pc, #668]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006a9e:	49a9      	ldr	r1, [pc, #676]	; (8006d44 <HAL_RCC_OscConfig+0x33c>)
 8006aa0:	400a      	ands	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e01e      	b.n	8006ae4 <HAL_RCC_OscConfig+0xdc>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	d10e      	bne.n	8006acc <HAL_RCC_OscConfig+0xc4>
 8006aae:	4ba3      	ldr	r3, [pc, #652]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4ba2      	ldr	r3, [pc, #648]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ab4:	2180      	movs	r1, #128	; 0x80
 8006ab6:	02c9      	lsls	r1, r1, #11
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	4b9f      	ldr	r3, [pc, #636]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b9e      	ldr	r3, [pc, #632]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ac2:	2180      	movs	r1, #128	; 0x80
 8006ac4:	0249      	lsls	r1, r1, #9
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e00b      	b.n	8006ae4 <HAL_RCC_OscConfig+0xdc>
 8006acc:	4b9b      	ldr	r3, [pc, #620]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b9a      	ldr	r3, [pc, #616]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ad2:	499b      	ldr	r1, [pc, #620]	; (8006d40 <HAL_RCC_OscConfig+0x338>)
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	4b98      	ldr	r3, [pc, #608]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b97      	ldr	r3, [pc, #604]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006ade:	4999      	ldr	r1, [pc, #612]	; (8006d44 <HAL_RCC_OscConfig+0x33c>)
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fe fb3c 	bl	8005168 <HAL_GetTick>
 8006af0:	0003      	movs	r3, r0
 8006af2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af6:	f7fe fb37 	bl	8005168 <HAL_GetTick>
 8006afa:	0002      	movs	r2, r0
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b64      	cmp	r3, #100	; 0x64
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e28e      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b08:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	2380      	movs	r3, #128	; 0x80
 8006b0e:	029b      	lsls	r3, r3, #10
 8006b10:	4013      	ands	r3, r2
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0xee>
 8006b14:	e015      	b.n	8006b42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fe fb27 	bl	8005168 <HAL_GetTick>
 8006b1a:	0003      	movs	r3, r0
 8006b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fe fb22 	bl	8005168 <HAL_GetTick>
 8006b24:	0002      	movs	r2, r0
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b64      	cmp	r3, #100	; 0x64
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e279      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b32:	4b82      	ldr	r3, [pc, #520]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	029b      	lsls	r3, r3, #10
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0x118>
 8006b3e:	e000      	b.n	8006b42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2202      	movs	r2, #2
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d100      	bne.n	8006b4e <HAL_RCC_OscConfig+0x146>
 8006b4c:	e06c      	b.n	8006c28 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006b4e:	4b7b      	ldr	r3, [pc, #492]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	220c      	movs	r2, #12
 8006b54:	4013      	ands	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006b58:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	220c      	movs	r2, #12
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d11f      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x19c>
 8006b64:	4b75      	ldr	r3, [pc, #468]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	23c0      	movs	r3, #192	; 0xc0
 8006b6a:	025b      	lsls	r3, r3, #9
 8006b6c:	401a      	ands	r2, r3
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	021b      	lsls	r3, r3, #8
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d116      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	4b71      	ldr	r3, [pc, #452]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_OscConfig+0x184>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e24c      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8c:	4b6b      	ldr	r3, [pc, #428]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	22f8      	movs	r2, #248	; 0xf8
 8006b92:	4393      	bics	r3, r2
 8006b94:	0019      	movs	r1, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	00da      	lsls	r2, r3, #3
 8006b9c:	4b67      	ldr	r3, [pc, #412]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	e041      	b.n	8006c28 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d024      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bac:	4b63      	ldr	r3, [pc, #396]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fe fad6 	bl	8005168 <HAL_GetTick>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bc2:	f7fe fad1 	bl	8005168 <HAL_GetTick>
 8006bc6:	0002      	movs	r2, r0
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e228      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd4:	4b59      	ldr	r3, [pc, #356]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	4013      	ands	r3, r2
 8006bdc:	d0f1      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	22f8      	movs	r2, #248	; 0xf8
 8006be4:	4393      	bics	r3, r2
 8006be6:	0019      	movs	r1, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	00da      	lsls	r2, r3, #3
 8006bee:	4b53      	ldr	r3, [pc, #332]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e018      	b.n	8006c28 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bf6:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4b50      	ldr	r3, [pc, #320]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	438a      	bics	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c02:	f7fe fab1 	bl	8005168 <HAL_GetTick>
 8006c06:	0003      	movs	r3, r0
 8006c08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c0c:	f7fe faac 	bl	8005168 <HAL_GetTick>
 8006c10:	0002      	movs	r2, r0
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e203      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1e:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2202      	movs	r2, #2
 8006c24:	4013      	ands	r3, r2
 8006c26:	d1f1      	bne.n	8006c0c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2208      	movs	r2, #8
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d036      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d019      	beq.n	8006c6e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c3a:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c3e:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c40:	2101      	movs	r1, #1
 8006c42:	430a      	orrs	r2, r1
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c46:	f7fe fa8f 	bl	8005168 <HAL_GetTick>
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c50:	f7fe fa8a 	bl	8005168 <HAL_GetTick>
 8006c54:	0002      	movs	r2, r0
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e1e1      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2202      	movs	r2, #2
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d0f1      	beq.n	8006c50 <HAL_RCC_OscConfig+0x248>
 8006c6c:	e018      	b.n	8006ca0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c72:	4b32      	ldr	r3, [pc, #200]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c74:	2101      	movs	r1, #1
 8006c76:	438a      	bics	r2, r1
 8006c78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7fe fa75 	bl	8005168 <HAL_GetTick>
 8006c7e:	0003      	movs	r3, r0
 8006c80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c84:	f7fe fa70 	bl	8005168 <HAL_GetTick>
 8006c88:	0002      	movs	r2, r0
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e1c7      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c96:	4b29      	ldr	r3, [pc, #164]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	d1f1      	bne.n	8006c84 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d100      	bne.n	8006cac <HAL_RCC_OscConfig+0x2a4>
 8006caa:	e0b5      	b.n	8006e18 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cac:	201f      	movs	r0, #31
 8006cae:	183b      	adds	r3, r7, r0
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cb4:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	055b      	lsls	r3, r3, #21
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d110      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cc0:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006cc6:	2180      	movs	r1, #128	; 0x80
 8006cc8:	0549      	lsls	r1, r1, #21
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	61da      	str	r2, [r3, #28]
 8006cce:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	2380      	movs	r3, #128	; 0x80
 8006cd4:	055b      	lsls	r3, r3, #21
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006cdc:	183b      	adds	r3, r7, r0
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce2:	4b19      	ldr	r3, [pc, #100]	; (8006d48 <HAL_RCC_OscConfig+0x340>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	2380      	movs	r3, #128	; 0x80
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4013      	ands	r3, r2
 8006cec:	d11a      	bne.n	8006d24 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <HAL_RCC_OscConfig+0x340>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <HAL_RCC_OscConfig+0x340>)
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	0049      	lsls	r1, r1, #1
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cfc:	f7fe fa34 	bl	8005168 <HAL_GetTick>
 8006d00:	0003      	movs	r3, r0
 8006d02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d06:	f7fe fa2f 	bl	8005168 <HAL_GetTick>
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b64      	cmp	r3, #100	; 0x64
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e186      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_RCC_OscConfig+0x340>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d10f      	bne.n	8006d4c <HAL_RCC_OscConfig+0x344>
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	4b02      	ldr	r3, [pc, #8]	; (8006d3c <HAL_RCC_OscConfig+0x334>)
 8006d32:	2101      	movs	r1, #1
 8006d34:	430a      	orrs	r2, r1
 8006d36:	621a      	str	r2, [r3, #32]
 8006d38:	e036      	b.n	8006da8 <HAL_RCC_OscConfig+0x3a0>
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	fffeffff 	.word	0xfffeffff
 8006d44:	fffbffff 	.word	0xfffbffff
 8006d48:	40007000 	.word	0x40007000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10c      	bne.n	8006d6e <HAL_RCC_OscConfig+0x366>
 8006d54:	4bb6      	ldr	r3, [pc, #728]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d56:	6a1a      	ldr	r2, [r3, #32]
 8006d58:	4bb5      	ldr	r3, [pc, #724]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	438a      	bics	r2, r1
 8006d5e:	621a      	str	r2, [r3, #32]
 8006d60:	4bb3      	ldr	r3, [pc, #716]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	4bb2      	ldr	r3, [pc, #712]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d66:	2104      	movs	r1, #4
 8006d68:	438a      	bics	r2, r1
 8006d6a:	621a      	str	r2, [r3, #32]
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCC_OscConfig+0x3a0>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b05      	cmp	r3, #5
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x388>
 8006d76:	4bae      	ldr	r3, [pc, #696]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	4bad      	ldr	r3, [pc, #692]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	621a      	str	r2, [r3, #32]
 8006d82:	4bab      	ldr	r3, [pc, #684]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d84:	6a1a      	ldr	r2, [r3, #32]
 8006d86:	4baa      	ldr	r3, [pc, #680]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d88:	2101      	movs	r1, #1
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	621a      	str	r2, [r3, #32]
 8006d8e:	e00b      	b.n	8006da8 <HAL_RCC_OscConfig+0x3a0>
 8006d90:	4ba7      	ldr	r3, [pc, #668]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d92:	6a1a      	ldr	r2, [r3, #32]
 8006d94:	4ba6      	ldr	r3, [pc, #664]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d96:	2101      	movs	r1, #1
 8006d98:	438a      	bics	r2, r1
 8006d9a:	621a      	str	r2, [r3, #32]
 8006d9c:	4ba4      	ldr	r3, [pc, #656]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	4ba3      	ldr	r3, [pc, #652]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006da2:	2104      	movs	r1, #4
 8006da4:	438a      	bics	r2, r1
 8006da6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d014      	beq.n	8006dda <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db0:	f7fe f9da 	bl	8005168 <HAL_GetTick>
 8006db4:	0003      	movs	r3, r0
 8006db6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e009      	b.n	8006dce <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fe f9d5 	bl	8005168 <HAL_GetTick>
 8006dbe:	0002      	movs	r2, r0
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	4a9b      	ldr	r2, [pc, #620]	; (8007034 <HAL_RCC_OscConfig+0x62c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e12b      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	4b98      	ldr	r3, [pc, #608]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x3b2>
 8006dd8:	e013      	b.n	8006e02 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dda:	f7fe f9c5 	bl	8005168 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de2:	e009      	b.n	8006df8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de4:	f7fe f9c0 	bl	8005168 <HAL_GetTick>
 8006de8:	0002      	movs	r2, r0
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	4a91      	ldr	r2, [pc, #580]	; (8007034 <HAL_RCC_OscConfig+0x62c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e116      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df8:	4b8d      	ldr	r3, [pc, #564]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e02:	231f      	movs	r3, #31
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0c:	4b88      	ldr	r3, [pc, #544]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	4b87      	ldr	r3, [pc, #540]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e12:	4989      	ldr	r1, [pc, #548]	; (8007038 <HAL_RCC_OscConfig+0x630>)
 8006e14:	400a      	ands	r2, r1
 8006e16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	4013      	ands	r3, r2
 8006e20:	d063      	beq.n	8006eea <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d12a      	bne.n	8006e80 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006e2a:	4b81      	ldr	r3, [pc, #516]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e2e:	4b80      	ldr	r3, [pc, #512]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e30:	2104      	movs	r1, #4
 8006e32:	430a      	orrs	r2, r1
 8006e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006e36:	4b7e      	ldr	r3, [pc, #504]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3a:	4b7d      	ldr	r3, [pc, #500]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e42:	f7fe f991 	bl	8005168 <HAL_GetTick>
 8006e46:	0003      	movs	r3, r0
 8006e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006e4c:	f7fe f98c 	bl	8005168 <HAL_GetTick>
 8006e50:	0002      	movs	r2, r0
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e0e3      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006e5e:	4b74      	ldr	r3, [pc, #464]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e62:	2202      	movs	r2, #2
 8006e64:	4013      	ands	r3, r2
 8006e66:	d0f1      	beq.n	8006e4c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006e68:	4b71      	ldr	r3, [pc, #452]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6c:	22f8      	movs	r2, #248	; 0xf8
 8006e6e:	4393      	bics	r3, r2
 8006e70:	0019      	movs	r1, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	00da      	lsls	r2, r3, #3
 8006e78:	4b6d      	ldr	r3, [pc, #436]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006e7e:	e034      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	3305      	adds	r3, #5
 8006e86:	d111      	bne.n	8006eac <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006e88:	4b69      	ldr	r3, [pc, #420]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e8e:	2104      	movs	r1, #4
 8006e90:	438a      	bics	r2, r1
 8006e92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006e94:	4b66      	ldr	r3, [pc, #408]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	22f8      	movs	r2, #248	; 0xf8
 8006e9a:	4393      	bics	r3, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	00da      	lsls	r2, r3, #3
 8006ea4:	4b62      	ldr	r3, [pc, #392]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8006eaa:	e01e      	b.n	8006eea <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006eac:	4b60      	ldr	r3, [pc, #384]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eb0:	4b5f      	ldr	r3, [pc, #380]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006eb8:	4b5d      	ldr	r3, [pc, #372]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebc:	4b5c      	ldr	r3, [pc, #368]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	438a      	bics	r2, r1
 8006ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec4:	f7fe f950 	bl	8005168 <HAL_GetTick>
 8006ec8:	0003      	movs	r3, r0
 8006eca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006ece:	f7fe f94b 	bl	8005168 <HAL_GetTick>
 8006ed2:	0002      	movs	r2, r0
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e0a2      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006ee0:	4b53      	ldr	r3, [pc, #332]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d1f1      	bne.n	8006ece <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d100      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x4ec>
 8006ef2:	e097      	b.n	8007024 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ef4:	4b4e      	ldr	r3, [pc, #312]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	220c      	movs	r2, #12
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d100      	bne.n	8006f02 <HAL_RCC_OscConfig+0x4fa>
 8006f00:	e06b      	b.n	8006fda <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d14c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0a:	4b49      	ldr	r3, [pc, #292]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b48      	ldr	r3, [pc, #288]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f10:	494a      	ldr	r1, [pc, #296]	; (800703c <HAL_RCC_OscConfig+0x634>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f16:	f7fe f927 	bl	8005168 <HAL_GetTick>
 8006f1a:	0003      	movs	r3, r0
 8006f1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fe f922 	bl	8005168 <HAL_GetTick>
 8006f24:	0002      	movs	r2, r0
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e079      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	049b      	lsls	r3, r3, #18
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f3e:	4b3c      	ldr	r3, [pc, #240]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	220f      	movs	r2, #15
 8006f44:	4393      	bics	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4b38      	ldr	r3, [pc, #224]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f52:	4b37      	ldr	r3, [pc, #220]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	4a3a      	ldr	r2, [pc, #232]	; (8007040 <HAL_RCC_OscConfig+0x638>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	431a      	orrs	r2, r3
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f6c:	4b30      	ldr	r3, [pc, #192]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	4b2f      	ldr	r3, [pc, #188]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f72:	2180      	movs	r1, #128	; 0x80
 8006f74:	0449      	lsls	r1, r1, #17
 8006f76:	430a      	orrs	r2, r1
 8006f78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7a:	f7fe f8f5 	bl	8005168 <HAL_GetTick>
 8006f7e:	0003      	movs	r3, r0
 8006f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f84:	f7fe f8f0 	bl	8005168 <HAL_GetTick>
 8006f88:	0002      	movs	r2, r0
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e047      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f96:	4b26      	ldr	r3, [pc, #152]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	049b      	lsls	r3, r3, #18
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0x57c>
 8006fa2:	e03f      	b.n	8007024 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b21      	ldr	r3, [pc, #132]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006faa:	4924      	ldr	r1, [pc, #144]	; (800703c <HAL_RCC_OscConfig+0x634>)
 8006fac:	400a      	ands	r2, r1
 8006fae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fe f8da 	bl	8005168 <HAL_GetTick>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fba:	f7fe f8d5 	bl	8005168 <HAL_GetTick>
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e02c      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fcc:	4b18      	ldr	r3, [pc, #96]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	049b      	lsls	r3, r3, #18
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d1f0      	bne.n	8006fba <HAL_RCC_OscConfig+0x5b2>
 8006fd8:	e024      	b.n	8007024 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e01f      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <HAL_RCC_OscConfig+0x628>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	23c0      	movs	r3, #192	; 0xc0
 8006ff6:	025b      	lsls	r3, r3, #9
 8006ff8:	401a      	ands	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d10e      	bne.n	8007020 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	220f      	movs	r2, #15
 8007006:	401a      	ands	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d107      	bne.n	8007020 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	23f0      	movs	r3, #240	; 0xf0
 8007014:	039b      	lsls	r3, r3, #14
 8007016:	401a      	ands	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	0018      	movs	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	b008      	add	sp, #32
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	40021000 	.word	0x40021000
 8007034:	00001388 	.word	0x00001388
 8007038:	efffffff 	.word	0xefffffff
 800703c:	feffffff 	.word	0xfeffffff
 8007040:	ffc27fff 	.word	0xffc27fff

08007044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0b3      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007058:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2201      	movs	r2, #1
 800705e:	4013      	ands	r3, r2
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d911      	bls.n	800708a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b58      	ldr	r3, [pc, #352]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2201      	movs	r2, #1
 800706c:	4393      	bics	r3, r2
 800706e:	0019      	movs	r1, r3
 8007070:	4b55      	ldr	r3, [pc, #340]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007078:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2201      	movs	r2, #1
 800707e:	4013      	ands	r3, r2
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d001      	beq.n	800708a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e09a      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2202      	movs	r2, #2
 8007090:	4013      	ands	r3, r2
 8007092:	d015      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2204      	movs	r2, #4
 800709a:	4013      	ands	r3, r2
 800709c:	d006      	beq.n	80070ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800709e:	4b4b      	ldr	r3, [pc, #300]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	4b4a      	ldr	r3, [pc, #296]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070a4:	21e0      	movs	r1, #224	; 0xe0
 80070a6:	00c9      	lsls	r1, r1, #3
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070ac:	4b47      	ldr	r3, [pc, #284]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	22f0      	movs	r2, #240	; 0xf0
 80070b2:	4393      	bics	r3, r2
 80070b4:	0019      	movs	r1, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	4b44      	ldr	r3, [pc, #272]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070bc:	430a      	orrs	r2, r1
 80070be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2201      	movs	r2, #1
 80070c6:	4013      	ands	r3, r2
 80070c8:	d040      	beq.n	800714c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d107      	bne.n	80070e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d2:	4b3e      	ldr	r3, [pc, #248]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	4013      	ands	r3, r2
 80070dc:	d114      	bne.n	8007108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e06e      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d107      	bne.n	80070fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ea:	4b38      	ldr	r3, [pc, #224]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	049b      	lsls	r3, r3, #18
 80070f2:	4013      	ands	r3, r2
 80070f4:	d108      	bne.n	8007108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e062      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070fa:	4b34      	ldr	r3, [pc, #208]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2202      	movs	r2, #2
 8007100:	4013      	ands	r3, r2
 8007102:	d101      	bne.n	8007108 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e05b      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007108:	4b30      	ldr	r3, [pc, #192]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	4393      	bics	r3, r2
 8007110:	0019      	movs	r1, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800711c:	f7fe f824 	bl	8005168 <HAL_GetTick>
 8007120:	0003      	movs	r3, r0
 8007122:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007124:	e009      	b.n	800713a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007126:	f7fe f81f 	bl	8005168 <HAL_GetTick>
 800712a:	0002      	movs	r2, r0
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	4a27      	ldr	r2, [pc, #156]	; (80071d0 <HAL_RCC_ClockConfig+0x18c>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d901      	bls.n	800713a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e042      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713a:	4b24      	ldr	r3, [pc, #144]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	220c      	movs	r2, #12
 8007140:	401a      	ands	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	429a      	cmp	r2, r3
 800714a:	d1ec      	bne.n	8007126 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	4013      	ands	r3, r2
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d211      	bcs.n	800717e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2201      	movs	r2, #1
 8007160:	4393      	bics	r3, r2
 8007162:	0019      	movs	r1, r3
 8007164:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	430a      	orrs	r2, r1
 800716a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800716c:	4b16      	ldr	r3, [pc, #88]	; (80071c8 <HAL_RCC_ClockConfig+0x184>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2201      	movs	r2, #1
 8007172:	4013      	ands	r3, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d001      	beq.n	800717e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e020      	b.n	80071c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2204      	movs	r2, #4
 8007184:	4013      	ands	r3, r2
 8007186:	d009      	beq.n	800719c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007188:	4b10      	ldr	r3, [pc, #64]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4a11      	ldr	r2, [pc, #68]	; (80071d4 <HAL_RCC_ClockConfig+0x190>)
 800718e:	4013      	ands	r3, r2
 8007190:	0019      	movs	r1, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 8007198:	430a      	orrs	r2, r1
 800719a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800719c:	f000 f820 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 80071a0:	0001      	movs	r1, r0
 80071a2:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <HAL_RCC_ClockConfig+0x188>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	220f      	movs	r2, #15
 80071aa:	4013      	ands	r3, r2
 80071ac:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <HAL_RCC_ClockConfig+0x194>)
 80071ae:	5cd3      	ldrb	r3, [r2, r3]
 80071b0:	000a      	movs	r2, r1
 80071b2:	40da      	lsrs	r2, r3
 80071b4:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x198>)
 80071b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80071b8:	2003      	movs	r0, #3
 80071ba:	f7fd fdff 	bl	8004dbc <HAL_InitTick>
  
  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	0018      	movs	r0, r3
 80071c2:	46bd      	mov	sp, r7
 80071c4:	b004      	add	sp, #16
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40022000 	.word	0x40022000
 80071cc:	40021000 	.word	0x40021000
 80071d0:	00001388 	.word	0x00001388
 80071d4:	fffff8ff 	.word	0xfffff8ff
 80071d8:	08015c58 	.word	0x08015c58
 80071dc:	20000064 	.word	0x20000064

080071e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b08f      	sub	sp, #60	; 0x3c
 80071e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80071e6:	2314      	movs	r3, #20
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	4a2c      	ldr	r2, [pc, #176]	; (800729c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80071ee:	c313      	stmia	r3!, {r0, r1, r4}
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80071f4:	1d3b      	adds	r3, r7, #4
 80071f6:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80071fa:	c313      	stmia	r3!, {r0, r1, r4}
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007204:	2300      	movs	r3, #0
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28
 8007208:	2300      	movs	r3, #0
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
 800720c:	2300      	movs	r3, #0
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	220c      	movs	r2, #12
 800721e:	4013      	ands	r3, r2
 8007220:	2b04      	cmp	r3, #4
 8007222:	d002      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x4a>
 8007224:	2b08      	cmp	r3, #8
 8007226:	d003      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0x50>
 8007228:	e02f      	b.n	800728a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800722a:	4b1f      	ldr	r3, [pc, #124]	; (80072a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800722c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800722e:	e02f      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	0c9b      	lsrs	r3, r3, #18
 8007234:	220f      	movs	r2, #15
 8007236:	4013      	ands	r3, r2
 8007238:	2214      	movs	r2, #20
 800723a:	18ba      	adds	r2, r7, r2
 800723c:	5cd3      	ldrb	r3, [r2, r3]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007240:	4b18      	ldr	r3, [pc, #96]	; (80072a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	220f      	movs	r2, #15
 8007246:	4013      	ands	r3, r2
 8007248:	1d3a      	adds	r2, r7, #4
 800724a:	5cd3      	ldrb	r3, [r2, r3]
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800724e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007250:	23c0      	movs	r3, #192	; 0xc0
 8007252:	025b      	lsls	r3, r3, #9
 8007254:	401a      	ands	r2, r3
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	025b      	lsls	r3, r3, #9
 800725a:	429a      	cmp	r2, r3
 800725c:	d109      	bne.n	8007272 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800725e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007260:	4811      	ldr	r0, [pc, #68]	; (80072a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007262:	f7f8 ff6d 	bl	8000140 <__udivsi3>
 8007266:	0003      	movs	r3, r0
 8007268:	001a      	movs	r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	4353      	muls	r3, r2
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
 8007270:	e008      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007274:	480c      	ldr	r0, [pc, #48]	; (80072a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007276:	f7f8 ff63 	bl	8000140 <__udivsi3>
 800727a:	0003      	movs	r3, r0
 800727c:	001a      	movs	r2, r3
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	4353      	muls	r3, r2
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8007284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007286:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007288:	e002      	b.n	8007290 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800728c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800728e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007292:	0018      	movs	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	b00f      	add	sp, #60	; 0x3c
 8007298:	bd90      	pop	{r4, r7, pc}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	08015460 	.word	0x08015460
 80072a0:	08015470 	.word	0x08015470
 80072a4:	40021000 	.word	0x40021000
 80072a8:	007a1200 	.word	0x007a1200

080072ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <HAL_RCC_GetHCLKFreq+0x10>)
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	0018      	movs	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	20000064 	.word	0x20000064

080072c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80072c4:	f7ff fff2 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80072c8:	0001      	movs	r1, r0
 80072ca:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	2207      	movs	r2, #7
 80072d2:	4013      	ands	r3, r2
 80072d4:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072d6:	5cd3      	ldrb	r3, [r2, r3]
 80072d8:	40d9      	lsrs	r1, r3
 80072da:	000b      	movs	r3, r1
}    
 80072dc:	0018      	movs	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	40021000 	.word	0x40021000
 80072e8:	08015c68 	.word	0x08015c68

080072ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072fc:	4b0e      	ldr	r3, [pc, #56]	; (8007338 <HAL_RCC_GetClockConfig+0x4c>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2203      	movs	r2, #3
 8007302:	401a      	ands	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <HAL_RCC_GetClockConfig+0x4c>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	22f0      	movs	r2, #240	; 0xf0
 800730e:	401a      	ands	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <HAL_RCC_GetClockConfig+0x4c>)
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	23e0      	movs	r3, #224	; 0xe0
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	401a      	ands	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8007322:	4b06      	ldr	r3, [pc, #24]	; (800733c <HAL_RCC_GetClockConfig+0x50>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2201      	movs	r2, #1
 8007328:	401a      	ands	r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	40021000 	.word	0x40021000
 800733c:	40022000 	.word	0x40022000

08007340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	2380      	movs	r3, #128	; 0x80
 8007356:	025b      	lsls	r3, r3, #9
 8007358:	4013      	ands	r3, r2
 800735a:	d100      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800735c:	e08e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800735e:	2017      	movs	r0, #23
 8007360:	183b      	adds	r3, r7, r0
 8007362:	2200      	movs	r2, #0
 8007364:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007366:	4b5f      	ldr	r3, [pc, #380]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007368:	69da      	ldr	r2, [r3, #28]
 800736a:	2380      	movs	r3, #128	; 0x80
 800736c:	055b      	lsls	r3, r3, #21
 800736e:	4013      	ands	r3, r2
 8007370:	d110      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	4b5c      	ldr	r3, [pc, #368]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007374:	69da      	ldr	r2, [r3, #28]
 8007376:	4b5b      	ldr	r3, [pc, #364]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007378:	2180      	movs	r1, #128	; 0x80
 800737a:	0549      	lsls	r1, r1, #21
 800737c:	430a      	orrs	r2, r1
 800737e:	61da      	str	r2, [r3, #28]
 8007380:	4b58      	ldr	r3, [pc, #352]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	2380      	movs	r3, #128	; 0x80
 8007386:	055b      	lsls	r3, r3, #21
 8007388:	4013      	ands	r3, r2
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800738e:	183b      	adds	r3, r7, r0
 8007390:	2201      	movs	r2, #1
 8007392:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007394:	4b54      	ldr	r3, [pc, #336]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4013      	ands	r3, r2
 800739e:	d11a      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073a0:	4b51      	ldr	r3, [pc, #324]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4b50      	ldr	r3, [pc, #320]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80073a6:	2180      	movs	r1, #128	; 0x80
 80073a8:	0049      	lsls	r1, r1, #1
 80073aa:	430a      	orrs	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073ae:	f7fd fedb 	bl	8005168 <HAL_GetTick>
 80073b2:	0003      	movs	r3, r0
 80073b4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b6:	e008      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b8:	f7fd fed6 	bl	8005168 <HAL_GetTick>
 80073bc:	0002      	movs	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b64      	cmp	r3, #100	; 0x64
 80073c4:	d901      	bls.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e087      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ca:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	4013      	ands	r3, r2
 80073d4:	d0f0      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073d6:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	23c0      	movs	r3, #192	; 0xc0
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4013      	ands	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d034      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	23c0      	movs	r3, #192	; 0xc0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4013      	ands	r3, r2
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d02c      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073f8:	4b3a      	ldr	r3, [pc, #232]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	4a3b      	ldr	r2, [pc, #236]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073fe:	4013      	ands	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007402:	4b38      	ldr	r3, [pc, #224]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	4b37      	ldr	r3, [pc, #220]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007408:	2180      	movs	r1, #128	; 0x80
 800740a:	0249      	lsls	r1, r1, #9
 800740c:	430a      	orrs	r2, r1
 800740e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	4b33      	ldr	r3, [pc, #204]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007416:	4936      	ldr	r1, [pc, #216]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007418:	400a      	ands	r2, r1
 800741a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800741c:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	4013      	ands	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800742a:	f7fd fe9d 	bl	8005168 <HAL_GetTick>
 800742e:	0003      	movs	r3, r0
 8007430:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007432:	e009      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007434:	f7fd fe98 	bl	8005168 <HAL_GetTick>
 8007438:	0002      	movs	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	4a2d      	ldr	r2, [pc, #180]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e048      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007448:	4b26      	ldr	r3, [pc, #152]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	2202      	movs	r2, #2
 800744e:	4013      	ands	r3, r2
 8007450:	d0f0      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007452:	4b24      	ldr	r3, [pc, #144]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	4a25      	ldr	r2, [pc, #148]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007458:	4013      	ands	r3, r2
 800745a:	0019      	movs	r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007462:	430a      	orrs	r2, r1
 8007464:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007466:	2317      	movs	r3, #23
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d105      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007470:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007476:	4920      	ldr	r1, [pc, #128]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007478:	400a      	ands	r2, r1
 800747a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	4013      	ands	r3, r2
 8007484:	d009      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007486:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	2203      	movs	r2, #3
 800748c:	4393      	bics	r3, r2
 800748e:	0019      	movs	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007496:	430a      	orrs	r2, r1
 8007498:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2220      	movs	r2, #32
 80074a0:	4013      	ands	r3, r2
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074a4:	4b0f      	ldr	r3, [pc, #60]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	2210      	movs	r2, #16
 80074aa:	4393      	bics	r3, r2
 80074ac:	0019      	movs	r1, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80074b4:	430a      	orrs	r2, r1
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	2380      	movs	r3, #128	; 0x80
 80074be:	029b      	lsls	r3, r3, #10
 80074c0:	4013      	ands	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074c4:	4b07      	ldr	r3, [pc, #28]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	2280      	movs	r2, #128	; 0x80
 80074ca:	4393      	bics	r3, r2
 80074cc:	0019      	movs	r1, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80074d4:	430a      	orrs	r2, r1
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	0018      	movs	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	b006      	add	sp, #24
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	46c0      	nop			; (mov r8, r8)
 80074e4:	40021000 	.word	0x40021000
 80074e8:	40007000 	.word	0x40007000
 80074ec:	fffffcff 	.word	0xfffffcff
 80074f0:	fffeffff 	.word	0xfffeffff
 80074f4:	00001388 	.word	0x00001388
 80074f8:	efffffff 	.word	0xefffffff

080074fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0a8      	b.n	8007660 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	2382      	movs	r3, #130	; 0x82
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	429a      	cmp	r2, r3
 8007520:	d009      	beq.n	8007536 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	61da      	str	r2, [r3, #28]
 8007528:	e005      	b.n	8007536 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	225d      	movs	r2, #93	; 0x5d
 8007540:	5c9b      	ldrb	r3, [r3, r2]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	225c      	movs	r2, #92	; 0x5c
 800754c:	2100      	movs	r1, #0
 800754e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	0018      	movs	r0, r3
 8007554:	f7fd faf6 	bl	8004b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	225d      	movs	r2, #93	; 0x5d
 800755c:	2102      	movs	r1, #2
 800755e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2140      	movs	r1, #64	; 0x40
 800756c:	438a      	bics	r2, r1
 800756e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	23e0      	movs	r3, #224	; 0xe0
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	429a      	cmp	r2, r3
 800757a:	d902      	bls.n	8007582 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e002      	b.n	8007588 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	015b      	lsls	r3, r3, #5
 8007586:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	23f0      	movs	r3, #240	; 0xf0
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	429a      	cmp	r2, r3
 8007592:	d008      	beq.n	80075a6 <HAL_SPI_Init+0xaa>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	23e0      	movs	r3, #224	; 0xe0
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	429a      	cmp	r2, r3
 800759e:	d002      	beq.n	80075a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	2382      	movs	r3, #130	; 0x82
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	401a      	ands	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	2384      	movs	r3, #132	; 0x84
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	400b      	ands	r3, r1
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2102      	movs	r1, #2
 80075c2:	400b      	ands	r3, r1
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	2101      	movs	r1, #1
 80075cc:	400b      	ands	r3, r1
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6999      	ldr	r1, [r3, #24]
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	400b      	ands	r3, r1
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	2138      	movs	r1, #56	; 0x38
 80075e2:	400b      	ands	r3, r1
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	400b      	ands	r3, r1
 80075ee:	431a      	orrs	r2, r3
 80075f0:	0011      	movs	r1, r2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	019b      	lsls	r3, r3, #6
 80075fa:	401a      	ands	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	2204      	movs	r2, #4
 800760c:	401a      	ands	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007612:	2110      	movs	r1, #16
 8007614:	400b      	ands	r3, r1
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	2108      	movs	r1, #8
 800761e:	400b      	ands	r3, r1
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68d9      	ldr	r1, [r3, #12]
 8007626:	23f0      	movs	r3, #240	; 0xf0
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	400b      	ands	r3, r1
 800762c:	431a      	orrs	r2, r3
 800762e:	0011      	movs	r1, r2
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	2380      	movs	r3, #128	; 0x80
 8007634:	015b      	lsls	r3, r3, #5
 8007636:	401a      	ands	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4907      	ldr	r1, [pc, #28]	; (8007668 <HAL_SPI_Init+0x16c>)
 800764c:	400a      	ands	r2, r1
 800764e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	225d      	movs	r2, #93	; 0x5d
 800765a:	2101      	movs	r1, #1
 800765c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}
 8007668:	fffff7ff 	.word	0xfffff7ff

0800766c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	1dbb      	adds	r3, r7, #6
 800767a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800767c:	231f      	movs	r3, #31
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	225c      	movs	r2, #92	; 0x5c
 8007688:	5c9b      	ldrb	r3, [r3, r2]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_SPI_Transmit+0x26>
 800768e:	2302      	movs	r3, #2
 8007690:	e140      	b.n	8007914 <HAL_SPI_Transmit+0x2a8>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	225c      	movs	r2, #92	; 0x5c
 8007696:	2101      	movs	r1, #1
 8007698:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800769a:	f7fd fd65 	bl	8005168 <HAL_GetTick>
 800769e:	0003      	movs	r3, r0
 80076a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80076a2:	2316      	movs	r3, #22
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	1dba      	adds	r2, r7, #6
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	225d      	movs	r2, #93	; 0x5d
 80076b0:	5c9b      	ldrb	r3, [r3, r2]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d004      	beq.n	80076c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80076b8:	231f      	movs	r3, #31
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	2202      	movs	r2, #2
 80076be:	701a      	strb	r2, [r3, #0]
    goto error;
 80076c0:	e11d      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_SPI_Transmit+0x64>
 80076c8:	1dbb      	adds	r3, r7, #6
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80076d0:	231f      	movs	r3, #31
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	2201      	movs	r2, #1
 80076d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80076d8:	e111      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	225d      	movs	r2, #93	; 0x5d
 80076de:	2103      	movs	r1, #3
 80076e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1dba      	adds	r2, r7, #6
 80076f2:	8812      	ldrh	r2, [r2, #0]
 80076f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1dba      	adds	r2, r7, #6
 80076fa:	8812      	ldrh	r2, [r2, #0]
 80076fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2244      	movs	r2, #68	; 0x44
 8007708:	2100      	movs	r1, #0
 800770a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2246      	movs	r2, #70	; 0x46
 8007710:	2100      	movs	r1, #0
 8007712:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	429a      	cmp	r2, r3
 800772a:	d110      	bne.n	800774e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	438a      	bics	r2, r1
 800773a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	01c9      	lsls	r1, r1, #7
 800774a:	430a      	orrs	r2, r1
 800774c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2240      	movs	r2, #64	; 0x40
 8007756:	4013      	ands	r3, r2
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d007      	beq.n	800776c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2140      	movs	r1, #64	; 0x40
 8007768:	430a      	orrs	r2, r1
 800776a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	23e0      	movs	r3, #224	; 0xe0
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	429a      	cmp	r2, r3
 8007776:	d94e      	bls.n	8007816 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_SPI_Transmit+0x11e>
 8007780:	2316      	movs	r3, #22
 8007782:	18fb      	adds	r3, r7, r3
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d13f      	bne.n	800780a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	881a      	ldrh	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077ae:	e02c      	b.n	800780a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2202      	movs	r2, #2
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d112      	bne.n	80077e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	881a      	ldrh	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077e2:	e012      	b.n	800780a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e4:	f7fd fcc0 	bl	8005168 <HAL_GetTick>
 80077e8:	0002      	movs	r2, r0
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d802      	bhi.n	80077fa <HAL_SPI_Transmit+0x18e>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	d102      	bne.n	8007800 <HAL_SPI_Transmit+0x194>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d104      	bne.n	800780a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007800:	231f      	movs	r3, #31
 8007802:	18fb      	adds	r3, r7, r3
 8007804:	2203      	movs	r2, #3
 8007806:	701a      	strb	r2, [r3, #0]
          goto error;
 8007808:	e079      	b.n	80078fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1cd      	bne.n	80077b0 <HAL_SPI_Transmit+0x144>
 8007814:	e04f      	b.n	80078b6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <HAL_SPI_Transmit+0x1bc>
 800781e:	2316      	movs	r3, #22
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d141      	bne.n	80078ac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	330c      	adds	r3, #12
 8007832:	7812      	ldrb	r2, [r2, #0]
 8007834:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800784e:	e02d      	b.n	80078ac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2202      	movs	r2, #2
 8007858:	4013      	ands	r3, r2
 800785a:	2b02      	cmp	r3, #2
 800785c:	d113      	bne.n	8007886 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007884:	e012      	b.n	80078ac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007886:	f7fd fc6f 	bl	8005168 <HAL_GetTick>
 800788a:	0002      	movs	r2, r0
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d802      	bhi.n	800789c <HAL_SPI_Transmit+0x230>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	d102      	bne.n	80078a2 <HAL_SPI_Transmit+0x236>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80078a2:	231f      	movs	r3, #31
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	2203      	movs	r2, #3
 80078a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80078aa:	e028      	b.n	80078fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1cc      	bne.n	8007850 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	0018      	movs	r0, r3
 80078be:	f000 fce5 	bl	800828c <SPI_EndRxTxTransaction>
 80078c2:	1e03      	subs	r3, r0, #0
 80078c4:	d002      	beq.n	80078cc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2220      	movs	r2, #32
 80078ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80078f2:	231f      	movs	r3, #31
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	2201      	movs	r2, #1
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e000      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

error:
 80078fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	225d      	movs	r2, #93	; 0x5d
 8007902:	2101      	movs	r1, #1
 8007904:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	225c      	movs	r2, #92	; 0x5c
 800790a:	2100      	movs	r1, #0
 800790c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800790e:	231f      	movs	r3, #31
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	781b      	ldrb	r3, [r3, #0]
}
 8007914:	0018      	movs	r0, r3
 8007916:	46bd      	mov	sp, r7
 8007918:	b008      	add	sp, #32
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	1dbb      	adds	r3, r7, #6
 800792a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800792c:	2317      	movs	r3, #23
 800792e:	18fb      	adds	r3, r7, r3
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	2382      	movs	r3, #130	; 0x82
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	429a      	cmp	r2, r3
 800793e:	d113      	bne.n	8007968 <HAL_SPI_Receive+0x4c>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10f      	bne.n	8007968 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	225d      	movs	r2, #93	; 0x5d
 800794c:	2104      	movs	r1, #4
 800794e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007950:	1dbb      	adds	r3, r7, #6
 8007952:	881c      	ldrh	r4, [r3, #0]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	0023      	movs	r3, r4
 8007960:	f000 f928 	bl	8007bb4 <HAL_SPI_TransmitReceive>
 8007964:	0003      	movs	r3, r0
 8007966:	e11c      	b.n	8007ba2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	225c      	movs	r2, #92	; 0x5c
 800796c:	5c9b      	ldrb	r3, [r3, r2]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_SPI_Receive+0x5a>
 8007972:	2302      	movs	r3, #2
 8007974:	e115      	b.n	8007ba2 <HAL_SPI_Receive+0x286>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	225c      	movs	r2, #92	; 0x5c
 800797a:	2101      	movs	r1, #1
 800797c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800797e:	f7fd fbf3 	bl	8005168 <HAL_GetTick>
 8007982:	0003      	movs	r3, r0
 8007984:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	225d      	movs	r2, #93	; 0x5d
 800798a:	5c9b      	ldrb	r3, [r3, r2]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	d004      	beq.n	800799c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8007992:	2317      	movs	r3, #23
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2202      	movs	r2, #2
 8007998:	701a      	strb	r2, [r3, #0]
    goto error;
 800799a:	e0f7      	b.n	8007b8c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_SPI_Receive+0x8e>
 80079a2:	1dbb      	adds	r3, r7, #6
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80079aa:	2317      	movs	r3, #23
 80079ac:	18fb      	adds	r3, r7, r3
 80079ae:	2201      	movs	r2, #1
 80079b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80079b2:	e0eb      	b.n	8007b8c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	225d      	movs	r2, #93	; 0x5d
 80079b8:	2104      	movs	r1, #4
 80079ba:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	1dba      	adds	r2, r7, #6
 80079cc:	2144      	movs	r1, #68	; 0x44
 80079ce:	8812      	ldrh	r2, [r2, #0]
 80079d0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1dba      	adds	r2, r7, #6
 80079d6:	2146      	movs	r1, #70	; 0x46
 80079d8:	8812      	ldrh	r2, [r2, #0]
 80079da:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	23e0      	movs	r3, #224	; 0xe0
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d908      	bls.n	8007a18 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4966      	ldr	r1, [pc, #408]	; (8007bac <HAL_SPI_Receive+0x290>)
 8007a12:	400a      	ands	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
 8007a16:	e008      	b.n	8007a2a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	0149      	lsls	r1, r1, #5
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	2380      	movs	r3, #128	; 0x80
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d10f      	bne.n	8007a56 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2140      	movs	r1, #64	; 0x40
 8007a42:	438a      	bics	r2, r1
 8007a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4957      	ldr	r1, [pc, #348]	; (8007bb0 <HAL_SPI_Receive+0x294>)
 8007a52:	400a      	ands	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2240      	movs	r2, #64	; 0x40
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d007      	beq.n	8007a74 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2140      	movs	r1, #64	; 0x40
 8007a70:	430a      	orrs	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	23e0      	movs	r3, #224	; 0xe0
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d900      	bls.n	8007a82 <HAL_SPI_Receive+0x166>
 8007a80:	e069      	b.n	8007b56 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a82:	e031      	b.n	8007ae8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d117      	bne.n	8007ac2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	330c      	adds	r3, #12
 8007a98:	001a      	movs	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2246      	movs	r2, #70	; 0x46
 8007ab2:	5a9b      	ldrh	r3, [r3, r2]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b299      	uxth	r1, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2246      	movs	r2, #70	; 0x46
 8007abe:	5299      	strh	r1, [r3, r2]
 8007ac0:	e012      	b.n	8007ae8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ac2:	f7fd fb51 	bl	8005168 <HAL_GetTick>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d802      	bhi.n	8007ad8 <HAL_SPI_Receive+0x1bc>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_Receive+0x1c2>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8007ade:	2317      	movs	r3, #23
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	701a      	strb	r2, [r3, #0]
          goto error;
 8007ae6:	e051      	b.n	8007b8c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2246      	movs	r2, #70	; 0x46
 8007aec:	5a9b      	ldrh	r3, [r3, r2]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1c7      	bne.n	8007a84 <HAL_SPI_Receive+0x168>
 8007af4:	e035      	b.n	8007b62 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2201      	movs	r2, #1
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d115      	bne.n	8007b30 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	b292      	uxth	r2, r2
 8007b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2246      	movs	r2, #70	; 0x46
 8007b20:	5a9b      	ldrh	r3, [r3, r2]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b299      	uxth	r1, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2246      	movs	r2, #70	; 0x46
 8007b2c:	5299      	strh	r1, [r3, r2]
 8007b2e:	e012      	b.n	8007b56 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b30:	f7fd fb1a 	bl	8005168 <HAL_GetTick>
 8007b34:	0002      	movs	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d802      	bhi.n	8007b46 <HAL_SPI_Receive+0x22a>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	d102      	bne.n	8007b4c <HAL_SPI_Receive+0x230>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007b4c:	2317      	movs	r3, #23
 8007b4e:	18fb      	adds	r3, r7, r3
 8007b50:	2203      	movs	r2, #3
 8007b52:	701a      	strb	r2, [r3, #0]
          goto error;
 8007b54:	e01a      	b.n	8007b8c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2246      	movs	r2, #70	; 0x46
 8007b5a:	5a9b      	ldrh	r3, [r3, r2]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1c9      	bne.n	8007af6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	0018      	movs	r0, r3
 8007b6a:	f000 fb31 	bl	80081d0 <SPI_EndRxTransaction>
 8007b6e:	1e03      	subs	r3, r0, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8007b80:	2317      	movs	r3, #23
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	e000      	b.n	8007b8c <HAL_SPI_Receive+0x270>
  }

error :
 8007b8a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	225d      	movs	r2, #93	; 0x5d
 8007b90:	2101      	movs	r1, #1
 8007b92:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	225c      	movs	r2, #92	; 0x5c
 8007b98:	2100      	movs	r1, #0
 8007b9a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007b9c:	2317      	movs	r3, #23
 8007b9e:	18fb      	adds	r3, r7, r3
 8007ba0:	781b      	ldrb	r3, [r3, #0]
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	b007      	add	sp, #28
 8007ba8:	bd90      	pop	{r4, r7, pc}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	ffffefff 	.word	0xffffefff
 8007bb0:	ffffbfff 	.word	0xffffbfff

08007bb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	; 0x28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	001a      	movs	r2, r3
 8007bc2:	1cbb      	adds	r3, r7, #2
 8007bc4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007bca:	2323      	movs	r3, #35	; 0x23
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	225c      	movs	r2, #92	; 0x5c
 8007bd6:	5c9b      	ldrb	r3, [r3, r2]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_SPI_TransmitReceive+0x2c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e1b5      	b.n	8007f4c <HAL_SPI_TransmitReceive+0x398>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	225c      	movs	r2, #92	; 0x5c
 8007be4:	2101      	movs	r1, #1
 8007be6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007be8:	f7fd fabe 	bl	8005168 <HAL_GetTick>
 8007bec:	0003      	movs	r3, r0
 8007bee:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bf0:	201b      	movs	r0, #27
 8007bf2:	183b      	adds	r3, r7, r0
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	215d      	movs	r1, #93	; 0x5d
 8007bf8:	5c52      	ldrb	r2, [r2, r1]
 8007bfa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c02:	2312      	movs	r3, #18
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	1cba      	adds	r2, r7, #2
 8007c08:	8812      	ldrh	r2, [r2, #0]
 8007c0a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c0c:	183b      	adds	r3, r7, r0
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d011      	beq.n	8007c38 <HAL_SPI_TransmitReceive+0x84>
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	2382      	movs	r3, #130	; 0x82
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d107      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d103      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x7a>
 8007c26:	183b      	adds	r3, r7, r0
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d004      	beq.n	8007c38 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8007c2e:	2323      	movs	r3, #35	; 0x23
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	2202      	movs	r2, #2
 8007c34:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c36:	e17e      	b.n	8007f36 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d006      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x98>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x98>
 8007c44:	1cbb      	adds	r3, r7, #2
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007c4c:	2323      	movs	r3, #35	; 0x23
 8007c4e:	18fb      	adds	r3, r7, r3
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
    goto error;
 8007c54:	e16f      	b.n	8007f36 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	225d      	movs	r2, #93	; 0x5d
 8007c5a:	5c9b      	ldrb	r3, [r3, r2]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d003      	beq.n	8007c6a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	225d      	movs	r2, #93	; 0x5d
 8007c66:	2105      	movs	r1, #5
 8007c68:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	1cba      	adds	r2, r7, #2
 8007c7a:	2146      	movs	r1, #70	; 0x46
 8007c7c:	8812      	ldrh	r2, [r2, #0]
 8007c7e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1cba      	adds	r2, r7, #2
 8007c84:	2144      	movs	r1, #68	; 0x44
 8007c86:	8812      	ldrh	r2, [r2, #0]
 8007c88:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1cba      	adds	r2, r7, #2
 8007c94:	8812      	ldrh	r2, [r2, #0]
 8007c96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	1cba      	adds	r2, r7, #2
 8007c9c:	8812      	ldrh	r2, [r2, #0]
 8007c9e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	23e0      	movs	r3, #224	; 0xe0
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d908      	bls.n	8007cca <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	49a4      	ldr	r1, [pc, #656]	; (8007f54 <HAL_SPI_TransmitReceive+0x3a0>)
 8007cc4:	400a      	ands	r2, r1
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	e008      	b.n	8007cdc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	0149      	lsls	r1, r1, #5
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2240      	movs	r2, #64	; 0x40
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d007      	beq.n	8007cfa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2140      	movs	r1, #64	; 0x40
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	23e0      	movs	r3, #224	; 0xe0
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d800      	bhi.n	8007d08 <HAL_SPI_TransmitReceive+0x154>
 8007d06:	e07f      	b.n	8007e08 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <HAL_SPI_TransmitReceive+0x168>
 8007d10:	2312      	movs	r3, #18
 8007d12:	18fb      	adds	r3, r7, r3
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d000      	beq.n	8007d1c <HAL_SPI_TransmitReceive+0x168>
 8007d1a:	e069      	b.n	8007df0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d20:	881a      	ldrh	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	1c9a      	adds	r2, r3, #2
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d40:	e056      	b.n	8007df0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d11b      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x1d4>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d016      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x1d4>
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d113      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d84:	2300      	movs	r3, #0
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d11c      	bne.n	8007dd0 <HAL_SPI_TransmitReceive+0x21c>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2246      	movs	r2, #70	; 0x46
 8007d9a:	5a9b      	ldrh	r3, [r3, r2]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d016      	beq.n	8007dd0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	b292      	uxth	r2, r2
 8007dae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2246      	movs	r2, #70	; 0x46
 8007dbe:	5a9b      	ldrh	r3, [r3, r2]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b299      	uxth	r1, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2246      	movs	r2, #70	; 0x46
 8007dca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dd0:	f7fd f9ca 	bl	8005168 <HAL_GetTick>
 8007dd4:	0002      	movs	r2, r0
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d807      	bhi.n	8007df0 <HAL_SPI_TransmitReceive+0x23c>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	3301      	adds	r3, #1
 8007de4:	d004      	beq.n	8007df0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8007de6:	2323      	movs	r3, #35	; 0x23
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	2203      	movs	r2, #3
 8007dec:	701a      	strb	r2, [r3, #0]
        goto error;
 8007dee:	e0a2      	b.n	8007f36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1a3      	bne.n	8007d42 <HAL_SPI_TransmitReceive+0x18e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2246      	movs	r2, #70	; 0x46
 8007dfe:	5a9b      	ldrh	r3, [r3, r2]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d19d      	bne.n	8007d42 <HAL_SPI_TransmitReceive+0x18e>
 8007e06:	e085      	b.n	8007f14 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_SPI_TransmitReceive+0x268>
 8007e10:	2312      	movs	r3, #18
 8007e12:	18fb      	adds	r3, r7, r3
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d000      	beq.n	8007e1c <HAL_SPI_TransmitReceive+0x268>
 8007e1a:	e070      	b.n	8007efe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	330c      	adds	r3, #12
 8007e26:	7812      	ldrb	r2, [r2, #0]
 8007e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e42:	e05c      	b.n	8007efe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d11c      	bne.n	8007e8c <HAL_SPI_TransmitReceive+0x2d8>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d017      	beq.n	8007e8c <HAL_SPI_TransmitReceive+0x2d8>
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d114      	bne.n	8007e8c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2201      	movs	r2, #1
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d11e      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x324>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2246      	movs	r2, #70	; 0x46
 8007e9e:	5a9b      	ldrh	r3, [r3, r2]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d018      	beq.n	8007ed8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	001a      	movs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2246      	movs	r2, #70	; 0x46
 8007ec6:	5a9b      	ldrh	r3, [r3, r2]
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b299      	uxth	r1, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2246      	movs	r2, #70	; 0x46
 8007ed2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ed8:	f7fd f946 	bl	8005168 <HAL_GetTick>
 8007edc:	0002      	movs	r2, r0
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d802      	bhi.n	8007eee <HAL_SPI_TransmitReceive+0x33a>
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	3301      	adds	r3, #1
 8007eec:	d102      	bne.n	8007ef4 <HAL_SPI_TransmitReceive+0x340>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d104      	bne.n	8007efe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007ef4:	2323      	movs	r3, #35	; 0x23
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	2203      	movs	r2, #3
 8007efa:	701a      	strb	r2, [r3, #0]
        goto error;
 8007efc:	e01b      	b.n	8007f36 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d19d      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x290>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2246      	movs	r2, #70	; 0x46
 8007f0c:	5a9b      	ldrh	r3, [r3, r2]
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d197      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f000 f9b6 	bl	800828c <SPI_EndRxTxTransaction>
 8007f20:	1e03      	subs	r3, r0, #0
 8007f22:	d007      	beq.n	8007f34 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007f24:	2323      	movs	r3, #35	; 0x23
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	2201      	movs	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	661a      	str	r2, [r3, #96]	; 0x60
 8007f32:	e000      	b.n	8007f36 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007f34:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	225d      	movs	r2, #93	; 0x5d
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	225c      	movs	r2, #92	; 0x5c
 8007f42:	2100      	movs	r1, #0
 8007f44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007f46:	2323      	movs	r3, #35	; 0x23
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	781b      	ldrb	r3, [r3, #0]
}
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b00a      	add	sp, #40	; 0x28
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	ffffefff 	.word	0xffffefff

08007f58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	225d      	movs	r2, #93	; 0x5d
 8007f64:	5c9b      	ldrb	r3, [r3, r2]
 8007f66:	b2db      	uxtb	r3, r3
}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	1dfb      	adds	r3, r7, #7
 8007f7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f80:	f7fd f8f2 	bl	8005168 <HAL_GetTick>
 8007f84:	0002      	movs	r2, r0
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	1a9b      	subs	r3, r3, r2
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	18d3      	adds	r3, r2, r3
 8007f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f90:	f7fd f8ea 	bl	8005168 <HAL_GetTick>
 8007f94:	0003      	movs	r3, r0
 8007f96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f98:	4b3a      	ldr	r3, [pc, #232]	; (8008084 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	015b      	lsls	r3, r3, #5
 8007f9e:	0d1b      	lsrs	r3, r3, #20
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	4353      	muls	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fa6:	e058      	b.n	800805a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	d055      	beq.n	800805a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fae:	f7fd f8db 	bl	8005168 <HAL_GetTick>
 8007fb2:	0002      	movs	r2, r0
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	69fa      	ldr	r2, [r7, #28]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d902      	bls.n	8007fc4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d142      	bne.n	800804a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	21e0      	movs	r1, #224	; 0xe0
 8007fd0:	438a      	bics	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	2382      	movs	r3, #130	; 0x82
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d113      	bne.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	2380      	movs	r3, #128	; 0x80
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d005      	beq.n	8007ff8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689a      	ldr	r2, [r3, #8]
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d107      	bne.n	8008008 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2140      	movs	r1, #64	; 0x40
 8008004:	438a      	bics	r2, r1
 8008006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	019b      	lsls	r3, r3, #6
 8008010:	429a      	cmp	r2, r3
 8008012:	d110      	bne.n	8008036 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	491a      	ldr	r1, [pc, #104]	; (8008088 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008020:	400a      	ands	r2, r1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	0189      	lsls	r1, r1, #6
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	225d      	movs	r2, #93	; 0x5d
 800803a:	2101      	movs	r1, #1
 800803c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	225c      	movs	r2, #92	; 0x5c
 8008042:	2100      	movs	r1, #0
 8008044:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e017      	b.n	800807a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	3b01      	subs	r3, #1
 8008058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	4013      	ands	r3, r2
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	425a      	negs	r2, r3
 800806a:	4153      	adcs	r3, r2
 800806c:	b2db      	uxtb	r3, r3
 800806e:	001a      	movs	r2, r3
 8008070:	1dfb      	adds	r3, r7, #7
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d197      	bne.n	8007fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b008      	add	sp, #32
 8008080:	bd80      	pop	{r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	20000064 	.word	0x20000064
 8008088:	ffffdfff 	.word	0xffffdfff

0800808c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	; 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800809a:	2317      	movs	r3, #23
 800809c:	18fb      	adds	r3, r7, r3
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80080a2:	f7fd f861 	bl	8005168 <HAL_GetTick>
 80080a6:	0002      	movs	r2, r0
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	18d3      	adds	r3, r2, r3
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80080b2:	f7fd f859 	bl	8005168 <HAL_GetTick>
 80080b6:	0003      	movs	r3, r0
 80080b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80080c2:	4b41      	ldr	r3, [pc, #260]	; (80081c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	0013      	movs	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	189b      	adds	r3, r3, r2
 80080cc:	00da      	lsls	r2, r3, #3
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	0d1b      	lsrs	r3, r3, #20
 80080d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d4:	4353      	muls	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80080d8:	e068      	b.n	80081ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	23c0      	movs	r3, #192	; 0xc0
 80080de:	00db      	lsls	r3, r3, #3
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d10a      	bne.n	80080fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	2117      	movs	r1, #23
 80080f2:	187b      	adds	r3, r7, r1
 80080f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80080f6:	187b      	adds	r3, r7, r1
 80080f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3301      	adds	r3, #1
 80080fe:	d055      	beq.n	80081ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008100:	f7fd f832 	bl	8005168 <HAL_GetTick>
 8008104:	0002      	movs	r2, r0
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800810c:	429a      	cmp	r2, r3
 800810e:	d902      	bls.n	8008116 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	d142      	bne.n	800819c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	21e0      	movs	r1, #224	; 0xe0
 8008122:	438a      	bics	r2, r1
 8008124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	2382      	movs	r3, #130	; 0x82
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	429a      	cmp	r2, r3
 8008130:	d113      	bne.n	800815a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	2380      	movs	r3, #128	; 0x80
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	429a      	cmp	r2, r3
 800813c:	d005      	beq.n	800814a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	2380      	movs	r3, #128	; 0x80
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	429a      	cmp	r2, r3
 8008148:	d107      	bne.n	800815a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2140      	movs	r1, #64	; 0x40
 8008156:	438a      	bics	r2, r1
 8008158:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800815e:	2380      	movs	r3, #128	; 0x80
 8008160:	019b      	lsls	r3, r3, #6
 8008162:	429a      	cmp	r2, r3
 8008164:	d110      	bne.n	8008188 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4916      	ldr	r1, [pc, #88]	; (80081cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008172:	400a      	ands	r2, r1
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2180      	movs	r1, #128	; 0x80
 8008182:	0189      	lsls	r1, r1, #6
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	225d      	movs	r2, #93	; 0x5d
 800818c:	2101      	movs	r1, #1
 800818e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	225c      	movs	r2, #92	; 0x5c
 8008194:	2100      	movs	r1, #0
 8008196:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e010      	b.n	80081be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	4013      	ands	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d18e      	bne.n	80080da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b00a      	add	sp, #40	; 0x28
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	20000064 	.word	0x20000064
 80081cc:	ffffdfff 	.word	0xffffdfff

080081d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	2382      	movs	r3, #130	; 0x82
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d113      	bne.n	8008210 <SPI_EndRxTransaction+0x40>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d005      	beq.n	8008200 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	2380      	movs	r3, #128	; 0x80
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d107      	bne.n	8008210 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2140      	movs	r1, #64	; 0x40
 800820c:	438a      	bics	r2, r1
 800820e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	0013      	movs	r3, r2
 800821a:	2200      	movs	r2, #0
 800821c:	2180      	movs	r1, #128	; 0x80
 800821e:	f7ff fea7 	bl	8007f70 <SPI_WaitFlagStateUntilTimeout>
 8008222:	1e03      	subs	r3, r0, #0
 8008224:	d007      	beq.n	8008236 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822a:	2220      	movs	r2, #32
 800822c:	431a      	orrs	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e026      	b.n	8008284 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	2382      	movs	r3, #130	; 0x82
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	429a      	cmp	r2, r3
 8008240:	d11f      	bne.n	8008282 <SPI_EndRxTransaction+0xb2>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	2380      	movs	r3, #128	; 0x80
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	429a      	cmp	r2, r3
 800824c:	d005      	beq.n	800825a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	2380      	movs	r3, #128	; 0x80
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	429a      	cmp	r2, r3
 8008258:	d113      	bne.n	8008282 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	23c0      	movs	r3, #192	; 0xc0
 800825e:	00d9      	lsls	r1, r3, #3
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	0013      	movs	r3, r2
 8008268:	2200      	movs	r2, #0
 800826a:	f7ff ff0f 	bl	800808c <SPI_WaitFifoStateUntilTimeout>
 800826e:	1e03      	subs	r3, r0, #0
 8008270:	d007      	beq.n	8008282 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008276:	2220      	movs	r2, #32
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e000      	b.n	8008284 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	0018      	movs	r0, r3
 8008286:	46bd      	mov	sp, r7
 8008288:	b004      	add	sp, #16
 800828a:	bd80      	pop	{r7, pc}

0800828c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	23c0      	movs	r3, #192	; 0xc0
 800829c:	0159      	lsls	r1, r3, #5
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	0013      	movs	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	f7ff fef0 	bl	800808c <SPI_WaitFifoStateUntilTimeout>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d007      	beq.n	80082c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b4:	2220      	movs	r2, #32
 80082b6:	431a      	orrs	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e027      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	0013      	movs	r3, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	2180      	movs	r1, #128	; 0x80
 80082ce:	f7ff fe4f 	bl	8007f70 <SPI_WaitFlagStateUntilTimeout>
 80082d2:	1e03      	subs	r3, r0, #0
 80082d4:	d007      	beq.n	80082e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082da:	2220      	movs	r2, #32
 80082dc:	431a      	orrs	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e014      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	23c0      	movs	r3, #192	; 0xc0
 80082ea:	00d9      	lsls	r1, r3, #3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	0013      	movs	r3, r2
 80082f4:	2200      	movs	r2, #0
 80082f6:	f7ff fec9 	bl	800808c <SPI_WaitFifoStateUntilTimeout>
 80082fa:	1e03      	subs	r3, r0, #0
 80082fc:	d007      	beq.n	800830e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008302:	2220      	movs	r2, #32
 8008304:	431a      	orrs	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e000      	b.n	8008310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b004      	add	sp, #16
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e042      	b.n	80083b0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	223d      	movs	r2, #61	; 0x3d
 800832e:	5c9b      	ldrb	r3, [r3, r2]
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	223c      	movs	r2, #60	; 0x3c
 800833a:	2100      	movs	r1, #0
 800833c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0018      	movs	r0, r3
 8008342:	f7fc fc89 	bl	8004c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	223d      	movs	r2, #61	; 0x3d
 800834a:	2102      	movs	r1, #2
 800834c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3304      	adds	r3, #4
 8008356:	0019      	movs	r1, r3
 8008358:	0010      	movs	r0, r2
 800835a:	f000 fc53 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2246      	movs	r2, #70	; 0x46
 8008362:	2101      	movs	r1, #1
 8008364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	223e      	movs	r2, #62	; 0x3e
 800836a:	2101      	movs	r1, #1
 800836c:	5499      	strb	r1, [r3, r2]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	223f      	movs	r2, #63	; 0x3f
 8008372:	2101      	movs	r1, #1
 8008374:	5499      	strb	r1, [r3, r2]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2240      	movs	r2, #64	; 0x40
 800837a:	2101      	movs	r1, #1
 800837c:	5499      	strb	r1, [r3, r2]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2241      	movs	r2, #65	; 0x41
 8008382:	2101      	movs	r1, #1
 8008384:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2242      	movs	r2, #66	; 0x42
 800838a:	2101      	movs	r1, #1
 800838c:	5499      	strb	r1, [r3, r2]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2243      	movs	r2, #67	; 0x43
 8008392:	2101      	movs	r1, #1
 8008394:	5499      	strb	r1, [r3, r2]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2244      	movs	r2, #68	; 0x44
 800839a:	2101      	movs	r1, #1
 800839c:	5499      	strb	r1, [r3, r2]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2245      	movs	r2, #69	; 0x45
 80083a2:	2101      	movs	r1, #1
 80083a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	223d      	movs	r2, #61	; 0x3d
 80083aa:	2101      	movs	r1, #1
 80083ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	0018      	movs	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	b002      	add	sp, #8
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	223d      	movs	r2, #61	; 0x3d
 80083c4:	5c9b      	ldrb	r3, [r3, r2]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d001      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e035      	b.n	800843c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	223d      	movs	r2, #61	; 0x3d
 80083d4:	2102      	movs	r1, #2
 80083d6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2101      	movs	r1, #1
 80083e4:	430a      	orrs	r2, r1
 80083e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a15      	ldr	r2, [pc, #84]	; (8008444 <HAL_TIM_Base_Start_IT+0x8c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d009      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x4e>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a14      	ldr	r2, [pc, #80]	; (8008448 <HAL_TIM_Base_Start_IT+0x90>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d004      	beq.n	8008406 <HAL_TIM_Base_Start_IT+0x4e>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a12      	ldr	r2, [pc, #72]	; (800844c <HAL_TIM_Base_Start_IT+0x94>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d111      	bne.n	800842a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2207      	movs	r2, #7
 800840e:	4013      	ands	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b06      	cmp	r3, #6
 8008416:	d010      	beq.n	800843a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2101      	movs	r1, #1
 8008424:	430a      	orrs	r2, r1
 8008426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008428:	e007      	b.n	800843a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2101      	movs	r1, #1
 8008436:	430a      	orrs	r2, r1
 8008438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b004      	add	sp, #16
 8008442:	bd80      	pop	{r7, pc}
 8008444:	40012c00 	.word	0x40012c00
 8008448:	40000400 	.word	0x40000400
 800844c:	40014000 	.word	0x40014000

08008450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e042      	b.n	80084e8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	223d      	movs	r2, #61	; 0x3d
 8008466:	5c9b      	ldrb	r3, [r3, r2]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d107      	bne.n	800847e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	223c      	movs	r2, #60	; 0x3c
 8008472:	2100      	movs	r1, #0
 8008474:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0018      	movs	r0, r3
 800847a:	f000 f839 	bl	80084f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	223d      	movs	r2, #61	; 0x3d
 8008482:	2102      	movs	r1, #2
 8008484:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	3304      	adds	r3, #4
 800848e:	0019      	movs	r1, r3
 8008490:	0010      	movs	r0, r2
 8008492:	f000 fbb7 	bl	8008c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2246      	movs	r2, #70	; 0x46
 800849a:	2101      	movs	r1, #1
 800849c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	223e      	movs	r2, #62	; 0x3e
 80084a2:	2101      	movs	r1, #1
 80084a4:	5499      	strb	r1, [r3, r2]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	223f      	movs	r2, #63	; 0x3f
 80084aa:	2101      	movs	r1, #1
 80084ac:	5499      	strb	r1, [r3, r2]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2240      	movs	r2, #64	; 0x40
 80084b2:	2101      	movs	r1, #1
 80084b4:	5499      	strb	r1, [r3, r2]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2241      	movs	r2, #65	; 0x41
 80084ba:	2101      	movs	r1, #1
 80084bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2242      	movs	r2, #66	; 0x42
 80084c2:	2101      	movs	r1, #1
 80084c4:	5499      	strb	r1, [r3, r2]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2243      	movs	r2, #67	; 0x43
 80084ca:	2101      	movs	r1, #1
 80084cc:	5499      	strb	r1, [r3, r2]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2244      	movs	r2, #68	; 0x44
 80084d2:	2101      	movs	r1, #1
 80084d4:	5499      	strb	r1, [r3, r2]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2245      	movs	r2, #69	; 0x45
 80084da:	2101      	movs	r1, #1
 80084dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	223d      	movs	r2, #61	; 0x3d
 80084e2:	2101      	movs	r1, #1
 80084e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	0018      	movs	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b002      	add	sp, #8
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084f8:	46c0      	nop			; (mov r8, r8)
 80084fa:	46bd      	mov	sp, r7
 80084fc:	b002      	add	sp, #8
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d108      	bne.n	8008522 <HAL_TIM_PWM_Start+0x22>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	223e      	movs	r2, #62	; 0x3e
 8008514:	5c9b      	ldrb	r3, [r3, r2]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	3b01      	subs	r3, #1
 800851a:	1e5a      	subs	r2, r3, #1
 800851c:	4193      	sbcs	r3, r2
 800851e:	b2db      	uxtb	r3, r3
 8008520:	e01f      	b.n	8008562 <HAL_TIM_PWM_Start+0x62>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d108      	bne.n	800853a <HAL_TIM_PWM_Start+0x3a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	223f      	movs	r2, #63	; 0x3f
 800852c:	5c9b      	ldrb	r3, [r3, r2]
 800852e:	b2db      	uxtb	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	1e5a      	subs	r2, r3, #1
 8008534:	4193      	sbcs	r3, r2
 8008536:	b2db      	uxtb	r3, r3
 8008538:	e013      	b.n	8008562 <HAL_TIM_PWM_Start+0x62>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b08      	cmp	r3, #8
 800853e:	d108      	bne.n	8008552 <HAL_TIM_PWM_Start+0x52>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2240      	movs	r2, #64	; 0x40
 8008544:	5c9b      	ldrb	r3, [r3, r2]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	1e5a      	subs	r2, r3, #1
 800854c:	4193      	sbcs	r3, r2
 800854e:	b2db      	uxtb	r3, r3
 8008550:	e007      	b.n	8008562 <HAL_TIM_PWM_Start+0x62>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2241      	movs	r2, #65	; 0x41
 8008556:	5c9b      	ldrb	r3, [r3, r2]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	3b01      	subs	r3, #1
 800855c:	1e5a      	subs	r2, r3, #1
 800855e:	4193      	sbcs	r3, r2
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e06e      	b.n	8008648 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <HAL_TIM_PWM_Start+0x7a>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	223e      	movs	r2, #62	; 0x3e
 8008574:	2102      	movs	r1, #2
 8008576:	5499      	strb	r1, [r3, r2]
 8008578:	e013      	b.n	80085a2 <HAL_TIM_PWM_Start+0xa2>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b04      	cmp	r3, #4
 800857e:	d104      	bne.n	800858a <HAL_TIM_PWM_Start+0x8a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	223f      	movs	r2, #63	; 0x3f
 8008584:	2102      	movs	r1, #2
 8008586:	5499      	strb	r1, [r3, r2]
 8008588:	e00b      	b.n	80085a2 <HAL_TIM_PWM_Start+0xa2>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b08      	cmp	r3, #8
 800858e:	d104      	bne.n	800859a <HAL_TIM_PWM_Start+0x9a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2240      	movs	r2, #64	; 0x40
 8008594:	2102      	movs	r1, #2
 8008596:	5499      	strb	r1, [r3, r2]
 8008598:	e003      	b.n	80085a2 <HAL_TIM_PWM_Start+0xa2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2241      	movs	r2, #65	; 0x41
 800859e:	2102      	movs	r1, #2
 80085a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	2201      	movs	r2, #1
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 fe36 	bl	800921c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a26      	ldr	r2, [pc, #152]	; (8008650 <HAL_TIM_PWM_Start+0x150>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_TIM_PWM_Start+0xd8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a25      	ldr	r2, [pc, #148]	; (8008654 <HAL_TIM_PWM_Start+0x154>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_TIM_PWM_Start+0xd8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a23      	ldr	r2, [pc, #140]	; (8008658 <HAL_TIM_PWM_Start+0x158>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIM_PWM_Start+0xd8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a22      	ldr	r2, [pc, #136]	; (800865c <HAL_TIM_PWM_Start+0x15c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d101      	bne.n	80085dc <HAL_TIM_PWM_Start+0xdc>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <HAL_TIM_PWM_Start+0xde>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d008      	beq.n	80085f4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2180      	movs	r1, #128	; 0x80
 80085ee:	0209      	lsls	r1, r1, #8
 80085f0:	430a      	orrs	r2, r1
 80085f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a15      	ldr	r2, [pc, #84]	; (8008650 <HAL_TIM_PWM_Start+0x150>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d009      	beq.n	8008612 <HAL_TIM_PWM_Start+0x112>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a17      	ldr	r2, [pc, #92]	; (8008660 <HAL_TIM_PWM_Start+0x160>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d004      	beq.n	8008612 <HAL_TIM_PWM_Start+0x112>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a11      	ldr	r2, [pc, #68]	; (8008654 <HAL_TIM_PWM_Start+0x154>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d111      	bne.n	8008636 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	2207      	movs	r2, #7
 800861a:	4013      	ands	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b06      	cmp	r3, #6
 8008622:	d010      	beq.n	8008646 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2101      	movs	r1, #1
 8008630:	430a      	orrs	r2, r1
 8008632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008634:	e007      	b.n	8008646 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2101      	movs	r1, #1
 8008642:	430a      	orrs	r2, r1
 8008644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	0018      	movs	r0, r3
 800864a:	46bd      	mov	sp, r7
 800864c:	b004      	add	sp, #16
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40012c00 	.word	0x40012c00
 8008654:	40014000 	.word	0x40014000
 8008658:	40014400 	.word	0x40014400
 800865c:	40014800 	.word	0x40014800
 8008660:	40000400 	.word	0x40000400

08008664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2202      	movs	r2, #2
 8008674:	4013      	ands	r3, r2
 8008676:	2b02      	cmp	r3, #2
 8008678:	d124      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	2202      	movs	r2, #2
 8008682:	4013      	ands	r3, r2
 8008684:	2b02      	cmp	r3, #2
 8008686:	d11d      	bne.n	80086c4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2203      	movs	r2, #3
 800868e:	4252      	negs	r2, r2
 8008690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2203      	movs	r2, #3
 80086a0:	4013      	ands	r3, r2
 80086a2:	d004      	beq.n	80086ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	0018      	movs	r0, r3
 80086a8:	f000 fa94 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 80086ac:	e007      	b.n	80086be <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	0018      	movs	r0, r3
 80086b2:	f000 fa87 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 fa93 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	2204      	movs	r2, #4
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d125      	bne.n	800871e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2204      	movs	r2, #4
 80086da:	4013      	ands	r3, r2
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d11e      	bne.n	800871e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2205      	movs	r2, #5
 80086e6:	4252      	negs	r2, r2
 80086e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	23c0      	movs	r3, #192	; 0xc0
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4013      	ands	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	0018      	movs	r0, r3
 8008702:	f000 fa67 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 8008706:	e007      	b.n	8008718 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	0018      	movs	r0, r3
 800870c:	f000 fa5a 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	0018      	movs	r0, r3
 8008714:	f000 fa66 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	2208      	movs	r2, #8
 8008726:	4013      	ands	r3, r2
 8008728:	2b08      	cmp	r3, #8
 800872a:	d124      	bne.n	8008776 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2208      	movs	r2, #8
 8008734:	4013      	ands	r3, r2
 8008736:	2b08      	cmp	r3, #8
 8008738:	d11d      	bne.n	8008776 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2209      	movs	r2, #9
 8008740:	4252      	negs	r2, r2
 8008742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2204      	movs	r2, #4
 8008748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2203      	movs	r2, #3
 8008752:	4013      	ands	r3, r2
 8008754:	d004      	beq.n	8008760 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	0018      	movs	r0, r3
 800875a:	f000 fa3b 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 800875e:	e007      	b.n	8008770 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	0018      	movs	r0, r3
 8008764:	f000 fa2e 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	0018      	movs	r0, r3
 800876c:	f000 fa3a 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2210      	movs	r2, #16
 800877e:	4013      	ands	r3, r2
 8008780:	2b10      	cmp	r3, #16
 8008782:	d125      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	2210      	movs	r2, #16
 800878c:	4013      	ands	r3, r2
 800878e:	2b10      	cmp	r3, #16
 8008790:	d11e      	bne.n	80087d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2211      	movs	r2, #17
 8008798:	4252      	negs	r2, r2
 800879a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2208      	movs	r2, #8
 80087a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	69da      	ldr	r2, [r3, #28]
 80087a8:	23c0      	movs	r3, #192	; 0xc0
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4013      	ands	r3, r2
 80087ae:	d004      	beq.n	80087ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f000 fa0e 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 80087b8:	e007      	b.n	80087ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	0018      	movs	r0, r3
 80087be:	f000 fa01 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 fa0d 	bl	8008be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2201      	movs	r2, #1
 80087d8:	4013      	ands	r3, r2
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d10f      	bne.n	80087fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	4013      	ands	r3, r2
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d108      	bne.n	80087fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2202      	movs	r2, #2
 80087f2:	4252      	negs	r2, r2
 80087f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7fc f8c5 	bl	8004988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2280      	movs	r2, #128	; 0x80
 8008806:	4013      	ands	r3, r2
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d10f      	bne.n	800882c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	2280      	movs	r2, #128	; 0x80
 8008814:	4013      	ands	r3, r2
 8008816:	2b80      	cmp	r3, #128	; 0x80
 8008818:	d108      	bne.n	800882c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2281      	movs	r2, #129	; 0x81
 8008820:	4252      	negs	r2, r2
 8008822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	0018      	movs	r0, r3
 8008828:	f000 fd7c 	bl	8009324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2240      	movs	r2, #64	; 0x40
 8008834:	4013      	ands	r3, r2
 8008836:	2b40      	cmp	r3, #64	; 0x40
 8008838:	d10f      	bne.n	800885a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2240      	movs	r2, #64	; 0x40
 8008842:	4013      	ands	r3, r2
 8008844:	2b40      	cmp	r3, #64	; 0x40
 8008846:	d108      	bne.n	800885a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2241      	movs	r2, #65	; 0x41
 800884e:	4252      	negs	r2, r2
 8008850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	0018      	movs	r0, r3
 8008856:	f000 f9cd 	bl	8008bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2220      	movs	r2, #32
 8008862:	4013      	ands	r3, r2
 8008864:	2b20      	cmp	r3, #32
 8008866:	d10f      	bne.n	8008888 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	4013      	ands	r3, r2
 8008872:	2b20      	cmp	r3, #32
 8008874:	d108      	bne.n	8008888 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2221      	movs	r2, #33	; 0x21
 800887c:	4252      	negs	r2, r2
 800887e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	0018      	movs	r0, r3
 8008884:	f000 fd46 	bl	8009314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008888:	46c0      	nop			; (mov r8, r8)
 800888a:	46bd      	mov	sp, r7
 800888c:	b002      	add	sp, #8
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800889c:	2317      	movs	r3, #23
 800889e:	18fb      	adds	r3, r7, r3
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	223c      	movs	r2, #60	; 0x3c
 80088a8:	5c9b      	ldrb	r3, [r3, r2]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d101      	bne.n	80088b2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80088ae:	2302      	movs	r3, #2
 80088b0:	e0ad      	b.n	8008a0e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	223c      	movs	r2, #60	; 0x3c
 80088b6:	2101      	movs	r1, #1
 80088b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b0c      	cmp	r3, #12
 80088be:	d100      	bne.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80088c0:	e076      	b.n	80089b0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b0c      	cmp	r3, #12
 80088c6:	d900      	bls.n	80088ca <HAL_TIM_PWM_ConfigChannel+0x3a>
 80088c8:	e095      	b.n	80089f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b08      	cmp	r3, #8
 80088ce:	d04e      	beq.n	800896e <HAL_TIM_PWM_ConfigChannel+0xde>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b08      	cmp	r3, #8
 80088d4:	d900      	bls.n	80088d8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80088d6:	e08e      	b.n	80089f6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d021      	beq.n	8008928 <HAL_TIM_PWM_ConfigChannel+0x98>
 80088e4:	e087      	b.n	80089f6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	0011      	movs	r1, r2
 80088ee:	0018      	movs	r0, r3
 80088f0:	f000 f9fe 	bl	8008cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2108      	movs	r1, #8
 8008900:	430a      	orrs	r2, r1
 8008902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699a      	ldr	r2, [r3, #24]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2104      	movs	r1, #4
 8008910:	438a      	bics	r2, r1
 8008912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6999      	ldr	r1, [r3, #24]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	619a      	str	r2, [r3, #24]
      break;
 8008926:	e06b      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	0011      	movs	r1, r2
 8008930:	0018      	movs	r0, r3
 8008932:	f000 fa65 	bl	8008e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2180      	movs	r1, #128	; 0x80
 8008942:	0109      	lsls	r1, r1, #4
 8008944:	430a      	orrs	r2, r1
 8008946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4931      	ldr	r1, [pc, #196]	; (8008a18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008954:	400a      	ands	r2, r1
 8008956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6999      	ldr	r1, [r3, #24]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	021a      	lsls	r2, r3, #8
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	619a      	str	r2, [r3, #24]
      break;
 800896c:	e048      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	0011      	movs	r1, r2
 8008976:	0018      	movs	r0, r3
 8008978:	f000 fac6 	bl	8008f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69da      	ldr	r2, [r3, #28]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2108      	movs	r1, #8
 8008988:	430a      	orrs	r2, r1
 800898a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2104      	movs	r1, #4
 8008998:	438a      	bics	r2, r1
 800899a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69d9      	ldr	r1, [r3, #28]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	61da      	str	r2, [r3, #28]
      break;
 80089ae:	e027      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	0011      	movs	r1, r2
 80089b8:	0018      	movs	r0, r3
 80089ba:	f000 fb2b 	bl	8009014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	2180      	movs	r1, #128	; 0x80
 80089ca:	0109      	lsls	r1, r1, #4
 80089cc:	430a      	orrs	r2, r1
 80089ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	490f      	ldr	r1, [pc, #60]	; (8008a18 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80089dc:	400a      	ands	r2, r1
 80089de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	69d9      	ldr	r1, [r3, #28]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	021a      	lsls	r2, r3, #8
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	61da      	str	r2, [r3, #28]
      break;
 80089f4:	e004      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80089f6:	2317      	movs	r3, #23
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	2201      	movs	r2, #1
 80089fc:	701a      	strb	r2, [r3, #0]
      break;
 80089fe:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	223c      	movs	r2, #60	; 0x3c
 8008a04:	2100      	movs	r1, #0
 8008a06:	5499      	strb	r1, [r3, r2]

  return status;
 8008a08:	2317      	movs	r3, #23
 8008a0a:	18fb      	adds	r3, r7, r3
 8008a0c:	781b      	ldrb	r3, [r3, #0]
}
 8008a0e:	0018      	movs	r0, r3
 8008a10:	46bd      	mov	sp, r7
 8008a12:	b006      	add	sp, #24
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	fffffbff 	.word	0xfffffbff

08008a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a26:	230f      	movs	r3, #15
 8008a28:	18fb      	adds	r3, r7, r3
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	223c      	movs	r2, #60	; 0x3c
 8008a32:	5c9b      	ldrb	r3, [r3, r2]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_TIM_ConfigClockSource+0x20>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e0bc      	b.n	8008bb6 <HAL_TIM_ConfigClockSource+0x19a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	223c      	movs	r2, #60	; 0x3c
 8008a40:	2101      	movs	r1, #1
 8008a42:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	223d      	movs	r2, #61	; 0x3d
 8008a48:	2102      	movs	r1, #2
 8008a4a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2277      	movs	r2, #119	; 0x77
 8008a58:	4393      	bics	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	4a58      	ldr	r2, [pc, #352]	; (8008bc0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8008a60:	4013      	ands	r3, r2
 8008a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2280      	movs	r2, #128	; 0x80
 8008a72:	0192      	lsls	r2, r2, #6
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d040      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0xde>
 8008a78:	2280      	movs	r2, #128	; 0x80
 8008a7a:	0192      	lsls	r2, r2, #6
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d900      	bls.n	8008a82 <HAL_TIM_ConfigClockSource+0x66>
 8008a80:	e088      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	0152      	lsls	r2, r2, #5
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d100      	bne.n	8008a8c <HAL_TIM_ConfigClockSource+0x70>
 8008a8a:	e088      	b.n	8008b9e <HAL_TIM_ConfigClockSource+0x182>
 8008a8c:	2280      	movs	r2, #128	; 0x80
 8008a8e:	0152      	lsls	r2, r2, #5
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d900      	bls.n	8008a96 <HAL_TIM_ConfigClockSource+0x7a>
 8008a94:	e07e      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008a96:	2b70      	cmp	r3, #112	; 0x70
 8008a98:	d018      	beq.n	8008acc <HAL_TIM_ConfigClockSource+0xb0>
 8008a9a:	d900      	bls.n	8008a9e <HAL_TIM_ConfigClockSource+0x82>
 8008a9c:	e07a      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008a9e:	2b60      	cmp	r3, #96	; 0x60
 8008aa0:	d04f      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x126>
 8008aa2:	d900      	bls.n	8008aa6 <HAL_TIM_ConfigClockSource+0x8a>
 8008aa4:	e076      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008aa6:	2b50      	cmp	r3, #80	; 0x50
 8008aa8:	d03b      	beq.n	8008b22 <HAL_TIM_ConfigClockSource+0x106>
 8008aaa:	d900      	bls.n	8008aae <HAL_TIM_ConfigClockSource+0x92>
 8008aac:	e072      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d057      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x146>
 8008ab2:	d900      	bls.n	8008ab6 <HAL_TIM_ConfigClockSource+0x9a>
 8008ab4:	e06e      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008ab6:	2b30      	cmp	r3, #48	; 0x30
 8008ab8:	d063      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x166>
 8008aba:	d86b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d060      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x166>
 8008ac0:	d868      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d05d      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x166>
 8008ac6:	2b10      	cmp	r3, #16
 8008ac8:	d05b      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x166>
 8008aca:	e063      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6899      	ldr	r1, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f000 fb7e 	bl	80091dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2277      	movs	r2, #119	; 0x77
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	609a      	str	r2, [r3, #8]
      break;
 8008af8:	e052      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6899      	ldr	r1, [r3, #8]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f000 fb67 	bl	80091dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	01c9      	lsls	r1, r1, #7
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	609a      	str	r2, [r3, #8]
      break;
 8008b20:	e03e      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6859      	ldr	r1, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	001a      	movs	r2, r3
 8008b30:	f000 fada 	bl	80090e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2150      	movs	r1, #80	; 0x50
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f000 fb34 	bl	80091a8 <TIM_ITRx_SetConfig>
      break;
 8008b40:	e02e      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	001a      	movs	r2, r3
 8008b50:	f000 faf8 	bl	8009144 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2160      	movs	r1, #96	; 0x60
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f000 fb24 	bl	80091a8 <TIM_ITRx_SetConfig>
      break;
 8008b60:	e01e      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	001a      	movs	r2, r3
 8008b70:	f000 faba 	bl	80090e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2140      	movs	r1, #64	; 0x40
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f000 fb14 	bl	80091a8 <TIM_ITRx_SetConfig>
      break;
 8008b80:	e00e      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	0019      	movs	r1, r3
 8008b8c:	0010      	movs	r0, r2
 8008b8e:	f000 fb0b 	bl	80091a8 <TIM_ITRx_SetConfig>
      break;
 8008b92:	e005      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008b94:	230f      	movs	r3, #15
 8008b96:	18fb      	adds	r3, r7, r3
 8008b98:	2201      	movs	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
      break;
 8008b9c:	e000      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008b9e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	223d      	movs	r2, #61	; 0x3d
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	223c      	movs	r2, #60	; 0x3c
 8008bac:	2100      	movs	r1, #0
 8008bae:	5499      	strb	r1, [r3, r2]

  return status;
 8008bb0:	230f      	movs	r3, #15
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	781b      	ldrb	r3, [r3, #0]
}
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	b004      	add	sp, #16
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	ffff00ff 	.word	0xffff00ff

08008bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bcc:	46c0      	nop			; (mov r8, r8)
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	b002      	add	sp, #8
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b002      	add	sp, #8
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	b002      	add	sp, #8
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bfc:	46c0      	nop			; (mov r8, r8)
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b002      	add	sp, #8
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a2f      	ldr	r2, [pc, #188]	; (8008cd4 <TIM_Base_SetConfig+0xd0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_Base_SetConfig+0x20>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a2e      	ldr	r2, [pc, #184]	; (8008cd8 <TIM_Base_SetConfig+0xd4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d108      	bne.n	8008c36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2270      	movs	r2, #112	; 0x70
 8008c28:	4393      	bics	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a26      	ldr	r2, [pc, #152]	; (8008cd4 <TIM_Base_SetConfig+0xd0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d013      	beq.n	8008c66 <TIM_Base_SetConfig+0x62>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a25      	ldr	r2, [pc, #148]	; (8008cd8 <TIM_Base_SetConfig+0xd4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d00f      	beq.n	8008c66 <TIM_Base_SetConfig+0x62>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a24      	ldr	r2, [pc, #144]	; (8008cdc <TIM_Base_SetConfig+0xd8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00b      	beq.n	8008c66 <TIM_Base_SetConfig+0x62>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a23      	ldr	r2, [pc, #140]	; (8008ce0 <TIM_Base_SetConfig+0xdc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d007      	beq.n	8008c66 <TIM_Base_SetConfig+0x62>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <TIM_Base_SetConfig+0xe0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_Base_SetConfig+0x62>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a21      	ldr	r2, [pc, #132]	; (8008ce8 <TIM_Base_SetConfig+0xe4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d108      	bne.n	8008c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4a20      	ldr	r2, [pc, #128]	; (8008cec <TIM_Base_SetConfig+0xe8>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2280      	movs	r2, #128	; 0x80
 8008c7c:	4393      	bics	r3, r2
 8008c7e:	001a      	movs	r2, r3
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	695b      	ldr	r3, [r3, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a0c      	ldr	r2, [pc, #48]	; (8008cd4 <TIM_Base_SetConfig+0xd0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00b      	beq.n	8008cbe <TIM_Base_SetConfig+0xba>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a0d      	ldr	r2, [pc, #52]	; (8008ce0 <TIM_Base_SetConfig+0xdc>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d007      	beq.n	8008cbe <TIM_Base_SetConfig+0xba>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <TIM_Base_SetConfig+0xe0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d003      	beq.n	8008cbe <TIM_Base_SetConfig+0xba>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a0b      	ldr	r2, [pc, #44]	; (8008ce8 <TIM_Base_SetConfig+0xe4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d103      	bne.n	8008cc6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691a      	ldr	r2, [r3, #16]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	615a      	str	r2, [r3, #20]
}
 8008ccc:	46c0      	nop			; (mov r8, r8)
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	b004      	add	sp, #16
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40002000 	.word	0x40002000
 8008ce0:	40014000 	.word	0x40014000
 8008ce4:	40014400 	.word	0x40014400
 8008ce8:	40014800 	.word	0x40014800
 8008cec:	fffffcff 	.word	0xfffffcff

08008cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	4393      	bics	r3, r2
 8008d02:	001a      	movs	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2270      	movs	r2, #112	; 0x70
 8008d1e:	4393      	bics	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2203      	movs	r2, #3
 8008d26:	4393      	bics	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2202      	movs	r2, #2
 8008d38:	4393      	bics	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a27      	ldr	r2, [pc, #156]	; (8008de8 <TIM_OC1_SetConfig+0xf8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_OC1_SetConfig+0x76>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a26      	ldr	r2, [pc, #152]	; (8008dec <TIM_OC1_SetConfig+0xfc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_OC1_SetConfig+0x76>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <TIM_OC1_SetConfig+0x100>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_OC1_SetConfig+0x76>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a24      	ldr	r2, [pc, #144]	; (8008df4 <TIM_OC1_SetConfig+0x104>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d10c      	bne.n	8008d80 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2208      	movs	r2, #8
 8008d6a:	4393      	bics	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	4393      	bics	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a19      	ldr	r2, [pc, #100]	; (8008de8 <TIM_OC1_SetConfig+0xf8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00b      	beq.n	8008da0 <TIM_OC1_SetConfig+0xb0>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a18      	ldr	r2, [pc, #96]	; (8008dec <TIM_OC1_SetConfig+0xfc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d007      	beq.n	8008da0 <TIM_OC1_SetConfig+0xb0>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <TIM_OC1_SetConfig+0x100>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d003      	beq.n	8008da0 <TIM_OC1_SetConfig+0xb0>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <TIM_OC1_SetConfig+0x104>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d111      	bne.n	8008dc4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <TIM_OC1_SetConfig+0x108>)
 8008da4:	4013      	ands	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <TIM_OC1_SetConfig+0x10c>)
 8008dac:	4013      	ands	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	699b      	ldr	r3, [r3, #24]
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	621a      	str	r2, [r3, #32]
}
 8008dde:	46c0      	nop			; (mov r8, r8)
 8008de0:	46bd      	mov	sp, r7
 8008de2:	b006      	add	sp, #24
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	46c0      	nop			; (mov r8, r8)
 8008de8:	40012c00 	.word	0x40012c00
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800
 8008df8:	fffffeff 	.word	0xfffffeff
 8008dfc:	fffffdff 	.word	0xfffffdff

08008e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	2210      	movs	r2, #16
 8008e10:	4393      	bics	r3, r2
 8008e12:	001a      	movs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	4a2e      	ldr	r2, [pc, #184]	; (8008ee8 <TIM_OC2_SetConfig+0xe8>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4a2d      	ldr	r2, [pc, #180]	; (8008eec <TIM_OC2_SetConfig+0xec>)
 8008e36:	4013      	ands	r3, r2
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	4393      	bics	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a24      	ldr	r2, [pc, #144]	; (8008ef0 <TIM_OC2_SetConfig+0xf0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d10d      	bne.n	8008e7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	2280      	movs	r2, #128	; 0x80
 8008e66:	4393      	bics	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2240      	movs	r2, #64	; 0x40
 8008e7a:	4393      	bics	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <TIM_OC2_SetConfig+0xf0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d00b      	beq.n	8008e9e <TIM_OC2_SetConfig+0x9e>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <TIM_OC2_SetConfig+0xf4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d007      	beq.n	8008e9e <TIM_OC2_SetConfig+0x9e>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a19      	ldr	r2, [pc, #100]	; (8008ef8 <TIM_OC2_SetConfig+0xf8>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d003      	beq.n	8008e9e <TIM_OC2_SetConfig+0x9e>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a18      	ldr	r2, [pc, #96]	; (8008efc <TIM_OC2_SetConfig+0xfc>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d113      	bne.n	8008ec6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4a17      	ldr	r2, [pc, #92]	; (8008f00 <TIM_OC2_SetConfig+0x100>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <TIM_OC2_SetConfig+0x104>)
 8008eaa:	4013      	ands	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	621a      	str	r2, [r3, #32]
}
 8008ee0:	46c0      	nop			; (mov r8, r8)
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b006      	add	sp, #24
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	ffff8fff 	.word	0xffff8fff
 8008eec:	fffffcff 	.word	0xfffffcff
 8008ef0:	40012c00 	.word	0x40012c00
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800
 8008f00:	fffffbff 	.word	0xfffffbff
 8008f04:	fffff7ff 	.word	0xfffff7ff

08008f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	4a35      	ldr	r2, [pc, #212]	; (8008fec <TIM_OC3_SetConfig+0xe4>)
 8008f18:	401a      	ands	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2270      	movs	r2, #112	; 0x70
 8008f34:	4393      	bics	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	4393      	bics	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4a28      	ldr	r2, [pc, #160]	; (8008ff0 <TIM_OC3_SetConfig+0xe8>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a24      	ldr	r2, [pc, #144]	; (8008ff4 <TIM_OC3_SetConfig+0xec>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d10d      	bne.n	8008f82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	4a23      	ldr	r2, [pc, #140]	; (8008ff8 <TIM_OC3_SetConfig+0xf0>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4a1f      	ldr	r2, [pc, #124]	; (8008ffc <TIM_OC3_SetConfig+0xf4>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1b      	ldr	r2, [pc, #108]	; (8008ff4 <TIM_OC3_SetConfig+0xec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00b      	beq.n	8008fa2 <TIM_OC3_SetConfig+0x9a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1c      	ldr	r2, [pc, #112]	; (8009000 <TIM_OC3_SetConfig+0xf8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d007      	beq.n	8008fa2 <TIM_OC3_SetConfig+0x9a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1b      	ldr	r2, [pc, #108]	; (8009004 <TIM_OC3_SetConfig+0xfc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d003      	beq.n	8008fa2 <TIM_OC3_SetConfig+0x9a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1a      	ldr	r2, [pc, #104]	; (8009008 <TIM_OC3_SetConfig+0x100>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d113      	bne.n	8008fca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	4a19      	ldr	r2, [pc, #100]	; (800900c <TIM_OC3_SetConfig+0x104>)
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4a18      	ldr	r2, [pc, #96]	; (8009010 <TIM_OC3_SetConfig+0x108>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	693a      	ldr	r2, [r7, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	693a      	ldr	r2, [r7, #16]
 8008fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	621a      	str	r2, [r3, #32]
}
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	b006      	add	sp, #24
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	fffffeff 	.word	0xfffffeff
 8008ff0:	fffffdff 	.word	0xfffffdff
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	fffff7ff 	.word	0xfffff7ff
 8008ffc:	fffffbff 	.word	0xfffffbff
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800
 800900c:	ffffefff 	.word	0xffffefff
 8009010:	ffffdfff 	.word	0xffffdfff

08009014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	4a28      	ldr	r2, [pc, #160]	; (80090c4 <TIM_OC4_SetConfig+0xb0>)
 8009024:	401a      	ands	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4a22      	ldr	r2, [pc, #136]	; (80090c8 <TIM_OC4_SetConfig+0xb4>)
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a21      	ldr	r2, [pc, #132]	; (80090cc <TIM_OC4_SetConfig+0xb8>)
 8009048:	4013      	ands	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	4a1d      	ldr	r2, [pc, #116]	; (80090d0 <TIM_OC4_SetConfig+0xbc>)
 800905c:	4013      	ands	r3, r2
 800905e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a19      	ldr	r2, [pc, #100]	; (80090d4 <TIM_OC4_SetConfig+0xc0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d00b      	beq.n	800908c <TIM_OC4_SetConfig+0x78>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <TIM_OC4_SetConfig+0xc4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d007      	beq.n	800908c <TIM_OC4_SetConfig+0x78>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a17      	ldr	r2, [pc, #92]	; (80090dc <TIM_OC4_SetConfig+0xc8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d003      	beq.n	800908c <TIM_OC4_SetConfig+0x78>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a16      	ldr	r2, [pc, #88]	; (80090e0 <TIM_OC4_SetConfig+0xcc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d109      	bne.n	80090a0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	4a15      	ldr	r2, [pc, #84]	; (80090e4 <TIM_OC4_SetConfig+0xd0>)
 8009090:	4013      	ands	r3, r2
 8009092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	019b      	lsls	r3, r3, #6
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	46bd      	mov	sp, r7
 80090be:	b006      	add	sp, #24
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	ffffefff 	.word	0xffffefff
 80090c8:	ffff8fff 	.word	0xffff8fff
 80090cc:	fffffcff 	.word	0xfffffcff
 80090d0:	ffffdfff 	.word	0xffffdfff
 80090d4:	40012c00 	.word	0x40012c00
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800
 80090e4:	ffffbfff 	.word	0xffffbfff

080090e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	2201      	movs	r2, #1
 8009100:	4393      	bics	r3, r2
 8009102:	001a      	movs	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	22f0      	movs	r2, #240	; 0xf0
 8009112:	4393      	bics	r3, r2
 8009114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	220a      	movs	r2, #10
 8009124:	4393      	bics	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4313      	orrs	r3, r2
 800912e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	621a      	str	r2, [r3, #32]
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	46bd      	mov	sp, r7
 8009140:	b006      	add	sp, #24
 8009142:	bd80      	pop	{r7, pc}

08009144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	2210      	movs	r2, #16
 8009156:	4393      	bics	r3, r2
 8009158:	001a      	movs	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <TIM_TI2_ConfigInputStage+0x60>)
 800916e:	4013      	ands	r3, r2
 8009170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	031b      	lsls	r3, r3, #12
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	4313      	orrs	r3, r2
 800917a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	22a0      	movs	r2, #160	; 0xa0
 8009180:	4393      	bics	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	011b      	lsls	r3, r3, #4
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4313      	orrs	r3, r2
 800918c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	46bd      	mov	sp, r7
 800919e:	b006      	add	sp, #24
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	46c0      	nop			; (mov r8, r8)
 80091a4:	ffff0fff 	.word	0xffff0fff

080091a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2270      	movs	r2, #112	; 0x70
 80091bc:	4393      	bics	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	2207      	movs	r2, #7
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	609a      	str	r2, [r3, #8]
}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b004      	add	sp, #16
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <TIM_ETR_SetConfig+0x3c>)
 80091f4:	4013      	ands	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	021a      	lsls	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	431a      	orrs	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4313      	orrs	r3, r2
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	609a      	str	r2, [r3, #8]
}
 8009210:	46c0      	nop			; (mov r8, r8)
 8009212:	46bd      	mov	sp, r7
 8009214:	b006      	add	sp, #24
 8009216:	bd80      	pop	{r7, pc}
 8009218:	ffff00ff 	.word	0xffff00ff

0800921c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	221f      	movs	r2, #31
 800922c:	4013      	ands	r3, r2
 800922e:	2201      	movs	r2, #1
 8009230:	409a      	lsls	r2, r3
 8009232:	0013      	movs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	43d2      	mvns	r2, r2
 800923e:	401a      	ands	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6a1a      	ldr	r2, [r3, #32]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	211f      	movs	r1, #31
 800924c:	400b      	ands	r3, r1
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	4099      	lsls	r1, r3
 8009252:	000b      	movs	r3, r1
 8009254:	431a      	orrs	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	46bd      	mov	sp, r7
 800925e:	b006      	add	sp, #24
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	223c      	movs	r2, #60	; 0x3c
 8009272:	5c9b      	ldrb	r3, [r3, r2]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009278:	2302      	movs	r3, #2
 800927a:	e041      	b.n	8009300 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	223c      	movs	r2, #60	; 0x3c
 8009280:	2101      	movs	r1, #1
 8009282:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	223d      	movs	r2, #61	; 0x3d
 8009288:	2102      	movs	r1, #2
 800928a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2270      	movs	r2, #112	; 0x70
 80092a0:	4393      	bics	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a13      	ldr	r2, [pc, #76]	; (8009308 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a11      	ldr	r2, [pc, #68]	; (800930c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a10      	ldr	r2, [pc, #64]	; (8009310 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d10c      	bne.n	80092ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2280      	movs	r2, #128	; 0x80
 80092d8:	4393      	bics	r3, r2
 80092da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	223d      	movs	r2, #61	; 0x3d
 80092f2:	2101      	movs	r1, #1
 80092f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	223c      	movs	r2, #60	; 0x3c
 80092fa:	2100      	movs	r1, #0
 80092fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	0018      	movs	r0, r3
 8009302:	46bd      	mov	sp, r7
 8009304:	b004      	add	sp, #16
 8009306:	bd80      	pop	{r7, pc}
 8009308:	40012c00 	.word	0x40012c00
 800930c:	40000400 	.word	0x40000400
 8009310:	40014000 	.word	0x40014000

08009314 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800931c:	46c0      	nop			; (mov r8, r8)
 800931e:	46bd      	mov	sp, r7
 8009320:	b002      	add	sp, #8
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	b002      	add	sp, #8
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e044      	b.n	80093d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800934a:	2b00      	cmp	r3, #0
 800934c:	d107      	bne.n	800935e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2274      	movs	r2, #116	; 0x74
 8009352:	2100      	movs	r1, #0
 8009354:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	0018      	movs	r0, r3
 800935a:	f7fb fcdb 	bl	8004d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	; 0x24
 8009362:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2101      	movs	r1, #1
 8009370:	438a      	bics	r2, r1
 8009372:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	0018      	movs	r0, r3
 8009378:	f000 fb80 	bl	8009a7c <UART_SetConfig>
 800937c:	0003      	movs	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e024      	b.n	80093d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	0018      	movs	r0, r3
 8009392:	f000 fccb 	bl	8009d2c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	490d      	ldr	r1, [pc, #52]	; (80093d8 <HAL_UART_Init+0xa4>)
 80093a2:	400a      	ands	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2108      	movs	r1, #8
 80093b2:	438a      	bics	r2, r1
 80093b4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2101      	movs	r1, #1
 80093c2:	430a      	orrs	r2, r1
 80093c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	0018      	movs	r0, r3
 80093ca:	f000 fd63 	bl	8009e94 <UART_CheckIdleState>
 80093ce:	0003      	movs	r3, r0
}
 80093d0:	0018      	movs	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b002      	add	sp, #8
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	fffff7ff 	.word	0xfffff7ff

080093dc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	1dbb      	adds	r3, r7, #6
 80093e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ee:	2b20      	cmp	r3, #32
 80093f0:	d000      	beq.n	80093f4 <HAL_UART_Transmit_IT+0x18>
 80093f2:	e06a      	b.n	80094ca <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_UART_Transmit_IT+0x26>
 80093fa:	1dbb      	adds	r3, r7, #6
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e062      	b.n	80094cc <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	2380      	movs	r3, #128	; 0x80
 800940c:	015b      	lsls	r3, r3, #5
 800940e:	429a      	cmp	r2, r3
 8009410:	d109      	bne.n	8009426 <HAL_UART_Transmit_IT+0x4a>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d105      	bne.n	8009426 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2201      	movs	r2, #1
 800941e:	4013      	ands	r3, r2
 8009420:	d001      	beq.n	8009426 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e052      	b.n	80094cc <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2274      	movs	r2, #116	; 0x74
 800942a:	5c9b      	ldrb	r3, [r3, r2]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d101      	bne.n	8009434 <HAL_UART_Transmit_IT+0x58>
 8009430:	2302      	movs	r3, #2
 8009432:	e04b      	b.n	80094cc <HAL_UART_Transmit_IT+0xf0>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2274      	movs	r2, #116	; 0x74
 8009438:	2101      	movs	r1, #1
 800943a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	1dba      	adds	r2, r7, #6
 8009446:	2150      	movs	r1, #80	; 0x50
 8009448:	8812      	ldrh	r2, [r2, #0]
 800944a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	1dba      	adds	r2, r7, #6
 8009450:	2152      	movs	r1, #82	; 0x52
 8009452:	8812      	ldrh	r2, [r2, #0]
 8009454:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2280      	movs	r2, #128	; 0x80
 8009460:	2100      	movs	r1, #0
 8009462:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2221      	movs	r2, #33	; 0x21
 8009468:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689a      	ldr	r2, [r3, #8]
 800946e:	2380      	movs	r3, #128	; 0x80
 8009470:	015b      	lsls	r3, r3, #5
 8009472:	429a      	cmp	r2, r3
 8009474:	d107      	bne.n	8009486 <HAL_UART_Transmit_IT+0xaa>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d103      	bne.n	8009486 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4a14      	ldr	r2, [pc, #80]	; (80094d4 <HAL_UART_Transmit_IT+0xf8>)
 8009482:	669a      	str	r2, [r3, #104]	; 0x68
 8009484:	e002      	b.n	800948c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4a13      	ldr	r2, [pc, #76]	; (80094d8 <HAL_UART_Transmit_IT+0xfc>)
 800948a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2274      	movs	r2, #116	; 0x74
 8009490:	2100      	movs	r1, #0
 8009492:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009494:	f3ef 8310 	mrs	r3, PRIMASK
 8009498:	613b      	str	r3, [r7, #16]
  return(result);
 800949a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800949c:	61fb      	str	r3, [r7, #28]
 800949e:	2301      	movs	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f383 8810 	msr	PRIMASK, r3
}
 80094a8:	46c0      	nop			; (mov r8, r8)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2180      	movs	r1, #128	; 0x80
 80094b6:	430a      	orrs	r2, r1
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	f383 8810 	msr	PRIMASK, r3
}
 80094c4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80094ca:	2302      	movs	r3, #2
  }
}
 80094cc:	0018      	movs	r0, r3
 80094ce:	46bd      	mov	sp, r7
 80094d0:	b008      	add	sp, #32
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	0800a3b3 	.word	0x0800a3b3
 80094d8:	0800a2ff 	.word	0x0800a2ff

080094dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b0ab      	sub	sp, #172	; 0xac
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	22a4      	movs	r2, #164	; 0xa4
 80094ec:	18b9      	adds	r1, r7, r2
 80094ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	20a0      	movs	r0, #160	; 0xa0
 80094f8:	1839      	adds	r1, r7, r0
 80094fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	219c      	movs	r1, #156	; 0x9c
 8009504:	1879      	adds	r1, r7, r1
 8009506:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009508:	0011      	movs	r1, r2
 800950a:	18bb      	adds	r3, r7, r2
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a99      	ldr	r2, [pc, #612]	; (8009774 <HAL_UART_IRQHandler+0x298>)
 8009510:	4013      	ands	r3, r2
 8009512:	2298      	movs	r2, #152	; 0x98
 8009514:	18bc      	adds	r4, r7, r2
 8009516:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8009518:	18bb      	adds	r3, r7, r2
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d114      	bne.n	800954a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009520:	187b      	adds	r3, r7, r1
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2220      	movs	r2, #32
 8009526:	4013      	ands	r3, r2
 8009528:	d00f      	beq.n	800954a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800952a:	183b      	adds	r3, r7, r0
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2220      	movs	r2, #32
 8009530:	4013      	ands	r3, r2
 8009532:	d00a      	beq.n	800954a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009538:	2b00      	cmp	r3, #0
 800953a:	d100      	bne.n	800953e <HAL_UART_IRQHandler+0x62>
 800953c:	e27e      	b.n	8009a3c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	0010      	movs	r0, r2
 8009546:	4798      	blx	r3
      }
      return;
 8009548:	e278      	b.n	8009a3c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800954a:	2398      	movs	r3, #152	; 0x98
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d100      	bne.n	8009556 <HAL_UART_IRQHandler+0x7a>
 8009554:	e114      	b.n	8009780 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009556:	239c      	movs	r3, #156	; 0x9c
 8009558:	18fb      	adds	r3, r7, r3
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	4013      	ands	r3, r2
 8009560:	d106      	bne.n	8009570 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009562:	23a0      	movs	r3, #160	; 0xa0
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a83      	ldr	r2, [pc, #524]	; (8009778 <HAL_UART_IRQHandler+0x29c>)
 800956a:	4013      	ands	r3, r2
 800956c:	d100      	bne.n	8009570 <HAL_UART_IRQHandler+0x94>
 800956e:	e107      	b.n	8009780 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009570:	23a4      	movs	r3, #164	; 0xa4
 8009572:	18fb      	adds	r3, r7, r3
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2201      	movs	r2, #1
 8009578:	4013      	ands	r3, r2
 800957a:	d012      	beq.n	80095a2 <HAL_UART_IRQHandler+0xc6>
 800957c:	23a0      	movs	r3, #160	; 0xa0
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	2380      	movs	r3, #128	; 0x80
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	4013      	ands	r3, r2
 8009588:	d00b      	beq.n	80095a2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2201      	movs	r2, #1
 8009590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2280      	movs	r2, #128	; 0x80
 8009596:	589b      	ldr	r3, [r3, r2]
 8009598:	2201      	movs	r2, #1
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2180      	movs	r1, #128	; 0x80
 80095a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095a2:	23a4      	movs	r3, #164	; 0xa4
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2202      	movs	r2, #2
 80095aa:	4013      	ands	r3, r2
 80095ac:	d011      	beq.n	80095d2 <HAL_UART_IRQHandler+0xf6>
 80095ae:	239c      	movs	r3, #156	; 0x9c
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4013      	ands	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2202      	movs	r2, #2
 80095c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2280      	movs	r2, #128	; 0x80
 80095c6:	589b      	ldr	r3, [r3, r2]
 80095c8:	2204      	movs	r2, #4
 80095ca:	431a      	orrs	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2180      	movs	r1, #128	; 0x80
 80095d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d2:	23a4      	movs	r3, #164	; 0xa4
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2204      	movs	r2, #4
 80095da:	4013      	ands	r3, r2
 80095dc:	d011      	beq.n	8009602 <HAL_UART_IRQHandler+0x126>
 80095de:	239c      	movs	r3, #156	; 0x9c
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2201      	movs	r2, #1
 80095e6:	4013      	ands	r3, r2
 80095e8:	d00b      	beq.n	8009602 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2204      	movs	r2, #4
 80095f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2280      	movs	r2, #128	; 0x80
 80095f6:	589b      	ldr	r3, [r3, r2]
 80095f8:	2202      	movs	r2, #2
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2180      	movs	r1, #128	; 0x80
 8009600:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009602:	23a4      	movs	r3, #164	; 0xa4
 8009604:	18fb      	adds	r3, r7, r3
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2208      	movs	r2, #8
 800960a:	4013      	ands	r3, r2
 800960c:	d017      	beq.n	800963e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800960e:	23a0      	movs	r3, #160	; 0xa0
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2220      	movs	r2, #32
 8009616:	4013      	ands	r3, r2
 8009618:	d105      	bne.n	8009626 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800961a:	239c      	movs	r3, #156	; 0x9c
 800961c:	18fb      	adds	r3, r7, r3
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2201      	movs	r2, #1
 8009622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009624:	d00b      	beq.n	800963e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2208      	movs	r2, #8
 800962c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	589b      	ldr	r3, [r3, r2]
 8009634:	2208      	movs	r2, #8
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2180      	movs	r1, #128	; 0x80
 800963c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800963e:	23a4      	movs	r3, #164	; 0xa4
 8009640:	18fb      	adds	r3, r7, r3
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	2380      	movs	r3, #128	; 0x80
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	4013      	ands	r3, r2
 800964a:	d013      	beq.n	8009674 <HAL_UART_IRQHandler+0x198>
 800964c:	23a0      	movs	r3, #160	; 0xa0
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	2380      	movs	r3, #128	; 0x80
 8009654:	04db      	lsls	r3, r3, #19
 8009656:	4013      	ands	r3, r2
 8009658:	d00c      	beq.n	8009674 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2280      	movs	r2, #128	; 0x80
 8009660:	0112      	lsls	r2, r2, #4
 8009662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2280      	movs	r2, #128	; 0x80
 8009668:	589b      	ldr	r3, [r3, r2]
 800966a:	2220      	movs	r2, #32
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2180      	movs	r1, #128	; 0x80
 8009672:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2280      	movs	r2, #128	; 0x80
 8009678:	589b      	ldr	r3, [r3, r2]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d100      	bne.n	8009680 <HAL_UART_IRQHandler+0x1a4>
 800967e:	e1df      	b.n	8009a40 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009680:	23a4      	movs	r3, #164	; 0xa4
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2220      	movs	r2, #32
 8009688:	4013      	ands	r3, r2
 800968a:	d00e      	beq.n	80096aa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800968c:	23a0      	movs	r3, #160	; 0xa0
 800968e:	18fb      	adds	r3, r7, r3
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2220      	movs	r2, #32
 8009694:	4013      	ands	r3, r2
 8009696:	d008      	beq.n	80096aa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	0010      	movs	r0, r2
 80096a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2280      	movs	r2, #128	; 0x80
 80096ae:	589b      	ldr	r3, [r3, r2]
 80096b0:	2194      	movs	r1, #148	; 0x94
 80096b2:	187a      	adds	r2, r7, r1
 80096b4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2240      	movs	r2, #64	; 0x40
 80096be:	4013      	ands	r3, r2
 80096c0:	2b40      	cmp	r3, #64	; 0x40
 80096c2:	d004      	beq.n	80096ce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2228      	movs	r2, #40	; 0x28
 80096ca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096cc:	d047      	beq.n	800975e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	0018      	movs	r0, r3
 80096d2:	f000 fd9b 	bl	800a20c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	2240      	movs	r2, #64	; 0x40
 80096de:	4013      	ands	r3, r2
 80096e0:	2b40      	cmp	r3, #64	; 0x40
 80096e2:	d137      	bne.n	8009754 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e4:	f3ef 8310 	mrs	r3, PRIMASK
 80096e8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80096ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ec:	2090      	movs	r0, #144	; 0x90
 80096ee:	183a      	adds	r2, r7, r0
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	2301      	movs	r3, #1
 80096f4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096f8:	f383 8810 	msr	PRIMASK, r3
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2140      	movs	r1, #64	; 0x40
 800970a:	438a      	bics	r2, r1
 800970c:	609a      	str	r2, [r3, #8]
 800970e:	183b      	adds	r3, r7, r0
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009714:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009716:	f383 8810 	msr	PRIMASK, r3
}
 800971a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009720:	2b00      	cmp	r3, #0
 8009722:	d012      	beq.n	800974a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009728:	4a14      	ldr	r2, [pc, #80]	; (800977c <HAL_UART_IRQHandler+0x2a0>)
 800972a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009730:	0018      	movs	r0, r3
 8009732:	f7fc fbb8 	bl	8005ea6 <HAL_DMA_Abort_IT>
 8009736:	1e03      	subs	r3, r0, #0
 8009738:	d01a      	beq.n	8009770 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009744:	0018      	movs	r0, r3
 8009746:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	e012      	b.n	8009770 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	0018      	movs	r0, r3
 800974e:	f000 f98d 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009752:	e00d      	b.n	8009770 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	0018      	movs	r0, r3
 8009758:	f000 f988 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800975c:	e008      	b.n	8009770 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	0018      	movs	r0, r3
 8009762:	f000 f983 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2280      	movs	r2, #128	; 0x80
 800976a:	2100      	movs	r1, #0
 800976c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800976e:	e167      	b.n	8009a40 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009770:	46c0      	nop			; (mov r8, r8)
    return;
 8009772:	e165      	b.n	8009a40 <HAL_UART_IRQHandler+0x564>
 8009774:	0000080f 	.word	0x0000080f
 8009778:	04000120 	.word	0x04000120
 800977c:	0800a2d1 	.word	0x0800a2d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009784:	2b01      	cmp	r3, #1
 8009786:	d000      	beq.n	800978a <HAL_UART_IRQHandler+0x2ae>
 8009788:	e131      	b.n	80099ee <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800978a:	23a4      	movs	r3, #164	; 0xa4
 800978c:	18fb      	adds	r3, r7, r3
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2210      	movs	r2, #16
 8009792:	4013      	ands	r3, r2
 8009794:	d100      	bne.n	8009798 <HAL_UART_IRQHandler+0x2bc>
 8009796:	e12a      	b.n	80099ee <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009798:	23a0      	movs	r3, #160	; 0xa0
 800979a:	18fb      	adds	r3, r7, r3
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2210      	movs	r2, #16
 80097a0:	4013      	ands	r3, r2
 80097a2:	d100      	bne.n	80097a6 <HAL_UART_IRQHandler+0x2ca>
 80097a4:	e123      	b.n	80099ee <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2210      	movs	r2, #16
 80097ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2240      	movs	r2, #64	; 0x40
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b40      	cmp	r3, #64	; 0x40
 80097ba:	d000      	beq.n	80097be <HAL_UART_IRQHandler+0x2e2>
 80097bc:	e09b      	b.n	80098f6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	217e      	movs	r1, #126	; 0x7e
 80097c8:	187b      	adds	r3, r7, r1
 80097ca:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d100      	bne.n	80097d6 <HAL_UART_IRQHandler+0x2fa>
 80097d4:	e136      	b.n	8009a44 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2258      	movs	r2, #88	; 0x58
 80097da:	5a9b      	ldrh	r3, [r3, r2]
 80097dc:	187a      	adds	r2, r7, r1
 80097de:	8812      	ldrh	r2, [r2, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d300      	bcc.n	80097e6 <HAL_UART_IRQHandler+0x30a>
 80097e4:	e12e      	b.n	8009a44 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	187a      	adds	r2, r7, r1
 80097ea:	215a      	movs	r1, #90	; 0x5a
 80097ec:	8812      	ldrh	r2, [r2, #0]
 80097ee:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	2b20      	cmp	r3, #32
 80097f8:	d06e      	beq.n	80098d8 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fa:	f3ef 8310 	mrs	r3, PRIMASK
 80097fe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009802:	67bb      	str	r3, [r7, #120]	; 0x78
 8009804:	2301      	movs	r3, #1
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980a:	f383 8810 	msr	PRIMASK, r3
}
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	498e      	ldr	r1, [pc, #568]	; (8009a54 <HAL_UART_IRQHandler+0x578>)
 800981c:	400a      	ands	r2, r1
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009822:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f383 8810 	msr	PRIMASK, r3
}
 800982a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982c:	f3ef 8310 	mrs	r3, PRIMASK
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8009832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009834:	677b      	str	r3, [r7, #116]	; 0x74
 8009836:	2301      	movs	r3, #1
 8009838:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983c:	f383 8810 	msr	PRIMASK, r3
}
 8009840:	46c0      	nop			; (mov r8, r8)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2101      	movs	r1, #1
 800984e:	438a      	bics	r2, r1
 8009850:	609a      	str	r2, [r3, #8]
 8009852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009854:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009858:	f383 8810 	msr	PRIMASK, r3
}
 800985c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800985e:	f3ef 8310 	mrs	r3, PRIMASK
 8009862:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009864:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009866:	673b      	str	r3, [r7, #112]	; 0x70
 8009868:	2301      	movs	r3, #1
 800986a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800986c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986e:	f383 8810 	msr	PRIMASK, r3
}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2140      	movs	r1, #64	; 0x40
 8009880:	438a      	bics	r2, r1
 8009882:	609a      	str	r2, [r3, #8]
 8009884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009886:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2220      	movs	r2, #32
 8009894:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989c:	f3ef 8310 	mrs	r3, PRIMASK
 80098a0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80098a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098a6:	2301      	movs	r3, #1
 80098a8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098ac:	f383 8810 	msr	PRIMASK, r3
}
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2110      	movs	r1, #16
 80098be:	438a      	bics	r2, r1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7fc faaf 	bl	8005e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2258      	movs	r2, #88	; 0x58
 80098dc:	5a9a      	ldrh	r2, [r3, r2]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	215a      	movs	r1, #90	; 0x5a
 80098e2:	5a5b      	ldrh	r3, [r3, r1]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	0011      	movs	r1, r2
 80098ee:	0018      	movs	r0, r3
 80098f0:	f7fa f912 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098f4:	e0a6      	b.n	8009a44 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2258      	movs	r2, #88	; 0x58
 80098fa:	5a99      	ldrh	r1, [r3, r2]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	225a      	movs	r2, #90	; 0x5a
 8009900:	5a9b      	ldrh	r3, [r3, r2]
 8009902:	b29a      	uxth	r2, r3
 8009904:	208e      	movs	r0, #142	; 0x8e
 8009906:	183b      	adds	r3, r7, r0
 8009908:	1a8a      	subs	r2, r1, r2
 800990a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	225a      	movs	r2, #90	; 0x5a
 8009910:	5a9b      	ldrh	r3, [r3, r2]
 8009912:	b29b      	uxth	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d100      	bne.n	800991a <HAL_UART_IRQHandler+0x43e>
 8009918:	e096      	b.n	8009a48 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800991a:	183b      	adds	r3, r7, r0
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d100      	bne.n	8009924 <HAL_UART_IRQHandler+0x448>
 8009922:	e091      	b.n	8009a48 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009924:	f3ef 8310 	mrs	r3, PRIMASK
 8009928:	60fb      	str	r3, [r7, #12]
  return(result);
 800992a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800992c:	2488      	movs	r4, #136	; 0x88
 800992e:	193a      	adds	r2, r7, r4
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	2301      	movs	r3, #1
 8009934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f383 8810 	msr	PRIMASK, r3
}
 800993c:	46c0      	nop			; (mov r8, r8)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4943      	ldr	r1, [pc, #268]	; (8009a58 <HAL_UART_IRQHandler+0x57c>)
 800994a:	400a      	ands	r2, r1
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	193b      	adds	r3, r7, r4
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f383 8810 	msr	PRIMASK, r3
}
 800995a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800995c:	f3ef 8310 	mrs	r3, PRIMASK
 8009960:	61bb      	str	r3, [r7, #24]
  return(result);
 8009962:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	2484      	movs	r4, #132	; 0x84
 8009966:	193a      	adds	r2, r7, r4
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	2301      	movs	r3, #1
 800996c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	f383 8810 	msr	PRIMASK, r3
}
 8009974:	46c0      	nop			; (mov r8, r8)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2101      	movs	r1, #1
 8009982:	438a      	bics	r2, r1
 8009984:	609a      	str	r2, [r3, #8]
 8009986:	193b      	adds	r3, r7, r4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	f383 8810 	msr	PRIMASK, r3
}
 8009992:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099a6:	f3ef 8310 	mrs	r3, PRIMASK
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ae:	2480      	movs	r4, #128	; 0x80
 80099b0:	193a      	adds	r2, r7, r4
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	2301      	movs	r3, #1
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	f383 8810 	msr	PRIMASK, r3
}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2110      	movs	r1, #16
 80099cc:	438a      	bics	r2, r1
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	193b      	adds	r3, r7, r4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	f383 8810 	msr	PRIMASK, r3
}
 80099dc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099de:	183b      	adds	r3, r7, r0
 80099e0:	881a      	ldrh	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	0011      	movs	r1, r2
 80099e6:	0018      	movs	r0, r3
 80099e8:	f7fa f896 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099ec:	e02c      	b.n	8009a48 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099ee:	23a4      	movs	r3, #164	; 0xa4
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2280      	movs	r2, #128	; 0x80
 80099f6:	4013      	ands	r3, r2
 80099f8:	d00f      	beq.n	8009a1a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80099fa:	23a0      	movs	r3, #160	; 0xa0
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2280      	movs	r2, #128	; 0x80
 8009a02:	4013      	ands	r3, r2
 8009a04:	d009      	beq.n	8009a1a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01e      	beq.n	8009a4c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	0010      	movs	r0, r2
 8009a16:	4798      	blx	r3
    }
    return;
 8009a18:	e018      	b.n	8009a4c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a1a:	23a4      	movs	r3, #164	; 0xa4
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2240      	movs	r2, #64	; 0x40
 8009a22:	4013      	ands	r3, r2
 8009a24:	d013      	beq.n	8009a4e <HAL_UART_IRQHandler+0x572>
 8009a26:	23a0      	movs	r3, #160	; 0xa0
 8009a28:	18fb      	adds	r3, r7, r3
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2240      	movs	r2, #64	; 0x40
 8009a2e:	4013      	ands	r3, r2
 8009a30:	d00d      	beq.n	8009a4e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	0018      	movs	r0, r3
 8009a36:	f000 fd1a 	bl	800a46e <UART_EndTransmit_IT>
    return;
 8009a3a:	e008      	b.n	8009a4e <HAL_UART_IRQHandler+0x572>
      return;
 8009a3c:	46c0      	nop			; (mov r8, r8)
 8009a3e:	e006      	b.n	8009a4e <HAL_UART_IRQHandler+0x572>
    return;
 8009a40:	46c0      	nop			; (mov r8, r8)
 8009a42:	e004      	b.n	8009a4e <HAL_UART_IRQHandler+0x572>
      return;
 8009a44:	46c0      	nop			; (mov r8, r8)
 8009a46:	e002      	b.n	8009a4e <HAL_UART_IRQHandler+0x572>
      return;
 8009a48:	46c0      	nop			; (mov r8, r8)
 8009a4a:	e000      	b.n	8009a4e <HAL_UART_IRQHandler+0x572>
    return;
 8009a4c:	46c0      	nop			; (mov r8, r8)
  }

}
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	b02b      	add	sp, #172	; 0xac
 8009a52:	bd90      	pop	{r4, r7, pc}
 8009a54:	fffffeff 	.word	0xfffffeff
 8009a58:	fffffedf 	.word	0xfffffedf

08009a5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009a64:	46c0      	nop			; (mov r8, r8)
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a74:	46c0      	nop			; (mov r8, r8)
 8009a76:	46bd      	mov	sp, r7
 8009a78:	b002      	add	sp, #8
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b088      	sub	sp, #32
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a84:	231e      	movs	r3, #30
 8009a86:	18fb      	adds	r3, r7, r3
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a97      	ldr	r2, [pc, #604]	; (8009d08 <UART_SetConfig+0x28c>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	0019      	movs	r1, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4a92      	ldr	r2, [pc, #584]	; (8009d0c <UART_SetConfig+0x290>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	0019      	movs	r1, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	4a89      	ldr	r2, [pc, #548]	; (8009d10 <UART_SetConfig+0x294>)
 8009aea:	4013      	ands	r3, r2
 8009aec:	0019      	movs	r1, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a85      	ldr	r2, [pc, #532]	; (8009d14 <UART_SetConfig+0x298>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d127      	bne.n	8009b52 <UART_SetConfig+0xd6>
 8009b02:	4b85      	ldr	r3, [pc, #532]	; (8009d18 <UART_SetConfig+0x29c>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	2203      	movs	r2, #3
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d00d      	beq.n	8009b2a <UART_SetConfig+0xae>
 8009b0e:	d81b      	bhi.n	8009b48 <UART_SetConfig+0xcc>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d014      	beq.n	8009b3e <UART_SetConfig+0xc2>
 8009b14:	d818      	bhi.n	8009b48 <UART_SetConfig+0xcc>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <UART_SetConfig+0xa4>
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d00a      	beq.n	8009b34 <UART_SetConfig+0xb8>
 8009b1e:	e013      	b.n	8009b48 <UART_SetConfig+0xcc>
 8009b20:	231f      	movs	r3, #31
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	e035      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b2a:	231f      	movs	r3, #31
 8009b2c:	18fb      	adds	r3, r7, r3
 8009b2e:	2202      	movs	r2, #2
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	e030      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b34:	231f      	movs	r3, #31
 8009b36:	18fb      	adds	r3, r7, r3
 8009b38:	2204      	movs	r2, #4
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e02b      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b3e:	231f      	movs	r3, #31
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	2208      	movs	r2, #8
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e026      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b48:	231f      	movs	r3, #31
 8009b4a:	18fb      	adds	r3, r7, r3
 8009b4c:	2210      	movs	r2, #16
 8009b4e:	701a      	strb	r2, [r3, #0]
 8009b50:	e021      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a71      	ldr	r2, [pc, #452]	; (8009d1c <UART_SetConfig+0x2a0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d104      	bne.n	8009b66 <UART_SetConfig+0xea>
 8009b5c:	231f      	movs	r3, #31
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	2200      	movs	r2, #0
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e017      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a6d      	ldr	r2, [pc, #436]	; (8009d20 <UART_SetConfig+0x2a4>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d104      	bne.n	8009b7a <UART_SetConfig+0xfe>
 8009b70:	231f      	movs	r3, #31
 8009b72:	18fb      	adds	r3, r7, r3
 8009b74:	2200      	movs	r2, #0
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	e00d      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a69      	ldr	r2, [pc, #420]	; (8009d24 <UART_SetConfig+0x2a8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d104      	bne.n	8009b8e <UART_SetConfig+0x112>
 8009b84:	231f      	movs	r3, #31
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e003      	b.n	8009b96 <UART_SetConfig+0x11a>
 8009b8e:	231f      	movs	r3, #31
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	2210      	movs	r2, #16
 8009b94:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69da      	ldr	r2, [r3, #28]
 8009b9a:	2380      	movs	r3, #128	; 0x80
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d15d      	bne.n	8009c5e <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8009ba2:	231f      	movs	r3, #31
 8009ba4:	18fb      	adds	r3, r7, r3
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d015      	beq.n	8009bd8 <UART_SetConfig+0x15c>
 8009bac:	dc18      	bgt.n	8009be0 <UART_SetConfig+0x164>
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d00d      	beq.n	8009bce <UART_SetConfig+0x152>
 8009bb2:	dc15      	bgt.n	8009be0 <UART_SetConfig+0x164>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <UART_SetConfig+0x142>
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d005      	beq.n	8009bc8 <UART_SetConfig+0x14c>
 8009bbc:	e010      	b.n	8009be0 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bbe:	f7fd fb7f 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 8009bc2:	0003      	movs	r3, r0
 8009bc4:	61bb      	str	r3, [r7, #24]
        break;
 8009bc6:	e012      	b.n	8009bee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc8:	4b57      	ldr	r3, [pc, #348]	; (8009d28 <UART_SetConfig+0x2ac>)
 8009bca:	61bb      	str	r3, [r7, #24]
        break;
 8009bcc:	e00f      	b.n	8009bee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bce:	f7fd fb07 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009bd2:	0003      	movs	r3, r0
 8009bd4:	61bb      	str	r3, [r7, #24]
        break;
 8009bd6:	e00a      	b.n	8009bee <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	61bb      	str	r3, [r7, #24]
        break;
 8009bde:	e006      	b.n	8009bee <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009be4:	231e      	movs	r3, #30
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	2201      	movs	r2, #1
 8009bea:	701a      	strb	r2, [r3, #0]
        break;
 8009bec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d100      	bne.n	8009bf6 <UART_SetConfig+0x17a>
 8009bf4:	e07b      	b.n	8009cee <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	005a      	lsls	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	18d2      	adds	r2, r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	0019      	movs	r1, r3
 8009c08:	0010      	movs	r0, r2
 8009c0a:	f7f6 fa99 	bl	8000140 <__udivsi3>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2b0f      	cmp	r3, #15
 8009c18:	d91c      	bls.n	8009c54 <UART_SetConfig+0x1d8>
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	025b      	lsls	r3, r3, #9
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d217      	bcs.n	8009c54 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	200e      	movs	r0, #14
 8009c2a:	183b      	adds	r3, r7, r0
 8009c2c:	210f      	movs	r1, #15
 8009c2e:	438a      	bics	r2, r1
 8009c30:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2207      	movs	r2, #7
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	b299      	uxth	r1, r3
 8009c3e:	183b      	adds	r3, r7, r0
 8009c40:	183a      	adds	r2, r7, r0
 8009c42:	8812      	ldrh	r2, [r2, #0]
 8009c44:	430a      	orrs	r2, r1
 8009c46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	183a      	adds	r2, r7, r0
 8009c4e:	8812      	ldrh	r2, [r2, #0]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	e04c      	b.n	8009cee <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8009c54:	231e      	movs	r3, #30
 8009c56:	18fb      	adds	r3, r7, r3
 8009c58:	2201      	movs	r2, #1
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e047      	b.n	8009cee <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c5e:	231f      	movs	r3, #31
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d015      	beq.n	8009c94 <UART_SetConfig+0x218>
 8009c68:	dc18      	bgt.n	8009c9c <UART_SetConfig+0x220>
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d00d      	beq.n	8009c8a <UART_SetConfig+0x20e>
 8009c6e:	dc15      	bgt.n	8009c9c <UART_SetConfig+0x220>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <UART_SetConfig+0x1fe>
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d005      	beq.n	8009c84 <UART_SetConfig+0x208>
 8009c78:	e010      	b.n	8009c9c <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c7a:	f7fd fb21 	bl	80072c0 <HAL_RCC_GetPCLK1Freq>
 8009c7e:	0003      	movs	r3, r0
 8009c80:	61bb      	str	r3, [r7, #24]
        break;
 8009c82:	e012      	b.n	8009caa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c84:	4b28      	ldr	r3, [pc, #160]	; (8009d28 <UART_SetConfig+0x2ac>)
 8009c86:	61bb      	str	r3, [r7, #24]
        break;
 8009c88:	e00f      	b.n	8009caa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8a:	f7fd faa9 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 8009c8e:	0003      	movs	r3, r0
 8009c90:	61bb      	str	r3, [r7, #24]
        break;
 8009c92:	e00a      	b.n	8009caa <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	61bb      	str	r3, [r7, #24]
        break;
 8009c9a:	e006      	b.n	8009caa <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ca0:	231e      	movs	r3, #30
 8009ca2:	18fb      	adds	r3, r7, r3
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
        break;
 8009ca8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	085a      	lsrs	r2, r3, #1
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	18d2      	adds	r2, r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	0010      	movs	r0, r2
 8009cc2:	f7f6 fa3d 	bl	8000140 <__udivsi3>
 8009cc6:	0003      	movs	r3, r0
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b0f      	cmp	r3, #15
 8009cd0:	d909      	bls.n	8009ce6 <UART_SetConfig+0x26a>
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	2380      	movs	r3, #128	; 0x80
 8009cd6:	025b      	lsls	r3, r3, #9
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d204      	bcs.n	8009ce6 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	60da      	str	r2, [r3, #12]
 8009ce4:	e003      	b.n	8009cee <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8009ce6:	231e      	movs	r3, #30
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	2201      	movs	r2, #1
 8009cec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009cfa:	231e      	movs	r3, #30
 8009cfc:	18fb      	adds	r3, r7, r3
 8009cfe:	781b      	ldrb	r3, [r3, #0]
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b008      	add	sp, #32
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	efff69f3 	.word	0xefff69f3
 8009d0c:	ffffcfff 	.word	0xffffcfff
 8009d10:	fffff4ff 	.word	0xfffff4ff
 8009d14:	40013800 	.word	0x40013800
 8009d18:	40021000 	.word	0x40021000
 8009d1c:	40004400 	.word	0x40004400
 8009d20:	40004800 	.word	0x40004800
 8009d24:	40004c00 	.word	0x40004c00
 8009d28:	007a1200 	.word	0x007a1200

08009d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2201      	movs	r2, #1
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	d00b      	beq.n	8009d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	4a4a      	ldr	r2, [pc, #296]	; (8009e70 <UART_AdvFeatureConfig+0x144>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	0019      	movs	r1, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	d00b      	beq.n	8009d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a43      	ldr	r2, [pc, #268]	; (8009e74 <UART_AdvFeatureConfig+0x148>)
 8009d68:	4013      	ands	r3, r2
 8009d6a:	0019      	movs	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	2204      	movs	r2, #4
 8009d7e:	4013      	ands	r3, r2
 8009d80:	d00b      	beq.n	8009d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a3b      	ldr	r2, [pc, #236]	; (8009e78 <UART_AdvFeatureConfig+0x14c>)
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	430a      	orrs	r2, r1
 8009d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	2208      	movs	r2, #8
 8009da0:	4013      	ands	r3, r2
 8009da2:	d00b      	beq.n	8009dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	4a34      	ldr	r2, [pc, #208]	; (8009e7c <UART_AdvFeatureConfig+0x150>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	0019      	movs	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	d00b      	beq.n	8009dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4a2c      	ldr	r2, [pc, #176]	; (8009e80 <UART_AdvFeatureConfig+0x154>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de2:	2220      	movs	r2, #32
 8009de4:	4013      	ands	r3, r2
 8009de6:	d00b      	beq.n	8009e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	4a25      	ldr	r2, [pc, #148]	; (8009e84 <UART_AdvFeatureConfig+0x158>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	0019      	movs	r1, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	430a      	orrs	r2, r1
 8009dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e04:	2240      	movs	r2, #64	; 0x40
 8009e06:	4013      	ands	r3, r2
 8009e08:	d01d      	beq.n	8009e46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <UART_AdvFeatureConfig+0x15c>)
 8009e12:	4013      	ands	r3, r2
 8009e14:	0019      	movs	r1, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e26:	2380      	movs	r3, #128	; 0x80
 8009e28:	035b      	lsls	r3, r3, #13
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d10b      	bne.n	8009e46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	4a15      	ldr	r2, [pc, #84]	; (8009e8c <UART_AdvFeatureConfig+0x160>)
 8009e36:	4013      	ands	r3, r2
 8009e38:	0019      	movs	r1, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4a:	2280      	movs	r2, #128	; 0x80
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d00b      	beq.n	8009e68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	4a0e      	ldr	r2, [pc, #56]	; (8009e90 <UART_AdvFeatureConfig+0x164>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	0019      	movs	r1, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }
}
 8009e68:	46c0      	nop			; (mov r8, r8)
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b002      	add	sp, #8
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	fffdffff 	.word	0xfffdffff
 8009e74:	fffeffff 	.word	0xfffeffff
 8009e78:	fffbffff 	.word	0xfffbffff
 8009e7c:	ffff7fff 	.word	0xffff7fff
 8009e80:	ffffefff 	.word	0xffffefff
 8009e84:	ffffdfff 	.word	0xffffdfff
 8009e88:	ffefffff 	.word	0xffefffff
 8009e8c:	ff9fffff 	.word	0xff9fffff
 8009e90:	fff7ffff 	.word	0xfff7ffff

08009e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2280      	movs	r2, #128	; 0x80
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ea4:	f7fb f960 	bl	8005168 <HAL_GetTick>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d10c      	bne.n	8009ed4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2280      	movs	r2, #128	; 0x80
 8009ebe:	0391      	lsls	r1, r2, #14
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	4a17      	ldr	r2, [pc, #92]	; (8009f20 <UART_CheckIdleState+0x8c>)
 8009ec4:	9200      	str	r2, [sp, #0]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f000 f82c 	bl	8009f24 <UART_WaitOnFlagUntilTimeout>
 8009ecc:	1e03      	subs	r3, r0, #0
 8009ece:	d001      	beq.n	8009ed4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e021      	b.n	8009f18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2204      	movs	r2, #4
 8009edc:	4013      	ands	r3, r2
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d10c      	bne.n	8009efc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2280      	movs	r2, #128	; 0x80
 8009ee6:	03d1      	lsls	r1, r2, #15
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4a0d      	ldr	r2, [pc, #52]	; (8009f20 <UART_CheckIdleState+0x8c>)
 8009eec:	9200      	str	r2, [sp, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f000 f818 	bl	8009f24 <UART_WaitOnFlagUntilTimeout>
 8009ef4:	1e03      	subs	r3, r0, #0
 8009ef6:	d001      	beq.n	8009efc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e00d      	b.n	8009f18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2274      	movs	r2, #116	; 0x74
 8009f12:	2100      	movs	r1, #0
 8009f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	0018      	movs	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b004      	add	sp, #16
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	01ffffff 	.word	0x01ffffff

08009f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b094      	sub	sp, #80	; 0x50
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	1dfb      	adds	r3, r7, #7
 8009f32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f34:	e0a3      	b.n	800a07e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f38:	3301      	adds	r3, #1
 8009f3a:	d100      	bne.n	8009f3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8009f3c:	e09f      	b.n	800a07e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3e:	f7fb f913 	bl	8005168 <HAL_GetTick>
 8009f42:	0002      	movs	r2, r0
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d302      	bcc.n	8009f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d13d      	bne.n	8009fd0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f54:	f3ef 8310 	mrs	r3, PRIMASK
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f5e:	2301      	movs	r3, #1
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	f383 8810 	msr	PRIMASK, r3
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	494c      	ldr	r1, [pc, #304]	; (800a0a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8009f76:	400a      	ands	r2, r1
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	f383 8810 	msr	PRIMASK, r3
}
 8009f84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f86:	f3ef 8310 	mrs	r3, PRIMASK
 8009f8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f90:	2301      	movs	r3, #1
 8009f92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	f383 8810 	msr	PRIMASK, r3
}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	438a      	bics	r2, r1
 8009faa:	609a      	str	r2, [r3, #8]
 8009fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb2:	f383 8810 	msr	PRIMASK, r3
}
 8009fb6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2274      	movs	r2, #116	; 0x74
 8009fc8:	2100      	movs	r1, #0
 8009fca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e067      	b.n	800a0a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2204      	movs	r2, #4
 8009fd8:	4013      	ands	r3, r2
 8009fda:	d050      	beq.n	800a07e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	69da      	ldr	r2, [r3, #28]
 8009fe2:	2380      	movs	r3, #128	; 0x80
 8009fe4:	011b      	lsls	r3, r3, #4
 8009fe6:	401a      	ands	r2, r3
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d146      	bne.n	800a07e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2280      	movs	r2, #128	; 0x80
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8009ffe:	613b      	str	r3, [r7, #16]
  return(result);
 800a000:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a002:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a004:	2301      	movs	r3, #1
 800a006:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f383 8810 	msr	PRIMASK, r3
}
 800a00e:	46c0      	nop			; (mov r8, r8)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4923      	ldr	r1, [pc, #140]	; (800a0a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800a01c:	400a      	ands	r2, r1
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a022:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	f383 8810 	msr	PRIMASK, r3
}
 800a02a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a02c:	f3ef 8310 	mrs	r3, PRIMASK
 800a030:	61fb      	str	r3, [r7, #28]
  return(result);
 800a032:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a034:	64bb      	str	r3, [r7, #72]	; 0x48
 800a036:	2301      	movs	r3, #1
 800a038:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	f383 8810 	msr	PRIMASK, r3
}
 800a040:	46c0      	nop			; (mov r8, r8)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2101      	movs	r1, #1
 800a04e:	438a      	bics	r2, r1
 800a050:	609a      	str	r2, [r3, #8]
 800a052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	f383 8810 	msr	PRIMASK, r3
}
 800a05c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2220      	movs	r2, #32
 800a068:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2280      	movs	r2, #128	; 0x80
 800a06e:	2120      	movs	r1, #32
 800a070:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2274      	movs	r2, #116	; 0x74
 800a076:	2100      	movs	r1, #0
 800a078:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e010      	b.n	800a0a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	4013      	ands	r3, r2
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	425a      	negs	r2, r3
 800a08e:	4153      	adcs	r3, r2
 800a090:	b2db      	uxtb	r3, r3
 800a092:	001a      	movs	r2, r3
 800a094:	1dfb      	adds	r3, r7, #7
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d100      	bne.n	800a09e <UART_WaitOnFlagUntilTimeout+0x17a>
 800a09c:	e74b      	b.n	8009f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b014      	add	sp, #80	; 0x50
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	fffffe5f 	.word	0xfffffe5f

0800a0ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08c      	sub	sp, #48	; 0x30
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	1dbb      	adds	r3, r7, #6
 800a0b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1dba      	adds	r2, r7, #6
 800a0c4:	2158      	movs	r1, #88	; 0x58
 800a0c6:	8812      	ldrh	r2, [r2, #0]
 800a0c8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	1dba      	adds	r2, r7, #6
 800a0ce:	215a      	movs	r1, #90	; 0x5a
 800a0d0:	8812      	ldrh	r2, [r2, #0]
 800a0d2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	2380      	movs	r3, #128	; 0x80
 800a0e0:	015b      	lsls	r3, r3, #5
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d10d      	bne.n	800a102 <UART_Start_Receive_IT+0x56>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d104      	bne.n	800a0f8 <UART_Start_Receive_IT+0x4c>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	225c      	movs	r2, #92	; 0x5c
 800a0f2:	4943      	ldr	r1, [pc, #268]	; (800a200 <UART_Start_Receive_IT+0x154>)
 800a0f4:	5299      	strh	r1, [r3, r2]
 800a0f6:	e02e      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	225c      	movs	r2, #92	; 0x5c
 800a0fc:	21ff      	movs	r1, #255	; 0xff
 800a0fe:	5299      	strh	r1, [r3, r2]
 800a100:	e029      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10d      	bne.n	800a126 <UART_Start_Receive_IT+0x7a>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <UART_Start_Receive_IT+0x70>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	225c      	movs	r2, #92	; 0x5c
 800a116:	21ff      	movs	r1, #255	; 0xff
 800a118:	5299      	strh	r1, [r3, r2]
 800a11a:	e01c      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	225c      	movs	r2, #92	; 0x5c
 800a120:	217f      	movs	r1, #127	; 0x7f
 800a122:	5299      	strh	r1, [r3, r2]
 800a124:	e017      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	2380      	movs	r3, #128	; 0x80
 800a12c:	055b      	lsls	r3, r3, #21
 800a12e:	429a      	cmp	r2, r3
 800a130:	d10d      	bne.n	800a14e <UART_Start_Receive_IT+0xa2>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <UART_Start_Receive_IT+0x98>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	225c      	movs	r2, #92	; 0x5c
 800a13e:	217f      	movs	r1, #127	; 0x7f
 800a140:	5299      	strh	r1, [r3, r2]
 800a142:	e008      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	225c      	movs	r2, #92	; 0x5c
 800a148:	213f      	movs	r1, #63	; 0x3f
 800a14a:	5299      	strh	r1, [r3, r2]
 800a14c:	e003      	b.n	800a156 <UART_Start_Receive_IT+0xaa>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	225c      	movs	r2, #92	; 0x5c
 800a152:	2100      	movs	r1, #0
 800a154:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2280      	movs	r2, #128	; 0x80
 800a15a:	2100      	movs	r1, #0
 800a15c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2222      	movs	r2, #34	; 0x22
 800a162:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a164:	f3ef 8310 	mrs	r3, PRIMASK
 800a168:	61fb      	str	r3, [r7, #28]
  return(result);
 800a16a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a16e:	2301      	movs	r3, #1
 800a170:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	f383 8810 	msr	PRIMASK, r3
}
 800a178:	46c0      	nop			; (mov r8, r8)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2101      	movs	r1, #1
 800a186:	430a      	orrs	r2, r1
 800a188:	609a      	str	r2, [r3, #8]
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	f383 8810 	msr	PRIMASK, r3
}
 800a194:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	2380      	movs	r3, #128	; 0x80
 800a19c:	015b      	lsls	r3, r3, #5
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d107      	bne.n	800a1b2 <UART_Start_Receive_IT+0x106>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4a15      	ldr	r2, [pc, #84]	; (800a204 <UART_Start_Receive_IT+0x158>)
 800a1ae:	665a      	str	r2, [r3, #100]	; 0x64
 800a1b0:	e002      	b.n	800a1b8 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a14      	ldr	r2, [pc, #80]	; (800a208 <UART_Start_Receive_IT+0x15c>)
 800a1b6:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2274      	movs	r2, #116	; 0x74
 800a1bc:	2100      	movs	r1, #0
 800a1be:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c4:	613b      	str	r3, [r7, #16]
  return(result);
 800a1c6:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f383 8810 	msr	PRIMASK, r3
}
 800a1d4:	46c0      	nop			; (mov r8, r8)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2190      	movs	r1, #144	; 0x90
 800a1e2:	0049      	lsls	r1, r1, #1
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	f383 8810 	msr	PRIMASK, r3
}
 800a1f2:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	b00c      	add	sp, #48	; 0x30
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	000001ff 	.word	0x000001ff
 800a204:	0800a62d 	.word	0x0800a62d
 800a208:	0800a4c5 	.word	0x0800a4c5

0800a20c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08e      	sub	sp, #56	; 0x38
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a214:	f3ef 8310 	mrs	r3, PRIMASK
 800a218:	617b      	str	r3, [r7, #20]
  return(result);
 800a21a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a21c:	637b      	str	r3, [r7, #52]	; 0x34
 800a21e:	2301      	movs	r3, #1
 800a220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f383 8810 	msr	PRIMASK, r3
}
 800a228:	46c0      	nop			; (mov r8, r8)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4925      	ldr	r1, [pc, #148]	; (800a2cc <UART_EndRxTransfer+0xc0>)
 800a236:	400a      	ands	r2, r1
 800a238:	601a      	str	r2, [r3, #0]
 800a23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	f383 8810 	msr	PRIMASK, r3
}
 800a244:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a246:	f3ef 8310 	mrs	r3, PRIMASK
 800a24a:	623b      	str	r3, [r7, #32]
  return(result);
 800a24c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a24e:	633b      	str	r3, [r7, #48]	; 0x30
 800a250:	2301      	movs	r3, #1
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	f383 8810 	msr	PRIMASK, r3
}
 800a25a:	46c0      	nop			; (mov r8, r8)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2101      	movs	r1, #1
 800a268:	438a      	bics	r2, r1
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f383 8810 	msr	PRIMASK, r3
}
 800a276:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d118      	bne.n	800a2b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a280:	f3ef 8310 	mrs	r3, PRIMASK
 800a284:	60bb      	str	r3, [r7, #8]
  return(result);
 800a286:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a28a:	2301      	movs	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f383 8810 	msr	PRIMASK, r3
}
 800a294:	46c0      	nop			; (mov r8, r8)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2110      	movs	r1, #16
 800a2a2:	438a      	bics	r2, r1
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f383 8810 	msr	PRIMASK, r3
}
 800a2b0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a2c4:	46c0      	nop			; (mov r8, r8)
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	b00e      	add	sp, #56	; 0x38
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	fffffedf 	.word	0xfffffedf

0800a2d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	225a      	movs	r2, #90	; 0x5a
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2252      	movs	r2, #82	; 0x52
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f7ff fbbb 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b004      	add	sp, #16
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b08a      	sub	sp, #40	; 0x28
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a30a:	2b21      	cmp	r3, #33	; 0x21
 800a30c:	d14d      	bne.n	800a3aa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2252      	movs	r2, #82	; 0x52
 800a312:	5a9b      	ldrh	r3, [r3, r2]
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d132      	bne.n	800a380 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a31a:	f3ef 8310 	mrs	r3, PRIMASK
 800a31e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a320:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
 800a324:	2301      	movs	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f383 8810 	msr	PRIMASK, r3
}
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2180      	movs	r1, #128	; 0x80
 800a33c:	438a      	bics	r2, r1
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f383 8810 	msr	PRIMASK, r3
}
 800a34a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a34c:	f3ef 8310 	mrs	r3, PRIMASK
 800a350:	617b      	str	r3, [r7, #20]
  return(result);
 800a352:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a354:	623b      	str	r3, [r7, #32]
 800a356:	2301      	movs	r3, #1
 800a358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f383 8810 	msr	PRIMASK, r3
}
 800a360:	46c0      	nop			; (mov r8, r8)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	430a      	orrs	r2, r1
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	f383 8810 	msr	PRIMASK, r3
}
 800a37c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a37e:	e014      	b.n	800a3aa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	b292      	uxth	r2, r2
 800a38c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2252      	movs	r2, #82	; 0x52
 800a39c:	5a9b      	ldrh	r3, [r3, r2]
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b299      	uxth	r1, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2252      	movs	r2, #82	; 0x52
 800a3a8:	5299      	strh	r1, [r3, r2]
}
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	b00a      	add	sp, #40	; 0x28
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b08c      	sub	sp, #48	; 0x30
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3be:	2b21      	cmp	r3, #33	; 0x21
 800a3c0:	d151      	bne.n	800a466 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2252      	movs	r2, #82	; 0x52
 800a3c6:	5a9b      	ldrh	r3, [r3, r2]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d132      	bne.n	800a434 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d8:	2301      	movs	r3, #1
 800a3da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f383 8810 	msr	PRIMASK, r3
}
 800a3e2:	46c0      	nop			; (mov r8, r8)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2180      	movs	r1, #128	; 0x80
 800a3f0:	438a      	bics	r2, r1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	f383 8810 	msr	PRIMASK, r3
}
 800a3fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a400:	f3ef 8310 	mrs	r3, PRIMASK
 800a404:	61bb      	str	r3, [r7, #24]
  return(result);
 800a406:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a408:	627b      	str	r3, [r7, #36]	; 0x24
 800a40a:	2301      	movs	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	f383 8810 	msr	PRIMASK, r3
}
 800a414:	46c0      	nop			; (mov r8, r8)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2140      	movs	r1, #64	; 0x40
 800a422:	430a      	orrs	r2, r1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a42a:	6a3b      	ldr	r3, [r7, #32]
 800a42c:	f383 8810 	msr	PRIMASK, r3
}
 800a430:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a432:	e018      	b.n	800a466 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a438:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	881a      	ldrh	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	05d2      	lsls	r2, r2, #23
 800a444:	0dd2      	lsrs	r2, r2, #23
 800a446:	b292      	uxth	r2, r2
 800a448:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a44e:	1c9a      	adds	r2, r3, #2
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2252      	movs	r2, #82	; 0x52
 800a458:	5a9b      	ldrh	r3, [r3, r2]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	3b01      	subs	r3, #1
 800a45e:	b299      	uxth	r1, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2252      	movs	r2, #82	; 0x52
 800a464:	5299      	strh	r1, [r3, r2]
}
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	46bd      	mov	sp, r7
 800a46a:	b00c      	add	sp, #48	; 0x30
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b086      	sub	sp, #24
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a476:	f3ef 8310 	mrs	r3, PRIMASK
 800a47a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a47c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	2301      	movs	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f383 8810 	msr	PRIMASK, r3
}
 800a48a:	46c0      	nop			; (mov r8, r8)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2140      	movs	r1, #64	; 0x40
 800a498:	438a      	bics	r2, r1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f383 8810 	msr	PRIMASK, r3
}
 800a4a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	0018      	movs	r0, r3
 800a4b8:	f7f9 fb4c 	bl	8003b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4bc:	46c0      	nop			; (mov r8, r8)
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b006      	add	sp, #24
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b090      	sub	sp, #64	; 0x40
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a4cc:	203e      	movs	r0, #62	; 0x3e
 800a4ce:	183b      	adds	r3, r7, r0
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	215c      	movs	r1, #92	; 0x5c
 800a4d4:	5a52      	ldrh	r2, [r2, r1]
 800a4d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4dc:	2b22      	cmp	r3, #34	; 0x22
 800a4de:	d000      	beq.n	800a4e2 <UART_RxISR_8BIT+0x1e>
 800a4e0:	e095      	b.n	800a60e <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	213c      	movs	r1, #60	; 0x3c
 800a4e8:	187b      	adds	r3, r7, r1
 800a4ea:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a4ec:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a4ee:	187b      	adds	r3, r7, r1
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	183b      	adds	r3, r7, r0
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	b2d9      	uxtb	r1, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	400a      	ands	r2, r1
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	225a      	movs	r2, #90	; 0x5a
 800a512:	5a9b      	ldrh	r3, [r3, r2]
 800a514:	b29b      	uxth	r3, r3
 800a516:	3b01      	subs	r3, #1
 800a518:	b299      	uxth	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	225a      	movs	r2, #90	; 0x5a
 800a51e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	225a      	movs	r2, #90	; 0x5a
 800a524:	5a9b      	ldrh	r3, [r3, r2]
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d178      	bne.n	800a61e <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a52c:	f3ef 8310 	mrs	r3, PRIMASK
 800a530:	61bb      	str	r3, [r7, #24]
  return(result);
 800a532:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a534:	63bb      	str	r3, [r7, #56]	; 0x38
 800a536:	2301      	movs	r3, #1
 800a538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f383 8810 	msr	PRIMASK, r3
}
 800a540:	46c0      	nop			; (mov r8, r8)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4936      	ldr	r1, [pc, #216]	; (800a628 <UART_RxISR_8BIT+0x164>)
 800a54e:	400a      	ands	r2, r1
 800a550:	601a      	str	r2, [r3, #0]
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	f383 8810 	msr	PRIMASK, r3
}
 800a55c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a55e:	f3ef 8310 	mrs	r3, PRIMASK
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
 800a568:	2301      	movs	r3, #1
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	f383 8810 	msr	PRIMASK, r3
}
 800a572:	46c0      	nop			; (mov r8, r8)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689a      	ldr	r2, [r3, #8]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2101      	movs	r1, #1
 800a580:	438a      	bics	r2, r1
 800a582:	609a      	str	r2, [r3, #8]
 800a584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	f383 8810 	msr	PRIMASK, r3
}
 800a58e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2220      	movs	r2, #32
 800a594:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d12f      	bne.n	800a604 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5b0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f383 8810 	msr	PRIMASK, r3
}
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2110      	movs	r1, #16
 800a5cc:	438a      	bics	r2, r1
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f383 8810 	msr	PRIMASK, r3
}
 800a5da:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	2210      	movs	r2, #16
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	2b10      	cmp	r3, #16
 800a5e8:	d103      	bne.n	800a5f2 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2210      	movs	r2, #16
 800a5f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2258      	movs	r2, #88	; 0x58
 800a5f6:	5a9a      	ldrh	r2, [r3, r2]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	0011      	movs	r1, r2
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f7f9 fa8b 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a602:	e00c      	b.n	800a61e <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	0018      	movs	r0, r3
 800a608:	f7ff fa28 	bl	8009a5c <HAL_UART_RxCpltCallback>
}
 800a60c:	e007      	b.n	800a61e <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	699a      	ldr	r2, [r3, #24]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2108      	movs	r1, #8
 800a61a:	430a      	orrs	r2, r1
 800a61c:	619a      	str	r2, [r3, #24]
}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	46bd      	mov	sp, r7
 800a622:	b010      	add	sp, #64	; 0x40
 800a624:	bd80      	pop	{r7, pc}
 800a626:	46c0      	nop			; (mov r8, r8)
 800a628:	fffffedf 	.word	0xfffffedf

0800a62c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b090      	sub	sp, #64	; 0x40
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a634:	203e      	movs	r0, #62	; 0x3e
 800a636:	183b      	adds	r3, r7, r0
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	215c      	movs	r1, #92	; 0x5c
 800a63c:	5a52      	ldrh	r2, [r2, r1]
 800a63e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a644:	2b22      	cmp	r3, #34	; 0x22
 800a646:	d000      	beq.n	800a64a <UART_RxISR_16BIT+0x1e>
 800a648:	e095      	b.n	800a776 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	213c      	movs	r1, #60	; 0x3c
 800a650:	187b      	adds	r3, r7, r1
 800a652:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800a654:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800a65c:	187b      	adds	r3, r7, r1
 800a65e:	183a      	adds	r2, r7, r0
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	8812      	ldrh	r2, [r2, #0]
 800a664:	4013      	ands	r3, r2
 800a666:	b29a      	uxth	r2, r3
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a670:	1c9a      	adds	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	225a      	movs	r2, #90	; 0x5a
 800a67a:	5a9b      	ldrh	r3, [r3, r2]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	b299      	uxth	r1, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	225a      	movs	r2, #90	; 0x5a
 800a686:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	225a      	movs	r2, #90	; 0x5a
 800a68c:	5a9b      	ldrh	r3, [r3, r2]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d178      	bne.n	800a786 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a694:	f3ef 8310 	mrs	r3, PRIMASK
 800a698:	617b      	str	r3, [r7, #20]
  return(result);
 800a69a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a69c:	637b      	str	r3, [r7, #52]	; 0x34
 800a69e:	2301      	movs	r3, #1
 800a6a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	f383 8810 	msr	PRIMASK, r3
}
 800a6a8:	46c0      	nop			; (mov r8, r8)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4936      	ldr	r1, [pc, #216]	; (800a790 <UART_RxISR_16BIT+0x164>)
 800a6b6:	400a      	ands	r2, r1
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	f383 8810 	msr	PRIMASK, r3
}
 800a6c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ca:	623b      	str	r3, [r7, #32]
  return(result);
 800a6cc:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	f383 8810 	msr	PRIMASK, r3
}
 800a6da:	46c0      	nop			; (mov r8, r8)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	438a      	bics	r2, r1
 800a6ea:	609a      	str	r2, [r3, #8]
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	f383 8810 	msr	PRIMASK, r3
}
 800a6f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2220      	movs	r2, #32
 800a6fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d12f      	bne.n	800a76c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a712:	f3ef 8310 	mrs	r3, PRIMASK
 800a716:	60bb      	str	r3, [r7, #8]
  return(result);
 800a718:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a71c:	2301      	movs	r3, #1
 800a71e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f383 8810 	msr	PRIMASK, r3
}
 800a726:	46c0      	nop			; (mov r8, r8)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2110      	movs	r1, #16
 800a734:	438a      	bics	r2, r1
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f383 8810 	msr	PRIMASK, r3
}
 800a742:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	2210      	movs	r2, #16
 800a74c:	4013      	ands	r3, r2
 800a74e:	2b10      	cmp	r3, #16
 800a750:	d103      	bne.n	800a75a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2210      	movs	r2, #16
 800a758:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2258      	movs	r2, #88	; 0x58
 800a75e:	5a9a      	ldrh	r2, [r3, r2]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	0011      	movs	r1, r2
 800a764:	0018      	movs	r0, r3
 800a766:	f7f9 f9d7 	bl	8003b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a76a:	e00c      	b.n	800a786 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	0018      	movs	r0, r3
 800a770:	f7ff f974 	bl	8009a5c <HAL_UART_RxCpltCallback>
}
 800a774:	e007      	b.n	800a786 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	699a      	ldr	r2, [r3, #24]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2108      	movs	r1, #8
 800a782:	430a      	orrs	r2, r1
 800a784:	619a      	str	r2, [r3, #24]
}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	46bd      	mov	sp, r7
 800a78a:	b010      	add	sp, #64	; 0x40
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	fffffedf 	.word	0xfffffedf

0800a794 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a794:	b5b0      	push	{r4, r5, r7, lr}
 800a796:	b08a      	sub	sp, #40	; 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	1dbb      	adds	r3, r7, #6
 800a7a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a6:	2b20      	cmp	r3, #32
 800a7a8:	d15e      	bne.n	800a868 <HAL_UARTEx_ReceiveToIdle_IT+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 800a7b0:	1dbb      	adds	r3, r7, #6
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e056      	b.n	800a86a <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	689a      	ldr	r2, [r3, #8]
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	015b      	lsls	r3, r3, #5
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d109      	bne.n	800a7dc <HAL_UARTEx_ReceiveToIdle_IT+0x48>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d105      	bne.n	800a7dc <HAL_UARTEx_ReceiveToIdle_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	d001      	beq.n	800a7dc <HAL_UARTEx_ReceiveToIdle_IT+0x48>
      {
        return  HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e046      	b.n	800a86a <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
      }
    }

    __HAL_LOCK(huart);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2274      	movs	r2, #116	; 0x74
 800a7e0:	5c9b      	ldrb	r3, [r3, r2]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d101      	bne.n	800a7ea <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	e03f      	b.n	800a86a <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2274      	movs	r2, #116	; 0x74
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a7f8:	2527      	movs	r5, #39	; 0x27
 800a7fa:	197c      	adds	r4, r7, r5
 800a7fc:	1dbb      	adds	r3, r7, #6
 800a7fe:	881a      	ldrh	r2, [r3, #0]
 800a800:	68b9      	ldr	r1, [r7, #8]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	0018      	movs	r0, r3
 800a806:	f7ff fc51 	bl	800a0ac <UART_Start_Receive_IT>
 800a80a:	0003      	movs	r3, r0
 800a80c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a80e:	197b      	adds	r3, r7, r5
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d124      	bne.n	800a860 <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d11c      	bne.n	800a858 <HAL_UARTEx_ReceiveToIdle_IT+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2210      	movs	r2, #16
 800a824:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a826:	f3ef 8310 	mrs	r3, PRIMASK
 800a82a:	617b      	str	r3, [r7, #20]
  return(result);
 800a82c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82e:	623b      	str	r3, [r7, #32]
 800a830:	2301      	movs	r3, #1
 800a832:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f383 8810 	msr	PRIMASK, r3
}
 800a83a:	46c0      	nop			; (mov r8, r8)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2110      	movs	r1, #16
 800a848:	430a      	orrs	r2, r1
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	f383 8810 	msr	PRIMASK, r3
}
 800a856:	e003      	b.n	800a860 <HAL_UARTEx_ReceiveToIdle_IT+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a858:	2327      	movs	r3, #39	; 0x27
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	2201      	movs	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a860:	2327      	movs	r3, #39	; 0x27
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	e000      	b.n	800a86a <HAL_UARTEx_ReceiveToIdle_IT+0xd6>
  }
  else
  {
    return HAL_BUSY;
 800a868:	2302      	movs	r3, #2
  }
}
 800a86a:	0018      	movs	r0, r3
 800a86c:	46bd      	mov	sp, r7
 800a86e:	b00a      	add	sp, #40	; 0x28
 800a870:	bdb0      	pop	{r4, r5, r7, pc}

0800a872 <CANSPI_EN_Int>:

/** CAN SPI APIs */ 

/* Enable Interrupt */
void CANSPI_EN_Int(SPI_HandleTypeDef *SPI_CAN)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	2300      	movs	r3, #0
 800a87e:	22ff      	movs	r2, #255	; 0xff
 800a880:	212c      	movs	r1, #44	; 0x2c
 800a882:	f000 fcf9 	bl	800b278 <MCP2515_BitModify>

  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTE, 0xff, 0xff); // 0x03 RX INTERRUPTS ENABLED, 0xff ALL ENABLED
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	23ff      	movs	r3, #255	; 0xff
 800a88a:	22ff      	movs	r2, #255	; 0xff
 800a88c:	212b      	movs	r1, #43	; 0x2b
 800a88e:	f000 fcf3 	bl	800b278 <MCP2515_BitModify>
}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	46bd      	mov	sp, r7
 800a896:	b002      	add	sp, #8
 800a898:	bd80      	pop	{r7, pc}

0800a89a <CANSPI_CL_Flag_Int>:

void CANSPI_CL_Flag_Int(SPI_HandleTypeDef *SPI_CAN)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	22ff      	movs	r2, #255	; 0xff
 800a8a8:	212c      	movs	r1, #44	; 0x2c
 800a8aa:	f000 fce5 	bl	800b278 <MCP2515_BitModify>
}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b002      	add	sp, #8
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <CANSPI_Initialize>:
  MCP2515_SetSleepMode(SPI_CAN);
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b08a      	sub	sp, #40	; 0x28
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 800a8be:	210c      	movs	r1, #12
 800a8c0:	187b      	adds	r3, r7, r1
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
  RXM0reg.RXM0SIDL = 0x00;
 800a8c6:	187b      	adds	r3, r7, r1
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	705a      	strb	r2, [r3, #1]
  RXM0reg.RXM0EID8 = 0x00;
 800a8cc:	187b      	adds	r3, r7, r1
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	709a      	strb	r2, [r3, #2]
  RXM0reg.RXM0EID0 = 0x00;
 800a8d2:	187b      	adds	r3, r7, r1
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	70da      	strb	r2, [r3, #3]
  
  RXM1reg.RXM1SIDH = 0x00;
 800a8d8:	2108      	movs	r1, #8
 800a8da:	187b      	adds	r3, r7, r1
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800a8e0:	187b      	adds	r3, r7, r1
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	705a      	strb	r2, [r3, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800a8e6:	187b      	adds	r3, r7, r1
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	709a      	strb	r2, [r3, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800a8ec:	187b      	adds	r3, r7, r1
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	70da      	strb	r2, [r3, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 800a8f2:	2124      	movs	r1, #36	; 0x24
 800a8f4:	187b      	adds	r3, r7, r1
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	701a      	strb	r2, [r3, #0]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800a8fa:	187b      	adds	r3, r7, r1
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	705a      	strb	r2, [r3, #1]
  RXF0reg.RXF0EID8 = 0x00;
 800a900:	187b      	adds	r3, r7, r1
 800a902:	2200      	movs	r2, #0
 800a904:	709a      	strb	r2, [r3, #2]
  RXF0reg.RXF0EID0 = 0x00;
 800a906:	187b      	adds	r3, r7, r1
 800a908:	2200      	movs	r2, #0
 800a90a:	70da      	strb	r2, [r3, #3]
  
  RXF1reg.RXF1SIDH = 0x00;
 800a90c:	2120      	movs	r1, #32
 800a90e:	187b      	adds	r3, r7, r1
 800a910:	2200      	movs	r2, #0
 800a912:	701a      	strb	r2, [r3, #0]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800a914:	187b      	adds	r3, r7, r1
 800a916:	2208      	movs	r2, #8
 800a918:	705a      	strb	r2, [r3, #1]
  RXF1reg.RXF1EID8 = 0x00;
 800a91a:	187b      	adds	r3, r7, r1
 800a91c:	2200      	movs	r2, #0
 800a91e:	709a      	strb	r2, [r3, #2]
  RXF1reg.RXF1EID0 = 0x00;
 800a920:	187b      	adds	r3, r7, r1
 800a922:	2200      	movs	r2, #0
 800a924:	70da      	strb	r2, [r3, #3]
  
  RXF2reg.RXF2SIDH = 0x00;
 800a926:	211c      	movs	r1, #28
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	2200      	movs	r2, #0
 800a92c:	701a      	strb	r2, [r3, #0]
  RXF2reg.RXF2SIDL = 0x00;
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	2200      	movs	r2, #0
 800a932:	705a      	strb	r2, [r3, #1]
  RXF2reg.RXF2EID8 = 0x00;
 800a934:	187b      	adds	r3, r7, r1
 800a936:	2200      	movs	r2, #0
 800a938:	709a      	strb	r2, [r3, #2]
  RXF2reg.RXF2EID0 = 0x00;
 800a93a:	187b      	adds	r3, r7, r1
 800a93c:	2200      	movs	r2, #0
 800a93e:	70da      	strb	r2, [r3, #3]
  
  RXF3reg.RXF3SIDH = 0x00;
 800a940:	2118      	movs	r1, #24
 800a942:	187b      	adds	r3, r7, r1
 800a944:	2200      	movs	r2, #0
 800a946:	701a      	strb	r2, [r3, #0]
  RXF3reg.RXF3SIDL = 0x00;
 800a948:	187b      	adds	r3, r7, r1
 800a94a:	2200      	movs	r2, #0
 800a94c:	705a      	strb	r2, [r3, #1]
  RXF3reg.RXF3EID8 = 0x00;
 800a94e:	187b      	adds	r3, r7, r1
 800a950:	2200      	movs	r2, #0
 800a952:	709a      	strb	r2, [r3, #2]
  RXF3reg.RXF3EID0 = 0x00;
 800a954:	187b      	adds	r3, r7, r1
 800a956:	2200      	movs	r2, #0
 800a958:	70da      	strb	r2, [r3, #3]
  
  RXF4reg.RXF4SIDH = 0x00;
 800a95a:	2114      	movs	r1, #20
 800a95c:	187b      	adds	r3, r7, r1
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
  RXF4reg.RXF4SIDL = 0x00;
 800a962:	187b      	adds	r3, r7, r1
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
  RXF4reg.RXF4EID8 = 0x00;
 800a968:	187b      	adds	r3, r7, r1
 800a96a:	2200      	movs	r2, #0
 800a96c:	709a      	strb	r2, [r3, #2]
  RXF4reg.RXF4EID0 = 0x00;
 800a96e:	187b      	adds	r3, r7, r1
 800a970:	2200      	movs	r2, #0
 800a972:	70da      	strb	r2, [r3, #3]
  
  RXF5reg.RXF5SIDH = 0x00;
 800a974:	2110      	movs	r1, #16
 800a976:	187b      	adds	r3, r7, r1
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
  RXF5reg.RXF5SIDL = 0x08;
 800a97c:	187b      	adds	r3, r7, r1
 800a97e:	2208      	movs	r2, #8
 800a980:	705a      	strb	r2, [r3, #1]
  RXF5reg.RXF5EID8 = 0x00;
 800a982:	187b      	adds	r3, r7, r1
 800a984:	2200      	movs	r2, #0
 800a986:	709a      	strb	r2, [r3, #2]
  RXF5reg.RXF5EID0 = 0x00;
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	2200      	movs	r2, #0
 800a98c:	70da      	strb	r2, [r3, #3]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize(SPI_CAN))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	0018      	movs	r0, r3
 800a992:	f000 fabb 	bl	800af0c <MCP2515_Initialize>
 800a996:	0003      	movs	r3, r0
 800a998:	001a      	movs	r2, r3
 800a99a:	2301      	movs	r3, #1
 800a99c:	4053      	eors	r3, r2
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <CANSPI_Initialize+0xf2>
    return false;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	e074      	b.n	800aa92 <CANSPI_Initialize+0x1dc>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode(SPI_CAN))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	0018      	movs	r0, r3
 800a9ac:	f000 fad2 	bl	800af54 <MCP2515_SetConfigMode>
 800a9b0:	0003      	movs	r3, r0
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	4053      	eors	r3, r2
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <CANSPI_Initialize+0x10c>
    return false;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e067      	b.n	800aa92 <CANSPI_Initialize+0x1dc>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 800a9c2:	230c      	movs	r3, #12
 800a9c4:	18fb      	adds	r3, r7, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	2223      	movs	r2, #35	; 0x23
 800a9ca:	2120      	movs	r1, #32
 800a9cc:	f000 fb92 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	18fb      	adds	r3, r7, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	2227      	movs	r2, #39	; 0x27
 800a9d8:	2124      	movs	r1, #36	; 0x24
 800a9da:	f000 fb8b 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800a9de:	2324      	movs	r3, #36	; 0x24
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f000 fb84 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800a9ec:	2320      	movs	r3, #32
 800a9ee:	18fb      	adds	r3, r7, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	2207      	movs	r2, #7
 800a9f4:	2104      	movs	r1, #4
 800a9f6:	f000 fb7d 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800a9fa:	231c      	movs	r3, #28
 800a9fc:	18fb      	adds	r3, r7, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	220b      	movs	r2, #11
 800aa02:	2108      	movs	r1, #8
 800aa04:	f000 fb76 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800aa08:	2318      	movs	r3, #24
 800aa0a:	18fb      	adds	r3, r7, r3
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	2213      	movs	r2, #19
 800aa10:	2110      	movs	r1, #16
 800aa12:	f000 fb6f 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800aa16:	2314      	movs	r3, #20
 800aa18:	18fb      	adds	r3, r7, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	2217      	movs	r2, #23
 800aa1e:	2114      	movs	r1, #20
 800aa20:	f000 fb68 	bl	800b0f4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 800aa24:	2310      	movs	r3, #16
 800aa26:	18fb      	adds	r3, r7, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	221b      	movs	r2, #27
 800aa2c:	2118      	movs	r1, #24
 800aa2e:	f000 fb61 	bl	800b0f4 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2204      	movs	r2, #4
 800aa36:	2160      	movs	r1, #96	; 0x60
 800aa38:	0018      	movs	r0, r3
 800aa3a:	f000 fb30 	bl	800b09e <MCP2515_WriteByte>
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	2170      	movs	r1, #112	; 0x70
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 fb2a 	bl	800b09e <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF1, 0x00);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	212a      	movs	r1, #42	; 0x2a
 800aa50:	0018      	movs	r0, r3
 800aa52:	f000 fb24 	bl	800b09e <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF2, 0xE5);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	22e5      	movs	r2, #229	; 0xe5
 800aa5a:	2129      	movs	r1, #41	; 0x29
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 fb1e 	bl	800b09e <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF3, 0x83);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2283      	movs	r2, #131	; 0x83
 800aa66:	2128      	movs	r1, #40	; 0x28
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f000 fb18 	bl	800b09e <MCP2515_WriteByte>
  
  CANSPI_EN_Int(SPI_CAN);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	0018      	movs	r0, r3
 800aa72:	f7ff fefe 	bl	800a872 <CANSPI_EN_Int>
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode(SPI_CAN))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f000 fa95 	bl	800afa8 <MCP2515_SetNormalMode>
 800aa7e:	0003      	movs	r3, r0
 800aa80:	001a      	movs	r2, r3
 800aa82:	2301      	movs	r3, #1
 800aa84:	4053      	eors	r3, r2
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <CANSPI_Initialize+0x1da>
    return false;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e000      	b.n	800aa92 <CANSPI_Initialize+0x1dc>
  
  return true;
 800aa90:	2301      	movs	r3, #1
}
 800aa92:	0018      	movs	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b00a      	add	sp, #40	; 0x28
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800aaa6:	240f      	movs	r4, #15
 800aaa8:	193b      	adds	r3, r7, r4
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
  
  idReg.tempSIDH = 0;
 800aaae:	4b42      	ldr	r3, [pc, #264]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 800aab4:	4b40      	ldr	r3, [pc, #256]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800aaba:	4b3f      	ldr	r3, [pc, #252]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 800aac0:	4b3d      	ldr	r3, [pc, #244]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus(SPI_CAN);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f000 fb97 	bl	800b1fc <MCP2515_ReadStatus>
 800aace:	0003      	movs	r3, r0
 800aad0:	001a      	movs	r2, r3
 800aad2:	4b3a      	ldr	r3, [pc, #232]	; (800abbc <CANSPI_Transmit+0x120>)
 800aad4:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 800aad6:	4b39      	ldr	r3, [pc, #228]	; (800abbc <CANSPI_Transmit+0x120>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2204      	movs	r2, #4
 800aadc:	4013      	ands	r3, r2
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d11b      	bne.n	800ab1c <CANSPI_Transmit+0x80>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	6858      	ldr	r0, [r3, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	4a32      	ldr	r2, [pc, #200]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aaee:	0019      	movs	r1, r3
 800aaf0:	f000 f970 	bl	800add4 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	7a19      	ldrb	r1, [r3, #8]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	3309      	adds	r3, #9
 800aafc:	4a2e      	ldr	r2, [pc, #184]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	000b      	movs	r3, r1
 800ab04:	2140      	movs	r1, #64	; 0x40
 800ab06:	f000 fb29 	bl	800b15c <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX0);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2181      	movs	r1, #129	; 0x81
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f000 fb5a 	bl	800b1c8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800ab14:	193b      	adds	r3, r7, r4
 800ab16:	2201      	movs	r2, #1
 800ab18:	701a      	strb	r2, [r3, #0]
 800ab1a:	e046      	b.n	800abaa <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 800ab1c:	4b27      	ldr	r3, [pc, #156]	; (800abbc <CANSPI_Transmit+0x120>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2210      	movs	r2, #16
 800ab22:	4013      	ands	r3, r2
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d11c      	bne.n	800ab64 <CANSPI_Transmit+0xc8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	6858      	ldr	r0, [r3, #4]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800ab34:	0019      	movs	r1, r3
 800ab36:	f000 f94d 	bl	800add4 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	7a19      	ldrb	r1, [r3, #8]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	3309      	adds	r3, #9
 800ab42:	4a1d      	ldr	r2, [pc, #116]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	000b      	movs	r3, r1
 800ab4a:	2142      	movs	r1, #66	; 0x42
 800ab4c:	f000 fb06 	bl	800b15c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2182      	movs	r1, #130	; 0x82
 800ab54:	0018      	movs	r0, r3
 800ab56:	f000 fb37 	bl	800b1c8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800ab5a:	230f      	movs	r3, #15
 800ab5c:	18fb      	adds	r3, r7, r3
 800ab5e:	2201      	movs	r2, #1
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	e022      	b.n	800abaa <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800ab64:	4b15      	ldr	r3, [pc, #84]	; (800abbc <CANSPI_Transmit+0x120>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	2240      	movs	r2, #64	; 0x40
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d11b      	bne.n	800abaa <CANSPI_Transmit+0x10e>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6858      	ldr	r0, [r3, #4]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	4a0f      	ldr	r2, [pc, #60]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800ab7c:	0019      	movs	r1, r3
 800ab7e:	f000 f929 	bl	800add4 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	7a19      	ldrb	r1, [r3, #8]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	3309      	adds	r3, #9
 800ab8a:	4a0b      	ldr	r2, [pc, #44]	; (800abb8 <CANSPI_Transmit+0x11c>)
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	000b      	movs	r3, r1
 800ab92:	2144      	movs	r1, #68	; 0x44
 800ab94:	f000 fae2 	bl	800b15c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX2);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2184      	movs	r1, #132	; 0x84
 800ab9c:	0018      	movs	r0, r3
 800ab9e:	f000 fb13 	bl	800b1c8 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800aba2:	230f      	movs	r3, #15
 800aba4:	18fb      	adds	r3, r7, r3
 800aba6:	2201      	movs	r2, #1
 800aba8:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 800abaa:	230f      	movs	r3, #15
 800abac:	18fb      	adds	r3, r7, r3
 800abae:	781b      	ldrb	r3, [r3, #0]
}
 800abb0:	0018      	movs	r0, r3
 800abb2:	46bd      	mov	sp, r7
 800abb4:	b005      	add	sp, #20
 800abb6:	bd90      	pop	{r4, r7, pc}
 800abb8:	200006d8 	.word	0x200006d8
 800abbc:	200006d4 	.word	0x200006d4

0800abc0 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b089      	sub	sp, #36	; 0x24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800abca:	231f      	movs	r3, #31
 800abcc:	18fb      	adds	r3, r7, r3
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus(SPI_CAN);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	0018      	movs	r0, r3
 800abd6:	f000 fb30 	bl	800b23a <MCP2515_GetRxStatus>
 800abda:	0003      	movs	r3, r0
 800abdc:	001a      	movs	r2, r3
 800abde:	210c      	movs	r1, #12
 800abe0:	187b      	adds	r3, r7, r1
 800abe2:	701a      	strb	r2, [r3, #0]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 800abe4:	187b      	adds	r3, r7, r1
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	223f      	movs	r2, #63	; 0x3f
 800abea:	4393      	bics	r3, r2
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d100      	bne.n	800abf4 <CANSPI_Receive+0x34>
 800abf2:	e07e      	b.n	800acf2 <CANSPI_Receive+0x132>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 800abf4:	187b      	adds	r3, r7, r1
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	223f      	movs	r2, #63	; 0x3f
 800abfa:	4393      	bics	r3, r2
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	3b40      	subs	r3, #64	; 0x40
 800ac00:	425a      	negs	r2, r3
 800ac02:	4153      	adcs	r3, r2
 800ac04:	b2da      	uxtb	r2, r3
 800ac06:	187b      	adds	r3, r7, r1
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	213f      	movs	r1, #63	; 0x3f
 800ac0c:	438b      	bics	r3, r1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	3bc0      	subs	r3, #192	; 0xc0
 800ac12:	4259      	negs	r1, r3
 800ac14:	414b      	adcs	r3, r1
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d007      	beq.n	800ac30 <CANSPI_Receive+0x70>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800ac20:	2310      	movs	r3, #16
 800ac22:	18fa      	adds	r2, r7, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	230d      	movs	r3, #13
 800ac28:	2190      	movs	r1, #144	; 0x90
 800ac2a:	f000 fa0f 	bl	800b04c <MCP2515_ReadRxSequence>
 800ac2e:	e00e      	b.n	800ac4e <CANSPI_Receive+0x8e>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 800ac30:	230c      	movs	r3, #12
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	223f      	movs	r2, #63	; 0x3f
 800ac38:	4393      	bics	r3, r2
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b80      	cmp	r3, #128	; 0x80
 800ac3e:	d106      	bne.n	800ac4e <CANSPI_Receive+0x8e>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800ac40:	2310      	movs	r3, #16
 800ac42:	18fa      	adds	r2, r7, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	230d      	movs	r3, #13
 800ac48:	2194      	movs	r1, #148	; 0x94
 800ac4a:	f000 f9ff 	bl	800b04c <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800ac4e:	230c      	movs	r3, #12
 800ac50:	18fb      	adds	r3, r7, r3
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2218      	movs	r2, #24
 800ac56:	4013      	ands	r3, r2
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	2b10      	cmp	r3, #16
 800ac5c:	d111      	bne.n	800ac82 <CANSPI_Receive+0xc2>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2202      	movs	r2, #2
 800ac62:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800ac64:	2410      	movs	r4, #16
 800ac66:	193b      	adds	r3, r7, r4
 800ac68:	7898      	ldrb	r0, [r3, #2]
 800ac6a:	193b      	adds	r3, r7, r4
 800ac6c:	78d9      	ldrb	r1, [r3, #3]
 800ac6e:	193b      	adds	r3, r7, r4
 800ac70:	781a      	ldrb	r2, [r3, #0]
 800ac72:	193b      	adds	r3, r7, r4
 800ac74:	785b      	ldrb	r3, [r3, #1]
 800ac76:	f000 f843 	bl	800ad00 <convertReg2ExtendedCANid>
 800ac7a:	0002      	movs	r2, r0
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	605a      	str	r2, [r3, #4]
 800ac80:	e00e      	b.n	800aca0 <CANSPI_Receive+0xe0>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2201      	movs	r2, #1
 800ac86:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800ac88:	2110      	movs	r1, #16
 800ac8a:	187b      	adds	r3, r7, r1
 800ac8c:	781a      	ldrb	r2, [r3, #0]
 800ac8e:	187b      	adds	r3, r7, r1
 800ac90:	785b      	ldrb	r3, [r3, #1]
 800ac92:	0019      	movs	r1, r3
 800ac94:	0010      	movs	r0, r2
 800ac96:	f000 f87f 	bl	800ad98 <convertReg2StandardCANid>
 800ac9a:	0002      	movs	r2, r0
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800aca0:	2110      	movs	r1, #16
 800aca2:	187b      	adds	r3, r7, r1
 800aca4:	791a      	ldrb	r2, [r3, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800acaa:	187b      	adds	r3, r7, r1
 800acac:	795a      	ldrb	r2, [r3, #5]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	799a      	ldrb	r2, [r3, #6]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800acba:	187b      	adds	r3, r7, r1
 800acbc:	79da      	ldrb	r2, [r3, #7]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 800acc2:	187b      	adds	r3, r7, r1
 800acc4:	7a1a      	ldrb	r2, [r3, #8]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800acca:	187b      	adds	r3, r7, r1
 800accc:	7a5a      	ldrb	r2, [r3, #9]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800acd2:	187b      	adds	r3, r7, r1
 800acd4:	7a9a      	ldrb	r2, [r3, #10]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800acda:	187b      	adds	r3, r7, r1
 800acdc:	7ada      	ldrb	r2, [r3, #11]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800ace2:	187b      	adds	r3, r7, r1
 800ace4:	7b1a      	ldrb	r2, [r3, #12]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 800acea:	231f      	movs	r3, #31
 800acec:	18fb      	adds	r3, r7, r3
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 800acf2:	231f      	movs	r3, #31
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	781b      	ldrb	r3, [r3, #0]
}
 800acf8:	0018      	movs	r0, r3
 800acfa:	46bd      	mov	sp, r7
 800acfc:	b009      	add	sp, #36	; 0x24
 800acfe:	bd90      	pop	{r4, r7, pc}

0800ad00 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800ad00:	b5b0      	push	{r4, r5, r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	0005      	movs	r5, r0
 800ad08:	000c      	movs	r4, r1
 800ad0a:	0010      	movs	r0, r2
 800ad0c:	0019      	movs	r1, r3
 800ad0e:	1dfb      	adds	r3, r7, #7
 800ad10:	1c2a      	adds	r2, r5, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	1dbb      	adds	r3, r7, #6
 800ad16:	1c22      	adds	r2, r4, #0
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	1d7b      	adds	r3, r7, #5
 800ad1c:	1c02      	adds	r2, r0, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	1d3b      	adds	r3, r7, #4
 800ad22:	1c0a      	adds	r2, r1, #0
 800ad24:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 800ad2e:	200f      	movs	r0, #15
 800ad30:	183b      	adds	r3, r7, r0
 800ad32:	1d3a      	adds	r2, r7, #4
 800ad34:	7812      	ldrb	r2, [r2, #0]
 800ad36:	2103      	movs	r1, #3
 800ad38:	400a      	ands	r2, r1
 800ad3a:	701a      	strb	r2, [r3, #0]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800ad3c:	210e      	movs	r1, #14
 800ad3e:	187b      	adds	r3, r7, r1
 800ad40:	1d3a      	adds	r2, r7, #4
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	0952      	lsrs	r2, r2, #5
 800ad46:	701a      	strb	r2, [r3, #0]
  ConvertedID = (tempRXBn_SIDH << 3);
 800ad48:	1d7b      	adds	r3, r7, #5
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800ad50:	187b      	adds	r3, r7, r1
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	18d3      	adds	r3, r2, r3
 800ad58:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 800ad60:	183b      	adds	r3, r7, r0
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	021b      	lsls	r3, r3, #8
 800ad6e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 800ad70:	1dfb      	adds	r3, r7, #7
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	18d3      	adds	r3, r2, r3
 800ad78:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 800ad80:	1dbb      	adds	r3, r7, #6
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	18d3      	adds	r3, r2, r3
 800ad88:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800ad8e:	697b      	ldr	r3, [r7, #20]
}
 800ad90:	0018      	movs	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b006      	add	sp, #24
 800ad96:	bdb0      	pop	{r4, r5, r7, pc}

0800ad98 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	0002      	movs	r2, r0
 800ada0:	1dfb      	adds	r3, r7, #7
 800ada2:	701a      	strb	r2, [r3, #0]
 800ada4:	1dbb      	adds	r3, r7, #6
 800ada6:	1c0a      	adds	r2, r1, #0
 800ada8:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800adae:	1dfb      	adds	r3, r7, #7
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800adb6:	1dbb      	adds	r3, r7, #6
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	095b      	lsrs	r3, r3, #5
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	001a      	movs	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	189b      	adds	r3, r3, r2
 800adc4:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800adca:	68fb      	ldr	r3, [r7, #12]
}
 800adcc:	0018      	movs	r0, r3
 800adce:	46bd      	mov	sp, r7
 800add0:	b004      	add	sp, #16
 800add2:	bd80      	pop	{r7, pc}

0800add4 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	607a      	str	r2, [r7, #4]
 800adde:	200b      	movs	r0, #11
 800ade0:	183b      	adds	r3, r7, r0
 800ade2:	1c0a      	adds	r2, r1, #0
 800ade4:	701a      	strb	r2, [r3, #0]
  uint8_t wipSIDL = 0;
 800ade6:	2117      	movs	r1, #23
 800ade8:	187b      	adds	r3, r7, r1
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800adee:	183b      	adds	r3, r7, r0
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d136      	bne.n	800ae64 <convertCANid2Reg+0x90>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	0a1b      	lsrs	r3, r3, #8
 800ae02:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0a1b      	lsrs	r3, r3, #8
 800ae10:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	b2da      	uxtb	r2, r3
 800ae16:	0008      	movs	r0, r1
 800ae18:	187b      	adds	r3, r7, r1
 800ae1a:	2103      	movs	r1, #3
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 3;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	00db      	lsls	r3, r3, #3
 800ae24:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	221f      	movs	r2, #31
 800ae2c:	4393      	bics	r3, r2
 800ae2e:	b2d9      	uxtb	r1, r3
 800ae30:	183b      	adds	r3, r7, r0
 800ae32:	183a      	adds	r2, r7, r0
 800ae34:	7812      	ldrb	r2, [r2, #0]
 800ae36:	188a      	adds	r2, r1, r2
 800ae38:	701a      	strb	r2, [r3, #0]
    wipSIDL = wipSIDL + 0x08;
 800ae3a:	183b      	adds	r3, r7, r0
 800ae3c:	0001      	movs	r1, r0
 800ae3e:	183a      	adds	r2, r7, r0
 800ae40:	7812      	ldrb	r2, [r2, #0]
 800ae42:	3208      	adds	r2, #8
 800ae44:	701a      	strb	r2, [r3, #0]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800ae46:	187b      	adds	r3, r7, r1
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2214      	movs	r2, #20
 800ae4c:	4393      	bics	r3, r2
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 800ae62:	e013      	b.n	800ae8c <convertCANid2Reg+0xb8>
    passedIdReg->tempEID8 = 0;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	015b      	lsls	r3, r3, #5
 800ae74:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	0a1b      	lsrs	r3, r3, #8
 800ae82:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	701a      	strb	r2, [r3, #0]
}
 800ae8c:	46c0      	nop			; (mov r8, r8)
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	b006      	add	sp, #24
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <MCP2515_CS_HIGH>:
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET)

void MCP2515_CS_HIGH(SPI_HandleTypeDef *SPI_CAN)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <MCP2515_CS_HIGH+0x34>)
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d106      	bne.n	800aeb2 <MCP2515_CS_HIGH+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_SET);
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <MCP2515_CS_HIGH+0x38>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	2140      	movs	r1, #64	; 0x40
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f7fb f9b0 	bl	8006210 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
}
 800aeb0:	e006      	b.n	800aec0 <MCP2515_CS_HIGH+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 800aeb2:	2380      	movs	r3, #128	; 0x80
 800aeb4:	015b      	lsls	r3, r3, #5
 800aeb6:	4805      	ldr	r0, [pc, #20]	; (800aecc <MCP2515_CS_HIGH+0x38>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	0019      	movs	r1, r3
 800aebc:	f7fb f9a8 	bl	8006210 <HAL_GPIO_WritePin>
}
 800aec0:	46c0      	nop			; (mov r8, r8)
 800aec2:	46bd      	mov	sp, r7
 800aec4:	b002      	add	sp, #8
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20000374 	.word	0x20000374
 800aecc:	48000400 	.word	0x48000400

0800aed0 <MCP2515_CS_LOW>:
void MCP2515_CS_LOW(SPI_HandleTypeDef *SPI_CAN)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <MCP2515_CS_LOW+0x34>)
 800aedc:	429a      	cmp	r2, r3
 800aede:	d106      	bne.n	800aeee <MCP2515_CS_LOW+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 800aee0:	4b09      	ldr	r3, [pc, #36]	; (800af08 <MCP2515_CS_LOW+0x38>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	2140      	movs	r1, #64	; 0x40
 800aee6:	0018      	movs	r0, r3
 800aee8:	f7fb f992 	bl	8006210 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
}
 800aeec:	e006      	b.n	800aefc <MCP2515_CS_LOW+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
 800aeee:	2380      	movs	r3, #128	; 0x80
 800aef0:	015b      	lsls	r3, r3, #5
 800aef2:	4805      	ldr	r0, [pc, #20]	; (800af08 <MCP2515_CS_LOW+0x38>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	0019      	movs	r1, r3
 800aef8:	f7fb f98a 	bl	8006210 <HAL_GPIO_WritePin>
}
 800aefc:	46c0      	nop			; (mov r8, r8)
 800aefe:	46bd      	mov	sp, r7
 800af00:	b002      	add	sp, #8
 800af02:	bd80      	pop	{r7, pc}
 800af04:	20000374 	.word	0x20000374
 800af08:	48000400 	.word	0x48000400

0800af0c <MCP2515_Initialize>:
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN);
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  MCP2515_CS_HIGH(SPI_CAN);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	0018      	movs	r0, r3
 800af18:	f7ff ffbc 	bl	800ae94 <MCP2515_CS_HIGH>
  
  uint8_t loop = 10;
 800af1c:	230f      	movs	r3, #15
 800af1e:	18fb      	adds	r3, r7, r3
 800af20:	220a      	movs	r2, #10
 800af22:	701a      	strb	r2, [r3, #0]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	0018      	movs	r0, r3
 800af28:	f7fd f816 	bl	8007f58 <HAL_SPI_GetState>
 800af2c:	0003      	movs	r3, r0
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <MCP2515_Initialize+0x2a>
      return true;
 800af32:	2301      	movs	r3, #1
 800af34:	e00a      	b.n	800af4c <MCP2515_Initialize+0x40>
    
    loop--;
 800af36:	210f      	movs	r1, #15
 800af38:	187b      	adds	r3, r7, r1
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	187b      	adds	r3, r7, r1
 800af3e:	3a01      	subs	r2, #1
 800af40:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 800af42:	187b      	adds	r3, r7, r1
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1ec      	bne.n	800af24 <MCP2515_Initialize+0x18>
      
  return false;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	0018      	movs	r0, r3
 800af4e:	46bd      	mov	sp, r7
 800af50:	b004      	add	sp, #16
 800af52:	bd80      	pop	{r7, pc}

0800af54 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(SPI_HandleTypeDef *SPI_CAN)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x80);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2280      	movs	r2, #128	; 0x80
 800af60:	210f      	movs	r1, #15
 800af62:	0018      	movs	r0, r3
 800af64:	f000 f89b 	bl	800b09e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800af68:	230f      	movs	r3, #15
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	220a      	movs	r2, #10
 800af6e:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x80)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	210e      	movs	r1, #14
 800af74:	0018      	movs	r0, r3
 800af76:	f000 f840 	bl	800affa <MCP2515_ReadByte>
 800af7a:	0003      	movs	r3, r0
 800af7c:	001a      	movs	r2, r3
 800af7e:	23e0      	movs	r3, #224	; 0xe0
 800af80:	4013      	ands	r3, r2
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	d101      	bne.n	800af8a <MCP2515_SetConfigMode+0x36>
      return true;
 800af86:	2301      	movs	r3, #1
 800af88:	e00a      	b.n	800afa0 <MCP2515_SetConfigMode+0x4c>
    
    loop--;
 800af8a:	210f      	movs	r1, #15
 800af8c:	187b      	adds	r3, r7, r1
 800af8e:	781a      	ldrb	r2, [r3, #0]
 800af90:	187b      	adds	r3, r7, r1
 800af92:	3a01      	subs	r2, #1
 800af94:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 800af96:	187b      	adds	r3, r7, r1
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e8      	bne.n	800af70 <MCP2515_SetConfigMode+0x1c>
  
  return false;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	0018      	movs	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	b004      	add	sp, #16
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(SPI_HandleTypeDef *SPI_CAN)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x00);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	210f      	movs	r1, #15
 800afb6:	0018      	movs	r0, r3
 800afb8:	f000 f871 	bl	800b09e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800afbc:	230f      	movs	r3, #15
 800afbe:	18fb      	adds	r3, r7, r3
 800afc0:	220a      	movs	r2, #10
 800afc2:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x00)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	210e      	movs	r1, #14
 800afc8:	0018      	movs	r0, r3
 800afca:	f000 f816 	bl	800affa <MCP2515_ReadByte>
 800afce:	0003      	movs	r3, r0
 800afd0:	001a      	movs	r2, r3
 800afd2:	23e0      	movs	r3, #224	; 0xe0
 800afd4:	4013      	ands	r3, r2
 800afd6:	d101      	bne.n	800afdc <MCP2515_SetNormalMode+0x34>
      return true;
 800afd8:	2301      	movs	r3, #1
 800afda:	e00a      	b.n	800aff2 <MCP2515_SetNormalMode+0x4a>
    
    loop--;
 800afdc:	210f      	movs	r1, #15
 800afde:	187b      	adds	r3, r7, r1
 800afe0:	781a      	ldrb	r2, [r3, #0]
 800afe2:	187b      	adds	r3, r7, r1
 800afe4:	3a01      	subs	r2, #1
 800afe6:	701a      	strb	r2, [r3, #0]
  } while(loop > 0);
 800afe8:	187b      	adds	r3, r7, r1
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e9      	bne.n	800afc4 <MCP2515_SetNormalMode+0x1c>
  
  return false;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	0018      	movs	r0, r3
 800aff4:	46bd      	mov	sp, r7
 800aff6:	b004      	add	sp, #16
 800aff8:	bd80      	pop	{r7, pc}

0800affa <MCP2515_ReadByte>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (SPI_HandleTypeDef *SPI_CAN, uint8_t address)
{
 800affa:	b5b0      	push	{r4, r5, r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	000a      	movs	r2, r1
 800b004:	1cfb      	adds	r3, r7, #3
 800b006:	701a      	strb	r2, [r3, #0]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	0018      	movs	r0, r3
 800b00c:	f7ff ff60 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2103      	movs	r1, #3
 800b014:	0018      	movs	r0, r3
 800b016:	f000 f965 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 800b01a:	1cfb      	adds	r3, r7, #3
 800b01c:	781a      	ldrb	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0011      	movs	r1, r2
 800b022:	0018      	movs	r0, r3
 800b024:	f000 f95e 	bl	800b2e4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 800b028:	250f      	movs	r5, #15
 800b02a:	197c      	adds	r4, r7, r5
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	0018      	movs	r0, r3
 800b030:	f000 f97c 	bl	800b32c <SPI_Rx>
 800b034:	0003      	movs	r3, r0
 800b036:	7023      	strb	r3, [r4, #0]
      
  MCP2515_CS_HIGH(SPI_CAN);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	0018      	movs	r0, r3
 800b03c:	f7ff ff2a 	bl	800ae94 <MCP2515_CS_HIGH>
  
  return retVal;
 800b040:	197b      	adds	r3, r7, r5
 800b042:	781b      	ldrb	r3, [r3, #0]
}
 800b044:	0018      	movs	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	b004      	add	sp, #16
 800b04a:	bdb0      	pop	{r4, r5, r7, pc}

0800b04c <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *data, uint8_t length)
{
 800b04c:	b5b0      	push	{r4, r5, r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	0008      	movs	r0, r1
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	0019      	movs	r1, r3
 800b05a:	240b      	movs	r4, #11
 800b05c:	193b      	adds	r3, r7, r4
 800b05e:	1c02      	adds	r2, r0, #0
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	250a      	movs	r5, #10
 800b064:	197b      	adds	r3, r7, r5
 800b066:	1c0a      	adds	r2, r1, #0
 800b068:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	0018      	movs	r0, r3
 800b06e:	f7ff ff2f 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 800b072:	193b      	adds	r3, r7, r4
 800b074:	781a      	ldrb	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	0011      	movs	r1, r2
 800b07a:	0018      	movs	r0, r3
 800b07c:	f000 f932 	bl	800b2e4 <SPI_Tx>
  SPI_RxBuffer(SPI_CAN, data, length);
 800b080:	197b      	adds	r3, r7, r5
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	0018      	movs	r0, r3
 800b08a:	f000 f960 	bl	800b34e <SPI_RxBuffer>
    
  MCP2515_CS_HIGH(SPI_CAN);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	0018      	movs	r0, r3
 800b092:	f7ff feff 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	46bd      	mov	sp, r7
 800b09a:	b004      	add	sp, #16
 800b09c:	bdb0      	pop	{r4, r5, r7, pc}

0800b09e <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t data)
{    
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b082      	sub	sp, #8
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	0008      	movs	r0, r1
 800b0a8:	0011      	movs	r1, r2
 800b0aa:	1cfb      	adds	r3, r7, #3
 800b0ac:	1c02      	adds	r2, r0, #0
 800b0ae:	701a      	strb	r2, [r3, #0]
 800b0b0:	1cbb      	adds	r3, r7, #2
 800b0b2:	1c0a      	adds	r2, r1, #0
 800b0b4:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	f7ff ff09 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2102      	movs	r1, #2
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f000 f90e 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 800b0c8:	1cfb      	adds	r3, r7, #3
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	0011      	movs	r1, r2
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f000 f907 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 800b0d6:	1cbb      	adds	r3, r7, #2
 800b0d8:	781a      	ldrb	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	0011      	movs	r1, r2
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f000 f900 	bl	800b2e4 <SPI_Tx>
    
  MCP2515_CS_HIGH(SPI_CAN);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	f7ff fed4 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b0ec:	46c0      	nop			; (mov r8, r8)
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	b002      	add	sp, #8
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800b0f4:	b5b0      	push	{r4, r5, r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	0008      	movs	r0, r1
 800b0fe:	0011      	movs	r1, r2
 800b100:	607b      	str	r3, [r7, #4]
 800b102:	240b      	movs	r4, #11
 800b104:	193b      	adds	r3, r7, r4
 800b106:	1c02      	adds	r2, r0, #0
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	250a      	movs	r5, #10
 800b10c:	197b      	adds	r3, r7, r5
 800b10e:	1c0a      	adds	r2, r1, #0
 800b110:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	0018      	movs	r0, r3
 800b116:	f7ff fedb 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2102      	movs	r1, #2
 800b11e:	0018      	movs	r0, r3
 800b120:	f000 f8e0 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, startAddress);
 800b124:	193b      	adds	r3, r7, r4
 800b126:	781a      	ldrb	r2, [r3, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	0011      	movs	r1, r2
 800b12c:	0018      	movs	r0, r3
 800b12e:	f000 f8d9 	bl	800b2e4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, (endAddress - startAddress + 1));
 800b132:	197a      	adds	r2, r7, r5
 800b134:	193b      	adds	r3, r7, r4
 800b136:	7812      	ldrb	r2, [r2, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	3301      	adds	r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	0018      	movs	r0, r3
 800b148:	f000 f8dd 	bl	800b306 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH(SPI_CAN);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	0018      	movs	r0, r3
 800b150:	f7ff fea0 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b154:	46c0      	nop			; (mov r8, r8)
 800b156:	46bd      	mov	sp, r7
 800b158:	b004      	add	sp, #16
 800b15a:	bdb0      	pop	{r4, r5, r7, pc}

0800b15c <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 800b15c:	b5b0      	push	{r4, r5, r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	0008      	movs	r0, r1
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	0019      	movs	r1, r3
 800b16a:	250b      	movs	r5, #11
 800b16c:	197b      	adds	r3, r7, r5
 800b16e:	1c02      	adds	r2, r0, #0
 800b170:	701a      	strb	r2, [r3, #0]
 800b172:	240a      	movs	r4, #10
 800b174:	193b      	adds	r3, r7, r4
 800b176:	1c0a      	adds	r2, r1, #0
 800b178:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	0018      	movs	r0, r3
 800b17e:	f7ff fea7 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 800b182:	197b      	adds	r3, r7, r5
 800b184:	781a      	ldrb	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	0011      	movs	r1, r2
 800b18a:	0018      	movs	r0, r3
 800b18c:	f000 f8aa 	bl	800b2e4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, idReg, 4);
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2204      	movs	r2, #4
 800b196:	0018      	movs	r0, r3
 800b198:	f000 f8b5 	bl	800b306 <SPI_TxBuffer>
  SPI_Tx(SPI_CAN, dlc);
 800b19c:	193b      	adds	r3, r7, r4
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	0011      	movs	r1, r2
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	f000 f89d 	bl	800b2e4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, dlc);
 800b1aa:	193b      	adds	r3, r7, r4
 800b1ac:	781a      	ldrb	r2, [r3, #0]
 800b1ae:	6a39      	ldr	r1, [r7, #32]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	0018      	movs	r0, r3
 800b1b4:	f000 f8a7 	bl	800b306 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH(SPI_CAN);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	f7ff fe6a 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b1c0:	46c0      	nop			; (mov r8, r8)
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b004      	add	sp, #16
 800b1c6:	bdb0      	pop	{r4, r5, r7, pc}

0800b1c8 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	000a      	movs	r2, r1
 800b1d2:	1cfb      	adds	r3, r7, #3
 800b1d4:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f7ff fe79 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 800b1de:	1cfb      	adds	r3, r7, #3
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	0011      	movs	r1, r2
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	f000 f87c 	bl	800b2e4 <SPI_Tx>
      
  MCP2515_CS_HIGH(SPI_CAN);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f7ff fe50 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b1f4:	46c0      	nop			; (mov r8, r8)
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	b002      	add	sp, #8
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(SPI_HandleTypeDef *SPI_CAN)
{
 800b1fc:	b5b0      	push	{r4, r5, r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	0018      	movs	r0, r3
 800b208:	f7ff fe62 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ_STATUS);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	21a0      	movs	r1, #160	; 0xa0
 800b210:	0018      	movs	r0, r3
 800b212:	f000 f867 	bl	800b2e4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 800b216:	250f      	movs	r5, #15
 800b218:	197c      	adds	r4, r7, r5
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	0018      	movs	r0, r3
 800b21e:	f000 f885 	bl	800b32c <SPI_Rx>
 800b222:	0003      	movs	r3, r0
 800b224:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	0018      	movs	r0, r3
 800b22a:	f7ff fe33 	bl	800ae94 <MCP2515_CS_HIGH>
  
  return retVal;
 800b22e:	197b      	adds	r3, r7, r5
 800b230:	781b      	ldrb	r3, [r3, #0]
}
 800b232:	0018      	movs	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	b004      	add	sp, #16
 800b238:	bdb0      	pop	{r4, r5, r7, pc}

0800b23a <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(SPI_HandleTypeDef *SPI_CAN)
{
 800b23a:	b5b0      	push	{r4, r5, r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	0018      	movs	r0, r3
 800b246:	f7ff fe43 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_RX_STATUS);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	21b0      	movs	r1, #176	; 0xb0
 800b24e:	0018      	movs	r0, r3
 800b250:	f000 f848 	bl	800b2e4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 800b254:	250f      	movs	r5, #15
 800b256:	197c      	adds	r4, r7, r5
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	0018      	movs	r0, r3
 800b25c:	f000 f866 	bl	800b32c <SPI_Rx>
 800b260:	0003      	movs	r3, r0
 800b262:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	0018      	movs	r0, r3
 800b268:	f7ff fe14 	bl	800ae94 <MCP2515_CS_HIGH>
  
  return retVal;
 800b26c:	197b      	adds	r3, r7, r5
 800b26e:	781b      	ldrb	r3, [r3, #0]
}
 800b270:	0018      	movs	r0, r3
 800b272:	46bd      	mov	sp, r7
 800b274:	b004      	add	sp, #16
 800b276:	bdb0      	pop	{r4, r5, r7, pc}

0800b278 <MCP2515_BitModify>:

/* 레지스터 값 변경 */
void MCP2515_BitModify(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t mask, uint8_t data)
{    
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	000c      	movs	r4, r1
 800b282:	0010      	movs	r0, r2
 800b284:	0019      	movs	r1, r3
 800b286:	1cfb      	adds	r3, r7, #3
 800b288:	1c22      	adds	r2, r4, #0
 800b28a:	701a      	strb	r2, [r3, #0]
 800b28c:	1cbb      	adds	r3, r7, #2
 800b28e:	1c02      	adds	r2, r0, #0
 800b290:	701a      	strb	r2, [r3, #0]
 800b292:	1c7b      	adds	r3, r7, #1
 800b294:	1c0a      	adds	r2, r1, #0
 800b296:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	0018      	movs	r0, r3
 800b29c:	f7ff fe18 	bl	800aed0 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_BIT_MOD);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2105      	movs	r1, #5
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f000 f81d 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 800b2aa:	1cfb      	adds	r3, r7, #3
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	0011      	movs	r1, r2
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f000 f816 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, mask);
 800b2b8:	1cbb      	adds	r3, r7, #2
 800b2ba:	781a      	ldrb	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	0011      	movs	r1, r2
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f000 f80f 	bl	800b2e4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 800b2c6:	1c7b      	adds	r3, r7, #1
 800b2c8:	781a      	ldrb	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	0011      	movs	r1, r2
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f000 f808 	bl	800b2e4 <SPI_Tx>
        
  MCP2515_CS_HIGH(SPI_CAN);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	f7ff fddc 	bl	800ae94 <MCP2515_CS_HIGH>
}
 800b2dc:	46c0      	nop			; (mov r8, r8)
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	b003      	add	sp, #12
 800b2e2:	bd90      	pop	{r4, r7, pc}

0800b2e4 <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(SPI_HandleTypeDef *SPI_CAN, uint8_t data)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	000a      	movs	r2, r1
 800b2ee:	1cfb      	adds	r3, r7, #3
 800b2f0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 800b2f2:	1cf9      	adds	r1, r7, #3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	230a      	movs	r3, #10
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f7fc f9b7 	bl	800766c <HAL_SPI_Transmit>
}
 800b2fe:	46c0      	nop			; (mov r8, r8)
 800b300:	46bd      	mov	sp, r7
 800b302:	b002      	add	sp, #8
 800b304:	bd80      	pop	{r7, pc}

0800b306 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	1dfb      	adds	r3, r7, #7
 800b312:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 800b314:	1dfb      	adds	r3, r7, #7
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	b29a      	uxth	r2, r3
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	230a      	movs	r3, #10
 800b320:	f7fc f9a4 	bl	800766c <HAL_SPI_Transmit>
}
 800b324:	46c0      	nop			; (mov r8, r8)
 800b326:	46bd      	mov	sp, r7
 800b328:	b004      	add	sp, #16
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN)
{
 800b32c:	b590      	push	{r4, r7, lr}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800b334:	240f      	movs	r4, #15
 800b336:	1939      	adds	r1, r7, r4
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	230a      	movs	r3, #10
 800b33c:	2201      	movs	r2, #1
 800b33e:	f7fc faed 	bl	800791c <HAL_SPI_Receive>
  return retVal;
 800b342:	193b      	adds	r3, r7, r4
 800b344:	781b      	ldrb	r3, [r3, #0]
}
 800b346:	0018      	movs	r0, r3
 800b348:	46bd      	mov	sp, r7
 800b34a:	b005      	add	sp, #20
 800b34c:	bd90      	pop	{r4, r7, pc}

0800b34e <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	1dfb      	adds	r3, r7, #7
 800b35a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800b35c:	1dfb      	adds	r3, r7, #7
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	b29a      	uxth	r2, r3
 800b362:	68b9      	ldr	r1, [r7, #8]
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	230a      	movs	r3, #10
 800b368:	f7fc fad8 	bl	800791c <HAL_SPI_Receive>
}
 800b36c:	46c0      	nop			; (mov r8, r8)
 800b36e:	46bd      	mov	sp, r7
 800b370:	b004      	add	sp, #16
 800b372:	bd80      	pop	{r7, pc}

0800b374 <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800b374:	b5b0      	push	{r4, r5, r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af02      	add	r7, sp, #8
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	000c      	movs	r4, r1
 800b37e:	0010      	movs	r0, r2
 800b380:	0019      	movs	r1, r3
 800b382:	250a      	movs	r5, #10
 800b384:	197b      	adds	r3, r7, r5
 800b386:	1c22      	adds	r2, r4, #0
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	2408      	movs	r4, #8
 800b38c:	193b      	adds	r3, r7, r4
 800b38e:	1c02      	adds	r2, r0, #0
 800b390:	801a      	strh	r2, [r3, #0]
 800b392:	1dbb      	adds	r3, r7, #6
 800b394:	1c0a      	adds	r2, r1, #0
 800b396:	801a      	strh	r2, [r3, #0]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800b398:	2016      	movs	r0, #22
 800b39a:	183b      	adds	r3, r7, r0
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	2192      	movs	r1, #146	; 0x92
 800b3a0:	5c52      	ldrb	r2, [r2, r1]
 800b3a2:	701a      	strb	r2, [r3, #0]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800b3a4:	183b      	adds	r3, r7, r0
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	425a      	negs	r2, r3
 800b3aa:	4153      	adcs	r3, r2
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	2315      	movs	r3, #21
 800b3b0:	18fb      	adds	r3, r7, r3
 800b3b2:	701a      	strb	r2, [r3, #0]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800b3b4:	0029      	movs	r1, r5
 800b3b6:	187a      	adds	r2, r7, r1
 800b3b8:	1dbb      	adds	r3, r7, #6
 800b3ba:	8812      	ldrh	r2, [r2, #0]
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	18d3      	adds	r3, r2, r3
 800b3c0:	b29d      	uxth	r5, r3
 800b3c2:	193b      	adds	r3, r7, r4
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	193a      	adds	r2, r7, r4
 800b3cc:	8814      	ldrh	r4, [r2, #0]
 800b3ce:	187a      	adds	r2, r7, r1
 800b3d0:	8811      	ldrh	r1, [r2, #0]
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	002b      	movs	r3, r5
 800b3d8:	0022      	movs	r2, r4
 800b3da:	f001 fb09 	bl	800c9f0 <u8g2_IsIntersection>
 800b3de:	1e03      	subs	r3, r0, #0
 800b3e0:	d05d      	beq.n	800b49e <u8g2_DrawHorizontalBitmap+0x12a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 800b3e2:	2317      	movs	r3, #23
 800b3e4:	18fb      	adds	r3, r7, r3
 800b3e6:	2280      	movs	r2, #128	; 0x80
 800b3e8:	701a      	strb	r2, [r3, #0]
  while(len > 0)
 800b3ea:	e04d      	b.n	800b488 <u8g2_DrawHorizontalBitmap+0x114>
  {
    if ( *b & mask ) {
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2217      	movs	r2, #23
 800b3f2:	18ba      	adds	r2, r7, r2
 800b3f4:	7812      	ldrb	r2, [r2, #0]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d012      	beq.n	800b424 <u8g2_DrawHorizontalBitmap+0xb0>
      u8g2->draw_color = color;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2216      	movs	r2, #22
 800b402:	18ba      	adds	r2, r7, r2
 800b404:	2192      	movs	r1, #146	; 0x92
 800b406:	7812      	ldrb	r2, [r2, #0]
 800b408:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800b40a:	2308      	movs	r3, #8
 800b40c:	18fb      	adds	r3, r7, r3
 800b40e:	881a      	ldrh	r2, [r3, #0]
 800b410:	230a      	movs	r3, #10
 800b412:	18fb      	adds	r3, r7, r3
 800b414:	8819      	ldrh	r1, [r3, #0]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	2300      	movs	r3, #0
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	2301      	movs	r3, #1
 800b41e:	f001 f9be 	bl	800c79e <u8g2_DrawHVLine>
 800b422:	e016      	b.n	800b452 <u8g2_DrawHorizontalBitmap+0xde>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2291      	movs	r2, #145	; 0x91
 800b428:	5c9b      	ldrb	r3, [r3, r2]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d111      	bne.n	800b452 <u8g2_DrawHorizontalBitmap+0xde>
      u8g2->draw_color = ncolor;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2215      	movs	r2, #21
 800b432:	18ba      	adds	r2, r7, r2
 800b434:	2192      	movs	r1, #146	; 0x92
 800b436:	7812      	ldrb	r2, [r2, #0]
 800b438:	545a      	strb	r2, [r3, r1]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800b43a:	2308      	movs	r3, #8
 800b43c:	18fb      	adds	r3, r7, r3
 800b43e:	881a      	ldrh	r2, [r3, #0]
 800b440:	230a      	movs	r3, #10
 800b442:	18fb      	adds	r3, r7, r3
 800b444:	8819      	ldrh	r1, [r3, #0]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	2300      	movs	r3, #0
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2301      	movs	r3, #1
 800b44e:	f001 f9a6 	bl	800c79e <u8g2_DrawHVLine>
    }

    x++;
 800b452:	210a      	movs	r1, #10
 800b454:	187b      	adds	r3, r7, r1
 800b456:	881a      	ldrh	r2, [r3, #0]
 800b458:	187b      	adds	r3, r7, r1
 800b45a:	3201      	adds	r2, #1
 800b45c:	801a      	strh	r2, [r3, #0]
    mask >>= 1;
 800b45e:	2117      	movs	r1, #23
 800b460:	187b      	adds	r3, r7, r1
 800b462:	187a      	adds	r2, r7, r1
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	0852      	lsrs	r2, r2, #1
 800b468:	701a      	strb	r2, [r3, #0]
    if ( mask == 0 )
 800b46a:	187b      	adds	r3, r7, r1
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <u8g2_DrawHorizontalBitmap+0x10a>
    {
      mask = 128;
 800b472:	187b      	adds	r3, r7, r1
 800b474:	2280      	movs	r2, #128	; 0x80
 800b476:	701a      	strb	r2, [r3, #0]
      b++;
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	3301      	adds	r3, #1
 800b47c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    len--;
 800b47e:	1dbb      	adds	r3, r7, #6
 800b480:	881a      	ldrh	r2, [r3, #0]
 800b482:	1dbb      	adds	r3, r7, #6
 800b484:	3a01      	subs	r2, #1
 800b486:	801a      	strh	r2, [r3, #0]
  while(len > 0)
 800b488:	1dbb      	adds	r3, r7, #6
 800b48a:	881b      	ldrh	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1ad      	bne.n	800b3ec <u8g2_DrawHorizontalBitmap+0x78>
  }
  u8g2->draw_color = color;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2216      	movs	r2, #22
 800b494:	18ba      	adds	r2, r7, r2
 800b496:	2192      	movs	r1, #146	; 0x92
 800b498:	7812      	ldrb	r2, [r2, #0]
 800b49a:	545a      	strb	r2, [r3, r1]
 800b49c:	e000      	b.n	800b4a0 <u8g2_DrawHorizontalBitmap+0x12c>
    return;
 800b49e:	46c0      	nop			; (mov r8, r8)
}
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	b006      	add	sp, #24
 800b4a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b4a6 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 800b4a6:	b5b0      	push	{r4, r5, r7, lr}
 800b4a8:	b088      	sub	sp, #32
 800b4aa:	af02      	add	r7, sp, #8
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	000c      	movs	r4, r1
 800b4b0:	0010      	movs	r0, r2
 800b4b2:	0019      	movs	r1, r3
 800b4b4:	250a      	movs	r5, #10
 800b4b6:	197b      	adds	r3, r7, r5
 800b4b8:	1c22      	adds	r2, r4, #0
 800b4ba:	801a      	strh	r2, [r3, #0]
 800b4bc:	2408      	movs	r4, #8
 800b4be:	193b      	adds	r3, r7, r4
 800b4c0:	1c02      	adds	r2, r0, #0
 800b4c2:	801a      	strh	r2, [r3, #0]
 800b4c4:	1dbb      	adds	r3, r7, #6
 800b4c6:	1c0a      	adds	r2, r1, #0
 800b4c8:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t w;
  w = cnt;
 800b4ca:	2116      	movs	r1, #22
 800b4cc:	187b      	adds	r3, r7, r1
 800b4ce:	1dba      	adds	r2, r7, #6
 800b4d0:	8812      	ldrh	r2, [r2, #0]
 800b4d2:	801a      	strh	r2, [r3, #0]
  w *= 8;
 800b4d4:	187b      	adds	r3, r7, r1
 800b4d6:	187a      	adds	r2, r7, r1
 800b4d8:	8812      	ldrh	r2, [r2, #0]
 800b4da:	00d2      	lsls	r2, r2, #3
 800b4dc:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800b4de:	0028      	movs	r0, r5
 800b4e0:	183a      	adds	r2, r7, r0
 800b4e2:	187b      	adds	r3, r7, r1
 800b4e4:	8812      	ldrh	r2, [r2, #0]
 800b4e6:	881b      	ldrh	r3, [r3, #0]
 800b4e8:	18d3      	adds	r3, r2, r3
 800b4ea:	b29d      	uxth	r5, r3
 800b4ec:	193a      	adds	r2, r7, r4
 800b4ee:	2328      	movs	r3, #40	; 0x28
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	8812      	ldrh	r2, [r2, #0]
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	18d3      	adds	r3, r2, r3
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	193a      	adds	r2, r7, r4
 800b4fc:	8814      	ldrh	r4, [r2, #0]
 800b4fe:	183a      	adds	r2, r7, r0
 800b500:	8811      	ldrh	r1, [r2, #0]
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	002b      	movs	r3, r5
 800b508:	0022      	movs	r2, r4
 800b50a:	f001 fa71 	bl	800c9f0 <u8g2_IsIntersection>
 800b50e:	1e03      	subs	r3, r0, #0
 800b510:	d025      	beq.n	800b55e <u8g2_DrawBitmap+0xb8>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800b512:	e01e      	b.n	800b552 <u8g2_DrawBitmap+0xac>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 800b514:	2316      	movs	r3, #22
 800b516:	18fb      	adds	r3, r7, r3
 800b518:	881c      	ldrh	r4, [r3, #0]
 800b51a:	2508      	movs	r5, #8
 800b51c:	197b      	adds	r3, r7, r5
 800b51e:	881a      	ldrh	r2, [r3, #0]
 800b520:	230a      	movs	r3, #10
 800b522:	18fb      	adds	r3, r7, r3
 800b524:	8819      	ldrh	r1, [r3, #0]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	0023      	movs	r3, r4
 800b52e:	f7ff ff21 	bl	800b374 <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 800b532:	1dbb      	adds	r3, r7, #6
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b538:	18d3      	adds	r3, r2, r3
 800b53a:	62fb      	str	r3, [r7, #44]	; 0x2c
    y++;
 800b53c:	197b      	adds	r3, r7, r5
 800b53e:	881a      	ldrh	r2, [r3, #0]
 800b540:	197b      	adds	r3, r7, r5
 800b542:	3201      	adds	r2, #1
 800b544:	801a      	strh	r2, [r3, #0]
    h--;
 800b546:	2128      	movs	r1, #40	; 0x28
 800b548:	187b      	adds	r3, r7, r1
 800b54a:	881a      	ldrh	r2, [r3, #0]
 800b54c:	187b      	adds	r3, r7, r1
 800b54e:	3a01      	subs	r2, #1
 800b550:	801a      	strh	r2, [r3, #0]
  while( h > 0 )
 800b552:	2328      	movs	r3, #40	; 0x28
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	881b      	ldrh	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1db      	bne.n	800b514 <u8g2_DrawBitmap+0x6e>
 800b55c:	e000      	b.n	800b560 <u8g2_DrawBitmap+0xba>
    return;
 800b55e:	46c0      	nop			; (mov r8, r8)
  }
}
 800b560:	46bd      	mov	sp, r7
 800b562:	b006      	add	sp, #24
 800b564:	bdb0      	pop	{r4, r5, r7, pc}

0800b566 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	7c1b      	ldrb	r3, [r3, #16]
 800b574:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2238      	movs	r2, #56	; 0x38
 800b57a:	5c9b      	ldrb	r3, [r3, r2]
 800b57c:	001a      	movs	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	4353      	muls	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	2100      	movs	r1, #0
 800b592:	0018      	movs	r0, r3
 800b594:	f005 ff52 	bl	801143c <memset>
}
 800b598:	46c0      	nop			; (mov r8, r8)
 800b59a:	46bd      	mov	sp, r7
 800b59c:	b004      	add	sp, #16
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800b5a0:	b590      	push	{r4, r7, lr}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	0008      	movs	r0, r1
 800b5aa:	0011      	movs	r1, r2
 800b5ac:	1cfb      	adds	r3, r7, #3
 800b5ae:	1c02      	adds	r2, r0, #0
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	1cbb      	adds	r3, r7, #2
 800b5b4:	1c0a      	adds	r2, r1, #0
 800b5b6:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	240f      	movs	r4, #15
 800b5be:	193b      	adds	r3, r7, r4
 800b5c0:	7c12      	ldrb	r2, [r2, #16]
 800b5c2:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 800b5c4:	210c      	movs	r1, #12
 800b5c6:	187b      	adds	r3, r7, r1
 800b5c8:	1cfa      	adds	r2, r7, #3
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800b5d4:	193b      	adds	r3, r7, r4
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	187b      	adds	r3, r7, r1
 800b5dc:	0008      	movs	r0, r1
 800b5de:	1879      	adds	r1, r7, r1
 800b5e0:	8809      	ldrh	r1, [r1, #0]
 800b5e2:	434a      	muls	r2, r1
 800b5e4:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 800b5e6:	0001      	movs	r1, r0
 800b5e8:	187b      	adds	r3, r7, r1
 800b5ea:	187a      	adds	r2, r7, r1
 800b5ec:	8812      	ldrh	r2, [r2, #0]
 800b5ee:	00d2      	lsls	r2, r2, #3
 800b5f0:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 800b5f2:	187b      	adds	r3, r7, r1
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	18d3      	adds	r3, r2, r3
 800b5fa:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800b5fc:	193b      	adds	r3, r7, r4
 800b5fe:	7819      	ldrb	r1, [r3, #0]
 800b600:	1cbb      	adds	r3, r7, #2
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	000b      	movs	r3, r1
 800b60c:	2100      	movs	r1, #0
 800b60e:	f002 f8ff 	bl	800d810 <u8x8_DrawTile>
}
 800b612:	46c0      	nop			; (mov r8, r8)
 800b614:	46bd      	mov	sp, r7
 800b616:	b005      	add	sp, #20
 800b618:	bd90      	pop	{r4, r7, pc}

0800b61a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800b61a:	b5b0      	push	{r4, r5, r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800b622:	230f      	movs	r3, #15
 800b624:	18fb      	adds	r3, r7, r3
 800b626:	2200      	movs	r2, #0
 800b628:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 800b62a:	230d      	movs	r3, #13
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	2138      	movs	r1, #56	; 0x38
 800b632:	5c52      	ldrb	r2, [r2, r1]
 800b634:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 800b636:	230e      	movs	r3, #14
 800b638:	18fb      	adds	r3, r7, r3
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	2139      	movs	r1, #57	; 0x39
 800b63e:	5c52      	ldrb	r2, [r2, r1]
 800b640:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	230c      	movs	r3, #12
 800b648:	18fb      	adds	r3, r7, r3
 800b64a:	7c52      	ldrb	r2, [r2, #17]
 800b64c:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800b64e:	250e      	movs	r5, #14
 800b650:	197b      	adds	r3, r7, r5
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	240f      	movs	r4, #15
 800b656:	193b      	adds	r3, r7, r4
 800b658:	7819      	ldrb	r1, [r3, #0]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	0018      	movs	r0, r3
 800b65e:	f7ff ff9f 	bl	800b5a0 <u8g2_send_tile_row>
    src_row++;
 800b662:	0021      	movs	r1, r4
 800b664:	187b      	adds	r3, r7, r1
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	187b      	adds	r3, r7, r1
 800b66a:	3201      	adds	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
    dest_row++;
 800b66e:	197b      	adds	r3, r7, r5
 800b670:	781a      	ldrb	r2, [r3, #0]
 800b672:	197b      	adds	r3, r7, r5
 800b674:	3201      	adds	r2, #1
 800b676:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 800b678:	187a      	adds	r2, r7, r1
 800b67a:	230d      	movs	r3, #13
 800b67c:	18fb      	adds	r3, r7, r3
 800b67e:	7812      	ldrb	r2, [r2, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	429a      	cmp	r2, r3
 800b684:	d206      	bcs.n	800b694 <u8g2_send_buffer+0x7a>
 800b686:	197a      	adds	r2, r7, r5
 800b688:	230c      	movs	r3, #12
 800b68a:	18fb      	adds	r3, r7, r3
 800b68c:	7812      	ldrb	r2, [r2, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d3dc      	bcc.n	800b64e <u8g2_send_buffer+0x34>
}
 800b694:	46c0      	nop			; (mov r8, r8)
 800b696:	46bd      	mov	sp, r7
 800b698:	b004      	add	sp, #16
 800b69a:	bdb0      	pop	{r4, r5, r7, pc}

0800b69c <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	000a      	movs	r2, r1
 800b6a6:	1cfb      	adds	r3, r7, #3
 800b6a8:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = row;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	1cfa      	adds	r2, r7, #3
 800b6ae:	2139      	movs	r1, #57	; 0x39
 800b6b0:	7812      	ldrb	r2, [r2, #0]
 800b6b2:	545a      	strb	r2, [r3, r1]
  u8g2->cb->update_dimension(u8g2);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	0010      	movs	r0, r2
 800b6be:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	0010      	movs	r0, r2
 800b6ca:	4798      	blx	r3
}
 800b6cc:	46c0      	nop			; (mov r8, r8)
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	b002      	add	sp, #8
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2293      	movs	r2, #147	; 0x93
 800b6e0:	5c9b      	ldrb	r3, [r3, r2]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <u8g2_FirstPage+0x1a>
  {
    u8g2_ClearBuffer(u8g2);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7ff ff3c 	bl	800b566 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f7ff ffd2 	bl	800b69c <u8g2_SetBufferCurrTileRow>
}
 800b6f8:	46c0      	nop			; (mov r8, r8)
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	b002      	add	sp, #8
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7ff ff85 	bl	800b61a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800b710:	200f      	movs	r0, #15
 800b712:	183b      	adds	r3, r7, r0
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	2139      	movs	r1, #57	; 0x39
 800b718:	5c52      	ldrb	r2, [r2, r1]
 800b71a:	701a      	strb	r2, [r3, #0]
  row += u8g2->tile_buf_height;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2238      	movs	r2, #56	; 0x38
 800b720:	5c99      	ldrb	r1, [r3, r2]
 800b722:	183b      	adds	r3, r7, r0
 800b724:	183a      	adds	r2, r7, r0
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	188a      	adds	r2, r1, r2
 800b72a:	701a      	strb	r2, [r3, #0]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	7c5b      	ldrb	r3, [r3, #17]
 800b732:	183a      	adds	r2, r7, r0
 800b734:	7812      	ldrb	r2, [r2, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d305      	bcc.n	800b746 <u8g2_NextPage+0x46>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	0018      	movs	r0, r3
 800b73e:	f002 f8c4 	bl	800d8ca <u8x8_RefreshDisplay>
    return 0;
 800b742:	2300      	movs	r3, #0
 800b744:	e011      	b.n	800b76a <u8g2_NextPage+0x6a>
  }
  if ( u8g2->is_auto_page_clear )
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2293      	movs	r2, #147	; 0x93
 800b74a:	5c9b      	ldrb	r3, [r3, r2]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <u8g2_NextPage+0x58>
  {
    u8g2_ClearBuffer(u8g2);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	0018      	movs	r0, r3
 800b754:	f7ff ff07 	bl	800b566 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800b758:	230f      	movs	r3, #15
 800b75a:	18fb      	adds	r3, r7, r3
 800b75c:	781a      	ldrb	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	0011      	movs	r1, r2
 800b762:	0018      	movs	r0, r3
 800b764:	f7ff ff9a 	bl	800b69c <u8g2_SetBufferCurrTileRow>
  return 1;
 800b768:	2301      	movs	r3, #1
}
 800b76a:	0018      	movs	r0, r3
 800b76c:	46bd      	mov	sp, r7
 800b76e:	b004      	add	sp, #16
 800b770:	bd80      	pop	{r7, pc}
	...

0800b774 <u8g2_m_16_8_2>:
  *page_cnt = 1;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_2(uint8_t *page_cnt)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	701a      	strb	r2, [r3, #0]
  return buf;
 800b782:	4b02      	ldr	r3, [pc, #8]	; (800b78c <u8g2_m_16_8_2+0x18>)
  #endif
}
 800b784:	0018      	movs	r0, r3
 800b786:	46bd      	mov	sp, r7
 800b788:	b002      	add	sp, #8
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	200006dc 	.word	0x200006dc

0800b790 <u8g2_Setup_ssd1306_i2c_128x64_noname_2>:
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b089      	sub	sp, #36	; 0x24
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800b79e:	687c      	ldr	r4, [r7, #4]
 800b7a0:	4a0e      	ldr	r2, [pc, #56]	; (800b7dc <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x4c>)
 800b7a2:	490f      	ldr	r1, [pc, #60]	; (800b7e0 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x50>)
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	0023      	movs	r3, r4
 800b7ac:	f002 f8f6 	bl	800d99c <u8x8_Setup>
  buf = u8g2_m_16_8_2(&tile_buf_height);
 800b7b0:	2413      	movs	r4, #19
 800b7b2:	193b      	adds	r3, r7, r4
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f7ff ffdd 	bl	800b774 <u8g2_m_16_8_2>
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800b7be:	193b      	adds	r3, r7, r4
 800b7c0:	781a      	ldrb	r2, [r3, #0]
 800b7c2:	4c08      	ldr	r4, [pc, #32]	; (800b7e4 <u8g2_Setup_ssd1306_i2c_128x64_noname_2+0x54>)
 800b7c4:	6979      	ldr	r1, [r7, #20]
 800b7c6:	68f8      	ldr	r0, [r7, #12]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	0023      	movs	r3, r4
 800b7ce:	f001 fb67 	bl	800cea0 <u8g2_SetupBuffer>
}
 800b7d2:	46c0      	nop			; (mov r8, r8)
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b007      	add	sp, #28
 800b7d8:	bd90      	pop	{r4, r7, pc}
 800b7da:	46c0      	nop			; (mov r8, r8)
 800b7dc:	0800d411 	.word	0x0800d411
 800b7e0:	0800d6ed 	.word	0x0800d6ed
 800b7e4:	0800cca5 	.word	0x0800cca5

0800b7e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	000a      	movs	r2, r1
 800b7f2:	1cfb      	adds	r3, r7, #3
 800b7f4:	701a      	strb	r2, [r3, #0]
  font += offset;
 800b7f6:	1cfb      	adds	r3, r7, #3
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	18d3      	adds	r3, r2, r3
 800b7fe:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	781b      	ldrb	r3, [r3, #0]
}
 800b804:	0018      	movs	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	b002      	add	sp, #8
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	000a      	movs	r2, r1
 800b816:	1cfb      	adds	r3, r7, #3
 800b818:	701a      	strb	r2, [r3, #0]
    uint16_t pos;
    font += offset;
 800b81a:	1cfb      	adds	r3, r7, #3
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	18d3      	adds	r3, r2, r3
 800b822:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	200e      	movs	r0, #14
 800b82a:	183b      	adds	r3, r7, r0
 800b82c:	801a      	strh	r2, [r3, #0]
    font++;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3301      	adds	r3, #1
 800b832:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800b834:	183b      	adds	r3, r7, r0
 800b836:	183a      	adds	r2, r7, r0
 800b838:	8812      	ldrh	r2, [r2, #0]
 800b83a:	0212      	lsls	r2, r2, #8
 800b83c:	801a      	strh	r2, [r3, #0]
    pos += u8x8_pgm_read( font);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	b299      	uxth	r1, r3
 800b844:	183b      	adds	r3, r7, r0
 800b846:	183a      	adds	r2, r7, r0
 800b848:	8812      	ldrh	r2, [r2, #0]
 800b84a:	188a      	adds	r2, r1, r2
 800b84c:	801a      	strh	r2, [r3, #0]
    return pos;
 800b84e:	183b      	adds	r3, r7, r0
 800b850:	881b      	ldrh	r3, [r3, #0]
}
 800b852:	0018      	movs	r0, r3
 800b854:	46bd      	mov	sp, r7
 800b856:	b004      	add	sp, #16
 800b858:	bd80      	pop	{r7, pc}

0800b85a <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	2100      	movs	r1, #0
 800b868:	0018      	movs	r0, r3
 800b86a:	f7ff ffbd 	bl	800b7e8 <u8g2_font_get_byte>
 800b86e:	0003      	movs	r3, r0
 800b870:	001a      	movs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2101      	movs	r1, #1
 800b87a:	0018      	movs	r0, r3
 800b87c:	f7ff ffb4 	bl	800b7e8 <u8g2_font_get_byte>
 800b880:	0003      	movs	r3, r0
 800b882:	001a      	movs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2102      	movs	r1, #2
 800b88c:	0018      	movs	r0, r3
 800b88e:	f7ff ffab 	bl	800b7e8 <u8g2_font_get_byte>
 800b892:	0003      	movs	r3, r0
 800b894:	001a      	movs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2103      	movs	r1, #3
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f7ff ffa2 	bl	800b7e8 <u8g2_font_get_byte>
 800b8a4:	0003      	movs	r3, r0
 800b8a6:	001a      	movs	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2104      	movs	r1, #4
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f7ff ff99 	bl	800b7e8 <u8g2_font_get_byte>
 800b8b6:	0003      	movs	r3, r0
 800b8b8:	001a      	movs	r2, r3
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2105      	movs	r1, #5
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f7ff ff90 	bl	800b7e8 <u8g2_font_get_byte>
 800b8c8:	0003      	movs	r3, r0
 800b8ca:	001a      	movs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2106      	movs	r1, #6
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f7ff ff87 	bl	800b7e8 <u8g2_font_get_byte>
 800b8da:	0003      	movs	r3, r0
 800b8dc:	001a      	movs	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2107      	movs	r1, #7
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f7ff ff7e 	bl	800b7e8 <u8g2_font_get_byte>
 800b8ec:	0003      	movs	r3, r0
 800b8ee:	001a      	movs	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	2108      	movs	r1, #8
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f7ff ff75 	bl	800b7e8 <u8g2_font_get_byte>
 800b8fe:	0003      	movs	r3, r0
 800b900:	001a      	movs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2109      	movs	r1, #9
 800b90a:	0018      	movs	r0, r3
 800b90c:	f7ff ff6c 	bl	800b7e8 <u8g2_font_get_byte>
 800b910:	0003      	movs	r3, r0
 800b912:	b25a      	sxtb	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	210a      	movs	r1, #10
 800b91c:	0018      	movs	r0, r3
 800b91e:	f7ff ff63 	bl	800b7e8 <u8g2_font_get_byte>
 800b922:	0003      	movs	r3, r0
 800b924:	b25a      	sxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	210b      	movs	r1, #11
 800b92e:	0018      	movs	r0, r3
 800b930:	f7ff ff5a 	bl	800b7e8 <u8g2_font_get_byte>
 800b934:	0003      	movs	r3, r0
 800b936:	b25a      	sxtb	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	210c      	movs	r1, #12
 800b940:	0018      	movs	r0, r3
 800b942:	f7ff ff51 	bl	800b7e8 <u8g2_font_get_byte>
 800b946:	0003      	movs	r3, r0
 800b948:	b25a      	sxtb	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	210d      	movs	r1, #13
 800b952:	0018      	movs	r0, r3
 800b954:	f7ff ff48 	bl	800b7e8 <u8g2_font_get_byte>
 800b958:	0003      	movs	r3, r0
 800b95a:	b25a      	sxtb	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	210e      	movs	r1, #14
 800b964:	0018      	movs	r0, r3
 800b966:	f7ff ff3f 	bl	800b7e8 <u8g2_font_get_byte>
 800b96a:	0003      	movs	r3, r0
 800b96c:	b25a      	sxtb	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	210f      	movs	r1, #15
 800b976:	0018      	movs	r0, r3
 800b978:	f7ff ff36 	bl	800b7e8 <u8g2_font_get_byte>
 800b97c:	0003      	movs	r3, r0
 800b97e:	b25a      	sxtb	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	2110      	movs	r1, #16
 800b988:	0018      	movs	r0, r3
 800b98a:	f7ff ff2d 	bl	800b7e8 <u8g2_font_get_byte>
 800b98e:	0003      	movs	r3, r0
 800b990:	b25a      	sxtb	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2111      	movs	r1, #17
 800b99a:	0018      	movs	r0, r3
 800b99c:	f7ff ff36 	bl	800b80c <u8g2_font_get_word>
 800b9a0:	0003      	movs	r3, r0
 800b9a2:	001a      	movs	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2113      	movs	r1, #19
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	f7ff ff2d 	bl	800b80c <u8g2_font_get_word>
 800b9b2:	0003      	movs	r3, r0
 800b9b4:	001a      	movs	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	2115      	movs	r1, #21
 800b9be:	0018      	movs	r0, r3
 800b9c0:	f7ff ff24 	bl	800b80c <u8g2_font_get_word>
 800b9c4:	0003      	movs	r3, r0
 800b9c6:	001a      	movs	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	82da      	strh	r2, [r3, #22]
#endif
}
 800b9cc:	46c0      	nop			; (mov r8, r8)
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800b9d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	000a      	movs	r2, r1
 800b9de:	1cfb      	adds	r3, r7, #3
 800b9e0:	701a      	strb	r2, [r3, #0]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800b9e2:	250d      	movs	r5, #13
 800b9e4:	197b      	adds	r3, r7, r5
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	7b12      	ldrb	r2, [r2, #12]
 800b9ea:	701a      	strb	r2, [r3, #0]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	240f      	movs	r4, #15
 800b9f2:	193b      	adds	r3, r7, r4
 800b9f4:	7812      	ldrb	r2, [r2, #0]
 800b9f6:	701a      	strb	r2, [r3, #0]
  
  val >>= bit_pos;
 800b9f8:	193b      	adds	r3, r7, r4
 800b9fa:	781a      	ldrb	r2, [r3, #0]
 800b9fc:	197b      	adds	r3, r7, r5
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	411a      	asrs	r2, r3
 800ba02:	193b      	adds	r3, r7, r4
 800ba04:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt = bit_pos;
 800ba06:	200e      	movs	r0, #14
 800ba08:	183b      	adds	r3, r7, r0
 800ba0a:	197a      	adds	r2, r7, r5
 800ba0c:	7812      	ldrb	r2, [r2, #0]
 800ba0e:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt += cnt;
 800ba10:	183b      	adds	r3, r7, r0
 800ba12:	1839      	adds	r1, r7, r0
 800ba14:	1cfa      	adds	r2, r7, #3
 800ba16:	7809      	ldrb	r1, [r1, #0]
 800ba18:	7812      	ldrb	r2, [r2, #0]
 800ba1a:	188a      	adds	r2, r1, r2
 800ba1c:	701a      	strb	r2, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 800ba1e:	183b      	adds	r3, r7, r0
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b07      	cmp	r3, #7
 800ba24:	d924      	bls.n	800ba70 <u8g2_font_decode_get_unsigned_bits+0x9c>
  {
    uint8_t s = 8;
 800ba26:	260c      	movs	r6, #12
 800ba28:	19bb      	adds	r3, r7, r6
 800ba2a:	2208      	movs	r2, #8
 800ba2c:	701a      	strb	r2, [r3, #0]
    s -= bit_pos;
 800ba2e:	19bb      	adds	r3, r7, r6
 800ba30:	19b9      	adds	r1, r7, r6
 800ba32:	197a      	adds	r2, r7, r5
 800ba34:	7809      	ldrb	r1, [r1, #0]
 800ba36:	7812      	ldrb	r2, [r2, #0]
 800ba38:	1a8a      	subs	r2, r1, r2
 800ba3a:	701a      	strb	r2, [r3, #0]
    f->decode_ptr++;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	19bb      	adds	r3, r7, r6
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	409a      	lsls	r2, r3
 800ba54:	0013      	movs	r3, r2
 800ba56:	b25a      	sxtb	r2, r3
 800ba58:	193b      	adds	r3, r7, r4
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	b25a      	sxtb	r2, r3
 800ba62:	193b      	adds	r3, r7, r4
 800ba64:	701a      	strb	r2, [r3, #0]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 800ba66:	183b      	adds	r3, r7, r0
 800ba68:	183a      	adds	r2, r7, r0
 800ba6a:	7812      	ldrb	r2, [r2, #0]
 800ba6c:	3a08      	subs	r2, #8
 800ba6e:	701a      	strb	r2, [r3, #0]
  }
  val &= (1U<<cnt)-1;
 800ba70:	1cfb      	adds	r3, r7, #3
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2201      	movs	r2, #1
 800ba76:	4252      	negs	r2, r2
 800ba78:	409a      	lsls	r2, r3
 800ba7a:	0013      	movs	r3, r2
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	43db      	mvns	r3, r3
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	200f      	movs	r0, #15
 800ba84:	183b      	adds	r3, r7, r0
 800ba86:	1839      	adds	r1, r7, r0
 800ba88:	7809      	ldrb	r1, [r1, #0]
 800ba8a:	400a      	ands	r2, r1
 800ba8c:	701a      	strb	r2, [r3, #0]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	220e      	movs	r2, #14
 800ba92:	18ba      	adds	r2, r7, r2
 800ba94:	7812      	ldrb	r2, [r2, #0]
 800ba96:	731a      	strb	r2, [r3, #12]
  return val;
 800ba98:	183b      	adds	r3, r7, r0
 800ba9a:	781b      	ldrb	r3, [r3, #0]
}
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	b005      	add	sp, #20
 800baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800baa4 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	000a      	movs	r2, r1
 800baae:	1cfb      	adds	r3, r7, #3
 800bab0:	701a      	strb	r2, [r3, #0]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800bab2:	1cfb      	adds	r3, r7, #3
 800bab4:	781a      	ldrb	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	0011      	movs	r1, r2
 800baba:	0018      	movs	r0, r3
 800babc:	f7ff ff8a 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800bac0:	0003      	movs	r3, r0
 800bac2:	001a      	movs	r2, r3
 800bac4:	210f      	movs	r1, #15
 800bac6:	187b      	adds	r3, r7, r1
 800bac8:	701a      	strb	r2, [r3, #0]
  d = 1;
 800baca:	200e      	movs	r0, #14
 800bacc:	183b      	adds	r3, r7, r0
 800bace:	2201      	movs	r2, #1
 800bad0:	701a      	strb	r2, [r3, #0]
  cnt--;
 800bad2:	1cfb      	adds	r3, r7, #3
 800bad4:	781a      	ldrb	r2, [r3, #0]
 800bad6:	1cfb      	adds	r3, r7, #3
 800bad8:	3a01      	subs	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
  d <<= cnt;
 800badc:	183b      	adds	r3, r7, r0
 800bade:	2200      	movs	r2, #0
 800bae0:	569a      	ldrsb	r2, [r3, r2]
 800bae2:	1cfb      	adds	r3, r7, #3
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	409a      	lsls	r2, r3
 800bae8:	183b      	adds	r3, r7, r0
 800baea:	701a      	strb	r2, [r3, #0]
  v -= d;
 800baec:	187b      	adds	r3, r7, r1
 800baee:	781a      	ldrb	r2, [r3, #0]
 800baf0:	183b      	adds	r3, r7, r0
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	187b      	adds	r3, r7, r1
 800bafa:	701a      	strb	r2, [r3, #0]
  return v;
 800bafc:	187b      	adds	r3, r7, r1
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	b25b      	sxtb	r3, r3
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800bb02:	0018      	movs	r0, r3
 800bb04:	46bd      	mov	sp, r7
 800bb06:	b004      	add	sp, #16
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800bb0a:	b5b0      	push	{r4, r5, r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	0005      	movs	r5, r0
 800bb12:	000c      	movs	r4, r1
 800bb14:	0010      	movs	r0, r2
 800bb16:	0019      	movs	r1, r3
 800bb18:	1dbb      	adds	r3, r7, #6
 800bb1a:	1c2a      	adds	r2, r5, #0
 800bb1c:	801a      	strh	r2, [r3, #0]
 800bb1e:	1d7b      	adds	r3, r7, #5
 800bb20:	1c22      	adds	r2, r4, #0
 800bb22:	701a      	strb	r2, [r3, #0]
 800bb24:	1d3b      	adds	r3, r7, #4
 800bb26:	1c02      	adds	r2, r0, #0
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	1cfb      	adds	r3, r7, #3
 800bb2c:	1c0a      	adds	r2, r1, #0
 800bb2e:	701a      	strb	r2, [r3, #0]
  switch(dir)
 800bb30:	1cfb      	adds	r3, r7, #3
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d019      	beq.n	800bb6c <u8g2_add_vector_y+0x62>
 800bb38:	dc22      	bgt.n	800bb80 <u8g2_add_vector_y+0x76>
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <u8g2_add_vector_y+0x3a>
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d00a      	beq.n	800bb58 <u8g2_add_vector_y+0x4e>
 800bb42:	e01d      	b.n	800bb80 <u8g2_add_vector_y+0x76>
  {
    case 0:
      dy += y;
 800bb44:	1d3b      	adds	r3, r7, #4
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	b25b      	sxtb	r3, r3
 800bb4a:	b299      	uxth	r1, r3
 800bb4c:	1dbb      	adds	r3, r7, #6
 800bb4e:	1dba      	adds	r2, r7, #6
 800bb50:	8812      	ldrh	r2, [r2, #0]
 800bb52:	188a      	adds	r2, r1, r2
 800bb54:	801a      	strh	r2, [r3, #0]
      break;
 800bb56:	e01d      	b.n	800bb94 <u8g2_add_vector_y+0x8a>
    case 1:
      dy += x;
 800bb58:	1d7b      	adds	r3, r7, #5
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	b25b      	sxtb	r3, r3
 800bb5e:	b299      	uxth	r1, r3
 800bb60:	1dbb      	adds	r3, r7, #6
 800bb62:	1dba      	adds	r2, r7, #6
 800bb64:	8812      	ldrh	r2, [r2, #0]
 800bb66:	188a      	adds	r2, r1, r2
 800bb68:	801a      	strh	r2, [r3, #0]
      break;
 800bb6a:	e013      	b.n	800bb94 <u8g2_add_vector_y+0x8a>
    case 2:
      dy -= y;
 800bb6c:	1d3b      	adds	r3, r7, #4
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	b25b      	sxtb	r3, r3
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	1dbb      	adds	r3, r7, #6
 800bb76:	1db9      	adds	r1, r7, #6
 800bb78:	8809      	ldrh	r1, [r1, #0]
 800bb7a:	1a8a      	subs	r2, r1, r2
 800bb7c:	801a      	strh	r2, [r3, #0]
      break;
 800bb7e:	e009      	b.n	800bb94 <u8g2_add_vector_y+0x8a>
    default:
      dy -= x;
 800bb80:	1d7b      	adds	r3, r7, #5
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	b25b      	sxtb	r3, r3
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	1dbb      	adds	r3, r7, #6
 800bb8a:	1db9      	adds	r1, r7, #6
 800bb8c:	8809      	ldrh	r1, [r1, #0]
 800bb8e:	1a8a      	subs	r2, r1, r2
 800bb90:	801a      	strh	r2, [r3, #0]
      break;      
 800bb92:	46c0      	nop			; (mov r8, r8)
  }
  return dy;
 800bb94:	1dbb      	adds	r3, r7, #6
 800bb96:	881b      	ldrh	r3, [r3, #0]
}
 800bb98:	0018      	movs	r0, r3
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	b002      	add	sp, #8
 800bb9e:	bdb0      	pop	{r4, r5, r7, pc}

0800bba0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800bba0:	b5b0      	push	{r4, r5, r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	0005      	movs	r5, r0
 800bba8:	000c      	movs	r4, r1
 800bbaa:	0010      	movs	r0, r2
 800bbac:	0019      	movs	r1, r3
 800bbae:	1dbb      	adds	r3, r7, #6
 800bbb0:	1c2a      	adds	r2, r5, #0
 800bbb2:	801a      	strh	r2, [r3, #0]
 800bbb4:	1d7b      	adds	r3, r7, #5
 800bbb6:	1c22      	adds	r2, r4, #0
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	1d3b      	adds	r3, r7, #4
 800bbbc:	1c02      	adds	r2, r0, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	1cfb      	adds	r3, r7, #3
 800bbc2:	1c0a      	adds	r2, r1, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
  switch(dir)
 800bbc6:	1cfb      	adds	r3, r7, #3
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d019      	beq.n	800bc02 <u8g2_add_vector_x+0x62>
 800bbce:	dc22      	bgt.n	800bc16 <u8g2_add_vector_x+0x76>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <u8g2_add_vector_x+0x3a>
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d00a      	beq.n	800bbee <u8g2_add_vector_x+0x4e>
 800bbd8:	e01d      	b.n	800bc16 <u8g2_add_vector_x+0x76>
  {
    case 0:
      dx += x;
 800bbda:	1d7b      	adds	r3, r7, #5
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b25b      	sxtb	r3, r3
 800bbe0:	b299      	uxth	r1, r3
 800bbe2:	1dbb      	adds	r3, r7, #6
 800bbe4:	1dba      	adds	r2, r7, #6
 800bbe6:	8812      	ldrh	r2, [r2, #0]
 800bbe8:	188a      	adds	r2, r1, r2
 800bbea:	801a      	strh	r2, [r3, #0]
      break;
 800bbec:	e01d      	b.n	800bc2a <u8g2_add_vector_x+0x8a>
    case 1:
      dx -= y;
 800bbee:	1d3b      	adds	r3, r7, #4
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	1dbb      	adds	r3, r7, #6
 800bbf8:	1db9      	adds	r1, r7, #6
 800bbfa:	8809      	ldrh	r1, [r1, #0]
 800bbfc:	1a8a      	subs	r2, r1, r2
 800bbfe:	801a      	strh	r2, [r3, #0]
      break;
 800bc00:	e013      	b.n	800bc2a <u8g2_add_vector_x+0x8a>
    case 2:
      dx -= x;
 800bc02:	1d7b      	adds	r3, r7, #5
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	b25b      	sxtb	r3, r3
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	1dbb      	adds	r3, r7, #6
 800bc0c:	1db9      	adds	r1, r7, #6
 800bc0e:	8809      	ldrh	r1, [r1, #0]
 800bc10:	1a8a      	subs	r2, r1, r2
 800bc12:	801a      	strh	r2, [r3, #0]
      break;
 800bc14:	e009      	b.n	800bc2a <u8g2_add_vector_x+0x8a>
    default:
      dx += y;
 800bc16:	1d3b      	adds	r3, r7, #4
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	b25b      	sxtb	r3, r3
 800bc1c:	b299      	uxth	r1, r3
 800bc1e:	1dbb      	adds	r3, r7, #6
 800bc20:	1dba      	adds	r2, r7, #6
 800bc22:	8812      	ldrh	r2, [r2, #0]
 800bc24:	188a      	adds	r2, r1, r2
 800bc26:	801a      	strh	r2, [r3, #0]
      break;      
 800bc28:	46c0      	nop			; (mov r8, r8)
  }
  return dx;
 800bc2a:	1dbb      	adds	r3, r7, #6
 800bc2c:	881b      	ldrh	r3, [r3, #0]
}
 800bc2e:	0018      	movs	r0, r3
 800bc30:	46bd      	mov	sp, r7
 800bc32:	b002      	add	sp, #8
 800bc34:	bdb0      	pop	{r4, r5, r7, pc}

0800bc36 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800bc36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc38:	b089      	sub	sp, #36	; 0x24
 800bc3a:	af02      	add	r7, sp, #8
 800bc3c:	6078      	str	r0, [r7, #4]
 800bc3e:	0008      	movs	r0, r1
 800bc40:	0011      	movs	r1, r2
 800bc42:	1cfb      	adds	r3, r7, #3
 800bc44:	1c02      	adds	r2, r0, #0
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	1cbb      	adds	r3, r7, #2
 800bc4a:	1c0a      	adds	r2, r1, #0
 800bc4c:	701a      	strb	r2, [r3, #0]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	3360      	adds	r3, #96	; 0x60
 800bc52:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800bc54:	2317      	movs	r3, #23
 800bc56:	18fb      	adds	r3, r7, r3
 800bc58:	1cfa      	adds	r2, r7, #3
 800bc5a:	7812      	ldrb	r2, [r2, #0]
 800bc5c:	701a      	strb	r2, [r3, #0]
  
  /* get the local position */
  lx = decode->x;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	2208      	movs	r2, #8
 800bc62:	569a      	ldrsb	r2, [r3, r2]
 800bc64:	2315      	movs	r3, #21
 800bc66:	18fb      	adds	r3, r7, r3
 800bc68:	701a      	strb	r2, [r3, #0]
  ly = decode->y;
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	2209      	movs	r2, #9
 800bc6e:	569a      	ldrsb	r2, [r3, r2]
 800bc70:	2314      	movs	r3, #20
 800bc72:	18fb      	adds	r3, r7, r3
 800bc74:	701a      	strb	r2, [r3, #0]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	220a      	movs	r2, #10
 800bc7a:	569a      	ldrsb	r2, [r3, r2]
 800bc7c:	200f      	movs	r0, #15
 800bc7e:	183b      	adds	r3, r7, r0
 800bc80:	701a      	strb	r2, [r3, #0]
    rem -= lx;
 800bc82:	183b      	adds	r3, r7, r0
 800bc84:	1839      	adds	r1, r7, r0
 800bc86:	2215      	movs	r2, #21
 800bc88:	18ba      	adds	r2, r7, r2
 800bc8a:	7809      	ldrb	r1, [r1, #0]
 800bc8c:	7812      	ldrb	r2, [r2, #0]
 800bc8e:	1a8a      	subs	r2, r1, r2
 800bc90:	701a      	strb	r2, [r3, #0]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800bc92:	2116      	movs	r1, #22
 800bc94:	187b      	adds	r3, r7, r1
 800bc96:	183a      	adds	r2, r7, r0
 800bc98:	7812      	ldrb	r2, [r2, #0]
 800bc9a:	701a      	strb	r2, [r3, #0]
    if ( cnt < rem )
 800bc9c:	2417      	movs	r4, #23
 800bc9e:	193a      	adds	r2, r7, r4
 800bca0:	183b      	adds	r3, r7, r0
 800bca2:	7812      	ldrb	r2, [r2, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d203      	bcs.n	800bcb2 <u8g2_font_decode_len+0x7c>
      current = cnt;
 800bcaa:	187b      	adds	r3, r7, r1
 800bcac:	193a      	adds	r2, r7, r4
 800bcae:	7812      	ldrb	r2, [r2, #0]
 800bcb0:	701a      	strb	r2, [r3, #0]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800bcb2:	260c      	movs	r6, #12
 800bcb4:	19bb      	adds	r3, r7, r6
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	8892      	ldrh	r2, [r2, #4]
 800bcba:	801a      	strh	r2, [r3, #0]
    y = decode->target_y;
 800bcbc:	230a      	movs	r3, #10
 800bcbe:	18fb      	adds	r3, r7, r3
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	88d2      	ldrh	r2, [r2, #6]
 800bcc4:	801a      	strh	r2, [r3, #0]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800bcc6:	2215      	movs	r2, #21
 800bcc8:	18bb      	adds	r3, r7, r2
 800bcca:	2100      	movs	r1, #0
 800bccc:	5659      	ldrsb	r1, [r3, r1]
 800bcce:	2014      	movs	r0, #20
 800bcd0:	183b      	adds	r3, r7, r0
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	569a      	ldrsb	r2, [r3, r2]
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	7c1d      	ldrb	r5, [r3, #16]
 800bcda:	19bc      	adds	r4, r7, r6
 800bcdc:	19bb      	adds	r3, r7, r6
 800bcde:	8818      	ldrh	r0, [r3, #0]
 800bce0:	002b      	movs	r3, r5
 800bce2:	f7ff ff5d 	bl	800bba0 <u8g2_add_vector_x>
 800bce6:	0003      	movs	r3, r0
 800bce8:	8023      	strh	r3, [r4, #0]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800bcea:	2215      	movs	r2, #21
 800bcec:	18bb      	adds	r3, r7, r2
 800bcee:	2100      	movs	r1, #0
 800bcf0:	5659      	ldrsb	r1, [r3, r1]
 800bcf2:	2014      	movs	r0, #20
 800bcf4:	183b      	adds	r3, r7, r0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	569a      	ldrsb	r2, [r3, r2]
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	7c1d      	ldrb	r5, [r3, #16]
 800bcfe:	230a      	movs	r3, #10
 800bd00:	18fc      	adds	r4, r7, r3
 800bd02:	18fb      	adds	r3, r7, r3
 800bd04:	8818      	ldrh	r0, [r3, #0]
 800bd06:	002b      	movs	r3, r5
 800bd08:	f7ff feff 	bl	800bb0a <u8g2_add_vector_y>
 800bd0c:	0003      	movs	r3, r0
 800bd0e:	8023      	strh	r3, [r4, #0]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800bd10:	1cbb      	adds	r3, r7, #2
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d016      	beq.n	800bd46 <u8g2_font_decode_len+0x110>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	7b99      	ldrb	r1, [r3, #14]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2292      	movs	r2, #146	; 0x92
 800bd20:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 800bd22:	2116      	movs	r1, #22
 800bd24:	187b      	adds	r3, r7, r1
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	b29d      	uxth	r5, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	7c1b      	ldrb	r3, [r3, #16]
 800bd2e:	220a      	movs	r2, #10
 800bd30:	18ba      	adds	r2, r7, r2
 800bd32:	8814      	ldrh	r4, [r2, #0]
 800bd34:	19ba      	adds	r2, r7, r6
 800bd36:	8811      	ldrh	r1, [r2, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	002b      	movs	r3, r5
 800bd3e:	0022      	movs	r2, r4
 800bd40:	f000 fd2d 	bl	800c79e <u8g2_DrawHVLine>
 800bd44:	e01a      	b.n	800bd7c <u8g2_font_decode_len+0x146>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	7b5b      	ldrb	r3, [r3, #13]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d116      	bne.n	800bd7c <u8g2_font_decode_len+0x146>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	7bd9      	ldrb	r1, [r3, #15]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2292      	movs	r2, #146	; 0x92
 800bd56:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 800bd58:	2316      	movs	r3, #22
 800bd5a:	18fb      	adds	r3, r7, r3
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	b29d      	uxth	r5, r3
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	7c1b      	ldrb	r3, [r3, #16]
 800bd64:	220a      	movs	r2, #10
 800bd66:	18ba      	adds	r2, r7, r2
 800bd68:	8814      	ldrh	r4, [r2, #0]
 800bd6a:	220c      	movs	r2, #12
 800bd6c:	18ba      	adds	r2, r7, r2
 800bd6e:	8811      	ldrh	r1, [r2, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	9300      	str	r3, [sp, #0]
 800bd74:	002b      	movs	r3, r5
 800bd76:	0022      	movs	r2, r4
 800bd78:	f000 fd11 	bl	800c79e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800bd7c:	2117      	movs	r1, #23
 800bd7e:	187a      	adds	r2, r7, r1
 800bd80:	200f      	movs	r0, #15
 800bd82:	183b      	adds	r3, r7, r0
 800bd84:	7812      	ldrb	r2, [r2, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d311      	bcc.n	800bdb0 <u8g2_font_decode_len+0x17a>
      break;
    cnt -= rem;
 800bd8c:	187b      	adds	r3, r7, r1
 800bd8e:	1879      	adds	r1, r7, r1
 800bd90:	183a      	adds	r2, r7, r0
 800bd92:	7809      	ldrb	r1, [r1, #0]
 800bd94:	7812      	ldrb	r2, [r2, #0]
 800bd96:	1a8a      	subs	r2, r1, r2
 800bd98:	701a      	strb	r2, [r3, #0]
    lx = 0;
 800bd9a:	2315      	movs	r3, #21
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	2200      	movs	r2, #0
 800bda0:	701a      	strb	r2, [r3, #0]
    ly++;
 800bda2:	2114      	movs	r1, #20
 800bda4:	187b      	adds	r3, r7, r1
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	187b      	adds	r3, r7, r1
 800bdaa:	3201      	adds	r2, #1
 800bdac:	701a      	strb	r2, [r3, #0]
    rem = decode->glyph_width;
 800bdae:	e762      	b.n	800bc76 <u8g2_font_decode_len+0x40>
      break;
 800bdb0:	46c0      	nop			; (mov r8, r8)
  }
  lx += cnt;
 800bdb2:	2015      	movs	r0, #21
 800bdb4:	183b      	adds	r3, r7, r0
 800bdb6:	1839      	adds	r1, r7, r0
 800bdb8:	2217      	movs	r2, #23
 800bdba:	18ba      	adds	r2, r7, r2
 800bdbc:	7809      	ldrb	r1, [r1, #0]
 800bdbe:	7812      	ldrb	r2, [r2, #0]
 800bdc0:	188a      	adds	r2, r1, r2
 800bdc2:	701a      	strb	r2, [r3, #0]
  
  decode->x = lx;
 800bdc4:	183b      	adds	r3, r7, r0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	569a      	ldrsb	r2, [r3, r2]
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 800bdce:	2314      	movs	r3, #20
 800bdd0:	18fb      	adds	r3, r7, r3
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	569a      	ldrsb	r2, [r3, r2]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	725a      	strb	r2, [r3, #9]
  
}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b007      	add	sp, #28
 800bde0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bde2 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b084      	sub	sp, #16
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
 800bdea:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3360      	adds	r3, #96	; 0x60
 800bdf0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2278      	movs	r2, #120	; 0x78
 800be02:	5c9a      	ldrb	r2, [r3, r2]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	0011      	movs	r1, r2
 800be08:	0018      	movs	r0, r3
 800be0a:	f7ff fde3 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800be0e:	0003      	movs	r3, r0
 800be10:	b25a      	sxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2279      	movs	r2, #121	; 0x79
 800be1a:	5c9a      	ldrb	r2, [r3, r2]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	0011      	movs	r1, r2
 800be20:	0018      	movs	r0, r3
 800be22:	f7ff fdd7 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800be26:	0003      	movs	r3, r0
 800be28:	b25a      	sxtb	r2, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2292      	movs	r2, #146	; 0x92
 800be32:	5c9a      	ldrb	r2, [r3, r2]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	7b9b      	ldrb	r3, [r3, #14]
 800be3c:	425a      	negs	r2, r3
 800be3e:	4153      	adcs	r3, r2
 800be40:	b2db      	uxtb	r3, r3
 800be42:	001a      	movs	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	73da      	strb	r2, [r3, #15]
}
 800be48:	46c0      	nop			; (mov r8, r8)
 800be4a:	46bd      	mov	sp, r7
 800be4c:	b004      	add	sp, #16
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800be50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be52:	b08b      	sub	sp, #44	; 0x2c
 800be54:	af02      	add	r7, sp, #8
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3360      	adds	r3, #96	; 0x60
 800be5e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	0011      	movs	r1, r2
 800be66:	0018      	movs	r0, r3
 800be68:	f7ff ffbb 	bl	800bde2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800be6c:	2513      	movs	r5, #19
 800be6e:	197b      	adds	r3, r7, r5
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	216b      	movs	r1, #107	; 0x6b
 800be74:	5c52      	ldrb	r2, [r2, r1]
 800be76:	701a      	strb	r2, [r3, #0]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	227a      	movs	r2, #122	; 0x7a
 800be7c:	5c9a      	ldrb	r2, [r3, r2]
 800be7e:	2612      	movs	r6, #18
 800be80:	19bc      	adds	r4, r7, r6
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	0011      	movs	r1, r2
 800be86:	0018      	movs	r0, r3
 800be88:	f7ff fe0c 	bl	800baa4 <u8g2_font_decode_get_signed_bits>
 800be8c:	0003      	movs	r3, r0
 800be8e:	7023      	strb	r3, [r4, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	227b      	movs	r2, #123	; 0x7b
 800be94:	5c9a      	ldrb	r2, [r3, r2]
 800be96:	2311      	movs	r3, #17
 800be98:	18fc      	adds	r4, r7, r3
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	0011      	movs	r1, r2
 800be9e:	0018      	movs	r0, r3
 800bea0:	f7ff fe00 	bl	800baa4 <u8g2_font_decode_get_signed_bits>
 800bea4:	0003      	movs	r3, r0
 800bea6:	7023      	strb	r3, [r4, #0]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	227c      	movs	r2, #124	; 0x7c
 800beac:	5c9a      	ldrb	r2, [r3, r2]
 800beae:	2110      	movs	r1, #16
 800beb0:	187c      	adds	r4, r7, r1
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	0011      	movs	r1, r2
 800beb6:	0018      	movs	r0, r3
 800beb8:	f7ff fdf4 	bl	800baa4 <u8g2_font_decode_get_signed_bits>
 800bebc:	0003      	movs	r3, r0
 800bebe:	7023      	strb	r3, [r4, #0]
  
  if ( decode->glyph_width > 0 )
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	7a9b      	ldrb	r3, [r3, #10]
 800bec4:	b25b      	sxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	dc00      	bgt.n	800becc <u8g2_font_decode_glyph+0x7c>
 800beca:	e134      	b.n	800c136 <u8g2_font_decode_glyph+0x2e6>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	8898      	ldrh	r0, [r3, #4]
 800bed0:	197b      	adds	r3, r7, r5
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	2311      	movs	r3, #17
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	18d3      	adds	r3, r2, r3
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	425b      	negs	r3, r3
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	b25a      	sxtb	r2, r3
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	7c1c      	ldrb	r4, [r3, #16]
 800bee8:	19bb      	adds	r3, r7, r6
 800beea:	2100      	movs	r1, #0
 800beec:	5659      	ldrsb	r1, [r3, r1]
 800beee:	0023      	movs	r3, r4
 800bef0:	f7ff fe56 	bl	800bba0 <u8g2_add_vector_x>
 800bef4:	0003      	movs	r3, r0
 800bef6:	001a      	movs	r2, r3
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	88d8      	ldrh	r0, [r3, #6]
 800bf00:	197b      	adds	r3, r7, r5
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	2311      	movs	r3, #17
 800bf06:	18fb      	adds	r3, r7, r3
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	18d3      	adds	r3, r2, r3
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	425b      	negs	r3, r3
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	b25a      	sxtb	r2, r3
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	7c1c      	ldrb	r4, [r3, #16]
 800bf18:	19bb      	adds	r3, r7, r6
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	5659      	ldrsb	r1, [r3, r1]
 800bf1e:	0023      	movs	r3, r4
 800bf20:	f7ff fdf3 	bl	800bb0a <u8g2_add_vector_y>
 800bf24:	0003      	movs	r3, r0
 800bf26:	001a      	movs	r2, r3
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800bf2c:	211e      	movs	r1, #30
 800bf2e:	187b      	adds	r3, r7, r1
 800bf30:	697a      	ldr	r2, [r7, #20]
 800bf32:	8892      	ldrh	r2, [r2, #4]
 800bf34:	801a      	strh	r2, [r3, #0]
      y0 = decode->target_y;
 800bf36:	201a      	movs	r0, #26
 800bf38:	183b      	adds	r3, r7, r0
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	88d2      	ldrh	r2, [r2, #6]
 800bf3e:	801a      	strh	r2, [r3, #0]
      x1 = x0;
 800bf40:	231c      	movs	r3, #28
 800bf42:	18fb      	adds	r3, r7, r3
 800bf44:	187a      	adds	r2, r7, r1
 800bf46:	8812      	ldrh	r2, [r2, #0]
 800bf48:	801a      	strh	r2, [r3, #0]
      y1 = y0;
 800bf4a:	2318      	movs	r3, #24
 800bf4c:	18fb      	adds	r3, r7, r3
 800bf4e:	183a      	adds	r2, r7, r0
 800bf50:	8812      	ldrh	r2, [r2, #0]
 800bf52:	801a      	strh	r2, [r3, #0]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	7c1b      	ldrb	r3, [r3, #16]
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d100      	bne.n	800bf5e <u8g2_font_decode_glyph+0x10e>
 800bf5c:	e06d      	b.n	800c03a <u8g2_font_decode_glyph+0x1ea>
 800bf5e:	dd00      	ble.n	800bf62 <u8g2_font_decode_glyph+0x112>
 800bf60:	e08c      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d03d      	beq.n	800bfe2 <u8g2_font_decode_glyph+0x192>
 800bf66:	dd00      	ble.n	800bf6a <u8g2_font_decode_glyph+0x11a>
 800bf68:	e088      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <u8g2_font_decode_glyph+0x124>
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d016      	beq.n	800bfa0 <u8g2_font_decode_glyph+0x150>
 800bf72:	e083      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
      {
	case 0:
	    x1 += decode->glyph_width;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	7a9b      	ldrb	r3, [r3, #10]
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	b299      	uxth	r1, r3
 800bf7c:	221c      	movs	r2, #28
 800bf7e:	18bb      	adds	r3, r7, r2
 800bf80:	18ba      	adds	r2, r7, r2
 800bf82:	8812      	ldrh	r2, [r2, #0]
 800bf84:	188a      	adds	r2, r1, r2
 800bf86:	801a      	strh	r2, [r3, #0]
	    y1 += h;
 800bf88:	2313      	movs	r3, #19
 800bf8a:	18fb      	adds	r3, r7, r3
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	b299      	uxth	r1, r3
 800bf92:	2218      	movs	r2, #24
 800bf94:	18bb      	adds	r3, r7, r2
 800bf96:	18ba      	adds	r2, r7, r2
 800bf98:	8812      	ldrh	r2, [r2, #0]
 800bf9a:	188a      	adds	r2, r1, r2
 800bf9c:	801a      	strh	r2, [r3, #0]
	    break;
 800bf9e:	e06d      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
	case 1:
	    x0 -= h;
 800bfa0:	2313      	movs	r3, #19
 800bfa2:	18fb      	adds	r3, r7, r3
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	b25b      	sxtb	r3, r3
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	201e      	movs	r0, #30
 800bfac:	183b      	adds	r3, r7, r0
 800bfae:	1839      	adds	r1, r7, r0
 800bfb0:	8809      	ldrh	r1, [r1, #0]
 800bfb2:	1a8a      	subs	r2, r1, r2
 800bfb4:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800bfb6:	183b      	adds	r3, r7, r0
 800bfb8:	881a      	ldrh	r2, [r3, #0]
 800bfba:	183b      	adds	r3, r7, r0
 800bfbc:	3201      	adds	r2, #1
 800bfbe:	801a      	strh	r2, [r3, #0]
	    x1++;
 800bfc0:	211c      	movs	r1, #28
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	881a      	ldrh	r2, [r3, #0]
 800bfc6:	187b      	adds	r3, r7, r1
 800bfc8:	3201      	adds	r2, #1
 800bfca:	801a      	strh	r2, [r3, #0]
	    y1 += decode->glyph_width;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	7a9b      	ldrb	r3, [r3, #10]
 800bfd0:	b25b      	sxtb	r3, r3
 800bfd2:	b299      	uxth	r1, r3
 800bfd4:	2218      	movs	r2, #24
 800bfd6:	18bb      	adds	r3, r7, r2
 800bfd8:	18ba      	adds	r2, r7, r2
 800bfda:	8812      	ldrh	r2, [r2, #0]
 800bfdc:	188a      	adds	r2, r1, r2
 800bfde:	801a      	strh	r2, [r3, #0]
	    break;
 800bfe0:	e04c      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
	case 2:
	    x0 -= decode->glyph_width;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	7a9b      	ldrb	r3, [r3, #10]
 800bfe6:	b25b      	sxtb	r3, r3
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	201e      	movs	r0, #30
 800bfec:	183b      	adds	r3, r7, r0
 800bfee:	1839      	adds	r1, r7, r0
 800bff0:	8809      	ldrh	r1, [r1, #0]
 800bff2:	1a8a      	subs	r2, r1, r2
 800bff4:	801a      	strh	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800bff6:	183b      	adds	r3, r7, r0
 800bff8:	881a      	ldrh	r2, [r3, #0]
 800bffa:	183b      	adds	r3, r7, r0
 800bffc:	3201      	adds	r2, #1
 800bffe:	801a      	strh	r2, [r3, #0]
	    x1++;
 800c000:	211c      	movs	r1, #28
 800c002:	187b      	adds	r3, r7, r1
 800c004:	881a      	ldrh	r2, [r3, #0]
 800c006:	187b      	adds	r3, r7, r1
 800c008:	3201      	adds	r2, #1
 800c00a:	801a      	strh	r2, [r3, #0]
	    y0 -= h;
 800c00c:	2313      	movs	r3, #19
 800c00e:	18fb      	adds	r3, r7, r3
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	b25b      	sxtb	r3, r3
 800c014:	b29a      	uxth	r2, r3
 800c016:	201a      	movs	r0, #26
 800c018:	183b      	adds	r3, r7, r0
 800c01a:	1839      	adds	r1, r7, r0
 800c01c:	8809      	ldrh	r1, [r1, #0]
 800c01e:	1a8a      	subs	r2, r1, r2
 800c020:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800c022:	183b      	adds	r3, r7, r0
 800c024:	881a      	ldrh	r2, [r3, #0]
 800c026:	183b      	adds	r3, r7, r0
 800c028:	3201      	adds	r2, #1
 800c02a:	801a      	strh	r2, [r3, #0]
	    y1++;
 800c02c:	2118      	movs	r1, #24
 800c02e:	187b      	adds	r3, r7, r1
 800c030:	881a      	ldrh	r2, [r3, #0]
 800c032:	187b      	adds	r3, r7, r1
 800c034:	3201      	adds	r2, #1
 800c036:	801a      	strh	r2, [r3, #0]
	    break;	  
 800c038:	e020      	b.n	800c07c <u8g2_font_decode_glyph+0x22c>
	case 3:
	    x1 += h;
 800c03a:	2313      	movs	r3, #19
 800c03c:	18fb      	adds	r3, r7, r3
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b25b      	sxtb	r3, r3
 800c042:	b299      	uxth	r1, r3
 800c044:	221c      	movs	r2, #28
 800c046:	18bb      	adds	r3, r7, r2
 800c048:	18ba      	adds	r2, r7, r2
 800c04a:	8812      	ldrh	r2, [r2, #0]
 800c04c:	188a      	adds	r2, r1, r2
 800c04e:	801a      	strh	r2, [r3, #0]
	    y0 -= decode->glyph_width;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	7a9b      	ldrb	r3, [r3, #10]
 800c054:	b25b      	sxtb	r3, r3
 800c056:	b29a      	uxth	r2, r3
 800c058:	201a      	movs	r0, #26
 800c05a:	183b      	adds	r3, r7, r0
 800c05c:	1839      	adds	r1, r7, r0
 800c05e:	8809      	ldrh	r1, [r1, #0]
 800c060:	1a8a      	subs	r2, r1, r2
 800c062:	801a      	strh	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800c064:	183b      	adds	r3, r7, r0
 800c066:	881a      	ldrh	r2, [r3, #0]
 800c068:	183b      	adds	r3, r7, r0
 800c06a:	3201      	adds	r2, #1
 800c06c:	801a      	strh	r2, [r3, #0]
	    y1++;
 800c06e:	2118      	movs	r1, #24
 800c070:	187b      	adds	r3, r7, r1
 800c072:	881a      	ldrh	r2, [r3, #0]
 800c074:	187b      	adds	r3, r7, r1
 800c076:	3201      	adds	r2, #1
 800c078:	801a      	strh	r2, [r3, #0]
	    break;	  
 800c07a:	46c0      	nop			; (mov r8, r8)
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800c07c:	231c      	movs	r3, #28
 800c07e:	18fb      	adds	r3, r7, r3
 800c080:	881c      	ldrh	r4, [r3, #0]
 800c082:	231a      	movs	r3, #26
 800c084:	18fb      	adds	r3, r7, r3
 800c086:	881a      	ldrh	r2, [r3, #0]
 800c088:	231e      	movs	r3, #30
 800c08a:	18fb      	adds	r3, r7, r3
 800c08c:	8819      	ldrh	r1, [r3, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	2318      	movs	r3, #24
 800c092:	18fb      	adds	r3, r7, r3
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	0023      	movs	r3, r4
 800c09a:	f000 fca9 	bl	800c9f0 <u8g2_IsIntersection>
 800c09e:	1e03      	subs	r3, r0, #0
 800c0a0:	d104      	bne.n	800c0ac <u8g2_font_decode_glyph+0x25c>
	return d;
 800c0a2:	2310      	movs	r3, #16
 800c0a4:	18fb      	adds	r3, r7, r3
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	b25b      	sxtb	r3, r3
 800c0aa:	e048      	b.n	800c13e <u8g2_font_decode_glyph+0x2ee>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2276      	movs	r2, #118	; 0x76
 800c0bc:	5c9a      	ldrb	r2, [r3, r2]
 800c0be:	230f      	movs	r3, #15
 800c0c0:	18fc      	adds	r4, r7, r3
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	0011      	movs	r1, r2
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f7ff fc84 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800c0cc:	0003      	movs	r3, r0
 800c0ce:	7023      	strb	r3, [r4, #0]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2277      	movs	r2, #119	; 0x77
 800c0d4:	5c9a      	ldrb	r2, [r3, r2]
 800c0d6:	230e      	movs	r3, #14
 800c0d8:	18fc      	adds	r4, r7, r3
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	0011      	movs	r1, r2
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f7ff fc78 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800c0e4:	0003      	movs	r3, r0
 800c0e6:	7023      	strb	r3, [r4, #0]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800c0e8:	230f      	movs	r3, #15
 800c0ea:	18fb      	adds	r3, r7, r3
 800c0ec:	7819      	ldrb	r1, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	f7ff fd9f 	bl	800bc36 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800c0f8:	230e      	movs	r3, #14
 800c0fa:	18fb      	adds	r3, r7, r3
 800c0fc:	7819      	ldrb	r1, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	0018      	movs	r0, r3
 800c104:	f7ff fd97 	bl	800bc36 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2101      	movs	r1, #1
 800c10c:	0018      	movs	r0, r3
 800c10e:	f7ff fc61 	bl	800b9d4 <u8g2_font_decode_get_unsigned_bits>
 800c112:	1e03      	subs	r3, r0, #0
 800c114:	d1e8      	bne.n	800c0e8 <u8g2_font_decode_glyph+0x298>

      if ( decode->y >= h )
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	7a5b      	ldrb	r3, [r3, #9]
 800c11a:	b25b      	sxtb	r3, r3
 800c11c:	2213      	movs	r2, #19
 800c11e:	18ba      	adds	r2, r7, r2
 800c120:	7812      	ldrb	r2, [r2, #0]
 800c122:	b252      	sxtb	r2, r2
 800c124:	429a      	cmp	r2, r3
 800c126:	dd00      	ble.n	800c12a <u8g2_font_decode_glyph+0x2da>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800c128:	e7c6      	b.n	800c0b8 <u8g2_font_decode_glyph+0x268>
	break;
 800c12a:	46c0      	nop			; (mov r8, r8)
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	7b99      	ldrb	r1, [r3, #14]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2292      	movs	r2, #146	; 0x92
 800c134:	5499      	strb	r1, [r3, r2]
  }
  return d;
 800c136:	2310      	movs	r3, #16
 800c138:	18fb      	adds	r3, r7, r3
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b25b      	sxtb	r3, r3
}
 800c13e:	0018      	movs	r0, r3
 800c140:	46bd      	mov	sp, r7
 800c142:	b009      	add	sp, #36	; 0x24
 800c144:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c146 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800c146:	b5b0      	push	{r4, r5, r7, lr}
 800c148:	b086      	sub	sp, #24
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	000a      	movs	r2, r1
 800c150:	1cbb      	adds	r3, r7, #2
 800c152:	801a      	strh	r2, [r3, #0]
  const uint8_t *font = u8g2->font;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c158:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	3317      	adds	r3, #23
 800c15e:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800c160:	1cbb      	adds	r3, r7, #2
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	2bff      	cmp	r3, #255	; 0xff
 800c166:	d82d      	bhi.n	800c1c4 <u8g2_font_get_glyph_data+0x7e>
  {
    if ( encoding >= 'a' )
 800c168:	1cbb      	adds	r3, r7, #2
 800c16a:	881b      	ldrh	r3, [r3, #0]
 800c16c:	2b60      	cmp	r3, #96	; 0x60
 800c16e:	d907      	bls.n	800c180 <u8g2_font_get_glyph_data+0x3a>
    {
      font += u8g2->font_info.start_pos_lower_a;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2288      	movs	r2, #136	; 0x88
 800c174:	5a9b      	ldrh	r3, [r3, r2]
 800c176:	001a      	movs	r2, r3
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	189b      	adds	r3, r3, r2
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	e00a      	b.n	800c196 <u8g2_font_get_glyph_data+0x50>
    }
    else if ( encoding >= 'A' )
 800c180:	1cbb      	adds	r3, r7, #2
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	2b40      	cmp	r3, #64	; 0x40
 800c186:	d906      	bls.n	800c196 <u8g2_font_get_glyph_data+0x50>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2286      	movs	r2, #134	; 0x86
 800c18c:	5a9b      	ldrh	r3, [r3, r2]
 800c18e:	001a      	movs	r2, r3
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	189b      	adds	r3, r3, r2
 800c194:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	3301      	adds	r3, #1
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d05e      	beq.n	800c25e <u8g2_font_get_glyph_data+0x118>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	1cba      	adds	r2, r7, #2
 800c1a8:	8812      	ldrh	r2, [r2, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d102      	bne.n	800c1b4 <u8g2_font_get_glyph_data+0x6e>
      {
	return font+2;	/* skip encoding and glyph size */
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	3302      	adds	r3, #2
 800c1b2:	e058      	b.n	800c266 <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 1 );
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	001a      	movs	r2, r3
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	189b      	adds	r3, r3, r2
 800c1c0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800c1c2:	e7e8      	b.n	800c196 <u8g2_font_get_glyph_data+0x50>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	228a      	movs	r2, #138	; 0x8a
 800c1c8:	5a9b      	ldrh	r3, [r3, r2]
 800c1ca:	001a      	movs	r2, r3
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	189b      	adds	r3, r3, r2
 800c1d0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2100      	movs	r1, #0
 800c1da:	0018      	movs	r0, r3
 800c1dc:	f7ff fb16 	bl	800b80c <u8g2_font_get_word>
 800c1e0:	0003      	movs	r3, r0
 800c1e2:	001a      	movs	r2, r3
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	189b      	adds	r3, r3, r2
 800c1e8:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800c1ea:	250e      	movs	r5, #14
 800c1ec:	197c      	adds	r4, r7, r5
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2102      	movs	r1, #2
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	f7ff fb0a 	bl	800b80c <u8g2_font_get_word>
 800c1f8:	0003      	movs	r3, r0
 800c1fa:	8023      	strh	r3, [r4, #0]
      unicode_lookup_table+=4;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	3304      	adds	r3, #4
 800c200:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800c202:	197a      	adds	r2, r7, r5
 800c204:	1cbb      	adds	r3, r7, #2
 800c206:	8812      	ldrh	r2, [r2, #0]
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d3e3      	bcc.n	800c1d6 <u8g2_font_get_glyph_data+0x90>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781a      	ldrb	r2, [r3, #0]
 800c212:	200e      	movs	r0, #14
 800c214:	183b      	adds	r3, r7, r0
 800c216:	801a      	strh	r2, [r3, #0]
      e <<= 8;
 800c218:	183b      	adds	r3, r7, r0
 800c21a:	183a      	adds	r2, r7, r0
 800c21c:	8812      	ldrh	r2, [r2, #0]
 800c21e:	0212      	lsls	r2, r2, #8
 800c220:	801a      	strh	r2, [r3, #0]
      e |= u8x8_pgm_read( font + 1 );
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	3301      	adds	r3, #1
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	b299      	uxth	r1, r3
 800c22a:	183b      	adds	r3, r7, r0
 800c22c:	183a      	adds	r2, r7, r0
 800c22e:	8812      	ldrh	r2, [r2, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	801a      	strh	r2, [r3, #0]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800c234:	183b      	adds	r3, r7, r0
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d012      	beq.n	800c262 <u8g2_font_get_glyph_data+0x11c>
	break;
  
      if ( e == encoding )
 800c23c:	183a      	adds	r2, r7, r0
 800c23e:	1cbb      	adds	r3, r7, #2
 800c240:	8812      	ldrh	r2, [r2, #0]
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d102      	bne.n	800c24e <u8g2_font_get_glyph_data+0x108>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	3303      	adds	r3, #3
 800c24c:	e00b      	b.n	800c266 <u8g2_font_get_glyph_data+0x120>
      }
      font += u8x8_pgm_read( font + 2 );
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	3302      	adds	r3, #2
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	001a      	movs	r2, r3
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	189b      	adds	r3, r3, r2
 800c25a:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800c25c:	e7d7      	b.n	800c20e <u8g2_font_get_glyph_data+0xc8>
	break;
 800c25e:	46c0      	nop			; (mov r8, r8)
 800c260:	e000      	b.n	800c264 <u8g2_font_get_glyph_data+0x11e>
	break;
 800c262:	46c0      	nop			; (mov r8, r8)
    }  
  }
#endif
  
  return NULL;
 800c264:	2300      	movs	r3, #0
}
 800c266:	0018      	movs	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	b006      	add	sp, #24
 800c26c:	bdb0      	pop	{r4, r5, r7, pc}

0800c26e <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800c26e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c270:	b087      	sub	sp, #28
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	000c      	movs	r4, r1
 800c278:	0010      	movs	r0, r2
 800c27a:	0019      	movs	r1, r3
 800c27c:	250a      	movs	r5, #10
 800c27e:	197b      	adds	r3, r7, r5
 800c280:	1c22      	adds	r2, r4, #0
 800c282:	801a      	strh	r2, [r3, #0]
 800c284:	2408      	movs	r4, #8
 800c286:	193b      	adds	r3, r7, r4
 800c288:	1c02      	adds	r2, r0, #0
 800c28a:	801a      	strh	r2, [r3, #0]
 800c28c:	1dbb      	adds	r3, r7, #6
 800c28e:	1c0a      	adds	r2, r1, #0
 800c290:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t dx = 0;
 800c292:	2616      	movs	r6, #22
 800c294:	19bb      	adds	r3, r7, r6
 800c296:	2200      	movs	r2, #0
 800c298:	801a      	strh	r2, [r3, #0]
  u8g2->font_decode.target_x = x;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	197a      	adds	r2, r7, r5
 800c29e:	2164      	movs	r1, #100	; 0x64
 800c2a0:	8812      	ldrh	r2, [r2, #0]
 800c2a2:	525a      	strh	r2, [r3, r1]
  u8g2->font_decode.target_y = y;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	193a      	adds	r2, r7, r4
 800c2a8:	2166      	movs	r1, #102	; 0x66
 800c2aa:	8812      	ldrh	r2, [r2, #0]
 800c2ac:	525a      	strh	r2, [r3, r1]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800c2ae:	1dbb      	adds	r3, r7, #6
 800c2b0:	881a      	ldrh	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	0011      	movs	r1, r2
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f7ff ff45 	bl	800c146 <u8g2_font_get_glyph_data>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	613b      	str	r3, [r7, #16]
  if ( glyph_data != NULL )
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d009      	beq.n	800c2da <u8g2_font_draw_glyph+0x6c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	0011      	movs	r1, r2
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f7ff fdbf 	bl	800be50 <u8g2_font_decode_glyph>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	001a      	movs	r2, r3
 800c2d6:	19bb      	adds	r3, r7, r6
 800c2d8:	801a      	strh	r2, [r3, #0]
  }
  return dx;
 800c2da:	2316      	movs	r3, #22
 800c2dc:	18fb      	adds	r3, r7, r3
 800c2de:	881b      	ldrh	r3, [r3, #0]
}
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	b007      	add	sp, #28
 800c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2e8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800c2e8:	b590      	push	{r4, r7, lr}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	000c      	movs	r4, r1
 800c2f2:	0010      	movs	r0, r2
 800c2f4:	0019      	movs	r1, r3
 800c2f6:	230a      	movs	r3, #10
 800c2f8:	18fb      	adds	r3, r7, r3
 800c2fa:	1c22      	adds	r2, r4, #0
 800c2fc:	801a      	strh	r2, [r3, #0]
 800c2fe:	2308      	movs	r3, #8
 800c300:	18fb      	adds	r3, r7, r3
 800c302:	1c02      	adds	r2, r0, #0
 800c304:	801a      	strh	r2, [r3, #0]
 800c306:	1dbb      	adds	r3, r7, #6
 800c308:	1c0a      	adds	r2, r1, #0
 800c30a:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2270      	movs	r2, #112	; 0x70
 800c310:	5c9b      	ldrb	r3, [r3, r2]
 800c312:	2b03      	cmp	r3, #3
 800c314:	d032      	beq.n	800c37c <u8g2_DrawGlyph+0x94>
 800c316:	dc3f      	bgt.n	800c398 <u8g2_DrawGlyph+0xb0>
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d021      	beq.n	800c360 <u8g2_DrawGlyph+0x78>
 800c31c:	dc3c      	bgt.n	800c398 <u8g2_DrawGlyph+0xb0>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <u8g2_DrawGlyph+0x40>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d00e      	beq.n	800c344 <u8g2_DrawGlyph+0x5c>
 800c326:	e037      	b.n	800c398 <u8g2_DrawGlyph+0xb0>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	0010      	movs	r0, r2
 800c330:	4798      	blx	r3
 800c332:	0003      	movs	r3, r0
 800c334:	0019      	movs	r1, r3
 800c336:	2208      	movs	r2, #8
 800c338:	18bb      	adds	r3, r7, r2
 800c33a:	18ba      	adds	r2, r7, r2
 800c33c:	8812      	ldrh	r2, [r2, #0]
 800c33e:	188a      	adds	r2, r1, r2
 800c340:	801a      	strh	r2, [r3, #0]
      break;
 800c342:	e029      	b.n	800c398 <u8g2_DrawGlyph+0xb0>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	0010      	movs	r0, r2
 800c34c:	4798      	blx	r3
 800c34e:	0003      	movs	r3, r0
 800c350:	0019      	movs	r1, r3
 800c352:	220a      	movs	r2, #10
 800c354:	18bb      	adds	r3, r7, r2
 800c356:	18ba      	adds	r2, r7, r2
 800c358:	8812      	ldrh	r2, [r2, #0]
 800c35a:	1a52      	subs	r2, r2, r1
 800c35c:	801a      	strh	r2, [r3, #0]
      break;
 800c35e:	e01b      	b.n	800c398 <u8g2_DrawGlyph+0xb0>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	0010      	movs	r0, r2
 800c368:	4798      	blx	r3
 800c36a:	0003      	movs	r3, r0
 800c36c:	0019      	movs	r1, r3
 800c36e:	2208      	movs	r2, #8
 800c370:	18bb      	adds	r3, r7, r2
 800c372:	18ba      	adds	r2, r7, r2
 800c374:	8812      	ldrh	r2, [r2, #0]
 800c376:	1a52      	subs	r2, r2, r1
 800c378:	801a      	strh	r2, [r3, #0]
      break;
 800c37a:	e00d      	b.n	800c398 <u8g2_DrawGlyph+0xb0>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	0010      	movs	r0, r2
 800c384:	4798      	blx	r3
 800c386:	0003      	movs	r3, r0
 800c388:	0019      	movs	r1, r3
 800c38a:	220a      	movs	r2, #10
 800c38c:	18bb      	adds	r3, r7, r2
 800c38e:	18ba      	adds	r2, r7, r2
 800c390:	8812      	ldrh	r2, [r2, #0]
 800c392:	188a      	adds	r2, r1, r2
 800c394:	801a      	strh	r2, [r3, #0]
      break;
 800c396:	46c0      	nop			; (mov r8, r8)
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800c398:	1dbb      	adds	r3, r7, #6
 800c39a:	881c      	ldrh	r4, [r3, #0]
 800c39c:	2308      	movs	r3, #8
 800c39e:	18fb      	adds	r3, r7, r3
 800c3a0:	881a      	ldrh	r2, [r3, #0]
 800c3a2:	230a      	movs	r3, #10
 800c3a4:	18fb      	adds	r3, r7, r3
 800c3a6:	8819      	ldrh	r1, [r3, #0]
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	0023      	movs	r3, r4
 800c3ac:	f7ff ff5f 	bl	800c26e <u8g2_font_draw_glyph>
 800c3b0:	0003      	movs	r3, r0
}
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	b005      	add	sp, #20
 800c3b8:	bd90      	pop	{r4, r7, pc}
	...

0800c3bc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800c3bc:	b5b0      	push	{r4, r5, r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	0008      	movs	r0, r1
 800c3c6:	0011      	movs	r1, r2
 800c3c8:	607b      	str	r3, [r7, #4]
 800c3ca:	230a      	movs	r3, #10
 800c3cc:	18fb      	adds	r3, r7, r3
 800c3ce:	1c02      	adds	r2, r0, #0
 800c3d0:	801a      	strh	r2, [r3, #0]
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	18fb      	adds	r3, r7, r3
 800c3d6:	1c0a      	adds	r2, r1, #0
 800c3d8:	801a      	strh	r2, [r3, #0]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f000 fec6 	bl	800d16e <u8x8_utf8_init>
  sum = 0;
 800c3e2:	2316      	movs	r3, #22
 800c3e4:	18fb      	adds	r3, r7, r3
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	801a      	strh	r2, [r3, #0]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	7811      	ldrb	r1, [r2, #0]
 800c3f2:	2514      	movs	r5, #20
 800c3f4:	197c      	adds	r4, r7, r5
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	0010      	movs	r0, r2
 800c3fa:	4798      	blx	r3
 800c3fc:	0003      	movs	r3, r0
 800c3fe:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 800c400:	0029      	movs	r1, r5
 800c402:	187b      	adds	r3, r7, r1
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	4a31      	ldr	r2, [pc, #196]	; (800c4cc <u8g2_draw_string+0x110>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d057      	beq.n	800c4bc <u8g2_draw_string+0x100>
      break;
    str++;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3301      	adds	r3, #1
 800c410:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800c412:	187b      	adds	r3, r7, r1
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	4a2e      	ldr	r2, [pc, #184]	; (800c4d0 <u8g2_draw_string+0x114>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d0e6      	beq.n	800c3ea <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800c41c:	2312      	movs	r3, #18
 800c41e:	18fc      	adds	r4, r7, r3
 800c420:	187b      	adds	r3, r7, r1
 800c422:	881d      	ldrh	r5, [r3, #0]
 800c424:	2308      	movs	r3, #8
 800c426:	18fb      	adds	r3, r7, r3
 800c428:	881a      	ldrh	r2, [r3, #0]
 800c42a:	230a      	movs	r3, #10
 800c42c:	18fb      	adds	r3, r7, r3
 800c42e:	8819      	ldrh	r1, [r3, #0]
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	002b      	movs	r3, r5
 800c434:	f7ff ff58 	bl	800c2e8 <u8g2_DrawGlyph>
 800c438:	0003      	movs	r3, r0
 800c43a:	8023      	strh	r3, [r4, #0]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2270      	movs	r2, #112	; 0x70
 800c440:	5c9b      	ldrb	r3, [r3, r2]
 800c442:	2b03      	cmp	r3, #3
 800c444:	d026      	beq.n	800c494 <u8g2_draw_string+0xd8>
 800c446:	dc2f      	bgt.n	800c4a8 <u8g2_draw_string+0xec>
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d019      	beq.n	800c480 <u8g2_draw_string+0xc4>
 800c44c:	dc2c      	bgt.n	800c4a8 <u8g2_draw_string+0xec>
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <u8g2_draw_string+0x9c>
 800c452:	2b01      	cmp	r3, #1
 800c454:	d00a      	beq.n	800c46c <u8g2_draw_string+0xb0>
 800c456:	e027      	b.n	800c4a8 <u8g2_draw_string+0xec>
      {
	case 0:
	  x += delta;
 800c458:	220a      	movs	r2, #10
 800c45a:	18bb      	adds	r3, r7, r2
 800c45c:	18b9      	adds	r1, r7, r2
 800c45e:	2212      	movs	r2, #18
 800c460:	18ba      	adds	r2, r7, r2
 800c462:	8809      	ldrh	r1, [r1, #0]
 800c464:	8812      	ldrh	r2, [r2, #0]
 800c466:	188a      	adds	r2, r1, r2
 800c468:	801a      	strh	r2, [r3, #0]
	  break;
 800c46a:	e01d      	b.n	800c4a8 <u8g2_draw_string+0xec>
	case 1:
	  y += delta;
 800c46c:	2208      	movs	r2, #8
 800c46e:	18bb      	adds	r3, r7, r2
 800c470:	18b9      	adds	r1, r7, r2
 800c472:	2212      	movs	r2, #18
 800c474:	18ba      	adds	r2, r7, r2
 800c476:	8809      	ldrh	r1, [r1, #0]
 800c478:	8812      	ldrh	r2, [r2, #0]
 800c47a:	188a      	adds	r2, r1, r2
 800c47c:	801a      	strh	r2, [r3, #0]
	  break;
 800c47e:	e013      	b.n	800c4a8 <u8g2_draw_string+0xec>
	case 2:
	  x -= delta;
 800c480:	220a      	movs	r2, #10
 800c482:	18bb      	adds	r3, r7, r2
 800c484:	18b9      	adds	r1, r7, r2
 800c486:	2212      	movs	r2, #18
 800c488:	18ba      	adds	r2, r7, r2
 800c48a:	8809      	ldrh	r1, [r1, #0]
 800c48c:	8812      	ldrh	r2, [r2, #0]
 800c48e:	1a8a      	subs	r2, r1, r2
 800c490:	801a      	strh	r2, [r3, #0]
	  break;
 800c492:	e009      	b.n	800c4a8 <u8g2_draw_string+0xec>
	case 3:
	  y -= delta;
 800c494:	2208      	movs	r2, #8
 800c496:	18bb      	adds	r3, r7, r2
 800c498:	18b9      	adds	r1, r7, r2
 800c49a:	2212      	movs	r2, #18
 800c49c:	18ba      	adds	r2, r7, r2
 800c49e:	8809      	ldrh	r1, [r1, #0]
 800c4a0:	8812      	ldrh	r2, [r2, #0]
 800c4a2:	1a8a      	subs	r2, r1, r2
 800c4a4:	801a      	strh	r2, [r3, #0]
	  break;
 800c4a6:	46c0      	nop			; (mov r8, r8)

#else
      x += delta;
#endif

      sum += delta;    
 800c4a8:	2216      	movs	r2, #22
 800c4aa:	18bb      	adds	r3, r7, r2
 800c4ac:	18b9      	adds	r1, r7, r2
 800c4ae:	2212      	movs	r2, #18
 800c4b0:	18ba      	adds	r2, r7, r2
 800c4b2:	8809      	ldrh	r1, [r1, #0]
 800c4b4:	8812      	ldrh	r2, [r2, #0]
 800c4b6:	188a      	adds	r2, r1, r2
 800c4b8:	801a      	strh	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800c4ba:	e796      	b.n	800c3ea <u8g2_draw_string+0x2e>
      break;
 800c4bc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sum;
 800c4be:	2316      	movs	r3, #22
 800c4c0:	18fb      	adds	r3, r7, r3
 800c4c2:	881b      	ldrh	r3, [r3, #0]
}
 800c4c4:	0018      	movs	r0, r3
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	b006      	add	sp, #24
 800c4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c4cc:	0000ffff 	.word	0x0000ffff
 800c4d0:	0000fffe 	.word	0x0000fffe

0800c4d4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800c4d4:	b5b0      	push	{r4, r5, r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	0008      	movs	r0, r1
 800c4de:	0011      	movs	r1, r2
 800c4e0:	607b      	str	r3, [r7, #4]
 800c4e2:	250a      	movs	r5, #10
 800c4e4:	197b      	adds	r3, r7, r5
 800c4e6:	1c02      	adds	r2, r0, #0
 800c4e8:	801a      	strh	r2, [r3, #0]
 800c4ea:	2008      	movs	r0, #8
 800c4ec:	183b      	adds	r3, r7, r0
 800c4ee:	1c0a      	adds	r2, r1, #0
 800c4f0:	801a      	strh	r2, [r3, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	4a07      	ldr	r2, [pc, #28]	; (800c514 <u8g2_DrawStr+0x40>)
 800c4f6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800c4f8:	687c      	ldr	r4, [r7, #4]
 800c4fa:	183b      	adds	r3, r7, r0
 800c4fc:	881a      	ldrh	r2, [r3, #0]
 800c4fe:	197b      	adds	r3, r7, r5
 800c500:	8819      	ldrh	r1, [r3, #0]
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	0023      	movs	r3, r4
 800c506:	f7ff ff59 	bl	800c3bc <u8g2_draw_string>
 800c50a:	0003      	movs	r3, r0
}
 800c50c:	0018      	movs	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	b004      	add	sp, #16
 800c512:	bdb0      	pop	{r4, r5, r7, pc}
 800c514:	0800d189 	.word	0x0800d189

0800c518 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c524:	2b00      	cmp	r3, #0
 800c526:	d05d      	beq.n	800c5e4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2281      	movs	r2, #129	; 0x81
 800c52c:	5699      	ldrsb	r1, [r3, r2]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	228e      	movs	r2, #142	; 0x8e
 800c532:	5499      	strb	r1, [r3, r2]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2282      	movs	r2, #130	; 0x82
 800c538:	5699      	ldrsb	r1, [r3, r2]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	228f      	movs	r2, #143	; 0x8f
 800c53e:	5499      	strb	r1, [r3, r2]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	228d      	movs	r2, #141	; 0x8d
 800c544:	5c9b      	ldrb	r3, [r3, r2]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d04d      	beq.n	800c5e6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	228d      	movs	r2, #141	; 0x8d
 800c54e:	5c9b      	ldrb	r3, [r3, r2]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d11c      	bne.n	800c58e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	228e      	movs	r2, #142	; 0x8e
 800c558:	569a      	ldrsb	r2, [r3, r2]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2183      	movs	r1, #131	; 0x83
 800c55e:	565b      	ldrsb	r3, [r3, r1]
 800c560:	429a      	cmp	r2, r3
 800c562:	da05      	bge.n	800c570 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2283      	movs	r2, #131	; 0x83
 800c568:	5699      	ldrsb	r1, [r3, r2]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	228e      	movs	r2, #142	; 0x8e
 800c56e:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	228f      	movs	r2, #143	; 0x8f
 800c574:	569a      	ldrsb	r2, [r3, r2]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2184      	movs	r1, #132	; 0x84
 800c57a:	565b      	ldrsb	r3, [r3, r1]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	dd32      	ble.n	800c5e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2284      	movs	r2, #132	; 0x84
 800c584:	5699      	ldrsb	r1, [r3, r2]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	228f      	movs	r2, #143	; 0x8f
 800c58a:	5499      	strb	r1, [r3, r2]
 800c58c:	e02b      	b.n	800c5e6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	228e      	movs	r2, #142	; 0x8e
 800c592:	569b      	ldrsb	r3, [r3, r2]
 800c594:	0019      	movs	r1, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	227e      	movs	r2, #126	; 0x7e
 800c59a:	569b      	ldrsb	r3, [r3, r2]
 800c59c:	0018      	movs	r0, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2280      	movs	r2, #128	; 0x80
 800c5a2:	569b      	ldrsb	r3, [r3, r2]
 800c5a4:	18c3      	adds	r3, r0, r3
 800c5a6:	4299      	cmp	r1, r3
 800c5a8:	da0d      	bge.n	800c5c6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	227e      	movs	r2, #126	; 0x7e
 800c5ae:	569b      	ldrsb	r3, [r3, r2]
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2180      	movs	r1, #128	; 0x80
 800c5b6:	565b      	ldrsb	r3, [r3, r1]
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	18d3      	adds	r3, r2, r3
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	b259      	sxtb	r1, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	228e      	movs	r2, #142	; 0x8e
 800c5c4:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	228f      	movs	r2, #143	; 0x8f
 800c5ca:	569a      	ldrsb	r2, [r3, r2]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2180      	movs	r1, #128	; 0x80
 800c5d0:	565b      	ldrsb	r3, [r3, r1]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	dd07      	ble.n	800c5e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2280      	movs	r2, #128	; 0x80
 800c5da:	5699      	ldrsb	r1, [r3, r2]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	228f      	movs	r2, #143	; 0x8f
 800c5e0:	5499      	strb	r1, [r3, r2]
 800c5e2:	e000      	b.n	800c5e6 <u8g2_UpdateRefHeight+0xce>
    return;
 800c5e4:	46c0      	nop			; (mov r8, r8)
  }  
}
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	b002      	add	sp, #8
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  return 0;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a03      	ldr	r2, [pc, #12]	; (800c618 <u8g2_SetFontPosBaseline+0x18>)
 800c60c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c60e:	46c0      	nop			; (mov r8, r8)
 800c610:	46bd      	mov	sp, r7
 800c612:	b002      	add	sp, #8
 800c614:	bd80      	pop	{r7, pc}
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	0800c5ed 	.word	0x0800c5ed

0800c61c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d00d      	beq.n	800c64c <u8g2_SetFont+0x30>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3374      	adds	r3, #116	; 0x74
 800c63a:	683a      	ldr	r2, [r7, #0]
 800c63c:	0011      	movs	r1, r2
 800c63e:	0018      	movs	r0, r3
 800c640:	f7ff f90b 	bl	800b85a <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	0018      	movs	r0, r3
 800c648:	f7ff ff66 	bl	800c518 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800c64c:	46c0      	nop			; (mov r8, r8)
 800c64e:	46bd      	mov	sp, r7
 800c650:	b002      	add	sp, #8
 800c652:	bd80      	pop	{r7, pc}

0800c654 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	0019      	movs	r1, r3
 800c660:	1dbb      	adds	r3, r7, #6
 800c662:	801a      	strh	r2, [r3, #0]
 800c664:	1d3b      	adds	r3, r7, #4
 800c666:	1c0a      	adds	r2, r1, #0
 800c668:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 800c66a:	2416      	movs	r4, #22
 800c66c:	193b      	adds	r3, r7, r4
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	8812      	ldrh	r2, [r2, #0]
 800c672:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 800c674:	2014      	movs	r0, #20
 800c676:	183b      	adds	r3, r7, r0
 800c678:	193a      	adds	r2, r7, r4
 800c67a:	8812      	ldrh	r2, [r2, #0]
 800c67c:	801a      	strh	r2, [r3, #0]
  b += *len;
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	8819      	ldrh	r1, [r3, #0]
 800c682:	183b      	adds	r3, r7, r0
 800c684:	183a      	adds	r2, r7, r0
 800c686:	8812      	ldrh	r2, [r2, #0]
 800c688:	188a      	adds	r2, r1, r2
 800c68a:	801a      	strh	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800c68c:	193a      	adds	r2, r7, r4
 800c68e:	0001      	movs	r1, r0
 800c690:	187b      	adds	r3, r7, r1
 800c692:	8812      	ldrh	r2, [r2, #0]
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d914      	bls.n	800c6c4 <u8g2_clip_intersection2+0x70>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800c69a:	193a      	adds	r2, r7, r4
 800c69c:	1d3b      	adds	r3, r7, #4
 800c69e:	8812      	ldrh	r2, [r2, #0]
 800c6a0:	881b      	ldrh	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d209      	bcs.n	800c6ba <u8g2_clip_intersection2+0x66>
    {
      b = d;
 800c6a6:	187b      	adds	r3, r7, r1
 800c6a8:	1d3a      	adds	r2, r7, #4
 800c6aa:	8812      	ldrh	r2, [r2, #0]
 800c6ac:	801a      	strh	r2, [r3, #0]
      b--;
 800c6ae:	187b      	adds	r3, r7, r1
 800c6b0:	881a      	ldrh	r2, [r3, #0]
 800c6b2:	187b      	adds	r3, r7, r1
 800c6b4:	3a01      	subs	r2, #1
 800c6b6:	801a      	strh	r2, [r3, #0]
 800c6b8:	e004      	b.n	800c6c4 <u8g2_clip_intersection2+0x70>
    }
    else
    {
      a = c;
 800c6ba:	2316      	movs	r3, #22
 800c6bc:	18fb      	adds	r3, r7, r3
 800c6be:	1dba      	adds	r2, r7, #6
 800c6c0:	8812      	ldrh	r2, [r2, #0]
 800c6c2:	801a      	strh	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800c6c4:	2316      	movs	r3, #22
 800c6c6:	18fa      	adds	r2, r7, r3
 800c6c8:	1d3b      	adds	r3, r7, #4
 800c6ca:	8812      	ldrh	r2, [r2, #0]
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d301      	bcc.n	800c6d6 <u8g2_clip_intersection2+0x82>
    return 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e030      	b.n	800c738 <u8g2_clip_intersection2+0xe4>
  if ( b <= c )
 800c6d6:	2314      	movs	r3, #20
 800c6d8:	18fa      	adds	r2, r7, r3
 800c6da:	1dbb      	adds	r3, r7, #6
 800c6dc:	8812      	ldrh	r2, [r2, #0]
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d801      	bhi.n	800c6e8 <u8g2_clip_intersection2+0x94>
    return 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	e027      	b.n	800c738 <u8g2_clip_intersection2+0xe4>
  if ( a < c )		
 800c6e8:	2116      	movs	r1, #22
 800c6ea:	187a      	adds	r2, r7, r1
 800c6ec:	1dbb      	adds	r3, r7, #6
 800c6ee:	8812      	ldrh	r2, [r2, #0]
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d203      	bcs.n	800c6fe <u8g2_clip_intersection2+0xaa>
    a = c;
 800c6f6:	187b      	adds	r3, r7, r1
 800c6f8:	1dba      	adds	r2, r7, #6
 800c6fa:	8812      	ldrh	r2, [r2, #0]
 800c6fc:	801a      	strh	r2, [r3, #0]
  if ( b > d )
 800c6fe:	2114      	movs	r1, #20
 800c700:	187a      	adds	r2, r7, r1
 800c702:	1d3b      	adds	r3, r7, #4
 800c704:	8812      	ldrh	r2, [r2, #0]
 800c706:	881b      	ldrh	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d903      	bls.n	800c714 <u8g2_clip_intersection2+0xc0>
    b = d;
 800c70c:	187b      	adds	r3, r7, r1
 800c70e:	1d3a      	adds	r2, r7, #4
 800c710:	8812      	ldrh	r2, [r2, #0]
 800c712:	801a      	strh	r2, [r3, #0]
  
  *ap = a;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2416      	movs	r4, #22
 800c718:	193a      	adds	r2, r7, r4
 800c71a:	8812      	ldrh	r2, [r2, #0]
 800c71c:	801a      	strh	r2, [r3, #0]
  b -= a;
 800c71e:	2014      	movs	r0, #20
 800c720:	183b      	adds	r3, r7, r0
 800c722:	1839      	adds	r1, r7, r0
 800c724:	193a      	adds	r2, r7, r4
 800c726:	8809      	ldrh	r1, [r1, #0]
 800c728:	8812      	ldrh	r2, [r2, #0]
 800c72a:	1a8a      	subs	r2, r1, r2
 800c72c:	801a      	strh	r2, [r3, #0]
  *len = b;
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	183a      	adds	r2, r7, r0
 800c732:	8812      	ldrh	r2, [r2, #0]
 800c734:	801a      	strh	r2, [r3, #0]
  return 1;
 800c736:	2301      	movs	r3, #1
}
 800c738:	0018      	movs	r0, r3
 800c73a:	46bd      	mov	sp, r7
 800c73c:	b007      	add	sp, #28
 800c73e:	bd90      	pop	{r4, r7, pc}

0800c740 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800c740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c742:	b087      	sub	sp, #28
 800c744:	af02      	add	r7, sp, #8
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	000c      	movs	r4, r1
 800c74a:	0010      	movs	r0, r2
 800c74c:	0019      	movs	r1, r3
 800c74e:	260a      	movs	r6, #10
 800c750:	19bb      	adds	r3, r7, r6
 800c752:	1c22      	adds	r2, r4, #0
 800c754:	801a      	strh	r2, [r3, #0]
 800c756:	2408      	movs	r4, #8
 800c758:	193b      	adds	r3, r7, r4
 800c75a:	1c02      	adds	r2, r0, #0
 800c75c:	801a      	strh	r2, [r3, #0]
 800c75e:	1dbb      	adds	r3, r7, #6
 800c760:	1c0a      	adds	r2, r1, #0
 800c762:	801a      	strh	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800c768:	0020      	movs	r0, r4
 800c76a:	183b      	adds	r3, r7, r0
 800c76c:	1839      	adds	r1, r7, r0
 800c76e:	8809      	ldrh	r1, [r1, #0]
 800c770:	1a8a      	subs	r2, r1, r2
 800c772:	801a      	strh	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c778:	1dbb      	adds	r3, r7, #6
 800c77a:	881d      	ldrh	r5, [r3, #0]
 800c77c:	183b      	adds	r3, r7, r0
 800c77e:	881a      	ldrh	r2, [r3, #0]
 800c780:	19bb      	adds	r3, r7, r6
 800c782:	8819      	ldrh	r1, [r3, #0]
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	2320      	movs	r3, #32
 800c788:	2608      	movs	r6, #8
 800c78a:	199b      	adds	r3, r3, r6
 800c78c:	19db      	adds	r3, r3, r7
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	002b      	movs	r3, r5
 800c794:	47a0      	blx	r4
}
 800c796:	46c0      	nop			; (mov r8, r8)
 800c798:	46bd      	mov	sp, r7
 800c79a:	b005      	add	sp, #20
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c79e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800c79e:	b5b0      	push	{r4, r5, r7, lr}
 800c7a0:	b086      	sub	sp, #24
 800c7a2:	af02      	add	r7, sp, #8
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	000c      	movs	r4, r1
 800c7a8:	0010      	movs	r0, r2
 800c7aa:	0019      	movs	r1, r3
 800c7ac:	250a      	movs	r5, #10
 800c7ae:	197b      	adds	r3, r7, r5
 800c7b0:	1c22      	adds	r2, r4, #0
 800c7b2:	801a      	strh	r2, [r3, #0]
 800c7b4:	2308      	movs	r3, #8
 800c7b6:	18fb      	adds	r3, r7, r3
 800c7b8:	1c02      	adds	r2, r0, #0
 800c7ba:	801a      	strh	r2, [r3, #0]
 800c7bc:	1dbb      	adds	r3, r7, #6
 800c7be:	1c0a      	adds	r2, r1, #0
 800c7c0:	801a      	strh	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	228c      	movs	r2, #140	; 0x8c
 800c7c6:	5c9b      	ldrb	r3, [r3, r2]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d100      	bne.n	800c7ce <u8g2_DrawHVLine+0x30>
 800c7cc:	e090      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800c7ce:	1dbb      	adds	r3, r7, #6
 800c7d0:	881b      	ldrh	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d100      	bne.n	800c7d8 <u8g2_DrawHVLine+0x3a>
 800c7d6:	e08b      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800c7d8:	1dbb      	adds	r3, r7, #6
 800c7da:	881b      	ldrh	r3, [r3, #0]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d927      	bls.n	800c830 <u8g2_DrawHVLine+0x92>
      {
	if ( dir == 2 )
 800c7e0:	2320      	movs	r3, #32
 800c7e2:	18fb      	adds	r3, r7, r3
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d10e      	bne.n	800c808 <u8g2_DrawHVLine+0x6a>
	{
	  x -= len;
 800c7ea:	197b      	adds	r3, r7, r5
 800c7ec:	881a      	ldrh	r2, [r3, #0]
 800c7ee:	1dbb      	adds	r3, r7, #6
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	197b      	adds	r3, r7, r5
 800c7f8:	801a      	strh	r2, [r3, #0]
	  x++;
 800c7fa:	197b      	adds	r3, r7, r5
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	3301      	adds	r3, #1
 800c800:	b29a      	uxth	r2, r3
 800c802:	197b      	adds	r3, r7, r5
 800c804:	801a      	strh	r2, [r3, #0]
 800c806:	e013      	b.n	800c830 <u8g2_DrawHVLine+0x92>
	}
	else if ( dir == 3 )
 800c808:	2320      	movs	r3, #32
 800c80a:	18fb      	adds	r3, r7, r3
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b03      	cmp	r3, #3
 800c810:	d10e      	bne.n	800c830 <u8g2_DrawHVLine+0x92>
	{
	  y -= len;
 800c812:	2108      	movs	r1, #8
 800c814:	187b      	adds	r3, r7, r1
 800c816:	881a      	ldrh	r2, [r3, #0]
 800c818:	1dbb      	adds	r3, r7, #6
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	b29a      	uxth	r2, r3
 800c820:	187b      	adds	r3, r7, r1
 800c822:	801a      	strh	r2, [r3, #0]
	  y++;
 800c824:	187b      	adds	r3, r7, r1
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	3301      	adds	r3, #1
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	187b      	adds	r3, r7, r1
 800c82e:	801a      	strh	r2, [r3, #0]
	}
      }
      dir &= 1;  
 800c830:	2020      	movs	r0, #32
 800c832:	183b      	adds	r3, r7, r0
 800c834:	183a      	adds	r2, r7, r0
 800c836:	7812      	ldrb	r2, [r2, #0]
 800c838:	2101      	movs	r1, #1
 800c83a:	400a      	ands	r2, r1
 800c83c:	701a      	strb	r2, [r3, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 800c83e:	183b      	adds	r3, r7, r0
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d11c      	bne.n	800c880 <u8g2_DrawHVLine+0xe2>
      {
	if ( y < u8g2->user_y0 )
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	224c      	movs	r2, #76	; 0x4c
 800c84a:	5a9a      	ldrh	r2, [r3, r2]
 800c84c:	2108      	movs	r1, #8
 800c84e:	187b      	adds	r3, r7, r1
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	429a      	cmp	r2, r3
 800c854:	d843      	bhi.n	800c8de <u8g2_DrawHVLine+0x140>
	  return;
	if ( y >= u8g2->user_y1 )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	224e      	movs	r2, #78	; 0x4e
 800c85a:	5a9a      	ldrh	r2, [r3, r2]
 800c85c:	187b      	adds	r3, r7, r1
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d93e      	bls.n	800c8e2 <u8g2_DrawHVLine+0x144>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2248      	movs	r2, #72	; 0x48
 800c868:	5a9a      	ldrh	r2, [r3, r2]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	214a      	movs	r1, #74	; 0x4a
 800c86e:	5a5b      	ldrh	r3, [r3, r1]
 800c870:	1db9      	adds	r1, r7, #6
 800c872:	200a      	movs	r0, #10
 800c874:	1838      	adds	r0, r7, r0
 800c876:	f7ff feed 	bl	800c654 <u8g2_clip_intersection2>
 800c87a:	1e03      	subs	r3, r0, #0
 800c87c:	d11c      	bne.n	800c8b8 <u8g2_DrawHVLine+0x11a>
	  return;
 800c87e:	e037      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2248      	movs	r2, #72	; 0x48
 800c884:	5a9a      	ldrh	r2, [r3, r2]
 800c886:	210a      	movs	r1, #10
 800c888:	187b      	adds	r3, r7, r1
 800c88a:	881b      	ldrh	r3, [r3, #0]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d82a      	bhi.n	800c8e6 <u8g2_DrawHVLine+0x148>
	  return;
	if ( x >= u8g2->user_x1 )
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	224a      	movs	r2, #74	; 0x4a
 800c894:	5a9a      	ldrh	r2, [r3, r2]
 800c896:	187b      	adds	r3, r7, r1
 800c898:	881b      	ldrh	r3, [r3, #0]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d925      	bls.n	800c8ea <u8g2_DrawHVLine+0x14c>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	224c      	movs	r2, #76	; 0x4c
 800c8a2:	5a9a      	ldrh	r2, [r3, r2]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	214e      	movs	r1, #78	; 0x4e
 800c8a8:	5a5b      	ldrh	r3, [r3, r1]
 800c8aa:	1db9      	adds	r1, r7, #6
 800c8ac:	2008      	movs	r0, #8
 800c8ae:	1838      	adds	r0, r7, r0
 800c8b0:	f7ff fed0 	bl	800c654 <u8g2_clip_intersection2>
 800c8b4:	1e03      	subs	r3, r0, #0
 800c8b6:	d01a      	beq.n	800c8ee <u8g2_DrawHVLine+0x150>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8bc:	689c      	ldr	r4, [r3, #8]
 800c8be:	230a      	movs	r3, #10
 800c8c0:	18fb      	adds	r3, r7, r3
 800c8c2:	8819      	ldrh	r1, [r3, #0]
 800c8c4:	2308      	movs	r3, #8
 800c8c6:	18fb      	adds	r3, r7, r3
 800c8c8:	881a      	ldrh	r2, [r3, #0]
 800c8ca:	1dbb      	adds	r3, r7, #6
 800c8cc:	881d      	ldrh	r5, [r3, #0]
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	2320      	movs	r3, #32
 800c8d2:	18fb      	adds	r3, r7, r3
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	002b      	movs	r3, r5
 800c8da:	47a0      	blx	r4
 800c8dc:	e008      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
	  return;
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	e006      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
	  return;
 800c8e2:	46c0      	nop			; (mov r8, r8)
 800c8e4:	e004      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
	  return;
 800c8e6:	46c0      	nop			; (mov r8, r8)
 800c8e8:	e002      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
	  return;
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	e000      	b.n	800c8f0 <u8g2_DrawHVLine+0x152>
	  return;
 800c8ee:	46c0      	nop			; (mov r8, r8)
    }
}
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	b004      	add	sp, #16
 800c8f4:	bdb0      	pop	{r4, r5, r7, pc}

0800c8f6 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b084      	sub	sp, #16
 800c8fa:	af02      	add	r7, sp, #8
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	0008      	movs	r0, r1
 800c900:	0011      	movs	r1, r2
 800c902:	1cbb      	adds	r3, r7, #2
 800c904:	1c02      	adds	r2, r0, #0
 800c906:	801a      	strh	r2, [r3, #0]
 800c908:	003b      	movs	r3, r7
 800c90a:	1c0a      	adds	r2, r1, #0
 800c90c:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	224c      	movs	r2, #76	; 0x4c
 800c912:	5a9b      	ldrh	r3, [r3, r2]
 800c914:	003a      	movs	r2, r7
 800c916:	8812      	ldrh	r2, [r2, #0]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d31f      	bcc.n	800c95c <u8g2_DrawPixel+0x66>
    return;
  if ( y >= u8g2->user_y1 )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	224e      	movs	r2, #78	; 0x4e
 800c920:	5a9b      	ldrh	r3, [r3, r2]
 800c922:	003a      	movs	r2, r7
 800c924:	8812      	ldrh	r2, [r2, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d21a      	bcs.n	800c960 <u8g2_DrawPixel+0x6a>
    return;
  if ( x < u8g2->user_x0 )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2248      	movs	r2, #72	; 0x48
 800c92e:	5a9b      	ldrh	r3, [r3, r2]
 800c930:	1cba      	adds	r2, r7, #2
 800c932:	8812      	ldrh	r2, [r2, #0]
 800c934:	429a      	cmp	r2, r3
 800c936:	d315      	bcc.n	800c964 <u8g2_DrawPixel+0x6e>
    return;
  if ( x >= u8g2->user_x1 )
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	224a      	movs	r2, #74	; 0x4a
 800c93c:	5a9b      	ldrh	r3, [r3, r2]
 800c93e:	1cba      	adds	r2, r7, #2
 800c940:	8812      	ldrh	r2, [r2, #0]
 800c942:	429a      	cmp	r2, r3
 800c944:	d210      	bcs.n	800c968 <u8g2_DrawPixel+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800c946:	003b      	movs	r3, r7
 800c948:	881a      	ldrh	r2, [r3, #0]
 800c94a:	1cbb      	adds	r3, r7, #2
 800c94c:	8819      	ldrh	r1, [r3, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	2300      	movs	r3, #0
 800c952:	9300      	str	r3, [sp, #0]
 800c954:	2301      	movs	r3, #1
 800c956:	f7ff ff22 	bl	800c79e <u8g2_DrawHVLine>
 800c95a:	e006      	b.n	800c96a <u8g2_DrawPixel+0x74>
    return;
 800c95c:	46c0      	nop			; (mov r8, r8)
 800c95e:	e004      	b.n	800c96a <u8g2_DrawPixel+0x74>
    return;
 800c960:	46c0      	nop			; (mov r8, r8)
 800c962:	e002      	b.n	800c96a <u8g2_DrawPixel+0x74>
    return;
 800c964:	46c0      	nop			; (mov r8, r8)
 800c966:	e000      	b.n	800c96a <u8g2_DrawPixel+0x74>
    return;
 800c968:	46c0      	nop			; (mov r8, r8)
}
 800c96a:	46bd      	mov	sp, r7
 800c96c:	b002      	add	sp, #8
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800c970:	b5b0      	push	{r4, r5, r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	0005      	movs	r5, r0
 800c978:	000c      	movs	r4, r1
 800c97a:	0010      	movs	r0, r2
 800c97c:	0019      	movs	r1, r3
 800c97e:	1dbb      	adds	r3, r7, #6
 800c980:	1c2a      	adds	r2, r5, #0
 800c982:	801a      	strh	r2, [r3, #0]
 800c984:	1d3b      	adds	r3, r7, #4
 800c986:	1c22      	adds	r2, r4, #0
 800c988:	801a      	strh	r2, [r3, #0]
 800c98a:	1cbb      	adds	r3, r7, #2
 800c98c:	1c02      	adds	r2, r0, #0
 800c98e:	801a      	strh	r2, [r3, #0]
 800c990:	003b      	movs	r3, r7
 800c992:	1c0a      	adds	r2, r1, #0
 800c994:	801a      	strh	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 800c996:	1cba      	adds	r2, r7, #2
 800c998:	1d3b      	adds	r3, r7, #4
 800c99a:	8812      	ldrh	r2, [r2, #0]
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d211      	bcs.n	800c9c6 <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 800c9a2:	003a      	movs	r2, r7
 800c9a4:	1dbb      	adds	r3, r7, #6
 800c9a6:	8812      	ldrh	r2, [r2, #0]
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d901      	bls.n	800c9b2 <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e01a      	b.n	800c9e8 <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800c9b2:	1cba      	adds	r2, r7, #2
 800c9b4:	003b      	movs	r3, r7
 800c9b6:	8812      	ldrh	r2, [r2, #0]
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d901      	bls.n	800c9c2 <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e012      	b.n	800c9e8 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e010      	b.n	800c9e8 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800c9c6:	003a      	movs	r2, r7
 800c9c8:	1dbb      	adds	r3, r7, #6
 800c9ca:	8812      	ldrh	r2, [r2, #0]
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d909      	bls.n	800c9e6 <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 800c9d2:	1cba      	adds	r2, r7, #2
 800c9d4:	003b      	movs	r3, r7
 800c9d6:	8812      	ldrh	r2, [r2, #0]
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d901      	bls.n	800c9e2 <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e002      	b.n	800c9e8 <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e000      	b.n	800c9e8 <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 800c9e6:	2300      	movs	r3, #0
    }
  }
}
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	b002      	add	sp, #8
 800c9ee:	bdb0      	pop	{r4, r5, r7, pc}

0800c9f0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800c9f0:	b5b0      	push	{r4, r5, r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	000c      	movs	r4, r1
 800c9fa:	0010      	movs	r0, r2
 800c9fc:	0019      	movs	r1, r3
 800c9fe:	230a      	movs	r3, #10
 800ca00:	18fb      	adds	r3, r7, r3
 800ca02:	1c22      	adds	r2, r4, #0
 800ca04:	801a      	strh	r2, [r3, #0]
 800ca06:	2508      	movs	r5, #8
 800ca08:	197b      	adds	r3, r7, r5
 800ca0a:	1c02      	adds	r2, r0, #0
 800ca0c:	801a      	strh	r2, [r3, #0]
 800ca0e:	1dbb      	adds	r3, r7, #6
 800ca10:	1c0a      	adds	r2, r1, #0
 800ca12:	801a      	strh	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	224c      	movs	r2, #76	; 0x4c
 800ca18:	5a98      	ldrh	r0, [r3, r2]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	224e      	movs	r2, #78	; 0x4e
 800ca1e:	5a99      	ldrh	r1, [r3, r2]
 800ca20:	2320      	movs	r3, #32
 800ca22:	18fb      	adds	r3, r7, r3
 800ca24:	881c      	ldrh	r4, [r3, #0]
 800ca26:	197b      	adds	r3, r7, r5
 800ca28:	881a      	ldrh	r2, [r3, #0]
 800ca2a:	0023      	movs	r3, r4
 800ca2c:	f7ff ffa0 	bl	800c970 <u8g2_is_intersection_decision_tree>
 800ca30:	1e03      	subs	r3, r0, #0
 800ca32:	d101      	bne.n	800ca38 <u8g2_IsIntersection+0x48>
    return 0; 
 800ca34:	2300      	movs	r3, #0
 800ca36:	e00e      	b.n	800ca56 <u8g2_IsIntersection+0x66>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2248      	movs	r2, #72	; 0x48
 800ca3c:	5a98      	ldrh	r0, [r3, r2]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	224a      	movs	r2, #74	; 0x4a
 800ca42:	5a99      	ldrh	r1, [r3, r2]
 800ca44:	1dbb      	adds	r3, r7, #6
 800ca46:	881c      	ldrh	r4, [r3, #0]
 800ca48:	230a      	movs	r3, #10
 800ca4a:	18fb      	adds	r3, r7, r3
 800ca4c:	881a      	ldrh	r2, [r3, #0]
 800ca4e:	0023      	movs	r3, r4
 800ca50:	f7ff ff8e 	bl	800c970 <u8g2_is_intersection_decision_tree>
 800ca54:	0003      	movs	r3, r0
}
 800ca56:	0018      	movs	r0, r3
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	b004      	add	sp, #16
 800ca5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ca60 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 800ca60:	b5b0      	push	{r4, r5, r7, lr}
 800ca62:	b088      	sub	sp, #32
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	000c      	movs	r4, r1
 800ca6a:	0010      	movs	r0, r2
 800ca6c:	0019      	movs	r1, r3
 800ca6e:	250a      	movs	r5, #10
 800ca70:	197b      	adds	r3, r7, r5
 800ca72:	1c22      	adds	r2, r4, #0
 800ca74:	801a      	strh	r2, [r3, #0]
 800ca76:	2308      	movs	r3, #8
 800ca78:	18fb      	adds	r3, r7, r3
 800ca7a:	1c02      	adds	r2, r0, #0
 800ca7c:	801a      	strh	r2, [r3, #0]
 800ca7e:	1dbb      	adds	r3, r7, #6
 800ca80:	1c0a      	adds	r2, r1, #0
 800ca82:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800ca84:	2313      	movs	r3, #19
 800ca86:	18fb      	adds	r3, r7, r3
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800ca8c:	197a      	adds	r2, r7, r5
 800ca8e:	1dbb      	adds	r3, r7, #6
 800ca90:	8812      	ldrh	r2, [r2, #0]
 800ca92:	881b      	ldrh	r3, [r3, #0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d908      	bls.n	800caaa <u8g2_DrawLine+0x4a>
 800ca98:	231a      	movs	r3, #26
 800ca9a:	18fb      	adds	r3, r7, r3
 800ca9c:	1979      	adds	r1, r7, r5
 800ca9e:	1dba      	adds	r2, r7, #6
 800caa0:	8809      	ldrh	r1, [r1, #0]
 800caa2:	8812      	ldrh	r2, [r2, #0]
 800caa4:	1a8a      	subs	r2, r1, r2
 800caa6:	801a      	strh	r2, [r3, #0]
 800caa8:	e008      	b.n	800cabc <u8g2_DrawLine+0x5c>
 800caaa:	231a      	movs	r3, #26
 800caac:	18fb      	adds	r3, r7, r3
 800caae:	1db9      	adds	r1, r7, #6
 800cab0:	220a      	movs	r2, #10
 800cab2:	18ba      	adds	r2, r7, r2
 800cab4:	8809      	ldrh	r1, [r1, #0]
 800cab6:	8812      	ldrh	r2, [r2, #0]
 800cab8:	1a8a      	subs	r2, r1, r2
 800caba:	801a      	strh	r2, [r3, #0]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800cabc:	2108      	movs	r1, #8
 800cabe:	187a      	adds	r2, r7, r1
 800cac0:	2030      	movs	r0, #48	; 0x30
 800cac2:	183b      	adds	r3, r7, r0
 800cac4:	8812      	ldrh	r2, [r2, #0]
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d908      	bls.n	800cade <u8g2_DrawLine+0x7e>
 800cacc:	2318      	movs	r3, #24
 800cace:	18fa      	adds	r2, r7, r3
 800cad0:	1879      	adds	r1, r7, r1
 800cad2:	183b      	adds	r3, r7, r0
 800cad4:	8809      	ldrh	r1, [r1, #0]
 800cad6:	881b      	ldrh	r3, [r3, #0]
 800cad8:	1acb      	subs	r3, r1, r3
 800cada:	8013      	strh	r3, [r2, #0]
 800cadc:	e009      	b.n	800caf2 <u8g2_DrawLine+0x92>
 800cade:	2318      	movs	r3, #24
 800cae0:	18fa      	adds	r2, r7, r3
 800cae2:	2330      	movs	r3, #48	; 0x30
 800cae4:	18fb      	adds	r3, r7, r3
 800cae6:	2108      	movs	r1, #8
 800cae8:	1878      	adds	r0, r7, r1
 800caea:	8819      	ldrh	r1, [r3, #0]
 800caec:	8803      	ldrh	r3, [r0, #0]
 800caee:	1acb      	subs	r3, r1, r3
 800caf0:	8013      	strh	r3, [r2, #0]

  if ( dy > dx ) 
 800caf2:	2018      	movs	r0, #24
 800caf4:	183a      	adds	r2, r7, r0
 800caf6:	241a      	movs	r4, #26
 800caf8:	193b      	adds	r3, r7, r4
 800cafa:	8812      	ldrh	r2, [r2, #0]
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d92b      	bls.n	800cb5a <u8g2_DrawLine+0xfa>
  {
    swapxy = 1;
 800cb02:	2313      	movs	r3, #19
 800cb04:	18fb      	adds	r3, r7, r3
 800cb06:	2201      	movs	r2, #1
 800cb08:	701a      	strb	r2, [r3, #0]
    tmp = dx; dx =dy; dy = tmp;
 800cb0a:	2110      	movs	r1, #16
 800cb0c:	187b      	adds	r3, r7, r1
 800cb0e:	193a      	adds	r2, r7, r4
 800cb10:	8812      	ldrh	r2, [r2, #0]
 800cb12:	801a      	strh	r2, [r3, #0]
 800cb14:	193b      	adds	r3, r7, r4
 800cb16:	183a      	adds	r2, r7, r0
 800cb18:	8812      	ldrh	r2, [r2, #0]
 800cb1a:	801a      	strh	r2, [r3, #0]
 800cb1c:	183b      	adds	r3, r7, r0
 800cb1e:	187a      	adds	r2, r7, r1
 800cb20:	8812      	ldrh	r2, [r2, #0]
 800cb22:	801a      	strh	r2, [r3, #0]
    tmp = x1; x1 =y1; y1 = tmp;
 800cb24:	187b      	adds	r3, r7, r1
 800cb26:	200a      	movs	r0, #10
 800cb28:	183a      	adds	r2, r7, r0
 800cb2a:	8812      	ldrh	r2, [r2, #0]
 800cb2c:	801a      	strh	r2, [r3, #0]
 800cb2e:	183b      	adds	r3, r7, r0
 800cb30:	2008      	movs	r0, #8
 800cb32:	183a      	adds	r2, r7, r0
 800cb34:	8812      	ldrh	r2, [r2, #0]
 800cb36:	801a      	strh	r2, [r3, #0]
 800cb38:	183b      	adds	r3, r7, r0
 800cb3a:	187a      	adds	r2, r7, r1
 800cb3c:	8812      	ldrh	r2, [r2, #0]
 800cb3e:	801a      	strh	r2, [r3, #0]
    tmp = x2; x2 =y2; y2 = tmp;
 800cb40:	187b      	adds	r3, r7, r1
 800cb42:	1dba      	adds	r2, r7, #6
 800cb44:	8812      	ldrh	r2, [r2, #0]
 800cb46:	801a      	strh	r2, [r3, #0]
 800cb48:	1dba      	adds	r2, r7, #6
 800cb4a:	2030      	movs	r0, #48	; 0x30
 800cb4c:	183b      	adds	r3, r7, r0
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	8013      	strh	r3, [r2, #0]
 800cb52:	183b      	adds	r3, r7, r0
 800cb54:	187a      	adds	r2, r7, r1
 800cb56:	8812      	ldrh	r2, [r2, #0]
 800cb58:	801a      	strh	r2, [r3, #0]
  }
  if ( x1 > x2 ) 
 800cb5a:	200a      	movs	r0, #10
 800cb5c:	183a      	adds	r2, r7, r0
 800cb5e:	1dbb      	adds	r3, r7, #6
 800cb60:	8812      	ldrh	r2, [r2, #0]
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d91a      	bls.n	800cb9e <u8g2_DrawLine+0x13e>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800cb68:	2110      	movs	r1, #16
 800cb6a:	187b      	adds	r3, r7, r1
 800cb6c:	183a      	adds	r2, r7, r0
 800cb6e:	8812      	ldrh	r2, [r2, #0]
 800cb70:	801a      	strh	r2, [r3, #0]
 800cb72:	183b      	adds	r3, r7, r0
 800cb74:	1dba      	adds	r2, r7, #6
 800cb76:	8812      	ldrh	r2, [r2, #0]
 800cb78:	801a      	strh	r2, [r3, #0]
 800cb7a:	1dbb      	adds	r3, r7, #6
 800cb7c:	187a      	adds	r2, r7, r1
 800cb7e:	8812      	ldrh	r2, [r2, #0]
 800cb80:	801a      	strh	r2, [r3, #0]
    tmp = y1; y1 =y2; y2 = tmp;
 800cb82:	187b      	adds	r3, r7, r1
 800cb84:	2008      	movs	r0, #8
 800cb86:	183a      	adds	r2, r7, r0
 800cb88:	8812      	ldrh	r2, [r2, #0]
 800cb8a:	801a      	strh	r2, [r3, #0]
 800cb8c:	183a      	adds	r2, r7, r0
 800cb8e:	2030      	movs	r0, #48	; 0x30
 800cb90:	183b      	adds	r3, r7, r0
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	8013      	strh	r3, [r2, #0]
 800cb96:	183b      	adds	r3, r7, r0
 800cb98:	187a      	adds	r2, r7, r1
 800cb9a:	8812      	ldrh	r2, [r2, #0]
 800cb9c:	801a      	strh	r2, [r3, #0]
  }
  err = dx >> 1;
 800cb9e:	231a      	movs	r3, #26
 800cba0:	18fb      	adds	r3, r7, r3
 800cba2:	881b      	ldrh	r3, [r3, #0]
 800cba4:	085b      	lsrs	r3, r3, #1
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	2316      	movs	r3, #22
 800cbaa:	18fb      	adds	r3, r7, r3
 800cbac:	801a      	strh	r2, [r3, #0]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800cbae:	2330      	movs	r3, #48	; 0x30
 800cbb0:	18fb      	adds	r3, r7, r3
 800cbb2:	2208      	movs	r2, #8
 800cbb4:	18b9      	adds	r1, r7, r2
 800cbb6:	881a      	ldrh	r2, [r3, #0]
 800cbb8:	880b      	ldrh	r3, [r1, #0]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d904      	bls.n	800cbc8 <u8g2_DrawLine+0x168>
 800cbbe:	2314      	movs	r3, #20
 800cbc0:	18fb      	adds	r3, r7, r3
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	801a      	strh	r2, [r3, #0]
 800cbc6:	e004      	b.n	800cbd2 <u8g2_DrawLine+0x172>
 800cbc8:	2314      	movs	r3, #20
 800cbca:	18fb      	adds	r3, r7, r3
 800cbcc:	2201      	movs	r2, #1
 800cbce:	4252      	negs	r2, r2
 800cbd0:	801a      	strh	r2, [r3, #0]
  y = y1;
 800cbd2:	231c      	movs	r3, #28
 800cbd4:	18fb      	adds	r3, r7, r3
 800cbd6:	2208      	movs	r2, #8
 800cbd8:	18ba      	adds	r2, r7, r2
 800cbda:	8812      	ldrh	r2, [r2, #0]
 800cbdc:	801a      	strh	r2, [r3, #0]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 800cbde:	1dbb      	adds	r3, r7, #6
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	4a2f      	ldr	r2, [pc, #188]	; (800cca0 <u8g2_DrawLine+0x240>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d104      	bne.n	800cbf2 <u8g2_DrawLine+0x192>
    x2--;
 800cbe8:	1dbb      	adds	r3, r7, #6
 800cbea:	881a      	ldrh	r2, [r3, #0]
 800cbec:	1dbb      	adds	r3, r7, #6
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	801a      	strh	r2, [r3, #0]
#endif

  for( x = x1; x <= x2; x++ )
 800cbf2:	231e      	movs	r3, #30
 800cbf4:	18fb      	adds	r3, r7, r3
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	18ba      	adds	r2, r7, r2
 800cbfa:	8812      	ldrh	r2, [r2, #0]
 800cbfc:	801a      	strh	r2, [r3, #0]
 800cbfe:	e042      	b.n	800cc86 <u8g2_DrawLine+0x226>
  {
    if ( swapxy == 0 ) 
 800cc00:	2313      	movs	r3, #19
 800cc02:	18fb      	adds	r3, r7, r3
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <u8g2_DrawLine+0x1c0>
      u8g2_DrawPixel(u8g2, x, y); 
 800cc0a:	231c      	movs	r3, #28
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	881a      	ldrh	r2, [r3, #0]
 800cc10:	231e      	movs	r3, #30
 800cc12:	18fb      	adds	r3, r7, r3
 800cc14:	8819      	ldrh	r1, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	0018      	movs	r0, r3
 800cc1a:	f7ff fe6c 	bl	800c8f6 <u8g2_DrawPixel>
 800cc1e:	e009      	b.n	800cc34 <u8g2_DrawLine+0x1d4>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800cc20:	231e      	movs	r3, #30
 800cc22:	18fb      	adds	r3, r7, r3
 800cc24:	881a      	ldrh	r2, [r3, #0]
 800cc26:	231c      	movs	r3, #28
 800cc28:	18fb      	adds	r3, r7, r3
 800cc2a:	8819      	ldrh	r1, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	0018      	movs	r0, r3
 800cc30:	f7ff fe61 	bl	800c8f6 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800cc34:	2016      	movs	r0, #22
 800cc36:	183b      	adds	r3, r7, r0
 800cc38:	881a      	ldrh	r2, [r3, #0]
 800cc3a:	2318      	movs	r3, #24
 800cc3c:	18fb      	adds	r3, r7, r3
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	183b      	adds	r3, r7, r0
 800cc4a:	801a      	strh	r2, [r3, #0]
    if ( err < 0 ) 
 800cc4c:	183b      	adds	r3, r7, r0
 800cc4e:	2200      	movs	r2, #0
 800cc50:	5e9b      	ldrsh	r3, [r3, r2]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da11      	bge.n	800cc7a <u8g2_DrawLine+0x21a>
    {
      y += (u8g2_uint_t)ystep;
 800cc56:	2314      	movs	r3, #20
 800cc58:	18fb      	adds	r3, r7, r3
 800cc5a:	8819      	ldrh	r1, [r3, #0]
 800cc5c:	221c      	movs	r2, #28
 800cc5e:	18bb      	adds	r3, r7, r2
 800cc60:	18ba      	adds	r2, r7, r2
 800cc62:	8812      	ldrh	r2, [r2, #0]
 800cc64:	188a      	adds	r2, r1, r2
 800cc66:	801a      	strh	r2, [r3, #0]
      err += (u8g2_uint_t)dx;
 800cc68:	183b      	adds	r3, r7, r0
 800cc6a:	881a      	ldrh	r2, [r3, #0]
 800cc6c:	231a      	movs	r3, #26
 800cc6e:	18fb      	adds	r3, r7, r3
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	183b      	adds	r3, r7, r0
 800cc78:	801a      	strh	r2, [r3, #0]
  for( x = x1; x <= x2; x++ )
 800cc7a:	211e      	movs	r1, #30
 800cc7c:	187b      	adds	r3, r7, r1
 800cc7e:	881a      	ldrh	r2, [r3, #0]
 800cc80:	187b      	adds	r3, r7, r1
 800cc82:	3201      	adds	r2, #1
 800cc84:	801a      	strh	r2, [r3, #0]
 800cc86:	231e      	movs	r3, #30
 800cc88:	18fa      	adds	r2, r7, r3
 800cc8a:	1dbb      	adds	r3, r7, #6
 800cc8c:	8812      	ldrh	r2, [r2, #0]
 800cc8e:	881b      	ldrh	r3, [r3, #0]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d9b5      	bls.n	800cc00 <u8g2_DrawLine+0x1a0>
    }
  }
}
 800cc94:	46c0      	nop			; (mov r8, r8)
 800cc96:	46c0      	nop			; (mov r8, r8)
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	b008      	add	sp, #32
 800cc9c:	bdb0      	pop	{r4, r5, r7, pc}
 800cc9e:	46c0      	nop			; (mov r8, r8)
 800cca0:	0000ffff 	.word	0x0000ffff

0800cca4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b089      	sub	sp, #36	; 0x24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	000c      	movs	r4, r1
 800ccae:	0010      	movs	r0, r2
 800ccb0:	0019      	movs	r1, r3
 800ccb2:	230a      	movs	r3, #10
 800ccb4:	18fb      	adds	r3, r7, r3
 800ccb6:	1c22      	adds	r2, r4, #0
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	2408      	movs	r4, #8
 800ccbc:	193b      	adds	r3, r7, r4
 800ccbe:	1c02      	adds	r2, r0, #0
 800ccc0:	801a      	strh	r2, [r3, #0]
 800ccc2:	1dbb      	adds	r3, r7, #6
 800ccc4:	1c0a      	adds	r2, r1, #0
 800ccc6:	801a      	strh	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800ccc8:	201b      	movs	r0, #27
 800ccca:	183b      	adds	r3, r7, r0
 800cccc:	193a      	adds	r2, r7, r4
 800ccce:	8812      	ldrh	r2, [r2, #0]
 800ccd0:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800ccd2:	183b      	adds	r3, r7, r0
 800ccd4:	183a      	adds	r2, r7, r0
 800ccd6:	7812      	ldrb	r2, [r2, #0]
 800ccd8:	2107      	movs	r1, #7
 800ccda:	400a      	ands	r2, r1
 800ccdc:	701a      	strb	r2, [r3, #0]
  mask = 1;
 800ccde:	2118      	movs	r1, #24
 800cce0:	187b      	adds	r3, r7, r1
 800cce2:	2201      	movs	r2, #1
 800cce4:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 800cce6:	187b      	adds	r3, r7, r1
 800cce8:	781a      	ldrb	r2, [r3, #0]
 800ccea:	183b      	adds	r3, r7, r0
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	409a      	lsls	r2, r3
 800ccf0:	187b      	adds	r3, r7, r1
 800ccf2:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 800ccf4:	201a      	movs	r0, #26
 800ccf6:	183b      	adds	r3, r7, r0
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 800ccfc:	2319      	movs	r3, #25
 800ccfe:	18fb      	adds	r3, r7, r3
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2292      	movs	r2, #146	; 0x92
 800cd08:	5c9b      	ldrb	r3, [r3, r2]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d803      	bhi.n	800cd16 <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 800cd0e:	183b      	adds	r3, r7, r0
 800cd10:	187a      	adds	r2, r7, r1
 800cd12:	7812      	ldrb	r2, [r2, #0]
 800cd14:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2292      	movs	r2, #146	; 0x92
 800cd1a:	5c9b      	ldrb	r3, [r3, r2]
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d005      	beq.n	800cd2c <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 800cd20:	2319      	movs	r3, #25
 800cd22:	18fb      	adds	r3, r7, r3
 800cd24:	2218      	movs	r2, #24
 800cd26:	18ba      	adds	r2, r7, r2
 800cd28:	7812      	ldrb	r2, [r2, #0]
 800cd2a:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800cd2c:	2016      	movs	r0, #22
 800cd2e:	183b      	adds	r3, r7, r0
 800cd30:	2208      	movs	r2, #8
 800cd32:	18ba      	adds	r2, r7, r2
 800cd34:	8812      	ldrh	r2, [r2, #0]
 800cd36:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 800cd38:	183b      	adds	r3, r7, r0
 800cd3a:	183a      	adds	r2, r7, r0
 800cd3c:	8812      	ldrh	r2, [r2, #0]
 800cd3e:	2107      	movs	r1, #7
 800cd40:	438a      	bics	r2, r1
 800cd42:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	7c1b      	ldrb	r3, [r3, #16]
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	183b      	adds	r3, r7, r0
 800cd4e:	1839      	adds	r1, r7, r0
 800cd50:	8809      	ldrh	r1, [r1, #0]
 800cd52:	434a      	muls	r2, r1
 800cd54:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800cd5c:	183b      	adds	r3, r7, r0
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	69fa      	ldr	r2, [r7, #28]
 800cd62:	18d3      	adds	r3, r2, r3
 800cd64:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800cd66:	230a      	movs	r3, #10
 800cd68:	18fb      	adds	r3, r7, r3
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	18d3      	adds	r3, r2, r3
 800cd70:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800cd72:	2330      	movs	r3, #48	; 0x30
 800cd74:	18fb      	adds	r3, r7, r3
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d11e      	bne.n	800cdba <u8g2_ll_hvline_vertical_top_lsb+0x116>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	231a      	movs	r3, #26
 800cd82:	18fb      	adds	r3, r7, r3
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	2319      	movs	r3, #25
 800cd94:	18fb      	adds	r3, r7, r3
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	4053      	eors	r3, r2
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	701a      	strb	r2, [r3, #0]
	ptr++;
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	3301      	adds	r3, #1
 800cda4:	61fb      	str	r3, [r7, #28]
	len--;
 800cda6:	1dbb      	adds	r3, r7, #6
 800cda8:	881a      	ldrh	r2, [r3, #0]
 800cdaa:	1dbb      	adds	r3, r7, #6
 800cdac:	3a01      	subs	r2, #1
 800cdae:	801a      	strh	r2, [r3, #0]
      } while( len != 0 );
 800cdb0:	1dbb      	adds	r3, r7, #6
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e1      	bne.n	800cd7c <u8g2_ll_hvline_vertical_top_lsb+0xd8>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800cdb8:	e04e      	b.n	800ce58 <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	781a      	ldrb	r2, [r3, #0]
 800cdbe:	241a      	movs	r4, #26
 800cdc0:	193b      	adds	r3, r7, r4
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	781a      	ldrb	r2, [r3, #0]
 800cdd0:	2319      	movs	r3, #25
 800cdd2:	18fb      	adds	r3, r7, r3
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	4053      	eors	r3, r2
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800cdde:	201b      	movs	r0, #27
 800cde0:	183b      	adds	r3, r7, r0
 800cde2:	781a      	ldrb	r2, [r3, #0]
 800cde4:	183b      	adds	r3, r7, r0
 800cde6:	3201      	adds	r2, #1
 800cde8:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 800cdea:	183b      	adds	r3, r7, r0
 800cdec:	183a      	adds	r2, r7, r0
 800cdee:	7812      	ldrb	r2, [r2, #0]
 800cdf0:	2107      	movs	r1, #7
 800cdf2:	400a      	ands	r2, r1
 800cdf4:	701a      	strb	r2, [r3, #0]
      len--;
 800cdf6:	1dbb      	adds	r3, r7, #6
 800cdf8:	881a      	ldrh	r2, [r3, #0]
 800cdfa:	1dbb      	adds	r3, r7, #6
 800cdfc:	3a01      	subs	r2, #1
 800cdfe:	801a      	strh	r2, [r3, #0]
      if ( bit_pos == 0 )
 800ce00:	183b      	adds	r3, r7, r0
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d117      	bne.n	800ce38 <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800ce0c:	001a      	movs	r2, r3
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	189b      	adds	r3, r3, r2
 800ce12:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2292      	movs	r2, #146	; 0x92
 800ce18:	5c9b      	ldrb	r3, [r3, r2]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d802      	bhi.n	800ce24 <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 800ce1e:	193b      	adds	r3, r7, r4
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2292      	movs	r2, #146	; 0x92
 800ce28:	5c9b      	ldrb	r3, [r3, r2]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d010      	beq.n	800ce50 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 800ce2e:	2319      	movs	r3, #25
 800ce30:	18fb      	adds	r3, r7, r3
 800ce32:	2201      	movs	r2, #1
 800ce34:	701a      	strb	r2, [r3, #0]
 800ce36:	e00b      	b.n	800ce50 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 800ce38:	231a      	movs	r3, #26
 800ce3a:	18fa      	adds	r2, r7, r3
 800ce3c:	18fb      	adds	r3, r7, r3
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	18db      	adds	r3, r3, r3
 800ce42:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 800ce44:	2319      	movs	r3, #25
 800ce46:	18fa      	adds	r2, r7, r3
 800ce48:	18fb      	adds	r3, r7, r3
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	18db      	adds	r3, r3, r3
 800ce4e:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 800ce50:	1dbb      	adds	r3, r7, #6
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1b0      	bne.n	800cdba <u8g2_ll_hvline_vertical_top_lsb+0x116>
}
 800ce58:	46c0      	nop			; (mov r8, r8)
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	b009      	add	sp, #36	; 0x24
 800ce5e:	bd90      	pop	{r4, r7, pc}

0800ce60 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2250      	movs	r2, #80	; 0x50
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2254      	movs	r2, #84	; 0x54
 800ce74:	2100      	movs	r1, #0
 800ce76:	5299      	strh	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2252      	movs	r2, #82	; 0x52
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	4249      	negs	r1, r1
 800ce80:	5299      	strh	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2256      	movs	r2, #86	; 0x56
 800ce86:	2101      	movs	r1, #1
 800ce88:	4249      	negs	r1, r1
 800ce8a:	5299      	strh	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	0010      	movs	r0, r2
 800ce96:	4798      	blx	r3
}
 800ce98:	46c0      	nop			; (mov r8, r8)
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	b002      	add	sp, #8
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	603b      	str	r3, [r7, #0]
 800ceac:	1dfb      	adds	r3, r7, #7
 800ceae:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	1dfa      	adds	r2, r7, #7
 800cec6:	2138      	movs	r1, #56	; 0x38
 800cec8:	7812      	ldrb	r2, [r2, #0]
 800ceca:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2239      	movs	r2, #57	; 0x39
 800ced0:	2100      	movs	r1, #0
 800ced2:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	226d      	movs	r2, #109	; 0x6d
 800ced8:	2100      	movs	r1, #0
 800ceda:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2291      	movs	r2, #145	; 0x91
 800cee0:	2100      	movs	r1, #0
 800cee2:	5499      	strb	r1, [r3, r2]
  
  u8g2->draw_color = 1;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2292      	movs	r2, #146	; 0x92
 800cee8:	2101      	movs	r1, #1
 800ceea:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2293      	movs	r2, #147	; 0x93
 800cef0:	2101      	movs	r1, #1
 800cef2:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	69ba      	ldr	r2, [r7, #24]
 800cef8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	0010      	movs	r0, r2
 800cf04:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	0018      	movs	r0, r3
 800cf0a:	f7ff ffa9 	bl	800ce60 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	0018      	movs	r0, r3
 800cf12:	f7ff fb75 	bl	800c600 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2270      	movs	r2, #112	; 0x70
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	5499      	strb	r1, [r3, r2]
#endif
}
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	46bd      	mov	sp, r7
 800cf22:	b004      	add	sp, #16
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2238      	movs	r2, #56	; 0x38
 800cf38:	5c9a      	ldrb	r2, [r3, r2]
 800cf3a:	210e      	movs	r1, #14
 800cf3c:	187b      	adds	r3, r7, r1
 800cf3e:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800cf40:	187b      	adds	r3, r7, r1
 800cf42:	187a      	adds	r2, r7, r1
 800cf44:	8812      	ldrh	r2, [r2, #0]
 800cf46:	00d2      	lsls	r2, r2, #3
 800cf48:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	187a      	adds	r2, r7, r1
 800cf4e:	8812      	ldrh	r2, [r2, #0]
 800cf50:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	7c1a      	ldrb	r2, [r3, #16]
 800cf56:	187b      	adds	r3, r7, r1
 800cf58:	801a      	strh	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800cf5a:	187b      	adds	r3, r7, r1
 800cf5c:	187a      	adds	r2, r7, r1
 800cf5e:	8812      	ldrh	r2, [r2, #0]
 800cf60:	00d2      	lsls	r2, r2, #3
 800cf62:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	187a      	adds	r2, r7, r1
 800cf68:	8812      	ldrh	r2, [r2, #0]
 800cf6a:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2239      	movs	r2, #57	; 0x39
 800cf70:	5c9a      	ldrb	r2, [r3, r2]
 800cf72:	187b      	adds	r3, r7, r1
 800cf74:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800cf76:	187b      	adds	r3, r7, r1
 800cf78:	0008      	movs	r0, r1
 800cf7a:	187a      	adds	r2, r7, r1
 800cf7c:	8812      	ldrh	r2, [r2, #0]
 800cf7e:	00d2      	lsls	r2, r2, #3
 800cf80:	801a      	strh	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	183a      	adds	r2, r7, r0
 800cf86:	8812      	ldrh	r2, [r2, #0]
 800cf88:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2238      	movs	r2, #56	; 0x38
 800cf8e:	5c9a      	ldrb	r2, [r3, r2]
 800cf90:	183b      	adds	r3, r7, r0
 800cf92:	801a      	strh	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800cf94:	183b      	adds	r3, r7, r0
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	2139      	movs	r1, #57	; 0x39
 800cf9c:	5c52      	ldrb	r2, [r2, r1]
 800cf9e:	189b      	adds	r3, r3, r2
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	7c52      	ldrb	r2, [r2, #17]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	dd09      	ble.n	800cfbc <u8g2_update_dimension_common+0x96>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	7c5b      	ldrb	r3, [r3, #17]
 800cfac:	b299      	uxth	r1, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2239      	movs	r2, #57	; 0x39
 800cfb2:	5c9b      	ldrb	r3, [r3, r2]
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	183b      	adds	r3, r7, r0
 800cfb8:	1a8a      	subs	r2, r1, r2
 800cfba:	801a      	strh	r2, [r3, #0]
  t *= 8;
 800cfbc:	200e      	movs	r0, #14
 800cfbe:	183b      	adds	r3, r7, r0
 800cfc0:	183a      	adds	r2, r7, r0
 800cfc2:	8812      	ldrh	r2, [r2, #0]
 800cfc4:	00d2      	lsls	r2, r2, #3
 800cfc6:	801a      	strh	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2240      	movs	r2, #64	; 0x40
 800cfd0:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2240      	movs	r2, #64	; 0x40
 800cfd6:	5a99      	ldrh	r1, [r3, r2]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2242      	movs	r2, #66	; 0x42
 800cfdc:	5299      	strh	r1, [r3, r2]
  u8g2->buf_y1 += t;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2242      	movs	r2, #66	; 0x42
 800cfe2:	5a9a      	ldrh	r2, [r3, r2]
 800cfe4:	183b      	adds	r3, r7, r0
 800cfe6:	881b      	ldrh	r3, [r3, #0]
 800cfe8:	18d3      	adds	r3, r2, r3
 800cfea:	b299      	uxth	r1, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2242      	movs	r2, #66	; 0x42
 800cff0:	5299      	strh	r1, [r3, r2]

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	8a99      	ldrh	r1, [r3, #20]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2244      	movs	r2, #68	; 0x44
 800cffa:	5299      	strh	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	8ad9      	ldrh	r1, [r3, #22]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2246      	movs	r2, #70	; 0x46
 800d004:	5299      	strh	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800d006:	46c0      	nop			; (mov r8, r8)
 800d008:	46bd      	mov	sp, r7
 800d00a:	b004      	add	sp, #16
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800d00e:	b590      	push	{r4, r7, lr}
 800d010:	b085      	sub	sp, #20
 800d012:	af02      	add	r7, sp, #8
 800d014:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2250      	movs	r2, #80	; 0x50
 800d01a:	5a99      	ldrh	r1, [r3, r2]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2254      	movs	r2, #84	; 0x54
 800d020:	5a9a      	ldrh	r2, [r3, r2]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2052      	movs	r0, #82	; 0x52
 800d026:	5a1c      	ldrh	r4, [r3, r0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2056      	movs	r0, #86	; 0x56
 800d02c:	5a1b      	ldrh	r3, [r3, r0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	0023      	movs	r3, r4
 800d034:	f7ff fcdc 	bl	800c9f0 <u8g2_IsIntersection>
 800d038:	1e03      	subs	r3, r0, #0
 800d03a:	d104      	bne.n	800d046 <u8g2_apply_clip_window+0x38>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	228c      	movs	r2, #140	; 0x8c
 800d040:	2100      	movs	r1, #0
 800d042:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800d044:	e03b      	b.n	800d0be <u8g2_apply_clip_window+0xb0>
    u8g2->is_page_clip_window_intersection = 1;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	228c      	movs	r2, #140	; 0x8c
 800d04a:	2101      	movs	r1, #1
 800d04c:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2248      	movs	r2, #72	; 0x48
 800d052:	5a9a      	ldrh	r2, [r3, r2]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2150      	movs	r1, #80	; 0x50
 800d058:	5a5b      	ldrh	r3, [r3, r1]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d205      	bcs.n	800d06a <u8g2_apply_clip_window+0x5c>
      u8g2->user_x0 = u8g2->clip_x0;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2250      	movs	r2, #80	; 0x50
 800d062:	5a99      	ldrh	r1, [r3, r2]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2248      	movs	r2, #72	; 0x48
 800d068:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	224a      	movs	r2, #74	; 0x4a
 800d06e:	5a9a      	ldrh	r2, [r3, r2]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2152      	movs	r1, #82	; 0x52
 800d074:	5a5b      	ldrh	r3, [r3, r1]
 800d076:	429a      	cmp	r2, r3
 800d078:	d905      	bls.n	800d086 <u8g2_apply_clip_window+0x78>
      u8g2->user_x1 = u8g2->clip_x1;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2252      	movs	r2, #82	; 0x52
 800d07e:	5a99      	ldrh	r1, [r3, r2]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	224a      	movs	r2, #74	; 0x4a
 800d084:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	224c      	movs	r2, #76	; 0x4c
 800d08a:	5a9a      	ldrh	r2, [r3, r2]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2154      	movs	r1, #84	; 0x54
 800d090:	5a5b      	ldrh	r3, [r3, r1]
 800d092:	429a      	cmp	r2, r3
 800d094:	d205      	bcs.n	800d0a2 <u8g2_apply_clip_window+0x94>
      u8g2->user_y0 = u8g2->clip_y0;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2254      	movs	r2, #84	; 0x54
 800d09a:	5a99      	ldrh	r1, [r3, r2]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	224c      	movs	r2, #76	; 0x4c
 800d0a0:	5299      	strh	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	224e      	movs	r2, #78	; 0x4e
 800d0a6:	5a9a      	ldrh	r2, [r3, r2]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2156      	movs	r1, #86	; 0x56
 800d0ac:	5a5b      	ldrh	r3, [r3, r1]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d905      	bls.n	800d0be <u8g2_apply_clip_window+0xb0>
      u8g2->user_y1 = u8g2->clip_y1;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2256      	movs	r2, #86	; 0x56
 800d0b6:	5a99      	ldrh	r1, [r3, r2]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	224e      	movs	r2, #78	; 0x4e
 800d0bc:	5299      	strh	r1, [r3, r2]
}
 800d0be:	46c0      	nop			; (mov r8, r8)
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	b003      	add	sp, #12
 800d0c4:	bd90      	pop	{r4, r7, pc}

0800d0c6 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f7ff ff28 	bl	800cf26 <u8g2_update_dimension_common>
}
 800d0d6:	46c0      	nop			; (mov r8, r8)
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	b002      	add	sp, #8
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2248      	movs	r2, #72	; 0x48
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	5299      	strh	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2244      	movs	r2, #68	; 0x44
 800d0f2:	5a99      	ldrh	r1, [r3, r2]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	224a      	movs	r2, #74	; 0x4a
 800d0f8:	5299      	strh	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2240      	movs	r2, #64	; 0x40
 800d0fe:	5a99      	ldrh	r1, [r3, r2]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	224c      	movs	r2, #76	; 0x4c
 800d104:	5299      	strh	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2242      	movs	r2, #66	; 0x42
 800d10a:	5a99      	ldrh	r1, [r3, r2]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	224e      	movs	r2, #78	; 0x4e
 800d110:	5299      	strh	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	0018      	movs	r0, r3
 800d116:	f7ff ff7a 	bl	800d00e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800d11a:	46c0      	nop			; (mov r8, r8)
 800d11c:	46bd      	mov	sp, r7
 800d11e:	b002      	add	sp, #8
 800d120:	bd80      	pop	{r7, pc}

0800d122 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800d122:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d124:	b087      	sub	sp, #28
 800d126:	af02      	add	r7, sp, #8
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	000c      	movs	r4, r1
 800d12c:	0010      	movs	r0, r2
 800d12e:	0019      	movs	r1, r3
 800d130:	250a      	movs	r5, #10
 800d132:	197b      	adds	r3, r7, r5
 800d134:	1c22      	adds	r2, r4, #0
 800d136:	801a      	strh	r2, [r3, #0]
 800d138:	2608      	movs	r6, #8
 800d13a:	19bb      	adds	r3, r7, r6
 800d13c:	1c02      	adds	r2, r0, #0
 800d13e:	801a      	strh	r2, [r3, #0]
 800d140:	1dbb      	adds	r3, r7, #6
 800d142:	1c0a      	adds	r2, r1, #0
 800d144:	801a      	strh	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800d146:	1dbb      	adds	r3, r7, #6
 800d148:	881c      	ldrh	r4, [r3, #0]
 800d14a:	19bb      	adds	r3, r7, r6
 800d14c:	881a      	ldrh	r2, [r3, #0]
 800d14e:	197b      	adds	r3, r7, r5
 800d150:	8819      	ldrh	r1, [r3, #0]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	2320      	movs	r3, #32
 800d156:	2508      	movs	r5, #8
 800d158:	195b      	adds	r3, r3, r5
 800d15a:	19db      	adds	r3, r3, r7
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	0023      	movs	r3, r4
 800d162:	f7ff faed 	bl	800c740 <u8g2_draw_hv_line_2dir>
}
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	46bd      	mov	sp, r7
 800d16a:	b005      	add	sp, #20
 800d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d16e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2226      	movs	r2, #38	; 0x26
 800d17a:	2100      	movs	r1, #0
 800d17c:	5499      	strb	r1, [r3, r2]
}
 800d17e:	46c0      	nop			; (mov r8, r8)
 800d180:	46bd      	mov	sp, r7
 800d182:	b002      	add	sp, #8
 800d184:	bd80      	pop	{r7, pc}
	...

0800d188 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	000a      	movs	r2, r1
 800d192:	1cfb      	adds	r3, r7, #3
 800d194:	701a      	strb	r2, [r3, #0]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800d196:	1cfb      	adds	r3, r7, #3
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <u8x8_ascii_next+0x1e>
 800d19e:	1cfb      	adds	r3, r7, #3
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b0a      	cmp	r3, #10
 800d1a4:	d101      	bne.n	800d1aa <u8x8_ascii_next+0x22>
    return 0x0ffff;	/* end of string detected*/
 800d1a6:	4b04      	ldr	r3, [pc, #16]	; (800d1b8 <u8x8_ascii_next+0x30>)
 800d1a8:	e002      	b.n	800d1b0 <u8x8_ascii_next+0x28>
  return b;
 800d1aa:	1cfb      	adds	r3, r7, #3
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	b29b      	uxth	r3, r3
}
 800d1b0:	0018      	movs	r0, r3
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	0000ffff 	.word	0x0000ffff

0800d1bc <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800d1bc:	b590      	push	{r4, r7, lr}
 800d1be:	b085      	sub	sp, #20
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	607a      	str	r2, [r7, #4]
 800d1c6:	200b      	movs	r0, #11
 800d1c8:	183b      	adds	r3, r7, r0
 800d1ca:	1c0a      	adds	r2, r1, #0
 800d1cc:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	691c      	ldr	r4, [r3, #16]
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	183b      	adds	r3, r7, r0
 800d1d6:	781a      	ldrb	r2, [r3, #0]
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	000b      	movs	r3, r1
 800d1dc:	2117      	movs	r1, #23
 800d1de:	47a0      	blx	r4
 800d1e0:	0003      	movs	r3, r0
}
 800d1e2:	0018      	movs	r0, r3
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b005      	add	sp, #20
 800d1e8:	bd90      	pop	{r4, r7, pc}

0800d1ea <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b082      	sub	sp, #8
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	000a      	movs	r2, r1
 800d1f4:	1cfb      	adds	r3, r7, #3
 800d1f6:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800d1f8:	1cfa      	adds	r2, r7, #3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	0018      	movs	r0, r3
 800d200:	f7ff ffdc 	bl	800d1bc <u8x8_byte_SendBytes>
 800d204:	0003      	movs	r3, r0
}
 800d206:	0018      	movs	r0, r3
 800d208:	46bd      	mov	sp, r7
 800d20a:	b002      	add	sp, #8
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800d20e:	b590      	push	{r4, r7, lr}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691c      	ldr	r4, [r3, #16]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	2300      	movs	r3, #0
 800d21e:	2200      	movs	r2, #0
 800d220:	2118      	movs	r1, #24
 800d222:	47a0      	blx	r4
 800d224:	0003      	movs	r3, r0
}
 800d226:	0018      	movs	r0, r3
 800d228:	46bd      	mov	sp, r7
 800d22a:	b003      	add	sp, #12
 800d22c:	bd90      	pop	{r4, r7, pc}

0800d22e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800d22e:	b590      	push	{r4, r7, lr}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	691c      	ldr	r4, [r3, #16]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	2300      	movs	r3, #0
 800d23e:	2200      	movs	r2, #0
 800d240:	2119      	movs	r1, #25
 800d242:	47a0      	blx	r4
 800d244:	0003      	movs	r3, r0
}
 800d246:	0018      	movs	r0, r3
 800d248:	46bd      	mov	sp, r7
 800d24a:	b003      	add	sp, #12
 800d24c:	bd90      	pop	{r4, r7, pc}

0800d24e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800d24e:	b590      	push	{r4, r7, lr}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	000a      	movs	r2, r1
 800d258:	1cfb      	adds	r3, r7, #3
 800d25a:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68dc      	ldr	r4, [r3, #12]
 800d260:	1cfb      	adds	r3, r7, #3
 800d262:	781a      	ldrb	r2, [r3, #0]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	2300      	movs	r3, #0
 800d268:	2115      	movs	r1, #21
 800d26a:	47a0      	blx	r4
 800d26c:	0003      	movs	r3, r0
}
 800d26e:	0018      	movs	r0, r3
 800d270:	46bd      	mov	sp, r7
 800d272:	b003      	add	sp, #12
 800d274:	bd90      	pop	{r4, r7, pc}

0800d276 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800d276:	b590      	push	{r4, r7, lr}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	000a      	movs	r2, r1
 800d280:	1cfb      	adds	r3, r7, #3
 800d282:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68dc      	ldr	r4, [r3, #12]
 800d288:	1cfb      	adds	r3, r7, #3
 800d28a:	781a      	ldrb	r2, [r3, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	2300      	movs	r3, #0
 800d290:	2116      	movs	r1, #22
 800d292:	47a0      	blx	r4
 800d294:	0003      	movs	r3, r0
}
 800d296:	0018      	movs	r0, r3
 800d298:	46bd      	mov	sp, r7
 800d29a:	b003      	add	sp, #12
 800d29c:	bd90      	pop	{r4, r7, pc}

0800d29e <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800d29e:	b590      	push	{r4, r7, lr}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	200b      	movs	r0, #11
 800d2aa:	183b      	adds	r3, r7, r0
 800d2ac:	1c0a      	adds	r2, r1, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	68dc      	ldr	r4, [r3, #12]
 800d2b4:	6879      	ldr	r1, [r7, #4]
 800d2b6:	183b      	adds	r3, r7, r0
 800d2b8:	781a      	ldrb	r2, [r3, #0]
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	000b      	movs	r3, r1
 800d2be:	2117      	movs	r1, #23
 800d2c0:	47a0      	blx	r4
 800d2c2:	0003      	movs	r3, r0
}
 800d2c4:	0018      	movs	r0, r3
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	b005      	add	sp, #20
 800d2ca:	bd90      	pop	{r4, r7, pc}

0800d2cc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68dc      	ldr	r4, [r3, #12]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	2200      	movs	r2, #0
 800d2de:	2118      	movs	r1, #24
 800d2e0:	47a0      	blx	r4
 800d2e2:	0003      	movs	r3, r0
}
 800d2e4:	0018      	movs	r0, r3
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	b003      	add	sp, #12
 800d2ea:	bd90      	pop	{r4, r7, pc}

0800d2ec <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68dc      	ldr	r4, [r3, #12]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2119      	movs	r1, #25
 800d300:	47a0      	blx	r4
 800d302:	0003      	movs	r3, r0
}
 800d304:	0018      	movs	r0, r3
 800d306:	46bd      	mov	sp, r7
 800d308:	b003      	add	sp, #12
 800d30a:	bd90      	pop	{r4, r7, pc}

0800d30c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800d30c:	b590      	push	{r4, r7, lr}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800d316:	210f      	movs	r1, #15
 800d318:	187b      	adds	r3, r7, r1
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	7812      	ldrb	r2, [r2, #0]
 800d31e:	701a      	strb	r2, [r3, #0]
    data++;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800d326:	187b      	adds	r3, r7, r1
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2bfe      	cmp	r3, #254	; 0xfe
 800d32c:	d038      	beq.n	800d3a0 <u8x8_cad_SendSequence+0x94>
 800d32e:	dc48      	bgt.n	800d3c2 <u8x8_cad_SendSequence+0xb6>
 800d330:	2b19      	cmp	r3, #25
 800d332:	dc46      	bgt.n	800d3c2 <u8x8_cad_SendSequence+0xb6>
 800d334:	2b18      	cmp	r3, #24
 800d336:	da29      	bge.n	800d38c <u8x8_cad_SendSequence+0x80>
 800d338:	2b16      	cmp	r3, #22
 800d33a:	dc02      	bgt.n	800d342 <u8x8_cad_SendSequence+0x36>
 800d33c:	2b15      	cmp	r3, #21
 800d33e:	da03      	bge.n	800d348 <u8x8_cad_SendSequence+0x3c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800d340:	e03f      	b.n	800d3c2 <u8x8_cad_SendSequence+0xb6>
    switch( cmd )
 800d342:	2b17      	cmp	r3, #23
 800d344:	d013      	beq.n	800d36e <u8x8_cad_SendSequence+0x62>
	return;
 800d346:	e03c      	b.n	800d3c2 <u8x8_cad_SendSequence+0xb6>
	  v = *data;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781a      	ldrb	r2, [r3, #0]
 800d34c:	210e      	movs	r1, #14
 800d34e:	187b      	adds	r3, r7, r1
 800d350:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	68dc      	ldr	r4, [r3, #12]
 800d356:	187b      	adds	r3, r7, r1
 800d358:	781a      	ldrb	r2, [r3, #0]
 800d35a:	230f      	movs	r3, #15
 800d35c:	18fb      	adds	r3, r7, r3
 800d35e:	7819      	ldrb	r1, [r3, #0]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	2300      	movs	r3, #0
 800d364:	47a0      	blx	r4
	  data++;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	603b      	str	r3, [r7, #0]
	  break;
 800d36c:	e028      	b.n	800d3c0 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	210e      	movs	r1, #14
 800d374:	187b      	adds	r3, r7, r1
 800d376:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800d378:	187a      	adds	r2, r7, r1
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2101      	movs	r1, #1
 800d37e:	0018      	movs	r0, r3
 800d380:	f7ff ff8d 	bl	800d29e <u8x8_cad_SendData>
	  data++;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	3301      	adds	r3, #1
 800d388:	603b      	str	r3, [r7, #0]
	  break;
 800d38a:	e019      	b.n	800d3c0 <u8x8_cad_SendSequence+0xb4>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68dc      	ldr	r4, [r3, #12]
 800d390:	230f      	movs	r3, #15
 800d392:	18fb      	adds	r3, r7, r3
 800d394:	7819      	ldrb	r1, [r3, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	2300      	movs	r3, #0
 800d39a:	2200      	movs	r2, #0
 800d39c:	47a0      	blx	r4
	  break;
 800d39e:	e00f      	b.n	800d3c0 <u8x8_cad_SendSequence+0xb4>
	  v = *data;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781a      	ldrb	r2, [r3, #0]
 800d3a4:	210e      	movs	r1, #14
 800d3a6:	187b      	adds	r3, r7, r1
 800d3a8:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800d3aa:	187b      	adds	r3, r7, r1
 800d3ac:	781a      	ldrb	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2129      	movs	r1, #41	; 0x29
 800d3b2:	0018      	movs	r0, r3
 800d3b4:	f000 fa98 	bl	800d8e8 <u8x8_gpio_call>
	  data++;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	603b      	str	r3, [r7, #0]
	  break;
 800d3be:	46c0      	nop			; (mov r8, r8)
    cmd = *data;
 800d3c0:	e7a9      	b.n	800d316 <u8x8_cad_SendSequence+0xa>
	return;
 800d3c2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	b005      	add	sp, #20
 800d3c8:	bd90      	pop	{r4, r7, pc}

0800d3ca <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800d3ca:	b5b0      	push	{r4, r5, r7, lr}
 800d3cc:	b084      	sub	sp, #16
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	250b      	movs	r5, #11
 800d3d6:	197b      	adds	r3, r7, r5
 800d3d8:	1c0a      	adds	r2, r1, #0
 800d3da:	701a      	strb	r2, [r3, #0]
    u8x8_byte_StartTransfer(u8x8);    
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	0018      	movs	r0, r3
 800d3e0:	f7ff ff15 	bl	800d20e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2140      	movs	r1, #64	; 0x40
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	f7ff fefe 	bl	800d1ea <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	691c      	ldr	r4, [r3, #16]
 800d3f2:	6879      	ldr	r1, [r7, #4]
 800d3f4:	197b      	adds	r3, r7, r5
 800d3f6:	781a      	ldrb	r2, [r3, #0]
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	000b      	movs	r3, r1
 800d3fc:	2117      	movs	r1, #23
 800d3fe:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	0018      	movs	r0, r3
 800d404:	f7ff ff13 	bl	800d22e <u8x8_byte_EndTransfer>
}
 800d408:	46c0      	nop			; (mov r8, r8)
 800d40a:	46bd      	mov	sp, r7
 800d40c:	b004      	add	sp, #16
 800d40e:	bdb0      	pop	{r4, r5, r7, pc}

0800d410 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800d410:	b5b0      	push	{r4, r5, r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	0008      	movs	r0, r1
 800d41a:	0011      	movs	r1, r2
 800d41c:	607b      	str	r3, [r7, #4]
 800d41e:	240b      	movs	r4, #11
 800d420:	193b      	adds	r3, r7, r4
 800d422:	1c02      	adds	r2, r0, #0
 800d424:	701a      	strb	r2, [r3, #0]
 800d426:	230a      	movs	r3, #10
 800d428:	18fb      	adds	r3, r7, r3
 800d42a:	1c0a      	adds	r2, r1, #0
 800d42c:	701a      	strb	r2, [r3, #0]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800d42e:	193b      	adds	r3, r7, r4
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	3b14      	subs	r3, #20
 800d434:	2b05      	cmp	r3, #5
 800d436:	d900      	bls.n	800d43a <u8x8_cad_ssd13xx_fast_i2c+0x2a>
 800d438:	e07b      	b.n	800d532 <u8x8_cad_ssd13xx_fast_i2c+0x122>
 800d43a:	009a      	lsls	r2, r3, #2
 800d43c:	4b40      	ldr	r3, [pc, #256]	; (800d540 <u8x8_cad_ssd13xx_fast_i2c+0x130>)
 800d43e:	18d3      	adds	r3, r2, r3
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 800d444:	4b3f      	ldr	r3, [pc, #252]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <u8x8_cad_ssd13xx_fast_i2c+0x44>
	 u8x8_byte_EndTransfer(u8x8); 
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	0018      	movs	r0, r3
 800d450:	f7ff feed 	bl	800d22e <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	0018      	movs	r0, r3
 800d458:	f7ff fed9 	bl	800d20e <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2100      	movs	r1, #0
 800d460:	0018      	movs	r0, r3
 800d462:	f7ff fec2 	bl	800d1ea <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800d466:	230a      	movs	r3, #10
 800d468:	18fb      	adds	r3, r7, r3
 800d46a:	781a      	ldrb	r2, [r3, #0]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	0011      	movs	r1, r2
 800d470:	0018      	movs	r0, r3
 800d472:	f7ff feba 	bl	800d1ea <u8x8_byte_SendByte>
      in_transfer = 1;
 800d476:	4b33      	ldr	r3, [pc, #204]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d478:	2201      	movs	r2, #1
 800d47a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800d47c:	e05b      	b.n	800d536 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800d47e:	230a      	movs	r3, #10
 800d480:	18fb      	adds	r3, r7, r3
 800d482:	781a      	ldrb	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	0011      	movs	r1, r2
 800d488:	0018      	movs	r0, r3
 800d48a:	f7ff feae 	bl	800d1ea <u8x8_byte_SendByte>
      break;      
 800d48e:	e052      	b.n	800d536 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800d490:	4b2c      	ldr	r3, [pc, #176]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d003      	beq.n	800d4a0 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8_byte_EndTransfer(u8x8); 
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	0018      	movs	r0, r3
 800d49c:	f7ff fec7 	bl	800d22e <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800d4a4:	e00e      	b.n	800d4c4 <u8x8_cad_ssd13xx_fast_i2c+0xb4>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2118      	movs	r1, #24
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f7ff ff8c 	bl	800d3ca <u8x8_i2c_data_transfer>
	arg_int-=24;
 800d4b2:	220a      	movs	r2, #10
 800d4b4:	18bb      	adds	r3, r7, r2
 800d4b6:	18ba      	adds	r2, r7, r2
 800d4b8:	7812      	ldrb	r2, [r2, #0]
 800d4ba:	3a18      	subs	r2, #24
 800d4bc:	701a      	strb	r2, [r3, #0]
	p+=24;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	3318      	adds	r3, #24
 800d4c2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800d4c4:	210a      	movs	r1, #10
 800d4c6:	187b      	adds	r3, r7, r1
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	2b18      	cmp	r3, #24
 800d4cc:	d8eb      	bhi.n	800d4a6 <u8x8_cad_ssd13xx_fast_i2c+0x96>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800d4ce:	697a      	ldr	r2, [r7, #20]
 800d4d0:	187b      	adds	r3, r7, r1
 800d4d2:	7819      	ldrb	r1, [r3, #0]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f7ff ff77 	bl	800d3ca <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800d4dc:	4b19      	ldr	r3, [pc, #100]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d4de:	2200      	movs	r2, #0
 800d4e0:	701a      	strb	r2, [r3, #0]
      break;
 800d4e2:	e028      	b.n	800d536 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2224      	movs	r2, #36	; 0x24
 800d4e8:	5c9b      	ldrb	r3, [r3, r2]
 800d4ea:	2bff      	cmp	r3, #255	; 0xff
 800d4ec:	d103      	bne.n	800d4f6 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
	u8x8->i2c_address = 0x078;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2224      	movs	r2, #36	; 0x24
 800d4f2:	2178      	movs	r1, #120	; 0x78
 800d4f4:	5499      	strb	r1, [r3, r2]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	691c      	ldr	r4, [r3, #16]
 800d4fa:	687d      	ldr	r5, [r7, #4]
 800d4fc:	230a      	movs	r3, #10
 800d4fe:	18fb      	adds	r3, r7, r3
 800d500:	781a      	ldrb	r2, [r3, #0]
 800d502:	230b      	movs	r3, #11
 800d504:	18fb      	adds	r3, r7, r3
 800d506:	7819      	ldrb	r1, [r3, #0]
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	002b      	movs	r3, r5
 800d50c:	47a0      	blx	r4
 800d50e:	0003      	movs	r3, r0
 800d510:	e012      	b.n	800d538 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800d512:	4b0c      	ldr	r3, [pc, #48]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d514:	2200      	movs	r2, #0
 800d516:	701a      	strb	r2, [r3, #0]
      break;
 800d518:	e00d      	b.n	800d536 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800d51a:	4b0a      	ldr	r3, [pc, #40]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <u8x8_cad_ssd13xx_fast_i2c+0x11a>
	u8x8_byte_EndTransfer(u8x8); 
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	0018      	movs	r0, r3
 800d526:	f7ff fe82 	bl	800d22e <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800d52a:	4b06      	ldr	r3, [pc, #24]	; (800d544 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800d52c:	2200      	movs	r2, #0
 800d52e:	701a      	strb	r2, [r3, #0]
      break;
 800d530:	e001      	b.n	800d536 <u8x8_cad_ssd13xx_fast_i2c+0x126>
    default:
      return 0;
 800d532:	2300      	movs	r3, #0
 800d534:	e000      	b.n	800d538 <u8x8_cad_ssd13xx_fast_i2c+0x128>
  }
  return 1;
 800d536:	2301      	movs	r3, #1
}
 800d538:	0018      	movs	r0, r3
 800d53a:	46bd      	mov	sp, r7
 800d53c:	b006      	add	sp, #24
 800d53e:	bdb0      	pop	{r4, r5, r7, pc}
 800d540:	08015fc8 	.word	0x08015fc8
 800d544:	200007dc 	.word	0x200007dc

0800d548 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800d548:	b590      	push	{r4, r7, lr}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	0008      	movs	r0, r1
 800d552:	0011      	movs	r1, r2
 800d554:	607b      	str	r3, [r7, #4]
 800d556:	240b      	movs	r4, #11
 800d558:	193b      	adds	r3, r7, r4
 800d55a:	1c02      	adds	r2, r0, #0
 800d55c:	701a      	strb	r2, [r3, #0]
 800d55e:	230a      	movs	r3, #10
 800d560:	18fb      	adds	r3, r7, r3
 800d562:	1c0a      	adds	r2, r1, #0
 800d564:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800d566:	193b      	adds	r3, r7, r4
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b0f      	cmp	r3, #15
 800d56c:	d052      	beq.n	800d614 <u8x8_d_ssd1306_sh1106_generic+0xcc>
 800d56e:	dd00      	ble.n	800d572 <u8x8_d_ssd1306_sh1106_generic+0x2a>
 800d570:	e0ac      	b.n	800d6cc <u8x8_d_ssd1306_sh1106_generic+0x184>
 800d572:	2b0e      	cmp	r3, #14
 800d574:	d038      	beq.n	800d5e8 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 800d576:	dd00      	ble.n	800d57a <u8x8_d_ssd1306_sh1106_generic+0x32>
 800d578:	e0a8      	b.n	800d6cc <u8x8_d_ssd1306_sh1106_generic+0x184>
 800d57a:	2b0b      	cmp	r3, #11
 800d57c:	d002      	beq.n	800d584 <u8x8_d_ssd1306_sh1106_generic+0x3c>
 800d57e:	2b0d      	cmp	r3, #13
 800d580:	d013      	beq.n	800d5aa <u8x8_d_ssd1306_sh1106_generic+0x62>
 800d582:	e0a3      	b.n	800d6cc <u8x8_d_ssd1306_sh1106_generic+0x184>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800d584:	230a      	movs	r3, #10
 800d586:	18fb      	adds	r3, r7, r3
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d106      	bne.n	800d59c <u8x8_d_ssd1306_sh1106_generic+0x54>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800d58e:	4a53      	ldr	r2, [pc, #332]	; (800d6dc <u8x8_d_ssd1306_sh1106_generic+0x194>)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	0011      	movs	r1, r2
 800d594:	0018      	movs	r0, r3
 800d596:	f7ff feb9 	bl	800d30c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800d59a:	e099      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800d59c:	4a50      	ldr	r2, [pc, #320]	; (800d6e0 <u8x8_d_ssd1306_sh1106_generic+0x198>)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	0011      	movs	r1, r2
 800d5a2:	0018      	movs	r0, r3
 800d5a4:	f7ff feb2 	bl	800d30c <u8x8_cad_SendSequence>
      break;
 800d5a8:	e092      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800d5aa:	230a      	movs	r3, #10
 800d5ac:	18fb      	adds	r3, r7, r3
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10c      	bne.n	800d5ce <u8x8_d_ssd1306_sh1106_generic+0x86>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800d5b4:	4a4b      	ldr	r2, [pc, #300]	; (800d6e4 <u8x8_d_ssd1306_sh1106_generic+0x19c>)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	0011      	movs	r1, r2
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f7ff fea6 	bl	800d30c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	7c99      	ldrb	r1, [r3, #18]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2222      	movs	r2, #34	; 0x22
 800d5ca:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800d5cc:	e080      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800d5ce:	4a46      	ldr	r2, [pc, #280]	; (800d6e8 <u8x8_d_ssd1306_sh1106_generic+0x1a0>)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	0011      	movs	r1, r2
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	f7ff fe99 	bl	800d30c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	7cd9      	ldrb	r1, [r3, #19]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2222      	movs	r2, #34	; 0x22
 800d5e4:	5499      	strb	r1, [r3, r2]
      break;
 800d5e6:	e073      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	0018      	movs	r0, r3
 800d5ec:	f7ff fe6e 	bl	800d2cc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2181      	movs	r1, #129	; 0x81
 800d5f4:	0018      	movs	r0, r3
 800d5f6:	f7ff fe2a 	bl	800d24e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800d5fa:	230a      	movs	r3, #10
 800d5fc:	18fb      	adds	r3, r7, r3
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	0011      	movs	r1, r2
 800d604:	0018      	movs	r0, r3
 800d606:	f7ff fe36 	bl	800d276 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	0018      	movs	r0, r3
 800d60e:	f7ff fe6d 	bl	800d2ec <u8x8_cad_EndTransfer>
      break;
 800d612:	e05d      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	0018      	movs	r0, r3
 800d618:	f7ff fe58 	bl	800d2cc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800d61c:	2417      	movs	r4, #23
 800d61e:	193b      	adds	r3, r7, r4
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	7952      	ldrb	r2, [r2, #5]
 800d624:	701a      	strb	r2, [r3, #0]
      x *= 8;
 800d626:	193b      	adds	r3, r7, r4
 800d628:	193a      	adds	r2, r7, r4
 800d62a:	7812      	ldrb	r2, [r2, #0]
 800d62c:	00d2      	lsls	r2, r2, #3
 800d62e:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2222      	movs	r2, #34	; 0x22
 800d634:	5c99      	ldrb	r1, [r3, r2]
 800d636:	193b      	adds	r3, r7, r4
 800d638:	193a      	adds	r2, r7, r4
 800d63a:	7812      	ldrb	r2, [r2, #0]
 800d63c:	188a      	adds	r2, r1, r2
 800d63e:	701a      	strb	r2, [r3, #0]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2140      	movs	r1, #64	; 0x40
 800d644:	0018      	movs	r0, r3
 800d646:	f7ff fe02 	bl	800d24e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800d64a:	193b      	adds	r3, r7, r4
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	091b      	lsrs	r3, r3, #4
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2210      	movs	r2, #16
 800d654:	4313      	orrs	r3, r2
 800d656:	b2da      	uxtb	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	0011      	movs	r1, r2
 800d65c:	0018      	movs	r0, r3
 800d65e:	f7ff fdf6 	bl	800d24e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800d662:	193b      	adds	r3, r7, r4
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	220f      	movs	r2, #15
 800d668:	4013      	ands	r3, r2
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	0011      	movs	r1, r2
 800d670:	0018      	movs	r0, r3
 800d672:	f7ff fe00 	bl	800d276 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	799b      	ldrb	r3, [r3, #6]
 800d67a:	2250      	movs	r2, #80	; 0x50
 800d67c:	4252      	negs	r2, r2
 800d67e:	4313      	orrs	r3, r2
 800d680:	b2da      	uxtb	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	0011      	movs	r1, r2
 800d686:	0018      	movs	r0, r3
 800d688:	f7ff fdf5 	bl	800d276 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800d68c:	2116      	movs	r1, #22
 800d68e:	187b      	adds	r3, r7, r1
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	7912      	ldrb	r2, [r2, #4]
 800d694:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800d69c:	187b      	adds	r3, r7, r1
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	b2d9      	uxtb	r1, r3
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	f7ff fdf8 	bl	800d29e <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800d6ae:	210a      	movs	r1, #10
 800d6b0:	187b      	adds	r3, r7, r1
 800d6b2:	781a      	ldrb	r2, [r3, #0]
 800d6b4:	187b      	adds	r3, r7, r1
 800d6b6:	3a01      	subs	r2, #1
 800d6b8:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 800d6ba:	187b      	adds	r3, r7, r1
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1e4      	bne.n	800d68c <u8x8_d_ssd1306_sh1106_generic+0x144>
      
      u8x8_cad_EndTransfer(u8x8);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	0018      	movs	r0, r3
 800d6c6:	f7ff fe11 	bl	800d2ec <u8x8_cad_EndTransfer>
      break;
 800d6ca:	e001      	b.n	800d6d0 <u8x8_d_ssd1306_sh1106_generic+0x188>
    default:
      return 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e000      	b.n	800d6d2 <u8x8_d_ssd1306_sh1106_generic+0x18a>
  }
  return 1;
 800d6d0:	2301      	movs	r3, #1
}
 800d6d2:	0018      	movs	r0, r3
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	b007      	add	sp, #28
 800d6d8:	bd90      	pop	{r4, r7, pc}
 800d6da:	46c0      	nop			; (mov r8, r8)
 800d6dc:	08016018 	.word	0x08016018
 800d6e0:	08016020 	.word	0x08016020
 800d6e4:	08016028 	.word	0x08016028
 800d6e8:	08016030 	.word	0x08016030

0800d6ec <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800d6ec:	b5b0      	push	{r4, r5, r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	0008      	movs	r0, r1
 800d6f6:	0011      	movs	r1, r2
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	250b      	movs	r5, #11
 800d6fc:	197b      	adds	r3, r7, r5
 800d6fe:	1c02      	adds	r2, r0, #0
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	200a      	movs	r0, #10
 800d704:	183b      	adds	r3, r7, r0
 800d706:	1c0a      	adds	r2, r1, #0
 800d708:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800d70a:	687c      	ldr	r4, [r7, #4]
 800d70c:	183b      	adds	r3, r7, r0
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	197b      	adds	r3, r7, r5
 800d712:	7819      	ldrb	r1, [r3, #0]
 800d714:	68f8      	ldr	r0, [r7, #12]
 800d716:	0023      	movs	r3, r4
 800d718:	f7ff ff16 	bl	800d548 <u8x8_d_ssd1306_sh1106_generic>
 800d71c:	1e03      	subs	r3, r0, #0
 800d71e:	d001      	beq.n	800d724 <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
 800d720:	2301      	movs	r3, #1
 800d722:	e01b      	b.n	800d75c <u8x8_d_ssd1306_128x64_noname+0x70>
  
  switch(msg)
 800d724:	230b      	movs	r3, #11
 800d726:	18fb      	adds	r3, r7, r3
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2b09      	cmp	r3, #9
 800d72c:	d00c      	beq.n	800d748 <u8x8_d_ssd1306_128x64_noname+0x5c>
 800d72e:	2b0a      	cmp	r3, #10
 800d730:	d111      	bne.n	800d756 <u8x8_d_ssd1306_128x64_noname+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	0018      	movs	r0, r3
 800d736:	f000 f82b 	bl	800d790 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800d73a:	4a0a      	ldr	r2, [pc, #40]	; (800d764 <u8x8_d_ssd1306_128x64_noname+0x78>)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	0011      	movs	r1, r2
 800d740:	0018      	movs	r0, r3
 800d742:	f7ff fde3 	bl	800d30c <u8x8_cad_SendSequence>
      break;
 800d746:	e008      	b.n	800d75a <u8x8_d_ssd1306_128x64_noname+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800d748:	4a07      	ldr	r2, [pc, #28]	; (800d768 <u8x8_d_ssd1306_128x64_noname+0x7c>)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	0011      	movs	r1, r2
 800d74e:	0018      	movs	r0, r3
 800d750:	f000 f80c 	bl	800d76c <u8x8_d_helper_display_setup_memory>
      break;
 800d754:	e001      	b.n	800d75a <u8x8_d_ssd1306_128x64_noname+0x6e>
    default:
      return 0;
 800d756:	2300      	movs	r3, #0
 800d758:	e000      	b.n	800d75c <u8x8_d_ssd1306_128x64_noname+0x70>
  }
  return 1;
 800d75a:	2301      	movs	r3, #1
}
 800d75c:	0018      	movs	r0, r3
 800d75e:	46bd      	mov	sp, r7
 800d760:	b004      	add	sp, #16
 800d762:	bdb0      	pop	{r4, r5, r7, pc}
 800d764:	08015fe0 	.word	0x08015fe0
 800d768:	08016038 	.word	0x08016038

0800d76c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	7c99      	ldrb	r1, [r3, #18]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2222      	movs	r2, #34	; 0x22
 800d786:	5499      	strb	r1, [r3, r2]
}
 800d788:	46c0      	nop			; (mov r8, r8)
 800d78a:	46bd      	mov	sp, r7
 800d78c:	b002      	add	sp, #8
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	695c      	ldr	r4, [r3, #20]
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2128      	movs	r1, #40	; 0x28
 800d7a4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68dc      	ldr	r4, [r3, #12]
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2114      	movs	r1, #20
 800d7b2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	214b      	movs	r1, #75	; 0x4b
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	f000 f894 	bl	800d8e8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	791a      	ldrb	r2, [r3, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2129      	movs	r1, #41	; 0x29
 800d7ca:	0018      	movs	r0, r3
 800d7cc:	f000 f88c 	bl	800d8e8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	214b      	movs	r1, #75	; 0x4b
 800d7d6:	0018      	movs	r0, r3
 800d7d8:	f000 f886 	bl	800d8e8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	791a      	ldrb	r2, [r3, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2129      	movs	r1, #41	; 0x29
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	f000 f87e 	bl	800d8e8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	214b      	movs	r1, #75	; 0x4b
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	f000 f878 	bl	800d8e8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	795a      	ldrb	r2, [r3, #5]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2129      	movs	r1, #41	; 0x29
 800d802:	0018      	movs	r0, r3
 800d804:	f000 f870 	bl	800d8e8 <u8x8_gpio_call>
}    
 800d808:	46c0      	nop			; (mov r8, r8)
 800d80a:	46bd      	mov	sp, r7
 800d80c:	b003      	add	sp, #12
 800d80e:	bd90      	pop	{r4, r7, pc}

0800d810 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800d810:	b590      	push	{r4, r7, lr}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	000c      	movs	r4, r1
 800d81a:	0010      	movs	r0, r2
 800d81c:	0019      	movs	r1, r3
 800d81e:	1cfb      	adds	r3, r7, #3
 800d820:	1c22      	adds	r2, r4, #0
 800d822:	701a      	strb	r2, [r3, #0]
 800d824:	1cbb      	adds	r3, r7, #2
 800d826:	1c02      	adds	r2, r0, #0
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	1c7b      	adds	r3, r7, #1
 800d82c:	1c0a      	adds	r2, r1, #0
 800d82e:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800d830:	2108      	movs	r1, #8
 800d832:	187b      	adds	r3, r7, r1
 800d834:	1cfa      	adds	r2, r7, #3
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 800d83a:	187b      	adds	r3, r7, r1
 800d83c:	1cba      	adds	r2, r7, #2
 800d83e:	7812      	ldrb	r2, [r2, #0]
 800d840:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 800d842:	187b      	adds	r3, r7, r1
 800d844:	1c7a      	adds	r2, r7, #1
 800d846:	7812      	ldrb	r2, [r2, #0]
 800d848:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 800d84a:	187b      	adds	r3, r7, r1
 800d84c:	6a3a      	ldr	r2, [r7, #32]
 800d84e:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	689c      	ldr	r4, [r3, #8]
 800d854:	187b      	adds	r3, r7, r1
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	2201      	movs	r2, #1
 800d85a:	210f      	movs	r1, #15
 800d85c:	47a0      	blx	r4
 800d85e:	0003      	movs	r3, r0
}
 800d860:	0018      	movs	r0, r3
 800d862:	46bd      	mov	sp, r7
 800d864:	b005      	add	sp, #20
 800d866:	bd90      	pop	{r4, r7, pc}

0800d868 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689c      	ldr	r4, [r3, #8]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	2300      	movs	r3, #0
 800d878:	2200      	movs	r2, #0
 800d87a:	2109      	movs	r1, #9
 800d87c:	47a0      	blx	r4
}
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	46bd      	mov	sp, r7
 800d882:	b003      	add	sp, #12
 800d884:	bd90      	pop	{r4, r7, pc}

0800d886 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800d886:	b590      	push	{r4, r7, lr}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689c      	ldr	r4, [r3, #8]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	2300      	movs	r3, #0
 800d896:	2200      	movs	r2, #0
 800d898:	210a      	movs	r1, #10
 800d89a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800d89c:	46c0      	nop			; (mov r8, r8)
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	b003      	add	sp, #12
 800d8a2:	bd90      	pop	{r4, r7, pc}

0800d8a4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	000a      	movs	r2, r1
 800d8ae:	1cfb      	adds	r3, r7, #3
 800d8b0:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	689c      	ldr	r4, [r3, #8]
 800d8b6:	1cfb      	adds	r3, r7, #3
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	210b      	movs	r1, #11
 800d8c0:	47a0      	blx	r4
}
 800d8c2:	46c0      	nop			; (mov r8, r8)
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	b003      	add	sp, #12
 800d8c8:	bd90      	pop	{r4, r7, pc}

0800d8ca <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800d8ca:	b590      	push	{r4, r7, lr}
 800d8cc:	b083      	sub	sp, #12
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689c      	ldr	r4, [r3, #8]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	2300      	movs	r3, #0
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2110      	movs	r1, #16
 800d8de:	47a0      	blx	r4
}
 800d8e0:	46c0      	nop			; (mov r8, r8)
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	b003      	add	sp, #12
 800d8e6:	bd90      	pop	{r4, r7, pc}

0800d8e8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800d8e8:	b590      	push	{r4, r7, lr}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	0008      	movs	r0, r1
 800d8f2:	0011      	movs	r1, r2
 800d8f4:	1cfb      	adds	r3, r7, #3
 800d8f6:	1c02      	adds	r2, r0, #0
 800d8f8:	701a      	strb	r2, [r3, #0]
 800d8fa:	1cbb      	adds	r3, r7, #2
 800d8fc:	1c0a      	adds	r2, r1, #0
 800d8fe:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	695c      	ldr	r4, [r3, #20]
 800d904:	1cbb      	adds	r3, r7, #2
 800d906:	781a      	ldrb	r2, [r3, #0]
 800d908:	1cfb      	adds	r3, r7, #3
 800d90a:	7819      	ldrb	r1, [r3, #0]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	2300      	movs	r3, #0
 800d910:	47a0      	blx	r4
}
 800d912:	46c0      	nop			; (mov r8, r8)
 800d914:	46bd      	mov	sp, r7
 800d916:	b003      	add	sp, #12
 800d918:	bd90      	pop	{r4, r7, pc}

0800d91a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b084      	sub	sp, #16
 800d91e:	af00      	add	r7, sp, #0
 800d920:	60f8      	str	r0, [r7, #12]
 800d922:	0008      	movs	r0, r1
 800d924:	0011      	movs	r1, r2
 800d926:	607b      	str	r3, [r7, #4]
 800d928:	230b      	movs	r3, #11
 800d92a:	18fb      	adds	r3, r7, r3
 800d92c:	1c02      	adds	r2, r0, #0
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	230a      	movs	r3, #10
 800d932:	18fb      	adds	r3, r7, r3
 800d934:	1c0a      	adds	r2, r1, #0
 800d936:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	0018      	movs	r0, r3
 800d93c:	46bd      	mov	sp, r7
 800d93e:	b004      	add	sp, #16
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a10      	ldr	r2, [pc, #64]	; (800d998 <u8x8_SetupDefaults+0x54>)
 800d956:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a0f      	ldr	r2, [pc, #60]	; (800d998 <u8x8_SetupDefaults+0x54>)
 800d95c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a0d      	ldr	r2, [pc, #52]	; (800d998 <u8x8_SetupDefaults+0x54>)
 800d962:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	4a0c      	ldr	r2, [pc, #48]	; (800d998 <u8x8_SetupDefaults+0x54>)
 800d968:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2223      	movs	r2, #35	; 0x23
 800d96e:	2100      	movs	r1, #0
 800d970:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2226      	movs	r2, #38	; 0x26
 800d976:	2100      	movs	r1, #0
 800d978:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2224      	movs	r2, #36	; 0x24
 800d984:	21ff      	movs	r1, #255	; 0xff
 800d986:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2228      	movs	r2, #40	; 0x28
 800d98c:	21ff      	movs	r1, #255	; 0xff
 800d98e:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800d990:	46c0      	nop			; (mov r8, r8)
 800d992:	46bd      	mov	sp, r7
 800d994:	b002      	add	sp, #8
 800d996:	bd80      	pop	{r7, pc}
 800d998:	0800d91b 	.word	0x0800d91b

0800d99c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	0018      	movs	r0, r3
 800d9ae:	f7ff ffc9 	bl	800d944 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	0018      	movs	r0, r3
 800d9ce:	f7ff ff4b 	bl	800d868 <u8x8_SetupMemory>
}
 800d9d2:	46c0      	nop			; (mov r8, r8)
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	b004      	add	sp, #16
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9e2:	f3ef 8305 	mrs	r3, IPSR
 800d9e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f2:	607b      	str	r3, [r7, #4]
  return(result);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <osKernelInitialize+0x2e>
 800d9fa:	4b0d      	ldr	r3, [pc, #52]	; (800da30 <osKernelInitialize+0x54>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d103      	bne.n	800da0a <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800da02:	2306      	movs	r3, #6
 800da04:	425b      	negs	r3, r3
 800da06:	60fb      	str	r3, [r7, #12]
 800da08:	e00c      	b.n	800da24 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da0a:	4b09      	ldr	r3, [pc, #36]	; (800da30 <osKernelInitialize+0x54>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d105      	bne.n	800da1e <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <osKernelInitialize+0x54>)
 800da14:	2201      	movs	r2, #1
 800da16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	e002      	b.n	800da24 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 800da1e:	2301      	movs	r3, #1
 800da20:	425b      	negs	r3, r3
 800da22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da24:	68fb      	ldr	r3, [r7, #12]
}
 800da26:	0018      	movs	r0, r3
 800da28:	46bd      	mov	sp, r7
 800da2a:	b004      	add	sp, #16
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	46c0      	nop			; (mov r8, r8)
 800da30:	200007e0 	.word	0x200007e0

0800da34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da3a:	f3ef 8305 	mrs	r3, IPSR
 800da3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800da40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da42:	2b00      	cmp	r3, #0
 800da44:	d109      	bne.n	800da5a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da46:	f3ef 8310 	mrs	r3, PRIMASK
 800da4a:	607b      	str	r3, [r7, #4]
  return(result);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d007      	beq.n	800da62 <osKernelStart+0x2e>
 800da52:	4b0e      	ldr	r3, [pc, #56]	; (800da8c <osKernelStart+0x58>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b02      	cmp	r3, #2
 800da58:	d103      	bne.n	800da62 <osKernelStart+0x2e>
    stat = osErrorISR;
 800da5a:	2306      	movs	r3, #6
 800da5c:	425b      	negs	r3, r3
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	e00e      	b.n	800da80 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da62:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <osKernelStart+0x58>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d107      	bne.n	800da7a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 800da6a:	4b08      	ldr	r3, [pc, #32]	; (800da8c <osKernelStart+0x58>)
 800da6c:	2202      	movs	r2, #2
 800da6e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800da70:	f002 f83e 	bl	800faf0 <vTaskStartScheduler>
      stat = osOK;
 800da74:	2300      	movs	r3, #0
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	e002      	b.n	800da80 <osKernelStart+0x4c>
    } else {
      stat = osError;
 800da7a:	2301      	movs	r3, #1
 800da7c:	425b      	negs	r3, r3
 800da7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da80:	68fb      	ldr	r3, [r7, #12]
}
 800da82:	0018      	movs	r0, r3
 800da84:	46bd      	mov	sp, r7
 800da86:	b004      	add	sp, #16
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	46c0      	nop			; (mov r8, r8)
 800da8c:	200007e0 	.word	0x200007e0

0800da90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da90:	b5b0      	push	{r4, r5, r7, lr}
 800da92:	b090      	sub	sp, #64	; 0x40
 800da94:	af04      	add	r7, sp, #16
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da9c:	2300      	movs	r3, #0
 800da9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daa0:	f3ef 8305 	mrs	r3, IPSR
 800daa4:	61fb      	str	r3, [r7, #28]
  return(result);
 800daa6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d000      	beq.n	800daae <osThreadNew+0x1e>
 800daac:	e090      	b.n	800dbd0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daae:	f3ef 8310 	mrs	r3, PRIMASK
 800dab2:	61bb      	str	r3, [r7, #24]
  return(result);
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d004      	beq.n	800dac4 <osThreadNew+0x34>
 800daba:	4b48      	ldr	r3, [pc, #288]	; (800dbdc <osThreadNew+0x14c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d100      	bne.n	800dac4 <osThreadNew+0x34>
 800dac2:	e085      	b.n	800dbd0 <osThreadNew+0x140>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d100      	bne.n	800dacc <osThreadNew+0x3c>
 800daca:	e081      	b.n	800dbd0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 800dacc:	2340      	movs	r3, #64	; 0x40
 800dace:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dad0:	2318      	movs	r3, #24
 800dad2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800dad4:	2117      	movs	r1, #23
 800dad6:	187b      	adds	r3, r7, r1
 800dad8:	2200      	movs	r2, #0
 800dada:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 800dadc:	187b      	adds	r3, r7, r1
 800dade:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 800dae0:	2301      	movs	r3, #1
 800dae2:	425b      	negs	r3, r3
 800dae4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d044      	beq.n	800db76 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <osThreadNew+0x6a>
        name = attr->name;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d007      	beq.n	800db1e <osThreadNew+0x8e>
 800db0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db10:	2b38      	cmp	r3, #56	; 0x38
 800db12:	d804      	bhi.n	800db1e <osThreadNew+0x8e>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	2201      	movs	r2, #1
 800db1a:	4013      	ands	r3, r2
 800db1c:	d001      	beq.n	800db22 <osThreadNew+0x92>
        return (NULL);
 800db1e:	2300      	movs	r3, #0
 800db20:	e057      	b.n	800dbd2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	695b      	ldr	r3, [r3, #20]
 800db2e:	089b      	lsrs	r3, r3, #2
 800db30:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00e      	beq.n	800db58 <osThreadNew+0xc8>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	2bbb      	cmp	r3, #187	; 0xbb
 800db40:	d90a      	bls.n	800db58 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <osThreadNew+0xc8>
        mem = 1;
 800db52:	2301      	movs	r3, #1
 800db54:	623b      	str	r3, [r7, #32]
 800db56:	e010      	b.n	800db7a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d10c      	bne.n	800db7a <osThreadNew+0xea>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d108      	bne.n	800db7a <osThreadNew+0xea>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d104      	bne.n	800db7a <osThreadNew+0xea>
          mem = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	623b      	str	r3, [r7, #32]
 800db74:	e001      	b.n	800db7a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d112      	bne.n	800dba6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db88:	68bd      	ldr	r5, [r7, #8]
 800db8a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800db8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	9302      	str	r3, [sp, #8]
 800db92:	9201      	str	r2, [sp, #4]
 800db94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	002b      	movs	r3, r5
 800db9a:	0022      	movs	r2, r4
 800db9c:	f001 fd0f 	bl	800f5be <xTaskCreateStatic>
 800dba0:	0003      	movs	r3, r0
 800dba2:	613b      	str	r3, [r7, #16]
 800dba4:	e014      	b.n	800dbd0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d111      	bne.n	800dbd0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68bc      	ldr	r4, [r7, #8]
 800dbb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	2310      	movs	r3, #16
 800dbb8:	18fb      	adds	r3, r7, r3
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	0023      	movs	r3, r4
 800dbc2:	f001 fd3f 	bl	800f644 <xTaskCreate>
 800dbc6:	0003      	movs	r3, r0
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d001      	beq.n	800dbd0 <osThreadNew+0x140>
          hTask = NULL;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbd0:	693b      	ldr	r3, [r7, #16]
}
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	b00c      	add	sp, #48	; 0x30
 800dbd8:	bdb0      	pop	{r4, r5, r7, pc}
 800dbda:	46c0      	nop			; (mov r8, r8)
 800dbdc:	200007e0 	.word	0x200007e0

0800dbe0 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbec:	f3ef 8305 	mrs	r3, IPSR
 800dbf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d109      	bne.n	800dc0c <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbf8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d007      	beq.n	800dc14 <osThreadSuspend+0x34>
 800dc04:	4b0c      	ldr	r3, [pc, #48]	; (800dc38 <osThreadSuspend+0x58>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d103      	bne.n	800dc14 <osThreadSuspend+0x34>
    stat = osErrorISR;
 800dc0c:	2306      	movs	r3, #6
 800dc0e:	425b      	negs	r3, r3
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	e00c      	b.n	800dc2e <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d103      	bne.n	800dc22 <osThreadSuspend+0x42>
    stat = osErrorParameter;
 800dc1a:	2304      	movs	r3, #4
 800dc1c:	425b      	negs	r3, r3
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	e005      	b.n	800dc2e <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	0018      	movs	r0, r3
 800dc2a:	f001 fe7d 	bl	800f928 <vTaskSuspend>
  }

  return (stat);
 800dc2e:	697b      	ldr	r3, [r7, #20]
}
 800dc30:	0018      	movs	r0, r3
 800dc32:	46bd      	mov	sp, r7
 800dc34:	b006      	add	sp, #24
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	200007e0 	.word	0x200007e0

0800dc3c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc48:	f3ef 8305 	mrs	r3, IPSR
 800dc4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d109      	bne.n	800dc68 <osThreadResume+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc54:	f3ef 8310 	mrs	r3, PRIMASK
 800dc58:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d007      	beq.n	800dc70 <osThreadResume+0x34>
 800dc60:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <osThreadResume+0x58>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d103      	bne.n	800dc70 <osThreadResume+0x34>
    stat = osErrorISR;
 800dc68:	2306      	movs	r3, #6
 800dc6a:	425b      	negs	r3, r3
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	e00c      	b.n	800dc8a <osThreadResume+0x4e>
  }
  else if (hTask == NULL) {
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d103      	bne.n	800dc7e <osThreadResume+0x42>
    stat = osErrorParameter;
 800dc76:	2304      	movs	r3, #4
 800dc78:	425b      	negs	r3, r3
 800dc7a:	617b      	str	r3, [r7, #20]
 800dc7c:	e005      	b.n	800dc8a <osThreadResume+0x4e>
  }
  else {
    stat = osOK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	0018      	movs	r0, r3
 800dc86:	f001 fee5 	bl	800fa54 <vTaskResume>
  }

  return (stat);
 800dc8a:	697b      	ldr	r3, [r7, #20]
}
 800dc8c:	0018      	movs	r0, r3
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	b006      	add	sp, #24
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	200007e0 	.word	0x200007e0

0800dc98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dca0:	f3ef 8305 	mrs	r3, IPSR
 800dca4:	613b      	str	r3, [r7, #16]
  return(result);
 800dca6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d109      	bne.n	800dcc0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcac:	f3ef 8310 	mrs	r3, PRIMASK
 800dcb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <osDelay+0x30>
 800dcb8:	4b0a      	ldr	r3, [pc, #40]	; (800dce4 <osDelay+0x4c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b02      	cmp	r3, #2
 800dcbe:	d103      	bne.n	800dcc8 <osDelay+0x30>
    stat = osErrorISR;
 800dcc0:	2306      	movs	r3, #6
 800dcc2:	425b      	negs	r3, r3
 800dcc4:	617b      	str	r3, [r7, #20]
 800dcc6:	e008      	b.n	800dcda <osDelay+0x42>
  }
  else {
    stat = osOK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <osDelay+0x42>
      vTaskDelay(ticks);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	0018      	movs	r0, r3
 800dcd6:	f001 fe01 	bl	800f8dc <vTaskDelay>
    }
  }

  return (stat);
 800dcda:	697b      	ldr	r3, [r7, #20]
}
 800dcdc:	0018      	movs	r0, r3
 800dcde:	46bd      	mov	sp, r7
 800dce0:	b006      	add	sp, #24
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	200007e0 	.word	0x200007e0

0800dce8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	; 0x28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf4:	f3ef 8305 	mrs	r3, IPSR
 800dcf8:	613b      	str	r3, [r7, #16]
  return(result);
 800dcfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d000      	beq.n	800dd02 <osMutexNew+0x1a>
 800dd00:	e084      	b.n	800de0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd02:	f3ef 8310 	mrs	r3, PRIMASK
 800dd06:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d004      	beq.n	800dd18 <osMutexNew+0x30>
 800dd0e:	4b42      	ldr	r3, [pc, #264]	; (800de18 <osMutexNew+0x130>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d100      	bne.n	800dd18 <osMutexNew+0x30>
 800dd16:	e079      	b.n	800de0c <osMutexNew+0x124>
    if (attr != NULL) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <osMutexNew+0x3e>
      type = attr->attr_bits;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	623b      	str	r3, [r7, #32]
 800dd24:	e001      	b.n	800dd2a <osMutexNew+0x42>
    } else {
      type = 0U;
 800dd26:	2300      	movs	r3, #0
 800dd28:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	4013      	ands	r3, r2
 800dd30:	d002      	beq.n	800dd38 <osMutexNew+0x50>
      rmtx = 1U;
 800dd32:	2301      	movs	r3, #1
 800dd34:	61fb      	str	r3, [r7, #28]
 800dd36:	e001      	b.n	800dd3c <osMutexNew+0x54>
    } else {
      rmtx = 0U;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2208      	movs	r2, #8
 800dd40:	4013      	ands	r3, r2
 800dd42:	d000      	beq.n	800dd46 <osMutexNew+0x5e>
 800dd44:	e062      	b.n	800de0c <osMutexNew+0x124>
      mem = -1;
 800dd46:	2301      	movs	r3, #1
 800dd48:	425b      	negs	r3, r3
 800dd4a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d015      	beq.n	800dd7e <osMutexNew+0x96>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <osMutexNew+0x80>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	2b4f      	cmp	r3, #79	; 0x4f
 800dd60:	d902      	bls.n	800dd68 <osMutexNew+0x80>
          mem = 1;
 800dd62:	2301      	movs	r3, #1
 800dd64:	61bb      	str	r3, [r7, #24]
 800dd66:	e00c      	b.n	800dd82 <osMutexNew+0x9a>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d108      	bne.n	800dd82 <osMutexNew+0x9a>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d104      	bne.n	800dd82 <osMutexNew+0x9a>
            mem = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	61bb      	str	r3, [r7, #24]
 800dd7c:	e001      	b.n	800dd82 <osMutexNew+0x9a>
          }
        }
      }
      else {
        mem = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d114      	bne.n	800ddb2 <osMutexNew+0xca>
        if (rmtx != 0U) {
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d008      	beq.n	800dda0 <osMutexNew+0xb8>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	0019      	movs	r1, r3
 800dd94:	2004      	movs	r0, #4
 800dd96:	f000 fdc8 	bl	800e92a <xQueueCreateMutexStatic>
 800dd9a:	0003      	movs	r3, r0
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd9e:	e019      	b.n	800ddd4 <osMutexNew+0xec>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	0019      	movs	r1, r3
 800dda6:	2001      	movs	r0, #1
 800dda8:	f000 fdbf 	bl	800e92a <xQueueCreateMutexStatic>
 800ddac:	0003      	movs	r3, r0
 800ddae:	627b      	str	r3, [r7, #36]	; 0x24
 800ddb0:	e010      	b.n	800ddd4 <osMutexNew+0xec>
        }
      }
      else {
        if (mem == 0) {
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10d      	bne.n	800ddd4 <osMutexNew+0xec>
          if (rmtx != 0U) {
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <osMutexNew+0xe2>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ddbe:	2004      	movs	r0, #4
 800ddc0:	f000 fd97 	bl	800e8f2 <xQueueCreateMutex>
 800ddc4:	0003      	movs	r3, r0
 800ddc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ddc8:	e004      	b.n	800ddd4 <osMutexNew+0xec>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ddca:	2001      	movs	r0, #1
 800ddcc:	f000 fd91 	bl	800e8f2 <xQueueCreateMutex>
 800ddd0:	0003      	movs	r3, r0
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00e      	beq.n	800ddf8 <osMutexNew+0x110>
        if (attr != NULL) {
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <osMutexNew+0x100>
          name = attr->name;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	617b      	str	r3, [r7, #20]
 800dde6:	e001      	b.n	800ddec <osMutexNew+0x104>
        } else {
          name = NULL;
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	0011      	movs	r1, r2
 800ddf2:	0018      	movs	r0, r3
 800ddf4:	f001 fb5e 	bl	800f4b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d006      	beq.n	800de0c <osMutexNew+0x124>
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d003      	beq.n	800de0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800de04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de06:	2201      	movs	r2, #1
 800de08:	4313      	orrs	r3, r2
 800de0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de0e:	0018      	movs	r0, r3
 800de10:	46bd      	mov	sp, r7
 800de12:	b00a      	add	sp, #40	; 0x28
 800de14:	bd80      	pop	{r7, pc}
 800de16:	46c0      	nop			; (mov r8, r8)
 800de18:	200007e0 	.word	0x200007e0

0800de1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b088      	sub	sp, #32
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2201      	movs	r2, #1
 800de2a:	4393      	bics	r3, r2
 800de2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2201      	movs	r2, #1
 800de32:	4013      	ands	r3, r2
 800de34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800de36:	2300      	movs	r3, #0
 800de38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de3a:	f3ef 8305 	mrs	r3, IPSR
 800de3e:	613b      	str	r3, [r7, #16]
  return(result);
 800de40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800de42:	2b00      	cmp	r3, #0
 800de44:	d109      	bne.n	800de5a <osMutexAcquire+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de46:	f3ef 8310 	mrs	r3, PRIMASK
 800de4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d007      	beq.n	800de62 <osMutexAcquire+0x46>
 800de52:	4b1f      	ldr	r3, [pc, #124]	; (800ded0 <osMutexAcquire+0xb4>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b02      	cmp	r3, #2
 800de58:	d103      	bne.n	800de62 <osMutexAcquire+0x46>
    stat = osErrorISR;
 800de5a:	2306      	movs	r3, #6
 800de5c:	425b      	negs	r3, r3
 800de5e:	61fb      	str	r3, [r7, #28]
 800de60:	e030      	b.n	800dec4 <osMutexAcquire+0xa8>
  }
  else if (hMutex == NULL) {
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d103      	bne.n	800de70 <osMutexAcquire+0x54>
    stat = osErrorParameter;
 800de68:	2304      	movs	r3, #4
 800de6a:	425b      	negs	r3, r3
 800de6c:	61fb      	str	r3, [r7, #28]
 800de6e:	e029      	b.n	800dec4 <osMutexAcquire+0xa8>
  }
  else {
    if (rmtx != 0U) {
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d013      	beq.n	800de9e <osMutexAcquire+0x82>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	0011      	movs	r1, r2
 800de7c:	0018      	movs	r0, r3
 800de7e:	f000 fd9f 	bl	800e9c0 <xQueueTakeMutexRecursive>
 800de82:	0003      	movs	r3, r0
 800de84:	2b01      	cmp	r3, #1
 800de86:	d01d      	beq.n	800dec4 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <osMutexAcquire+0x7a>
          stat = osErrorTimeout;
 800de8e:	2302      	movs	r3, #2
 800de90:	425b      	negs	r3, r3
 800de92:	61fb      	str	r3, [r7, #28]
 800de94:	e016      	b.n	800dec4 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800de96:	2303      	movs	r3, #3
 800de98:	425b      	negs	r3, r3
 800de9a:	61fb      	str	r3, [r7, #28]
 800de9c:	e012      	b.n	800dec4 <osMutexAcquire+0xa8>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	0011      	movs	r1, r2
 800dea4:	0018      	movs	r0, r3
 800dea6:	f001 f853 	bl	800ef50 <xQueueSemaphoreTake>
 800deaa:	0003      	movs	r3, r0
 800deac:	2b01      	cmp	r3, #1
 800deae:	d009      	beq.n	800dec4 <osMutexAcquire+0xa8>
        if (timeout != 0U) {
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <osMutexAcquire+0xa2>
          stat = osErrorTimeout;
 800deb6:	2302      	movs	r3, #2
 800deb8:	425b      	negs	r3, r3
 800deba:	61fb      	str	r3, [r7, #28]
 800debc:	e002      	b.n	800dec4 <osMutexAcquire+0xa8>
        } else {
          stat = osErrorResource;
 800debe:	2303      	movs	r3, #3
 800dec0:	425b      	negs	r3, r3
 800dec2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dec4:	69fb      	ldr	r3, [r7, #28]
}
 800dec6:	0018      	movs	r0, r3
 800dec8:	46bd      	mov	sp, r7
 800deca:	b008      	add	sp, #32
 800decc:	bd80      	pop	{r7, pc}
 800dece:	46c0      	nop			; (mov r8, r8)
 800ded0:	200007e0 	.word	0x200007e0

0800ded4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2201      	movs	r2, #1
 800dee0:	4393      	bics	r3, r2
 800dee2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	4013      	ands	r3, r2
 800deea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800deec:	2300      	movs	r3, #0
 800deee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800def0:	f3ef 8305 	mrs	r3, IPSR
 800def4:	613b      	str	r3, [r7, #16]
  return(result);
 800def6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800def8:	2b00      	cmp	r3, #0
 800defa:	d109      	bne.n	800df10 <osMutexRelease+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800defc:	f3ef 8310 	mrs	r3, PRIMASK
 800df00:	60fb      	str	r3, [r7, #12]
  return(result);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d007      	beq.n	800df18 <osMutexRelease+0x44>
 800df08:	4b16      	ldr	r3, [pc, #88]	; (800df64 <osMutexRelease+0x90>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d103      	bne.n	800df18 <osMutexRelease+0x44>
    stat = osErrorISR;
 800df10:	2306      	movs	r3, #6
 800df12:	425b      	negs	r3, r3
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e020      	b.n	800df5a <osMutexRelease+0x86>
  }
  else if (hMutex == NULL) {
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d103      	bne.n	800df26 <osMutexRelease+0x52>
    stat = osErrorParameter;
 800df1e:	2304      	movs	r3, #4
 800df20:	425b      	negs	r3, r3
 800df22:	61fb      	str	r3, [r7, #28]
 800df24:	e019      	b.n	800df5a <osMutexRelease+0x86>
  }
  else {
    if (rmtx != 0U) {
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00a      	beq.n	800df42 <osMutexRelease+0x6e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800df2c:	69bb      	ldr	r3, [r7, #24]
 800df2e:	0018      	movs	r0, r3
 800df30:	f000 fd1b 	bl	800e96a <xQueueGiveMutexRecursive>
 800df34:	0003      	movs	r3, r0
 800df36:	2b01      	cmp	r3, #1
 800df38:	d00f      	beq.n	800df5a <osMutexRelease+0x86>
        stat = osErrorResource;
 800df3a:	2303      	movs	r3, #3
 800df3c:	425b      	negs	r3, r3
 800df3e:	61fb      	str	r3, [r7, #28]
 800df40:	e00b      	b.n	800df5a <osMutexRelease+0x86>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800df42:	69b8      	ldr	r0, [r7, #24]
 800df44:	2300      	movs	r3, #0
 800df46:	2200      	movs	r2, #0
 800df48:	2100      	movs	r1, #0
 800df4a:	f000 fdb2 	bl	800eab2 <xQueueGenericSend>
 800df4e:	0003      	movs	r3, r0
 800df50:	2b01      	cmp	r3, #1
 800df52:	d002      	beq.n	800df5a <osMutexRelease+0x86>
        stat = osErrorResource;
 800df54:	2303      	movs	r3, #3
 800df56:	425b      	negs	r3, r3
 800df58:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800df5a:	69fb      	ldr	r3, [r7, #28]
}
 800df5c:	0018      	movs	r0, r3
 800df5e:	46bd      	mov	sp, r7
 800df60:	b008      	add	sp, #32
 800df62:	bd80      	pop	{r7, pc}
 800df64:	200007e0 	.word	0x200007e0

0800df68 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08c      	sub	sp, #48	; 0x30
 800df6c:	af02      	add	r7, sp, #8
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800df74:	2300      	movs	r3, #0
 800df76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df78:	f3ef 8305 	mrs	r3, IPSR
 800df7c:	61bb      	str	r3, [r7, #24]
  return(result);
 800df7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df80:	2b00      	cmp	r3, #0
 800df82:	d000      	beq.n	800df86 <osSemaphoreNew+0x1e>
 800df84:	e08a      	b.n	800e09c <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df86:	f3ef 8310 	mrs	r3, PRIMASK
 800df8a:	617b      	str	r3, [r7, #20]
  return(result);
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d004      	beq.n	800df9c <osSemaphoreNew+0x34>
 800df92:	4b45      	ldr	r3, [pc, #276]	; (800e0a8 <osSemaphoreNew+0x140>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b02      	cmp	r3, #2
 800df98:	d100      	bne.n	800df9c <osSemaphoreNew+0x34>
 800df9a:	e07f      	b.n	800e09c <osSemaphoreNew+0x134>
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d100      	bne.n	800dfa4 <osSemaphoreNew+0x3c>
 800dfa2:	e07b      	b.n	800e09c <osSemaphoreNew+0x134>
 800dfa4:	68ba      	ldr	r2, [r7, #8]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d900      	bls.n	800dfae <osSemaphoreNew+0x46>
 800dfac:	e076      	b.n	800e09c <osSemaphoreNew+0x134>
    mem = -1;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	425b      	negs	r3, r3
 800dfb2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d015      	beq.n	800dfe6 <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <osSemaphoreNew+0x68>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	2b4f      	cmp	r3, #79	; 0x4f
 800dfc8:	d902      	bls.n	800dfd0 <osSemaphoreNew+0x68>
        mem = 1;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	623b      	str	r3, [r7, #32]
 800dfce:	e00c      	b.n	800dfea <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d108      	bne.n	800dfea <osSemaphoreNew+0x82>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d104      	bne.n	800dfea <osSemaphoreNew+0x82>
          mem = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	623b      	str	r3, [r7, #32]
 800dfe4:	e001      	b.n	800dfea <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	3301      	adds	r3, #1
 800dfee:	d055      	beq.n	800e09c <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d12b      	bne.n	800e04e <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800dff6:	6a3b      	ldr	r3, [r7, #32]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d10b      	bne.n	800e014 <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	2203      	movs	r2, #3
 800e002:	9200      	str	r2, [sp, #0]
 800e004:	2200      	movs	r2, #0
 800e006:	2100      	movs	r1, #0
 800e008:	2001      	movs	r0, #1
 800e00a:	f000 fbb0 	bl	800e76e <xQueueGenericCreateStatic>
 800e00e:	0003      	movs	r3, r0
 800e010:	627b      	str	r3, [r7, #36]	; 0x24
 800e012:	e006      	b.n	800e022 <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e014:	2203      	movs	r2, #3
 800e016:	2100      	movs	r1, #0
 800e018:	2001      	movs	r0, #1
 800e01a:	f000 fbf3 	bl	800e804 <xQueueGenericCreate>
 800e01e:	0003      	movs	r3, r0
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d027      	beq.n	800e078 <osSemaphoreNew+0x110>
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d024      	beq.n	800e078 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e030:	2300      	movs	r3, #0
 800e032:	2200      	movs	r2, #0
 800e034:	2100      	movs	r1, #0
 800e036:	f000 fd3c 	bl	800eab2 <xQueueGenericSend>
 800e03a:	0003      	movs	r3, r0
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d01b      	beq.n	800e078 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	0018      	movs	r0, r3
 800e044:	f001 f8e7 	bl	800f216 <vQueueDelete>
            hSemaphore = NULL;
 800e048:	2300      	movs	r3, #0
 800e04a:	627b      	str	r3, [r7, #36]	; 0x24
 800e04c:	e014      	b.n	800e078 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800e04e:	6a3b      	ldr	r3, [r7, #32]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d109      	bne.n	800e068 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	0018      	movs	r0, r3
 800e05e:	f000 fcdf 	bl	800ea20 <xQueueCreateCountingSemaphoreStatic>
 800e062:	0003      	movs	r3, r0
 800e064:	627b      	str	r3, [r7, #36]	; 0x24
 800e066:	e007      	b.n	800e078 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	0011      	movs	r1, r2
 800e06e:	0018      	movs	r0, r3
 800e070:	f000 fcfc 	bl	800ea6c <xQueueCreateCountingSemaphore>
 800e074:	0003      	movs	r3, r0
 800e076:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00e      	beq.n	800e09c <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d003      	beq.n	800e08c <osSemaphoreNew+0x124>
          name = attr->name;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	61fb      	str	r3, [r7, #28]
 800e08a:	e001      	b.n	800e090 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 800e08c:	2300      	movs	r3, #0
 800e08e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e090:	69fa      	ldr	r2, [r7, #28]
 800e092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e094:	0011      	movs	r1, r2
 800e096:	0018      	movs	r0, r3
 800e098:	f001 fa0c 	bl	800f4b4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e09e:	0018      	movs	r0, r3
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	b00a      	add	sp, #40	; 0x28
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	200007e0 	.word	0x200007e0

0800e0ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d103      	bne.n	800e0cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e0c4:	2304      	movs	r3, #4
 800e0c6:	425b      	negs	r3, r3
 800e0c8:	61fb      	str	r3, [r7, #28]
 800e0ca:	e043      	b.n	800e154 <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0cc:	f3ef 8305 	mrs	r3, IPSR
 800e0d0:	617b      	str	r3, [r7, #20]
  return(result);
 800e0d2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d109      	bne.n	800e0ec <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e0dc:	613b      	str	r3, [r7, #16]
  return(result);
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d022      	beq.n	800e12a <osSemaphoreAcquire+0x7e>
 800e0e4:	4b1e      	ldr	r3, [pc, #120]	; (800e160 <osSemaphoreAcquire+0xb4>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d11e      	bne.n	800e12a <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d003      	beq.n	800e0fa <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800e0f2:	2304      	movs	r3, #4
 800e0f4:	425b      	negs	r3, r3
 800e0f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e0f8:	e02b      	b.n	800e152 <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e0fe:	230c      	movs	r3, #12
 800e100:	18fa      	adds	r2, r7, r3
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	2100      	movs	r1, #0
 800e106:	0018      	movs	r0, r3
 800e108:	f000 fffc 	bl	800f104 <xQueueReceiveFromISR>
 800e10c:	0003      	movs	r3, r0
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d003      	beq.n	800e11a <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 800e112:	2303      	movs	r3, #3
 800e114:	425b      	negs	r3, r3
 800e116:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e118:	e01b      	b.n	800e152 <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d018      	beq.n	800e152 <osSemaphoreAcquire+0xa6>
 800e120:	4b10      	ldr	r3, [pc, #64]	; (800e164 <osSemaphoreAcquire+0xb8>)
 800e122:	2280      	movs	r2, #128	; 0x80
 800e124:	0552      	lsls	r2, r2, #21
 800e126:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 800e128:	e013      	b.n	800e152 <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	0011      	movs	r1, r2
 800e130:	0018      	movs	r0, r3
 800e132:	f000 ff0d 	bl	800ef50 <xQueueSemaphoreTake>
 800e136:	0003      	movs	r3, r0
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d00b      	beq.n	800e154 <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 800e142:	2302      	movs	r3, #2
 800e144:	425b      	negs	r3, r3
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	e004      	b.n	800e154 <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 800e14a:	2303      	movs	r3, #3
 800e14c:	425b      	negs	r3, r3
 800e14e:	61fb      	str	r3, [r7, #28]
 800e150:	e000      	b.n	800e154 <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800e152:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 800e154:	69fb      	ldr	r3, [r7, #28]
}
 800e156:	0018      	movs	r0, r3
 800e158:	46bd      	mov	sp, r7
 800e15a:	b008      	add	sp, #32
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	46c0      	nop			; (mov r8, r8)
 800e160:	200007e0 	.word	0x200007e0
 800e164:	e000ed04 	.word	0xe000ed04

0800e168 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e174:	2300      	movs	r3, #0
 800e176:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d103      	bne.n	800e186 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e17e:	2304      	movs	r3, #4
 800e180:	425b      	negs	r3, r3
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	e035      	b.n	800e1f2 <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e186:	f3ef 8305 	mrs	r3, IPSR
 800e18a:	617b      	str	r3, [r7, #20]
  return(result);
 800e18c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d109      	bne.n	800e1a6 <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e192:	f3ef 8310 	mrs	r3, PRIMASK
 800e196:	613b      	str	r3, [r7, #16]
  return(result);
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d01b      	beq.n	800e1d6 <osSemaphoreRelease+0x6e>
 800e19e:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <osSemaphoreRelease+0x94>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d117      	bne.n	800e1d6 <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1aa:	230c      	movs	r3, #12
 800e1ac:	18fa      	adds	r2, r7, r3
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	0011      	movs	r1, r2
 800e1b2:	0018      	movs	r0, r3
 800e1b4:	f000 fdb2 	bl	800ed1c <xQueueGiveFromISR>
 800e1b8:	0003      	movs	r3, r0
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d003      	beq.n	800e1c6 <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	425b      	negs	r3, r3
 800e1c2:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1c4:	e014      	b.n	800e1f0 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d011      	beq.n	800e1f0 <osSemaphoreRelease+0x88>
 800e1cc:	4b0c      	ldr	r3, [pc, #48]	; (800e200 <osSemaphoreRelease+0x98>)
 800e1ce:	2280      	movs	r2, #128	; 0x80
 800e1d0:	0552      	lsls	r2, r2, #21
 800e1d2:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1d4:	e00c      	b.n	800e1f0 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e1d6:	69b8      	ldr	r0, [r7, #24]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	2200      	movs	r2, #0
 800e1dc:	2100      	movs	r1, #0
 800e1de:	f000 fc68 	bl	800eab2 <xQueueGenericSend>
 800e1e2:	0003      	movs	r3, r0
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d004      	beq.n	800e1f2 <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	425b      	negs	r3, r3
 800e1ec:	61fb      	str	r3, [r7, #28]
 800e1ee:	e000      	b.n	800e1f2 <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e1f0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 800e1f2:	69fb      	ldr	r3, [r7, #28]
}
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	b008      	add	sp, #32
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	200007e0 	.word	0x200007e0
 800e200:	e000ed04 	.word	0xe000ed04

0800e204 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e204:	b590      	push	{r4, r7, lr}
 800e206:	b08d      	sub	sp, #52	; 0x34
 800e208:	af02      	add	r7, sp, #8
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e210:	2300      	movs	r3, #0
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e214:	f3ef 8305 	mrs	r3, IPSR
 800e218:	61bb      	str	r3, [r7, #24]
  return(result);
 800e21a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d000      	beq.n	800e222 <osMessageQueueNew+0x1e>
 800e220:	e06f      	b.n	800e302 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e222:	f3ef 8310 	mrs	r3, PRIMASK
 800e226:	617b      	str	r3, [r7, #20]
  return(result);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d004      	beq.n	800e238 <osMessageQueueNew+0x34>
 800e22e:	4b37      	ldr	r3, [pc, #220]	; (800e30c <osMessageQueueNew+0x108>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b02      	cmp	r3, #2
 800e234:	d100      	bne.n	800e238 <osMessageQueueNew+0x34>
 800e236:	e064      	b.n	800e302 <osMessageQueueNew+0xfe>
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d100      	bne.n	800e240 <osMessageQueueNew+0x3c>
 800e23e:	e060      	b.n	800e302 <osMessageQueueNew+0xfe>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d05d      	beq.n	800e302 <osMessageQueueNew+0xfe>
    mem = -1;
 800e246:	2301      	movs	r3, #1
 800e248:	425b      	negs	r3, r3
 800e24a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d028      	beq.n	800e2a4 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d011      	beq.n	800e27e <osMessageQueueNew+0x7a>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	2b4f      	cmp	r3, #79	; 0x4f
 800e260:	d90d      	bls.n	800e27e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e266:	2b00      	cmp	r3, #0
 800e268:	d009      	beq.n	800e27e <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	695a      	ldr	r2, [r3, #20]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	68b9      	ldr	r1, [r7, #8]
 800e272:	434b      	muls	r3, r1
 800e274:	429a      	cmp	r2, r3
 800e276:	d302      	bcc.n	800e27e <osMessageQueueNew+0x7a>
        mem = 1;
 800e278:	2301      	movs	r3, #1
 800e27a:	623b      	str	r3, [r7, #32]
 800e27c:	e014      	b.n	800e2a8 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d110      	bne.n	800e2a8 <osMessageQueueNew+0xa4>
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10c      	bne.n	800e2a8 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e292:	2b00      	cmp	r3, #0
 800e294:	d108      	bne.n	800e2a8 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d104      	bne.n	800e2a8 <osMessageQueueNew+0xa4>
          mem = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	623b      	str	r3, [r7, #32]
 800e2a2:	e001      	b.n	800e2a8 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d10c      	bne.n	800e2c8 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	691a      	ldr	r2, [r3, #16]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	2400      	movs	r4, #0
 800e2bc:	9400      	str	r4, [sp, #0]
 800e2be:	f000 fa56 	bl	800e76e <xQueueGenericCreateStatic>
 800e2c2:	0003      	movs	r3, r0
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2c6:	e00a      	b.n	800e2de <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d107      	bne.n	800e2de <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 800e2ce:	68b9      	ldr	r1, [r7, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	f000 fa95 	bl	800e804 <xQueueGenericCreate>
 800e2da:	0003      	movs	r3, r0
 800e2dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00e      	beq.n	800e302 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d003      	beq.n	800e2f2 <osMessageQueueNew+0xee>
        name = attr->name;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	e001      	b.n	800e2f6 <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800e2f6:	69fa      	ldr	r2, [r7, #28]
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	0011      	movs	r1, r2
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f001 f8d9 	bl	800f4b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e304:	0018      	movs	r0, r3
 800e306:	46bd      	mov	sp, r7
 800e308:	b00b      	add	sp, #44	; 0x2c
 800e30a:	bd90      	pop	{r4, r7, pc}
 800e30c:	200007e0 	.word	0x200007e0

0800e310 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e310:	b580      	push	{r7, lr}
 800e312:	b08a      	sub	sp, #40	; 0x28
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	603b      	str	r3, [r7, #0]
 800e31c:	1dfb      	adds	r3, r7, #7
 800e31e:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e324:	2300      	movs	r3, #0
 800e326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e328:	f3ef 8305 	mrs	r3, IPSR
 800e32c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e32e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e330:	2b00      	cmp	r3, #0
 800e332:	d109      	bne.n	800e348 <osMessageQueuePut+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e334:	f3ef 8310 	mrs	r3, PRIMASK
 800e338:	61bb      	str	r3, [r7, #24]
  return(result);
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d028      	beq.n	800e392 <osMessageQueuePut+0x82>
 800e340:	4b26      	ldr	r3, [pc, #152]	; (800e3dc <osMessageQueuePut+0xcc>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b02      	cmp	r3, #2
 800e346:	d124      	bne.n	800e392 <osMessageQueuePut+0x82>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <osMessageQueuePut+0x4a>
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <osMessageQueuePut+0x4a>
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <osMessageQueuePut+0x52>
      stat = osErrorParameter;
 800e35a:	2304      	movs	r3, #4
 800e35c:	425b      	negs	r3, r3
 800e35e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e360:	e035      	b.n	800e3ce <osMessageQueuePut+0xbe>
    }
    else {
      yield = pdFALSE;
 800e362:	2300      	movs	r3, #0
 800e364:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e366:	2314      	movs	r3, #20
 800e368:	18fa      	adds	r2, r7, r3
 800e36a:	68b9      	ldr	r1, [r7, #8]
 800e36c:	6a38      	ldr	r0, [r7, #32]
 800e36e:	2300      	movs	r3, #0
 800e370:	f000 fc63 	bl	800ec3a <xQueueGenericSendFromISR>
 800e374:	0003      	movs	r3, r0
 800e376:	2b01      	cmp	r3, #1
 800e378:	d003      	beq.n	800e382 <osMessageQueuePut+0x72>
        stat = osErrorResource;
 800e37a:	2303      	movs	r3, #3
 800e37c:	425b      	negs	r3, r3
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e380:	e025      	b.n	800e3ce <osMessageQueuePut+0xbe>
      } else {
        portYIELD_FROM_ISR (yield);
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d022      	beq.n	800e3ce <osMessageQueuePut+0xbe>
 800e388:	4b15      	ldr	r3, [pc, #84]	; (800e3e0 <osMessageQueuePut+0xd0>)
 800e38a:	2280      	movs	r2, #128	; 0x80
 800e38c:	0552      	lsls	r2, r2, #21
 800e38e:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e390:	e01d      	b.n	800e3ce <osMessageQueuePut+0xbe>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d002      	beq.n	800e39e <osMessageQueuePut+0x8e>
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d103      	bne.n	800e3a6 <osMessageQueuePut+0x96>
      stat = osErrorParameter;
 800e39e:	2304      	movs	r3, #4
 800e3a0:	425b      	negs	r3, r3
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a4:	e014      	b.n	800e3d0 <osMessageQueuePut+0xc0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	68b9      	ldr	r1, [r7, #8]
 800e3aa:	6a38      	ldr	r0, [r7, #32]
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	f000 fb80 	bl	800eab2 <xQueueGenericSend>
 800e3b2:	0003      	movs	r3, r0
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d00b      	beq.n	800e3d0 <osMessageQueuePut+0xc0>
        if (timeout != 0U) {
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <osMessageQueuePut+0xb6>
          stat = osErrorTimeout;
 800e3be:	2302      	movs	r3, #2
 800e3c0:	425b      	negs	r3, r3
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c4:	e004      	b.n	800e3d0 <osMessageQueuePut+0xc0>
        } else {
          stat = osErrorResource;
 800e3c6:	2303      	movs	r3, #3
 800e3c8:	425b      	negs	r3, r3
 800e3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e3cc:	e000      	b.n	800e3d0 <osMessageQueuePut+0xc0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e3ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e3d2:	0018      	movs	r0, r3
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	b00a      	add	sp, #40	; 0x28
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	46c0      	nop			; (mov r8, r8)
 800e3dc:	200007e0 	.word	0x200007e0
 800e3e0:	e000ed04 	.word	0xe000ed04

0800e3e4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08a      	sub	sp, #40	; 0x28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3fa:	f3ef 8305 	mrs	r3, IPSR
 800e3fe:	61fb      	str	r3, [r7, #28]
  return(result);
 800e400:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800e402:	2b00      	cmp	r3, #0
 800e404:	d109      	bne.n	800e41a <osMessageQueueGet+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e406:	f3ef 8310 	mrs	r3, PRIMASK
 800e40a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d028      	beq.n	800e464 <osMessageQueueGet+0x80>
 800e412:	4b26      	ldr	r3, [pc, #152]	; (800e4ac <osMessageQueueGet+0xc8>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d124      	bne.n	800e464 <osMessageQueueGet+0x80>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d005      	beq.n	800e42c <osMessageQueueGet+0x48>
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d002      	beq.n	800e42c <osMessageQueueGet+0x48>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d003      	beq.n	800e434 <osMessageQueueGet+0x50>
      stat = osErrorParameter;
 800e42c:	2304      	movs	r3, #4
 800e42e:	425b      	negs	r3, r3
 800e430:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e432:	e035      	b.n	800e4a0 <osMessageQueueGet+0xbc>
    }
    else {
      yield = pdFALSE;
 800e434:	2300      	movs	r3, #0
 800e436:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e438:	2314      	movs	r3, #20
 800e43a:	18fa      	adds	r2, r7, r3
 800e43c:	68b9      	ldr	r1, [r7, #8]
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	0018      	movs	r0, r3
 800e442:	f000 fe5f 	bl	800f104 <xQueueReceiveFromISR>
 800e446:	0003      	movs	r3, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d003      	beq.n	800e454 <osMessageQueueGet+0x70>
        stat = osErrorResource;
 800e44c:	2303      	movs	r3, #3
 800e44e:	425b      	negs	r3, r3
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e452:	e025      	b.n	800e4a0 <osMessageQueueGet+0xbc>
      } else {
        portYIELD_FROM_ISR (yield);
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d022      	beq.n	800e4a0 <osMessageQueueGet+0xbc>
 800e45a:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <osMessageQueueGet+0xcc>)
 800e45c:	2280      	movs	r2, #128	; 0x80
 800e45e:	0552      	lsls	r2, r2, #21
 800e460:	601a      	str	r2, [r3, #0]
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e462:	e01d      	b.n	800e4a0 <osMessageQueueGet+0xbc>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e464:	6a3b      	ldr	r3, [r7, #32]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d002      	beq.n	800e470 <osMessageQueueGet+0x8c>
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d103      	bne.n	800e478 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
 800e470:	2304      	movs	r3, #4
 800e472:	425b      	negs	r3, r3
 800e474:	627b      	str	r3, [r7, #36]	; 0x24
 800e476:	e014      	b.n	800e4a2 <osMessageQueueGet+0xbe>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	68b9      	ldr	r1, [r7, #8]
 800e47c:	6a3b      	ldr	r3, [r7, #32]
 800e47e:	0018      	movs	r0, r3
 800e480:	f000 fcb1 	bl	800ede6 <xQueueReceive>
 800e484:	0003      	movs	r3, r0
 800e486:	2b01      	cmp	r3, #1
 800e488:	d00b      	beq.n	800e4a2 <osMessageQueueGet+0xbe>
        if (timeout != 0U) {
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <osMessageQueueGet+0xb4>
          stat = osErrorTimeout;
 800e490:	2302      	movs	r3, #2
 800e492:	425b      	negs	r3, r3
 800e494:	627b      	str	r3, [r7, #36]	; 0x24
 800e496:	e004      	b.n	800e4a2 <osMessageQueueGet+0xbe>
        } else {
          stat = osErrorResource;
 800e498:	2303      	movs	r3, #3
 800e49a:	425b      	negs	r3, r3
 800e49c:	627b      	str	r3, [r7, #36]	; 0x24
 800e49e:	e000      	b.n	800e4a2 <osMessageQueueGet+0xbe>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e4a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (stat);
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4a4:	0018      	movs	r0, r3
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	b00a      	add	sp, #40	; 0x28
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	200007e0 	.word	0x200007e0
 800e4b0:	e000ed04 	.word	0xe000ed04

0800e4b4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b086      	sub	sp, #24
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d102      	bne.n	800e4cc <osMessageQueueGetCount+0x18>
    count = 0U;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]
 800e4ca:	e01c      	b.n	800e506 <osMessageQueueGetCount+0x52>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4cc:	f3ef 8305 	mrs	r3, IPSR
 800e4d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d109      	bne.n	800e4ec <osMessageQueueGetCount+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00a      	beq.n	800e4fa <osMessageQueueGetCount+0x46>
 800e4e4:	4b0a      	ldr	r3, [pc, #40]	; (800e510 <osMessageQueueGetCount+0x5c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d106      	bne.n	800e4fa <osMessageQueueGetCount+0x46>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	0018      	movs	r0, r3
 800e4f0:	f000 fe80 	bl	800f1f4 <uxQueueMessagesWaitingFromISR>
 800e4f4:	0003      	movs	r3, r0
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	e005      	b.n	800e506 <osMessageQueueGetCount+0x52>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	0018      	movs	r0, r3
 800e4fe:	f000 fe64 	bl	800f1ca <uxQueueMessagesWaiting>
 800e502:	0003      	movs	r3, r0
 800e504:	617b      	str	r3, [r7, #20]
  }

  return ((uint32_t)count);
 800e506:	697b      	ldr	r3, [r7, #20]
}
 800e508:	0018      	movs	r0, r3
 800e50a:	46bd      	mov	sp, r7
 800e50c:	b006      	add	sp, #24
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	200007e0 	.word	0x200007e0

0800e514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	4a06      	ldr	r2, [pc, #24]	; (800e53c <vApplicationGetIdleTaskMemory+0x28>)
 800e524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	4a05      	ldr	r2, [pc, #20]	; (800e540 <vApplicationGetIdleTaskMemory+0x2c>)
 800e52a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2240      	movs	r2, #64	; 0x40
 800e530:	601a      	str	r2, [r3, #0]
}
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	46bd      	mov	sp, r7
 800e536:	b004      	add	sp, #16
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	46c0      	nop			; (mov r8, r8)
 800e53c:	200007e4 	.word	0x200007e4
 800e540:	200008a0 	.word	0x200008a0

0800e544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	4a06      	ldr	r2, [pc, #24]	; (800e56c <vApplicationGetTimerTaskMemory+0x28>)
 800e554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	4a05      	ldr	r2, [pc, #20]	; (800e570 <vApplicationGetTimerTaskMemory+0x2c>)
 800e55a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2280      	movs	r2, #128	; 0x80
 800e560:	601a      	str	r2, [r3, #0]
}
 800e562:	46c0      	nop			; (mov r8, r8)
 800e564:	46bd      	mov	sp, r7
 800e566:	b004      	add	sp, #16
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	46c0      	nop			; (mov r8, r8)
 800e56c:	200009a0 	.word	0x200009a0
 800e570:	20000a5c 	.word	0x20000a5c

0800e574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	3308      	adds	r3, #8
 800e580:	001a      	movs	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2201      	movs	r2, #1
 800e58a:	4252      	negs	r2, r2
 800e58c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	3308      	adds	r3, #8
 800e592:	001a      	movs	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3308      	adds	r3, #8
 800e59c:	001a      	movs	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e5a8:	46c0      	nop			; (mov r8, r8)
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	b002      	add	sp, #8
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e5be:	46c0      	nop			; (mov r8, r8)
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b002      	add	sp, #8
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	689a      	ldr	r2, [r3, #8]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	683a      	ldr	r2, [r7, #0]
 800e5ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	1c5a      	adds	r2, r3, #1
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	601a      	str	r2, [r3, #0]
}
 800e602:	46c0      	nop			; (mov r8, r8)
 800e604:	46bd      	mov	sp, r7
 800e606:	b004      	add	sp, #16
 800e608:	bd80      	pop	{r7, pc}

0800e60a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	3301      	adds	r3, #1
 800e61e:	d103      	bne.n	800e628 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	60fb      	str	r3, [r7, #12]
 800e626:	e00c      	b.n	800e642 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3308      	adds	r3, #8
 800e62c:	60fb      	str	r3, [r7, #12]
 800e62e:	e002      	b.n	800e636 <vListInsert+0x2c>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	60fb      	str	r3, [r7, #12]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d2f6      	bcs.n	800e630 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	683a      	ldr	r2, [r7, #0]
 800e650:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	683a      	ldr	r2, [r7, #0]
 800e65c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	1c5a      	adds	r2, r3, #1
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	601a      	str	r2, [r3, #0]
}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	46bd      	mov	sp, r7
 800e672:	b004      	add	sp, #16
 800e674:	bd80      	pop	{r7, pc}

0800e676 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b084      	sub	sp, #16
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	691b      	ldr	r3, [r3, #16]
 800e682:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6892      	ldr	r2, [r2, #8]
 800e68c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	689b      	ldr	r3, [r3, #8]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6852      	ldr	r2, [r2, #4]
 800e696:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d103      	bne.n	800e6aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	689a      	ldr	r2, [r3, #8]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
}
 800e6be:	0018      	movs	r0, r3
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	b004      	add	sp, #16
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b084      	sub	sp, #16
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <xQueueGenericReset+0x18>
 800e6da:	b672      	cpsid	i
 800e6dc:	e7fe      	b.n	800e6dc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800e6de:	f002 fb37 	bl	8010d50 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ee:	434b      	muls	r3, r1
 800e6f0:	18d2      	adds	r2, r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e70c:	1e59      	subs	r1, r3, #1
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e712:	434b      	muls	r3, r1
 800e714:	18d2      	adds	r2, r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2244      	movs	r2, #68	; 0x44
 800e71e:	21ff      	movs	r1, #255	; 0xff
 800e720:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2245      	movs	r2, #69	; 0x45
 800e726:	21ff      	movs	r1, #255	; 0xff
 800e728:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10d      	bne.n	800e74c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d013      	beq.n	800e760 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3310      	adds	r3, #16
 800e73c:	0018      	movs	r0, r3
 800e73e:	f001 fc2d 	bl	800ff9c <xTaskRemoveFromEventList>
 800e742:	1e03      	subs	r3, r0, #0
 800e744:	d00c      	beq.n	800e760 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e746:	f002 faf3 	bl	8010d30 <vPortYield>
 800e74a:	e009      	b.n	800e760 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3310      	adds	r3, #16
 800e750:	0018      	movs	r0, r3
 800e752:	f7ff ff0f 	bl	800e574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3324      	adds	r3, #36	; 0x24
 800e75a:	0018      	movs	r0, r3
 800e75c:	f7ff ff0a 	bl	800e574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e760:	f002 fb08 	bl	8010d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e764:	2301      	movs	r3, #1
}
 800e766:	0018      	movs	r0, r3
 800e768:	46bd      	mov	sp, r7
 800e76a:	b004      	add	sp, #16
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e76e:	b590      	push	{r4, r7, lr}
 800e770:	b089      	sub	sp, #36	; 0x24
 800e772:	af02      	add	r7, sp, #8
 800e774:	60f8      	str	r0, [r7, #12]
 800e776:	60b9      	str	r1, [r7, #8]
 800e778:	607a      	str	r2, [r7, #4]
 800e77a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d101      	bne.n	800e786 <xQueueGenericCreateStatic+0x18>
 800e782:	b672      	cpsid	i
 800e784:	e7fe      	b.n	800e784 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <xQueueGenericCreateStatic+0x22>
 800e78c:	b672      	cpsid	i
 800e78e:	e7fe      	b.n	800e78e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d002      	beq.n	800e79c <xQueueGenericCreateStatic+0x2e>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <xQueueGenericCreateStatic+0x32>
 800e79c:	2301      	movs	r3, #1
 800e79e:	e000      	b.n	800e7a2 <xQueueGenericCreateStatic+0x34>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d101      	bne.n	800e7aa <xQueueGenericCreateStatic+0x3c>
 800e7a6:	b672      	cpsid	i
 800e7a8:	e7fe      	b.n	800e7a8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d102      	bne.n	800e7b6 <xQueueGenericCreateStatic+0x48>
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <xQueueGenericCreateStatic+0x4c>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e000      	b.n	800e7bc <xQueueGenericCreateStatic+0x4e>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d101      	bne.n	800e7c4 <xQueueGenericCreateStatic+0x56>
 800e7c0:	b672      	cpsid	i
 800e7c2:	e7fe      	b.n	800e7c2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e7c4:	2350      	movs	r3, #80	; 0x50
 800e7c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	2b50      	cmp	r3, #80	; 0x50
 800e7cc:	d001      	beq.n	800e7d2 <xQueueGenericCreateStatic+0x64>
 800e7ce:	b672      	cpsid	i
 800e7d0:	e7fe      	b.n	800e7d0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00e      	beq.n	800e7fa <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2246      	movs	r2, #70	; 0x46
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7e4:	2328      	movs	r3, #40	; 0x28
 800e7e6:	18fb      	adds	r3, r7, r3
 800e7e8:	781c      	ldrb	r4, [r3, #0]
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	0023      	movs	r3, r4
 800e7f6:	f000 f83b 	bl	800e870 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e7fa:	697b      	ldr	r3, [r7, #20]
	}
 800e7fc:	0018      	movs	r0, r3
 800e7fe:	46bd      	mov	sp, r7
 800e800:	b007      	add	sp, #28
 800e802:	bd90      	pop	{r4, r7, pc}

0800e804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e804:	b590      	push	{r4, r7, lr}
 800e806:	b08b      	sub	sp, #44	; 0x2c
 800e808:	af02      	add	r7, sp, #8
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	1dfb      	adds	r3, r7, #7
 800e810:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d101      	bne.n	800e81c <xQueueGenericCreate+0x18>
 800e818:	b672      	cpsid	i
 800e81a:	e7fe      	b.n	800e81a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e822:	2300      	movs	r3, #0
 800e824:	61fb      	str	r3, [r7, #28]
 800e826:	e003      	b.n	800e830 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	68ba      	ldr	r2, [r7, #8]
 800e82c:	4353      	muls	r3, r2
 800e82e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	3350      	adds	r3, #80	; 0x50
 800e834:	0018      	movs	r0, r3
 800e836:	f002 fb23 	bl	8010e80 <pvPortMalloc>
 800e83a:	0003      	movs	r3, r0
 800e83c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d010      	beq.n	800e866 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	3350      	adds	r3, #80	; 0x50
 800e848:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	2246      	movs	r2, #70	; 0x46
 800e84e:	2100      	movs	r1, #0
 800e850:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e852:	1dfb      	adds	r3, r7, #7
 800e854:	781c      	ldrb	r4, [r3, #0]
 800e856:	697a      	ldr	r2, [r7, #20]
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	68f8      	ldr	r0, [r7, #12]
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	0023      	movs	r3, r4
 800e862:	f000 f805 	bl	800e870 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800e866:	69bb      	ldr	r3, [r7, #24]
	}
 800e868:	0018      	movs	r0, r3
 800e86a:	46bd      	mov	sp, r7
 800e86c:	b009      	add	sp, #36	; 0x24
 800e86e:	bd90      	pop	{r4, r7, pc}

0800e870 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	001a      	movs	r2, r3
 800e87e:	1cfb      	adds	r3, r7, #3
 800e880:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d103      	bne.n	800e890 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	69ba      	ldr	r2, [r7, #24]
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	e002      	b.n	800e896 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	68ba      	ldr	r2, [r7, #8]
 800e8a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	2101      	movs	r1, #1
 800e8a6:	0018      	movs	r0, r3
 800e8a8:	f7ff ff0d 	bl	800e6c6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	1cfa      	adds	r2, r7, #3
 800e8b0:	214c      	movs	r1, #76	; 0x4c
 800e8b2:	7812      	ldrb	r2, [r2, #0]
 800e8b4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e8b6:	46c0      	nop			; (mov r8, r8)
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	b004      	add	sp, #16
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b082      	sub	sp, #8
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00e      	beq.n	800e8ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	f000 f8e4 	bl	800eab2 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e8ea:	46c0      	nop			; (mov r8, r8)
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	b002      	add	sp, #8
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b086      	sub	sp, #24
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	0002      	movs	r2, r0
 800e8fa:	1dfb      	adds	r3, r7, #7
 800e8fc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e8fe:	2301      	movs	r3, #1
 800e900:	617b      	str	r3, [r7, #20]
 800e902:	2300      	movs	r3, #0
 800e904:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e906:	1dfb      	adds	r3, r7, #7
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	6939      	ldr	r1, [r7, #16]
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	0018      	movs	r0, r3
 800e910:	f7ff ff78 	bl	800e804 <xQueueGenericCreate>
 800e914:	0003      	movs	r3, r0
 800e916:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	0018      	movs	r0, r3
 800e91c:	f7ff ffcf 	bl	800e8be <prvInitialiseMutex>

		return pxNewQueue;
 800e920:	68fb      	ldr	r3, [r7, #12]
	}
 800e922:	0018      	movs	r0, r3
 800e924:	46bd      	mov	sp, r7
 800e926:	b006      	add	sp, #24
 800e928:	bd80      	pop	{r7, pc}

0800e92a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b088      	sub	sp, #32
 800e92e:	af02      	add	r7, sp, #8
 800e930:	0002      	movs	r2, r0
 800e932:	6039      	str	r1, [r7, #0]
 800e934:	1dfb      	adds	r3, r7, #7
 800e936:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e938:	2301      	movs	r3, #1
 800e93a:	617b      	str	r3, [r7, #20]
 800e93c:	2300      	movs	r3, #0
 800e93e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	6939      	ldr	r1, [r7, #16]
 800e944:	6978      	ldr	r0, [r7, #20]
 800e946:	1dfb      	adds	r3, r7, #7
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	0013      	movs	r3, r2
 800e94e:	2200      	movs	r2, #0
 800e950:	f7ff ff0d 	bl	800e76e <xQueueGenericCreateStatic>
 800e954:	0003      	movs	r3, r0
 800e956:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	0018      	movs	r0, r3
 800e95c:	f7ff ffaf 	bl	800e8be <prvInitialiseMutex>

		return pxNewQueue;
 800e960:	68fb      	ldr	r3, [r7, #12]
	}
 800e962:	0018      	movs	r0, r3
 800e964:	46bd      	mov	sp, r7
 800e966:	b006      	add	sp, #24
 800e968:	bd80      	pop	{r7, pc}

0800e96a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e96a:	b590      	push	{r4, r7, lr}
 800e96c:	b085      	sub	sp, #20
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d101      	bne.n	800e980 <xQueueGiveMutexRecursive+0x16>
 800e97c:	b672      	cpsid	i
 800e97e:	e7fe      	b.n	800e97e <xQueueGiveMutexRecursive+0x14>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	685c      	ldr	r4, [r3, #4]
 800e984:	f001 fca8 	bl	80102d8 <xTaskGetCurrentTaskHandle>
 800e988:	0003      	movs	r3, r0
 800e98a:	429c      	cmp	r4, r3
 800e98c:	d111      	bne.n	800e9b2 <xQueueGiveMutexRecursive+0x48>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	1e5a      	subs	r2, r3, #1
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	68db      	ldr	r3, [r3, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d105      	bne.n	800e9ac <xQueueGiveMutexRecursive+0x42>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e9a0:	68b8      	ldr	r0, [r7, #8]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	f000 f883 	bl	800eab2 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	e001      	b.n	800e9b6 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
	}
 800e9b8:	0018      	movs	r0, r3
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	b005      	add	sp, #20
 800e9be:	bd90      	pop	{r4, r7, pc}

0800e9c0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e9c0:	b590      	push	{r4, r7, lr}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <xQueueTakeMutexRecursive+0x18>
 800e9d4:	b672      	cpsid	i
 800e9d6:	e7fe      	b.n	800e9d6 <xQueueTakeMutexRecursive+0x16>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	685c      	ldr	r4, [r3, #4]
 800e9dc:	f001 fc7c 	bl	80102d8 <xTaskGetCurrentTaskHandle>
 800e9e0:	0003      	movs	r3, r0
 800e9e2:	429c      	cmp	r4, r3
 800e9e4:	d107      	bne.n	800e9f6 <xQueueTakeMutexRecursive+0x36>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	e00f      	b.n	800ea16 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	0011      	movs	r1, r2
 800e9fc:	0018      	movs	r0, r3
 800e9fe:	f000 faa7 	bl	800ef50 <xQueueSemaphoreTake>
 800ea02:	0003      	movs	r3, r0
 800ea04:	60fb      	str	r3, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d004      	beq.n	800ea16 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	1c5a      	adds	r2, r3, #1
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ea16:	68fb      	ldr	r3, [r7, #12]
	}
 800ea18:	0018      	movs	r0, r3
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	b005      	add	sp, #20
 800ea1e:	bd90      	pop	{r4, r7, pc}

0800ea20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <xQueueCreateCountingSemaphoreStatic+0x16>
 800ea32:	b672      	cpsid	i
 800ea34:	e7fe      	b.n	800ea34 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d901      	bls.n	800ea42 <xQueueCreateCountingSemaphoreStatic+0x22>
 800ea3e:	b672      	cpsid	i
 800ea40:	e7fe      	b.n	800ea40 <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	2202      	movs	r2, #2
 800ea48:	9200      	str	r2, [sp, #0]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	f7ff fe8e 	bl	800e76e <xQueueGenericCreateStatic>
 800ea52:	0003      	movs	r3, r0
 800ea54:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ea62:	697b      	ldr	r3, [r7, #20]
	}
 800ea64:	0018      	movs	r0, r3
 800ea66:	46bd      	mov	sp, r7
 800ea68:	b006      	add	sp, #24
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <xQueueCreateCountingSemaphore+0x14>
 800ea7c:	b672      	cpsid	i
 800ea7e:	e7fe      	b.n	800ea7e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d901      	bls.n	800ea8c <xQueueCreateCountingSemaphore+0x20>
 800ea88:	b672      	cpsid	i
 800ea8a:	e7fe      	b.n	800ea8a <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2202      	movs	r2, #2
 800ea90:	2100      	movs	r1, #0
 800ea92:	0018      	movs	r0, r3
 800ea94:	f7ff feb6 	bl	800e804 <xQueueGenericCreate>
 800ea98:	0003      	movs	r3, r0
 800ea9a:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d002      	beq.n	800eaa8 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
	}
 800eaaa:	0018      	movs	r0, r3
 800eaac:	46bd      	mov	sp, r7
 800eaae:	b004      	add	sp, #16
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b08a      	sub	sp, #40	; 0x28
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	60f8      	str	r0, [r7, #12]
 800eaba:	60b9      	str	r1, [r7, #8]
 800eabc:	607a      	str	r2, [r7, #4]
 800eabe:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eac0:	2300      	movs	r3, #0
 800eac2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800eac8:	6a3b      	ldr	r3, [r7, #32]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <xQueueGenericSend+0x20>
 800eace:	b672      	cpsid	i
 800ead0:	e7fe      	b.n	800ead0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d103      	bne.n	800eae0 <xQueueGenericSend+0x2e>
 800ead8:	6a3b      	ldr	r3, [r7, #32]
 800eada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <xQueueGenericSend+0x32>
 800eae0:	2301      	movs	r3, #1
 800eae2:	e000      	b.n	800eae6 <xQueueGenericSend+0x34>
 800eae4:	2300      	movs	r3, #0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <xQueueGenericSend+0x3c>
 800eaea:	b672      	cpsid	i
 800eaec:	e7fe      	b.n	800eaec <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	2b02      	cmp	r3, #2
 800eaf2:	d103      	bne.n	800eafc <xQueueGenericSend+0x4a>
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d101      	bne.n	800eb00 <xQueueGenericSend+0x4e>
 800eafc:	2301      	movs	r3, #1
 800eafe:	e000      	b.n	800eb02 <xQueueGenericSend+0x50>
 800eb00:	2300      	movs	r3, #0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d101      	bne.n	800eb0a <xQueueGenericSend+0x58>
 800eb06:	b672      	cpsid	i
 800eb08:	e7fe      	b.n	800eb08 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb0a:	f001 fbf3 	bl	80102f4 <xTaskGetSchedulerState>
 800eb0e:	1e03      	subs	r3, r0, #0
 800eb10:	d102      	bne.n	800eb18 <xQueueGenericSend+0x66>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <xQueueGenericSend+0x6a>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e000      	b.n	800eb1e <xQueueGenericSend+0x6c>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <xQueueGenericSend+0x74>
 800eb22:	b672      	cpsid	i
 800eb24:	e7fe      	b.n	800eb24 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb26:	f002 f913 	bl	8010d50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb2a:	6a3b      	ldr	r3, [r7, #32]
 800eb2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d302      	bcc.n	800eb3c <xQueueGenericSend+0x8a>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2b02      	cmp	r3, #2
 800eb3a:	d11e      	bne.n	800eb7a <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb3c:	683a      	ldr	r2, [r7, #0]
 800eb3e:	68b9      	ldr	r1, [r7, #8]
 800eb40:	6a3b      	ldr	r3, [r7, #32]
 800eb42:	0018      	movs	r0, r3
 800eb44:	f000 fb99 	bl	800f27a <prvCopyDataToQueue>
 800eb48:	0003      	movs	r3, r0
 800eb4a:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d009      	beq.n	800eb68 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	3324      	adds	r3, #36	; 0x24
 800eb58:	0018      	movs	r0, r3
 800eb5a:	f001 fa1f 	bl	800ff9c <xTaskRemoveFromEventList>
 800eb5e:	1e03      	subs	r3, r0, #0
 800eb60:	d007      	beq.n	800eb72 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb62:	f002 f8e5 	bl	8010d30 <vPortYield>
 800eb66:	e004      	b.n	800eb72 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb6e:	f002 f8df 	bl	8010d30 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb72:	f002 f8ff 	bl	8010d74 <vPortExitCritical>
				return pdPASS;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e05b      	b.n	800ec32 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d103      	bne.n	800eb88 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb80:	f002 f8f8 	bl	8010d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb84:	2300      	movs	r3, #0
 800eb86:	e054      	b.n	800ec32 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb8e:	2314      	movs	r3, #20
 800eb90:	18fb      	adds	r3, r7, r3
 800eb92:	0018      	movs	r0, r3
 800eb94:	f001 fa5e 	bl	8010054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb9c:	f002 f8ea 	bl	8010d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eba0:	f001 f804 	bl	800fbac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eba4:	f002 f8d4 	bl	8010d50 <vPortEnterCritical>
 800eba8:	6a3b      	ldr	r3, [r7, #32]
 800ebaa:	2244      	movs	r2, #68	; 0x44
 800ebac:	5c9b      	ldrb	r3, [r3, r2]
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	d103      	bne.n	800ebbc <xQueueGenericSend+0x10a>
 800ebb4:	6a3b      	ldr	r3, [r7, #32]
 800ebb6:	2244      	movs	r2, #68	; 0x44
 800ebb8:	2100      	movs	r1, #0
 800ebba:	5499      	strb	r1, [r3, r2]
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	2245      	movs	r2, #69	; 0x45
 800ebc0:	5c9b      	ldrb	r3, [r3, r2]
 800ebc2:	b25b      	sxtb	r3, r3
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	d103      	bne.n	800ebd0 <xQueueGenericSend+0x11e>
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	2245      	movs	r2, #69	; 0x45
 800ebcc:	2100      	movs	r1, #0
 800ebce:	5499      	strb	r1, [r3, r2]
 800ebd0:	f002 f8d0 	bl	8010d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebd4:	1d3a      	adds	r2, r7, #4
 800ebd6:	2314      	movs	r3, #20
 800ebd8:	18fb      	adds	r3, r7, r3
 800ebda:	0011      	movs	r1, r2
 800ebdc:	0018      	movs	r0, r3
 800ebde:	f001 fa4d 	bl	801007c <xTaskCheckForTimeOut>
 800ebe2:	1e03      	subs	r3, r0, #0
 800ebe4:	d11e      	bne.n	800ec24 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	0018      	movs	r0, r3
 800ebea:	f000 fc4b 	bl	800f484 <prvIsQueueFull>
 800ebee:	1e03      	subs	r3, r0, #0
 800ebf0:	d011      	beq.n	800ec16 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ebf2:	6a3b      	ldr	r3, [r7, #32]
 800ebf4:	3310      	adds	r3, #16
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	0011      	movs	r1, r2
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f001 f98a 	bl	800ff14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec00:	6a3b      	ldr	r3, [r7, #32]
 800ec02:	0018      	movs	r0, r3
 800ec04:	f000 fbca 	bl	800f39c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec08:	f000 ffdc 	bl	800fbc4 <xTaskResumeAll>
 800ec0c:	1e03      	subs	r3, r0, #0
 800ec0e:	d18a      	bne.n	800eb26 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800ec10:	f002 f88e 	bl	8010d30 <vPortYield>
 800ec14:	e787      	b.n	800eb26 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f000 fbbf 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec1e:	f000 ffd1 	bl	800fbc4 <xTaskResumeAll>
 800ec22:	e780      	b.n	800eb26 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	0018      	movs	r0, r3
 800ec28:	f000 fbb8 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec2c:	f000 ffca 	bl	800fbc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec30:	2300      	movs	r3, #0
		}
	}
}
 800ec32:	0018      	movs	r0, r3
 800ec34:	46bd      	mov	sp, r7
 800ec36:	b00a      	add	sp, #40	; 0x28
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec3a:	b590      	push	{r4, r7, lr}
 800ec3c:	b089      	sub	sp, #36	; 0x24
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	60f8      	str	r0, [r7, #12]
 800ec42:	60b9      	str	r1, [r7, #8]
 800ec44:	607a      	str	r2, [r7, #4]
 800ec46:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d101      	bne.n	800ec56 <xQueueGenericSendFromISR+0x1c>
 800ec52:	b672      	cpsid	i
 800ec54:	e7fe      	b.n	800ec54 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d103      	bne.n	800ec64 <xQueueGenericSendFromISR+0x2a>
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d101      	bne.n	800ec68 <xQueueGenericSendFromISR+0x2e>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e000      	b.n	800ec6a <xQueueGenericSendFromISR+0x30>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <xQueueGenericSendFromISR+0x38>
 800ec6e:	b672      	cpsid	i
 800ec70:	e7fe      	b.n	800ec70 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d103      	bne.n	800ec80 <xQueueGenericSendFromISR+0x46>
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d101      	bne.n	800ec84 <xQueueGenericSendFromISR+0x4a>
 800ec80:	2301      	movs	r3, #1
 800ec82:	e000      	b.n	800ec86 <xQueueGenericSendFromISR+0x4c>
 800ec84:	2300      	movs	r3, #0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <xQueueGenericSendFromISR+0x54>
 800ec8a:	b672      	cpsid	i
 800ec8c:	e7fe      	b.n	800ec8c <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec8e:	f002 f889 	bl	8010da4 <ulSetInterruptMaskFromISR>
 800ec92:	0003      	movs	r3, r0
 800ec94:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d302      	bcc.n	800eca8 <xQueueGenericSendFromISR+0x6e>
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b02      	cmp	r3, #2
 800eca6:	d12e      	bne.n	800ed06 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eca8:	2413      	movs	r4, #19
 800ecaa:	193b      	adds	r3, r7, r4
 800ecac:	69ba      	ldr	r2, [r7, #24]
 800ecae:	2145      	movs	r1, #69	; 0x45
 800ecb0:	5c52      	ldrb	r2, [r2, r1]
 800ecb2:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	68b9      	ldr	r1, [r7, #8]
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f000 fadd 	bl	800f27a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecc0:	193b      	adds	r3, r7, r4
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	b25b      	sxtb	r3, r3
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	d111      	bne.n	800ecee <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d016      	beq.n	800ed00 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	3324      	adds	r3, #36	; 0x24
 800ecd6:	0018      	movs	r0, r3
 800ecd8:	f001 f960 	bl	800ff9c <xTaskRemoveFromEventList>
 800ecdc:	1e03      	subs	r3, r0, #0
 800ecde:	d00f      	beq.n	800ed00 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d00c      	beq.n	800ed00 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	601a      	str	r2, [r3, #0]
 800ecec:	e008      	b.n	800ed00 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ecee:	2313      	movs	r3, #19
 800ecf0:	18fb      	adds	r3, r7, r3
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	b259      	sxtb	r1, r3
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2245      	movs	r2, #69	; 0x45
 800ecfe:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ed00:	2301      	movs	r3, #1
 800ed02:	61fb      	str	r3, [r7, #28]
		{
 800ed04:	e001      	b.n	800ed0a <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	0018      	movs	r0, r3
 800ed0e:	f002 f84f 	bl	8010db0 <vClearInterruptMaskFromISR>

	return xReturn;
 800ed12:	69fb      	ldr	r3, [r7, #28]
}
 800ed14:	0018      	movs	r0, r3
 800ed16:	46bd      	mov	sp, r7
 800ed18:	b009      	add	sp, #36	; 0x24
 800ed1a:	bd90      	pop	{r4, r7, pc}

0800ed1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b088      	sub	sp, #32
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <xQueueGiveFromISR+0x18>
 800ed30:	b672      	cpsid	i
 800ed32:	e7fe      	b.n	800ed32 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <xQueueGiveFromISR+0x24>
 800ed3c:	b672      	cpsid	i
 800ed3e:	e7fe      	b.n	800ed3e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d103      	bne.n	800ed50 <xQueueGiveFromISR+0x34>
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d101      	bne.n	800ed54 <xQueueGiveFromISR+0x38>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e000      	b.n	800ed56 <xQueueGiveFromISR+0x3a>
 800ed54:	2300      	movs	r3, #0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <xQueueGiveFromISR+0x42>
 800ed5a:	b672      	cpsid	i
 800ed5c:	e7fe      	b.n	800ed5c <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed5e:	f002 f821 	bl	8010da4 <ulSetInterruptMaskFromISR>
 800ed62:	0003      	movs	r3, r0
 800ed64:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6a:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d22c      	bcs.n	800edd0 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed76:	200f      	movs	r0, #15
 800ed78:	183b      	adds	r3, r7, r0
 800ed7a:	69ba      	ldr	r2, [r7, #24]
 800ed7c:	2145      	movs	r1, #69	; 0x45
 800ed7e:	5c52      	ldrb	r2, [r2, r1]
 800ed80:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed8a:	183b      	adds	r3, r7, r0
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	b25b      	sxtb	r3, r3
 800ed90:	3301      	adds	r3, #1
 800ed92:	d111      	bne.n	800edb8 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d016      	beq.n	800edca <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	3324      	adds	r3, #36	; 0x24
 800eda0:	0018      	movs	r0, r3
 800eda2:	f001 f8fb 	bl	800ff9c <xTaskRemoveFromEventList>
 800eda6:	1e03      	subs	r3, r0, #0
 800eda8:	d00f      	beq.n	800edca <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00c      	beq.n	800edca <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2201      	movs	r2, #1
 800edb4:	601a      	str	r2, [r3, #0]
 800edb6:	e008      	b.n	800edca <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800edb8:	230f      	movs	r3, #15
 800edba:	18fb      	adds	r3, r7, r3
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	3301      	adds	r3, #1
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	b259      	sxtb	r1, r3
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	2245      	movs	r2, #69	; 0x45
 800edc8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800edca:	2301      	movs	r3, #1
 800edcc:	61fb      	str	r3, [r7, #28]
 800edce:	e001      	b.n	800edd4 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800edd0:	2300      	movs	r3, #0
 800edd2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	0018      	movs	r0, r3
 800edd8:	f001 ffea 	bl	8010db0 <vClearInterruptMaskFromISR>

	return xReturn;
 800eddc:	69fb      	ldr	r3, [r7, #28]
}
 800edde:	0018      	movs	r0, r3
 800ede0:	46bd      	mov	sp, r7
 800ede2:	b008      	add	sp, #32
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b08a      	sub	sp, #40	; 0x28
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800edf2:	2300      	movs	r3, #0
 800edf4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800edfa:	6a3b      	ldr	r3, [r7, #32]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d101      	bne.n	800ee04 <xQueueReceive+0x1e>
 800ee00:	b672      	cpsid	i
 800ee02:	e7fe      	b.n	800ee02 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <xQueueReceive+0x2c>
 800ee0a:	6a3b      	ldr	r3, [r7, #32]
 800ee0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <xQueueReceive+0x30>
 800ee12:	2301      	movs	r3, #1
 800ee14:	e000      	b.n	800ee18 <xQueueReceive+0x32>
 800ee16:	2300      	movs	r3, #0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <xQueueReceive+0x3a>
 800ee1c:	b672      	cpsid	i
 800ee1e:	e7fe      	b.n	800ee1e <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee20:	f001 fa68 	bl	80102f4 <xTaskGetSchedulerState>
 800ee24:	1e03      	subs	r3, r0, #0
 800ee26:	d102      	bne.n	800ee2e <xQueueReceive+0x48>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <xQueueReceive+0x4c>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e000      	b.n	800ee34 <xQueueReceive+0x4e>
 800ee32:	2300      	movs	r3, #0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <xQueueReceive+0x56>
 800ee38:	b672      	cpsid	i
 800ee3a:	e7fe      	b.n	800ee3a <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee3c:	f001 ff88 	bl	8010d50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee40:	6a3b      	ldr	r3, [r7, #32]
 800ee42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee44:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d01a      	beq.n	800ee82 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee4c:	68ba      	ldr	r2, [r7, #8]
 800ee4e:	6a3b      	ldr	r3, [r7, #32]
 800ee50:	0011      	movs	r1, r2
 800ee52:	0018      	movs	r0, r3
 800ee54:	f000 fa7c 	bl	800f350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	1e5a      	subs	r2, r3, #1
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee60:	6a3b      	ldr	r3, [r7, #32]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d008      	beq.n	800ee7a <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	3310      	adds	r3, #16
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	f001 f895 	bl	800ff9c <xTaskRemoveFromEventList>
 800ee72:	1e03      	subs	r3, r0, #0
 800ee74:	d001      	beq.n	800ee7a <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee76:	f001 ff5b 	bl	8010d30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee7a:	f001 ff7b 	bl	8010d74 <vPortExitCritical>
				return pdPASS;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e062      	b.n	800ef48 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d103      	bne.n	800ee90 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee88:	f001 ff74 	bl	8010d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	e05b      	b.n	800ef48 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee96:	2314      	movs	r3, #20
 800ee98:	18fb      	adds	r3, r7, r3
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	f001 f8da 	bl	8010054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eea0:	2301      	movs	r3, #1
 800eea2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eea4:	f001 ff66 	bl	8010d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eea8:	f000 fe80 	bl	800fbac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eeac:	f001 ff50 	bl	8010d50 <vPortEnterCritical>
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	2244      	movs	r2, #68	; 0x44
 800eeb4:	5c9b      	ldrb	r3, [r3, r2]
 800eeb6:	b25b      	sxtb	r3, r3
 800eeb8:	3301      	adds	r3, #1
 800eeba:	d103      	bne.n	800eec4 <xQueueReceive+0xde>
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	2244      	movs	r2, #68	; 0x44
 800eec0:	2100      	movs	r1, #0
 800eec2:	5499      	strb	r1, [r3, r2]
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	2245      	movs	r2, #69	; 0x45
 800eec8:	5c9b      	ldrb	r3, [r3, r2]
 800eeca:	b25b      	sxtb	r3, r3
 800eecc:	3301      	adds	r3, #1
 800eece:	d103      	bne.n	800eed8 <xQueueReceive+0xf2>
 800eed0:	6a3b      	ldr	r3, [r7, #32]
 800eed2:	2245      	movs	r2, #69	; 0x45
 800eed4:	2100      	movs	r1, #0
 800eed6:	5499      	strb	r1, [r3, r2]
 800eed8:	f001 ff4c 	bl	8010d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eedc:	1d3a      	adds	r2, r7, #4
 800eede:	2314      	movs	r3, #20
 800eee0:	18fb      	adds	r3, r7, r3
 800eee2:	0011      	movs	r1, r2
 800eee4:	0018      	movs	r0, r3
 800eee6:	f001 f8c9 	bl	801007c <xTaskCheckForTimeOut>
 800eeea:	1e03      	subs	r3, r0, #0
 800eeec:	d11e      	bne.n	800ef2c <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	0018      	movs	r0, r3
 800eef2:	f000 fab1 	bl	800f458 <prvIsQueueEmpty>
 800eef6:	1e03      	subs	r3, r0, #0
 800eef8:	d011      	beq.n	800ef1e <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	3324      	adds	r3, #36	; 0x24
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	0011      	movs	r1, r2
 800ef02:	0018      	movs	r0, r3
 800ef04:	f001 f806 	bl	800ff14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	f000 fa46 	bl	800f39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef10:	f000 fe58 	bl	800fbc4 <xTaskResumeAll>
 800ef14:	1e03      	subs	r3, r0, #0
 800ef16:	d191      	bne.n	800ee3c <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800ef18:	f001 ff0a 	bl	8010d30 <vPortYield>
 800ef1c:	e78e      	b.n	800ee3c <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	0018      	movs	r0, r3
 800ef22:	f000 fa3b 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef26:	f000 fe4d 	bl	800fbc4 <xTaskResumeAll>
 800ef2a:	e787      	b.n	800ee3c <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	0018      	movs	r0, r3
 800ef30:	f000 fa34 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef34:	f000 fe46 	bl	800fbc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	0018      	movs	r0, r3
 800ef3c:	f000 fa8c 	bl	800f458 <prvIsQueueEmpty>
 800ef40:	1e03      	subs	r3, r0, #0
 800ef42:	d100      	bne.n	800ef46 <xQueueReceive+0x160>
 800ef44:	e77a      	b.n	800ee3c <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ef48:	0018      	movs	r0, r3
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	b00a      	add	sp, #40	; 0x28
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b08a      	sub	sp, #40	; 0x28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <xQueueSemaphoreTake+0x20>
 800ef6c:	b672      	cpsid	i
 800ef6e:	e7fe      	b.n	800ef6e <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d001      	beq.n	800ef7c <xQueueSemaphoreTake+0x2c>
 800ef78:	b672      	cpsid	i
 800ef7a:	e7fe      	b.n	800ef7a <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef7c:	f001 f9ba 	bl	80102f4 <xTaskGetSchedulerState>
 800ef80:	1e03      	subs	r3, r0, #0
 800ef82:	d102      	bne.n	800ef8a <xQueueSemaphoreTake+0x3a>
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <xQueueSemaphoreTake+0x3e>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <xQueueSemaphoreTake+0x40>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d101      	bne.n	800ef98 <xQueueSemaphoreTake+0x48>
 800ef94:	b672      	cpsid	i
 800ef96:	e7fe      	b.n	800ef96 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef98:	f001 feda 	bl	8010d50 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d01d      	beq.n	800efe4 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	1e5a      	subs	r2, r3, #1
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efb0:	69fb      	ldr	r3, [r7, #28]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d104      	bne.n	800efc2 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800efb8:	f001 faf6 	bl	80105a8 <pvTaskIncrementMutexHeldCount>
 800efbc:	0002      	movs	r2, r0
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d008      	beq.n	800efdc <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	3310      	adds	r3, #16
 800efce:	0018      	movs	r0, r3
 800efd0:	f000 ffe4 	bl	800ff9c <xTaskRemoveFromEventList>
 800efd4:	1e03      	subs	r3, r0, #0
 800efd6:	d001      	beq.n	800efdc <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efd8:	f001 feaa 	bl	8010d30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efdc:	f001 feca 	bl	8010d74 <vPortExitCritical>
				return pdPASS;
 800efe0:	2301      	movs	r3, #1
 800efe2:	e08b      	b.n	800f0fc <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d108      	bne.n	800effc <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800efea:	6a3b      	ldr	r3, [r7, #32]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <xQueueSemaphoreTake+0xa4>
 800eff0:	b672      	cpsid	i
 800eff2:	e7fe      	b.n	800eff2 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eff4:	f001 febe 	bl	8010d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eff8:	2300      	movs	r3, #0
 800effa:	e07f      	b.n	800f0fc <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f002:	230c      	movs	r3, #12
 800f004:	18fb      	adds	r3, r7, r3
 800f006:	0018      	movs	r0, r3
 800f008:	f001 f824 	bl	8010054 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f00c:	2301      	movs	r3, #1
 800f00e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f010:	f001 feb0 	bl	8010d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f014:	f000 fdca 	bl	800fbac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f018:	f001 fe9a 	bl	8010d50 <vPortEnterCritical>
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	2244      	movs	r2, #68	; 0x44
 800f020:	5c9b      	ldrb	r3, [r3, r2]
 800f022:	b25b      	sxtb	r3, r3
 800f024:	3301      	adds	r3, #1
 800f026:	d103      	bne.n	800f030 <xQueueSemaphoreTake+0xe0>
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	2244      	movs	r2, #68	; 0x44
 800f02c:	2100      	movs	r1, #0
 800f02e:	5499      	strb	r1, [r3, r2]
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	2245      	movs	r2, #69	; 0x45
 800f034:	5c9b      	ldrb	r3, [r3, r2]
 800f036:	b25b      	sxtb	r3, r3
 800f038:	3301      	adds	r3, #1
 800f03a:	d103      	bne.n	800f044 <xQueueSemaphoreTake+0xf4>
 800f03c:	69fb      	ldr	r3, [r7, #28]
 800f03e:	2245      	movs	r2, #69	; 0x45
 800f040:	2100      	movs	r1, #0
 800f042:	5499      	strb	r1, [r3, r2]
 800f044:	f001 fe96 	bl	8010d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f048:	003a      	movs	r2, r7
 800f04a:	230c      	movs	r3, #12
 800f04c:	18fb      	adds	r3, r7, r3
 800f04e:	0011      	movs	r1, r2
 800f050:	0018      	movs	r0, r3
 800f052:	f001 f813 	bl	801007c <xTaskCheckForTimeOut>
 800f056:	1e03      	subs	r3, r0, #0
 800f058:	d12e      	bne.n	800f0b8 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	0018      	movs	r0, r3
 800f05e:	f000 f9fb 	bl	800f458 <prvIsQueueEmpty>
 800f062:	1e03      	subs	r3, r0, #0
 800f064:	d021      	beq.n	800f0aa <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800f06e:	f001 fe6f 	bl	8010d50 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f072:	69fb      	ldr	r3, [r7, #28]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	0018      	movs	r0, r3
 800f078:	f001 f958 	bl	801032c <xTaskPriorityInherit>
 800f07c:	0003      	movs	r3, r0
 800f07e:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800f080:	f001 fe78 	bl	8010d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	3324      	adds	r3, #36	; 0x24
 800f088:	683a      	ldr	r2, [r7, #0]
 800f08a:	0011      	movs	r1, r2
 800f08c:	0018      	movs	r0, r3
 800f08e:	f000 ff41 	bl	800ff14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f092:	69fb      	ldr	r3, [r7, #28]
 800f094:	0018      	movs	r0, r3
 800f096:	f000 f981 	bl	800f39c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f09a:	f000 fd93 	bl	800fbc4 <xTaskResumeAll>
 800f09e:	1e03      	subs	r3, r0, #0
 800f0a0:	d000      	beq.n	800f0a4 <xQueueSemaphoreTake+0x154>
 800f0a2:	e779      	b.n	800ef98 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800f0a4:	f001 fe44 	bl	8010d30 <vPortYield>
 800f0a8:	e776      	b.n	800ef98 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	0018      	movs	r0, r3
 800f0ae:	f000 f975 	bl	800f39c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0b2:	f000 fd87 	bl	800fbc4 <xTaskResumeAll>
 800f0b6:	e76f      	b.n	800ef98 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	f000 f96e 	bl	800f39c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0c0:	f000 fd80 	bl	800fbc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	0018      	movs	r0, r3
 800f0c8:	f000 f9c6 	bl	800f458 <prvIsQueueEmpty>
 800f0cc:	1e03      	subs	r3, r0, #0
 800f0ce:	d100      	bne.n	800f0d2 <xQueueSemaphoreTake+0x182>
 800f0d0:	e762      	b.n	800ef98 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f0d2:	6a3b      	ldr	r3, [r7, #32]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d010      	beq.n	800f0fa <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800f0d8:	f001 fe3a 	bl	8010d50 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	0018      	movs	r0, r3
 800f0e0:	f000 f8b5 	bl	800f24e <prvGetDisinheritPriorityAfterTimeout>
 800f0e4:	0003      	movs	r3, r0
 800f0e6:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	0011      	movs	r1, r2
 800f0f0:	0018      	movs	r0, r3
 800f0f2:	f001 f9e5 	bl	80104c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f0f6:	f001 fe3d 	bl	8010d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f0fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800f0fc:	0018      	movs	r0, r3
 800f0fe:	46bd      	mov	sp, r7
 800f100:	b00a      	add	sp, #40	; 0x28
 800f102:	bd80      	pop	{r7, pc}

0800f104 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f104:	b590      	push	{r4, r7, lr}
 800f106:	b08b      	sub	sp, #44	; 0x2c
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800f114:	6a3b      	ldr	r3, [r7, #32]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <xQueueReceiveFromISR+0x1a>
 800f11a:	b672      	cpsid	i
 800f11c:	e7fe      	b.n	800f11c <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d103      	bne.n	800f12c <xQueueReceiveFromISR+0x28>
 800f124:	6a3b      	ldr	r3, [r7, #32]
 800f126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d101      	bne.n	800f130 <xQueueReceiveFromISR+0x2c>
 800f12c:	2301      	movs	r3, #1
 800f12e:	e000      	b.n	800f132 <xQueueReceiveFromISR+0x2e>
 800f130:	2300      	movs	r3, #0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <xQueueReceiveFromISR+0x36>
 800f136:	b672      	cpsid	i
 800f138:	e7fe      	b.n	800f138 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f13a:	f001 fe33 	bl	8010da4 <ulSetInterruptMaskFromISR>
 800f13e:	0003      	movs	r3, r0
 800f140:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f142:	6a3b      	ldr	r3, [r7, #32]
 800f144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f146:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d032      	beq.n	800f1b4 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f14e:	2417      	movs	r4, #23
 800f150:	193b      	adds	r3, r7, r4
 800f152:	6a3a      	ldr	r2, [r7, #32]
 800f154:	2144      	movs	r1, #68	; 0x44
 800f156:	5c52      	ldrb	r2, [r2, r1]
 800f158:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f15a:	68ba      	ldr	r2, [r7, #8]
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	0011      	movs	r1, r2
 800f160:	0018      	movs	r0, r3
 800f162:	f000 f8f5 	bl	800f350 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	1e5a      	subs	r2, r3, #1
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f16e:	193b      	adds	r3, r7, r4
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	b25b      	sxtb	r3, r3
 800f174:	3301      	adds	r3, #1
 800f176:	d111      	bne.n	800f19c <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f178:	6a3b      	ldr	r3, [r7, #32]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d016      	beq.n	800f1ae <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	3310      	adds	r3, #16
 800f184:	0018      	movs	r0, r3
 800f186:	f000 ff09 	bl	800ff9c <xTaskRemoveFromEventList>
 800f18a:	1e03      	subs	r3, r0, #0
 800f18c:	d00f      	beq.n	800f1ae <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00c      	beq.n	800f1ae <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	601a      	str	r2, [r3, #0]
 800f19a:	e008      	b.n	800f1ae <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f19c:	2317      	movs	r3, #23
 800f19e:	18fb      	adds	r3, r7, r3
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	b2db      	uxtb	r3, r3
 800f1a6:	b259      	sxtb	r1, r3
 800f1a8:	6a3b      	ldr	r3, [r7, #32]
 800f1aa:	2244      	movs	r2, #68	; 0x44
 800f1ac:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800f1b2:	e001      	b.n	800f1b8 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	0018      	movs	r0, r3
 800f1bc:	f001 fdf8 	bl	8010db0 <vClearInterruptMaskFromISR>

	return xReturn;
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1c2:	0018      	movs	r0, r3
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	b00b      	add	sp, #44	; 0x2c
 800f1c8:	bd90      	pop	{r4, r7, pc}

0800f1ca <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b084      	sub	sp, #16
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d101      	bne.n	800f1dc <uxQueueMessagesWaiting+0x12>
 800f1d8:	b672      	cpsid	i
 800f1da:	e7fe      	b.n	800f1da <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 800f1dc:	f001 fdb8 	bl	8010d50 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800f1e6:	f001 fdc5 	bl	8010d74 <vPortExitCritical>

	return uxReturn;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	b004      	add	sp, #16
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <uxQueueMessagesWaitingFromISR+0x12>
 800f202:	b672      	cpsid	i
 800f204:	e7fe      	b.n	800f204 <uxQueueMessagesWaitingFromISR+0x10>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f20a:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800f20c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f20e:	0018      	movs	r0, r3
 800f210:	46bd      	mov	sp, r7
 800f212:	b004      	add	sp, #16
 800f214:	bd80      	pop	{r7, pc}

0800f216 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <vQueueDelete+0x16>
 800f228:	b672      	cpsid	i
 800f22a:	e7fe      	b.n	800f22a <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	0018      	movs	r0, r3
 800f230:	f000 f968 	bl	800f504 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2246      	movs	r2, #70	; 0x46
 800f238:	5c9b      	ldrb	r3, [r3, r2]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d103      	bne.n	800f246 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	0018      	movs	r0, r3
 800f242:	f001 fec3 	bl	8010fcc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f246:	46c0      	nop			; (mov r8, r8)
 800f248:	46bd      	mov	sp, r7
 800f24a:	b004      	add	sp, #16
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d006      	beq.n	800f26c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2238      	movs	r2, #56	; 0x38
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	60fb      	str	r3, [r7, #12]
 800f26a:	e001      	b.n	800f270 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f270:	68fb      	ldr	r3, [r7, #12]
	}
 800f272:	0018      	movs	r0, r3
 800f274:	46bd      	mov	sp, r7
 800f276:	b004      	add	sp, #16
 800f278:	bd80      	pop	{r7, pc}

0800f27a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f27a:	b580      	push	{r7, lr}
 800f27c:	b086      	sub	sp, #24
 800f27e:	af00      	add	r7, sp, #0
 800f280:	60f8      	str	r0, [r7, #12]
 800f282:	60b9      	str	r1, [r7, #8]
 800f284:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f286:	2300      	movs	r3, #0
 800f288:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f294:	2b00      	cmp	r3, #0
 800f296:	d10e      	bne.n	800f2b6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d14e      	bne.n	800f33e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	0018      	movs	r0, r3
 800f2a6:	f001 f8af 	bl	8010408 <xTaskPriorityDisinherit>
 800f2aa:	0003      	movs	r3, r0
 800f2ac:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	605a      	str	r2, [r3, #4]
 800f2b4:	e043      	b.n	800f33e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d119      	bne.n	800f2f0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6898      	ldr	r0, [r3, #8]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	0019      	movs	r1, r3
 800f2c8:	f002 f8af 	bl	801142a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2d4:	18d2      	adds	r2, r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	689a      	ldr	r2, [r3, #8]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d32b      	bcc.n	800f33e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	609a      	str	r2, [r3, #8]
 800f2ee:	e026      	b.n	800f33e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	68d8      	ldr	r0, [r3, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	0019      	movs	r1, r3
 800f2fc:	f002 f895 	bl	801142a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	68da      	ldr	r2, [r3, #12]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f308:	425b      	negs	r3, r3
 800f30a:	18d2      	adds	r2, r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	68da      	ldr	r2, [r3, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d207      	bcs.n	800f32c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f324:	425b      	negs	r3, r3
 800f326:	18d2      	adds	r2, r2, r3
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d105      	bne.n	800f33e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	3b01      	subs	r3, #1
 800f33c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f346:	697b      	ldr	r3, [r7, #20]
}
 800f348:	0018      	movs	r0, r3
 800f34a:	46bd      	mov	sp, r7
 800f34c:	b006      	add	sp, #24
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d018      	beq.n	800f394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	68da      	ldr	r2, [r3, #12]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36a:	18d2      	adds	r2, r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d303      	bcc.n	800f384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	68d9      	ldr	r1, [r3, #12]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	0018      	movs	r0, r3
 800f390:	f002 f84b 	bl	801142a <memcpy>
	}
}
 800f394:	46c0      	nop			; (mov r8, r8)
 800f396:	46bd      	mov	sp, r7
 800f398:	b002      	add	sp, #8
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f3a4:	f001 fcd4 	bl	8010d50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f3a8:	230f      	movs	r3, #15
 800f3aa:	18fb      	adds	r3, r7, r3
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	2145      	movs	r1, #69	; 0x45
 800f3b0:	5c52      	ldrb	r2, [r2, r1]
 800f3b2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3b4:	e013      	b.n	800f3de <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d016      	beq.n	800f3ec <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	3324      	adds	r3, #36	; 0x24
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	f000 fdea 	bl	800ff9c <xTaskRemoveFromEventList>
 800f3c8:	1e03      	subs	r3, r0, #0
 800f3ca:	d001      	beq.n	800f3d0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f3cc:	f000 fea6 	bl	801011c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3d0:	210f      	movs	r1, #15
 800f3d2:	187b      	adds	r3, r7, r1
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	b2da      	uxtb	r2, r3
 800f3da:	187b      	adds	r3, r7, r1
 800f3dc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3de:	230f      	movs	r3, #15
 800f3e0:	18fb      	adds	r3, r7, r3
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	b25b      	sxtb	r3, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	dce5      	bgt.n	800f3b6 <prvUnlockQueue+0x1a>
 800f3ea:	e000      	b.n	800f3ee <prvUnlockQueue+0x52>
					break;
 800f3ec:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2245      	movs	r2, #69	; 0x45
 800f3f2:	21ff      	movs	r1, #255	; 0xff
 800f3f4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f3f6:	f001 fcbd 	bl	8010d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3fa:	f001 fca9 	bl	8010d50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3fe:	230e      	movs	r3, #14
 800f400:	18fb      	adds	r3, r7, r3
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	2144      	movs	r1, #68	; 0x44
 800f406:	5c52      	ldrb	r2, [r2, r1]
 800f408:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f40a:	e013      	b.n	800f434 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d016      	beq.n	800f442 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3310      	adds	r3, #16
 800f418:	0018      	movs	r0, r3
 800f41a:	f000 fdbf 	bl	800ff9c <xTaskRemoveFromEventList>
 800f41e:	1e03      	subs	r3, r0, #0
 800f420:	d001      	beq.n	800f426 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800f422:	f000 fe7b 	bl	801011c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f426:	210e      	movs	r1, #14
 800f428:	187b      	adds	r3, r7, r1
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	187b      	adds	r3, r7, r1
 800f432:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f434:	230e      	movs	r3, #14
 800f436:	18fb      	adds	r3, r7, r3
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	b25b      	sxtb	r3, r3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	dce5      	bgt.n	800f40c <prvUnlockQueue+0x70>
 800f440:	e000      	b.n	800f444 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800f442:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2244      	movs	r2, #68	; 0x44
 800f448:	21ff      	movs	r1, #255	; 0xff
 800f44a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800f44c:	f001 fc92 	bl	8010d74 <vPortExitCritical>
}
 800f450:	46c0      	nop			; (mov r8, r8)
 800f452:	46bd      	mov	sp, r7
 800f454:	b004      	add	sp, #16
 800f456:	bd80      	pop	{r7, pc}

0800f458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b084      	sub	sp, #16
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f460:	f001 fc76 	bl	8010d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f46c:	2301      	movs	r3, #1
 800f46e:	60fb      	str	r3, [r7, #12]
 800f470:	e001      	b.n	800f476 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f472:	2300      	movs	r3, #0
 800f474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f476:	f001 fc7d 	bl	8010d74 <vPortExitCritical>

	return xReturn;
 800f47a:	68fb      	ldr	r3, [r7, #12]
}
 800f47c:	0018      	movs	r0, r3
 800f47e:	46bd      	mov	sp, r7
 800f480:	b004      	add	sp, #16
 800f482:	bd80      	pop	{r7, pc}

0800f484 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f48c:	f001 fc60 	bl	8010d50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f498:	429a      	cmp	r2, r3
 800f49a:	d102      	bne.n	800f4a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f49c:	2301      	movs	r3, #1
 800f49e:	60fb      	str	r3, [r7, #12]
 800f4a0:	e001      	b.n	800f4a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4a6:	f001 fc65 	bl	8010d74 <vPortExitCritical>

	return xReturn;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
}
 800f4ac:	0018      	movs	r0, r3
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	b004      	add	sp, #16
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4be:	2300      	movs	r3, #0
 800f4c0:	60fb      	str	r3, [r7, #12]
 800f4c2:	e015      	b.n	800f4f0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <vQueueAddToRegistry+0x4c>)
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	00d2      	lsls	r2, r2, #3
 800f4ca:	58d3      	ldr	r3, [r2, r3]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10c      	bne.n	800f4ea <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f4d0:	4b0b      	ldr	r3, [pc, #44]	; (800f500 <vQueueAddToRegistry+0x4c>)
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	00d2      	lsls	r2, r2, #3
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f4da:	4a09      	ldr	r2, [pc, #36]	; (800f500 <vQueueAddToRegistry+0x4c>)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	18d3      	adds	r3, r2, r3
 800f4e2:	3304      	adds	r3, #4
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f4e8:	e006      	b.n	800f4f8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	60fb      	str	r3, [r7, #12]
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b07      	cmp	r3, #7
 800f4f4:	d9e6      	bls.n	800f4c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f4f6:	46c0      	nop			; (mov r8, r8)
 800f4f8:	46c0      	nop			; (mov r8, r8)
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	b004      	add	sp, #16
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	20000c5c 	.word	0x20000c5c

0800f504 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f50c:	2300      	movs	r3, #0
 800f50e:	60fb      	str	r3, [r7, #12]
 800f510:	e018      	b.n	800f544 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f512:	4a10      	ldr	r2, [pc, #64]	; (800f554 <vQueueUnregisterQueue+0x50>)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	18d3      	adds	r3, r2, r3
 800f51a:	3304      	adds	r3, #4
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	429a      	cmp	r2, r3
 800f522:	d10c      	bne.n	800f53e <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f524:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <vQueueUnregisterQueue+0x50>)
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	00d2      	lsls	r2, r2, #3
 800f52a:	2100      	movs	r1, #0
 800f52c:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f52e:	4a09      	ldr	r2, [pc, #36]	; (800f554 <vQueueUnregisterQueue+0x50>)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	00db      	lsls	r3, r3, #3
 800f534:	18d3      	adds	r3, r2, r3
 800f536:	3304      	adds	r3, #4
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]
				break;
 800f53c:	e006      	b.n	800f54c <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3301      	adds	r3, #1
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b07      	cmp	r3, #7
 800f548:	d9e3      	bls.n	800f512 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f54a:	46c0      	nop			; (mov r8, r8)
 800f54c:	46c0      	nop			; (mov r8, r8)
 800f54e:	46bd      	mov	sp, r7
 800f550:	b004      	add	sp, #16
 800f552:	bd80      	pop	{r7, pc}
 800f554:	20000c5c 	.word	0x20000c5c

0800f558 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f568:	f001 fbf2 	bl	8010d50 <vPortEnterCritical>
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	2244      	movs	r2, #68	; 0x44
 800f570:	5c9b      	ldrb	r3, [r3, r2]
 800f572:	b25b      	sxtb	r3, r3
 800f574:	3301      	adds	r3, #1
 800f576:	d103      	bne.n	800f580 <vQueueWaitForMessageRestricted+0x28>
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	2244      	movs	r2, #68	; 0x44
 800f57c:	2100      	movs	r1, #0
 800f57e:	5499      	strb	r1, [r3, r2]
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	2245      	movs	r2, #69	; 0x45
 800f584:	5c9b      	ldrb	r3, [r3, r2]
 800f586:	b25b      	sxtb	r3, r3
 800f588:	3301      	adds	r3, #1
 800f58a:	d103      	bne.n	800f594 <vQueueWaitForMessageRestricted+0x3c>
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	2245      	movs	r2, #69	; 0x45
 800f590:	2100      	movs	r1, #0
 800f592:	5499      	strb	r1, [r3, r2]
 800f594:	f001 fbee 	bl	8010d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d106      	bne.n	800f5ae <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	3324      	adds	r3, #36	; 0x24
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	68b9      	ldr	r1, [r7, #8]
 800f5a8:	0018      	movs	r0, r3
 800f5aa:	f000 fcd1 	bl	800ff50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	0018      	movs	r0, r3
 800f5b2:	f7ff fef3 	bl	800f39c <prvUnlockQueue>
	}
 800f5b6:	46c0      	nop			; (mov r8, r8)
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	b006      	add	sp, #24
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5be:	b590      	push	{r4, r7, lr}
 800f5c0:	b08d      	sub	sp, #52	; 0x34
 800f5c2:	af04      	add	r7, sp, #16
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
 800f5ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d101      	bne.n	800f5d6 <xTaskCreateStatic+0x18>
 800f5d2:	b672      	cpsid	i
 800f5d4:	e7fe      	b.n	800f5d4 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <xTaskCreateStatic+0x22>
 800f5dc:	b672      	cpsid	i
 800f5de:	e7fe      	b.n	800f5de <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f5e0:	23bc      	movs	r3, #188	; 0xbc
 800f5e2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2bbc      	cmp	r3, #188	; 0xbc
 800f5e8:	d001      	beq.n	800f5ee <xTaskCreateStatic+0x30>
 800f5ea:	b672      	cpsid	i
 800f5ec:	e7fe      	b.n	800f5ec <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d020      	beq.n	800f636 <xTaskCreateStatic+0x78>
 800f5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d01d      	beq.n	800f636 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f602:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	22b9      	movs	r2, #185	; 0xb9
 800f608:	2102      	movs	r1, #2
 800f60a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f60c:	683c      	ldr	r4, [r7, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	2300      	movs	r3, #0
 800f616:	9303      	str	r3, [sp, #12]
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	9302      	str	r3, [sp, #8]
 800f61c:	2318      	movs	r3, #24
 800f61e:	18fb      	adds	r3, r7, r3
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	0023      	movs	r3, r4
 800f628:	f000 f858 	bl	800f6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	0018      	movs	r0, r3
 800f630:	f000 f8ec 	bl	800f80c <prvAddNewTaskToReadyList>
 800f634:	e001      	b.n	800f63a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f63a:	69bb      	ldr	r3, [r7, #24]
	}
 800f63c:	0018      	movs	r0, r3
 800f63e:	46bd      	mov	sp, r7
 800f640:	b009      	add	sp, #36	; 0x24
 800f642:	bd90      	pop	{r4, r7, pc}

0800f644 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f644:	b590      	push	{r4, r7, lr}
 800f646:	b08d      	sub	sp, #52	; 0x34
 800f648:	af04      	add	r7, sp, #16
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	603b      	str	r3, [r7, #0]
 800f650:	1dbb      	adds	r3, r7, #6
 800f652:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f654:	1dbb      	adds	r3, r7, #6
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	0018      	movs	r0, r3
 800f65c:	f001 fc10 	bl	8010e80 <pvPortMalloc>
 800f660:	0003      	movs	r3, r0
 800f662:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d010      	beq.n	800f68c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800f66a:	20bc      	movs	r0, #188	; 0xbc
 800f66c:	f001 fc08 	bl	8010e80 <pvPortMalloc>
 800f670:	0003      	movs	r3, r0
 800f672:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d003      	beq.n	800f682 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	631a      	str	r2, [r3, #48]	; 0x30
 800f680:	e006      	b.n	800f690 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	0018      	movs	r0, r3
 800f686:	f001 fca1 	bl	8010fcc <vPortFree>
 800f68a:	e001      	b.n	800f690 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f68c:	2300      	movs	r3, #0
 800f68e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01a      	beq.n	800f6cc <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	22b9      	movs	r2, #185	; 0xb9
 800f69a:	2100      	movs	r1, #0
 800f69c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f69e:	1dbb      	adds	r3, r7, #6
 800f6a0:	881a      	ldrh	r2, [r3, #0]
 800f6a2:	683c      	ldr	r4, [r7, #0]
 800f6a4:	68b9      	ldr	r1, [r7, #8]
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	9303      	str	r3, [sp, #12]
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	9302      	str	r3, [sp, #8]
 800f6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b2:	9301      	str	r3, [sp, #4]
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	0023      	movs	r3, r4
 800f6ba:	f000 f80f 	bl	800f6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	0018      	movs	r0, r3
 800f6c2:	f000 f8a3 	bl	800f80c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	61bb      	str	r3, [r7, #24]
 800f6ca:	e002      	b.n	800f6d2 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	425b      	negs	r3, r3
 800f6d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f6d2:	69bb      	ldr	r3, [r7, #24]
	}
 800f6d4:	0018      	movs	r0, r3
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	b009      	add	sp, #36	; 0x24
 800f6da:	bd90      	pop	{r4, r7, pc}

0800f6dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b086      	sub	sp, #24
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	001a      	movs	r2, r3
 800f6f4:	21a5      	movs	r1, #165	; 0xa5
 800f6f6:	f001 fea1 	bl	801143c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	493e      	ldr	r1, [pc, #248]	; (800f7fc <prvInitialiseNewTask+0x120>)
 800f702:	468c      	mov	ip, r1
 800f704:	4463      	add	r3, ip
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	18d3      	adds	r3, r2, r3
 800f70a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	2207      	movs	r2, #7
 800f710:	4393      	bics	r3, r2
 800f712:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	2207      	movs	r2, #7
 800f718:	4013      	ands	r3, r2
 800f71a:	d001      	beq.n	800f720 <prvInitialiseNewTask+0x44>
 800f71c:	b672      	cpsid	i
 800f71e:	e7fe      	b.n	800f71e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f720:	2300      	movs	r3, #0
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	e013      	b.n	800f74e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f726:	68ba      	ldr	r2, [r7, #8]
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	18d3      	adds	r3, r2, r3
 800f72c:	7818      	ldrb	r0, [r3, #0]
 800f72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f730:	2134      	movs	r1, #52	; 0x34
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	18d3      	adds	r3, r2, r3
 800f736:	185b      	adds	r3, r3, r1
 800f738:	1c02      	adds	r2, r0, #0
 800f73a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	18d3      	adds	r3, r2, r3
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d006      	beq.n	800f756 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	3301      	adds	r3, #1
 800f74c:	617b      	str	r3, [r7, #20]
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	2b0f      	cmp	r3, #15
 800f752:	d9e8      	bls.n	800f726 <prvInitialiseNewTask+0x4a>
 800f754:	e000      	b.n	800f758 <prvInitialiseNewTask+0x7c>
		{
			break;
 800f756:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75a:	2243      	movs	r2, #67	; 0x43
 800f75c:	2100      	movs	r1, #0
 800f75e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f760:	6a3b      	ldr	r3, [r7, #32]
 800f762:	2b37      	cmp	r3, #55	; 0x37
 800f764:	d901      	bls.n	800f76a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f766:	2337      	movs	r3, #55	; 0x37
 800f768:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	6a3a      	ldr	r2, [r7, #32]
 800f76e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	6a3a      	ldr	r2, [r7, #32]
 800f774:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	2200      	movs	r2, #0
 800f77a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	3304      	adds	r3, #4
 800f780:	0018      	movs	r0, r3
 800f782:	f7fe ff15 	bl	800e5b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f788:	3318      	adds	r3, #24
 800f78a:	0018      	movs	r0, r3
 800f78c:	f7fe ff10 	bl	800e5b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f794:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f796:	6a3b      	ldr	r3, [r7, #32]
 800f798:	2238      	movs	r2, #56	; 0x38
 800f79a:	1ad2      	subs	r2, r2, r3
 800f79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7a4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	22b4      	movs	r2, #180	; 0xb4
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b0:	22b8      	movs	r2, #184	; 0xb8
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b8:	3354      	adds	r3, #84	; 0x54
 800f7ba:	2260      	movs	r2, #96	; 0x60
 800f7bc:	2100      	movs	r1, #0
 800f7be:	0018      	movs	r0, r3
 800f7c0:	f001 fe3c 	bl	801143c <memset>
 800f7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c6:	4a0e      	ldr	r2, [pc, #56]	; (800f800 <prvInitialiseNewTask+0x124>)
 800f7c8:	659a      	str	r2, [r3, #88]	; 0x58
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	4a0d      	ldr	r2, [pc, #52]	; (800f804 <prvInitialiseNewTask+0x128>)
 800f7ce:	65da      	str	r2, [r3, #92]	; 0x5c
 800f7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d2:	4a0d      	ldr	r2, [pc, #52]	; (800f808 <prvInitialiseNewTask+0x12c>)
 800f7d4:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7d6:	683a      	ldr	r2, [r7, #0]
 800f7d8:	68f9      	ldr	r1, [r7, #12]
 800f7da:	693b      	ldr	r3, [r7, #16]
 800f7dc:	0018      	movs	r0, r3
 800f7de:	f001 fa19 	bl	8010c14 <pxPortInitialiseStack>
 800f7e2:	0002      	movs	r2, r0
 800f7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d002      	beq.n	800f7f4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f7f4:	46c0      	nop			; (mov r8, r8)
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	b006      	add	sp, #24
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	3fffffff 	.word	0x3fffffff
 800f800:	08016098 	.word	0x08016098
 800f804:	080160b8 	.word	0x080160b8
 800f808:	08016078 	.word	0x08016078

0800f80c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f814:	f001 fa9c 	bl	8010d50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f818:	4b2a      	ldr	r3, [pc, #168]	; (800f8c4 <prvAddNewTaskToReadyList+0xb8>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	4b29      	ldr	r3, [pc, #164]	; (800f8c4 <prvAddNewTaskToReadyList+0xb8>)
 800f820:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f822:	4b29      	ldr	r3, [pc, #164]	; (800f8c8 <prvAddNewTaskToReadyList+0xbc>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d109      	bne.n	800f83e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f82a:	4b27      	ldr	r3, [pc, #156]	; (800f8c8 <prvAddNewTaskToReadyList+0xbc>)
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f830:	4b24      	ldr	r3, [pc, #144]	; (800f8c4 <prvAddNewTaskToReadyList+0xb8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d110      	bne.n	800f85a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f838:	f000 fc8a 	bl	8010150 <prvInitialiseTaskLists>
 800f83c:	e00d      	b.n	800f85a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f83e:	4b23      	ldr	r3, [pc, #140]	; (800f8cc <prvAddNewTaskToReadyList+0xc0>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d109      	bne.n	800f85a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f846:	4b20      	ldr	r3, [pc, #128]	; (800f8c8 <prvAddNewTaskToReadyList+0xbc>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	429a      	cmp	r2, r3
 800f852:	d802      	bhi.n	800f85a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f854:	4b1c      	ldr	r3, [pc, #112]	; (800f8c8 <prvAddNewTaskToReadyList+0xbc>)
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f85a:	4b1d      	ldr	r3, [pc, #116]	; (800f8d0 <prvAddNewTaskToReadyList+0xc4>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	1c5a      	adds	r2, r3, #1
 800f860:	4b1b      	ldr	r3, [pc, #108]	; (800f8d0 <prvAddNewTaskToReadyList+0xc4>)
 800f862:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f864:	4b1a      	ldr	r3, [pc, #104]	; (800f8d0 <prvAddNewTaskToReadyList+0xc4>)
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f870:	4b18      	ldr	r3, [pc, #96]	; (800f8d4 <prvAddNewTaskToReadyList+0xc8>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	429a      	cmp	r2, r3
 800f876:	d903      	bls.n	800f880 <prvAddNewTaskToReadyList+0x74>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f87c:	4b15      	ldr	r3, [pc, #84]	; (800f8d4 <prvAddNewTaskToReadyList+0xc8>)
 800f87e:	601a      	str	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f884:	0013      	movs	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	189b      	adds	r3, r3, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4a12      	ldr	r2, [pc, #72]	; (800f8d8 <prvAddNewTaskToReadyList+0xcc>)
 800f88e:	189a      	adds	r2, r3, r2
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3304      	adds	r3, #4
 800f894:	0019      	movs	r1, r3
 800f896:	0010      	movs	r0, r2
 800f898:	f7fe fe95 	bl	800e5c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f89c:	f001 fa6a 	bl	8010d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f8a0:	4b0a      	ldr	r3, [pc, #40]	; (800f8cc <prvAddNewTaskToReadyList+0xc0>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d008      	beq.n	800f8ba <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8a8:	4b07      	ldr	r3, [pc, #28]	; (800f8c8 <prvAddNewTaskToReadyList+0xbc>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d201      	bcs.n	800f8ba <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f8b6:	f001 fa3b 	bl	8010d30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ba:	46c0      	nop			; (mov r8, r8)
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	b002      	add	sp, #8
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	46c0      	nop			; (mov r8, r8)
 800f8c4:	20001170 	.word	0x20001170
 800f8c8:	20000c9c 	.word	0x20000c9c
 800f8cc:	2000117c 	.word	0x2000117c
 800f8d0:	2000118c 	.word	0x2000118c
 800f8d4:	20001178 	.word	0x20001178
 800f8d8:	20000ca0 	.word	0x20000ca0

0800f8dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d010      	beq.n	800f910 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8ee:	4b0d      	ldr	r3, [pc, #52]	; (800f924 <vTaskDelay+0x48>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <vTaskDelay+0x1e>
 800f8f6:	b672      	cpsid	i
 800f8f8:	e7fe      	b.n	800f8f8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800f8fa:	f000 f957 	bl	800fbac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2100      	movs	r1, #0
 800f902:	0018      	movs	r0, r3
 800f904:	f000 fe62 	bl	80105cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f908:	f000 f95c 	bl	800fbc4 <xTaskResumeAll>
 800f90c:	0003      	movs	r3, r0
 800f90e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800f916:	f001 fa0b 	bl	8010d30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f91a:	46c0      	nop			; (mov r8, r8)
 800f91c:	46bd      	mov	sp, r7
 800f91e:	b004      	add	sp, #16
 800f920:	bd80      	pop	{r7, pc}
 800f922:	46c0      	nop			; (mov r8, r8)
 800f924:	20001198 	.word	0x20001198

0800f928 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f930:	f001 fa0e 	bl	8010d50 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d102      	bne.n	800f940 <vTaskSuspend+0x18>
 800f93a:	4b29      	ldr	r3, [pc, #164]	; (800f9e0 <vTaskSuspend+0xb8>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	e000      	b.n	800f942 <vTaskSuspend+0x1a>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	3304      	adds	r3, #4
 800f948:	0018      	movs	r0, r3
 800f94a:	f7fe fe94 	bl	800e676 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f952:	2b00      	cmp	r3, #0
 800f954:	d004      	beq.n	800f960 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3318      	adds	r3, #24
 800f95a:	0018      	movs	r0, r3
 800f95c:	f7fe fe8b 	bl	800e676 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	1d1a      	adds	r2, r3, #4
 800f964:	4b1f      	ldr	r3, [pc, #124]	; (800f9e4 <vTaskSuspend+0xbc>)
 800f966:	0011      	movs	r1, r2
 800f968:	0018      	movs	r0, r3
 800f96a:	f7fe fe2c 	bl	800e5c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	22b8      	movs	r2, #184	; 0xb8
 800f972:	5c9b      	ldrb	r3, [r3, r2]
 800f974:	b2db      	uxtb	r3, r3
 800f976:	2b01      	cmp	r3, #1
 800f978:	d103      	bne.n	800f982 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	22b8      	movs	r2, #184	; 0xb8
 800f97e:	2100      	movs	r1, #0
 800f980:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f982:	f001 f9f7 	bl	8010d74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f986:	4b18      	ldr	r3, [pc, #96]	; (800f9e8 <vTaskSuspend+0xc0>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d005      	beq.n	800f99a <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f98e:	f001 f9df 	bl	8010d50 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f992:	f000 fc7d 	bl	8010290 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f996:	f001 f9ed 	bl	8010d74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f99a:	4b11      	ldr	r3, [pc, #68]	; (800f9e0 <vTaskSuspend+0xb8>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d118      	bne.n	800f9d6 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 800f9a4:	4b10      	ldr	r3, [pc, #64]	; (800f9e8 <vTaskSuspend+0xc0>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d008      	beq.n	800f9be <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f9ac:	4b0f      	ldr	r3, [pc, #60]	; (800f9ec <vTaskSuspend+0xc4>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d001      	beq.n	800f9b8 <vTaskSuspend+0x90>
 800f9b4:	b672      	cpsid	i
 800f9b6:	e7fe      	b.n	800f9b6 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 800f9b8:	f001 f9ba 	bl	8010d30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9bc:	e00b      	b.n	800f9d6 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800f9be:	4b09      	ldr	r3, [pc, #36]	; (800f9e4 <vTaskSuspend+0xbc>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	4b0b      	ldr	r3, [pc, #44]	; (800f9f0 <vTaskSuspend+0xc8>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d103      	bne.n	800f9d2 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 800f9ca:	4b05      	ldr	r3, [pc, #20]	; (800f9e0 <vTaskSuspend+0xb8>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	601a      	str	r2, [r3, #0]
	}
 800f9d0:	e001      	b.n	800f9d6 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 800f9d2:	f000 fa45 	bl	800fe60 <vTaskSwitchContext>
	}
 800f9d6:	46c0      	nop			; (mov r8, r8)
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	b004      	add	sp, #16
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	46c0      	nop			; (mov r8, r8)
 800f9e0:	20000c9c 	.word	0x20000c9c
 800f9e4:	2000115c 	.word	0x2000115c
 800f9e8:	2000117c 	.word	0x2000117c
 800f9ec:	20001198 	.word	0x20001198
 800f9f0:	20001170 	.word	0x20001170

0800f9f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d101      	bne.n	800fa0e <prvTaskIsTaskSuspended+0x1a>
 800fa0a:	b672      	cpsid	i
 800fa0c:	e7fe      	b.n	800fa0c <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	695a      	ldr	r2, [r3, #20]
 800fa12:	4b0e      	ldr	r3, [pc, #56]	; (800fa4c <prvTaskIsTaskSuspended+0x58>)
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d101      	bne.n	800fa1c <prvTaskIsTaskSuspended+0x28>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e000      	b.n	800fa1e <prvTaskIsTaskSuspended+0x2a>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00f      	beq.n	800fa42 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa26:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <prvTaskIsTaskSuspended+0x5c>)
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d00a      	beq.n	800fa42 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d101      	bne.n	800fa38 <prvTaskIsTaskSuspended+0x44>
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <prvTaskIsTaskSuspended+0x46>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d001      	beq.n	800fa42 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fa42:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800fa44:	0018      	movs	r0, r3
 800fa46:	46bd      	mov	sp, r7
 800fa48:	b004      	add	sp, #16
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	2000115c 	.word	0x2000115c
 800fa50:	20001130 	.word	0x20001130

0800fa54 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <vTaskResume+0x16>
 800fa66:	b672      	cpsid	i
 800fa68:	e7fe      	b.n	800fa68 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d034      	beq.n	800fada <vTaskResume+0x86>
 800fa70:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <vTaskResume+0x90>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d02f      	beq.n	800fada <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 800fa7a:	f001 f969 	bl	8010d50 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	0018      	movs	r0, r3
 800fa82:	f7ff ffb7 	bl	800f9f4 <prvTaskIsTaskSuspended>
 800fa86:	1e03      	subs	r3, r0, #0
 800fa88:	d025      	beq.n	800fad6 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	0018      	movs	r0, r3
 800fa90:	f7fe fdf1 	bl	800e676 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa98:	4b13      	ldr	r3, [pc, #76]	; (800fae8 <vTaskResume+0x94>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d903      	bls.n	800faa8 <vTaskResume+0x54>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faa4:	4b10      	ldr	r3, [pc, #64]	; (800fae8 <vTaskResume+0x94>)
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faac:	0013      	movs	r3, r2
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	189b      	adds	r3, r3, r2
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	4a0d      	ldr	r2, [pc, #52]	; (800faec <vTaskResume+0x98>)
 800fab6:	189a      	adds	r2, r3, r2
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	3304      	adds	r3, #4
 800fabc:	0019      	movs	r1, r3
 800fabe:	0010      	movs	r0, r2
 800fac0:	f7fe fd81 	bl	800e5c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac8:	4b06      	ldr	r3, [pc, #24]	; (800fae4 <vTaskResume+0x90>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800face:	429a      	cmp	r2, r3
 800fad0:	d301      	bcc.n	800fad6 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800fad2:	f001 f92d 	bl	8010d30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800fad6:	f001 f94d 	bl	8010d74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fada:	46c0      	nop			; (mov r8, r8)
 800fadc:	46bd      	mov	sp, r7
 800fade:	b004      	add	sp, #16
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	46c0      	nop			; (mov r8, r8)
 800fae4:	20000c9c 	.word	0x20000c9c
 800fae8:	20001178 	.word	0x20001178
 800faec:	20000ca0 	.word	0x20000ca0

0800faf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800faf0:	b590      	push	{r4, r7, lr}
 800faf2:	b089      	sub	sp, #36	; 0x24
 800faf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800faf6:	2300      	movs	r3, #0
 800faf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fafe:	003a      	movs	r2, r7
 800fb00:	1d39      	adds	r1, r7, #4
 800fb02:	2308      	movs	r3, #8
 800fb04:	18fb      	adds	r3, r7, r3
 800fb06:	0018      	movs	r0, r3
 800fb08:	f7fe fd04 	bl	800e514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb0c:	683c      	ldr	r4, [r7, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	491e      	ldr	r1, [pc, #120]	; (800fb8c <vTaskStartScheduler+0x9c>)
 800fb14:	481e      	ldr	r0, [pc, #120]	; (800fb90 <vTaskStartScheduler+0xa0>)
 800fb16:	9202      	str	r2, [sp, #8]
 800fb18:	9301      	str	r3, [sp, #4]
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	2300      	movs	r3, #0
 800fb20:	0022      	movs	r2, r4
 800fb22:	f7ff fd4c 	bl	800f5be <xTaskCreateStatic>
 800fb26:	0002      	movs	r2, r0
 800fb28:	4b1a      	ldr	r3, [pc, #104]	; (800fb94 <vTaskStartScheduler+0xa4>)
 800fb2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fb2c:	4b19      	ldr	r3, [pc, #100]	; (800fb94 <vTaskStartScheduler+0xa4>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fb34:	2301      	movs	r3, #1
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	e001      	b.n	800fb3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d103      	bne.n	800fb4c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800fb44:	f000 fd96 	bl	8010674 <xTimerCreateTimerTask>
 800fb48:	0003      	movs	r3, r0
 800fb4a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d113      	bne.n	800fb7a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800fb52:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb54:	4b10      	ldr	r3, [pc, #64]	; (800fb98 <vTaskStartScheduler+0xa8>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	3354      	adds	r3, #84	; 0x54
 800fb5a:	001a      	movs	r2, r3
 800fb5c:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <vTaskStartScheduler+0xac>)
 800fb5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb60:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <vTaskStartScheduler+0xb0>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	4252      	negs	r2, r2
 800fb66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb68:	4b0e      	ldr	r3, [pc, #56]	; (800fba4 <vTaskStartScheduler+0xb4>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fb6e:	4b0e      	ldr	r3, [pc, #56]	; (800fba8 <vTaskStartScheduler+0xb8>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb74:	f001 f8b8 	bl	8010ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb78:	e004      	b.n	800fb84 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	d101      	bne.n	800fb84 <vTaskStartScheduler+0x94>
 800fb80:	b672      	cpsid	i
 800fb82:	e7fe      	b.n	800fb82 <vTaskStartScheduler+0x92>
}
 800fb84:	46c0      	nop			; (mov r8, r8)
 800fb86:	46bd      	mov	sp, r7
 800fb88:	b005      	add	sp, #20
 800fb8a:	bd90      	pop	{r4, r7, pc}
 800fb8c:	08015480 	.word	0x08015480
 800fb90:	08010131 	.word	0x08010131
 800fb94:	20001194 	.word	0x20001194
 800fb98:	20000c9c 	.word	0x20000c9c
 800fb9c:	20000074 	.word	0x20000074
 800fba0:	20001190 	.word	0x20001190
 800fba4:	2000117c 	.word	0x2000117c
 800fba8:	20001174 	.word	0x20001174

0800fbac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fbb0:	4b03      	ldr	r3, [pc, #12]	; (800fbc0 <vTaskSuspendAll+0x14>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	4b02      	ldr	r3, [pc, #8]	; (800fbc0 <vTaskSuspendAll+0x14>)
 800fbb8:	601a      	str	r2, [r3, #0]
}
 800fbba:	46c0      	nop			; (mov r8, r8)
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	20001198 	.word	0x20001198

0800fbc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbd2:	4b3a      	ldr	r3, [pc, #232]	; (800fcbc <xTaskResumeAll+0xf8>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <xTaskResumeAll+0x1a>
 800fbda:	b672      	cpsid	i
 800fbdc:	e7fe      	b.n	800fbdc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbde:	f001 f8b7 	bl	8010d50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbe2:	4b36      	ldr	r3, [pc, #216]	; (800fcbc <xTaskResumeAll+0xf8>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	1e5a      	subs	r2, r3, #1
 800fbe8:	4b34      	ldr	r3, [pc, #208]	; (800fcbc <xTaskResumeAll+0xf8>)
 800fbea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbec:	4b33      	ldr	r3, [pc, #204]	; (800fcbc <xTaskResumeAll+0xf8>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d15b      	bne.n	800fcac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbf4:	4b32      	ldr	r3, [pc, #200]	; (800fcc0 <xTaskResumeAll+0xfc>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d057      	beq.n	800fcac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbfc:	e02f      	b.n	800fc5e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fbfe:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <xTaskResumeAll+0x100>)
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	3318      	adds	r3, #24
 800fc0a:	0018      	movs	r0, r3
 800fc0c:	f7fe fd33 	bl	800e676 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	3304      	adds	r3, #4
 800fc14:	0018      	movs	r0, r3
 800fc16:	f7fe fd2e 	bl	800e676 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1e:	4b2a      	ldr	r3, [pc, #168]	; (800fcc8 <xTaskResumeAll+0x104>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d903      	bls.n	800fc2e <xTaskResumeAll+0x6a>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc2a:	4b27      	ldr	r3, [pc, #156]	; (800fcc8 <xTaskResumeAll+0x104>)
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc32:	0013      	movs	r3, r2
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	189b      	adds	r3, r3, r2
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4a24      	ldr	r2, [pc, #144]	; (800fccc <xTaskResumeAll+0x108>)
 800fc3c:	189a      	adds	r2, r3, r2
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3304      	adds	r3, #4
 800fc42:	0019      	movs	r1, r3
 800fc44:	0010      	movs	r0, r2
 800fc46:	f7fe fcbe 	bl	800e5c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc4e:	4b20      	ldr	r3, [pc, #128]	; (800fcd0 <xTaskResumeAll+0x10c>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d302      	bcc.n	800fc5e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800fc58:	4b1e      	ldr	r3, [pc, #120]	; (800fcd4 <xTaskResumeAll+0x110>)
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc5e:	4b19      	ldr	r3, [pc, #100]	; (800fcc4 <xTaskResumeAll+0x100>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1cb      	bne.n	800fbfe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc6c:	f000 fb10 	bl	8010290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fc70:	4b19      	ldr	r3, [pc, #100]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00f      	beq.n	800fc9c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc7c:	f000 f83c 	bl	800fcf8 <xTaskIncrementTick>
 800fc80:	1e03      	subs	r3, r0, #0
 800fc82:	d002      	beq.n	800fc8a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800fc84:	4b13      	ldr	r3, [pc, #76]	; (800fcd4 <xTaskResumeAll+0x110>)
 800fc86:	2201      	movs	r2, #1
 800fc88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1f2      	bne.n	800fc7c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800fc96:	4b10      	ldr	r3, [pc, #64]	; (800fcd8 <xTaskResumeAll+0x114>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc9c:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <xTaskResumeAll+0x110>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d003      	beq.n	800fcac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fca4:	2301      	movs	r3, #1
 800fca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fca8:	f001 f842 	bl	8010d30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fcac:	f001 f862 	bl	8010d74 <vPortExitCritical>

	return xAlreadyYielded;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
}
 800fcb2:	0018      	movs	r0, r3
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	b004      	add	sp, #16
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	46c0      	nop			; (mov r8, r8)
 800fcbc:	20001198 	.word	0x20001198
 800fcc0:	20001170 	.word	0x20001170
 800fcc4:	20001130 	.word	0x20001130
 800fcc8:	20001178 	.word	0x20001178
 800fccc:	20000ca0 	.word	0x20000ca0
 800fcd0:	20000c9c 	.word	0x20000c9c
 800fcd4:	20001184 	.word	0x20001184
 800fcd8:	20001180 	.word	0x20001180

0800fcdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fce2:	4b04      	ldr	r3, [pc, #16]	; (800fcf4 <xTaskGetTickCount+0x18>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fce8:	687b      	ldr	r3, [r7, #4]
}
 800fcea:	0018      	movs	r0, r3
 800fcec:	46bd      	mov	sp, r7
 800fcee:	b002      	add	sp, #8
 800fcf0:	bd80      	pop	{r7, pc}
 800fcf2:	46c0      	nop			; (mov r8, r8)
 800fcf4:	20001174 	.word	0x20001174

0800fcf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd02:	4b4c      	ldr	r3, [pc, #304]	; (800fe34 <xTaskIncrementTick+0x13c>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d000      	beq.n	800fd0c <xTaskIncrementTick+0x14>
 800fd0a:	e083      	b.n	800fe14 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd0c:	4b4a      	ldr	r3, [pc, #296]	; (800fe38 <xTaskIncrementTick+0x140>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	3301      	adds	r3, #1
 800fd12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd14:	4b48      	ldr	r3, [pc, #288]	; (800fe38 <xTaskIncrementTick+0x140>)
 800fd16:	693a      	ldr	r2, [r7, #16]
 800fd18:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d117      	bne.n	800fd50 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd20:	4b46      	ldr	r3, [pc, #280]	; (800fe3c <xTaskIncrementTick+0x144>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d001      	beq.n	800fd2e <xTaskIncrementTick+0x36>
 800fd2a:	b672      	cpsid	i
 800fd2c:	e7fe      	b.n	800fd2c <xTaskIncrementTick+0x34>
 800fd2e:	4b43      	ldr	r3, [pc, #268]	; (800fe3c <xTaskIncrementTick+0x144>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	4b42      	ldr	r3, [pc, #264]	; (800fe40 <xTaskIncrementTick+0x148>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	4b40      	ldr	r3, [pc, #256]	; (800fe3c <xTaskIncrementTick+0x144>)
 800fd3a:	601a      	str	r2, [r3, #0]
 800fd3c:	4b40      	ldr	r3, [pc, #256]	; (800fe40 <xTaskIncrementTick+0x148>)
 800fd3e:	68fa      	ldr	r2, [r7, #12]
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	4b40      	ldr	r3, [pc, #256]	; (800fe44 <xTaskIncrementTick+0x14c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	1c5a      	adds	r2, r3, #1
 800fd48:	4b3e      	ldr	r3, [pc, #248]	; (800fe44 <xTaskIncrementTick+0x14c>)
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	f000 faa0 	bl	8010290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd50:	4b3d      	ldr	r3, [pc, #244]	; (800fe48 <xTaskIncrementTick+0x150>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	693a      	ldr	r2, [r7, #16]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d34e      	bcc.n	800fdf8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd5a:	4b38      	ldr	r3, [pc, #224]	; (800fe3c <xTaskIncrementTick+0x144>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d101      	bne.n	800fd68 <xTaskIncrementTick+0x70>
 800fd64:	2301      	movs	r3, #1
 800fd66:	e000      	b.n	800fd6a <xTaskIncrementTick+0x72>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d004      	beq.n	800fd78 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd6e:	4b36      	ldr	r3, [pc, #216]	; (800fe48 <xTaskIncrementTick+0x150>)
 800fd70:	2201      	movs	r2, #1
 800fd72:	4252      	negs	r2, r2
 800fd74:	601a      	str	r2, [r3, #0]
					break;
 800fd76:	e03f      	b.n	800fdf8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fd78:	4b30      	ldr	r3, [pc, #192]	; (800fe3c <xTaskIncrementTick+0x144>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd88:	693a      	ldr	r2, [r7, #16]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d203      	bcs.n	800fd98 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd90:	4b2d      	ldr	r3, [pc, #180]	; (800fe48 <xTaskIncrementTick+0x150>)
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
						break;
 800fd96:	e02f      	b.n	800fdf8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f7fe fc6a 	bl	800e676 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d004      	beq.n	800fdb4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	3318      	adds	r3, #24
 800fdae:	0018      	movs	r0, r3
 800fdb0:	f7fe fc61 	bl	800e676 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb8:	4b24      	ldr	r3, [pc, #144]	; (800fe4c <xTaskIncrementTick+0x154>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d903      	bls.n	800fdc8 <xTaskIncrementTick+0xd0>
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc4:	4b21      	ldr	r3, [pc, #132]	; (800fe4c <xTaskIncrementTick+0x154>)
 800fdc6:	601a      	str	r2, [r3, #0]
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdcc:	0013      	movs	r3, r2
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	189b      	adds	r3, r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4a1e      	ldr	r2, [pc, #120]	; (800fe50 <xTaskIncrementTick+0x158>)
 800fdd6:	189a      	adds	r2, r3, r2
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	3304      	adds	r3, #4
 800fddc:	0019      	movs	r1, r3
 800fdde:	0010      	movs	r0, r2
 800fde0:	f7fe fbf1 	bl	800e5c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde8:	4b1a      	ldr	r3, [pc, #104]	; (800fe54 <xTaskIncrementTick+0x15c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d3b3      	bcc.n	800fd5a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdf6:	e7b0      	b.n	800fd5a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdf8:	4b16      	ldr	r3, [pc, #88]	; (800fe54 <xTaskIncrementTick+0x15c>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfe:	4914      	ldr	r1, [pc, #80]	; (800fe50 <xTaskIncrementTick+0x158>)
 800fe00:	0013      	movs	r3, r2
 800fe02:	009b      	lsls	r3, r3, #2
 800fe04:	189b      	adds	r3, r3, r2
 800fe06:	009b      	lsls	r3, r3, #2
 800fe08:	585b      	ldr	r3, [r3, r1]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d907      	bls.n	800fe1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	617b      	str	r3, [r7, #20]
 800fe12:	e004      	b.n	800fe1e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <xTaskIncrementTick+0x160>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	1c5a      	adds	r2, r3, #1
 800fe1a:	4b0f      	ldr	r3, [pc, #60]	; (800fe58 <xTaskIncrementTick+0x160>)
 800fe1c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fe1e:	4b0f      	ldr	r3, [pc, #60]	; (800fe5c <xTaskIncrementTick+0x164>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800fe26:	2301      	movs	r3, #1
 800fe28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fe2a:	697b      	ldr	r3, [r7, #20]
}
 800fe2c:	0018      	movs	r0, r3
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	b006      	add	sp, #24
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	20001198 	.word	0x20001198
 800fe38:	20001174 	.word	0x20001174
 800fe3c:	20001128 	.word	0x20001128
 800fe40:	2000112c 	.word	0x2000112c
 800fe44:	20001188 	.word	0x20001188
 800fe48:	20001190 	.word	0x20001190
 800fe4c:	20001178 	.word	0x20001178
 800fe50:	20000ca0 	.word	0x20000ca0
 800fe54:	20000c9c 	.word	0x20000c9c
 800fe58:	20001180 	.word	0x20001180
 800fe5c:	20001184 	.word	0x20001184

0800fe60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe66:	4b25      	ldr	r3, [pc, #148]	; (800fefc <vTaskSwitchContext+0x9c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d003      	beq.n	800fe76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe6e:	4b24      	ldr	r3, [pc, #144]	; (800ff00 <vTaskSwitchContext+0xa0>)
 800fe70:	2201      	movs	r2, #1
 800fe72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe74:	e03d      	b.n	800fef2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800fe76:	4b22      	ldr	r3, [pc, #136]	; (800ff00 <vTaskSwitchContext+0xa0>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe7c:	4b21      	ldr	r3, [pc, #132]	; (800ff04 <vTaskSwitchContext+0xa4>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	607b      	str	r3, [r7, #4]
 800fe82:	e007      	b.n	800fe94 <vTaskSwitchContext+0x34>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d101      	bne.n	800fe8e <vTaskSwitchContext+0x2e>
 800fe8a:	b672      	cpsid	i
 800fe8c:	e7fe      	b.n	800fe8c <vTaskSwitchContext+0x2c>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	607b      	str	r3, [r7, #4]
 800fe94:	491c      	ldr	r1, [pc, #112]	; (800ff08 <vTaskSwitchContext+0xa8>)
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	0013      	movs	r3, r2
 800fe9a:	009b      	lsls	r3, r3, #2
 800fe9c:	189b      	adds	r3, r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	585b      	ldr	r3, [r3, r1]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d0ee      	beq.n	800fe84 <vTaskSwitchContext+0x24>
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	0013      	movs	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	189b      	adds	r3, r3, r2
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	4a15      	ldr	r2, [pc, #84]	; (800ff08 <vTaskSwitchContext+0xa8>)
 800feb2:	189b      	adds	r3, r3, r2
 800feb4:	603b      	str	r3, [r7, #0]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	605a      	str	r2, [r3, #4]
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685a      	ldr	r2, [r3, #4]
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	3308      	adds	r3, #8
 800fec8:	429a      	cmp	r2, r3
 800feca:	d104      	bne.n	800fed6 <vTaskSwitchContext+0x76>
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	685a      	ldr	r2, [r3, #4]
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	605a      	str	r2, [r3, #4]
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	68da      	ldr	r2, [r3, #12]
 800fedc:	4b0b      	ldr	r3, [pc, #44]	; (800ff0c <vTaskSwitchContext+0xac>)
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	4b08      	ldr	r3, [pc, #32]	; (800ff04 <vTaskSwitchContext+0xa4>)
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fee6:	4b09      	ldr	r3, [pc, #36]	; (800ff0c <vTaskSwitchContext+0xac>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	3354      	adds	r3, #84	; 0x54
 800feec:	001a      	movs	r2, r3
 800feee:	4b08      	ldr	r3, [pc, #32]	; (800ff10 <vTaskSwitchContext+0xb0>)
 800fef0:	601a      	str	r2, [r3, #0]
}
 800fef2:	46c0      	nop			; (mov r8, r8)
 800fef4:	46bd      	mov	sp, r7
 800fef6:	b002      	add	sp, #8
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	46c0      	nop			; (mov r8, r8)
 800fefc:	20001198 	.word	0x20001198
 800ff00:	20001184 	.word	0x20001184
 800ff04:	20001178 	.word	0x20001178
 800ff08:	20000ca0 	.word	0x20000ca0
 800ff0c:	20000c9c 	.word	0x20000c9c
 800ff10:	20000074 	.word	0x20000074

0800ff14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d101      	bne.n	800ff28 <vTaskPlaceOnEventList+0x14>
 800ff24:	b672      	cpsid	i
 800ff26:	e7fe      	b.n	800ff26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff28:	4b08      	ldr	r3, [pc, #32]	; (800ff4c <vTaskPlaceOnEventList+0x38>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	3318      	adds	r3, #24
 800ff2e:	001a      	movs	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	0011      	movs	r1, r2
 800ff34:	0018      	movs	r0, r3
 800ff36:	f7fe fb68 	bl	800e60a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	0018      	movs	r0, r3
 800ff40:	f000 fb44 	bl	80105cc <prvAddCurrentTaskToDelayedList>
}
 800ff44:	46c0      	nop			; (mov r8, r8)
 800ff46:	46bd      	mov	sp, r7
 800ff48:	b002      	add	sp, #8
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	20000c9c 	.word	0x20000c9c

0800ff50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d101      	bne.n	800ff66 <vTaskPlaceOnEventListRestricted+0x16>
 800ff62:	b672      	cpsid	i
 800ff64:	e7fe      	b.n	800ff64 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff66:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <vTaskPlaceOnEventListRestricted+0x48>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	3318      	adds	r3, #24
 800ff6c:	001a      	movs	r2, r3
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	0011      	movs	r1, r2
 800ff72:	0018      	movs	r0, r3
 800ff74:	f7fe fb27 	bl	800e5c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d002      	beq.n	800ff84 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800ff7e:	2301      	movs	r3, #1
 800ff80:	425b      	negs	r3, r3
 800ff82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	0011      	movs	r1, r2
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f000 fb1e 	bl	80105cc <prvAddCurrentTaskToDelayedList>
	}
 800ff90:	46c0      	nop			; (mov r8, r8)
 800ff92:	46bd      	mov	sp, r7
 800ff94:	b004      	add	sp, #16
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20000c9c 	.word	0x20000c9c

0800ff9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d101      	bne.n	800ffb6 <xTaskRemoveFromEventList+0x1a>
 800ffb2:	b672      	cpsid	i
 800ffb4:	e7fe      	b.n	800ffb4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	3318      	adds	r3, #24
 800ffba:	0018      	movs	r0, r3
 800ffbc:	f7fe fb5b 	bl	800e676 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffc0:	4b1e      	ldr	r3, [pc, #120]	; (801003c <xTaskRemoveFromEventList+0xa0>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d11d      	bne.n	8010004 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	3304      	adds	r3, #4
 800ffcc:	0018      	movs	r0, r3
 800ffce:	f7fe fb52 	bl	800e676 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd6:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <xTaskRemoveFromEventList+0xa4>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d903      	bls.n	800ffe6 <xTaskRemoveFromEventList+0x4a>
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe2:	4b17      	ldr	r3, [pc, #92]	; (8010040 <xTaskRemoveFromEventList+0xa4>)
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffea:	0013      	movs	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	189b      	adds	r3, r3, r2
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	4a14      	ldr	r2, [pc, #80]	; (8010044 <xTaskRemoveFromEventList+0xa8>)
 800fff4:	189a      	adds	r2, r3, r2
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	3304      	adds	r3, #4
 800fffa:	0019      	movs	r1, r3
 800fffc:	0010      	movs	r0, r2
 800fffe:	f7fe fae2 	bl	800e5c6 <vListInsertEnd>
 8010002:	e007      	b.n	8010014 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	3318      	adds	r3, #24
 8010008:	001a      	movs	r2, r3
 801000a:	4b0f      	ldr	r3, [pc, #60]	; (8010048 <xTaskRemoveFromEventList+0xac>)
 801000c:	0011      	movs	r1, r2
 801000e:	0018      	movs	r0, r3
 8010010:	f7fe fad9 	bl	800e5c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010018:	4b0c      	ldr	r3, [pc, #48]	; (801004c <xTaskRemoveFromEventList+0xb0>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001e:	429a      	cmp	r2, r3
 8010020:	d905      	bls.n	801002e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010022:	2301      	movs	r3, #1
 8010024:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010026:	4b0a      	ldr	r3, [pc, #40]	; (8010050 <xTaskRemoveFromEventList+0xb4>)
 8010028:	2201      	movs	r2, #1
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	e001      	b.n	8010032 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801002e:	2300      	movs	r3, #0
 8010030:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8010032:	68fb      	ldr	r3, [r7, #12]
}
 8010034:	0018      	movs	r0, r3
 8010036:	46bd      	mov	sp, r7
 8010038:	b004      	add	sp, #16
 801003a:	bd80      	pop	{r7, pc}
 801003c:	20001198 	.word	0x20001198
 8010040:	20001178 	.word	0x20001178
 8010044:	20000ca0 	.word	0x20000ca0
 8010048:	20001130 	.word	0x20001130
 801004c:	20000c9c 	.word	0x20000c9c
 8010050:	20001184 	.word	0x20001184

08010054 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801005c:	4b05      	ldr	r3, [pc, #20]	; (8010074 <vTaskInternalSetTimeOutState+0x20>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010064:	4b04      	ldr	r3, [pc, #16]	; (8010078 <vTaskInternalSetTimeOutState+0x24>)
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	605a      	str	r2, [r3, #4]
}
 801006c:	46c0      	nop			; (mov r8, r8)
 801006e:	46bd      	mov	sp, r7
 8010070:	b002      	add	sp, #8
 8010072:	bd80      	pop	{r7, pc}
 8010074:	20001188 	.word	0x20001188
 8010078:	20001174 	.word	0x20001174

0801007c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <xTaskCheckForTimeOut+0x14>
 801008c:	b672      	cpsid	i
 801008e:	e7fe      	b.n	801008e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d101      	bne.n	801009a <xTaskCheckForTimeOut+0x1e>
 8010096:	b672      	cpsid	i
 8010098:	e7fe      	b.n	8010098 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 801009a:	f000 fe59 	bl	8010d50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801009e:	4b1d      	ldr	r3, [pc, #116]	; (8010114 <xTaskCheckForTimeOut+0x98>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	693a      	ldr	r2, [r7, #16]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	3301      	adds	r3, #1
 80100b4:	d102      	bne.n	80100bc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100b6:	2300      	movs	r3, #0
 80100b8:	617b      	str	r3, [r7, #20]
 80100ba:	e024      	b.n	8010106 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	4b15      	ldr	r3, [pc, #84]	; (8010118 <xTaskCheckForTimeOut+0x9c>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d007      	beq.n	80100d8 <xTaskCheckForTimeOut+0x5c>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d302      	bcc.n	80100d8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100d2:	2301      	movs	r3, #1
 80100d4:	617b      	str	r3, [r7, #20]
 80100d6:	e016      	b.n	8010106 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d20c      	bcs.n	80100fc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	1ad2      	subs	r2, r2, r3
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	0018      	movs	r0, r3
 80100f2:	f7ff ffaf 	bl	8010054 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	617b      	str	r3, [r7, #20]
 80100fa:	e004      	b.n	8010106 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	2200      	movs	r2, #0
 8010100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010102:	2301      	movs	r3, #1
 8010104:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8010106:	f000 fe35 	bl	8010d74 <vPortExitCritical>

	return xReturn;
 801010a:	697b      	ldr	r3, [r7, #20]
}
 801010c:	0018      	movs	r0, r3
 801010e:	46bd      	mov	sp, r7
 8010110:	b006      	add	sp, #24
 8010112:	bd80      	pop	{r7, pc}
 8010114:	20001174 	.word	0x20001174
 8010118:	20001188 	.word	0x20001188

0801011c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010120:	4b02      	ldr	r3, [pc, #8]	; (801012c <vTaskMissedYield+0x10>)
 8010122:	2201      	movs	r2, #1
 8010124:	601a      	str	r2, [r3, #0]
}
 8010126:	46c0      	nop			; (mov r8, r8)
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	20001184 	.word	0x20001184

08010130 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010138:	f000 f84e 	bl	80101d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801013c:	4b03      	ldr	r3, [pc, #12]	; (801014c <prvIdleTask+0x1c>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	2b01      	cmp	r3, #1
 8010142:	d9f9      	bls.n	8010138 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010144:	f000 fdf4 	bl	8010d30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8010148:	e7f6      	b.n	8010138 <prvIdleTask+0x8>
 801014a:	46c0      	nop			; (mov r8, r8)
 801014c:	20000ca0 	.word	0x20000ca0

08010150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010156:	2300      	movs	r3, #0
 8010158:	607b      	str	r3, [r7, #4]
 801015a:	e00c      	b.n	8010176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	0013      	movs	r3, r2
 8010160:	009b      	lsls	r3, r3, #2
 8010162:	189b      	adds	r3, r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4a14      	ldr	r2, [pc, #80]	; (80101b8 <prvInitialiseTaskLists+0x68>)
 8010168:	189b      	adds	r3, r3, r2
 801016a:	0018      	movs	r0, r3
 801016c:	f7fe fa02 	bl	800e574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3301      	adds	r3, #1
 8010174:	607b      	str	r3, [r7, #4]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b37      	cmp	r3, #55	; 0x37
 801017a:	d9ef      	bls.n	801015c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801017c:	4b0f      	ldr	r3, [pc, #60]	; (80101bc <prvInitialiseTaskLists+0x6c>)
 801017e:	0018      	movs	r0, r3
 8010180:	f7fe f9f8 	bl	800e574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010184:	4b0e      	ldr	r3, [pc, #56]	; (80101c0 <prvInitialiseTaskLists+0x70>)
 8010186:	0018      	movs	r0, r3
 8010188:	f7fe f9f4 	bl	800e574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801018c:	4b0d      	ldr	r3, [pc, #52]	; (80101c4 <prvInitialiseTaskLists+0x74>)
 801018e:	0018      	movs	r0, r3
 8010190:	f7fe f9f0 	bl	800e574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010194:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <prvInitialiseTaskLists+0x78>)
 8010196:	0018      	movs	r0, r3
 8010198:	f7fe f9ec 	bl	800e574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801019c:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <prvInitialiseTaskLists+0x7c>)
 801019e:	0018      	movs	r0, r3
 80101a0:	f7fe f9e8 	bl	800e574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <prvInitialiseTaskLists+0x80>)
 80101a6:	4a05      	ldr	r2, [pc, #20]	; (80101bc <prvInitialiseTaskLists+0x6c>)
 80101a8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101aa:	4b0a      	ldr	r3, [pc, #40]	; (80101d4 <prvInitialiseTaskLists+0x84>)
 80101ac:	4a04      	ldr	r2, [pc, #16]	; (80101c0 <prvInitialiseTaskLists+0x70>)
 80101ae:	601a      	str	r2, [r3, #0]
}
 80101b0:	46c0      	nop			; (mov r8, r8)
 80101b2:	46bd      	mov	sp, r7
 80101b4:	b002      	add	sp, #8
 80101b6:	bd80      	pop	{r7, pc}
 80101b8:	20000ca0 	.word	0x20000ca0
 80101bc:	20001100 	.word	0x20001100
 80101c0:	20001114 	.word	0x20001114
 80101c4:	20001130 	.word	0x20001130
 80101c8:	20001144 	.word	0x20001144
 80101cc:	2000115c 	.word	0x2000115c
 80101d0:	20001128 	.word	0x20001128
 80101d4:	2000112c 	.word	0x2000112c

080101d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101de:	e01a      	b.n	8010216 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80101e0:	f000 fdb6 	bl	8010d50 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80101e4:	4b10      	ldr	r3, [pc, #64]	; (8010228 <prvCheckTasksWaitingTermination+0x50>)
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	68db      	ldr	r3, [r3, #12]
 80101ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3304      	adds	r3, #4
 80101f0:	0018      	movs	r0, r3
 80101f2:	f7fe fa40 	bl	800e676 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101f6:	4b0d      	ldr	r3, [pc, #52]	; (801022c <prvCheckTasksWaitingTermination+0x54>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	1e5a      	subs	r2, r3, #1
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <prvCheckTasksWaitingTermination+0x54>)
 80101fe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010200:	4b0b      	ldr	r3, [pc, #44]	; (8010230 <prvCheckTasksWaitingTermination+0x58>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	1e5a      	subs	r2, r3, #1
 8010206:	4b0a      	ldr	r3, [pc, #40]	; (8010230 <prvCheckTasksWaitingTermination+0x58>)
 8010208:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 801020a:	f000 fdb3 	bl	8010d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	0018      	movs	r0, r3
 8010212:	f000 f80f 	bl	8010234 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010216:	4b06      	ldr	r3, [pc, #24]	; (8010230 <prvCheckTasksWaitingTermination+0x58>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1e0      	bne.n	80101e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801021e:	46c0      	nop			; (mov r8, r8)
 8010220:	46c0      	nop			; (mov r8, r8)
 8010222:	46bd      	mov	sp, r7
 8010224:	b002      	add	sp, #8
 8010226:	bd80      	pop	{r7, pc}
 8010228:	20001144 	.word	0x20001144
 801022c:	20001170 	.word	0x20001170
 8010230:	20001158 	.word	0x20001158

08010234 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3354      	adds	r3, #84	; 0x54
 8010240:	0018      	movs	r0, r3
 8010242:	f001 fe17 	bl	8011e74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	22b9      	movs	r2, #185	; 0xb9
 801024a:	5c9b      	ldrb	r3, [r3, r2]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d109      	bne.n	8010264 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010254:	0018      	movs	r0, r3
 8010256:	f000 feb9 	bl	8010fcc <vPortFree>
				vPortFree( pxTCB );
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	0018      	movs	r0, r3
 801025e:	f000 feb5 	bl	8010fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010262:	e010      	b.n	8010286 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	22b9      	movs	r2, #185	; 0xb9
 8010268:	5c9b      	ldrb	r3, [r3, r2]
 801026a:	2b01      	cmp	r3, #1
 801026c:	d104      	bne.n	8010278 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	0018      	movs	r0, r3
 8010272:	f000 feab 	bl	8010fcc <vPortFree>
	}
 8010276:	e006      	b.n	8010286 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	22b9      	movs	r2, #185	; 0xb9
 801027c:	5c9b      	ldrb	r3, [r3, r2]
 801027e:	2b02      	cmp	r3, #2
 8010280:	d001      	beq.n	8010286 <prvDeleteTCB+0x52>
 8010282:	b672      	cpsid	i
 8010284:	e7fe      	b.n	8010284 <prvDeleteTCB+0x50>
	}
 8010286:	46c0      	nop			; (mov r8, r8)
 8010288:	46bd      	mov	sp, r7
 801028a:	b002      	add	sp, #8
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010296:	4b0e      	ldr	r3, [pc, #56]	; (80102d0 <prvResetNextTaskUnblockTime+0x40>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <prvResetNextTaskUnblockTime+0x14>
 80102a0:	2301      	movs	r3, #1
 80102a2:	e000      	b.n	80102a6 <prvResetNextTaskUnblockTime+0x16>
 80102a4:	2300      	movs	r3, #0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d004      	beq.n	80102b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102aa:	4b0a      	ldr	r3, [pc, #40]	; (80102d4 <prvResetNextTaskUnblockTime+0x44>)
 80102ac:	2201      	movs	r2, #1
 80102ae:	4252      	negs	r2, r2
 80102b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102b2:	e008      	b.n	80102c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80102b4:	4b06      	ldr	r3, [pc, #24]	; (80102d0 <prvResetNextTaskUnblockTime+0x40>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	685a      	ldr	r2, [r3, #4]
 80102c2:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <prvResetNextTaskUnblockTime+0x44>)
 80102c4:	601a      	str	r2, [r3, #0]
}
 80102c6:	46c0      	nop			; (mov r8, r8)
 80102c8:	46bd      	mov	sp, r7
 80102ca:	b002      	add	sp, #8
 80102cc:	bd80      	pop	{r7, pc}
 80102ce:	46c0      	nop			; (mov r8, r8)
 80102d0:	20001128 	.word	0x20001128
 80102d4:	20001190 	.word	0x20001190

080102d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80102de:	4b04      	ldr	r3, [pc, #16]	; (80102f0 <xTaskGetCurrentTaskHandle+0x18>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80102e4:	687b      	ldr	r3, [r7, #4]
	}
 80102e6:	0018      	movs	r0, r3
 80102e8:	46bd      	mov	sp, r7
 80102ea:	b002      	add	sp, #8
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	46c0      	nop			; (mov r8, r8)
 80102f0:	20000c9c 	.word	0x20000c9c

080102f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102fa:	4b0a      	ldr	r3, [pc, #40]	; (8010324 <xTaskGetSchedulerState+0x30>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d102      	bne.n	8010308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010302:	2301      	movs	r3, #1
 8010304:	607b      	str	r3, [r7, #4]
 8010306:	e008      	b.n	801031a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010308:	4b07      	ldr	r3, [pc, #28]	; (8010328 <xTaskGetSchedulerState+0x34>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010310:	2302      	movs	r3, #2
 8010312:	607b      	str	r3, [r7, #4]
 8010314:	e001      	b.n	801031a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010316:	2300      	movs	r3, #0
 8010318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801031a:	687b      	ldr	r3, [r7, #4]
	}
 801031c:	0018      	movs	r0, r3
 801031e:	46bd      	mov	sp, r7
 8010320:	b002      	add	sp, #8
 8010322:	bd80      	pop	{r7, pc}
 8010324:	2000117c 	.word	0x2000117c
 8010328:	20001198 	.word	0x20001198

0801032c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010338:	2300      	movs	r3, #0
 801033a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d056      	beq.n	80103f0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	4b2d      	ldr	r3, [pc, #180]	; (80103fc <xTaskPriorityInherit+0xd0>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	429a      	cmp	r2, r3
 801034e:	d246      	bcs.n	80103de <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	699b      	ldr	r3, [r3, #24]
 8010354:	2b00      	cmp	r3, #0
 8010356:	db06      	blt.n	8010366 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010358:	4b28      	ldr	r3, [pc, #160]	; (80103fc <xTaskPriorityInherit+0xd0>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035e:	2238      	movs	r2, #56	; 0x38
 8010360:	1ad2      	subs	r2, r2, r3
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	6959      	ldr	r1, [r3, #20]
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801036e:	0013      	movs	r3, r2
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	189b      	adds	r3, r3, r2
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	4a22      	ldr	r2, [pc, #136]	; (8010400 <xTaskPriorityInherit+0xd4>)
 8010378:	189b      	adds	r3, r3, r2
 801037a:	4299      	cmp	r1, r3
 801037c:	d101      	bne.n	8010382 <xTaskPriorityInherit+0x56>
 801037e:	2301      	movs	r3, #1
 8010380:	e000      	b.n	8010384 <xTaskPriorityInherit+0x58>
 8010382:	2300      	movs	r3, #0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d022      	beq.n	80103ce <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	3304      	adds	r3, #4
 801038c:	0018      	movs	r0, r3
 801038e:	f7fe f972 	bl	800e676 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010392:	4b1a      	ldr	r3, [pc, #104]	; (80103fc <xTaskPriorityInherit+0xd0>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a0:	4b18      	ldr	r3, [pc, #96]	; (8010404 <xTaskPriorityInherit+0xd8>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d903      	bls.n	80103b0 <xTaskPriorityInherit+0x84>
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ac:	4b15      	ldr	r3, [pc, #84]	; (8010404 <xTaskPriorityInherit+0xd8>)
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b4:	0013      	movs	r3, r2
 80103b6:	009b      	lsls	r3, r3, #2
 80103b8:	189b      	adds	r3, r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	4a10      	ldr	r2, [pc, #64]	; (8010400 <xTaskPriorityInherit+0xd4>)
 80103be:	189a      	adds	r2, r3, r2
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	3304      	adds	r3, #4
 80103c4:	0019      	movs	r1, r3
 80103c6:	0010      	movs	r0, r2
 80103c8:	f7fe f8fd 	bl	800e5c6 <vListInsertEnd>
 80103cc:	e004      	b.n	80103d8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103ce:	4b0b      	ldr	r3, [pc, #44]	; (80103fc <xTaskPriorityInherit+0xd0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103d8:	2301      	movs	r3, #1
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	e008      	b.n	80103f0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103e2:	4b06      	ldr	r3, [pc, #24]	; (80103fc <xTaskPriorityInherit+0xd0>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d201      	bcs.n	80103f0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103ec:	2301      	movs	r3, #1
 80103ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103f0:	68fb      	ldr	r3, [r7, #12]
	}
 80103f2:	0018      	movs	r0, r3
 80103f4:	46bd      	mov	sp, r7
 80103f6:	b004      	add	sp, #16
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	46c0      	nop			; (mov r8, r8)
 80103fc:	20000c9c 	.word	0x20000c9c
 8010400:	20000ca0 	.word	0x20000ca0
 8010404:	20001178 	.word	0x20001178

08010408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010414:	2300      	movs	r3, #0
 8010416:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d044      	beq.n	80104a8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801041e:	4b25      	ldr	r3, [pc, #148]	; (80104b4 <xTaskPriorityDisinherit+0xac>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	429a      	cmp	r2, r3
 8010426:	d001      	beq.n	801042c <xTaskPriorityDisinherit+0x24>
 8010428:	b672      	cpsid	i
 801042a:	e7fe      	b.n	801042a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <xTaskPriorityDisinherit+0x30>
 8010434:	b672      	cpsid	i
 8010436:	e7fe      	b.n	8010436 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801043c:	1e5a      	subs	r2, r3, #1
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801044a:	429a      	cmp	r2, r3
 801044c:	d02c      	beq.n	80104a8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010452:	2b00      	cmp	r3, #0
 8010454:	d128      	bne.n	80104a8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	3304      	adds	r3, #4
 801045a:	0018      	movs	r0, r3
 801045c:	f7fe f90b 	bl	800e676 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	2238      	movs	r2, #56	; 0x38
 801046e:	1ad2      	subs	r2, r2, r3
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <xTaskPriorityDisinherit+0xb0>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	429a      	cmp	r2, r3
 801047e:	d903      	bls.n	8010488 <xTaskPriorityDisinherit+0x80>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	4b0c      	ldr	r3, [pc, #48]	; (80104b8 <xTaskPriorityDisinherit+0xb0>)
 8010486:	601a      	str	r2, [r3, #0]
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048c:	0013      	movs	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	189b      	adds	r3, r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4a09      	ldr	r2, [pc, #36]	; (80104bc <xTaskPriorityDisinherit+0xb4>)
 8010496:	189a      	adds	r2, r3, r2
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	3304      	adds	r3, #4
 801049c:	0019      	movs	r1, r3
 801049e:	0010      	movs	r0, r2
 80104a0:	f7fe f891 	bl	800e5c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a8:	68fb      	ldr	r3, [r7, #12]
	}
 80104aa:	0018      	movs	r0, r3
 80104ac:	46bd      	mov	sp, r7
 80104ae:	b004      	add	sp, #16
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	46c0      	nop			; (mov r8, r8)
 80104b4:	20000c9c 	.word	0x20000c9c
 80104b8:	20001178 	.word	0x20001178
 80104bc:	20000ca0 	.word	0x20000ca0

080104c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b086      	sub	sp, #24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d05d      	beq.n	8010594 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80104e0:	b672      	cpsid	i
 80104e2:	e7fe      	b.n	80104e2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e8:	683a      	ldr	r2, [r7, #0]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d902      	bls.n	80104f4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	617b      	str	r3, [r7, #20]
 80104f2:	e002      	b.n	80104fa <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104f8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fe:	697a      	ldr	r2, [r7, #20]
 8010500:	429a      	cmp	r2, r3
 8010502:	d047      	beq.n	8010594 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	429a      	cmp	r2, r3
 801050c:	d142      	bne.n	8010594 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801050e:	4b23      	ldr	r3, [pc, #140]	; (801059c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	429a      	cmp	r2, r3
 8010516:	d101      	bne.n	801051c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8010518:	b672      	cpsid	i
 801051a:	e7fe      	b.n	801051a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010520:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	697a      	ldr	r2, [r7, #20]
 8010526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	699b      	ldr	r3, [r3, #24]
 801052c:	2b00      	cmp	r3, #0
 801052e:	db04      	blt.n	801053a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	2238      	movs	r2, #56	; 0x38
 8010534:	1ad2      	subs	r2, r2, r3
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	6959      	ldr	r1, [r3, #20]
 801053e:	68ba      	ldr	r2, [r7, #8]
 8010540:	0013      	movs	r3, r2
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	189b      	adds	r3, r3, r2
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	4a15      	ldr	r2, [pc, #84]	; (80105a0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 801054a:	189b      	adds	r3, r3, r2
 801054c:	4299      	cmp	r1, r3
 801054e:	d101      	bne.n	8010554 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8010554:	2300      	movs	r3, #0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d01c      	beq.n	8010594 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	3304      	adds	r3, #4
 801055e:	0018      	movs	r0, r3
 8010560:	f7fe f889 	bl	800e676 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010568:	4b0e      	ldr	r3, [pc, #56]	; (80105a4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	429a      	cmp	r2, r3
 801056e:	d903      	bls.n	8010578 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010574:	4b0b      	ldr	r3, [pc, #44]	; (80105a4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8010576:	601a      	str	r2, [r3, #0]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057c:	0013      	movs	r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	189b      	adds	r3, r3, r2
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	4a06      	ldr	r2, [pc, #24]	; (80105a0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8010586:	189a      	adds	r2, r3, r2
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	3304      	adds	r3, #4
 801058c:	0019      	movs	r1, r3
 801058e:	0010      	movs	r0, r2
 8010590:	f7fe f819 	bl	800e5c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010594:	46c0      	nop			; (mov r8, r8)
 8010596:	46bd      	mov	sp, r7
 8010598:	b006      	add	sp, #24
 801059a:	bd80      	pop	{r7, pc}
 801059c:	20000c9c 	.word	0x20000c9c
 80105a0:	20000ca0 	.word	0x20000ca0
 80105a4:	20001178 	.word	0x20001178

080105a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105ac:	4b06      	ldr	r3, [pc, #24]	; (80105c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d004      	beq.n	80105be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105b4:	4b04      	ldr	r3, [pc, #16]	; (80105c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ba:	3201      	adds	r2, #1
 80105bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80105be:	4b02      	ldr	r3, [pc, #8]	; (80105c8 <pvTaskIncrementMutexHeldCount+0x20>)
 80105c0:	681b      	ldr	r3, [r3, #0]
	}
 80105c2:	0018      	movs	r0, r3
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	20000c9c 	.word	0x20000c9c

080105cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105d6:	4b21      	ldr	r3, [pc, #132]	; (801065c <prvAddCurrentTaskToDelayedList+0x90>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105dc:	4b20      	ldr	r3, [pc, #128]	; (8010660 <prvAddCurrentTaskToDelayedList+0x94>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	3304      	adds	r3, #4
 80105e2:	0018      	movs	r0, r3
 80105e4:	f7fe f847 	bl	800e676 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3301      	adds	r3, #1
 80105ec:	d10b      	bne.n	8010606 <prvAddCurrentTaskToDelayedList+0x3a>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d008      	beq.n	8010606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105f4:	4b1a      	ldr	r3, [pc, #104]	; (8010660 <prvAddCurrentTaskToDelayedList+0x94>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	1d1a      	adds	r2, r3, #4
 80105fa:	4b1a      	ldr	r3, [pc, #104]	; (8010664 <prvAddCurrentTaskToDelayedList+0x98>)
 80105fc:	0011      	movs	r1, r2
 80105fe:	0018      	movs	r0, r3
 8010600:	f7fd ffe1 	bl	800e5c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010604:	e026      	b.n	8010654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	18d3      	adds	r3, r2, r3
 801060c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801060e:	4b14      	ldr	r3, [pc, #80]	; (8010660 <prvAddCurrentTaskToDelayedList+0x94>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	429a      	cmp	r2, r3
 801061c:	d209      	bcs.n	8010632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801061e:	4b12      	ldr	r3, [pc, #72]	; (8010668 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	4b0f      	ldr	r3, [pc, #60]	; (8010660 <prvAddCurrentTaskToDelayedList+0x94>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	3304      	adds	r3, #4
 8010628:	0019      	movs	r1, r3
 801062a:	0010      	movs	r0, r2
 801062c:	f7fd ffed 	bl	800e60a <vListInsert>
}
 8010630:	e010      	b.n	8010654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010632:	4b0e      	ldr	r3, [pc, #56]	; (801066c <prvAddCurrentTaskToDelayedList+0xa0>)
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <prvAddCurrentTaskToDelayedList+0x94>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	3304      	adds	r3, #4
 801063c:	0019      	movs	r1, r3
 801063e:	0010      	movs	r0, r2
 8010640:	f7fd ffe3 	bl	800e60a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010644:	4b0a      	ldr	r3, [pc, #40]	; (8010670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	429a      	cmp	r2, r3
 801064c:	d202      	bcs.n	8010654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801064e:	4b08      	ldr	r3, [pc, #32]	; (8010670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	601a      	str	r2, [r3, #0]
}
 8010654:	46c0      	nop			; (mov r8, r8)
 8010656:	46bd      	mov	sp, r7
 8010658:	b004      	add	sp, #16
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20001174 	.word	0x20001174
 8010660:	20000c9c 	.word	0x20000c9c
 8010664:	2000115c 	.word	0x2000115c
 8010668:	2000112c 	.word	0x2000112c
 801066c:	20001128 	.word	0x20001128
 8010670:	20001190 	.word	0x20001190

08010674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b089      	sub	sp, #36	; 0x24
 8010678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801067a:	2300      	movs	r3, #0
 801067c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801067e:	f000 fa87 	bl	8010b90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010682:	4b17      	ldr	r3, [pc, #92]	; (80106e0 <xTimerCreateTimerTask+0x6c>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d020      	beq.n	80106cc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010692:	003a      	movs	r2, r7
 8010694:	1d39      	adds	r1, r7, #4
 8010696:	2308      	movs	r3, #8
 8010698:	18fb      	adds	r3, r7, r3
 801069a:	0018      	movs	r0, r3
 801069c:	f7fd ff52 	bl	800e544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106a0:	683c      	ldr	r4, [r7, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	490f      	ldr	r1, [pc, #60]	; (80106e4 <xTimerCreateTimerTask+0x70>)
 80106a8:	480f      	ldr	r0, [pc, #60]	; (80106e8 <xTimerCreateTimerTask+0x74>)
 80106aa:	9202      	str	r2, [sp, #8]
 80106ac:	9301      	str	r3, [sp, #4]
 80106ae:	2302      	movs	r3, #2
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	2300      	movs	r3, #0
 80106b4:	0022      	movs	r2, r4
 80106b6:	f7fe ff82 	bl	800f5be <xTaskCreateStatic>
 80106ba:	0002      	movs	r2, r0
 80106bc:	4b0b      	ldr	r3, [pc, #44]	; (80106ec <xTimerCreateTimerTask+0x78>)
 80106be:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80106c0:	4b0a      	ldr	r3, [pc, #40]	; (80106ec <xTimerCreateTimerTask+0x78>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80106c8:	2301      	movs	r3, #1
 80106ca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <xTimerCreateTimerTask+0x62>
 80106d2:	b672      	cpsid	i
 80106d4:	e7fe      	b.n	80106d4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80106d6:	68fb      	ldr	r3, [r7, #12]
}
 80106d8:	0018      	movs	r0, r3
 80106da:	46bd      	mov	sp, r7
 80106dc:	b005      	add	sp, #20
 80106de:	bd90      	pop	{r4, r7, pc}
 80106e0:	200011cc 	.word	0x200011cc
 80106e4:	08015488 	.word	0x08015488
 80106e8:	080107f5 	.word	0x080107f5
 80106ec:	200011d0 	.word	0x200011d0

080106f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80106f0:	b590      	push	{r4, r7, lr}
 80106f2:	b08b      	sub	sp, #44	; 0x2c
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	607a      	str	r2, [r7, #4]
 80106fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80106fe:	2300      	movs	r3, #0
 8010700:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <xTimerGenericCommand+0x1c>
 8010708:	b672      	cpsid	i
 801070a:	e7fe      	b.n	801070a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801070c:	4b1c      	ldr	r3, [pc, #112]	; (8010780 <xTimerGenericCommand+0x90>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d030      	beq.n	8010776 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010714:	2414      	movs	r4, #20
 8010716:	193b      	adds	r3, r7, r4
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801071c:	193b      	adds	r3, r7, r4
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010722:	193b      	adds	r3, r7, r4
 8010724:	68fa      	ldr	r2, [r7, #12]
 8010726:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	2b05      	cmp	r3, #5
 801072c:	dc19      	bgt.n	8010762 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801072e:	f7ff fde1 	bl	80102f4 <xTaskGetSchedulerState>
 8010732:	0003      	movs	r3, r0
 8010734:	2b02      	cmp	r3, #2
 8010736:	d109      	bne.n	801074c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010738:	4b11      	ldr	r3, [pc, #68]	; (8010780 <xTimerGenericCommand+0x90>)
 801073a:	6818      	ldr	r0, [r3, #0]
 801073c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801073e:	1939      	adds	r1, r7, r4
 8010740:	2300      	movs	r3, #0
 8010742:	f7fe f9b6 	bl	800eab2 <xQueueGenericSend>
 8010746:	0003      	movs	r3, r0
 8010748:	627b      	str	r3, [r7, #36]	; 0x24
 801074a:	e014      	b.n	8010776 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801074c:	4b0c      	ldr	r3, [pc, #48]	; (8010780 <xTimerGenericCommand+0x90>)
 801074e:	6818      	ldr	r0, [r3, #0]
 8010750:	2314      	movs	r3, #20
 8010752:	18f9      	adds	r1, r7, r3
 8010754:	2300      	movs	r3, #0
 8010756:	2200      	movs	r2, #0
 8010758:	f7fe f9ab 	bl	800eab2 <xQueueGenericSend>
 801075c:	0003      	movs	r3, r0
 801075e:	627b      	str	r3, [r7, #36]	; 0x24
 8010760:	e009      	b.n	8010776 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010762:	4b07      	ldr	r3, [pc, #28]	; (8010780 <xTimerGenericCommand+0x90>)
 8010764:	6818      	ldr	r0, [r3, #0]
 8010766:	683a      	ldr	r2, [r7, #0]
 8010768:	2314      	movs	r3, #20
 801076a:	18f9      	adds	r1, r7, r3
 801076c:	2300      	movs	r3, #0
 801076e:	f7fe fa64 	bl	800ec3a <xQueueGenericSendFromISR>
 8010772:	0003      	movs	r3, r0
 8010774:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010778:	0018      	movs	r0, r3
 801077a:	46bd      	mov	sp, r7
 801077c:	b00b      	add	sp, #44	; 0x2c
 801077e:	bd90      	pop	{r4, r7, pc}
 8010780:	200011cc 	.word	0x200011cc

08010784 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af02      	add	r7, sp, #8
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801078e:	4b18      	ldr	r3, [pc, #96]	; (80107f0 <prvProcessExpiredTimer+0x6c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	3304      	adds	r3, #4
 801079c:	0018      	movs	r0, r3
 801079e:	f7fd ff6a 	bl	800e676 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	69db      	ldr	r3, [r3, #28]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d119      	bne.n	80107de <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	699a      	ldr	r2, [r3, #24]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	18d1      	adds	r1, r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f000 f8b6 	bl	8010928 <prvInsertTimerInActiveList>
 80107bc:	1e03      	subs	r3, r0, #0
 80107be:	d00e      	beq.n	80107de <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	2300      	movs	r3, #0
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	2300      	movs	r3, #0
 80107ca:	2100      	movs	r1, #0
 80107cc:	f7ff ff90 	bl	80106f0 <xTimerGenericCommand>
 80107d0:	0003      	movs	r3, r0
 80107d2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <prvProcessExpiredTimer+0x5a>
 80107da:	b672      	cpsid	i
 80107dc:	e7fe      	b.n	80107dc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e2:	68fa      	ldr	r2, [r7, #12]
 80107e4:	0010      	movs	r0, r2
 80107e6:	4798      	blx	r3
}
 80107e8:	46c0      	nop			; (mov r8, r8)
 80107ea:	46bd      	mov	sp, r7
 80107ec:	b004      	add	sp, #16
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	200011c4 	.word	0x200011c4

080107f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80107fc:	2308      	movs	r3, #8
 80107fe:	18fb      	adds	r3, r7, r3
 8010800:	0018      	movs	r0, r3
 8010802:	f000 f851 	bl	80108a8 <prvGetNextExpireTime>
 8010806:	0003      	movs	r3, r0
 8010808:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	0011      	movs	r1, r2
 8010810:	0018      	movs	r0, r3
 8010812:	f000 f803 	bl	801081c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010816:	f000 f8c9 	bl	80109ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801081a:	e7ef      	b.n	80107fc <prvTimerTask+0x8>

0801081c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010826:	f7ff f9c1 	bl	800fbac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801082a:	2308      	movs	r3, #8
 801082c:	18fb      	adds	r3, r7, r3
 801082e:	0018      	movs	r0, r3
 8010830:	f000 f85a 	bl	80108e8 <prvSampleTimeNow>
 8010834:	0003      	movs	r3, r0
 8010836:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d129      	bne.n	8010892 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10c      	bne.n	801085e <prvProcessTimerOrBlockTask+0x42>
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	429a      	cmp	r2, r3
 801084a:	d808      	bhi.n	801085e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 801084c:	f7ff f9ba 	bl	800fbc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	0011      	movs	r1, r2
 8010856:	0018      	movs	r0, r3
 8010858:	f7ff ff94 	bl	8010784 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801085c:	e01b      	b.n	8010896 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d006      	beq.n	8010872 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010864:	4b0e      	ldr	r3, [pc, #56]	; (80108a0 <prvProcessTimerOrBlockTask+0x84>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	425a      	negs	r2, r3
 801086c:	4153      	adcs	r3, r2
 801086e:	b2db      	uxtb	r3, r3
 8010870:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010872:	4b0c      	ldr	r3, [pc, #48]	; (80108a4 <prvProcessTimerOrBlockTask+0x88>)
 8010874:	6818      	ldr	r0, [r3, #0]
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	683a      	ldr	r2, [r7, #0]
 801087e:	0019      	movs	r1, r3
 8010880:	f7fe fe6a 	bl	800f558 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010884:	f7ff f99e 	bl	800fbc4 <xTaskResumeAll>
 8010888:	1e03      	subs	r3, r0, #0
 801088a:	d104      	bne.n	8010896 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 801088c:	f000 fa50 	bl	8010d30 <vPortYield>
}
 8010890:	e001      	b.n	8010896 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8010892:	f7ff f997 	bl	800fbc4 <xTaskResumeAll>
}
 8010896:	46c0      	nop			; (mov r8, r8)
 8010898:	46bd      	mov	sp, r7
 801089a:	b004      	add	sp, #16
 801089c:	bd80      	pop	{r7, pc}
 801089e:	46c0      	nop			; (mov r8, r8)
 80108a0:	200011c8 	.word	0x200011c8
 80108a4:	200011cc 	.word	0x200011cc

080108a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80108b0:	4b0c      	ldr	r3, [pc, #48]	; (80108e4 <prvGetNextExpireTime+0x3c>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	425a      	negs	r2, r3
 80108b8:	4153      	adcs	r3, r2
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	001a      	movs	r2, r3
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d105      	bne.n	80108d6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <prvGetNextExpireTime+0x3c>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	e001      	b.n	80108da <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80108d6:	2300      	movs	r3, #0
 80108d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80108da:	68fb      	ldr	r3, [r7, #12]
}
 80108dc:	0018      	movs	r0, r3
 80108de:	46bd      	mov	sp, r7
 80108e0:	b004      	add	sp, #16
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	200011c4 	.word	0x200011c4

080108e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80108f0:	f7ff f9f4 	bl	800fcdc <xTaskGetTickCount>
 80108f4:	0003      	movs	r3, r0
 80108f6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <prvSampleTimeNow+0x3c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d205      	bcs.n	801090e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8010902:	f000 f8eb 	bl	8010adc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2201      	movs	r2, #1
 801090a:	601a      	str	r2, [r3, #0]
 801090c:	e002      	b.n	8010914 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2200      	movs	r2, #0
 8010912:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010914:	4b03      	ldr	r3, [pc, #12]	; (8010924 <prvSampleTimeNow+0x3c>)
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801091a:	68fb      	ldr	r3, [r7, #12]
}
 801091c:	0018      	movs	r0, r3
 801091e:	46bd      	mov	sp, r7
 8010920:	b004      	add	sp, #16
 8010922:	bd80      	pop	{r7, pc}
 8010924:	200011d4 	.word	0x200011d4

08010928 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010936:	2300      	movs	r3, #0
 8010938:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	429a      	cmp	r2, r3
 801094c:	d812      	bhi.n	8010974 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	1ad2      	subs	r2, r2, r3
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	699b      	ldr	r3, [r3, #24]
 8010958:	429a      	cmp	r2, r3
 801095a:	d302      	bcc.n	8010962 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801095c:	2301      	movs	r3, #1
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	e01b      	b.n	801099a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010962:	4b10      	ldr	r3, [pc, #64]	; (80109a4 <prvInsertTimerInActiveList+0x7c>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	3304      	adds	r3, #4
 801096a:	0019      	movs	r1, r3
 801096c:	0010      	movs	r0, r2
 801096e:	f7fd fe4c 	bl	800e60a <vListInsert>
 8010972:	e012      	b.n	801099a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	429a      	cmp	r2, r3
 801097a:	d206      	bcs.n	801098a <prvInsertTimerInActiveList+0x62>
 801097c:	68ba      	ldr	r2, [r7, #8]
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	429a      	cmp	r2, r3
 8010982:	d302      	bcc.n	801098a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010984:	2301      	movs	r3, #1
 8010986:	617b      	str	r3, [r7, #20]
 8010988:	e007      	b.n	801099a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801098a:	4b07      	ldr	r3, [pc, #28]	; (80109a8 <prvInsertTimerInActiveList+0x80>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3304      	adds	r3, #4
 8010992:	0019      	movs	r1, r3
 8010994:	0010      	movs	r0, r2
 8010996:	f7fd fe38 	bl	800e60a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801099a:	697b      	ldr	r3, [r7, #20]
}
 801099c:	0018      	movs	r0, r3
 801099e:	46bd      	mov	sp, r7
 80109a0:	b006      	add	sp, #24
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	200011c8 	.word	0x200011c8
 80109a8:	200011c4 	.word	0x200011c4

080109ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80109ac:	b590      	push	{r4, r7, lr}
 80109ae:	b08d      	sub	sp, #52	; 0x34
 80109b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80109b2:	e07f      	b.n	8010ab4 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80109b4:	2208      	movs	r2, #8
 80109b6:	18bb      	adds	r3, r7, r2
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	da0f      	bge.n	80109de <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80109be:	18bb      	adds	r3, r7, r2
 80109c0:	3304      	adds	r3, #4
 80109c2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d101      	bne.n	80109ce <prvProcessReceivedCommands+0x22>
 80109ca:	b672      	cpsid	i
 80109cc:	e7fe      	b.n	80109cc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80109ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d4:	6858      	ldr	r0, [r3, #4]
 80109d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	0019      	movs	r1, r3
 80109dc:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80109de:	2208      	movs	r2, #8
 80109e0:	18bb      	adds	r3, r7, r2
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	db64      	blt.n	8010ab2 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80109e8:	18bb      	adds	r3, r7, r2
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d004      	beq.n	8010a00 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109f6:	6a3b      	ldr	r3, [r7, #32]
 80109f8:	3304      	adds	r3, #4
 80109fa:	0018      	movs	r0, r3
 80109fc:	f7fd fe3b 	bl	800e676 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a00:	1d3b      	adds	r3, r7, #4
 8010a02:	0018      	movs	r0, r3
 8010a04:	f7ff ff70 	bl	80108e8 <prvSampleTimeNow>
 8010a08:	0003      	movs	r3, r0
 8010a0a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8010a0c:	2308      	movs	r3, #8
 8010a0e:	18fb      	adds	r3, r7, r3
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b09      	cmp	r3, #9
 8010a14:	d84e      	bhi.n	8010ab4 <prvProcessReceivedCommands+0x108>
 8010a16:	009a      	lsls	r2, r3, #2
 8010a18:	4b2e      	ldr	r3, [pc, #184]	; (8010ad4 <prvProcessReceivedCommands+0x128>)
 8010a1a:	18d3      	adds	r3, r2, r3
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010a20:	2408      	movs	r4, #8
 8010a22:	193b      	adds	r3, r7, r4
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	699b      	ldr	r3, [r3, #24]
 8010a2a:	18d1      	adds	r1, r2, r3
 8010a2c:	193b      	adds	r3, r7, r4
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	69fa      	ldr	r2, [r7, #28]
 8010a32:	6a38      	ldr	r0, [r7, #32]
 8010a34:	f7ff ff78 	bl	8010928 <prvInsertTimerInActiveList>
 8010a38:	1e03      	subs	r3, r0, #0
 8010a3a:	d03b      	beq.n	8010ab4 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a3c:	6a3b      	ldr	r3, [r7, #32]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	6a3a      	ldr	r2, [r7, #32]
 8010a42:	0010      	movs	r0, r2
 8010a44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010a46:	6a3b      	ldr	r3, [r7, #32]
 8010a48:	69db      	ldr	r3, [r3, #28]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d132      	bne.n	8010ab4 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010a4e:	193b      	adds	r3, r7, r4
 8010a50:	685a      	ldr	r2, [r3, #4]
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	699b      	ldr	r3, [r3, #24]
 8010a56:	18d2      	adds	r2, r2, r3
 8010a58:	6a38      	ldr	r0, [r7, #32]
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	2100      	movs	r1, #0
 8010a62:	f7ff fe45 	bl	80106f0 <xTimerGenericCommand>
 8010a66:	0003      	movs	r3, r0
 8010a68:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d121      	bne.n	8010ab4 <prvProcessReceivedCommands+0x108>
 8010a70:	b672      	cpsid	i
 8010a72:	e7fe      	b.n	8010a72 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010a74:	2308      	movs	r3, #8
 8010a76:	18fb      	adds	r3, r7, r3
 8010a78:	685a      	ldr	r2, [r3, #4]
 8010a7a:	6a3b      	ldr	r3, [r7, #32]
 8010a7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d101      	bne.n	8010a8a <prvProcessReceivedCommands+0xde>
 8010a86:	b672      	cpsid	i
 8010a88:	e7fe      	b.n	8010a88 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010a8a:	6a3b      	ldr	r3, [r7, #32]
 8010a8c:	699a      	ldr	r2, [r3, #24]
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	18d1      	adds	r1, r2, r3
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	69fa      	ldr	r2, [r7, #28]
 8010a96:	6a38      	ldr	r0, [r7, #32]
 8010a98:	f7ff ff46 	bl	8010928 <prvInsertTimerInActiveList>
					break;
 8010a9c:	e00a      	b.n	8010ab4 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010a9e:	6a3b      	ldr	r3, [r7, #32]
 8010aa0:	222c      	movs	r2, #44	; 0x2c
 8010aa2:	5c9b      	ldrb	r3, [r3, r2]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d105      	bne.n	8010ab4 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8010aa8:	6a3b      	ldr	r3, [r7, #32]
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f000 fa8e 	bl	8010fcc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ab0:	e000      	b.n	8010ab4 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010ab2:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ab4:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <prvProcessReceivedCommands+0x12c>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2208      	movs	r2, #8
 8010aba:	18b9      	adds	r1, r7, r2
 8010abc:	2200      	movs	r2, #0
 8010abe:	0018      	movs	r0, r3
 8010ac0:	f7fe f991 	bl	800ede6 <xQueueReceive>
 8010ac4:	1e03      	subs	r3, r0, #0
 8010ac6:	d000      	beq.n	8010aca <prvProcessReceivedCommands+0x11e>
 8010ac8:	e774      	b.n	80109b4 <prvProcessReceivedCommands+0x8>
	}
}
 8010aca:	46c0      	nop			; (mov r8, r8)
 8010acc:	46c0      	nop			; (mov r8, r8)
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	b00b      	add	sp, #44	; 0x2c
 8010ad2:	bd90      	pop	{r4, r7, pc}
 8010ad4:	08016050 	.word	0x08016050
 8010ad8:	200011cc 	.word	0x200011cc

08010adc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b088      	sub	sp, #32
 8010ae0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ae2:	e03e      	b.n	8010b62 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ae4:	4b28      	ldr	r3, [pc, #160]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010aee:	4b26      	ldr	r3, [pc, #152]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3304      	adds	r3, #4
 8010afc:	0018      	movs	r0, r3
 8010afe:	f7fd fdba 	bl	800e676 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	0010      	movs	r0, r2
 8010b0a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	69db      	ldr	r3, [r3, #28]
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d126      	bne.n	8010b62 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	693a      	ldr	r2, [r7, #16]
 8010b1a:	18d3      	adds	r3, r2, r3
 8010b1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d90e      	bls.n	8010b44 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b32:	4b15      	ldr	r3, [pc, #84]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010b34:	681a      	ldr	r2, [r3, #0]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	3304      	adds	r3, #4
 8010b3a:	0019      	movs	r1, r3
 8010b3c:	0010      	movs	r0, r2
 8010b3e:	f7fd fd64 	bl	800e60a <vListInsert>
 8010b42:	e00e      	b.n	8010b62 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	2300      	movs	r3, #0
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	2100      	movs	r1, #0
 8010b50:	f7ff fdce 	bl	80106f0 <xTimerGenericCommand>
 8010b54:	0003      	movs	r3, r0
 8010b56:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d101      	bne.n	8010b62 <prvSwitchTimerLists+0x86>
 8010b5e:	b672      	cpsid	i
 8010b60:	e7fe      	b.n	8010b60 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b62:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d1bb      	bne.n	8010ae4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010b72:	4b06      	ldr	r3, [pc, #24]	; (8010b8c <prvSwitchTimerLists+0xb0>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	4b04      	ldr	r3, [pc, #16]	; (8010b88 <prvSwitchTimerLists+0xac>)
 8010b78:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8010b7a:	4b04      	ldr	r3, [pc, #16]	; (8010b8c <prvSwitchTimerLists+0xb0>)
 8010b7c:	697a      	ldr	r2, [r7, #20]
 8010b7e:	601a      	str	r2, [r3, #0]
}
 8010b80:	46c0      	nop			; (mov r8, r8)
 8010b82:	46bd      	mov	sp, r7
 8010b84:	b006      	add	sp, #24
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	200011c4 	.word	0x200011c4
 8010b8c:	200011c8 	.word	0x200011c8

08010b90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010b96:	f000 f8db 	bl	8010d50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010b9a:	4b16      	ldr	r3, [pc, #88]	; (8010bf4 <prvCheckForValidListAndQueue+0x64>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d123      	bne.n	8010bea <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ba2:	4b15      	ldr	r3, [pc, #84]	; (8010bf8 <prvCheckForValidListAndQueue+0x68>)
 8010ba4:	0018      	movs	r0, r3
 8010ba6:	f7fd fce5 	bl	800e574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010baa:	4b14      	ldr	r3, [pc, #80]	; (8010bfc <prvCheckForValidListAndQueue+0x6c>)
 8010bac:	0018      	movs	r0, r3
 8010bae:	f7fd fce1 	bl	800e574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010bb2:	4b13      	ldr	r3, [pc, #76]	; (8010c00 <prvCheckForValidListAndQueue+0x70>)
 8010bb4:	4a10      	ldr	r2, [pc, #64]	; (8010bf8 <prvCheckForValidListAndQueue+0x68>)
 8010bb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010bb8:	4b12      	ldr	r3, [pc, #72]	; (8010c04 <prvCheckForValidListAndQueue+0x74>)
 8010bba:	4a10      	ldr	r2, [pc, #64]	; (8010bfc <prvCheckForValidListAndQueue+0x6c>)
 8010bbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010bbe:	4b12      	ldr	r3, [pc, #72]	; (8010c08 <prvCheckForValidListAndQueue+0x78>)
 8010bc0:	4a12      	ldr	r2, [pc, #72]	; (8010c0c <prvCheckForValidListAndQueue+0x7c>)
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	9100      	str	r1, [sp, #0]
 8010bc6:	2110      	movs	r1, #16
 8010bc8:	200a      	movs	r0, #10
 8010bca:	f7fd fdd0 	bl	800e76e <xQueueGenericCreateStatic>
 8010bce:	0002      	movs	r2, r0
 8010bd0:	4b08      	ldr	r3, [pc, #32]	; (8010bf4 <prvCheckForValidListAndQueue+0x64>)
 8010bd2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010bd4:	4b07      	ldr	r3, [pc, #28]	; (8010bf4 <prvCheckForValidListAndQueue+0x64>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d006      	beq.n	8010bea <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010bdc:	4b05      	ldr	r3, [pc, #20]	; (8010bf4 <prvCheckForValidListAndQueue+0x64>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a0b      	ldr	r2, [pc, #44]	; (8010c10 <prvCheckForValidListAndQueue+0x80>)
 8010be2:	0011      	movs	r1, r2
 8010be4:	0018      	movs	r0, r3
 8010be6:	f7fe fc65 	bl	800f4b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010bea:	f000 f8c3 	bl	8010d74 <vPortExitCritical>
}
 8010bee:	46c0      	nop			; (mov r8, r8)
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	200011cc 	.word	0x200011cc
 8010bf8:	2000119c 	.word	0x2000119c
 8010bfc:	200011b0 	.word	0x200011b0
 8010c00:	200011c4 	.word	0x200011c4
 8010c04:	200011c8 	.word	0x200011c8
 8010c08:	20001278 	.word	0x20001278
 8010c0c:	200011d8 	.word	0x200011d8
 8010c10:	08015490 	.word	0x08015490

08010c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	3b04      	subs	r3, #4
 8010c24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2280      	movs	r2, #128	; 0x80
 8010c2a:	0452      	lsls	r2, r2, #17
 8010c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	3b04      	subs	r3, #4
 8010c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	3b04      	subs	r3, #4
 8010c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c40:	4a08      	ldr	r2, [pc, #32]	; (8010c64 <pxPortInitialiseStack+0x50>)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3b14      	subs	r3, #20
 8010c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	3b20      	subs	r3, #32
 8010c56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c58:	68fb      	ldr	r3, [r7, #12]
}
 8010c5a:	0018      	movs	r0, r3
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	b004      	add	sp, #16
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	46c0      	nop			; (mov r8, r8)
 8010c64:	08010c69 	.word	0x08010c69

08010c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c72:	4b08      	ldr	r3, [pc, #32]	; (8010c94 <prvTaskExitError+0x2c>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3301      	adds	r3, #1
 8010c78:	d001      	beq.n	8010c7e <prvTaskExitError+0x16>
 8010c7a:	b672      	cpsid	i
 8010c7c:	e7fe      	b.n	8010c7c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8010c7e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8010c80:	46c0      	nop			; (mov r8, r8)
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d0fc      	beq.n	8010c82 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c88:	46c0      	nop			; (mov r8, r8)
 8010c8a:	46c0      	nop			; (mov r8, r8)
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	b002      	add	sp, #8
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	46c0      	nop			; (mov r8, r8)
 8010c94:	20000070 	.word	0x20000070

08010c98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8010c9c:	46c0      	nop			; (mov r8, r8)
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}
	...

08010cb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010cb0:	4a0b      	ldr	r2, [pc, #44]	; (8010ce0 <pxCurrentTCBConst2>)
 8010cb2:	6813      	ldr	r3, [r2, #0]
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	3020      	adds	r0, #32
 8010cb8:	f380 8809 	msr	PSP, r0
 8010cbc:	2002      	movs	r0, #2
 8010cbe:	f380 8814 	msr	CONTROL, r0
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010cc8:	46ae      	mov	lr, r5
 8010cca:	bc08      	pop	{r3}
 8010ccc:	bc04      	pop	{r2}
 8010cce:	b662      	cpsie	i
 8010cd0:	4718      	bx	r3
 8010cd2:	46c0      	nop			; (mov r8, r8)
 8010cd4:	46c0      	nop			; (mov r8, r8)
 8010cd6:	46c0      	nop			; (mov r8, r8)
 8010cd8:	46c0      	nop			; (mov r8, r8)
 8010cda:	46c0      	nop			; (mov r8, r8)
 8010cdc:	46c0      	nop			; (mov r8, r8)
 8010cde:	46c0      	nop			; (mov r8, r8)

08010ce0 <pxCurrentTCBConst2>:
 8010ce0:	20000c9c 	.word	0x20000c9c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8010ce4:	46c0      	nop			; (mov r8, r8)
 8010ce6:	46c0      	nop			; (mov r8, r8)

08010ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010cec:	4b0e      	ldr	r3, [pc, #56]	; (8010d28 <xPortStartScheduler+0x40>)
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	4b0d      	ldr	r3, [pc, #52]	; (8010d28 <xPortStartScheduler+0x40>)
 8010cf2:	21ff      	movs	r1, #255	; 0xff
 8010cf4:	0409      	lsls	r1, r1, #16
 8010cf6:	430a      	orrs	r2, r1
 8010cf8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010cfa:	4b0b      	ldr	r3, [pc, #44]	; (8010d28 <xPortStartScheduler+0x40>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4b0a      	ldr	r3, [pc, #40]	; (8010d28 <xPortStartScheduler+0x40>)
 8010d00:	21ff      	movs	r1, #255	; 0xff
 8010d02:	0609      	lsls	r1, r1, #24
 8010d04:	430a      	orrs	r2, r1
 8010d06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8010d08:	f000 f898 	bl	8010e3c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010d0c:	4b07      	ldr	r3, [pc, #28]	; (8010d2c <xPortStartScheduler+0x44>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8010d12:	f7ff ffcd 	bl	8010cb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010d16:	f7ff f8a3 	bl	800fe60 <vTaskSwitchContext>
	prvTaskExitError();
 8010d1a:	f7ff ffa5 	bl	8010c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010d1e:	2300      	movs	r3, #0
}
 8010d20:	0018      	movs	r0, r3
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	46c0      	nop			; (mov r8, r8)
 8010d28:	e000ed20 	.word	0xe000ed20
 8010d2c:	20000070 	.word	0x20000070

08010d30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010d34:	4b05      	ldr	r3, [pc, #20]	; (8010d4c <vPortYield+0x1c>)
 8010d36:	2280      	movs	r2, #128	; 0x80
 8010d38:	0552      	lsls	r2, r2, #21
 8010d3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8010d3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010d40:	f3bf 8f6f 	isb	sy
}
 8010d44:	46c0      	nop			; (mov r8, r8)
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	46c0      	nop			; (mov r8, r8)
 8010d4c:	e000ed04 	.word	0xe000ed04

08010d50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8010d54:	b672      	cpsid	i
    uxCriticalNesting++;
 8010d56:	4b06      	ldr	r3, [pc, #24]	; (8010d70 <vPortEnterCritical+0x20>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <vPortEnterCritical+0x20>)
 8010d5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8010d60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010d64:	f3bf 8f6f 	isb	sy
}
 8010d68:	46c0      	nop			; (mov r8, r8)
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	46c0      	nop			; (mov r8, r8)
 8010d70:	20000070 	.word	0x20000070

08010d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d78:	4b09      	ldr	r3, [pc, #36]	; (8010da0 <vPortExitCritical+0x2c>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <vPortExitCritical+0x10>
 8010d80:	b672      	cpsid	i
 8010d82:	e7fe      	b.n	8010d82 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8010d84:	4b06      	ldr	r3, [pc, #24]	; (8010da0 <vPortExitCritical+0x2c>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	1e5a      	subs	r2, r3, #1
 8010d8a:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <vPortExitCritical+0x2c>)
 8010d8c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8010d8e:	4b04      	ldr	r3, [pc, #16]	; (8010da0 <vPortExitCritical+0x2c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d100      	bne.n	8010d98 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8010d96:	b662      	cpsie	i
    }
}
 8010d98:	46c0      	nop			; (mov r8, r8)
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	46c0      	nop			; (mov r8, r8)
 8010da0:	20000070 	.word	0x20000070

08010da4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8010da4:	f3ef 8010 	mrs	r0, PRIMASK
 8010da8:	b672      	cpsid	i
 8010daa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8010dac:	46c0      	nop			; (mov r8, r8)
 8010dae:	0018      	movs	r0, r3

08010db0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8010db0:	f380 8810 	msr	PRIMASK, r0
 8010db4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8010db6:	46c0      	nop			; (mov r8, r8)
	...

08010dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010dc0:	f3ef 8009 	mrs	r0, PSP
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <pxCurrentTCBConst>)
 8010dc6:	681a      	ldr	r2, [r3, #0]
 8010dc8:	3820      	subs	r0, #32
 8010dca:	6010      	str	r0, [r2, #0]
 8010dcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010dce:	4644      	mov	r4, r8
 8010dd0:	464d      	mov	r5, r9
 8010dd2:	4656      	mov	r6, sl
 8010dd4:	465f      	mov	r7, fp
 8010dd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010dd8:	b508      	push	{r3, lr}
 8010dda:	b672      	cpsid	i
 8010ddc:	f7ff f840 	bl	800fe60 <vTaskSwitchContext>
 8010de0:	b662      	cpsie	i
 8010de2:	bc0c      	pop	{r2, r3}
 8010de4:	6811      	ldr	r1, [r2, #0]
 8010de6:	6808      	ldr	r0, [r1, #0]
 8010de8:	3010      	adds	r0, #16
 8010dea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010dec:	46a0      	mov	r8, r4
 8010dee:	46a9      	mov	r9, r5
 8010df0:	46b2      	mov	sl, r6
 8010df2:	46bb      	mov	fp, r7
 8010df4:	f380 8809 	msr	PSP, r0
 8010df8:	3820      	subs	r0, #32
 8010dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010dfc:	4718      	bx	r3
 8010dfe:	46c0      	nop			; (mov r8, r8)

08010e00 <pxCurrentTCBConst>:
 8010e00:	20000c9c 	.word	0x20000c9c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8010e04:	46c0      	nop			; (mov r8, r8)
 8010e06:	46c0      	nop			; (mov r8, r8)

08010e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e0e:	f7ff ffc9 	bl	8010da4 <ulSetInterruptMaskFromISR>
 8010e12:	0003      	movs	r3, r0
 8010e14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e16:	f7fe ff6f 	bl	800fcf8 <xTaskIncrementTick>
 8010e1a:	1e03      	subs	r3, r0, #0
 8010e1c:	d003      	beq.n	8010e26 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010e1e:	4b06      	ldr	r3, [pc, #24]	; (8010e38 <SysTick_Handler+0x30>)
 8010e20:	2280      	movs	r2, #128	; 0x80
 8010e22:	0552      	lsls	r2, r2, #21
 8010e24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	0018      	movs	r0, r3
 8010e2a:	f7ff ffc1 	bl	8010db0 <vClearInterruptMaskFromISR>
}
 8010e2e:	46c0      	nop			; (mov r8, r8)
 8010e30:	46bd      	mov	sp, r7
 8010e32:	b002      	add	sp, #8
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	46c0      	nop			; (mov r8, r8)
 8010e38:	e000ed04 	.word	0xe000ed04

08010e3c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8010e40:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <prvSetupTimerInterrupt+0x34>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8010e46:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <prvSetupTimerInterrupt+0x38>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e4c:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <prvSetupTimerInterrupt+0x3c>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	22fa      	movs	r2, #250	; 0xfa
 8010e52:	0091      	lsls	r1, r2, #2
 8010e54:	0018      	movs	r0, r3
 8010e56:	f7ef f973 	bl	8000140 <__udivsi3>
 8010e5a:	0003      	movs	r3, r0
 8010e5c:	001a      	movs	r2, r3
 8010e5e:	4b07      	ldr	r3, [pc, #28]	; (8010e7c <prvSetupTimerInterrupt+0x40>)
 8010e60:	3a01      	subs	r2, #1
 8010e62:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010e64:	4b02      	ldr	r3, [pc, #8]	; (8010e70 <prvSetupTimerInterrupt+0x34>)
 8010e66:	2207      	movs	r2, #7
 8010e68:	601a      	str	r2, [r3, #0]
}
 8010e6a:	46c0      	nop			; (mov r8, r8)
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	e000e010 	.word	0xe000e010
 8010e74:	e000e018 	.word	0xe000e018
 8010e78:	20000064 	.word	0x20000064
 8010e7c:	e000e014 	.word	0xe000e014

08010e80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8010e8c:	f7fe fe8e 	bl	800fbac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e90:	4b49      	ldr	r3, [pc, #292]	; (8010fb8 <pvPortMalloc+0x138>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d101      	bne.n	8010e9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e98:	f000 f8e0 	bl	801105c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e9c:	4b47      	ldr	r3, [pc, #284]	; (8010fbc <pvPortMalloc+0x13c>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	d000      	beq.n	8010ea8 <pvPortMalloc+0x28>
 8010ea6:	e079      	b.n	8010f9c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d012      	beq.n	8010ed4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8010eae:	2208      	movs	r2, #8
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	189b      	adds	r3, r3, r2
 8010eb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2207      	movs	r2, #7
 8010eba:	4013      	ands	r3, r2
 8010ebc:	d00a      	beq.n	8010ed4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2207      	movs	r2, #7
 8010ec2:	4393      	bics	r3, r2
 8010ec4:	3308      	adds	r3, #8
 8010ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2207      	movs	r2, #7
 8010ecc:	4013      	ands	r3, r2
 8010ece:	d001      	beq.n	8010ed4 <pvPortMalloc+0x54>
 8010ed0:	b672      	cpsid	i
 8010ed2:	e7fe      	b.n	8010ed2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d060      	beq.n	8010f9c <pvPortMalloc+0x11c>
 8010eda:	4b39      	ldr	r3, [pc, #228]	; (8010fc0 <pvPortMalloc+0x140>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d85b      	bhi.n	8010f9c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010ee4:	4b37      	ldr	r3, [pc, #220]	; (8010fc4 <pvPortMalloc+0x144>)
 8010ee6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8010ee8:	4b36      	ldr	r3, [pc, #216]	; (8010fc4 <pvPortMalloc+0x144>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010eee:	e004      	b.n	8010efa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d903      	bls.n	8010f0c <pvPortMalloc+0x8c>
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d1f1      	bne.n	8010ef0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010f0c:	4b2a      	ldr	r3, [pc, #168]	; (8010fb8 <pvPortMalloc+0x138>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d042      	beq.n	8010f9c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2208      	movs	r2, #8
 8010f1c:	189b      	adds	r3, r3, r2
 8010f1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010f28:	697b      	ldr	r3, [r7, #20]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	1ad2      	subs	r2, r2, r3
 8010f30:	2308      	movs	r3, #8
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d916      	bls.n	8010f66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010f38:	697a      	ldr	r2, [r7, #20]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	18d3      	adds	r3, r2, r3
 8010f3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2207      	movs	r2, #7
 8010f44:	4013      	ands	r3, r2
 8010f46:	d001      	beq.n	8010f4c <pvPortMalloc+0xcc>
 8010f48:	b672      	cpsid	i
 8010f4a:	e7fe      	b.n	8010f4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	1ad2      	subs	r2, r2, r3
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	0018      	movs	r0, r3
 8010f62:	f000 f8db 	bl	801111c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f66:	4b16      	ldr	r3, [pc, #88]	; (8010fc0 <pvPortMalloc+0x140>)
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	1ad2      	subs	r2, r2, r3
 8010f70:	4b13      	ldr	r3, [pc, #76]	; (8010fc0 <pvPortMalloc+0x140>)
 8010f72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f74:	4b12      	ldr	r3, [pc, #72]	; (8010fc0 <pvPortMalloc+0x140>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	4b13      	ldr	r3, [pc, #76]	; (8010fc8 <pvPortMalloc+0x148>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d203      	bcs.n	8010f88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f80:	4b0f      	ldr	r3, [pc, #60]	; (8010fc0 <pvPortMalloc+0x140>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	4b10      	ldr	r3, [pc, #64]	; (8010fc8 <pvPortMalloc+0x148>)
 8010f86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	685a      	ldr	r2, [r3, #4]
 8010f8c:	4b0b      	ldr	r3, [pc, #44]	; (8010fbc <pvPortMalloc+0x13c>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	431a      	orrs	r2, r3
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f9c:	f7fe fe12 	bl	800fbc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2207      	movs	r2, #7
 8010fa4:	4013      	ands	r3, r2
 8010fa6:	d001      	beq.n	8010fac <pvPortMalloc+0x12c>
 8010fa8:	b672      	cpsid	i
 8010faa:	e7fe      	b.n	8010faa <pvPortMalloc+0x12a>
	return pvReturn;
 8010fac:	68fb      	ldr	r3, [r7, #12]
}
 8010fae:	0018      	movs	r0, r3
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	b006      	add	sp, #24
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	46c0      	nop			; (mov r8, r8)
 8010fb8:	20002ed0 	.word	0x20002ed0
 8010fbc:	20002edc 	.word	0x20002edc
 8010fc0:	20002ed4 	.word	0x20002ed4
 8010fc4:	20002ec8 	.word	0x20002ec8
 8010fc8:	20002ed8 	.word	0x20002ed8

08010fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d035      	beq.n	801104a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fde:	2308      	movs	r3, #8
 8010fe0:	425b      	negs	r3, r3
 8010fe2:	68fa      	ldr	r2, [r7, #12]
 8010fe4:	18d3      	adds	r3, r2, r3
 8010fe6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	685a      	ldr	r2, [r3, #4]
 8010ff0:	4b18      	ldr	r3, [pc, #96]	; (8011054 <vPortFree+0x88>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	d101      	bne.n	8010ffc <vPortFree+0x30>
 8010ff8:	b672      	cpsid	i
 8010ffa:	e7fe      	b.n	8010ffa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <vPortFree+0x3c>
 8011004:	b672      	cpsid	i
 8011006:	e7fe      	b.n	8011006 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	685a      	ldr	r2, [r3, #4]
 801100c:	4b11      	ldr	r3, [pc, #68]	; (8011054 <vPortFree+0x88>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4013      	ands	r3, r2
 8011012:	d01a      	beq.n	801104a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d116      	bne.n	801104a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	685a      	ldr	r2, [r3, #4]
 8011020:	4b0c      	ldr	r3, [pc, #48]	; (8011054 <vPortFree+0x88>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	43db      	mvns	r3, r3
 8011026:	401a      	ands	r2, r3
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801102c:	f7fe fdbe 	bl	800fbac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	4b08      	ldr	r3, [pc, #32]	; (8011058 <vPortFree+0x8c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	18d2      	adds	r2, r2, r3
 801103a:	4b07      	ldr	r3, [pc, #28]	; (8011058 <vPortFree+0x8c>)
 801103c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	0018      	movs	r0, r3
 8011042:	f000 f86b 	bl	801111c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011046:	f7fe fdbd 	bl	800fbc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801104a:	46c0      	nop			; (mov r8, r8)
 801104c:	46bd      	mov	sp, r7
 801104e:	b004      	add	sp, #16
 8011050:	bd80      	pop	{r7, pc}
 8011052:	46c0      	nop			; (mov r8, r8)
 8011054:	20002edc 	.word	0x20002edc
 8011058:	20002ed4 	.word	0x20002ed4

0801105c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011062:	23e0      	movs	r3, #224	; 0xe0
 8011064:	015b      	lsls	r3, r3, #5
 8011066:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011068:	4b26      	ldr	r3, [pc, #152]	; (8011104 <prvHeapInit+0xa8>)
 801106a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2207      	movs	r2, #7
 8011070:	4013      	ands	r3, r2
 8011072:	d00c      	beq.n	801108e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	3307      	adds	r3, #7
 8011078:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2207      	movs	r2, #7
 801107e:	4393      	bics	r3, r2
 8011080:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	1ad2      	subs	r2, r2, r3
 8011088:	4b1e      	ldr	r3, [pc, #120]	; (8011104 <prvHeapInit+0xa8>)
 801108a:	18d3      	adds	r3, r2, r3
 801108c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011092:	4b1d      	ldr	r3, [pc, #116]	; (8011108 <prvHeapInit+0xac>)
 8011094:	687a      	ldr	r2, [r7, #4]
 8011096:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011098:	4b1b      	ldr	r3, [pc, #108]	; (8011108 <prvHeapInit+0xac>)
 801109a:	2200      	movs	r2, #0
 801109c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	18d3      	adds	r3, r2, r3
 80110a4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110a6:	2208      	movs	r2, #8
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	1a9b      	subs	r3, r3, r2
 80110ac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2207      	movs	r2, #7
 80110b2:	4393      	bics	r3, r2
 80110b4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	4b14      	ldr	r3, [pc, #80]	; (801110c <prvHeapInit+0xb0>)
 80110ba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80110bc:	4b13      	ldr	r3, [pc, #76]	; (801110c <prvHeapInit+0xb0>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2200      	movs	r2, #0
 80110c2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110c4:	4b11      	ldr	r3, [pc, #68]	; (801110c <prvHeapInit+0xb0>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	2200      	movs	r2, #0
 80110ca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	1ad2      	subs	r2, r2, r3
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110da:	4b0c      	ldr	r3, [pc, #48]	; (801110c <prvHeapInit+0xb0>)
 80110dc:	681a      	ldr	r2, [r3, #0]
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	685a      	ldr	r2, [r3, #4]
 80110e6:	4b0a      	ldr	r3, [pc, #40]	; (8011110 <prvHeapInit+0xb4>)
 80110e8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	4b09      	ldr	r3, [pc, #36]	; (8011114 <prvHeapInit+0xb8>)
 80110f0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110f2:	4b09      	ldr	r3, [pc, #36]	; (8011118 <prvHeapInit+0xbc>)
 80110f4:	2280      	movs	r2, #128	; 0x80
 80110f6:	0612      	lsls	r2, r2, #24
 80110f8:	601a      	str	r2, [r3, #0]
}
 80110fa:	46c0      	nop			; (mov r8, r8)
 80110fc:	46bd      	mov	sp, r7
 80110fe:	b004      	add	sp, #16
 8011100:	bd80      	pop	{r7, pc}
 8011102:	46c0      	nop			; (mov r8, r8)
 8011104:	200012c8 	.word	0x200012c8
 8011108:	20002ec8 	.word	0x20002ec8
 801110c:	20002ed0 	.word	0x20002ed0
 8011110:	20002ed8 	.word	0x20002ed8
 8011114:	20002ed4 	.word	0x20002ed4
 8011118:	20002edc 	.word	0x20002edc

0801111c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011124:	4b27      	ldr	r3, [pc, #156]	; (80111c4 <prvInsertBlockIntoFreeList+0xa8>)
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	e002      	b.n	8011130 <prvInsertBlockIntoFreeList+0x14>
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	60fb      	str	r3, [r7, #12]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	429a      	cmp	r2, r3
 8011138:	d8f7      	bhi.n	801112a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	68ba      	ldr	r2, [r7, #8]
 8011144:	18d3      	adds	r3, r2, r3
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	429a      	cmp	r2, r3
 801114a:	d108      	bne.n	801115e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	18d2      	adds	r2, r2, r3
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	68ba      	ldr	r2, [r7, #8]
 8011168:	18d2      	adds	r2, r2, r3
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	429a      	cmp	r2, r3
 8011170:	d118      	bne.n	80111a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	4b14      	ldr	r3, [pc, #80]	; (80111c8 <prvInsertBlockIntoFreeList+0xac>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	429a      	cmp	r2, r3
 801117c:	d00d      	beq.n	801119a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	685a      	ldr	r2, [r3, #4]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	18d2      	adds	r2, r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	e008      	b.n	80111ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801119a:	4b0b      	ldr	r3, [pc, #44]	; (80111c8 <prvInsertBlockIntoFreeList+0xac>)
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	e003      	b.n	80111ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111ac:	68fa      	ldr	r2, [r7, #12]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d002      	beq.n	80111ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111ba:	46c0      	nop			; (mov r8, r8)
 80111bc:	46bd      	mov	sp, r7
 80111be:	b004      	add	sp, #16
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	46c0      	nop			; (mov r8, r8)
 80111c4:	20002ec8 	.word	0x20002ec8
 80111c8:	20002ed0 	.word	0x20002ed0

080111cc <__errno>:
 80111cc:	4b01      	ldr	r3, [pc, #4]	; (80111d4 <__errno+0x8>)
 80111ce:	6818      	ldr	r0, [r3, #0]
 80111d0:	4770      	bx	lr
 80111d2:	46c0      	nop			; (mov r8, r8)
 80111d4:	20000074 	.word	0x20000074

080111d8 <std>:
 80111d8:	2300      	movs	r3, #0
 80111da:	b510      	push	{r4, lr}
 80111dc:	0004      	movs	r4, r0
 80111de:	6003      	str	r3, [r0, #0]
 80111e0:	6043      	str	r3, [r0, #4]
 80111e2:	6083      	str	r3, [r0, #8]
 80111e4:	8181      	strh	r1, [r0, #12]
 80111e6:	6643      	str	r3, [r0, #100]	; 0x64
 80111e8:	0019      	movs	r1, r3
 80111ea:	81c2      	strh	r2, [r0, #14]
 80111ec:	6103      	str	r3, [r0, #16]
 80111ee:	6143      	str	r3, [r0, #20]
 80111f0:	6183      	str	r3, [r0, #24]
 80111f2:	2208      	movs	r2, #8
 80111f4:	305c      	adds	r0, #92	; 0x5c
 80111f6:	f000 f921 	bl	801143c <memset>
 80111fa:	4b05      	ldr	r3, [pc, #20]	; (8011210 <std+0x38>)
 80111fc:	6224      	str	r4, [r4, #32]
 80111fe:	6263      	str	r3, [r4, #36]	; 0x24
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <std+0x3c>)
 8011202:	62a3      	str	r3, [r4, #40]	; 0x28
 8011204:	4b04      	ldr	r3, [pc, #16]	; (8011218 <std+0x40>)
 8011206:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011208:	4b04      	ldr	r3, [pc, #16]	; (801121c <std+0x44>)
 801120a:	6323      	str	r3, [r4, #48]	; 0x30
 801120c:	bd10      	pop	{r4, pc}
 801120e:	46c0      	nop			; (mov r8, r8)
 8011210:	08011fa5 	.word	0x08011fa5
 8011214:	08011fcd 	.word	0x08011fcd
 8011218:	08012005 	.word	0x08012005
 801121c:	08012031 	.word	0x08012031

08011220 <_cleanup_r>:
 8011220:	b510      	push	{r4, lr}
 8011222:	4902      	ldr	r1, [pc, #8]	; (801122c <_cleanup_r+0xc>)
 8011224:	f000 f8ba 	bl	801139c <_fwalk_reent>
 8011228:	bd10      	pop	{r4, pc}
 801122a:	46c0      	nop			; (mov r8, r8)
 801122c:	08012eed 	.word	0x08012eed

08011230 <__sfmoreglue>:
 8011230:	b570      	push	{r4, r5, r6, lr}
 8011232:	2568      	movs	r5, #104	; 0x68
 8011234:	1e4a      	subs	r2, r1, #1
 8011236:	4355      	muls	r5, r2
 8011238:	000e      	movs	r6, r1
 801123a:	0029      	movs	r1, r5
 801123c:	3174      	adds	r1, #116	; 0x74
 801123e:	f000 f927 	bl	8011490 <_malloc_r>
 8011242:	1e04      	subs	r4, r0, #0
 8011244:	d008      	beq.n	8011258 <__sfmoreglue+0x28>
 8011246:	2100      	movs	r1, #0
 8011248:	002a      	movs	r2, r5
 801124a:	6001      	str	r1, [r0, #0]
 801124c:	6046      	str	r6, [r0, #4]
 801124e:	300c      	adds	r0, #12
 8011250:	60a0      	str	r0, [r4, #8]
 8011252:	3268      	adds	r2, #104	; 0x68
 8011254:	f000 f8f2 	bl	801143c <memset>
 8011258:	0020      	movs	r0, r4
 801125a:	bd70      	pop	{r4, r5, r6, pc}

0801125c <__sfp_lock_acquire>:
 801125c:	b510      	push	{r4, lr}
 801125e:	4802      	ldr	r0, [pc, #8]	; (8011268 <__sfp_lock_acquire+0xc>)
 8011260:	f000 f8e1 	bl	8011426 <__retarget_lock_acquire_recursive>
 8011264:	bd10      	pop	{r4, pc}
 8011266:	46c0      	nop			; (mov r8, r8)
 8011268:	20002ee1 	.word	0x20002ee1

0801126c <__sfp_lock_release>:
 801126c:	b510      	push	{r4, lr}
 801126e:	4802      	ldr	r0, [pc, #8]	; (8011278 <__sfp_lock_release+0xc>)
 8011270:	f000 f8da 	bl	8011428 <__retarget_lock_release_recursive>
 8011274:	bd10      	pop	{r4, pc}
 8011276:	46c0      	nop			; (mov r8, r8)
 8011278:	20002ee1 	.word	0x20002ee1

0801127c <__sinit_lock_acquire>:
 801127c:	b510      	push	{r4, lr}
 801127e:	4802      	ldr	r0, [pc, #8]	; (8011288 <__sinit_lock_acquire+0xc>)
 8011280:	f000 f8d1 	bl	8011426 <__retarget_lock_acquire_recursive>
 8011284:	bd10      	pop	{r4, pc}
 8011286:	46c0      	nop			; (mov r8, r8)
 8011288:	20002ee2 	.word	0x20002ee2

0801128c <__sinit_lock_release>:
 801128c:	b510      	push	{r4, lr}
 801128e:	4802      	ldr	r0, [pc, #8]	; (8011298 <__sinit_lock_release+0xc>)
 8011290:	f000 f8ca 	bl	8011428 <__retarget_lock_release_recursive>
 8011294:	bd10      	pop	{r4, pc}
 8011296:	46c0      	nop			; (mov r8, r8)
 8011298:	20002ee2 	.word	0x20002ee2

0801129c <__sinit>:
 801129c:	b513      	push	{r0, r1, r4, lr}
 801129e:	0004      	movs	r4, r0
 80112a0:	f7ff ffec 	bl	801127c <__sinit_lock_acquire>
 80112a4:	69a3      	ldr	r3, [r4, #24]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d002      	beq.n	80112b0 <__sinit+0x14>
 80112aa:	f7ff ffef 	bl	801128c <__sinit_lock_release>
 80112ae:	bd13      	pop	{r0, r1, r4, pc}
 80112b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80112b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80112b4:	6523      	str	r3, [r4, #80]	; 0x50
 80112b6:	4b13      	ldr	r3, [pc, #76]	; (8011304 <__sinit+0x68>)
 80112b8:	4a13      	ldr	r2, [pc, #76]	; (8011308 <__sinit+0x6c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80112be:	9301      	str	r3, [sp, #4]
 80112c0:	42a3      	cmp	r3, r4
 80112c2:	d101      	bne.n	80112c8 <__sinit+0x2c>
 80112c4:	2301      	movs	r3, #1
 80112c6:	61a3      	str	r3, [r4, #24]
 80112c8:	0020      	movs	r0, r4
 80112ca:	f000 f81f 	bl	801130c <__sfp>
 80112ce:	6060      	str	r0, [r4, #4]
 80112d0:	0020      	movs	r0, r4
 80112d2:	f000 f81b 	bl	801130c <__sfp>
 80112d6:	60a0      	str	r0, [r4, #8]
 80112d8:	0020      	movs	r0, r4
 80112da:	f000 f817 	bl	801130c <__sfp>
 80112de:	2200      	movs	r2, #0
 80112e0:	2104      	movs	r1, #4
 80112e2:	60e0      	str	r0, [r4, #12]
 80112e4:	6860      	ldr	r0, [r4, #4]
 80112e6:	f7ff ff77 	bl	80111d8 <std>
 80112ea:	2201      	movs	r2, #1
 80112ec:	2109      	movs	r1, #9
 80112ee:	68a0      	ldr	r0, [r4, #8]
 80112f0:	f7ff ff72 	bl	80111d8 <std>
 80112f4:	2202      	movs	r2, #2
 80112f6:	2112      	movs	r1, #18
 80112f8:	68e0      	ldr	r0, [r4, #12]
 80112fa:	f7ff ff6d 	bl	80111d8 <std>
 80112fe:	2301      	movs	r3, #1
 8011300:	61a3      	str	r3, [r4, #24]
 8011302:	e7d2      	b.n	80112aa <__sinit+0xe>
 8011304:	080160d8 	.word	0x080160d8
 8011308:	08011221 	.word	0x08011221

0801130c <__sfp>:
 801130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130e:	0007      	movs	r7, r0
 8011310:	f7ff ffa4 	bl	801125c <__sfp_lock_acquire>
 8011314:	4b1f      	ldr	r3, [pc, #124]	; (8011394 <__sfp+0x88>)
 8011316:	681e      	ldr	r6, [r3, #0]
 8011318:	69b3      	ldr	r3, [r6, #24]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d102      	bne.n	8011324 <__sfp+0x18>
 801131e:	0030      	movs	r0, r6
 8011320:	f7ff ffbc 	bl	801129c <__sinit>
 8011324:	3648      	adds	r6, #72	; 0x48
 8011326:	68b4      	ldr	r4, [r6, #8]
 8011328:	6873      	ldr	r3, [r6, #4]
 801132a:	3b01      	subs	r3, #1
 801132c:	d504      	bpl.n	8011338 <__sfp+0x2c>
 801132e:	6833      	ldr	r3, [r6, #0]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d022      	beq.n	801137a <__sfp+0x6e>
 8011334:	6836      	ldr	r6, [r6, #0]
 8011336:	e7f6      	b.n	8011326 <__sfp+0x1a>
 8011338:	220c      	movs	r2, #12
 801133a:	5ea5      	ldrsh	r5, [r4, r2]
 801133c:	2d00      	cmp	r5, #0
 801133e:	d11a      	bne.n	8011376 <__sfp+0x6a>
 8011340:	0020      	movs	r0, r4
 8011342:	4b15      	ldr	r3, [pc, #84]	; (8011398 <__sfp+0x8c>)
 8011344:	3058      	adds	r0, #88	; 0x58
 8011346:	60e3      	str	r3, [r4, #12]
 8011348:	6665      	str	r5, [r4, #100]	; 0x64
 801134a:	f000 f86b 	bl	8011424 <__retarget_lock_init_recursive>
 801134e:	f7ff ff8d 	bl	801126c <__sfp_lock_release>
 8011352:	0020      	movs	r0, r4
 8011354:	2208      	movs	r2, #8
 8011356:	0029      	movs	r1, r5
 8011358:	6025      	str	r5, [r4, #0]
 801135a:	60a5      	str	r5, [r4, #8]
 801135c:	6065      	str	r5, [r4, #4]
 801135e:	6125      	str	r5, [r4, #16]
 8011360:	6165      	str	r5, [r4, #20]
 8011362:	61a5      	str	r5, [r4, #24]
 8011364:	305c      	adds	r0, #92	; 0x5c
 8011366:	f000 f869 	bl	801143c <memset>
 801136a:	6365      	str	r5, [r4, #52]	; 0x34
 801136c:	63a5      	str	r5, [r4, #56]	; 0x38
 801136e:	64a5      	str	r5, [r4, #72]	; 0x48
 8011370:	64e5      	str	r5, [r4, #76]	; 0x4c
 8011372:	0020      	movs	r0, r4
 8011374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011376:	3468      	adds	r4, #104	; 0x68
 8011378:	e7d7      	b.n	801132a <__sfp+0x1e>
 801137a:	2104      	movs	r1, #4
 801137c:	0038      	movs	r0, r7
 801137e:	f7ff ff57 	bl	8011230 <__sfmoreglue>
 8011382:	1e04      	subs	r4, r0, #0
 8011384:	6030      	str	r0, [r6, #0]
 8011386:	d1d5      	bne.n	8011334 <__sfp+0x28>
 8011388:	f7ff ff70 	bl	801126c <__sfp_lock_release>
 801138c:	230c      	movs	r3, #12
 801138e:	603b      	str	r3, [r7, #0]
 8011390:	e7ef      	b.n	8011372 <__sfp+0x66>
 8011392:	46c0      	nop			; (mov r8, r8)
 8011394:	080160d8 	.word	0x080160d8
 8011398:	ffff0001 	.word	0xffff0001

0801139c <_fwalk_reent>:
 801139c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801139e:	0004      	movs	r4, r0
 80113a0:	0006      	movs	r6, r0
 80113a2:	2700      	movs	r7, #0
 80113a4:	9101      	str	r1, [sp, #4]
 80113a6:	3448      	adds	r4, #72	; 0x48
 80113a8:	6863      	ldr	r3, [r4, #4]
 80113aa:	68a5      	ldr	r5, [r4, #8]
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	9b00      	ldr	r3, [sp, #0]
 80113b0:	3b01      	subs	r3, #1
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	d504      	bpl.n	80113c0 <_fwalk_reent+0x24>
 80113b6:	6824      	ldr	r4, [r4, #0]
 80113b8:	2c00      	cmp	r4, #0
 80113ba:	d1f5      	bne.n	80113a8 <_fwalk_reent+0xc>
 80113bc:	0038      	movs	r0, r7
 80113be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80113c0:	89ab      	ldrh	r3, [r5, #12]
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d908      	bls.n	80113d8 <_fwalk_reent+0x3c>
 80113c6:	220e      	movs	r2, #14
 80113c8:	5eab      	ldrsh	r3, [r5, r2]
 80113ca:	3301      	adds	r3, #1
 80113cc:	d004      	beq.n	80113d8 <_fwalk_reent+0x3c>
 80113ce:	0029      	movs	r1, r5
 80113d0:	0030      	movs	r0, r6
 80113d2:	9b01      	ldr	r3, [sp, #4]
 80113d4:	4798      	blx	r3
 80113d6:	4307      	orrs	r7, r0
 80113d8:	3568      	adds	r5, #104	; 0x68
 80113da:	e7e8      	b.n	80113ae <_fwalk_reent+0x12>

080113dc <__libc_init_array>:
 80113dc:	b570      	push	{r4, r5, r6, lr}
 80113de:	2600      	movs	r6, #0
 80113e0:	4d0c      	ldr	r5, [pc, #48]	; (8011414 <__libc_init_array+0x38>)
 80113e2:	4c0d      	ldr	r4, [pc, #52]	; (8011418 <__libc_init_array+0x3c>)
 80113e4:	1b64      	subs	r4, r4, r5
 80113e6:	10a4      	asrs	r4, r4, #2
 80113e8:	42a6      	cmp	r6, r4
 80113ea:	d109      	bne.n	8011400 <__libc_init_array+0x24>
 80113ec:	2600      	movs	r6, #0
 80113ee:	f003 ffc9 	bl	8015384 <_init>
 80113f2:	4d0a      	ldr	r5, [pc, #40]	; (801141c <__libc_init_array+0x40>)
 80113f4:	4c0a      	ldr	r4, [pc, #40]	; (8011420 <__libc_init_array+0x44>)
 80113f6:	1b64      	subs	r4, r4, r5
 80113f8:	10a4      	asrs	r4, r4, #2
 80113fa:	42a6      	cmp	r6, r4
 80113fc:	d105      	bne.n	801140a <__libc_init_array+0x2e>
 80113fe:	bd70      	pop	{r4, r5, r6, pc}
 8011400:	00b3      	lsls	r3, r6, #2
 8011402:	58eb      	ldr	r3, [r5, r3]
 8011404:	4798      	blx	r3
 8011406:	3601      	adds	r6, #1
 8011408:	e7ee      	b.n	80113e8 <__libc_init_array+0xc>
 801140a:	00b3      	lsls	r3, r6, #2
 801140c:	58eb      	ldr	r3, [r5, r3]
 801140e:	4798      	blx	r3
 8011410:	3601      	adds	r6, #1
 8011412:	e7f2      	b.n	80113fa <__libc_init_array+0x1e>
 8011414:	08016630 	.word	0x08016630
 8011418:	08016630 	.word	0x08016630
 801141c:	08016630 	.word	0x08016630
 8011420:	08016634 	.word	0x08016634

08011424 <__retarget_lock_init_recursive>:
 8011424:	4770      	bx	lr

08011426 <__retarget_lock_acquire_recursive>:
 8011426:	4770      	bx	lr

08011428 <__retarget_lock_release_recursive>:
 8011428:	4770      	bx	lr

0801142a <memcpy>:
 801142a:	2300      	movs	r3, #0
 801142c:	b510      	push	{r4, lr}
 801142e:	429a      	cmp	r2, r3
 8011430:	d100      	bne.n	8011434 <memcpy+0xa>
 8011432:	bd10      	pop	{r4, pc}
 8011434:	5ccc      	ldrb	r4, [r1, r3]
 8011436:	54c4      	strb	r4, [r0, r3]
 8011438:	3301      	adds	r3, #1
 801143a:	e7f8      	b.n	801142e <memcpy+0x4>

0801143c <memset>:
 801143c:	0003      	movs	r3, r0
 801143e:	1882      	adds	r2, r0, r2
 8011440:	4293      	cmp	r3, r2
 8011442:	d100      	bne.n	8011446 <memset+0xa>
 8011444:	4770      	bx	lr
 8011446:	7019      	strb	r1, [r3, #0]
 8011448:	3301      	adds	r3, #1
 801144a:	e7f9      	b.n	8011440 <memset+0x4>

0801144c <sbrk_aligned>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	4e0f      	ldr	r6, [pc, #60]	; (801148c <sbrk_aligned+0x40>)
 8011450:	000d      	movs	r5, r1
 8011452:	6831      	ldr	r1, [r6, #0]
 8011454:	0004      	movs	r4, r0
 8011456:	2900      	cmp	r1, #0
 8011458:	d102      	bne.n	8011460 <sbrk_aligned+0x14>
 801145a:	f000 fd71 	bl	8011f40 <_sbrk_r>
 801145e:	6030      	str	r0, [r6, #0]
 8011460:	0029      	movs	r1, r5
 8011462:	0020      	movs	r0, r4
 8011464:	f000 fd6c 	bl	8011f40 <_sbrk_r>
 8011468:	1c43      	adds	r3, r0, #1
 801146a:	d00a      	beq.n	8011482 <sbrk_aligned+0x36>
 801146c:	2303      	movs	r3, #3
 801146e:	1cc5      	adds	r5, r0, #3
 8011470:	439d      	bics	r5, r3
 8011472:	42a8      	cmp	r0, r5
 8011474:	d007      	beq.n	8011486 <sbrk_aligned+0x3a>
 8011476:	1a29      	subs	r1, r5, r0
 8011478:	0020      	movs	r0, r4
 801147a:	f000 fd61 	bl	8011f40 <_sbrk_r>
 801147e:	1c43      	adds	r3, r0, #1
 8011480:	d101      	bne.n	8011486 <sbrk_aligned+0x3a>
 8011482:	2501      	movs	r5, #1
 8011484:	426d      	negs	r5, r5
 8011486:	0028      	movs	r0, r5
 8011488:	bd70      	pop	{r4, r5, r6, pc}
 801148a:	46c0      	nop			; (mov r8, r8)
 801148c:	20002ee8 	.word	0x20002ee8

08011490 <_malloc_r>:
 8011490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011492:	2203      	movs	r2, #3
 8011494:	1ccb      	adds	r3, r1, #3
 8011496:	4393      	bics	r3, r2
 8011498:	3308      	adds	r3, #8
 801149a:	0006      	movs	r6, r0
 801149c:	001f      	movs	r7, r3
 801149e:	2b0c      	cmp	r3, #12
 80114a0:	d232      	bcs.n	8011508 <_malloc_r+0x78>
 80114a2:	270c      	movs	r7, #12
 80114a4:	42b9      	cmp	r1, r7
 80114a6:	d831      	bhi.n	801150c <_malloc_r+0x7c>
 80114a8:	0030      	movs	r0, r6
 80114aa:	f001 fd8d 	bl	8012fc8 <__malloc_lock>
 80114ae:	4d32      	ldr	r5, [pc, #200]	; (8011578 <_malloc_r+0xe8>)
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	001c      	movs	r4, r3
 80114b4:	2c00      	cmp	r4, #0
 80114b6:	d12e      	bne.n	8011516 <_malloc_r+0x86>
 80114b8:	0039      	movs	r1, r7
 80114ba:	0030      	movs	r0, r6
 80114bc:	f7ff ffc6 	bl	801144c <sbrk_aligned>
 80114c0:	0004      	movs	r4, r0
 80114c2:	1c43      	adds	r3, r0, #1
 80114c4:	d11e      	bne.n	8011504 <_malloc_r+0x74>
 80114c6:	682c      	ldr	r4, [r5, #0]
 80114c8:	0025      	movs	r5, r4
 80114ca:	2d00      	cmp	r5, #0
 80114cc:	d14a      	bne.n	8011564 <_malloc_r+0xd4>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	0029      	movs	r1, r5
 80114d2:	18e3      	adds	r3, r4, r3
 80114d4:	0030      	movs	r0, r6
 80114d6:	9301      	str	r3, [sp, #4]
 80114d8:	f000 fd32 	bl	8011f40 <_sbrk_r>
 80114dc:	9b01      	ldr	r3, [sp, #4]
 80114de:	4283      	cmp	r3, r0
 80114e0:	d143      	bne.n	801156a <_malloc_r+0xda>
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	3703      	adds	r7, #3
 80114e6:	1aff      	subs	r7, r7, r3
 80114e8:	2303      	movs	r3, #3
 80114ea:	439f      	bics	r7, r3
 80114ec:	3708      	adds	r7, #8
 80114ee:	2f0c      	cmp	r7, #12
 80114f0:	d200      	bcs.n	80114f4 <_malloc_r+0x64>
 80114f2:	270c      	movs	r7, #12
 80114f4:	0039      	movs	r1, r7
 80114f6:	0030      	movs	r0, r6
 80114f8:	f7ff ffa8 	bl	801144c <sbrk_aligned>
 80114fc:	1c43      	adds	r3, r0, #1
 80114fe:	d034      	beq.n	801156a <_malloc_r+0xda>
 8011500:	6823      	ldr	r3, [r4, #0]
 8011502:	19df      	adds	r7, r3, r7
 8011504:	6027      	str	r7, [r4, #0]
 8011506:	e013      	b.n	8011530 <_malloc_r+0xa0>
 8011508:	2b00      	cmp	r3, #0
 801150a:	dacb      	bge.n	80114a4 <_malloc_r+0x14>
 801150c:	230c      	movs	r3, #12
 801150e:	2500      	movs	r5, #0
 8011510:	6033      	str	r3, [r6, #0]
 8011512:	0028      	movs	r0, r5
 8011514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011516:	6822      	ldr	r2, [r4, #0]
 8011518:	1bd1      	subs	r1, r2, r7
 801151a:	d420      	bmi.n	801155e <_malloc_r+0xce>
 801151c:	290b      	cmp	r1, #11
 801151e:	d917      	bls.n	8011550 <_malloc_r+0xc0>
 8011520:	19e2      	adds	r2, r4, r7
 8011522:	6027      	str	r7, [r4, #0]
 8011524:	42a3      	cmp	r3, r4
 8011526:	d111      	bne.n	801154c <_malloc_r+0xbc>
 8011528:	602a      	str	r2, [r5, #0]
 801152a:	6863      	ldr	r3, [r4, #4]
 801152c:	6011      	str	r1, [r2, #0]
 801152e:	6053      	str	r3, [r2, #4]
 8011530:	0030      	movs	r0, r6
 8011532:	0025      	movs	r5, r4
 8011534:	f001 fd50 	bl	8012fd8 <__malloc_unlock>
 8011538:	2207      	movs	r2, #7
 801153a:	350b      	adds	r5, #11
 801153c:	1d23      	adds	r3, r4, #4
 801153e:	4395      	bics	r5, r2
 8011540:	1aea      	subs	r2, r5, r3
 8011542:	429d      	cmp	r5, r3
 8011544:	d0e5      	beq.n	8011512 <_malloc_r+0x82>
 8011546:	1b5b      	subs	r3, r3, r5
 8011548:	50a3      	str	r3, [r4, r2]
 801154a:	e7e2      	b.n	8011512 <_malloc_r+0x82>
 801154c:	605a      	str	r2, [r3, #4]
 801154e:	e7ec      	b.n	801152a <_malloc_r+0x9a>
 8011550:	6862      	ldr	r2, [r4, #4]
 8011552:	42a3      	cmp	r3, r4
 8011554:	d101      	bne.n	801155a <_malloc_r+0xca>
 8011556:	602a      	str	r2, [r5, #0]
 8011558:	e7ea      	b.n	8011530 <_malloc_r+0xa0>
 801155a:	605a      	str	r2, [r3, #4]
 801155c:	e7e8      	b.n	8011530 <_malloc_r+0xa0>
 801155e:	0023      	movs	r3, r4
 8011560:	6864      	ldr	r4, [r4, #4]
 8011562:	e7a7      	b.n	80114b4 <_malloc_r+0x24>
 8011564:	002c      	movs	r4, r5
 8011566:	686d      	ldr	r5, [r5, #4]
 8011568:	e7af      	b.n	80114ca <_malloc_r+0x3a>
 801156a:	230c      	movs	r3, #12
 801156c:	0030      	movs	r0, r6
 801156e:	6033      	str	r3, [r6, #0]
 8011570:	f001 fd32 	bl	8012fd8 <__malloc_unlock>
 8011574:	e7cd      	b.n	8011512 <_malloc_r+0x82>
 8011576:	46c0      	nop			; (mov r8, r8)
 8011578:	20002ee4 	.word	0x20002ee4

0801157c <__cvt>:
 801157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157e:	001e      	movs	r6, r3
 8011580:	2300      	movs	r3, #0
 8011582:	0014      	movs	r4, r2
 8011584:	b08b      	sub	sp, #44	; 0x2c
 8011586:	429e      	cmp	r6, r3
 8011588:	da04      	bge.n	8011594 <__cvt+0x18>
 801158a:	2180      	movs	r1, #128	; 0x80
 801158c:	0609      	lsls	r1, r1, #24
 801158e:	1873      	adds	r3, r6, r1
 8011590:	001e      	movs	r6, r3
 8011592:	232d      	movs	r3, #45	; 0x2d
 8011594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011596:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011598:	7013      	strb	r3, [r2, #0]
 801159a:	2320      	movs	r3, #32
 801159c:	2203      	movs	r2, #3
 801159e:	439f      	bics	r7, r3
 80115a0:	2f46      	cmp	r7, #70	; 0x46
 80115a2:	d007      	beq.n	80115b4 <__cvt+0x38>
 80115a4:	003b      	movs	r3, r7
 80115a6:	3b45      	subs	r3, #69	; 0x45
 80115a8:	4259      	negs	r1, r3
 80115aa:	414b      	adcs	r3, r1
 80115ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80115ae:	3a01      	subs	r2, #1
 80115b0:	18cb      	adds	r3, r1, r3
 80115b2:	9310      	str	r3, [sp, #64]	; 0x40
 80115b4:	ab09      	add	r3, sp, #36	; 0x24
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	ab08      	add	r3, sp, #32
 80115ba:	9303      	str	r3, [sp, #12]
 80115bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80115be:	9200      	str	r2, [sp, #0]
 80115c0:	9302      	str	r3, [sp, #8]
 80115c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115c4:	0022      	movs	r2, r4
 80115c6:	9301      	str	r3, [sp, #4]
 80115c8:	0033      	movs	r3, r6
 80115ca:	f000 fde9 	bl	80121a0 <_dtoa_r>
 80115ce:	0005      	movs	r5, r0
 80115d0:	2f47      	cmp	r7, #71	; 0x47
 80115d2:	d102      	bne.n	80115da <__cvt+0x5e>
 80115d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115d6:	07db      	lsls	r3, r3, #31
 80115d8:	d528      	bpl.n	801162c <__cvt+0xb0>
 80115da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80115dc:	18eb      	adds	r3, r5, r3
 80115de:	9307      	str	r3, [sp, #28]
 80115e0:	2f46      	cmp	r7, #70	; 0x46
 80115e2:	d114      	bne.n	801160e <__cvt+0x92>
 80115e4:	782b      	ldrb	r3, [r5, #0]
 80115e6:	2b30      	cmp	r3, #48	; 0x30
 80115e8:	d10c      	bne.n	8011604 <__cvt+0x88>
 80115ea:	2200      	movs	r2, #0
 80115ec:	2300      	movs	r3, #0
 80115ee:	0020      	movs	r0, r4
 80115f0:	0031      	movs	r1, r6
 80115f2:	f7ee ff2b 	bl	800044c <__aeabi_dcmpeq>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d104      	bne.n	8011604 <__cvt+0x88>
 80115fa:	2301      	movs	r3, #1
 80115fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80115fe:	1a9b      	subs	r3, r3, r2
 8011600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011602:	6013      	str	r3, [r2, #0]
 8011604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011606:	9a07      	ldr	r2, [sp, #28]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	18d3      	adds	r3, r2, r3
 801160c:	9307      	str	r3, [sp, #28]
 801160e:	2200      	movs	r2, #0
 8011610:	2300      	movs	r3, #0
 8011612:	0020      	movs	r0, r4
 8011614:	0031      	movs	r1, r6
 8011616:	f7ee ff19 	bl	800044c <__aeabi_dcmpeq>
 801161a:	2800      	cmp	r0, #0
 801161c:	d001      	beq.n	8011622 <__cvt+0xa6>
 801161e:	9b07      	ldr	r3, [sp, #28]
 8011620:	9309      	str	r3, [sp, #36]	; 0x24
 8011622:	2230      	movs	r2, #48	; 0x30
 8011624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011626:	9907      	ldr	r1, [sp, #28]
 8011628:	428b      	cmp	r3, r1
 801162a:	d306      	bcc.n	801163a <__cvt+0xbe>
 801162c:	0028      	movs	r0, r5
 801162e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011630:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011632:	1b5b      	subs	r3, r3, r5
 8011634:	6013      	str	r3, [r2, #0]
 8011636:	b00b      	add	sp, #44	; 0x2c
 8011638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801163a:	1c59      	adds	r1, r3, #1
 801163c:	9109      	str	r1, [sp, #36]	; 0x24
 801163e:	701a      	strb	r2, [r3, #0]
 8011640:	e7f0      	b.n	8011624 <__cvt+0xa8>

08011642 <__exponent>:
 8011642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011644:	1c83      	adds	r3, r0, #2
 8011646:	b087      	sub	sp, #28
 8011648:	9303      	str	r3, [sp, #12]
 801164a:	0005      	movs	r5, r0
 801164c:	000c      	movs	r4, r1
 801164e:	232b      	movs	r3, #43	; 0x2b
 8011650:	7002      	strb	r2, [r0, #0]
 8011652:	2900      	cmp	r1, #0
 8011654:	da01      	bge.n	801165a <__exponent+0x18>
 8011656:	424c      	negs	r4, r1
 8011658:	3302      	adds	r3, #2
 801165a:	706b      	strb	r3, [r5, #1]
 801165c:	2c09      	cmp	r4, #9
 801165e:	dd31      	ble.n	80116c4 <__exponent+0x82>
 8011660:	270a      	movs	r7, #10
 8011662:	ab04      	add	r3, sp, #16
 8011664:	1dde      	adds	r6, r3, #7
 8011666:	0020      	movs	r0, r4
 8011668:	0039      	movs	r1, r7
 801166a:	9601      	str	r6, [sp, #4]
 801166c:	f7ee fed8 	bl	8000420 <__aeabi_idivmod>
 8011670:	3e01      	subs	r6, #1
 8011672:	3130      	adds	r1, #48	; 0x30
 8011674:	0020      	movs	r0, r4
 8011676:	7031      	strb	r1, [r6, #0]
 8011678:	0039      	movs	r1, r7
 801167a:	9402      	str	r4, [sp, #8]
 801167c:	f7ee fdea 	bl	8000254 <__divsi3>
 8011680:	9b02      	ldr	r3, [sp, #8]
 8011682:	0004      	movs	r4, r0
 8011684:	2b63      	cmp	r3, #99	; 0x63
 8011686:	dcee      	bgt.n	8011666 <__exponent+0x24>
 8011688:	9b01      	ldr	r3, [sp, #4]
 801168a:	3430      	adds	r4, #48	; 0x30
 801168c:	1e9a      	subs	r2, r3, #2
 801168e:	0013      	movs	r3, r2
 8011690:	9903      	ldr	r1, [sp, #12]
 8011692:	7014      	strb	r4, [r2, #0]
 8011694:	a804      	add	r0, sp, #16
 8011696:	3007      	adds	r0, #7
 8011698:	4298      	cmp	r0, r3
 801169a:	d80e      	bhi.n	80116ba <__exponent+0x78>
 801169c:	ab04      	add	r3, sp, #16
 801169e:	3307      	adds	r3, #7
 80116a0:	2000      	movs	r0, #0
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d804      	bhi.n	80116b0 <__exponent+0x6e>
 80116a6:	ab04      	add	r3, sp, #16
 80116a8:	3009      	adds	r0, #9
 80116aa:	18c0      	adds	r0, r0, r3
 80116ac:	9b01      	ldr	r3, [sp, #4]
 80116ae:	1ac0      	subs	r0, r0, r3
 80116b0:	9b03      	ldr	r3, [sp, #12]
 80116b2:	1818      	adds	r0, r3, r0
 80116b4:	1b40      	subs	r0, r0, r5
 80116b6:	b007      	add	sp, #28
 80116b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ba:	7818      	ldrb	r0, [r3, #0]
 80116bc:	3301      	adds	r3, #1
 80116be:	7008      	strb	r0, [r1, #0]
 80116c0:	3101      	adds	r1, #1
 80116c2:	e7e7      	b.n	8011694 <__exponent+0x52>
 80116c4:	2330      	movs	r3, #48	; 0x30
 80116c6:	18e4      	adds	r4, r4, r3
 80116c8:	70ab      	strb	r3, [r5, #2]
 80116ca:	1d28      	adds	r0, r5, #4
 80116cc:	70ec      	strb	r4, [r5, #3]
 80116ce:	e7f1      	b.n	80116b4 <__exponent+0x72>

080116d0 <_printf_float>:
 80116d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d2:	b095      	sub	sp, #84	; 0x54
 80116d4:	000c      	movs	r4, r1
 80116d6:	9209      	str	r2, [sp, #36]	; 0x24
 80116d8:	001e      	movs	r6, r3
 80116da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80116dc:	0007      	movs	r7, r0
 80116de:	f001 fc45 	bl	8012f6c <_localeconv_r>
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	0018      	movs	r0, r3
 80116e6:	930c      	str	r3, [sp, #48]	; 0x30
 80116e8:	f7ee fd0e 	bl	8000108 <strlen>
 80116ec:	2300      	movs	r3, #0
 80116ee:	9312      	str	r3, [sp, #72]	; 0x48
 80116f0:	7e23      	ldrb	r3, [r4, #24]
 80116f2:	2207      	movs	r2, #7
 80116f4:	930a      	str	r3, [sp, #40]	; 0x28
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	900e      	str	r0, [sp, #56]	; 0x38
 80116fa:	930d      	str	r3, [sp, #52]	; 0x34
 80116fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116fe:	682b      	ldr	r3, [r5, #0]
 8011700:	05c9      	lsls	r1, r1, #23
 8011702:	d547      	bpl.n	8011794 <_printf_float+0xc4>
 8011704:	189b      	adds	r3, r3, r2
 8011706:	4393      	bics	r3, r2
 8011708:	001a      	movs	r2, r3
 801170a:	3208      	adds	r2, #8
 801170c:	602a      	str	r2, [r5, #0]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	64a2      	str	r2, [r4, #72]	; 0x48
 8011714:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011716:	2201      	movs	r2, #1
 8011718:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801171a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801171c:	930b      	str	r3, [sp, #44]	; 0x2c
 801171e:	006b      	lsls	r3, r5, #1
 8011720:	085b      	lsrs	r3, r3, #1
 8011722:	930f      	str	r3, [sp, #60]	; 0x3c
 8011724:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011726:	4ba7      	ldr	r3, [pc, #668]	; (80119c4 <_printf_float+0x2f4>)
 8011728:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801172a:	4252      	negs	r2, r2
 801172c:	f7f1 f888 	bl	8002840 <__aeabi_dcmpun>
 8011730:	2800      	cmp	r0, #0
 8011732:	d131      	bne.n	8011798 <_printf_float+0xc8>
 8011734:	2201      	movs	r2, #1
 8011736:	4ba3      	ldr	r3, [pc, #652]	; (80119c4 <_printf_float+0x2f4>)
 8011738:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801173a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801173c:	4252      	negs	r2, r2
 801173e:	f7ee fe95 	bl	800046c <__aeabi_dcmple>
 8011742:	2800      	cmp	r0, #0
 8011744:	d128      	bne.n	8011798 <_printf_float+0xc8>
 8011746:	2200      	movs	r2, #0
 8011748:	2300      	movs	r3, #0
 801174a:	0029      	movs	r1, r5
 801174c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801174e:	f7ee fe83 	bl	8000458 <__aeabi_dcmplt>
 8011752:	2800      	cmp	r0, #0
 8011754:	d003      	beq.n	801175e <_printf_float+0x8e>
 8011756:	0023      	movs	r3, r4
 8011758:	222d      	movs	r2, #45	; 0x2d
 801175a:	3343      	adds	r3, #67	; 0x43
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011760:	4d99      	ldr	r5, [pc, #612]	; (80119c8 <_printf_float+0x2f8>)
 8011762:	2b47      	cmp	r3, #71	; 0x47
 8011764:	d900      	bls.n	8011768 <_printf_float+0x98>
 8011766:	4d99      	ldr	r5, [pc, #612]	; (80119cc <_printf_float+0x2fc>)
 8011768:	2303      	movs	r3, #3
 801176a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801176c:	6123      	str	r3, [r4, #16]
 801176e:	3301      	adds	r3, #1
 8011770:	439a      	bics	r2, r3
 8011772:	2300      	movs	r3, #0
 8011774:	6022      	str	r2, [r4, #0]
 8011776:	930b      	str	r3, [sp, #44]	; 0x2c
 8011778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801177a:	0021      	movs	r1, r4
 801177c:	0038      	movs	r0, r7
 801177e:	9600      	str	r6, [sp, #0]
 8011780:	aa13      	add	r2, sp, #76	; 0x4c
 8011782:	f000 f9e7 	bl	8011b54 <_printf_common>
 8011786:	1c43      	adds	r3, r0, #1
 8011788:	d000      	beq.n	801178c <_printf_float+0xbc>
 801178a:	e0a2      	b.n	80118d2 <_printf_float+0x202>
 801178c:	2001      	movs	r0, #1
 801178e:	4240      	negs	r0, r0
 8011790:	b015      	add	sp, #84	; 0x54
 8011792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011794:	3307      	adds	r3, #7
 8011796:	e7b6      	b.n	8011706 <_printf_float+0x36>
 8011798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801179a:	002b      	movs	r3, r5
 801179c:	0010      	movs	r0, r2
 801179e:	0029      	movs	r1, r5
 80117a0:	f7f1 f84e 	bl	8002840 <__aeabi_dcmpun>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d00b      	beq.n	80117c0 <_printf_float+0xf0>
 80117a8:	2d00      	cmp	r5, #0
 80117aa:	da03      	bge.n	80117b4 <_printf_float+0xe4>
 80117ac:	0023      	movs	r3, r4
 80117ae:	222d      	movs	r2, #45	; 0x2d
 80117b0:	3343      	adds	r3, #67	; 0x43
 80117b2:	701a      	strb	r2, [r3, #0]
 80117b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117b6:	4d86      	ldr	r5, [pc, #536]	; (80119d0 <_printf_float+0x300>)
 80117b8:	2b47      	cmp	r3, #71	; 0x47
 80117ba:	d9d5      	bls.n	8011768 <_printf_float+0x98>
 80117bc:	4d85      	ldr	r5, [pc, #532]	; (80119d4 <_printf_float+0x304>)
 80117be:	e7d3      	b.n	8011768 <_printf_float+0x98>
 80117c0:	2220      	movs	r2, #32
 80117c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117c4:	6863      	ldr	r3, [r4, #4]
 80117c6:	4391      	bics	r1, r2
 80117c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80117ca:	1c5a      	adds	r2, r3, #1
 80117cc:	d149      	bne.n	8011862 <_printf_float+0x192>
 80117ce:	3307      	adds	r3, #7
 80117d0:	6063      	str	r3, [r4, #4]
 80117d2:	2380      	movs	r3, #128	; 0x80
 80117d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	4313      	orrs	r3, r2
 80117da:	2200      	movs	r2, #0
 80117dc:	9206      	str	r2, [sp, #24]
 80117de:	aa12      	add	r2, sp, #72	; 0x48
 80117e0:	9205      	str	r2, [sp, #20]
 80117e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117e4:	a908      	add	r1, sp, #32
 80117e6:	9204      	str	r2, [sp, #16]
 80117e8:	aa11      	add	r2, sp, #68	; 0x44
 80117ea:	9203      	str	r2, [sp, #12]
 80117ec:	2223      	movs	r2, #35	; 0x23
 80117ee:	6023      	str	r3, [r4, #0]
 80117f0:	9301      	str	r3, [sp, #4]
 80117f2:	6863      	ldr	r3, [r4, #4]
 80117f4:	1852      	adds	r2, r2, r1
 80117f6:	9202      	str	r2, [sp, #8]
 80117f8:	9300      	str	r3, [sp, #0]
 80117fa:	0038      	movs	r0, r7
 80117fc:	002b      	movs	r3, r5
 80117fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011800:	f7ff febc 	bl	801157c <__cvt>
 8011804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011806:	0005      	movs	r5, r0
 8011808:	9911      	ldr	r1, [sp, #68]	; 0x44
 801180a:	2b47      	cmp	r3, #71	; 0x47
 801180c:	d108      	bne.n	8011820 <_printf_float+0x150>
 801180e:	1ccb      	adds	r3, r1, #3
 8011810:	db02      	blt.n	8011818 <_printf_float+0x148>
 8011812:	6863      	ldr	r3, [r4, #4]
 8011814:	4299      	cmp	r1, r3
 8011816:	dd48      	ble.n	80118aa <_printf_float+0x1da>
 8011818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801181a:	3b02      	subs	r3, #2
 801181c:	b2db      	uxtb	r3, r3
 801181e:	930a      	str	r3, [sp, #40]	; 0x28
 8011820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011822:	2b65      	cmp	r3, #101	; 0x65
 8011824:	d824      	bhi.n	8011870 <_printf_float+0x1a0>
 8011826:	0020      	movs	r0, r4
 8011828:	001a      	movs	r2, r3
 801182a:	3901      	subs	r1, #1
 801182c:	3050      	adds	r0, #80	; 0x50
 801182e:	9111      	str	r1, [sp, #68]	; 0x44
 8011830:	f7ff ff07 	bl	8011642 <__exponent>
 8011834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011836:	900b      	str	r0, [sp, #44]	; 0x2c
 8011838:	1813      	adds	r3, r2, r0
 801183a:	6123      	str	r3, [r4, #16]
 801183c:	2a01      	cmp	r2, #1
 801183e:	dc02      	bgt.n	8011846 <_printf_float+0x176>
 8011840:	6822      	ldr	r2, [r4, #0]
 8011842:	07d2      	lsls	r2, r2, #31
 8011844:	d501      	bpl.n	801184a <_printf_float+0x17a>
 8011846:	3301      	adds	r3, #1
 8011848:	6123      	str	r3, [r4, #16]
 801184a:	2323      	movs	r3, #35	; 0x23
 801184c:	aa08      	add	r2, sp, #32
 801184e:	189b      	adds	r3, r3, r2
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d100      	bne.n	8011858 <_printf_float+0x188>
 8011856:	e78f      	b.n	8011778 <_printf_float+0xa8>
 8011858:	0023      	movs	r3, r4
 801185a:	222d      	movs	r2, #45	; 0x2d
 801185c:	3343      	adds	r3, #67	; 0x43
 801185e:	701a      	strb	r2, [r3, #0]
 8011860:	e78a      	b.n	8011778 <_printf_float+0xa8>
 8011862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011864:	2a47      	cmp	r2, #71	; 0x47
 8011866:	d1b4      	bne.n	80117d2 <_printf_float+0x102>
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1b2      	bne.n	80117d2 <_printf_float+0x102>
 801186c:	3301      	adds	r3, #1
 801186e:	e7af      	b.n	80117d0 <_printf_float+0x100>
 8011870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011872:	2b66      	cmp	r3, #102	; 0x66
 8011874:	d11b      	bne.n	80118ae <_printf_float+0x1de>
 8011876:	6863      	ldr	r3, [r4, #4]
 8011878:	2900      	cmp	r1, #0
 801187a:	dd0d      	ble.n	8011898 <_printf_float+0x1c8>
 801187c:	6121      	str	r1, [r4, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d102      	bne.n	8011888 <_printf_float+0x1b8>
 8011882:	6822      	ldr	r2, [r4, #0]
 8011884:	07d2      	lsls	r2, r2, #31
 8011886:	d502      	bpl.n	801188e <_printf_float+0x1be>
 8011888:	3301      	adds	r3, #1
 801188a:	1859      	adds	r1, r3, r1
 801188c:	6121      	str	r1, [r4, #16]
 801188e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011890:	65a3      	str	r3, [r4, #88]	; 0x58
 8011892:	2300      	movs	r3, #0
 8011894:	930b      	str	r3, [sp, #44]	; 0x2c
 8011896:	e7d8      	b.n	801184a <_printf_float+0x17a>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d103      	bne.n	80118a4 <_printf_float+0x1d4>
 801189c:	2201      	movs	r2, #1
 801189e:	6821      	ldr	r1, [r4, #0]
 80118a0:	4211      	tst	r1, r2
 80118a2:	d000      	beq.n	80118a6 <_printf_float+0x1d6>
 80118a4:	1c9a      	adds	r2, r3, #2
 80118a6:	6122      	str	r2, [r4, #16]
 80118a8:	e7f1      	b.n	801188e <_printf_float+0x1be>
 80118aa:	2367      	movs	r3, #103	; 0x67
 80118ac:	930a      	str	r3, [sp, #40]	; 0x28
 80118ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80118b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118b2:	4293      	cmp	r3, r2
 80118b4:	db06      	blt.n	80118c4 <_printf_float+0x1f4>
 80118b6:	6822      	ldr	r2, [r4, #0]
 80118b8:	6123      	str	r3, [r4, #16]
 80118ba:	07d2      	lsls	r2, r2, #31
 80118bc:	d5e7      	bpl.n	801188e <_printf_float+0x1be>
 80118be:	3301      	adds	r3, #1
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	e7e4      	b.n	801188e <_printf_float+0x1be>
 80118c4:	2101      	movs	r1, #1
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	dc01      	bgt.n	80118ce <_printf_float+0x1fe>
 80118ca:	1849      	adds	r1, r1, r1
 80118cc:	1ac9      	subs	r1, r1, r3
 80118ce:	1852      	adds	r2, r2, r1
 80118d0:	e7e9      	b.n	80118a6 <_printf_float+0x1d6>
 80118d2:	6822      	ldr	r2, [r4, #0]
 80118d4:	0553      	lsls	r3, r2, #21
 80118d6:	d407      	bmi.n	80118e8 <_printf_float+0x218>
 80118d8:	6923      	ldr	r3, [r4, #16]
 80118da:	002a      	movs	r2, r5
 80118dc:	0038      	movs	r0, r7
 80118de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118e0:	47b0      	blx	r6
 80118e2:	1c43      	adds	r3, r0, #1
 80118e4:	d128      	bne.n	8011938 <_printf_float+0x268>
 80118e6:	e751      	b.n	801178c <_printf_float+0xbc>
 80118e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ea:	2b65      	cmp	r3, #101	; 0x65
 80118ec:	d800      	bhi.n	80118f0 <_printf_float+0x220>
 80118ee:	e0e1      	b.n	8011ab4 <_printf_float+0x3e4>
 80118f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80118f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80118f4:	2200      	movs	r2, #0
 80118f6:	2300      	movs	r3, #0
 80118f8:	f7ee fda8 	bl	800044c <__aeabi_dcmpeq>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d031      	beq.n	8011964 <_printf_float+0x294>
 8011900:	2301      	movs	r3, #1
 8011902:	0038      	movs	r0, r7
 8011904:	4a34      	ldr	r2, [pc, #208]	; (80119d8 <_printf_float+0x308>)
 8011906:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011908:	47b0      	blx	r6
 801190a:	1c43      	adds	r3, r0, #1
 801190c:	d100      	bne.n	8011910 <_printf_float+0x240>
 801190e:	e73d      	b.n	801178c <_printf_float+0xbc>
 8011910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011912:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011914:	4293      	cmp	r3, r2
 8011916:	db02      	blt.n	801191e <_printf_float+0x24e>
 8011918:	6823      	ldr	r3, [r4, #0]
 801191a:	07db      	lsls	r3, r3, #31
 801191c:	d50c      	bpl.n	8011938 <_printf_float+0x268>
 801191e:	0038      	movs	r0, r7
 8011920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011926:	47b0      	blx	r6
 8011928:	2500      	movs	r5, #0
 801192a:	1c43      	adds	r3, r0, #1
 801192c:	d100      	bne.n	8011930 <_printf_float+0x260>
 801192e:	e72d      	b.n	801178c <_printf_float+0xbc>
 8011930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011932:	3b01      	subs	r3, #1
 8011934:	42ab      	cmp	r3, r5
 8011936:	dc0a      	bgt.n	801194e <_printf_float+0x27e>
 8011938:	6823      	ldr	r3, [r4, #0]
 801193a:	079b      	lsls	r3, r3, #30
 801193c:	d500      	bpl.n	8011940 <_printf_float+0x270>
 801193e:	e106      	b.n	8011b4e <_printf_float+0x47e>
 8011940:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011942:	68e0      	ldr	r0, [r4, #12]
 8011944:	4298      	cmp	r0, r3
 8011946:	db00      	blt.n	801194a <_printf_float+0x27a>
 8011948:	e722      	b.n	8011790 <_printf_float+0xc0>
 801194a:	0018      	movs	r0, r3
 801194c:	e720      	b.n	8011790 <_printf_float+0xc0>
 801194e:	0022      	movs	r2, r4
 8011950:	2301      	movs	r3, #1
 8011952:	0038      	movs	r0, r7
 8011954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011956:	321a      	adds	r2, #26
 8011958:	47b0      	blx	r6
 801195a:	1c43      	adds	r3, r0, #1
 801195c:	d100      	bne.n	8011960 <_printf_float+0x290>
 801195e:	e715      	b.n	801178c <_printf_float+0xbc>
 8011960:	3501      	adds	r5, #1
 8011962:	e7e5      	b.n	8011930 <_printf_float+0x260>
 8011964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011966:	2b00      	cmp	r3, #0
 8011968:	dc38      	bgt.n	80119dc <_printf_float+0x30c>
 801196a:	2301      	movs	r3, #1
 801196c:	0038      	movs	r0, r7
 801196e:	4a1a      	ldr	r2, [pc, #104]	; (80119d8 <_printf_float+0x308>)
 8011970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011972:	47b0      	blx	r6
 8011974:	1c43      	adds	r3, r0, #1
 8011976:	d100      	bne.n	801197a <_printf_float+0x2aa>
 8011978:	e708      	b.n	801178c <_printf_float+0xbc>
 801197a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801197c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801197e:	4313      	orrs	r3, r2
 8011980:	d102      	bne.n	8011988 <_printf_float+0x2b8>
 8011982:	6823      	ldr	r3, [r4, #0]
 8011984:	07db      	lsls	r3, r3, #31
 8011986:	d5d7      	bpl.n	8011938 <_printf_float+0x268>
 8011988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801198a:	0038      	movs	r0, r7
 801198c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801198e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011990:	47b0      	blx	r6
 8011992:	1c43      	adds	r3, r0, #1
 8011994:	d100      	bne.n	8011998 <_printf_float+0x2c8>
 8011996:	e6f9      	b.n	801178c <_printf_float+0xbc>
 8011998:	2300      	movs	r3, #0
 801199a:	930a      	str	r3, [sp, #40]	; 0x28
 801199c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801199e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119a0:	425b      	negs	r3, r3
 80119a2:	4293      	cmp	r3, r2
 80119a4:	dc01      	bgt.n	80119aa <_printf_float+0x2da>
 80119a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80119a8:	e797      	b.n	80118da <_printf_float+0x20a>
 80119aa:	0022      	movs	r2, r4
 80119ac:	2301      	movs	r3, #1
 80119ae:	0038      	movs	r0, r7
 80119b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119b2:	321a      	adds	r2, #26
 80119b4:	47b0      	blx	r6
 80119b6:	1c43      	adds	r3, r0, #1
 80119b8:	d100      	bne.n	80119bc <_printf_float+0x2ec>
 80119ba:	e6e7      	b.n	801178c <_printf_float+0xbc>
 80119bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119be:	3301      	adds	r3, #1
 80119c0:	e7eb      	b.n	801199a <_printf_float+0x2ca>
 80119c2:	46c0      	nop			; (mov r8, r8)
 80119c4:	7fefffff 	.word	0x7fefffff
 80119c8:	080160dc 	.word	0x080160dc
 80119cc:	080160e0 	.word	0x080160e0
 80119d0:	080160e4 	.word	0x080160e4
 80119d4:	080160e8 	.word	0x080160e8
 80119d8:	080160ec 	.word	0x080160ec
 80119dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80119de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119e0:	920a      	str	r2, [sp, #40]	; 0x28
 80119e2:	429a      	cmp	r2, r3
 80119e4:	dd00      	ble.n	80119e8 <_printf_float+0x318>
 80119e6:	930a      	str	r3, [sp, #40]	; 0x28
 80119e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	dc3c      	bgt.n	8011a68 <_printf_float+0x398>
 80119ee:	2300      	movs	r3, #0
 80119f0:	930d      	str	r3, [sp, #52]	; 0x34
 80119f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119f4:	43db      	mvns	r3, r3
 80119f6:	17db      	asrs	r3, r3, #31
 80119f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80119fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a02:	4013      	ands	r3, r2
 8011a04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	dc34      	bgt.n	8011a78 <_printf_float+0x3a8>
 8011a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a12:	4293      	cmp	r3, r2
 8011a14:	db3d      	blt.n	8011a92 <_printf_float+0x3c2>
 8011a16:	6823      	ldr	r3, [r4, #0]
 8011a18:	07db      	lsls	r3, r3, #31
 8011a1a:	d43a      	bmi.n	8011a92 <_printf_float+0x3c2>
 8011a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a22:	1ad3      	subs	r3, r2, r3
 8011a24:	1a52      	subs	r2, r2, r1
 8011a26:	920a      	str	r2, [sp, #40]	; 0x28
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	dd00      	ble.n	8011a2e <_printf_float+0x35e>
 8011a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8011a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	dc36      	bgt.n	8011aa2 <_printf_float+0x3d2>
 8011a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a36:	2500      	movs	r5, #0
 8011a38:	43db      	mvns	r3, r3
 8011a3a:	17db      	asrs	r3, r3, #31
 8011a3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a44:	1a9b      	subs	r3, r3, r2
 8011a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a48:	400a      	ands	r2, r1
 8011a4a:	1a9b      	subs	r3, r3, r2
 8011a4c:	42ab      	cmp	r3, r5
 8011a4e:	dc00      	bgt.n	8011a52 <_printf_float+0x382>
 8011a50:	e772      	b.n	8011938 <_printf_float+0x268>
 8011a52:	0022      	movs	r2, r4
 8011a54:	2301      	movs	r3, #1
 8011a56:	0038      	movs	r0, r7
 8011a58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a5a:	321a      	adds	r2, #26
 8011a5c:	47b0      	blx	r6
 8011a5e:	1c43      	adds	r3, r0, #1
 8011a60:	d100      	bne.n	8011a64 <_printf_float+0x394>
 8011a62:	e693      	b.n	801178c <_printf_float+0xbc>
 8011a64:	3501      	adds	r5, #1
 8011a66:	e7ea      	b.n	8011a3e <_printf_float+0x36e>
 8011a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a6a:	002a      	movs	r2, r5
 8011a6c:	0038      	movs	r0, r7
 8011a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a70:	47b0      	blx	r6
 8011a72:	1c43      	adds	r3, r0, #1
 8011a74:	d1bb      	bne.n	80119ee <_printf_float+0x31e>
 8011a76:	e689      	b.n	801178c <_printf_float+0xbc>
 8011a78:	0022      	movs	r2, r4
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	0038      	movs	r0, r7
 8011a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a80:	321a      	adds	r2, #26
 8011a82:	47b0      	blx	r6
 8011a84:	1c43      	adds	r3, r0, #1
 8011a86:	d100      	bne.n	8011a8a <_printf_float+0x3ba>
 8011a88:	e680      	b.n	801178c <_printf_float+0xbc>
 8011a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8011a90:	e7b3      	b.n	80119fa <_printf_float+0x32a>
 8011a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a94:	0038      	movs	r0, r7
 8011a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a9a:	47b0      	blx	r6
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d1bd      	bne.n	8011a1c <_printf_float+0x34c>
 8011aa0:	e674      	b.n	801178c <_printf_float+0xbc>
 8011aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011aa4:	0038      	movs	r0, r7
 8011aa6:	18ea      	adds	r2, r5, r3
 8011aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aac:	47b0      	blx	r6
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	d1c0      	bne.n	8011a34 <_printf_float+0x364>
 8011ab2:	e66b      	b.n	801178c <_printf_float+0xbc>
 8011ab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	dc02      	bgt.n	8011ac0 <_printf_float+0x3f0>
 8011aba:	2301      	movs	r3, #1
 8011abc:	421a      	tst	r2, r3
 8011abe:	d034      	beq.n	8011b2a <_printf_float+0x45a>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	002a      	movs	r2, r5
 8011ac4:	0038      	movs	r0, r7
 8011ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ac8:	47b0      	blx	r6
 8011aca:	1c43      	adds	r3, r0, #1
 8011acc:	d100      	bne.n	8011ad0 <_printf_float+0x400>
 8011ace:	e65d      	b.n	801178c <_printf_float+0xbc>
 8011ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ad2:	0038      	movs	r0, r7
 8011ad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ad8:	47b0      	blx	r6
 8011ada:	1c43      	adds	r3, r0, #1
 8011adc:	d100      	bne.n	8011ae0 <_printf_float+0x410>
 8011ade:	e655      	b.n	801178c <_printf_float+0xbc>
 8011ae0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8011ae2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	f7ee fcb0 	bl	800044c <__aeabi_dcmpeq>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	d11a      	bne.n	8011b26 <_printf_float+0x456>
 8011af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011af2:	1c6a      	adds	r2, r5, #1
 8011af4:	3b01      	subs	r3, #1
 8011af6:	0038      	movs	r0, r7
 8011af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011afa:	47b0      	blx	r6
 8011afc:	1c43      	adds	r3, r0, #1
 8011afe:	d10e      	bne.n	8011b1e <_printf_float+0x44e>
 8011b00:	e644      	b.n	801178c <_printf_float+0xbc>
 8011b02:	0022      	movs	r2, r4
 8011b04:	2301      	movs	r3, #1
 8011b06:	0038      	movs	r0, r7
 8011b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b0a:	321a      	adds	r2, #26
 8011b0c:	47b0      	blx	r6
 8011b0e:	1c43      	adds	r3, r0, #1
 8011b10:	d100      	bne.n	8011b14 <_printf_float+0x444>
 8011b12:	e63b      	b.n	801178c <_printf_float+0xbc>
 8011b14:	3501      	adds	r5, #1
 8011b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	42ab      	cmp	r3, r5
 8011b1c:	dcf1      	bgt.n	8011b02 <_printf_float+0x432>
 8011b1e:	0022      	movs	r2, r4
 8011b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b22:	3250      	adds	r2, #80	; 0x50
 8011b24:	e6da      	b.n	80118dc <_printf_float+0x20c>
 8011b26:	2500      	movs	r5, #0
 8011b28:	e7f5      	b.n	8011b16 <_printf_float+0x446>
 8011b2a:	002a      	movs	r2, r5
 8011b2c:	e7e3      	b.n	8011af6 <_printf_float+0x426>
 8011b2e:	0022      	movs	r2, r4
 8011b30:	2301      	movs	r3, #1
 8011b32:	0038      	movs	r0, r7
 8011b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b36:	3219      	adds	r2, #25
 8011b38:	47b0      	blx	r6
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	d100      	bne.n	8011b40 <_printf_float+0x470>
 8011b3e:	e625      	b.n	801178c <_printf_float+0xbc>
 8011b40:	3501      	adds	r5, #1
 8011b42:	68e3      	ldr	r3, [r4, #12]
 8011b44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dcf0      	bgt.n	8011b2e <_printf_float+0x45e>
 8011b4c:	e6f8      	b.n	8011940 <_printf_float+0x270>
 8011b4e:	2500      	movs	r5, #0
 8011b50:	e7f7      	b.n	8011b42 <_printf_float+0x472>
 8011b52:	46c0      	nop			; (mov r8, r8)

08011b54 <_printf_common>:
 8011b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b56:	0015      	movs	r5, r2
 8011b58:	9301      	str	r3, [sp, #4]
 8011b5a:	688a      	ldr	r2, [r1, #8]
 8011b5c:	690b      	ldr	r3, [r1, #16]
 8011b5e:	000c      	movs	r4, r1
 8011b60:	9000      	str	r0, [sp, #0]
 8011b62:	4293      	cmp	r3, r2
 8011b64:	da00      	bge.n	8011b68 <_printf_common+0x14>
 8011b66:	0013      	movs	r3, r2
 8011b68:	0022      	movs	r2, r4
 8011b6a:	602b      	str	r3, [r5, #0]
 8011b6c:	3243      	adds	r2, #67	; 0x43
 8011b6e:	7812      	ldrb	r2, [r2, #0]
 8011b70:	2a00      	cmp	r2, #0
 8011b72:	d001      	beq.n	8011b78 <_printf_common+0x24>
 8011b74:	3301      	adds	r3, #1
 8011b76:	602b      	str	r3, [r5, #0]
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	069b      	lsls	r3, r3, #26
 8011b7c:	d502      	bpl.n	8011b84 <_printf_common+0x30>
 8011b7e:	682b      	ldr	r3, [r5, #0]
 8011b80:	3302      	adds	r3, #2
 8011b82:	602b      	str	r3, [r5, #0]
 8011b84:	6822      	ldr	r2, [r4, #0]
 8011b86:	2306      	movs	r3, #6
 8011b88:	0017      	movs	r7, r2
 8011b8a:	401f      	ands	r7, r3
 8011b8c:	421a      	tst	r2, r3
 8011b8e:	d027      	beq.n	8011be0 <_printf_common+0x8c>
 8011b90:	0023      	movs	r3, r4
 8011b92:	3343      	adds	r3, #67	; 0x43
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	1e5a      	subs	r2, r3, #1
 8011b98:	4193      	sbcs	r3, r2
 8011b9a:	6822      	ldr	r2, [r4, #0]
 8011b9c:	0692      	lsls	r2, r2, #26
 8011b9e:	d430      	bmi.n	8011c02 <_printf_common+0xae>
 8011ba0:	0022      	movs	r2, r4
 8011ba2:	9901      	ldr	r1, [sp, #4]
 8011ba4:	9800      	ldr	r0, [sp, #0]
 8011ba6:	9e08      	ldr	r6, [sp, #32]
 8011ba8:	3243      	adds	r2, #67	; 0x43
 8011baa:	47b0      	blx	r6
 8011bac:	1c43      	adds	r3, r0, #1
 8011bae:	d025      	beq.n	8011bfc <_printf_common+0xa8>
 8011bb0:	2306      	movs	r3, #6
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	682a      	ldr	r2, [r5, #0]
 8011bb6:	68e1      	ldr	r1, [r4, #12]
 8011bb8:	2500      	movs	r5, #0
 8011bba:	4003      	ands	r3, r0
 8011bbc:	2b04      	cmp	r3, #4
 8011bbe:	d103      	bne.n	8011bc8 <_printf_common+0x74>
 8011bc0:	1a8d      	subs	r5, r1, r2
 8011bc2:	43eb      	mvns	r3, r5
 8011bc4:	17db      	asrs	r3, r3, #31
 8011bc6:	401d      	ands	r5, r3
 8011bc8:	68a3      	ldr	r3, [r4, #8]
 8011bca:	6922      	ldr	r2, [r4, #16]
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	dd01      	ble.n	8011bd4 <_printf_common+0x80>
 8011bd0:	1a9b      	subs	r3, r3, r2
 8011bd2:	18ed      	adds	r5, r5, r3
 8011bd4:	2700      	movs	r7, #0
 8011bd6:	42bd      	cmp	r5, r7
 8011bd8:	d120      	bne.n	8011c1c <_printf_common+0xc8>
 8011bda:	2000      	movs	r0, #0
 8011bdc:	e010      	b.n	8011c00 <_printf_common+0xac>
 8011bde:	3701      	adds	r7, #1
 8011be0:	68e3      	ldr	r3, [r4, #12]
 8011be2:	682a      	ldr	r2, [r5, #0]
 8011be4:	1a9b      	subs	r3, r3, r2
 8011be6:	42bb      	cmp	r3, r7
 8011be8:	ddd2      	ble.n	8011b90 <_printf_common+0x3c>
 8011bea:	0022      	movs	r2, r4
 8011bec:	2301      	movs	r3, #1
 8011bee:	9901      	ldr	r1, [sp, #4]
 8011bf0:	9800      	ldr	r0, [sp, #0]
 8011bf2:	9e08      	ldr	r6, [sp, #32]
 8011bf4:	3219      	adds	r2, #25
 8011bf6:	47b0      	blx	r6
 8011bf8:	1c43      	adds	r3, r0, #1
 8011bfa:	d1f0      	bne.n	8011bde <_printf_common+0x8a>
 8011bfc:	2001      	movs	r0, #1
 8011bfe:	4240      	negs	r0, r0
 8011c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011c02:	2030      	movs	r0, #48	; 0x30
 8011c04:	18e1      	adds	r1, r4, r3
 8011c06:	3143      	adds	r1, #67	; 0x43
 8011c08:	7008      	strb	r0, [r1, #0]
 8011c0a:	0021      	movs	r1, r4
 8011c0c:	1c5a      	adds	r2, r3, #1
 8011c0e:	3145      	adds	r1, #69	; 0x45
 8011c10:	7809      	ldrb	r1, [r1, #0]
 8011c12:	18a2      	adds	r2, r4, r2
 8011c14:	3243      	adds	r2, #67	; 0x43
 8011c16:	3302      	adds	r3, #2
 8011c18:	7011      	strb	r1, [r2, #0]
 8011c1a:	e7c1      	b.n	8011ba0 <_printf_common+0x4c>
 8011c1c:	0022      	movs	r2, r4
 8011c1e:	2301      	movs	r3, #1
 8011c20:	9901      	ldr	r1, [sp, #4]
 8011c22:	9800      	ldr	r0, [sp, #0]
 8011c24:	9e08      	ldr	r6, [sp, #32]
 8011c26:	321a      	adds	r2, #26
 8011c28:	47b0      	blx	r6
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	d0e6      	beq.n	8011bfc <_printf_common+0xa8>
 8011c2e:	3701      	adds	r7, #1
 8011c30:	e7d1      	b.n	8011bd6 <_printf_common+0x82>
	...

08011c34 <_printf_i>:
 8011c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c36:	b08b      	sub	sp, #44	; 0x2c
 8011c38:	9206      	str	r2, [sp, #24]
 8011c3a:	000a      	movs	r2, r1
 8011c3c:	3243      	adds	r2, #67	; 0x43
 8011c3e:	9307      	str	r3, [sp, #28]
 8011c40:	9005      	str	r0, [sp, #20]
 8011c42:	9204      	str	r2, [sp, #16]
 8011c44:	7e0a      	ldrb	r2, [r1, #24]
 8011c46:	000c      	movs	r4, r1
 8011c48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011c4a:	2a78      	cmp	r2, #120	; 0x78
 8011c4c:	d807      	bhi.n	8011c5e <_printf_i+0x2a>
 8011c4e:	2a62      	cmp	r2, #98	; 0x62
 8011c50:	d809      	bhi.n	8011c66 <_printf_i+0x32>
 8011c52:	2a00      	cmp	r2, #0
 8011c54:	d100      	bne.n	8011c58 <_printf_i+0x24>
 8011c56:	e0c1      	b.n	8011ddc <_printf_i+0x1a8>
 8011c58:	2a58      	cmp	r2, #88	; 0x58
 8011c5a:	d100      	bne.n	8011c5e <_printf_i+0x2a>
 8011c5c:	e08c      	b.n	8011d78 <_printf_i+0x144>
 8011c5e:	0026      	movs	r6, r4
 8011c60:	3642      	adds	r6, #66	; 0x42
 8011c62:	7032      	strb	r2, [r6, #0]
 8011c64:	e022      	b.n	8011cac <_printf_i+0x78>
 8011c66:	0010      	movs	r0, r2
 8011c68:	3863      	subs	r0, #99	; 0x63
 8011c6a:	2815      	cmp	r0, #21
 8011c6c:	d8f7      	bhi.n	8011c5e <_printf_i+0x2a>
 8011c6e:	f7ee fa5d 	bl	800012c <__gnu_thumb1_case_shi>
 8011c72:	0016      	.short	0x0016
 8011c74:	fff6001f 	.word	0xfff6001f
 8011c78:	fff6fff6 	.word	0xfff6fff6
 8011c7c:	001ffff6 	.word	0x001ffff6
 8011c80:	fff6fff6 	.word	0xfff6fff6
 8011c84:	fff6fff6 	.word	0xfff6fff6
 8011c88:	003600a8 	.word	0x003600a8
 8011c8c:	fff6009a 	.word	0xfff6009a
 8011c90:	00b9fff6 	.word	0x00b9fff6
 8011c94:	0036fff6 	.word	0x0036fff6
 8011c98:	fff6fff6 	.word	0xfff6fff6
 8011c9c:	009e      	.short	0x009e
 8011c9e:	0026      	movs	r6, r4
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	3642      	adds	r6, #66	; 0x42
 8011ca4:	1d11      	adds	r1, r2, #4
 8011ca6:	6019      	str	r1, [r3, #0]
 8011ca8:	6813      	ldr	r3, [r2, #0]
 8011caa:	7033      	strb	r3, [r6, #0]
 8011cac:	2301      	movs	r3, #1
 8011cae:	e0a7      	b.n	8011e00 <_printf_i+0x1cc>
 8011cb0:	6808      	ldr	r0, [r1, #0]
 8011cb2:	6819      	ldr	r1, [r3, #0]
 8011cb4:	1d0a      	adds	r2, r1, #4
 8011cb6:	0605      	lsls	r5, r0, #24
 8011cb8:	d50b      	bpl.n	8011cd2 <_printf_i+0x9e>
 8011cba:	680d      	ldr	r5, [r1, #0]
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	2d00      	cmp	r5, #0
 8011cc0:	da03      	bge.n	8011cca <_printf_i+0x96>
 8011cc2:	232d      	movs	r3, #45	; 0x2d
 8011cc4:	9a04      	ldr	r2, [sp, #16]
 8011cc6:	426d      	negs	r5, r5
 8011cc8:	7013      	strb	r3, [r2, #0]
 8011cca:	4b61      	ldr	r3, [pc, #388]	; (8011e50 <_printf_i+0x21c>)
 8011ccc:	270a      	movs	r7, #10
 8011cce:	9303      	str	r3, [sp, #12]
 8011cd0:	e01b      	b.n	8011d0a <_printf_i+0xd6>
 8011cd2:	680d      	ldr	r5, [r1, #0]
 8011cd4:	601a      	str	r2, [r3, #0]
 8011cd6:	0641      	lsls	r1, r0, #25
 8011cd8:	d5f1      	bpl.n	8011cbe <_printf_i+0x8a>
 8011cda:	b22d      	sxth	r5, r5
 8011cdc:	e7ef      	b.n	8011cbe <_printf_i+0x8a>
 8011cde:	680d      	ldr	r5, [r1, #0]
 8011ce0:	6819      	ldr	r1, [r3, #0]
 8011ce2:	1d08      	adds	r0, r1, #4
 8011ce4:	6018      	str	r0, [r3, #0]
 8011ce6:	062e      	lsls	r6, r5, #24
 8011ce8:	d501      	bpl.n	8011cee <_printf_i+0xba>
 8011cea:	680d      	ldr	r5, [r1, #0]
 8011cec:	e003      	b.n	8011cf6 <_printf_i+0xc2>
 8011cee:	066d      	lsls	r5, r5, #25
 8011cf0:	d5fb      	bpl.n	8011cea <_printf_i+0xb6>
 8011cf2:	680d      	ldr	r5, [r1, #0]
 8011cf4:	b2ad      	uxth	r5, r5
 8011cf6:	4b56      	ldr	r3, [pc, #344]	; (8011e50 <_printf_i+0x21c>)
 8011cf8:	2708      	movs	r7, #8
 8011cfa:	9303      	str	r3, [sp, #12]
 8011cfc:	2a6f      	cmp	r2, #111	; 0x6f
 8011cfe:	d000      	beq.n	8011d02 <_printf_i+0xce>
 8011d00:	3702      	adds	r7, #2
 8011d02:	0023      	movs	r3, r4
 8011d04:	2200      	movs	r2, #0
 8011d06:	3343      	adds	r3, #67	; 0x43
 8011d08:	701a      	strb	r2, [r3, #0]
 8011d0a:	6863      	ldr	r3, [r4, #4]
 8011d0c:	60a3      	str	r3, [r4, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	db03      	blt.n	8011d1a <_printf_i+0xe6>
 8011d12:	2204      	movs	r2, #4
 8011d14:	6821      	ldr	r1, [r4, #0]
 8011d16:	4391      	bics	r1, r2
 8011d18:	6021      	str	r1, [r4, #0]
 8011d1a:	2d00      	cmp	r5, #0
 8011d1c:	d102      	bne.n	8011d24 <_printf_i+0xf0>
 8011d1e:	9e04      	ldr	r6, [sp, #16]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d00c      	beq.n	8011d3e <_printf_i+0x10a>
 8011d24:	9e04      	ldr	r6, [sp, #16]
 8011d26:	0028      	movs	r0, r5
 8011d28:	0039      	movs	r1, r7
 8011d2a:	f7ee fa8f 	bl	800024c <__aeabi_uidivmod>
 8011d2e:	9b03      	ldr	r3, [sp, #12]
 8011d30:	3e01      	subs	r6, #1
 8011d32:	5c5b      	ldrb	r3, [r3, r1]
 8011d34:	7033      	strb	r3, [r6, #0]
 8011d36:	002b      	movs	r3, r5
 8011d38:	0005      	movs	r5, r0
 8011d3a:	429f      	cmp	r7, r3
 8011d3c:	d9f3      	bls.n	8011d26 <_printf_i+0xf2>
 8011d3e:	2f08      	cmp	r7, #8
 8011d40:	d109      	bne.n	8011d56 <_printf_i+0x122>
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	07db      	lsls	r3, r3, #31
 8011d46:	d506      	bpl.n	8011d56 <_printf_i+0x122>
 8011d48:	6863      	ldr	r3, [r4, #4]
 8011d4a:	6922      	ldr	r2, [r4, #16]
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	dc02      	bgt.n	8011d56 <_printf_i+0x122>
 8011d50:	2330      	movs	r3, #48	; 0x30
 8011d52:	3e01      	subs	r6, #1
 8011d54:	7033      	strb	r3, [r6, #0]
 8011d56:	9b04      	ldr	r3, [sp, #16]
 8011d58:	1b9b      	subs	r3, r3, r6
 8011d5a:	6123      	str	r3, [r4, #16]
 8011d5c:	9b07      	ldr	r3, [sp, #28]
 8011d5e:	0021      	movs	r1, r4
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	9805      	ldr	r0, [sp, #20]
 8011d64:	9b06      	ldr	r3, [sp, #24]
 8011d66:	aa09      	add	r2, sp, #36	; 0x24
 8011d68:	f7ff fef4 	bl	8011b54 <_printf_common>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d14c      	bne.n	8011e0a <_printf_i+0x1d6>
 8011d70:	2001      	movs	r0, #1
 8011d72:	4240      	negs	r0, r0
 8011d74:	b00b      	add	sp, #44	; 0x2c
 8011d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d78:	3145      	adds	r1, #69	; 0x45
 8011d7a:	700a      	strb	r2, [r1, #0]
 8011d7c:	4a34      	ldr	r2, [pc, #208]	; (8011e50 <_printf_i+0x21c>)
 8011d7e:	9203      	str	r2, [sp, #12]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	6821      	ldr	r1, [r4, #0]
 8011d84:	ca20      	ldmia	r2!, {r5}
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	0608      	lsls	r0, r1, #24
 8011d8a:	d516      	bpl.n	8011dba <_printf_i+0x186>
 8011d8c:	07cb      	lsls	r3, r1, #31
 8011d8e:	d502      	bpl.n	8011d96 <_printf_i+0x162>
 8011d90:	2320      	movs	r3, #32
 8011d92:	4319      	orrs	r1, r3
 8011d94:	6021      	str	r1, [r4, #0]
 8011d96:	2710      	movs	r7, #16
 8011d98:	2d00      	cmp	r5, #0
 8011d9a:	d1b2      	bne.n	8011d02 <_printf_i+0xce>
 8011d9c:	2320      	movs	r3, #32
 8011d9e:	6822      	ldr	r2, [r4, #0]
 8011da0:	439a      	bics	r2, r3
 8011da2:	6022      	str	r2, [r4, #0]
 8011da4:	e7ad      	b.n	8011d02 <_printf_i+0xce>
 8011da6:	2220      	movs	r2, #32
 8011da8:	6809      	ldr	r1, [r1, #0]
 8011daa:	430a      	orrs	r2, r1
 8011dac:	6022      	str	r2, [r4, #0]
 8011dae:	0022      	movs	r2, r4
 8011db0:	2178      	movs	r1, #120	; 0x78
 8011db2:	3245      	adds	r2, #69	; 0x45
 8011db4:	7011      	strb	r1, [r2, #0]
 8011db6:	4a27      	ldr	r2, [pc, #156]	; (8011e54 <_printf_i+0x220>)
 8011db8:	e7e1      	b.n	8011d7e <_printf_i+0x14a>
 8011dba:	0648      	lsls	r0, r1, #25
 8011dbc:	d5e6      	bpl.n	8011d8c <_printf_i+0x158>
 8011dbe:	b2ad      	uxth	r5, r5
 8011dc0:	e7e4      	b.n	8011d8c <_printf_i+0x158>
 8011dc2:	681a      	ldr	r2, [r3, #0]
 8011dc4:	680d      	ldr	r5, [r1, #0]
 8011dc6:	1d10      	adds	r0, r2, #4
 8011dc8:	6949      	ldr	r1, [r1, #20]
 8011dca:	6018      	str	r0, [r3, #0]
 8011dcc:	6813      	ldr	r3, [r2, #0]
 8011dce:	062e      	lsls	r6, r5, #24
 8011dd0:	d501      	bpl.n	8011dd6 <_printf_i+0x1a2>
 8011dd2:	6019      	str	r1, [r3, #0]
 8011dd4:	e002      	b.n	8011ddc <_printf_i+0x1a8>
 8011dd6:	066d      	lsls	r5, r5, #25
 8011dd8:	d5fb      	bpl.n	8011dd2 <_printf_i+0x19e>
 8011dda:	8019      	strh	r1, [r3, #0]
 8011ddc:	2300      	movs	r3, #0
 8011dde:	9e04      	ldr	r6, [sp, #16]
 8011de0:	6123      	str	r3, [r4, #16]
 8011de2:	e7bb      	b.n	8011d5c <_printf_i+0x128>
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	1d11      	adds	r1, r2, #4
 8011de8:	6019      	str	r1, [r3, #0]
 8011dea:	6816      	ldr	r6, [r2, #0]
 8011dec:	2100      	movs	r1, #0
 8011dee:	0030      	movs	r0, r6
 8011df0:	6862      	ldr	r2, [r4, #4]
 8011df2:	f001 f8dd 	bl	8012fb0 <memchr>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d001      	beq.n	8011dfe <_printf_i+0x1ca>
 8011dfa:	1b80      	subs	r0, r0, r6
 8011dfc:	6060      	str	r0, [r4, #4]
 8011dfe:	6863      	ldr	r3, [r4, #4]
 8011e00:	6123      	str	r3, [r4, #16]
 8011e02:	2300      	movs	r3, #0
 8011e04:	9a04      	ldr	r2, [sp, #16]
 8011e06:	7013      	strb	r3, [r2, #0]
 8011e08:	e7a8      	b.n	8011d5c <_printf_i+0x128>
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	0032      	movs	r2, r6
 8011e0e:	9906      	ldr	r1, [sp, #24]
 8011e10:	9805      	ldr	r0, [sp, #20]
 8011e12:	9d07      	ldr	r5, [sp, #28]
 8011e14:	47a8      	blx	r5
 8011e16:	1c43      	adds	r3, r0, #1
 8011e18:	d0aa      	beq.n	8011d70 <_printf_i+0x13c>
 8011e1a:	6823      	ldr	r3, [r4, #0]
 8011e1c:	079b      	lsls	r3, r3, #30
 8011e1e:	d415      	bmi.n	8011e4c <_printf_i+0x218>
 8011e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e22:	68e0      	ldr	r0, [r4, #12]
 8011e24:	4298      	cmp	r0, r3
 8011e26:	daa5      	bge.n	8011d74 <_printf_i+0x140>
 8011e28:	0018      	movs	r0, r3
 8011e2a:	e7a3      	b.n	8011d74 <_printf_i+0x140>
 8011e2c:	0022      	movs	r2, r4
 8011e2e:	2301      	movs	r3, #1
 8011e30:	9906      	ldr	r1, [sp, #24]
 8011e32:	9805      	ldr	r0, [sp, #20]
 8011e34:	9e07      	ldr	r6, [sp, #28]
 8011e36:	3219      	adds	r2, #25
 8011e38:	47b0      	blx	r6
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	d098      	beq.n	8011d70 <_printf_i+0x13c>
 8011e3e:	3501      	adds	r5, #1
 8011e40:	68e3      	ldr	r3, [r4, #12]
 8011e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e44:	1a9b      	subs	r3, r3, r2
 8011e46:	42ab      	cmp	r3, r5
 8011e48:	dcf0      	bgt.n	8011e2c <_printf_i+0x1f8>
 8011e4a:	e7e9      	b.n	8011e20 <_printf_i+0x1ec>
 8011e4c:	2500      	movs	r5, #0
 8011e4e:	e7f7      	b.n	8011e40 <_printf_i+0x20c>
 8011e50:	080160ee 	.word	0x080160ee
 8011e54:	080160ff 	.word	0x080160ff

08011e58 <cleanup_glue>:
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	000d      	movs	r5, r1
 8011e5c:	6809      	ldr	r1, [r1, #0]
 8011e5e:	0004      	movs	r4, r0
 8011e60:	2900      	cmp	r1, #0
 8011e62:	d001      	beq.n	8011e68 <cleanup_glue+0x10>
 8011e64:	f7ff fff8 	bl	8011e58 <cleanup_glue>
 8011e68:	0029      	movs	r1, r5
 8011e6a:	0020      	movs	r0, r4
 8011e6c:	f001 fc84 	bl	8013778 <_free_r>
 8011e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08011e74 <_reclaim_reent>:
 8011e74:	4b31      	ldr	r3, [pc, #196]	; (8011f3c <_reclaim_reent+0xc8>)
 8011e76:	b570      	push	{r4, r5, r6, lr}
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	0004      	movs	r4, r0
 8011e7c:	4283      	cmp	r3, r0
 8011e7e:	d049      	beq.n	8011f14 <_reclaim_reent+0xa0>
 8011e80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d00a      	beq.n	8011e9c <_reclaim_reent+0x28>
 8011e86:	2500      	movs	r5, #0
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	42ab      	cmp	r3, r5
 8011e8c:	d147      	bne.n	8011f1e <_reclaim_reent+0xaa>
 8011e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011e90:	6819      	ldr	r1, [r3, #0]
 8011e92:	2900      	cmp	r1, #0
 8011e94:	d002      	beq.n	8011e9c <_reclaim_reent+0x28>
 8011e96:	0020      	movs	r0, r4
 8011e98:	f001 fc6e 	bl	8013778 <_free_r>
 8011e9c:	6961      	ldr	r1, [r4, #20]
 8011e9e:	2900      	cmp	r1, #0
 8011ea0:	d002      	beq.n	8011ea8 <_reclaim_reent+0x34>
 8011ea2:	0020      	movs	r0, r4
 8011ea4:	f001 fc68 	bl	8013778 <_free_r>
 8011ea8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011eaa:	2900      	cmp	r1, #0
 8011eac:	d002      	beq.n	8011eb4 <_reclaim_reent+0x40>
 8011eae:	0020      	movs	r0, r4
 8011eb0:	f001 fc62 	bl	8013778 <_free_r>
 8011eb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011eb6:	2900      	cmp	r1, #0
 8011eb8:	d002      	beq.n	8011ec0 <_reclaim_reent+0x4c>
 8011eba:	0020      	movs	r0, r4
 8011ebc:	f001 fc5c 	bl	8013778 <_free_r>
 8011ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ec2:	2900      	cmp	r1, #0
 8011ec4:	d002      	beq.n	8011ecc <_reclaim_reent+0x58>
 8011ec6:	0020      	movs	r0, r4
 8011ec8:	f001 fc56 	bl	8013778 <_free_r>
 8011ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	d002      	beq.n	8011ed8 <_reclaim_reent+0x64>
 8011ed2:	0020      	movs	r0, r4
 8011ed4:	f001 fc50 	bl	8013778 <_free_r>
 8011ed8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011eda:	2900      	cmp	r1, #0
 8011edc:	d002      	beq.n	8011ee4 <_reclaim_reent+0x70>
 8011ede:	0020      	movs	r0, r4
 8011ee0:	f001 fc4a 	bl	8013778 <_free_r>
 8011ee4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	d002      	beq.n	8011ef0 <_reclaim_reent+0x7c>
 8011eea:	0020      	movs	r0, r4
 8011eec:	f001 fc44 	bl	8013778 <_free_r>
 8011ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ef2:	2900      	cmp	r1, #0
 8011ef4:	d002      	beq.n	8011efc <_reclaim_reent+0x88>
 8011ef6:	0020      	movs	r0, r4
 8011ef8:	f001 fc3e 	bl	8013778 <_free_r>
 8011efc:	69a3      	ldr	r3, [r4, #24]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d008      	beq.n	8011f14 <_reclaim_reent+0xa0>
 8011f02:	0020      	movs	r0, r4
 8011f04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f06:	4798      	blx	r3
 8011f08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f0a:	2900      	cmp	r1, #0
 8011f0c:	d002      	beq.n	8011f14 <_reclaim_reent+0xa0>
 8011f0e:	0020      	movs	r0, r4
 8011f10:	f7ff ffa2 	bl	8011e58 <cleanup_glue>
 8011f14:	bd70      	pop	{r4, r5, r6, pc}
 8011f16:	5949      	ldr	r1, [r1, r5]
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	d108      	bne.n	8011f2e <_reclaim_reent+0xba>
 8011f1c:	3504      	adds	r5, #4
 8011f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f20:	68d9      	ldr	r1, [r3, #12]
 8011f22:	2d80      	cmp	r5, #128	; 0x80
 8011f24:	d1f7      	bne.n	8011f16 <_reclaim_reent+0xa2>
 8011f26:	0020      	movs	r0, r4
 8011f28:	f001 fc26 	bl	8013778 <_free_r>
 8011f2c:	e7af      	b.n	8011e8e <_reclaim_reent+0x1a>
 8011f2e:	680e      	ldr	r6, [r1, #0]
 8011f30:	0020      	movs	r0, r4
 8011f32:	f001 fc21 	bl	8013778 <_free_r>
 8011f36:	0031      	movs	r1, r6
 8011f38:	e7ee      	b.n	8011f18 <_reclaim_reent+0xa4>
 8011f3a:	46c0      	nop			; (mov r8, r8)
 8011f3c:	20000074 	.word	0x20000074

08011f40 <_sbrk_r>:
 8011f40:	2300      	movs	r3, #0
 8011f42:	b570      	push	{r4, r5, r6, lr}
 8011f44:	4d06      	ldr	r5, [pc, #24]	; (8011f60 <_sbrk_r+0x20>)
 8011f46:	0004      	movs	r4, r0
 8011f48:	0008      	movs	r0, r1
 8011f4a:	602b      	str	r3, [r5, #0]
 8011f4c:	f7f3 f880 	bl	8005050 <_sbrk>
 8011f50:	1c43      	adds	r3, r0, #1
 8011f52:	d103      	bne.n	8011f5c <_sbrk_r+0x1c>
 8011f54:	682b      	ldr	r3, [r5, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d000      	beq.n	8011f5c <_sbrk_r+0x1c>
 8011f5a:	6023      	str	r3, [r4, #0]
 8011f5c:	bd70      	pop	{r4, r5, r6, pc}
 8011f5e:	46c0      	nop			; (mov r8, r8)
 8011f60:	20002eec 	.word	0x20002eec

08011f64 <siprintf>:
 8011f64:	b40e      	push	{r1, r2, r3}
 8011f66:	b500      	push	{lr}
 8011f68:	490b      	ldr	r1, [pc, #44]	; (8011f98 <siprintf+0x34>)
 8011f6a:	b09c      	sub	sp, #112	; 0x70
 8011f6c:	ab1d      	add	r3, sp, #116	; 0x74
 8011f6e:	9002      	str	r0, [sp, #8]
 8011f70:	9006      	str	r0, [sp, #24]
 8011f72:	9107      	str	r1, [sp, #28]
 8011f74:	9104      	str	r1, [sp, #16]
 8011f76:	4809      	ldr	r0, [pc, #36]	; (8011f9c <siprintf+0x38>)
 8011f78:	4909      	ldr	r1, [pc, #36]	; (8011fa0 <siprintf+0x3c>)
 8011f7a:	cb04      	ldmia	r3!, {r2}
 8011f7c:	9105      	str	r1, [sp, #20]
 8011f7e:	6800      	ldr	r0, [r0, #0]
 8011f80:	a902      	add	r1, sp, #8
 8011f82:	9301      	str	r3, [sp, #4]
 8011f84:	f001 fca4 	bl	80138d0 <_svfiprintf_r>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9a02      	ldr	r2, [sp, #8]
 8011f8c:	7013      	strb	r3, [r2, #0]
 8011f8e:	b01c      	add	sp, #112	; 0x70
 8011f90:	bc08      	pop	{r3}
 8011f92:	b003      	add	sp, #12
 8011f94:	4718      	bx	r3
 8011f96:	46c0      	nop			; (mov r8, r8)
 8011f98:	7fffffff 	.word	0x7fffffff
 8011f9c:	20000074 	.word	0x20000074
 8011fa0:	ffff0208 	.word	0xffff0208

08011fa4 <__sread>:
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	000c      	movs	r4, r1
 8011fa8:	250e      	movs	r5, #14
 8011faa:	5f49      	ldrsh	r1, [r1, r5]
 8011fac:	f001 fd90 	bl	8013ad0 <_read_r>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	db03      	blt.n	8011fbc <__sread+0x18>
 8011fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011fb6:	181b      	adds	r3, r3, r0
 8011fb8:	6563      	str	r3, [r4, #84]	; 0x54
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	4a02      	ldr	r2, [pc, #8]	; (8011fc8 <__sread+0x24>)
 8011fc0:	4013      	ands	r3, r2
 8011fc2:	81a3      	strh	r3, [r4, #12]
 8011fc4:	e7f9      	b.n	8011fba <__sread+0x16>
 8011fc6:	46c0      	nop			; (mov r8, r8)
 8011fc8:	ffffefff 	.word	0xffffefff

08011fcc <__swrite>:
 8011fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fce:	001f      	movs	r7, r3
 8011fd0:	898b      	ldrh	r3, [r1, #12]
 8011fd2:	0005      	movs	r5, r0
 8011fd4:	000c      	movs	r4, r1
 8011fd6:	0016      	movs	r6, r2
 8011fd8:	05db      	lsls	r3, r3, #23
 8011fda:	d505      	bpl.n	8011fe8 <__swrite+0x1c>
 8011fdc:	230e      	movs	r3, #14
 8011fde:	5ec9      	ldrsh	r1, [r1, r3]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	2302      	movs	r3, #2
 8011fe4:	f000 ffc6 	bl	8012f74 <_lseek_r>
 8011fe8:	89a3      	ldrh	r3, [r4, #12]
 8011fea:	4a05      	ldr	r2, [pc, #20]	; (8012000 <__swrite+0x34>)
 8011fec:	0028      	movs	r0, r5
 8011fee:	4013      	ands	r3, r2
 8011ff0:	81a3      	strh	r3, [r4, #12]
 8011ff2:	0032      	movs	r2, r6
 8011ff4:	230e      	movs	r3, #14
 8011ff6:	5ee1      	ldrsh	r1, [r4, r3]
 8011ff8:	003b      	movs	r3, r7
 8011ffa:	f000 f81f 	bl	801203c <_write_r>
 8011ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012000:	ffffefff 	.word	0xffffefff

08012004 <__sseek>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	000c      	movs	r4, r1
 8012008:	250e      	movs	r5, #14
 801200a:	5f49      	ldrsh	r1, [r1, r5]
 801200c:	f000 ffb2 	bl	8012f74 <_lseek_r>
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	1c42      	adds	r2, r0, #1
 8012014:	d103      	bne.n	801201e <__sseek+0x1a>
 8012016:	4a05      	ldr	r2, [pc, #20]	; (801202c <__sseek+0x28>)
 8012018:	4013      	ands	r3, r2
 801201a:	81a3      	strh	r3, [r4, #12]
 801201c:	bd70      	pop	{r4, r5, r6, pc}
 801201e:	2280      	movs	r2, #128	; 0x80
 8012020:	0152      	lsls	r2, r2, #5
 8012022:	4313      	orrs	r3, r2
 8012024:	81a3      	strh	r3, [r4, #12]
 8012026:	6560      	str	r0, [r4, #84]	; 0x54
 8012028:	e7f8      	b.n	801201c <__sseek+0x18>
 801202a:	46c0      	nop			; (mov r8, r8)
 801202c:	ffffefff 	.word	0xffffefff

08012030 <__sclose>:
 8012030:	b510      	push	{r4, lr}
 8012032:	230e      	movs	r3, #14
 8012034:	5ec9      	ldrsh	r1, [r1, r3]
 8012036:	f000 f815 	bl	8012064 <_close_r>
 801203a:	bd10      	pop	{r4, pc}

0801203c <_write_r>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	0004      	movs	r4, r0
 8012040:	0008      	movs	r0, r1
 8012042:	0011      	movs	r1, r2
 8012044:	001a      	movs	r2, r3
 8012046:	2300      	movs	r3, #0
 8012048:	4d05      	ldr	r5, [pc, #20]	; (8012060 <_write_r+0x24>)
 801204a:	602b      	str	r3, [r5, #0]
 801204c:	f7f2 ffb7 	bl	8004fbe <_write>
 8012050:	1c43      	adds	r3, r0, #1
 8012052:	d103      	bne.n	801205c <_write_r+0x20>
 8012054:	682b      	ldr	r3, [r5, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d000      	beq.n	801205c <_write_r+0x20>
 801205a:	6023      	str	r3, [r4, #0]
 801205c:	bd70      	pop	{r4, r5, r6, pc}
 801205e:	46c0      	nop			; (mov r8, r8)
 8012060:	20002eec 	.word	0x20002eec

08012064 <_close_r>:
 8012064:	2300      	movs	r3, #0
 8012066:	b570      	push	{r4, r5, r6, lr}
 8012068:	4d06      	ldr	r5, [pc, #24]	; (8012084 <_close_r+0x20>)
 801206a:	0004      	movs	r4, r0
 801206c:	0008      	movs	r0, r1
 801206e:	602b      	str	r3, [r5, #0]
 8012070:	f7f2 ffc1 	bl	8004ff6 <_close>
 8012074:	1c43      	adds	r3, r0, #1
 8012076:	d103      	bne.n	8012080 <_close_r+0x1c>
 8012078:	682b      	ldr	r3, [r5, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d000      	beq.n	8012080 <_close_r+0x1c>
 801207e:	6023      	str	r3, [r4, #0]
 8012080:	bd70      	pop	{r4, r5, r6, pc}
 8012082:	46c0      	nop			; (mov r8, r8)
 8012084:	20002eec 	.word	0x20002eec

08012088 <quorem>:
 8012088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801208a:	0006      	movs	r6, r0
 801208c:	690b      	ldr	r3, [r1, #16]
 801208e:	6932      	ldr	r2, [r6, #16]
 8012090:	b087      	sub	sp, #28
 8012092:	2000      	movs	r0, #0
 8012094:	9103      	str	r1, [sp, #12]
 8012096:	429a      	cmp	r2, r3
 8012098:	db65      	blt.n	8012166 <quorem+0xde>
 801209a:	3b01      	subs	r3, #1
 801209c:	009c      	lsls	r4, r3, #2
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	000b      	movs	r3, r1
 80120a2:	3314      	adds	r3, #20
 80120a4:	9305      	str	r3, [sp, #20]
 80120a6:	191b      	adds	r3, r3, r4
 80120a8:	9304      	str	r3, [sp, #16]
 80120aa:	0033      	movs	r3, r6
 80120ac:	3314      	adds	r3, #20
 80120ae:	9302      	str	r3, [sp, #8]
 80120b0:	191c      	adds	r4, r3, r4
 80120b2:	9b04      	ldr	r3, [sp, #16]
 80120b4:	6827      	ldr	r7, [r4, #0]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	0038      	movs	r0, r7
 80120ba:	1c5d      	adds	r5, r3, #1
 80120bc:	0029      	movs	r1, r5
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	f7ee f83e 	bl	8000140 <__udivsi3>
 80120c4:	9001      	str	r0, [sp, #4]
 80120c6:	42af      	cmp	r7, r5
 80120c8:	d324      	bcc.n	8012114 <quorem+0x8c>
 80120ca:	2500      	movs	r5, #0
 80120cc:	46ac      	mov	ip, r5
 80120ce:	9802      	ldr	r0, [sp, #8]
 80120d0:	9f05      	ldr	r7, [sp, #20]
 80120d2:	cf08      	ldmia	r7!, {r3}
 80120d4:	9a01      	ldr	r2, [sp, #4]
 80120d6:	b299      	uxth	r1, r3
 80120d8:	4351      	muls	r1, r2
 80120da:	0c1b      	lsrs	r3, r3, #16
 80120dc:	4353      	muls	r3, r2
 80120de:	1949      	adds	r1, r1, r5
 80120e0:	0c0a      	lsrs	r2, r1, #16
 80120e2:	189b      	adds	r3, r3, r2
 80120e4:	6802      	ldr	r2, [r0, #0]
 80120e6:	b289      	uxth	r1, r1
 80120e8:	b292      	uxth	r2, r2
 80120ea:	4462      	add	r2, ip
 80120ec:	1a52      	subs	r2, r2, r1
 80120ee:	6801      	ldr	r1, [r0, #0]
 80120f0:	0c1d      	lsrs	r5, r3, #16
 80120f2:	0c09      	lsrs	r1, r1, #16
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	1acb      	subs	r3, r1, r3
 80120f8:	1411      	asrs	r1, r2, #16
 80120fa:	185b      	adds	r3, r3, r1
 80120fc:	1419      	asrs	r1, r3, #16
 80120fe:	b292      	uxth	r2, r2
 8012100:	041b      	lsls	r3, r3, #16
 8012102:	431a      	orrs	r2, r3
 8012104:	9b04      	ldr	r3, [sp, #16]
 8012106:	468c      	mov	ip, r1
 8012108:	c004      	stmia	r0!, {r2}
 801210a:	42bb      	cmp	r3, r7
 801210c:	d2e1      	bcs.n	80120d2 <quorem+0x4a>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d030      	beq.n	8012176 <quorem+0xee>
 8012114:	0030      	movs	r0, r6
 8012116:	9903      	ldr	r1, [sp, #12]
 8012118:	f001 f9ea 	bl	80134f0 <__mcmp>
 801211c:	2800      	cmp	r0, #0
 801211e:	db21      	blt.n	8012164 <quorem+0xdc>
 8012120:	0030      	movs	r0, r6
 8012122:	2400      	movs	r4, #0
 8012124:	9b01      	ldr	r3, [sp, #4]
 8012126:	9903      	ldr	r1, [sp, #12]
 8012128:	3301      	adds	r3, #1
 801212a:	9301      	str	r3, [sp, #4]
 801212c:	3014      	adds	r0, #20
 801212e:	3114      	adds	r1, #20
 8012130:	6803      	ldr	r3, [r0, #0]
 8012132:	c920      	ldmia	r1!, {r5}
 8012134:	b29a      	uxth	r2, r3
 8012136:	1914      	adds	r4, r2, r4
 8012138:	b2aa      	uxth	r2, r5
 801213a:	1aa2      	subs	r2, r4, r2
 801213c:	0c1b      	lsrs	r3, r3, #16
 801213e:	0c2d      	lsrs	r5, r5, #16
 8012140:	1414      	asrs	r4, r2, #16
 8012142:	1b5b      	subs	r3, r3, r5
 8012144:	191b      	adds	r3, r3, r4
 8012146:	141c      	asrs	r4, r3, #16
 8012148:	b292      	uxth	r2, r2
 801214a:	041b      	lsls	r3, r3, #16
 801214c:	4313      	orrs	r3, r2
 801214e:	c008      	stmia	r0!, {r3}
 8012150:	9b04      	ldr	r3, [sp, #16]
 8012152:	428b      	cmp	r3, r1
 8012154:	d2ec      	bcs.n	8012130 <quorem+0xa8>
 8012156:	9b00      	ldr	r3, [sp, #0]
 8012158:	9a02      	ldr	r2, [sp, #8]
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	18d3      	adds	r3, r2, r3
 801215e:	681a      	ldr	r2, [r3, #0]
 8012160:	2a00      	cmp	r2, #0
 8012162:	d015      	beq.n	8012190 <quorem+0x108>
 8012164:	9801      	ldr	r0, [sp, #4]
 8012166:	b007      	add	sp, #28
 8012168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801216a:	6823      	ldr	r3, [r4, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <quorem+0xf6>
 8012170:	9b00      	ldr	r3, [sp, #0]
 8012172:	3b01      	subs	r3, #1
 8012174:	9300      	str	r3, [sp, #0]
 8012176:	9b02      	ldr	r3, [sp, #8]
 8012178:	3c04      	subs	r4, #4
 801217a:	42a3      	cmp	r3, r4
 801217c:	d3f5      	bcc.n	801216a <quorem+0xe2>
 801217e:	9b00      	ldr	r3, [sp, #0]
 8012180:	6133      	str	r3, [r6, #16]
 8012182:	e7c7      	b.n	8012114 <quorem+0x8c>
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	2a00      	cmp	r2, #0
 8012188:	d106      	bne.n	8012198 <quorem+0x110>
 801218a:	9a00      	ldr	r2, [sp, #0]
 801218c:	3a01      	subs	r2, #1
 801218e:	9200      	str	r2, [sp, #0]
 8012190:	9a02      	ldr	r2, [sp, #8]
 8012192:	3b04      	subs	r3, #4
 8012194:	429a      	cmp	r2, r3
 8012196:	d3f5      	bcc.n	8012184 <quorem+0xfc>
 8012198:	9b00      	ldr	r3, [sp, #0]
 801219a:	6133      	str	r3, [r6, #16]
 801219c:	e7e2      	b.n	8012164 <quorem+0xdc>
	...

080121a0 <_dtoa_r>:
 80121a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121a2:	b09d      	sub	sp, #116	; 0x74
 80121a4:	9202      	str	r2, [sp, #8]
 80121a6:	9303      	str	r3, [sp, #12]
 80121a8:	9b02      	ldr	r3, [sp, #8]
 80121aa:	9c03      	ldr	r4, [sp, #12]
 80121ac:	9308      	str	r3, [sp, #32]
 80121ae:	9409      	str	r4, [sp, #36]	; 0x24
 80121b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80121b2:	0007      	movs	r7, r0
 80121b4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80121b6:	2c00      	cmp	r4, #0
 80121b8:	d10e      	bne.n	80121d8 <_dtoa_r+0x38>
 80121ba:	2010      	movs	r0, #16
 80121bc:	f000 feee 	bl	8012f9c <malloc>
 80121c0:	1e02      	subs	r2, r0, #0
 80121c2:	6278      	str	r0, [r7, #36]	; 0x24
 80121c4:	d104      	bne.n	80121d0 <_dtoa_r+0x30>
 80121c6:	21ea      	movs	r1, #234	; 0xea
 80121c8:	4bc7      	ldr	r3, [pc, #796]	; (80124e8 <_dtoa_r+0x348>)
 80121ca:	48c8      	ldr	r0, [pc, #800]	; (80124ec <_dtoa_r+0x34c>)
 80121cc:	f001 fd62 	bl	8013c94 <__assert_func>
 80121d0:	6044      	str	r4, [r0, #4]
 80121d2:	6084      	str	r4, [r0, #8]
 80121d4:	6004      	str	r4, [r0, #0]
 80121d6:	60c4      	str	r4, [r0, #12]
 80121d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121da:	6819      	ldr	r1, [r3, #0]
 80121dc:	2900      	cmp	r1, #0
 80121de:	d00a      	beq.n	80121f6 <_dtoa_r+0x56>
 80121e0:	685a      	ldr	r2, [r3, #4]
 80121e2:	2301      	movs	r3, #1
 80121e4:	4093      	lsls	r3, r2
 80121e6:	604a      	str	r2, [r1, #4]
 80121e8:	608b      	str	r3, [r1, #8]
 80121ea:	0038      	movs	r0, r7
 80121ec:	f000 ff40 	bl	8013070 <_Bfree>
 80121f0:	2200      	movs	r2, #0
 80121f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f4:	601a      	str	r2, [r3, #0]
 80121f6:	9b03      	ldr	r3, [sp, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	da20      	bge.n	801223e <_dtoa_r+0x9e>
 80121fc:	2301      	movs	r3, #1
 80121fe:	602b      	str	r3, [r5, #0]
 8012200:	9b03      	ldr	r3, [sp, #12]
 8012202:	005b      	lsls	r3, r3, #1
 8012204:	085b      	lsrs	r3, r3, #1
 8012206:	9309      	str	r3, [sp, #36]	; 0x24
 8012208:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801220a:	4bb9      	ldr	r3, [pc, #740]	; (80124f0 <_dtoa_r+0x350>)
 801220c:	4ab8      	ldr	r2, [pc, #736]	; (80124f0 <_dtoa_r+0x350>)
 801220e:	402b      	ands	r3, r5
 8012210:	4293      	cmp	r3, r2
 8012212:	d117      	bne.n	8012244 <_dtoa_r+0xa4>
 8012214:	4bb7      	ldr	r3, [pc, #732]	; (80124f4 <_dtoa_r+0x354>)
 8012216:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012218:	0328      	lsls	r0, r5, #12
 801221a:	6013      	str	r3, [r2, #0]
 801221c:	9b02      	ldr	r3, [sp, #8]
 801221e:	0b00      	lsrs	r0, r0, #12
 8012220:	4318      	orrs	r0, r3
 8012222:	d101      	bne.n	8012228 <_dtoa_r+0x88>
 8012224:	f000 fdbf 	bl	8012da6 <_dtoa_r+0xc06>
 8012228:	48b3      	ldr	r0, [pc, #716]	; (80124f8 <_dtoa_r+0x358>)
 801222a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801222c:	9006      	str	r0, [sp, #24]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <_dtoa_r+0x98>
 8012232:	4bb2      	ldr	r3, [pc, #712]	; (80124fc <_dtoa_r+0x35c>)
 8012234:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012236:	6013      	str	r3, [r2, #0]
 8012238:	9806      	ldr	r0, [sp, #24]
 801223a:	b01d      	add	sp, #116	; 0x74
 801223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801223e:	2300      	movs	r3, #0
 8012240:	602b      	str	r3, [r5, #0]
 8012242:	e7e1      	b.n	8012208 <_dtoa_r+0x68>
 8012244:	9b08      	ldr	r3, [sp, #32]
 8012246:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012248:	9312      	str	r3, [sp, #72]	; 0x48
 801224a:	9413      	str	r4, [sp, #76]	; 0x4c
 801224c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801224e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012250:	2200      	movs	r2, #0
 8012252:	2300      	movs	r3, #0
 8012254:	f7ee f8fa 	bl	800044c <__aeabi_dcmpeq>
 8012258:	1e04      	subs	r4, r0, #0
 801225a:	d009      	beq.n	8012270 <_dtoa_r+0xd0>
 801225c:	2301      	movs	r3, #1
 801225e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012260:	6013      	str	r3, [r2, #0]
 8012262:	4ba7      	ldr	r3, [pc, #668]	; (8012500 <_dtoa_r+0x360>)
 8012264:	9306      	str	r3, [sp, #24]
 8012266:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012268:	2b00      	cmp	r3, #0
 801226a:	d0e5      	beq.n	8012238 <_dtoa_r+0x98>
 801226c:	4ba5      	ldr	r3, [pc, #660]	; (8012504 <_dtoa_r+0x364>)
 801226e:	e7e1      	b.n	8012234 <_dtoa_r+0x94>
 8012270:	ab1a      	add	r3, sp, #104	; 0x68
 8012272:	9301      	str	r3, [sp, #4]
 8012274:	ab1b      	add	r3, sp, #108	; 0x6c
 8012276:	9300      	str	r3, [sp, #0]
 8012278:	0038      	movs	r0, r7
 801227a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801227c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801227e:	f001 f9eb 	bl	8013658 <__d2b>
 8012282:	006e      	lsls	r6, r5, #1
 8012284:	9005      	str	r0, [sp, #20]
 8012286:	0d76      	lsrs	r6, r6, #21
 8012288:	d100      	bne.n	801228c <_dtoa_r+0xec>
 801228a:	e07c      	b.n	8012386 <_dtoa_r+0x1e6>
 801228c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801228e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012292:	4a9d      	ldr	r2, [pc, #628]	; (8012508 <_dtoa_r+0x368>)
 8012294:	031b      	lsls	r3, r3, #12
 8012296:	0b1b      	lsrs	r3, r3, #12
 8012298:	431a      	orrs	r2, r3
 801229a:	0011      	movs	r1, r2
 801229c:	4b9b      	ldr	r3, [pc, #620]	; (801250c <_dtoa_r+0x36c>)
 801229e:	9418      	str	r4, [sp, #96]	; 0x60
 80122a0:	18f6      	adds	r6, r6, r3
 80122a2:	2200      	movs	r2, #0
 80122a4:	4b9a      	ldr	r3, [pc, #616]	; (8012510 <_dtoa_r+0x370>)
 80122a6:	f7ef ff39 	bl	800211c <__aeabi_dsub>
 80122aa:	4a9a      	ldr	r2, [pc, #616]	; (8012514 <_dtoa_r+0x374>)
 80122ac:	4b9a      	ldr	r3, [pc, #616]	; (8012518 <_dtoa_r+0x378>)
 80122ae:	f7ef fcc9 	bl	8001c44 <__aeabi_dmul>
 80122b2:	4a9a      	ldr	r2, [pc, #616]	; (801251c <_dtoa_r+0x37c>)
 80122b4:	4b9a      	ldr	r3, [pc, #616]	; (8012520 <_dtoa_r+0x380>)
 80122b6:	f7ee fd87 	bl	8000dc8 <__aeabi_dadd>
 80122ba:	0004      	movs	r4, r0
 80122bc:	0030      	movs	r0, r6
 80122be:	000d      	movs	r5, r1
 80122c0:	f7f0 fb12 	bl	80028e8 <__aeabi_i2d>
 80122c4:	4a97      	ldr	r2, [pc, #604]	; (8012524 <_dtoa_r+0x384>)
 80122c6:	4b98      	ldr	r3, [pc, #608]	; (8012528 <_dtoa_r+0x388>)
 80122c8:	f7ef fcbc 	bl	8001c44 <__aeabi_dmul>
 80122cc:	0002      	movs	r2, r0
 80122ce:	000b      	movs	r3, r1
 80122d0:	0020      	movs	r0, r4
 80122d2:	0029      	movs	r1, r5
 80122d4:	f7ee fd78 	bl	8000dc8 <__aeabi_dadd>
 80122d8:	0004      	movs	r4, r0
 80122da:	000d      	movs	r5, r1
 80122dc:	f7f0 face 	bl	800287c <__aeabi_d2iz>
 80122e0:	2200      	movs	r2, #0
 80122e2:	9002      	str	r0, [sp, #8]
 80122e4:	2300      	movs	r3, #0
 80122e6:	0020      	movs	r0, r4
 80122e8:	0029      	movs	r1, r5
 80122ea:	f7ee f8b5 	bl	8000458 <__aeabi_dcmplt>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d00b      	beq.n	801230a <_dtoa_r+0x16a>
 80122f2:	9802      	ldr	r0, [sp, #8]
 80122f4:	f7f0 faf8 	bl	80028e8 <__aeabi_i2d>
 80122f8:	002b      	movs	r3, r5
 80122fa:	0022      	movs	r2, r4
 80122fc:	f7ee f8a6 	bl	800044c <__aeabi_dcmpeq>
 8012300:	4243      	negs	r3, r0
 8012302:	4158      	adcs	r0, r3
 8012304:	9b02      	ldr	r3, [sp, #8]
 8012306:	1a1b      	subs	r3, r3, r0
 8012308:	9302      	str	r3, [sp, #8]
 801230a:	2301      	movs	r3, #1
 801230c:	9316      	str	r3, [sp, #88]	; 0x58
 801230e:	9b02      	ldr	r3, [sp, #8]
 8012310:	2b16      	cmp	r3, #22
 8012312:	d80f      	bhi.n	8012334 <_dtoa_r+0x194>
 8012314:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012318:	00da      	lsls	r2, r3, #3
 801231a:	4b84      	ldr	r3, [pc, #528]	; (801252c <_dtoa_r+0x38c>)
 801231c:	189b      	adds	r3, r3, r2
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	f7ee f899 	bl	8000458 <__aeabi_dcmplt>
 8012326:	2800      	cmp	r0, #0
 8012328:	d049      	beq.n	80123be <_dtoa_r+0x21e>
 801232a:	9b02      	ldr	r3, [sp, #8]
 801232c:	3b01      	subs	r3, #1
 801232e:	9302      	str	r3, [sp, #8]
 8012330:	2300      	movs	r3, #0
 8012332:	9316      	str	r3, [sp, #88]	; 0x58
 8012334:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012336:	1b9e      	subs	r6, r3, r6
 8012338:	2300      	movs	r3, #0
 801233a:	930a      	str	r3, [sp, #40]	; 0x28
 801233c:	0033      	movs	r3, r6
 801233e:	3b01      	subs	r3, #1
 8012340:	930d      	str	r3, [sp, #52]	; 0x34
 8012342:	d504      	bpl.n	801234e <_dtoa_r+0x1ae>
 8012344:	2301      	movs	r3, #1
 8012346:	1b9b      	subs	r3, r3, r6
 8012348:	930a      	str	r3, [sp, #40]	; 0x28
 801234a:	2300      	movs	r3, #0
 801234c:	930d      	str	r3, [sp, #52]	; 0x34
 801234e:	9b02      	ldr	r3, [sp, #8]
 8012350:	2b00      	cmp	r3, #0
 8012352:	db36      	blt.n	80123c2 <_dtoa_r+0x222>
 8012354:	9a02      	ldr	r2, [sp, #8]
 8012356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012358:	4694      	mov	ip, r2
 801235a:	4463      	add	r3, ip
 801235c:	930d      	str	r3, [sp, #52]	; 0x34
 801235e:	2300      	movs	r3, #0
 8012360:	9215      	str	r2, [sp, #84]	; 0x54
 8012362:	930e      	str	r3, [sp, #56]	; 0x38
 8012364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012366:	2401      	movs	r4, #1
 8012368:	2b09      	cmp	r3, #9
 801236a:	d864      	bhi.n	8012436 <_dtoa_r+0x296>
 801236c:	2b05      	cmp	r3, #5
 801236e:	dd02      	ble.n	8012376 <_dtoa_r+0x1d6>
 8012370:	2400      	movs	r4, #0
 8012372:	3b04      	subs	r3, #4
 8012374:	9322      	str	r3, [sp, #136]	; 0x88
 8012376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012378:	1e98      	subs	r0, r3, #2
 801237a:	2803      	cmp	r0, #3
 801237c:	d864      	bhi.n	8012448 <_dtoa_r+0x2a8>
 801237e:	f7ed fecb 	bl	8000118 <__gnu_thumb1_case_uqi>
 8012382:	3829      	.short	0x3829
 8012384:	5836      	.short	0x5836
 8012386:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012388:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801238a:	189e      	adds	r6, r3, r2
 801238c:	4b68      	ldr	r3, [pc, #416]	; (8012530 <_dtoa_r+0x390>)
 801238e:	18f2      	adds	r2, r6, r3
 8012390:	2a20      	cmp	r2, #32
 8012392:	dd0f      	ble.n	80123b4 <_dtoa_r+0x214>
 8012394:	2340      	movs	r3, #64	; 0x40
 8012396:	1a9b      	subs	r3, r3, r2
 8012398:	409d      	lsls	r5, r3
 801239a:	4b66      	ldr	r3, [pc, #408]	; (8012534 <_dtoa_r+0x394>)
 801239c:	9802      	ldr	r0, [sp, #8]
 801239e:	18f3      	adds	r3, r6, r3
 80123a0:	40d8      	lsrs	r0, r3
 80123a2:	4328      	orrs	r0, r5
 80123a4:	f7f0 fad0 	bl	8002948 <__aeabi_ui2d>
 80123a8:	2301      	movs	r3, #1
 80123aa:	4c63      	ldr	r4, [pc, #396]	; (8012538 <_dtoa_r+0x398>)
 80123ac:	3e01      	subs	r6, #1
 80123ae:	1909      	adds	r1, r1, r4
 80123b0:	9318      	str	r3, [sp, #96]	; 0x60
 80123b2:	e776      	b.n	80122a2 <_dtoa_r+0x102>
 80123b4:	2320      	movs	r3, #32
 80123b6:	9802      	ldr	r0, [sp, #8]
 80123b8:	1a9b      	subs	r3, r3, r2
 80123ba:	4098      	lsls	r0, r3
 80123bc:	e7f2      	b.n	80123a4 <_dtoa_r+0x204>
 80123be:	9016      	str	r0, [sp, #88]	; 0x58
 80123c0:	e7b8      	b.n	8012334 <_dtoa_r+0x194>
 80123c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c4:	9a02      	ldr	r2, [sp, #8]
 80123c6:	1a9b      	subs	r3, r3, r2
 80123c8:	930a      	str	r3, [sp, #40]	; 0x28
 80123ca:	4253      	negs	r3, r2
 80123cc:	930e      	str	r3, [sp, #56]	; 0x38
 80123ce:	2300      	movs	r3, #0
 80123d0:	9315      	str	r3, [sp, #84]	; 0x54
 80123d2:	e7c7      	b.n	8012364 <_dtoa_r+0x1c4>
 80123d4:	2300      	movs	r3, #0
 80123d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80123d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80123da:	930c      	str	r3, [sp, #48]	; 0x30
 80123dc:	9307      	str	r3, [sp, #28]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	dc13      	bgt.n	801240a <_dtoa_r+0x26a>
 80123e2:	2301      	movs	r3, #1
 80123e4:	001a      	movs	r2, r3
 80123e6:	930c      	str	r3, [sp, #48]	; 0x30
 80123e8:	9307      	str	r3, [sp, #28]
 80123ea:	9223      	str	r2, [sp, #140]	; 0x8c
 80123ec:	e00d      	b.n	801240a <_dtoa_r+0x26a>
 80123ee:	2301      	movs	r3, #1
 80123f0:	e7f1      	b.n	80123d6 <_dtoa_r+0x236>
 80123f2:	2300      	movs	r3, #0
 80123f4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80123f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80123f8:	4694      	mov	ip, r2
 80123fa:	9b02      	ldr	r3, [sp, #8]
 80123fc:	4463      	add	r3, ip
 80123fe:	930c      	str	r3, [sp, #48]	; 0x30
 8012400:	3301      	adds	r3, #1
 8012402:	9307      	str	r3, [sp, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	dc00      	bgt.n	801240a <_dtoa_r+0x26a>
 8012408:	2301      	movs	r3, #1
 801240a:	2200      	movs	r2, #0
 801240c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801240e:	6042      	str	r2, [r0, #4]
 8012410:	3204      	adds	r2, #4
 8012412:	0015      	movs	r5, r2
 8012414:	3514      	adds	r5, #20
 8012416:	6841      	ldr	r1, [r0, #4]
 8012418:	429d      	cmp	r5, r3
 801241a:	d919      	bls.n	8012450 <_dtoa_r+0x2b0>
 801241c:	0038      	movs	r0, r7
 801241e:	f000 fde3 	bl	8012fe8 <_Balloc>
 8012422:	9006      	str	r0, [sp, #24]
 8012424:	2800      	cmp	r0, #0
 8012426:	d117      	bne.n	8012458 <_dtoa_r+0x2b8>
 8012428:	21d5      	movs	r1, #213	; 0xd5
 801242a:	0002      	movs	r2, r0
 801242c:	4b43      	ldr	r3, [pc, #268]	; (801253c <_dtoa_r+0x39c>)
 801242e:	0049      	lsls	r1, r1, #1
 8012430:	e6cb      	b.n	80121ca <_dtoa_r+0x2a>
 8012432:	2301      	movs	r3, #1
 8012434:	e7de      	b.n	80123f4 <_dtoa_r+0x254>
 8012436:	2300      	movs	r3, #0
 8012438:	940f      	str	r4, [sp, #60]	; 0x3c
 801243a:	9322      	str	r3, [sp, #136]	; 0x88
 801243c:	3b01      	subs	r3, #1
 801243e:	930c      	str	r3, [sp, #48]	; 0x30
 8012440:	9307      	str	r3, [sp, #28]
 8012442:	2200      	movs	r2, #0
 8012444:	3313      	adds	r3, #19
 8012446:	e7d0      	b.n	80123ea <_dtoa_r+0x24a>
 8012448:	2301      	movs	r3, #1
 801244a:	930f      	str	r3, [sp, #60]	; 0x3c
 801244c:	3b02      	subs	r3, #2
 801244e:	e7f6      	b.n	801243e <_dtoa_r+0x29e>
 8012450:	3101      	adds	r1, #1
 8012452:	6041      	str	r1, [r0, #4]
 8012454:	0052      	lsls	r2, r2, #1
 8012456:	e7dc      	b.n	8012412 <_dtoa_r+0x272>
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	9a06      	ldr	r2, [sp, #24]
 801245c:	601a      	str	r2, [r3, #0]
 801245e:	9b07      	ldr	r3, [sp, #28]
 8012460:	2b0e      	cmp	r3, #14
 8012462:	d900      	bls.n	8012466 <_dtoa_r+0x2c6>
 8012464:	e0eb      	b.n	801263e <_dtoa_r+0x49e>
 8012466:	2c00      	cmp	r4, #0
 8012468:	d100      	bne.n	801246c <_dtoa_r+0x2cc>
 801246a:	e0e8      	b.n	801263e <_dtoa_r+0x49e>
 801246c:	9b02      	ldr	r3, [sp, #8]
 801246e:	2b00      	cmp	r3, #0
 8012470:	dd68      	ble.n	8012544 <_dtoa_r+0x3a4>
 8012472:	001a      	movs	r2, r3
 8012474:	210f      	movs	r1, #15
 8012476:	4b2d      	ldr	r3, [pc, #180]	; (801252c <_dtoa_r+0x38c>)
 8012478:	400a      	ands	r2, r1
 801247a:	00d2      	lsls	r2, r2, #3
 801247c:	189b      	adds	r3, r3, r2
 801247e:	681d      	ldr	r5, [r3, #0]
 8012480:	685e      	ldr	r6, [r3, #4]
 8012482:	9b02      	ldr	r3, [sp, #8]
 8012484:	111c      	asrs	r4, r3, #4
 8012486:	2302      	movs	r3, #2
 8012488:	9310      	str	r3, [sp, #64]	; 0x40
 801248a:	9b02      	ldr	r3, [sp, #8]
 801248c:	05db      	lsls	r3, r3, #23
 801248e:	d50b      	bpl.n	80124a8 <_dtoa_r+0x308>
 8012490:	4b2b      	ldr	r3, [pc, #172]	; (8012540 <_dtoa_r+0x3a0>)
 8012492:	400c      	ands	r4, r1
 8012494:	6a1a      	ldr	r2, [r3, #32]
 8012496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012498:	9812      	ldr	r0, [sp, #72]	; 0x48
 801249a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801249c:	f7ee ffd0 	bl	8001440 <__aeabi_ddiv>
 80124a0:	2303      	movs	r3, #3
 80124a2:	9008      	str	r0, [sp, #32]
 80124a4:	9109      	str	r1, [sp, #36]	; 0x24
 80124a6:	9310      	str	r3, [sp, #64]	; 0x40
 80124a8:	4b25      	ldr	r3, [pc, #148]	; (8012540 <_dtoa_r+0x3a0>)
 80124aa:	9314      	str	r3, [sp, #80]	; 0x50
 80124ac:	2c00      	cmp	r4, #0
 80124ae:	d108      	bne.n	80124c2 <_dtoa_r+0x322>
 80124b0:	9808      	ldr	r0, [sp, #32]
 80124b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124b4:	002a      	movs	r2, r5
 80124b6:	0033      	movs	r3, r6
 80124b8:	f7ee ffc2 	bl	8001440 <__aeabi_ddiv>
 80124bc:	9008      	str	r0, [sp, #32]
 80124be:	9109      	str	r1, [sp, #36]	; 0x24
 80124c0:	e05c      	b.n	801257c <_dtoa_r+0x3dc>
 80124c2:	2301      	movs	r3, #1
 80124c4:	421c      	tst	r4, r3
 80124c6:	d00b      	beq.n	80124e0 <_dtoa_r+0x340>
 80124c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124ca:	0028      	movs	r0, r5
 80124cc:	3301      	adds	r3, #1
 80124ce:	9310      	str	r3, [sp, #64]	; 0x40
 80124d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124d2:	0031      	movs	r1, r6
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	f7ef fbb4 	bl	8001c44 <__aeabi_dmul>
 80124dc:	0005      	movs	r5, r0
 80124de:	000e      	movs	r6, r1
 80124e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80124e2:	1064      	asrs	r4, r4, #1
 80124e4:	3308      	adds	r3, #8
 80124e6:	e7e0      	b.n	80124aa <_dtoa_r+0x30a>
 80124e8:	0801611d 	.word	0x0801611d
 80124ec:	08016134 	.word	0x08016134
 80124f0:	7ff00000 	.word	0x7ff00000
 80124f4:	0000270f 	.word	0x0000270f
 80124f8:	08016119 	.word	0x08016119
 80124fc:	0801611c 	.word	0x0801611c
 8012500:	080160ec 	.word	0x080160ec
 8012504:	080160ed 	.word	0x080160ed
 8012508:	3ff00000 	.word	0x3ff00000
 801250c:	fffffc01 	.word	0xfffffc01
 8012510:	3ff80000 	.word	0x3ff80000
 8012514:	636f4361 	.word	0x636f4361
 8012518:	3fd287a7 	.word	0x3fd287a7
 801251c:	8b60c8b3 	.word	0x8b60c8b3
 8012520:	3fc68a28 	.word	0x3fc68a28
 8012524:	509f79fb 	.word	0x509f79fb
 8012528:	3fd34413 	.word	0x3fd34413
 801252c:	08016228 	.word	0x08016228
 8012530:	00000432 	.word	0x00000432
 8012534:	00000412 	.word	0x00000412
 8012538:	fe100000 	.word	0xfe100000
 801253c:	0801618f 	.word	0x0801618f
 8012540:	08016200 	.word	0x08016200
 8012544:	2302      	movs	r3, #2
 8012546:	9310      	str	r3, [sp, #64]	; 0x40
 8012548:	9b02      	ldr	r3, [sp, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d016      	beq.n	801257c <_dtoa_r+0x3dc>
 801254e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012550:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012552:	425c      	negs	r4, r3
 8012554:	230f      	movs	r3, #15
 8012556:	4ab6      	ldr	r2, [pc, #728]	; (8012830 <_dtoa_r+0x690>)
 8012558:	4023      	ands	r3, r4
 801255a:	00db      	lsls	r3, r3, #3
 801255c:	18d3      	adds	r3, r2, r3
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	f7ef fb6f 	bl	8001c44 <__aeabi_dmul>
 8012566:	2601      	movs	r6, #1
 8012568:	2300      	movs	r3, #0
 801256a:	9008      	str	r0, [sp, #32]
 801256c:	9109      	str	r1, [sp, #36]	; 0x24
 801256e:	4db1      	ldr	r5, [pc, #708]	; (8012834 <_dtoa_r+0x694>)
 8012570:	1124      	asrs	r4, r4, #4
 8012572:	2c00      	cmp	r4, #0
 8012574:	d000      	beq.n	8012578 <_dtoa_r+0x3d8>
 8012576:	e094      	b.n	80126a2 <_dtoa_r+0x502>
 8012578:	2b00      	cmp	r3, #0
 801257a:	d19f      	bne.n	80124bc <_dtoa_r+0x31c>
 801257c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801257e:	2b00      	cmp	r3, #0
 8012580:	d100      	bne.n	8012584 <_dtoa_r+0x3e4>
 8012582:	e09b      	b.n	80126bc <_dtoa_r+0x51c>
 8012584:	9c08      	ldr	r4, [sp, #32]
 8012586:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012588:	2200      	movs	r2, #0
 801258a:	0020      	movs	r0, r4
 801258c:	0029      	movs	r1, r5
 801258e:	4baa      	ldr	r3, [pc, #680]	; (8012838 <_dtoa_r+0x698>)
 8012590:	f7ed ff62 	bl	8000458 <__aeabi_dcmplt>
 8012594:	2800      	cmp	r0, #0
 8012596:	d100      	bne.n	801259a <_dtoa_r+0x3fa>
 8012598:	e090      	b.n	80126bc <_dtoa_r+0x51c>
 801259a:	9b07      	ldr	r3, [sp, #28]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d100      	bne.n	80125a2 <_dtoa_r+0x402>
 80125a0:	e08c      	b.n	80126bc <_dtoa_r+0x51c>
 80125a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	dd46      	ble.n	8012636 <_dtoa_r+0x496>
 80125a8:	9b02      	ldr	r3, [sp, #8]
 80125aa:	2200      	movs	r2, #0
 80125ac:	0020      	movs	r0, r4
 80125ae:	0029      	movs	r1, r5
 80125b0:	1e5e      	subs	r6, r3, #1
 80125b2:	4ba2      	ldr	r3, [pc, #648]	; (801283c <_dtoa_r+0x69c>)
 80125b4:	f7ef fb46 	bl	8001c44 <__aeabi_dmul>
 80125b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125ba:	9008      	str	r0, [sp, #32]
 80125bc:	9109      	str	r1, [sp, #36]	; 0x24
 80125be:	3301      	adds	r3, #1
 80125c0:	9310      	str	r3, [sp, #64]	; 0x40
 80125c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80125c6:	9c08      	ldr	r4, [sp, #32]
 80125c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80125ca:	9314      	str	r3, [sp, #80]	; 0x50
 80125cc:	f7f0 f98c 	bl	80028e8 <__aeabi_i2d>
 80125d0:	0022      	movs	r2, r4
 80125d2:	002b      	movs	r3, r5
 80125d4:	f7ef fb36 	bl	8001c44 <__aeabi_dmul>
 80125d8:	2200      	movs	r2, #0
 80125da:	4b99      	ldr	r3, [pc, #612]	; (8012840 <_dtoa_r+0x6a0>)
 80125dc:	f7ee fbf4 	bl	8000dc8 <__aeabi_dadd>
 80125e0:	9010      	str	r0, [sp, #64]	; 0x40
 80125e2:	9111      	str	r1, [sp, #68]	; 0x44
 80125e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125e8:	9208      	str	r2, [sp, #32]
 80125ea:	9309      	str	r3, [sp, #36]	; 0x24
 80125ec:	4a95      	ldr	r2, [pc, #596]	; (8012844 <_dtoa_r+0x6a4>)
 80125ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80125f0:	4694      	mov	ip, r2
 80125f2:	4463      	add	r3, ip
 80125f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80125f6:	9309      	str	r3, [sp, #36]	; 0x24
 80125f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d161      	bne.n	80126c2 <_dtoa_r+0x522>
 80125fe:	2200      	movs	r2, #0
 8012600:	0020      	movs	r0, r4
 8012602:	0029      	movs	r1, r5
 8012604:	4b90      	ldr	r3, [pc, #576]	; (8012848 <_dtoa_r+0x6a8>)
 8012606:	f7ef fd89 	bl	800211c <__aeabi_dsub>
 801260a:	9a08      	ldr	r2, [sp, #32]
 801260c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801260e:	0004      	movs	r4, r0
 8012610:	000d      	movs	r5, r1
 8012612:	f7ed ff35 	bl	8000480 <__aeabi_dcmpgt>
 8012616:	2800      	cmp	r0, #0
 8012618:	d000      	beq.n	801261c <_dtoa_r+0x47c>
 801261a:	e2af      	b.n	8012b7c <_dtoa_r+0x9dc>
 801261c:	488b      	ldr	r0, [pc, #556]	; (801284c <_dtoa_r+0x6ac>)
 801261e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012620:	4684      	mov	ip, r0
 8012622:	4461      	add	r1, ip
 8012624:	000b      	movs	r3, r1
 8012626:	0020      	movs	r0, r4
 8012628:	0029      	movs	r1, r5
 801262a:	9a08      	ldr	r2, [sp, #32]
 801262c:	f7ed ff14 	bl	8000458 <__aeabi_dcmplt>
 8012630:	2800      	cmp	r0, #0
 8012632:	d000      	beq.n	8012636 <_dtoa_r+0x496>
 8012634:	e29f      	b.n	8012b76 <_dtoa_r+0x9d6>
 8012636:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012638:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801263a:	9308      	str	r3, [sp, #32]
 801263c:	9409      	str	r4, [sp, #36]	; 0x24
 801263e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012640:	2b00      	cmp	r3, #0
 8012642:	da00      	bge.n	8012646 <_dtoa_r+0x4a6>
 8012644:	e172      	b.n	801292c <_dtoa_r+0x78c>
 8012646:	9a02      	ldr	r2, [sp, #8]
 8012648:	2a0e      	cmp	r2, #14
 801264a:	dd00      	ble.n	801264e <_dtoa_r+0x4ae>
 801264c:	e16e      	b.n	801292c <_dtoa_r+0x78c>
 801264e:	4b78      	ldr	r3, [pc, #480]	; (8012830 <_dtoa_r+0x690>)
 8012650:	00d2      	lsls	r2, r2, #3
 8012652:	189b      	adds	r3, r3, r2
 8012654:	685c      	ldr	r4, [r3, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	930a      	str	r3, [sp, #40]	; 0x28
 801265a:	940b      	str	r4, [sp, #44]	; 0x2c
 801265c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801265e:	2b00      	cmp	r3, #0
 8012660:	db00      	blt.n	8012664 <_dtoa_r+0x4c4>
 8012662:	e0f7      	b.n	8012854 <_dtoa_r+0x6b4>
 8012664:	9b07      	ldr	r3, [sp, #28]
 8012666:	2b00      	cmp	r3, #0
 8012668:	dd00      	ble.n	801266c <_dtoa_r+0x4cc>
 801266a:	e0f3      	b.n	8012854 <_dtoa_r+0x6b4>
 801266c:	d000      	beq.n	8012670 <_dtoa_r+0x4d0>
 801266e:	e282      	b.n	8012b76 <_dtoa_r+0x9d6>
 8012670:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012672:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012674:	2200      	movs	r2, #0
 8012676:	4b74      	ldr	r3, [pc, #464]	; (8012848 <_dtoa_r+0x6a8>)
 8012678:	f7ef fae4 	bl	8001c44 <__aeabi_dmul>
 801267c:	9a08      	ldr	r2, [sp, #32]
 801267e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012680:	f7ed ff08 	bl	8000494 <__aeabi_dcmpge>
 8012684:	9e07      	ldr	r6, [sp, #28]
 8012686:	0035      	movs	r5, r6
 8012688:	2800      	cmp	r0, #0
 801268a:	d000      	beq.n	801268e <_dtoa_r+0x4ee>
 801268c:	e259      	b.n	8012b42 <_dtoa_r+0x9a2>
 801268e:	9b06      	ldr	r3, [sp, #24]
 8012690:	9a06      	ldr	r2, [sp, #24]
 8012692:	3301      	adds	r3, #1
 8012694:	9308      	str	r3, [sp, #32]
 8012696:	2331      	movs	r3, #49	; 0x31
 8012698:	7013      	strb	r3, [r2, #0]
 801269a:	9b02      	ldr	r3, [sp, #8]
 801269c:	3301      	adds	r3, #1
 801269e:	9302      	str	r3, [sp, #8]
 80126a0:	e254      	b.n	8012b4c <_dtoa_r+0x9ac>
 80126a2:	4234      	tst	r4, r6
 80126a4:	d007      	beq.n	80126b6 <_dtoa_r+0x516>
 80126a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80126a8:	3301      	adds	r3, #1
 80126aa:	9310      	str	r3, [sp, #64]	; 0x40
 80126ac:	682a      	ldr	r2, [r5, #0]
 80126ae:	686b      	ldr	r3, [r5, #4]
 80126b0:	f7ef fac8 	bl	8001c44 <__aeabi_dmul>
 80126b4:	0033      	movs	r3, r6
 80126b6:	1064      	asrs	r4, r4, #1
 80126b8:	3508      	adds	r5, #8
 80126ba:	e75a      	b.n	8012572 <_dtoa_r+0x3d2>
 80126bc:	9e02      	ldr	r6, [sp, #8]
 80126be:	9b07      	ldr	r3, [sp, #28]
 80126c0:	e780      	b.n	80125c4 <_dtoa_r+0x424>
 80126c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80126c6:	1e5a      	subs	r2, r3, #1
 80126c8:	4b59      	ldr	r3, [pc, #356]	; (8012830 <_dtoa_r+0x690>)
 80126ca:	00d2      	lsls	r2, r2, #3
 80126cc:	189b      	adds	r3, r3, r2
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	2900      	cmp	r1, #0
 80126d4:	d051      	beq.n	801277a <_dtoa_r+0x5da>
 80126d6:	2000      	movs	r0, #0
 80126d8:	495d      	ldr	r1, [pc, #372]	; (8012850 <_dtoa_r+0x6b0>)
 80126da:	f7ee feb1 	bl	8001440 <__aeabi_ddiv>
 80126de:	9a08      	ldr	r2, [sp, #32]
 80126e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126e2:	f7ef fd1b 	bl	800211c <__aeabi_dsub>
 80126e6:	9a06      	ldr	r2, [sp, #24]
 80126e8:	9b06      	ldr	r3, [sp, #24]
 80126ea:	4694      	mov	ip, r2
 80126ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80126ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126f0:	9010      	str	r0, [sp, #64]	; 0x40
 80126f2:	9111      	str	r1, [sp, #68]	; 0x44
 80126f4:	4463      	add	r3, ip
 80126f6:	9319      	str	r3, [sp, #100]	; 0x64
 80126f8:	0029      	movs	r1, r5
 80126fa:	0020      	movs	r0, r4
 80126fc:	f7f0 f8be 	bl	800287c <__aeabi_d2iz>
 8012700:	9014      	str	r0, [sp, #80]	; 0x50
 8012702:	f7f0 f8f1 	bl	80028e8 <__aeabi_i2d>
 8012706:	0002      	movs	r2, r0
 8012708:	000b      	movs	r3, r1
 801270a:	0020      	movs	r0, r4
 801270c:	0029      	movs	r1, r5
 801270e:	f7ef fd05 	bl	800211c <__aeabi_dsub>
 8012712:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012716:	3301      	adds	r3, #1
 8012718:	9308      	str	r3, [sp, #32]
 801271a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801271c:	0004      	movs	r4, r0
 801271e:	3330      	adds	r3, #48	; 0x30
 8012720:	7013      	strb	r3, [r2, #0]
 8012722:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012726:	000d      	movs	r5, r1
 8012728:	f7ed fe96 	bl	8000458 <__aeabi_dcmplt>
 801272c:	2800      	cmp	r0, #0
 801272e:	d175      	bne.n	801281c <_dtoa_r+0x67c>
 8012730:	0022      	movs	r2, r4
 8012732:	002b      	movs	r3, r5
 8012734:	2000      	movs	r0, #0
 8012736:	4940      	ldr	r1, [pc, #256]	; (8012838 <_dtoa_r+0x698>)
 8012738:	f7ef fcf0 	bl	800211c <__aeabi_dsub>
 801273c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801273e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012740:	f7ed fe8a 	bl	8000458 <__aeabi_dcmplt>
 8012744:	2800      	cmp	r0, #0
 8012746:	d000      	beq.n	801274a <_dtoa_r+0x5aa>
 8012748:	e0d2      	b.n	80128f0 <_dtoa_r+0x750>
 801274a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801274c:	9a08      	ldr	r2, [sp, #32]
 801274e:	4293      	cmp	r3, r2
 8012750:	d100      	bne.n	8012754 <_dtoa_r+0x5b4>
 8012752:	e770      	b.n	8012636 <_dtoa_r+0x496>
 8012754:	9810      	ldr	r0, [sp, #64]	; 0x40
 8012756:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012758:	2200      	movs	r2, #0
 801275a:	4b38      	ldr	r3, [pc, #224]	; (801283c <_dtoa_r+0x69c>)
 801275c:	f7ef fa72 	bl	8001c44 <__aeabi_dmul>
 8012760:	4b36      	ldr	r3, [pc, #216]	; (801283c <_dtoa_r+0x69c>)
 8012762:	9010      	str	r0, [sp, #64]	; 0x40
 8012764:	9111      	str	r1, [sp, #68]	; 0x44
 8012766:	2200      	movs	r2, #0
 8012768:	0020      	movs	r0, r4
 801276a:	0029      	movs	r1, r5
 801276c:	f7ef fa6a 	bl	8001c44 <__aeabi_dmul>
 8012770:	9b08      	ldr	r3, [sp, #32]
 8012772:	0004      	movs	r4, r0
 8012774:	000d      	movs	r5, r1
 8012776:	9317      	str	r3, [sp, #92]	; 0x5c
 8012778:	e7be      	b.n	80126f8 <_dtoa_r+0x558>
 801277a:	9808      	ldr	r0, [sp, #32]
 801277c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801277e:	f7ef fa61 	bl	8001c44 <__aeabi_dmul>
 8012782:	9a06      	ldr	r2, [sp, #24]
 8012784:	9b06      	ldr	r3, [sp, #24]
 8012786:	4694      	mov	ip, r2
 8012788:	9308      	str	r3, [sp, #32]
 801278a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801278c:	9010      	str	r0, [sp, #64]	; 0x40
 801278e:	9111      	str	r1, [sp, #68]	; 0x44
 8012790:	4463      	add	r3, ip
 8012792:	9319      	str	r3, [sp, #100]	; 0x64
 8012794:	0029      	movs	r1, r5
 8012796:	0020      	movs	r0, r4
 8012798:	f7f0 f870 	bl	800287c <__aeabi_d2iz>
 801279c:	9017      	str	r0, [sp, #92]	; 0x5c
 801279e:	f7f0 f8a3 	bl	80028e8 <__aeabi_i2d>
 80127a2:	0002      	movs	r2, r0
 80127a4:	000b      	movs	r3, r1
 80127a6:	0020      	movs	r0, r4
 80127a8:	0029      	movs	r1, r5
 80127aa:	f7ef fcb7 	bl	800211c <__aeabi_dsub>
 80127ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80127b0:	9a08      	ldr	r2, [sp, #32]
 80127b2:	3330      	adds	r3, #48	; 0x30
 80127b4:	7013      	strb	r3, [r2, #0]
 80127b6:	0013      	movs	r3, r2
 80127b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80127ba:	3301      	adds	r3, #1
 80127bc:	0004      	movs	r4, r0
 80127be:	000d      	movs	r5, r1
 80127c0:	9308      	str	r3, [sp, #32]
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d12c      	bne.n	8012820 <_dtoa_r+0x680>
 80127c6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80127c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80127ca:	9a06      	ldr	r2, [sp, #24]
 80127cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80127ce:	4694      	mov	ip, r2
 80127d0:	4463      	add	r3, ip
 80127d2:	2200      	movs	r2, #0
 80127d4:	9308      	str	r3, [sp, #32]
 80127d6:	4b1e      	ldr	r3, [pc, #120]	; (8012850 <_dtoa_r+0x6b0>)
 80127d8:	f7ee faf6 	bl	8000dc8 <__aeabi_dadd>
 80127dc:	0002      	movs	r2, r0
 80127de:	000b      	movs	r3, r1
 80127e0:	0020      	movs	r0, r4
 80127e2:	0029      	movs	r1, r5
 80127e4:	f7ed fe4c 	bl	8000480 <__aeabi_dcmpgt>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d000      	beq.n	80127ee <_dtoa_r+0x64e>
 80127ec:	e080      	b.n	80128f0 <_dtoa_r+0x750>
 80127ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80127f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80127f2:	2000      	movs	r0, #0
 80127f4:	4916      	ldr	r1, [pc, #88]	; (8012850 <_dtoa_r+0x6b0>)
 80127f6:	f7ef fc91 	bl	800211c <__aeabi_dsub>
 80127fa:	0002      	movs	r2, r0
 80127fc:	000b      	movs	r3, r1
 80127fe:	0020      	movs	r0, r4
 8012800:	0029      	movs	r1, r5
 8012802:	f7ed fe29 	bl	8000458 <__aeabi_dcmplt>
 8012806:	2800      	cmp	r0, #0
 8012808:	d100      	bne.n	801280c <_dtoa_r+0x66c>
 801280a:	e714      	b.n	8012636 <_dtoa_r+0x496>
 801280c:	9b08      	ldr	r3, [sp, #32]
 801280e:	001a      	movs	r2, r3
 8012810:	3a01      	subs	r2, #1
 8012812:	9208      	str	r2, [sp, #32]
 8012814:	7812      	ldrb	r2, [r2, #0]
 8012816:	2a30      	cmp	r2, #48	; 0x30
 8012818:	d0f8      	beq.n	801280c <_dtoa_r+0x66c>
 801281a:	9308      	str	r3, [sp, #32]
 801281c:	9602      	str	r6, [sp, #8]
 801281e:	e055      	b.n	80128cc <_dtoa_r+0x72c>
 8012820:	2200      	movs	r2, #0
 8012822:	4b06      	ldr	r3, [pc, #24]	; (801283c <_dtoa_r+0x69c>)
 8012824:	f7ef fa0e 	bl	8001c44 <__aeabi_dmul>
 8012828:	0004      	movs	r4, r0
 801282a:	000d      	movs	r5, r1
 801282c:	e7b2      	b.n	8012794 <_dtoa_r+0x5f4>
 801282e:	46c0      	nop			; (mov r8, r8)
 8012830:	08016228 	.word	0x08016228
 8012834:	08016200 	.word	0x08016200
 8012838:	3ff00000 	.word	0x3ff00000
 801283c:	40240000 	.word	0x40240000
 8012840:	401c0000 	.word	0x401c0000
 8012844:	fcc00000 	.word	0xfcc00000
 8012848:	40140000 	.word	0x40140000
 801284c:	7cc00000 	.word	0x7cc00000
 8012850:	3fe00000 	.word	0x3fe00000
 8012854:	9b07      	ldr	r3, [sp, #28]
 8012856:	9e06      	ldr	r6, [sp, #24]
 8012858:	3b01      	subs	r3, #1
 801285a:	199b      	adds	r3, r3, r6
 801285c:	930c      	str	r3, [sp, #48]	; 0x30
 801285e:	9c08      	ldr	r4, [sp, #32]
 8012860:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012866:	0020      	movs	r0, r4
 8012868:	0029      	movs	r1, r5
 801286a:	f7ee fde9 	bl	8001440 <__aeabi_ddiv>
 801286e:	f7f0 f805 	bl	800287c <__aeabi_d2iz>
 8012872:	9007      	str	r0, [sp, #28]
 8012874:	f7f0 f838 	bl	80028e8 <__aeabi_i2d>
 8012878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801287a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801287c:	f7ef f9e2 	bl	8001c44 <__aeabi_dmul>
 8012880:	0002      	movs	r2, r0
 8012882:	000b      	movs	r3, r1
 8012884:	0020      	movs	r0, r4
 8012886:	0029      	movs	r1, r5
 8012888:	f7ef fc48 	bl	800211c <__aeabi_dsub>
 801288c:	0033      	movs	r3, r6
 801288e:	9a07      	ldr	r2, [sp, #28]
 8012890:	3601      	adds	r6, #1
 8012892:	3230      	adds	r2, #48	; 0x30
 8012894:	701a      	strb	r2, [r3, #0]
 8012896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012898:	9608      	str	r6, [sp, #32]
 801289a:	429a      	cmp	r2, r3
 801289c:	d139      	bne.n	8012912 <_dtoa_r+0x772>
 801289e:	0002      	movs	r2, r0
 80128a0:	000b      	movs	r3, r1
 80128a2:	f7ee fa91 	bl	8000dc8 <__aeabi_dadd>
 80128a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128aa:	0004      	movs	r4, r0
 80128ac:	000d      	movs	r5, r1
 80128ae:	f7ed fde7 	bl	8000480 <__aeabi_dcmpgt>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	d11b      	bne.n	80128ee <_dtoa_r+0x74e>
 80128b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ba:	0020      	movs	r0, r4
 80128bc:	0029      	movs	r1, r5
 80128be:	f7ed fdc5 	bl	800044c <__aeabi_dcmpeq>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d002      	beq.n	80128cc <_dtoa_r+0x72c>
 80128c6:	9b07      	ldr	r3, [sp, #28]
 80128c8:	07db      	lsls	r3, r3, #31
 80128ca:	d410      	bmi.n	80128ee <_dtoa_r+0x74e>
 80128cc:	0038      	movs	r0, r7
 80128ce:	9905      	ldr	r1, [sp, #20]
 80128d0:	f000 fbce 	bl	8013070 <_Bfree>
 80128d4:	2300      	movs	r3, #0
 80128d6:	9a08      	ldr	r2, [sp, #32]
 80128d8:	9802      	ldr	r0, [sp, #8]
 80128da:	7013      	strb	r3, [r2, #0]
 80128dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80128de:	3001      	adds	r0, #1
 80128e0:	6018      	str	r0, [r3, #0]
 80128e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d100      	bne.n	80128ea <_dtoa_r+0x74a>
 80128e8:	e4a6      	b.n	8012238 <_dtoa_r+0x98>
 80128ea:	601a      	str	r2, [r3, #0]
 80128ec:	e4a4      	b.n	8012238 <_dtoa_r+0x98>
 80128ee:	9e02      	ldr	r6, [sp, #8]
 80128f0:	9b08      	ldr	r3, [sp, #32]
 80128f2:	9308      	str	r3, [sp, #32]
 80128f4:	3b01      	subs	r3, #1
 80128f6:	781a      	ldrb	r2, [r3, #0]
 80128f8:	2a39      	cmp	r2, #57	; 0x39
 80128fa:	d106      	bne.n	801290a <_dtoa_r+0x76a>
 80128fc:	9a06      	ldr	r2, [sp, #24]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d1f7      	bne.n	80128f2 <_dtoa_r+0x752>
 8012902:	2230      	movs	r2, #48	; 0x30
 8012904:	9906      	ldr	r1, [sp, #24]
 8012906:	3601      	adds	r6, #1
 8012908:	700a      	strb	r2, [r1, #0]
 801290a:	781a      	ldrb	r2, [r3, #0]
 801290c:	3201      	adds	r2, #1
 801290e:	701a      	strb	r2, [r3, #0]
 8012910:	e784      	b.n	801281c <_dtoa_r+0x67c>
 8012912:	2200      	movs	r2, #0
 8012914:	4baa      	ldr	r3, [pc, #680]	; (8012bc0 <_dtoa_r+0xa20>)
 8012916:	f7ef f995 	bl	8001c44 <__aeabi_dmul>
 801291a:	2200      	movs	r2, #0
 801291c:	2300      	movs	r3, #0
 801291e:	0004      	movs	r4, r0
 8012920:	000d      	movs	r5, r1
 8012922:	f7ed fd93 	bl	800044c <__aeabi_dcmpeq>
 8012926:	2800      	cmp	r0, #0
 8012928:	d09b      	beq.n	8012862 <_dtoa_r+0x6c2>
 801292a:	e7cf      	b.n	80128cc <_dtoa_r+0x72c>
 801292c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801292e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012930:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012932:	2d00      	cmp	r5, #0
 8012934:	d012      	beq.n	801295c <_dtoa_r+0x7bc>
 8012936:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012938:	2a01      	cmp	r2, #1
 801293a:	dc66      	bgt.n	8012a0a <_dtoa_r+0x86a>
 801293c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801293e:	2a00      	cmp	r2, #0
 8012940:	d05d      	beq.n	80129fe <_dtoa_r+0x85e>
 8012942:	4aa0      	ldr	r2, [pc, #640]	; (8012bc4 <_dtoa_r+0xa24>)
 8012944:	189b      	adds	r3, r3, r2
 8012946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012948:	2101      	movs	r1, #1
 801294a:	18d2      	adds	r2, r2, r3
 801294c:	920a      	str	r2, [sp, #40]	; 0x28
 801294e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012950:	0038      	movs	r0, r7
 8012952:	18d3      	adds	r3, r2, r3
 8012954:	930d      	str	r3, [sp, #52]	; 0x34
 8012956:	f000 fc3b 	bl	80131d0 <__i2b>
 801295a:	0005      	movs	r5, r0
 801295c:	2c00      	cmp	r4, #0
 801295e:	dd0e      	ble.n	801297e <_dtoa_r+0x7de>
 8012960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012962:	2b00      	cmp	r3, #0
 8012964:	dd0b      	ble.n	801297e <_dtoa_r+0x7de>
 8012966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012968:	0023      	movs	r3, r4
 801296a:	4294      	cmp	r4, r2
 801296c:	dd00      	ble.n	8012970 <_dtoa_r+0x7d0>
 801296e:	0013      	movs	r3, r2
 8012970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012972:	1ae4      	subs	r4, r4, r3
 8012974:	1ad2      	subs	r2, r2, r3
 8012976:	920a      	str	r2, [sp, #40]	; 0x28
 8012978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	930d      	str	r3, [sp, #52]	; 0x34
 801297e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012980:	2b00      	cmp	r3, #0
 8012982:	d01f      	beq.n	80129c4 <_dtoa_r+0x824>
 8012984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012986:	2b00      	cmp	r3, #0
 8012988:	d054      	beq.n	8012a34 <_dtoa_r+0x894>
 801298a:	2e00      	cmp	r6, #0
 801298c:	dd11      	ble.n	80129b2 <_dtoa_r+0x812>
 801298e:	0029      	movs	r1, r5
 8012990:	0032      	movs	r2, r6
 8012992:	0038      	movs	r0, r7
 8012994:	f000 fce2 	bl	801335c <__pow5mult>
 8012998:	9a05      	ldr	r2, [sp, #20]
 801299a:	0001      	movs	r1, r0
 801299c:	0005      	movs	r5, r0
 801299e:	0038      	movs	r0, r7
 80129a0:	f000 fc2c 	bl	80131fc <__multiply>
 80129a4:	9905      	ldr	r1, [sp, #20]
 80129a6:	9014      	str	r0, [sp, #80]	; 0x50
 80129a8:	0038      	movs	r0, r7
 80129aa:	f000 fb61 	bl	8013070 <_Bfree>
 80129ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129b0:	9305      	str	r3, [sp, #20]
 80129b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129b4:	1b9a      	subs	r2, r3, r6
 80129b6:	42b3      	cmp	r3, r6
 80129b8:	d004      	beq.n	80129c4 <_dtoa_r+0x824>
 80129ba:	0038      	movs	r0, r7
 80129bc:	9905      	ldr	r1, [sp, #20]
 80129be:	f000 fccd 	bl	801335c <__pow5mult>
 80129c2:	9005      	str	r0, [sp, #20]
 80129c4:	2101      	movs	r1, #1
 80129c6:	0038      	movs	r0, r7
 80129c8:	f000 fc02 	bl	80131d0 <__i2b>
 80129cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80129ce:	0006      	movs	r6, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	dd31      	ble.n	8012a38 <_dtoa_r+0x898>
 80129d4:	001a      	movs	r2, r3
 80129d6:	0001      	movs	r1, r0
 80129d8:	0038      	movs	r0, r7
 80129da:	f000 fcbf 	bl	801335c <__pow5mult>
 80129de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80129e0:	0006      	movs	r6, r0
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	dd2d      	ble.n	8012a42 <_dtoa_r+0x8a2>
 80129e6:	2300      	movs	r3, #0
 80129e8:	930e      	str	r3, [sp, #56]	; 0x38
 80129ea:	6933      	ldr	r3, [r6, #16]
 80129ec:	3303      	adds	r3, #3
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	18f3      	adds	r3, r6, r3
 80129f2:	6858      	ldr	r0, [r3, #4]
 80129f4:	f000 fba4 	bl	8013140 <__hi0bits>
 80129f8:	2320      	movs	r3, #32
 80129fa:	1a18      	subs	r0, r3, r0
 80129fc:	e039      	b.n	8012a72 <_dtoa_r+0x8d2>
 80129fe:	2336      	movs	r3, #54	; 0x36
 8012a00:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012a02:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012a04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012a06:	1a9b      	subs	r3, r3, r2
 8012a08:	e79d      	b.n	8012946 <_dtoa_r+0x7a6>
 8012a0a:	9b07      	ldr	r3, [sp, #28]
 8012a0c:	1e5e      	subs	r6, r3, #1
 8012a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a10:	42b3      	cmp	r3, r6
 8012a12:	db07      	blt.n	8012a24 <_dtoa_r+0x884>
 8012a14:	1b9e      	subs	r6, r3, r6
 8012a16:	9b07      	ldr	r3, [sp, #28]
 8012a18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	da93      	bge.n	8012946 <_dtoa_r+0x7a6>
 8012a1e:	1ae4      	subs	r4, r4, r3
 8012a20:	2300      	movs	r3, #0
 8012a22:	e790      	b.n	8012946 <_dtoa_r+0x7a6>
 8012a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a28:	1af3      	subs	r3, r6, r3
 8012a2a:	18d3      	adds	r3, r2, r3
 8012a2c:	960e      	str	r6, [sp, #56]	; 0x38
 8012a2e:	9315      	str	r3, [sp, #84]	; 0x54
 8012a30:	2600      	movs	r6, #0
 8012a32:	e7f0      	b.n	8012a16 <_dtoa_r+0x876>
 8012a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a36:	e7c0      	b.n	80129ba <_dtoa_r+0x81a>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8012a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	dc13      	bgt.n	8012a6a <_dtoa_r+0x8ca>
 8012a42:	2300      	movs	r3, #0
 8012a44:	930e      	str	r3, [sp, #56]	; 0x38
 8012a46:	9b08      	ldr	r3, [sp, #32]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d10e      	bne.n	8012a6a <_dtoa_r+0x8ca>
 8012a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a4e:	031b      	lsls	r3, r3, #12
 8012a50:	d10b      	bne.n	8012a6a <_dtoa_r+0x8ca>
 8012a52:	4b5d      	ldr	r3, [pc, #372]	; (8012bc8 <_dtoa_r+0xa28>)
 8012a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a56:	4213      	tst	r3, r2
 8012a58:	d007      	beq.n	8012a6a <_dtoa_r+0x8ca>
 8012a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8012a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a62:	3301      	adds	r3, #1
 8012a64:	930d      	str	r3, [sp, #52]	; 0x34
 8012a66:	2301      	movs	r3, #1
 8012a68:	930e      	str	r3, [sp, #56]	; 0x38
 8012a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012a6c:	2001      	movs	r0, #1
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1bb      	bne.n	80129ea <_dtoa_r+0x84a>
 8012a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a74:	221f      	movs	r2, #31
 8012a76:	1818      	adds	r0, r3, r0
 8012a78:	0003      	movs	r3, r0
 8012a7a:	4013      	ands	r3, r2
 8012a7c:	4210      	tst	r0, r2
 8012a7e:	d046      	beq.n	8012b0e <_dtoa_r+0x96e>
 8012a80:	3201      	adds	r2, #1
 8012a82:	1ad2      	subs	r2, r2, r3
 8012a84:	2a04      	cmp	r2, #4
 8012a86:	dd3f      	ble.n	8012b08 <_dtoa_r+0x968>
 8012a88:	221c      	movs	r2, #28
 8012a8a:	1ad3      	subs	r3, r2, r3
 8012a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a8e:	18e4      	adds	r4, r4, r3
 8012a90:	18d2      	adds	r2, r2, r3
 8012a92:	920a      	str	r2, [sp, #40]	; 0x28
 8012a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a96:	18d3      	adds	r3, r2, r3
 8012a98:	930d      	str	r3, [sp, #52]	; 0x34
 8012a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	dd05      	ble.n	8012aac <_dtoa_r+0x90c>
 8012aa0:	001a      	movs	r2, r3
 8012aa2:	0038      	movs	r0, r7
 8012aa4:	9905      	ldr	r1, [sp, #20]
 8012aa6:	f000 fcb5 	bl	8013414 <__lshift>
 8012aaa:	9005      	str	r0, [sp, #20]
 8012aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	dd05      	ble.n	8012abe <_dtoa_r+0x91e>
 8012ab2:	0031      	movs	r1, r6
 8012ab4:	001a      	movs	r2, r3
 8012ab6:	0038      	movs	r0, r7
 8012ab8:	f000 fcac 	bl	8013414 <__lshift>
 8012abc:	0006      	movs	r6, r0
 8012abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d026      	beq.n	8012b12 <_dtoa_r+0x972>
 8012ac4:	0031      	movs	r1, r6
 8012ac6:	9805      	ldr	r0, [sp, #20]
 8012ac8:	f000 fd12 	bl	80134f0 <__mcmp>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	da20      	bge.n	8012b12 <_dtoa_r+0x972>
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	220a      	movs	r2, #10
 8012ad4:	3b01      	subs	r3, #1
 8012ad6:	9302      	str	r3, [sp, #8]
 8012ad8:	0038      	movs	r0, r7
 8012ada:	2300      	movs	r3, #0
 8012adc:	9905      	ldr	r1, [sp, #20]
 8012ade:	f000 faeb 	bl	80130b8 <__multadd>
 8012ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ae4:	9005      	str	r0, [sp, #20]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d100      	bne.n	8012aec <_dtoa_r+0x94c>
 8012aea:	e166      	b.n	8012dba <_dtoa_r+0xc1a>
 8012aec:	2300      	movs	r3, #0
 8012aee:	0029      	movs	r1, r5
 8012af0:	220a      	movs	r2, #10
 8012af2:	0038      	movs	r0, r7
 8012af4:	f000 fae0 	bl	80130b8 <__multadd>
 8012af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012afa:	0005      	movs	r5, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	dc47      	bgt.n	8012b90 <_dtoa_r+0x9f0>
 8012b00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012b02:	2b02      	cmp	r3, #2
 8012b04:	dc0d      	bgt.n	8012b22 <_dtoa_r+0x982>
 8012b06:	e043      	b.n	8012b90 <_dtoa_r+0x9f0>
 8012b08:	2a04      	cmp	r2, #4
 8012b0a:	d0c6      	beq.n	8012a9a <_dtoa_r+0x8fa>
 8012b0c:	0013      	movs	r3, r2
 8012b0e:	331c      	adds	r3, #28
 8012b10:	e7bc      	b.n	8012a8c <_dtoa_r+0x8ec>
 8012b12:	9b07      	ldr	r3, [sp, #28]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	dc35      	bgt.n	8012b84 <_dtoa_r+0x9e4>
 8012b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	dd32      	ble.n	8012b84 <_dtoa_r+0x9e4>
 8012b1e:	9b07      	ldr	r3, [sp, #28]
 8012b20:	930c      	str	r3, [sp, #48]	; 0x30
 8012b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d10c      	bne.n	8012b42 <_dtoa_r+0x9a2>
 8012b28:	0031      	movs	r1, r6
 8012b2a:	2205      	movs	r2, #5
 8012b2c:	0038      	movs	r0, r7
 8012b2e:	f000 fac3 	bl	80130b8 <__multadd>
 8012b32:	0006      	movs	r6, r0
 8012b34:	0001      	movs	r1, r0
 8012b36:	9805      	ldr	r0, [sp, #20]
 8012b38:	f000 fcda 	bl	80134f0 <__mcmp>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	dd00      	ble.n	8012b42 <_dtoa_r+0x9a2>
 8012b40:	e5a5      	b.n	801268e <_dtoa_r+0x4ee>
 8012b42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012b44:	43db      	mvns	r3, r3
 8012b46:	9302      	str	r3, [sp, #8]
 8012b48:	9b06      	ldr	r3, [sp, #24]
 8012b4a:	9308      	str	r3, [sp, #32]
 8012b4c:	2400      	movs	r4, #0
 8012b4e:	0031      	movs	r1, r6
 8012b50:	0038      	movs	r0, r7
 8012b52:	f000 fa8d 	bl	8013070 <_Bfree>
 8012b56:	2d00      	cmp	r5, #0
 8012b58:	d100      	bne.n	8012b5c <_dtoa_r+0x9bc>
 8012b5a:	e6b7      	b.n	80128cc <_dtoa_r+0x72c>
 8012b5c:	2c00      	cmp	r4, #0
 8012b5e:	d005      	beq.n	8012b6c <_dtoa_r+0x9cc>
 8012b60:	42ac      	cmp	r4, r5
 8012b62:	d003      	beq.n	8012b6c <_dtoa_r+0x9cc>
 8012b64:	0021      	movs	r1, r4
 8012b66:	0038      	movs	r0, r7
 8012b68:	f000 fa82 	bl	8013070 <_Bfree>
 8012b6c:	0029      	movs	r1, r5
 8012b6e:	0038      	movs	r0, r7
 8012b70:	f000 fa7e 	bl	8013070 <_Bfree>
 8012b74:	e6aa      	b.n	80128cc <_dtoa_r+0x72c>
 8012b76:	2600      	movs	r6, #0
 8012b78:	0035      	movs	r5, r6
 8012b7a:	e7e2      	b.n	8012b42 <_dtoa_r+0x9a2>
 8012b7c:	9602      	str	r6, [sp, #8]
 8012b7e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012b80:	0035      	movs	r5, r6
 8012b82:	e584      	b.n	801268e <_dtoa_r+0x4ee>
 8012b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d100      	bne.n	8012b8c <_dtoa_r+0x9ec>
 8012b8a:	e0ce      	b.n	8012d2a <_dtoa_r+0xb8a>
 8012b8c:	9b07      	ldr	r3, [sp, #28]
 8012b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	dd05      	ble.n	8012ba0 <_dtoa_r+0xa00>
 8012b94:	0029      	movs	r1, r5
 8012b96:	0022      	movs	r2, r4
 8012b98:	0038      	movs	r0, r7
 8012b9a:	f000 fc3b 	bl	8013414 <__lshift>
 8012b9e:	0005      	movs	r5, r0
 8012ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ba2:	0028      	movs	r0, r5
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d022      	beq.n	8012bee <_dtoa_r+0xa4e>
 8012ba8:	0038      	movs	r0, r7
 8012baa:	6869      	ldr	r1, [r5, #4]
 8012bac:	f000 fa1c 	bl	8012fe8 <_Balloc>
 8012bb0:	1e04      	subs	r4, r0, #0
 8012bb2:	d10f      	bne.n	8012bd4 <_dtoa_r+0xa34>
 8012bb4:	0002      	movs	r2, r0
 8012bb6:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <_dtoa_r+0xa2c>)
 8012bb8:	4905      	ldr	r1, [pc, #20]	; (8012bd0 <_dtoa_r+0xa30>)
 8012bba:	f7ff fb06 	bl	80121ca <_dtoa_r+0x2a>
 8012bbe:	46c0      	nop			; (mov r8, r8)
 8012bc0:	40240000 	.word	0x40240000
 8012bc4:	00000433 	.word	0x00000433
 8012bc8:	7ff00000 	.word	0x7ff00000
 8012bcc:	0801618f 	.word	0x0801618f
 8012bd0:	000002ea 	.word	0x000002ea
 8012bd4:	0029      	movs	r1, r5
 8012bd6:	692b      	ldr	r3, [r5, #16]
 8012bd8:	310c      	adds	r1, #12
 8012bda:	1c9a      	adds	r2, r3, #2
 8012bdc:	0092      	lsls	r2, r2, #2
 8012bde:	300c      	adds	r0, #12
 8012be0:	f7fe fc23 	bl	801142a <memcpy>
 8012be4:	2201      	movs	r2, #1
 8012be6:	0021      	movs	r1, r4
 8012be8:	0038      	movs	r0, r7
 8012bea:	f000 fc13 	bl	8013414 <__lshift>
 8012bee:	9b06      	ldr	r3, [sp, #24]
 8012bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8012bf4:	3b01      	subs	r3, #1
 8012bf6:	189b      	adds	r3, r3, r2
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	002c      	movs	r4, r5
 8012bfc:	0005      	movs	r5, r0
 8012bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8012c00:	9b08      	ldr	r3, [sp, #32]
 8012c02:	4013      	ands	r3, r2
 8012c04:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c06:	0031      	movs	r1, r6
 8012c08:	9805      	ldr	r0, [sp, #20]
 8012c0a:	f7ff fa3d 	bl	8012088 <quorem>
 8012c0e:	0003      	movs	r3, r0
 8012c10:	0021      	movs	r1, r4
 8012c12:	3330      	adds	r3, #48	; 0x30
 8012c14:	900d      	str	r0, [sp, #52]	; 0x34
 8012c16:	9805      	ldr	r0, [sp, #20]
 8012c18:	9307      	str	r3, [sp, #28]
 8012c1a:	f000 fc69 	bl	80134f0 <__mcmp>
 8012c1e:	002a      	movs	r2, r5
 8012c20:	900e      	str	r0, [sp, #56]	; 0x38
 8012c22:	0031      	movs	r1, r6
 8012c24:	0038      	movs	r0, r7
 8012c26:	f000 fc7f 	bl	8013528 <__mdiff>
 8012c2a:	68c3      	ldr	r3, [r0, #12]
 8012c2c:	9008      	str	r0, [sp, #32]
 8012c2e:	9310      	str	r3, [sp, #64]	; 0x40
 8012c30:	2301      	movs	r3, #1
 8012c32:	930c      	str	r3, [sp, #48]	; 0x30
 8012c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d104      	bne.n	8012c44 <_dtoa_r+0xaa4>
 8012c3a:	0001      	movs	r1, r0
 8012c3c:	9805      	ldr	r0, [sp, #20]
 8012c3e:	f000 fc57 	bl	80134f0 <__mcmp>
 8012c42:	900c      	str	r0, [sp, #48]	; 0x30
 8012c44:	0038      	movs	r0, r7
 8012c46:	9908      	ldr	r1, [sp, #32]
 8012c48:	f000 fa12 	bl	8013070 <_Bfree>
 8012c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c50:	3301      	adds	r3, #1
 8012c52:	9308      	str	r3, [sp, #32]
 8012c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012c56:	4313      	orrs	r3, r2
 8012c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c5a:	4313      	orrs	r3, r2
 8012c5c:	d10c      	bne.n	8012c78 <_dtoa_r+0xad8>
 8012c5e:	9b07      	ldr	r3, [sp, #28]
 8012c60:	2b39      	cmp	r3, #57	; 0x39
 8012c62:	d026      	beq.n	8012cb2 <_dtoa_r+0xb12>
 8012c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	dd02      	ble.n	8012c70 <_dtoa_r+0xad0>
 8012c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c6c:	3331      	adds	r3, #49	; 0x31
 8012c6e:	9307      	str	r3, [sp, #28]
 8012c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c72:	9a07      	ldr	r2, [sp, #28]
 8012c74:	701a      	strb	r2, [r3, #0]
 8012c76:	e76a      	b.n	8012b4e <_dtoa_r+0x9ae>
 8012c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	db04      	blt.n	8012c88 <_dtoa_r+0xae8>
 8012c7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012c80:	4313      	orrs	r3, r2
 8012c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c84:	4313      	orrs	r3, r2
 8012c86:	d11f      	bne.n	8012cc8 <_dtoa_r+0xb28>
 8012c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	ddf0      	ble.n	8012c70 <_dtoa_r+0xad0>
 8012c8e:	9905      	ldr	r1, [sp, #20]
 8012c90:	2201      	movs	r2, #1
 8012c92:	0038      	movs	r0, r7
 8012c94:	f000 fbbe 	bl	8013414 <__lshift>
 8012c98:	0031      	movs	r1, r6
 8012c9a:	9005      	str	r0, [sp, #20]
 8012c9c:	f000 fc28 	bl	80134f0 <__mcmp>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	dc03      	bgt.n	8012cac <_dtoa_r+0xb0c>
 8012ca4:	d1e4      	bne.n	8012c70 <_dtoa_r+0xad0>
 8012ca6:	9b07      	ldr	r3, [sp, #28]
 8012ca8:	07db      	lsls	r3, r3, #31
 8012caa:	d5e1      	bpl.n	8012c70 <_dtoa_r+0xad0>
 8012cac:	9b07      	ldr	r3, [sp, #28]
 8012cae:	2b39      	cmp	r3, #57	; 0x39
 8012cb0:	d1db      	bne.n	8012c6a <_dtoa_r+0xaca>
 8012cb2:	2339      	movs	r3, #57	; 0x39
 8012cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cb6:	7013      	strb	r3, [r2, #0]
 8012cb8:	9b08      	ldr	r3, [sp, #32]
 8012cba:	9308      	str	r3, [sp, #32]
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	781a      	ldrb	r2, [r3, #0]
 8012cc0:	2a39      	cmp	r2, #57	; 0x39
 8012cc2:	d068      	beq.n	8012d96 <_dtoa_r+0xbf6>
 8012cc4:	3201      	adds	r2, #1
 8012cc6:	e7d5      	b.n	8012c74 <_dtoa_r+0xad4>
 8012cc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	dd07      	ble.n	8012cde <_dtoa_r+0xb3e>
 8012cce:	9b07      	ldr	r3, [sp, #28]
 8012cd0:	2b39      	cmp	r3, #57	; 0x39
 8012cd2:	d0ee      	beq.n	8012cb2 <_dtoa_r+0xb12>
 8012cd4:	9b07      	ldr	r3, [sp, #28]
 8012cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cd8:	3301      	adds	r3, #1
 8012cda:	7013      	strb	r3, [r2, #0]
 8012cdc:	e737      	b.n	8012b4e <_dtoa_r+0x9ae>
 8012cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ce0:	9a07      	ldr	r2, [sp, #28]
 8012ce2:	701a      	strb	r2, [r3, #0]
 8012ce4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012ce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	d03e      	beq.n	8012d6a <_dtoa_r+0xbca>
 8012cec:	2300      	movs	r3, #0
 8012cee:	220a      	movs	r2, #10
 8012cf0:	9905      	ldr	r1, [sp, #20]
 8012cf2:	0038      	movs	r0, r7
 8012cf4:	f000 f9e0 	bl	80130b8 <__multadd>
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	9005      	str	r0, [sp, #20]
 8012cfc:	220a      	movs	r2, #10
 8012cfe:	0021      	movs	r1, r4
 8012d00:	0038      	movs	r0, r7
 8012d02:	42ac      	cmp	r4, r5
 8012d04:	d106      	bne.n	8012d14 <_dtoa_r+0xb74>
 8012d06:	f000 f9d7 	bl	80130b8 <__multadd>
 8012d0a:	0004      	movs	r4, r0
 8012d0c:	0005      	movs	r5, r0
 8012d0e:	9b08      	ldr	r3, [sp, #32]
 8012d10:	930a      	str	r3, [sp, #40]	; 0x28
 8012d12:	e778      	b.n	8012c06 <_dtoa_r+0xa66>
 8012d14:	f000 f9d0 	bl	80130b8 <__multadd>
 8012d18:	0029      	movs	r1, r5
 8012d1a:	0004      	movs	r4, r0
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	220a      	movs	r2, #10
 8012d20:	0038      	movs	r0, r7
 8012d22:	f000 f9c9 	bl	80130b8 <__multadd>
 8012d26:	0005      	movs	r5, r0
 8012d28:	e7f1      	b.n	8012d0e <_dtoa_r+0xb6e>
 8012d2a:	9b07      	ldr	r3, [sp, #28]
 8012d2c:	930c      	str	r3, [sp, #48]	; 0x30
 8012d2e:	2400      	movs	r4, #0
 8012d30:	0031      	movs	r1, r6
 8012d32:	9805      	ldr	r0, [sp, #20]
 8012d34:	f7ff f9a8 	bl	8012088 <quorem>
 8012d38:	9b06      	ldr	r3, [sp, #24]
 8012d3a:	3030      	adds	r0, #48	; 0x30
 8012d3c:	5518      	strb	r0, [r3, r4]
 8012d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d40:	3401      	adds	r4, #1
 8012d42:	9007      	str	r0, [sp, #28]
 8012d44:	42a3      	cmp	r3, r4
 8012d46:	dd07      	ble.n	8012d58 <_dtoa_r+0xbb8>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	220a      	movs	r2, #10
 8012d4c:	0038      	movs	r0, r7
 8012d4e:	9905      	ldr	r1, [sp, #20]
 8012d50:	f000 f9b2 	bl	80130b8 <__multadd>
 8012d54:	9005      	str	r0, [sp, #20]
 8012d56:	e7eb      	b.n	8012d30 <_dtoa_r+0xb90>
 8012d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d5a:	2001      	movs	r0, #1
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	dd00      	ble.n	8012d62 <_dtoa_r+0xbc2>
 8012d60:	0018      	movs	r0, r3
 8012d62:	2400      	movs	r4, #0
 8012d64:	9b06      	ldr	r3, [sp, #24]
 8012d66:	181b      	adds	r3, r3, r0
 8012d68:	9308      	str	r3, [sp, #32]
 8012d6a:	9905      	ldr	r1, [sp, #20]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	0038      	movs	r0, r7
 8012d70:	f000 fb50 	bl	8013414 <__lshift>
 8012d74:	0031      	movs	r1, r6
 8012d76:	9005      	str	r0, [sp, #20]
 8012d78:	f000 fbba 	bl	80134f0 <__mcmp>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	dc9b      	bgt.n	8012cb8 <_dtoa_r+0xb18>
 8012d80:	d102      	bne.n	8012d88 <_dtoa_r+0xbe8>
 8012d82:	9b07      	ldr	r3, [sp, #28]
 8012d84:	07db      	lsls	r3, r3, #31
 8012d86:	d497      	bmi.n	8012cb8 <_dtoa_r+0xb18>
 8012d88:	9b08      	ldr	r3, [sp, #32]
 8012d8a:	9308      	str	r3, [sp, #32]
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	781a      	ldrb	r2, [r3, #0]
 8012d90:	2a30      	cmp	r2, #48	; 0x30
 8012d92:	d0fa      	beq.n	8012d8a <_dtoa_r+0xbea>
 8012d94:	e6db      	b.n	8012b4e <_dtoa_r+0x9ae>
 8012d96:	9a06      	ldr	r2, [sp, #24]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d18e      	bne.n	8012cba <_dtoa_r+0xb1a>
 8012d9c:	9b02      	ldr	r3, [sp, #8]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	9302      	str	r3, [sp, #8]
 8012da2:	2331      	movs	r3, #49	; 0x31
 8012da4:	e799      	b.n	8012cda <_dtoa_r+0xb3a>
 8012da6:	4b09      	ldr	r3, [pc, #36]	; (8012dcc <_dtoa_r+0xc2c>)
 8012da8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012daa:	9306      	str	r3, [sp, #24]
 8012dac:	4b08      	ldr	r3, [pc, #32]	; (8012dd0 <_dtoa_r+0xc30>)
 8012dae:	2a00      	cmp	r2, #0
 8012db0:	d001      	beq.n	8012db6 <_dtoa_r+0xc16>
 8012db2:	f7ff fa3f 	bl	8012234 <_dtoa_r+0x94>
 8012db6:	f7ff fa3f 	bl	8012238 <_dtoa_r+0x98>
 8012dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	dcb6      	bgt.n	8012d2e <_dtoa_r+0xb8e>
 8012dc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012dc2:	2b02      	cmp	r3, #2
 8012dc4:	dd00      	ble.n	8012dc8 <_dtoa_r+0xc28>
 8012dc6:	e6ac      	b.n	8012b22 <_dtoa_r+0x982>
 8012dc8:	e7b1      	b.n	8012d2e <_dtoa_r+0xb8e>
 8012dca:	46c0      	nop			; (mov r8, r8)
 8012dcc:	08016110 	.word	0x08016110
 8012dd0:	08016118 	.word	0x08016118

08012dd4 <__sflush_r>:
 8012dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dd6:	898b      	ldrh	r3, [r1, #12]
 8012dd8:	0005      	movs	r5, r0
 8012dda:	000c      	movs	r4, r1
 8012ddc:	071a      	lsls	r2, r3, #28
 8012dde:	d45f      	bmi.n	8012ea0 <__sflush_r+0xcc>
 8012de0:	684a      	ldr	r2, [r1, #4]
 8012de2:	2a00      	cmp	r2, #0
 8012de4:	dc04      	bgt.n	8012df0 <__sflush_r+0x1c>
 8012de6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8012de8:	2a00      	cmp	r2, #0
 8012dea:	dc01      	bgt.n	8012df0 <__sflush_r+0x1c>
 8012dec:	2000      	movs	r0, #0
 8012dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012df0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012df2:	2f00      	cmp	r7, #0
 8012df4:	d0fa      	beq.n	8012dec <__sflush_r+0x18>
 8012df6:	2200      	movs	r2, #0
 8012df8:	2180      	movs	r1, #128	; 0x80
 8012dfa:	682e      	ldr	r6, [r5, #0]
 8012dfc:	602a      	str	r2, [r5, #0]
 8012dfe:	001a      	movs	r2, r3
 8012e00:	0149      	lsls	r1, r1, #5
 8012e02:	400a      	ands	r2, r1
 8012e04:	420b      	tst	r3, r1
 8012e06:	d034      	beq.n	8012e72 <__sflush_r+0x9e>
 8012e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	075b      	lsls	r3, r3, #29
 8012e0e:	d506      	bpl.n	8012e1e <__sflush_r+0x4a>
 8012e10:	6863      	ldr	r3, [r4, #4]
 8012e12:	1ac0      	subs	r0, r0, r3
 8012e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d001      	beq.n	8012e1e <__sflush_r+0x4a>
 8012e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e1c:	1ac0      	subs	r0, r0, r3
 8012e1e:	0002      	movs	r2, r0
 8012e20:	6a21      	ldr	r1, [r4, #32]
 8012e22:	2300      	movs	r3, #0
 8012e24:	0028      	movs	r0, r5
 8012e26:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012e28:	47b8      	blx	r7
 8012e2a:	89a1      	ldrh	r1, [r4, #12]
 8012e2c:	1c43      	adds	r3, r0, #1
 8012e2e:	d106      	bne.n	8012e3e <__sflush_r+0x6a>
 8012e30:	682b      	ldr	r3, [r5, #0]
 8012e32:	2b1d      	cmp	r3, #29
 8012e34:	d831      	bhi.n	8012e9a <__sflush_r+0xc6>
 8012e36:	4a2c      	ldr	r2, [pc, #176]	; (8012ee8 <__sflush_r+0x114>)
 8012e38:	40da      	lsrs	r2, r3
 8012e3a:	07d3      	lsls	r3, r2, #31
 8012e3c:	d52d      	bpl.n	8012e9a <__sflush_r+0xc6>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	6063      	str	r3, [r4, #4]
 8012e42:	6923      	ldr	r3, [r4, #16]
 8012e44:	6023      	str	r3, [r4, #0]
 8012e46:	04cb      	lsls	r3, r1, #19
 8012e48:	d505      	bpl.n	8012e56 <__sflush_r+0x82>
 8012e4a:	1c43      	adds	r3, r0, #1
 8012e4c:	d102      	bne.n	8012e54 <__sflush_r+0x80>
 8012e4e:	682b      	ldr	r3, [r5, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d100      	bne.n	8012e56 <__sflush_r+0x82>
 8012e54:	6560      	str	r0, [r4, #84]	; 0x54
 8012e56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e58:	602e      	str	r6, [r5, #0]
 8012e5a:	2900      	cmp	r1, #0
 8012e5c:	d0c6      	beq.n	8012dec <__sflush_r+0x18>
 8012e5e:	0023      	movs	r3, r4
 8012e60:	3344      	adds	r3, #68	; 0x44
 8012e62:	4299      	cmp	r1, r3
 8012e64:	d002      	beq.n	8012e6c <__sflush_r+0x98>
 8012e66:	0028      	movs	r0, r5
 8012e68:	f000 fc86 	bl	8013778 <_free_r>
 8012e6c:	2000      	movs	r0, #0
 8012e6e:	6360      	str	r0, [r4, #52]	; 0x34
 8012e70:	e7bd      	b.n	8012dee <__sflush_r+0x1a>
 8012e72:	2301      	movs	r3, #1
 8012e74:	0028      	movs	r0, r5
 8012e76:	6a21      	ldr	r1, [r4, #32]
 8012e78:	47b8      	blx	r7
 8012e7a:	1c43      	adds	r3, r0, #1
 8012e7c:	d1c5      	bne.n	8012e0a <__sflush_r+0x36>
 8012e7e:	682b      	ldr	r3, [r5, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d0c2      	beq.n	8012e0a <__sflush_r+0x36>
 8012e84:	2b1d      	cmp	r3, #29
 8012e86:	d001      	beq.n	8012e8c <__sflush_r+0xb8>
 8012e88:	2b16      	cmp	r3, #22
 8012e8a:	d101      	bne.n	8012e90 <__sflush_r+0xbc>
 8012e8c:	602e      	str	r6, [r5, #0]
 8012e8e:	e7ad      	b.n	8012dec <__sflush_r+0x18>
 8012e90:	2340      	movs	r3, #64	; 0x40
 8012e92:	89a2      	ldrh	r2, [r4, #12]
 8012e94:	4313      	orrs	r3, r2
 8012e96:	81a3      	strh	r3, [r4, #12]
 8012e98:	e7a9      	b.n	8012dee <__sflush_r+0x1a>
 8012e9a:	2340      	movs	r3, #64	; 0x40
 8012e9c:	430b      	orrs	r3, r1
 8012e9e:	e7fa      	b.n	8012e96 <__sflush_r+0xc2>
 8012ea0:	690f      	ldr	r7, [r1, #16]
 8012ea2:	2f00      	cmp	r7, #0
 8012ea4:	d0a2      	beq.n	8012dec <__sflush_r+0x18>
 8012ea6:	680a      	ldr	r2, [r1, #0]
 8012ea8:	600f      	str	r7, [r1, #0]
 8012eaa:	1bd2      	subs	r2, r2, r7
 8012eac:	9201      	str	r2, [sp, #4]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	079b      	lsls	r3, r3, #30
 8012eb2:	d100      	bne.n	8012eb6 <__sflush_r+0xe2>
 8012eb4:	694a      	ldr	r2, [r1, #20]
 8012eb6:	60a2      	str	r2, [r4, #8]
 8012eb8:	9b01      	ldr	r3, [sp, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	dc00      	bgt.n	8012ec0 <__sflush_r+0xec>
 8012ebe:	e795      	b.n	8012dec <__sflush_r+0x18>
 8012ec0:	003a      	movs	r2, r7
 8012ec2:	0028      	movs	r0, r5
 8012ec4:	9b01      	ldr	r3, [sp, #4]
 8012ec6:	6a21      	ldr	r1, [r4, #32]
 8012ec8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012eca:	47b0      	blx	r6
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	dc06      	bgt.n	8012ede <__sflush_r+0x10a>
 8012ed0:	2340      	movs	r3, #64	; 0x40
 8012ed2:	2001      	movs	r0, #1
 8012ed4:	89a2      	ldrh	r2, [r4, #12]
 8012ed6:	4240      	negs	r0, r0
 8012ed8:	4313      	orrs	r3, r2
 8012eda:	81a3      	strh	r3, [r4, #12]
 8012edc:	e787      	b.n	8012dee <__sflush_r+0x1a>
 8012ede:	9b01      	ldr	r3, [sp, #4]
 8012ee0:	183f      	adds	r7, r7, r0
 8012ee2:	1a1b      	subs	r3, r3, r0
 8012ee4:	9301      	str	r3, [sp, #4]
 8012ee6:	e7e7      	b.n	8012eb8 <__sflush_r+0xe4>
 8012ee8:	20400001 	.word	0x20400001

08012eec <_fflush_r>:
 8012eec:	690b      	ldr	r3, [r1, #16]
 8012eee:	b570      	push	{r4, r5, r6, lr}
 8012ef0:	0005      	movs	r5, r0
 8012ef2:	000c      	movs	r4, r1
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d102      	bne.n	8012efe <_fflush_r+0x12>
 8012ef8:	2500      	movs	r5, #0
 8012efa:	0028      	movs	r0, r5
 8012efc:	bd70      	pop	{r4, r5, r6, pc}
 8012efe:	2800      	cmp	r0, #0
 8012f00:	d004      	beq.n	8012f0c <_fflush_r+0x20>
 8012f02:	6983      	ldr	r3, [r0, #24]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d101      	bne.n	8012f0c <_fflush_r+0x20>
 8012f08:	f7fe f9c8 	bl	801129c <__sinit>
 8012f0c:	4b14      	ldr	r3, [pc, #80]	; (8012f60 <_fflush_r+0x74>)
 8012f0e:	429c      	cmp	r4, r3
 8012f10:	d11b      	bne.n	8012f4a <_fflush_r+0x5e>
 8012f12:	686c      	ldr	r4, [r5, #4]
 8012f14:	220c      	movs	r2, #12
 8012f16:	5ea3      	ldrsh	r3, [r4, r2]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d0ed      	beq.n	8012ef8 <_fflush_r+0xc>
 8012f1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f1e:	07d2      	lsls	r2, r2, #31
 8012f20:	d404      	bmi.n	8012f2c <_fflush_r+0x40>
 8012f22:	059b      	lsls	r3, r3, #22
 8012f24:	d402      	bmi.n	8012f2c <_fflush_r+0x40>
 8012f26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f28:	f7fe fa7d 	bl	8011426 <__retarget_lock_acquire_recursive>
 8012f2c:	0028      	movs	r0, r5
 8012f2e:	0021      	movs	r1, r4
 8012f30:	f7ff ff50 	bl	8012dd4 <__sflush_r>
 8012f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f36:	0005      	movs	r5, r0
 8012f38:	07db      	lsls	r3, r3, #31
 8012f3a:	d4de      	bmi.n	8012efa <_fflush_r+0xe>
 8012f3c:	89a3      	ldrh	r3, [r4, #12]
 8012f3e:	059b      	lsls	r3, r3, #22
 8012f40:	d4db      	bmi.n	8012efa <_fflush_r+0xe>
 8012f42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f44:	f7fe fa70 	bl	8011428 <__retarget_lock_release_recursive>
 8012f48:	e7d7      	b.n	8012efa <_fflush_r+0xe>
 8012f4a:	4b06      	ldr	r3, [pc, #24]	; (8012f64 <_fflush_r+0x78>)
 8012f4c:	429c      	cmp	r4, r3
 8012f4e:	d101      	bne.n	8012f54 <_fflush_r+0x68>
 8012f50:	68ac      	ldr	r4, [r5, #8]
 8012f52:	e7df      	b.n	8012f14 <_fflush_r+0x28>
 8012f54:	4b04      	ldr	r3, [pc, #16]	; (8012f68 <_fflush_r+0x7c>)
 8012f56:	429c      	cmp	r4, r3
 8012f58:	d1dc      	bne.n	8012f14 <_fflush_r+0x28>
 8012f5a:	68ec      	ldr	r4, [r5, #12]
 8012f5c:	e7da      	b.n	8012f14 <_fflush_r+0x28>
 8012f5e:	46c0      	nop			; (mov r8, r8)
 8012f60:	08016098 	.word	0x08016098
 8012f64:	080160b8 	.word	0x080160b8
 8012f68:	08016078 	.word	0x08016078

08012f6c <_localeconv_r>:
 8012f6c:	4800      	ldr	r0, [pc, #0]	; (8012f70 <_localeconv_r+0x4>)
 8012f6e:	4770      	bx	lr
 8012f70:	200001c8 	.word	0x200001c8

08012f74 <_lseek_r>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	0004      	movs	r4, r0
 8012f78:	0008      	movs	r0, r1
 8012f7a:	0011      	movs	r1, r2
 8012f7c:	001a      	movs	r2, r3
 8012f7e:	2300      	movs	r3, #0
 8012f80:	4d05      	ldr	r5, [pc, #20]	; (8012f98 <_lseek_r+0x24>)
 8012f82:	602b      	str	r3, [r5, #0]
 8012f84:	f7f2 f858 	bl	8005038 <_lseek>
 8012f88:	1c43      	adds	r3, r0, #1
 8012f8a:	d103      	bne.n	8012f94 <_lseek_r+0x20>
 8012f8c:	682b      	ldr	r3, [r5, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d000      	beq.n	8012f94 <_lseek_r+0x20>
 8012f92:	6023      	str	r3, [r4, #0]
 8012f94:	bd70      	pop	{r4, r5, r6, pc}
 8012f96:	46c0      	nop			; (mov r8, r8)
 8012f98:	20002eec 	.word	0x20002eec

08012f9c <malloc>:
 8012f9c:	b510      	push	{r4, lr}
 8012f9e:	4b03      	ldr	r3, [pc, #12]	; (8012fac <malloc+0x10>)
 8012fa0:	0001      	movs	r1, r0
 8012fa2:	6818      	ldr	r0, [r3, #0]
 8012fa4:	f7fe fa74 	bl	8011490 <_malloc_r>
 8012fa8:	bd10      	pop	{r4, pc}
 8012faa:	46c0      	nop			; (mov r8, r8)
 8012fac:	20000074 	.word	0x20000074

08012fb0 <memchr>:
 8012fb0:	b2c9      	uxtb	r1, r1
 8012fb2:	1882      	adds	r2, r0, r2
 8012fb4:	4290      	cmp	r0, r2
 8012fb6:	d101      	bne.n	8012fbc <memchr+0xc>
 8012fb8:	2000      	movs	r0, #0
 8012fba:	4770      	bx	lr
 8012fbc:	7803      	ldrb	r3, [r0, #0]
 8012fbe:	428b      	cmp	r3, r1
 8012fc0:	d0fb      	beq.n	8012fba <memchr+0xa>
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	e7f6      	b.n	8012fb4 <memchr+0x4>
	...

08012fc8 <__malloc_lock>:
 8012fc8:	b510      	push	{r4, lr}
 8012fca:	4802      	ldr	r0, [pc, #8]	; (8012fd4 <__malloc_lock+0xc>)
 8012fcc:	f7fe fa2b 	bl	8011426 <__retarget_lock_acquire_recursive>
 8012fd0:	bd10      	pop	{r4, pc}
 8012fd2:	46c0      	nop			; (mov r8, r8)
 8012fd4:	20002ee0 	.word	0x20002ee0

08012fd8 <__malloc_unlock>:
 8012fd8:	b510      	push	{r4, lr}
 8012fda:	4802      	ldr	r0, [pc, #8]	; (8012fe4 <__malloc_unlock+0xc>)
 8012fdc:	f7fe fa24 	bl	8011428 <__retarget_lock_release_recursive>
 8012fe0:	bd10      	pop	{r4, pc}
 8012fe2:	46c0      	nop			; (mov r8, r8)
 8012fe4:	20002ee0 	.word	0x20002ee0

08012fe8 <_Balloc>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012fec:	0006      	movs	r6, r0
 8012fee:	000c      	movs	r4, r1
 8012ff0:	2d00      	cmp	r5, #0
 8012ff2:	d10e      	bne.n	8013012 <_Balloc+0x2a>
 8012ff4:	2010      	movs	r0, #16
 8012ff6:	f7ff ffd1 	bl	8012f9c <malloc>
 8012ffa:	1e02      	subs	r2, r0, #0
 8012ffc:	6270      	str	r0, [r6, #36]	; 0x24
 8012ffe:	d104      	bne.n	801300a <_Balloc+0x22>
 8013000:	2166      	movs	r1, #102	; 0x66
 8013002:	4b19      	ldr	r3, [pc, #100]	; (8013068 <_Balloc+0x80>)
 8013004:	4819      	ldr	r0, [pc, #100]	; (801306c <_Balloc+0x84>)
 8013006:	f000 fe45 	bl	8013c94 <__assert_func>
 801300a:	6045      	str	r5, [r0, #4]
 801300c:	6085      	str	r5, [r0, #8]
 801300e:	6005      	str	r5, [r0, #0]
 8013010:	60c5      	str	r5, [r0, #12]
 8013012:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8013014:	68eb      	ldr	r3, [r5, #12]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d013      	beq.n	8013042 <_Balloc+0x5a>
 801301a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801301c:	00a2      	lsls	r2, r4, #2
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	189b      	adds	r3, r3, r2
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	2800      	cmp	r0, #0
 8013026:	d118      	bne.n	801305a <_Balloc+0x72>
 8013028:	2101      	movs	r1, #1
 801302a:	000d      	movs	r5, r1
 801302c:	40a5      	lsls	r5, r4
 801302e:	1d6a      	adds	r2, r5, #5
 8013030:	0030      	movs	r0, r6
 8013032:	0092      	lsls	r2, r2, #2
 8013034:	f000 fb74 	bl	8013720 <_calloc_r>
 8013038:	2800      	cmp	r0, #0
 801303a:	d00c      	beq.n	8013056 <_Balloc+0x6e>
 801303c:	6044      	str	r4, [r0, #4]
 801303e:	6085      	str	r5, [r0, #8]
 8013040:	e00d      	b.n	801305e <_Balloc+0x76>
 8013042:	2221      	movs	r2, #33	; 0x21
 8013044:	2104      	movs	r1, #4
 8013046:	0030      	movs	r0, r6
 8013048:	f000 fb6a 	bl	8013720 <_calloc_r>
 801304c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801304e:	60e8      	str	r0, [r5, #12]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d1e1      	bne.n	801301a <_Balloc+0x32>
 8013056:	2000      	movs	r0, #0
 8013058:	bd70      	pop	{r4, r5, r6, pc}
 801305a:	6802      	ldr	r2, [r0, #0]
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	2300      	movs	r3, #0
 8013060:	6103      	str	r3, [r0, #16]
 8013062:	60c3      	str	r3, [r0, #12]
 8013064:	e7f8      	b.n	8013058 <_Balloc+0x70>
 8013066:	46c0      	nop			; (mov r8, r8)
 8013068:	0801611d 	.word	0x0801611d
 801306c:	080161a0 	.word	0x080161a0

08013070 <_Bfree>:
 8013070:	b570      	push	{r4, r5, r6, lr}
 8013072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013074:	0005      	movs	r5, r0
 8013076:	000c      	movs	r4, r1
 8013078:	2e00      	cmp	r6, #0
 801307a:	d10e      	bne.n	801309a <_Bfree+0x2a>
 801307c:	2010      	movs	r0, #16
 801307e:	f7ff ff8d 	bl	8012f9c <malloc>
 8013082:	1e02      	subs	r2, r0, #0
 8013084:	6268      	str	r0, [r5, #36]	; 0x24
 8013086:	d104      	bne.n	8013092 <_Bfree+0x22>
 8013088:	218a      	movs	r1, #138	; 0x8a
 801308a:	4b09      	ldr	r3, [pc, #36]	; (80130b0 <_Bfree+0x40>)
 801308c:	4809      	ldr	r0, [pc, #36]	; (80130b4 <_Bfree+0x44>)
 801308e:	f000 fe01 	bl	8013c94 <__assert_func>
 8013092:	6046      	str	r6, [r0, #4]
 8013094:	6086      	str	r6, [r0, #8]
 8013096:	6006      	str	r6, [r0, #0]
 8013098:	60c6      	str	r6, [r0, #12]
 801309a:	2c00      	cmp	r4, #0
 801309c:	d007      	beq.n	80130ae <_Bfree+0x3e>
 801309e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80130a0:	6862      	ldr	r2, [r4, #4]
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	0092      	lsls	r2, r2, #2
 80130a6:	189b      	adds	r3, r3, r2
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	6022      	str	r2, [r4, #0]
 80130ac:	601c      	str	r4, [r3, #0]
 80130ae:	bd70      	pop	{r4, r5, r6, pc}
 80130b0:	0801611d 	.word	0x0801611d
 80130b4:	080161a0 	.word	0x080161a0

080130b8 <__multadd>:
 80130b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130ba:	000e      	movs	r6, r1
 80130bc:	9001      	str	r0, [sp, #4]
 80130be:	000c      	movs	r4, r1
 80130c0:	001d      	movs	r5, r3
 80130c2:	2000      	movs	r0, #0
 80130c4:	690f      	ldr	r7, [r1, #16]
 80130c6:	3614      	adds	r6, #20
 80130c8:	6833      	ldr	r3, [r6, #0]
 80130ca:	3001      	adds	r0, #1
 80130cc:	b299      	uxth	r1, r3
 80130ce:	4351      	muls	r1, r2
 80130d0:	0c1b      	lsrs	r3, r3, #16
 80130d2:	4353      	muls	r3, r2
 80130d4:	1949      	adds	r1, r1, r5
 80130d6:	0c0d      	lsrs	r5, r1, #16
 80130d8:	195b      	adds	r3, r3, r5
 80130da:	0c1d      	lsrs	r5, r3, #16
 80130dc:	b289      	uxth	r1, r1
 80130de:	041b      	lsls	r3, r3, #16
 80130e0:	185b      	adds	r3, r3, r1
 80130e2:	c608      	stmia	r6!, {r3}
 80130e4:	4287      	cmp	r7, r0
 80130e6:	dcef      	bgt.n	80130c8 <__multadd+0x10>
 80130e8:	2d00      	cmp	r5, #0
 80130ea:	d022      	beq.n	8013132 <__multadd+0x7a>
 80130ec:	68a3      	ldr	r3, [r4, #8]
 80130ee:	42bb      	cmp	r3, r7
 80130f0:	dc19      	bgt.n	8013126 <__multadd+0x6e>
 80130f2:	6863      	ldr	r3, [r4, #4]
 80130f4:	9801      	ldr	r0, [sp, #4]
 80130f6:	1c59      	adds	r1, r3, #1
 80130f8:	f7ff ff76 	bl	8012fe8 <_Balloc>
 80130fc:	1e06      	subs	r6, r0, #0
 80130fe:	d105      	bne.n	801310c <__multadd+0x54>
 8013100:	0002      	movs	r2, r0
 8013102:	21b5      	movs	r1, #181	; 0xb5
 8013104:	4b0c      	ldr	r3, [pc, #48]	; (8013138 <__multadd+0x80>)
 8013106:	480d      	ldr	r0, [pc, #52]	; (801313c <__multadd+0x84>)
 8013108:	f000 fdc4 	bl	8013c94 <__assert_func>
 801310c:	0021      	movs	r1, r4
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	310c      	adds	r1, #12
 8013112:	1c9a      	adds	r2, r3, #2
 8013114:	0092      	lsls	r2, r2, #2
 8013116:	300c      	adds	r0, #12
 8013118:	f7fe f987 	bl	801142a <memcpy>
 801311c:	0021      	movs	r1, r4
 801311e:	9801      	ldr	r0, [sp, #4]
 8013120:	f7ff ffa6 	bl	8013070 <_Bfree>
 8013124:	0034      	movs	r4, r6
 8013126:	1d3b      	adds	r3, r7, #4
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	18e3      	adds	r3, r4, r3
 801312c:	605d      	str	r5, [r3, #4]
 801312e:	1c7b      	adds	r3, r7, #1
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	0020      	movs	r0, r4
 8013134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013136:	46c0      	nop			; (mov r8, r8)
 8013138:	0801618f 	.word	0x0801618f
 801313c:	080161a0 	.word	0x080161a0

08013140 <__hi0bits>:
 8013140:	0003      	movs	r3, r0
 8013142:	0c02      	lsrs	r2, r0, #16
 8013144:	2000      	movs	r0, #0
 8013146:	4282      	cmp	r2, r0
 8013148:	d101      	bne.n	801314e <__hi0bits+0xe>
 801314a:	041b      	lsls	r3, r3, #16
 801314c:	3010      	adds	r0, #16
 801314e:	0e1a      	lsrs	r2, r3, #24
 8013150:	d101      	bne.n	8013156 <__hi0bits+0x16>
 8013152:	3008      	adds	r0, #8
 8013154:	021b      	lsls	r3, r3, #8
 8013156:	0f1a      	lsrs	r2, r3, #28
 8013158:	d101      	bne.n	801315e <__hi0bits+0x1e>
 801315a:	3004      	adds	r0, #4
 801315c:	011b      	lsls	r3, r3, #4
 801315e:	0f9a      	lsrs	r2, r3, #30
 8013160:	d101      	bne.n	8013166 <__hi0bits+0x26>
 8013162:	3002      	adds	r0, #2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	2b00      	cmp	r3, #0
 8013168:	db03      	blt.n	8013172 <__hi0bits+0x32>
 801316a:	3001      	adds	r0, #1
 801316c:	005b      	lsls	r3, r3, #1
 801316e:	d400      	bmi.n	8013172 <__hi0bits+0x32>
 8013170:	2020      	movs	r0, #32
 8013172:	4770      	bx	lr

08013174 <__lo0bits>:
 8013174:	6803      	ldr	r3, [r0, #0]
 8013176:	0002      	movs	r2, r0
 8013178:	2107      	movs	r1, #7
 801317a:	0018      	movs	r0, r3
 801317c:	4008      	ands	r0, r1
 801317e:	420b      	tst	r3, r1
 8013180:	d00d      	beq.n	801319e <__lo0bits+0x2a>
 8013182:	3906      	subs	r1, #6
 8013184:	2000      	movs	r0, #0
 8013186:	420b      	tst	r3, r1
 8013188:	d105      	bne.n	8013196 <__lo0bits+0x22>
 801318a:	3002      	adds	r0, #2
 801318c:	4203      	tst	r3, r0
 801318e:	d003      	beq.n	8013198 <__lo0bits+0x24>
 8013190:	40cb      	lsrs	r3, r1
 8013192:	0008      	movs	r0, r1
 8013194:	6013      	str	r3, [r2, #0]
 8013196:	4770      	bx	lr
 8013198:	089b      	lsrs	r3, r3, #2
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	e7fb      	b.n	8013196 <__lo0bits+0x22>
 801319e:	b299      	uxth	r1, r3
 80131a0:	2900      	cmp	r1, #0
 80131a2:	d101      	bne.n	80131a8 <__lo0bits+0x34>
 80131a4:	2010      	movs	r0, #16
 80131a6:	0c1b      	lsrs	r3, r3, #16
 80131a8:	b2d9      	uxtb	r1, r3
 80131aa:	2900      	cmp	r1, #0
 80131ac:	d101      	bne.n	80131b2 <__lo0bits+0x3e>
 80131ae:	3008      	adds	r0, #8
 80131b0:	0a1b      	lsrs	r3, r3, #8
 80131b2:	0719      	lsls	r1, r3, #28
 80131b4:	d101      	bne.n	80131ba <__lo0bits+0x46>
 80131b6:	3004      	adds	r0, #4
 80131b8:	091b      	lsrs	r3, r3, #4
 80131ba:	0799      	lsls	r1, r3, #30
 80131bc:	d101      	bne.n	80131c2 <__lo0bits+0x4e>
 80131be:	3002      	adds	r0, #2
 80131c0:	089b      	lsrs	r3, r3, #2
 80131c2:	07d9      	lsls	r1, r3, #31
 80131c4:	d4e9      	bmi.n	801319a <__lo0bits+0x26>
 80131c6:	3001      	adds	r0, #1
 80131c8:	085b      	lsrs	r3, r3, #1
 80131ca:	d1e6      	bne.n	801319a <__lo0bits+0x26>
 80131cc:	2020      	movs	r0, #32
 80131ce:	e7e2      	b.n	8013196 <__lo0bits+0x22>

080131d0 <__i2b>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	000c      	movs	r4, r1
 80131d4:	2101      	movs	r1, #1
 80131d6:	f7ff ff07 	bl	8012fe8 <_Balloc>
 80131da:	2800      	cmp	r0, #0
 80131dc:	d106      	bne.n	80131ec <__i2b+0x1c>
 80131de:	21a0      	movs	r1, #160	; 0xa0
 80131e0:	0002      	movs	r2, r0
 80131e2:	4b04      	ldr	r3, [pc, #16]	; (80131f4 <__i2b+0x24>)
 80131e4:	4804      	ldr	r0, [pc, #16]	; (80131f8 <__i2b+0x28>)
 80131e6:	0049      	lsls	r1, r1, #1
 80131e8:	f000 fd54 	bl	8013c94 <__assert_func>
 80131ec:	2301      	movs	r3, #1
 80131ee:	6144      	str	r4, [r0, #20]
 80131f0:	6103      	str	r3, [r0, #16]
 80131f2:	bd10      	pop	{r4, pc}
 80131f4:	0801618f 	.word	0x0801618f
 80131f8:	080161a0 	.word	0x080161a0

080131fc <__multiply>:
 80131fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131fe:	690b      	ldr	r3, [r1, #16]
 8013200:	0014      	movs	r4, r2
 8013202:	6912      	ldr	r2, [r2, #16]
 8013204:	000d      	movs	r5, r1
 8013206:	b089      	sub	sp, #36	; 0x24
 8013208:	4293      	cmp	r3, r2
 801320a:	da01      	bge.n	8013210 <__multiply+0x14>
 801320c:	0025      	movs	r5, r4
 801320e:	000c      	movs	r4, r1
 8013210:	692f      	ldr	r7, [r5, #16]
 8013212:	6926      	ldr	r6, [r4, #16]
 8013214:	6869      	ldr	r1, [r5, #4]
 8013216:	19bb      	adds	r3, r7, r6
 8013218:	9302      	str	r3, [sp, #8]
 801321a:	68ab      	ldr	r3, [r5, #8]
 801321c:	19ba      	adds	r2, r7, r6
 801321e:	4293      	cmp	r3, r2
 8013220:	da00      	bge.n	8013224 <__multiply+0x28>
 8013222:	3101      	adds	r1, #1
 8013224:	f7ff fee0 	bl	8012fe8 <_Balloc>
 8013228:	9001      	str	r0, [sp, #4]
 801322a:	2800      	cmp	r0, #0
 801322c:	d106      	bne.n	801323c <__multiply+0x40>
 801322e:	215e      	movs	r1, #94	; 0x5e
 8013230:	0002      	movs	r2, r0
 8013232:	4b48      	ldr	r3, [pc, #288]	; (8013354 <__multiply+0x158>)
 8013234:	4848      	ldr	r0, [pc, #288]	; (8013358 <__multiply+0x15c>)
 8013236:	31ff      	adds	r1, #255	; 0xff
 8013238:	f000 fd2c 	bl	8013c94 <__assert_func>
 801323c:	9b01      	ldr	r3, [sp, #4]
 801323e:	2200      	movs	r2, #0
 8013240:	3314      	adds	r3, #20
 8013242:	469c      	mov	ip, r3
 8013244:	19bb      	adds	r3, r7, r6
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	4463      	add	r3, ip
 801324a:	9303      	str	r3, [sp, #12]
 801324c:	4663      	mov	r3, ip
 801324e:	9903      	ldr	r1, [sp, #12]
 8013250:	428b      	cmp	r3, r1
 8013252:	d32c      	bcc.n	80132ae <__multiply+0xb2>
 8013254:	002b      	movs	r3, r5
 8013256:	0022      	movs	r2, r4
 8013258:	3314      	adds	r3, #20
 801325a:	00bf      	lsls	r7, r7, #2
 801325c:	3214      	adds	r2, #20
 801325e:	9306      	str	r3, [sp, #24]
 8013260:	00b6      	lsls	r6, r6, #2
 8013262:	19db      	adds	r3, r3, r7
 8013264:	9304      	str	r3, [sp, #16]
 8013266:	1993      	adds	r3, r2, r6
 8013268:	9307      	str	r3, [sp, #28]
 801326a:	2304      	movs	r3, #4
 801326c:	9305      	str	r3, [sp, #20]
 801326e:	002b      	movs	r3, r5
 8013270:	9904      	ldr	r1, [sp, #16]
 8013272:	3315      	adds	r3, #21
 8013274:	9200      	str	r2, [sp, #0]
 8013276:	4299      	cmp	r1, r3
 8013278:	d305      	bcc.n	8013286 <__multiply+0x8a>
 801327a:	1b4b      	subs	r3, r1, r5
 801327c:	3b15      	subs	r3, #21
 801327e:	089b      	lsrs	r3, r3, #2
 8013280:	3301      	adds	r3, #1
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	9305      	str	r3, [sp, #20]
 8013286:	9b07      	ldr	r3, [sp, #28]
 8013288:	9a00      	ldr	r2, [sp, #0]
 801328a:	429a      	cmp	r2, r3
 801328c:	d311      	bcc.n	80132b2 <__multiply+0xb6>
 801328e:	9b02      	ldr	r3, [sp, #8]
 8013290:	2b00      	cmp	r3, #0
 8013292:	dd06      	ble.n	80132a2 <__multiply+0xa6>
 8013294:	9b03      	ldr	r3, [sp, #12]
 8013296:	3b04      	subs	r3, #4
 8013298:	9303      	str	r3, [sp, #12]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	9300      	str	r3, [sp, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d053      	beq.n	801334a <__multiply+0x14e>
 80132a2:	9b01      	ldr	r3, [sp, #4]
 80132a4:	9a02      	ldr	r2, [sp, #8]
 80132a6:	0018      	movs	r0, r3
 80132a8:	611a      	str	r2, [r3, #16]
 80132aa:	b009      	add	sp, #36	; 0x24
 80132ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ae:	c304      	stmia	r3!, {r2}
 80132b0:	e7cd      	b.n	801324e <__multiply+0x52>
 80132b2:	9b00      	ldr	r3, [sp, #0]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	b298      	uxth	r0, r3
 80132b8:	2800      	cmp	r0, #0
 80132ba:	d01b      	beq.n	80132f4 <__multiply+0xf8>
 80132bc:	4667      	mov	r7, ip
 80132be:	2400      	movs	r4, #0
 80132c0:	9e06      	ldr	r6, [sp, #24]
 80132c2:	ce02      	ldmia	r6!, {r1}
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	b28b      	uxth	r3, r1
 80132c8:	4343      	muls	r3, r0
 80132ca:	b292      	uxth	r2, r2
 80132cc:	189b      	adds	r3, r3, r2
 80132ce:	191b      	adds	r3, r3, r4
 80132d0:	0c0c      	lsrs	r4, r1, #16
 80132d2:	4344      	muls	r4, r0
 80132d4:	683a      	ldr	r2, [r7, #0]
 80132d6:	0c11      	lsrs	r1, r2, #16
 80132d8:	1861      	adds	r1, r4, r1
 80132da:	0c1c      	lsrs	r4, r3, #16
 80132dc:	1909      	adds	r1, r1, r4
 80132de:	0c0c      	lsrs	r4, r1, #16
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	0409      	lsls	r1, r1, #16
 80132e4:	430b      	orrs	r3, r1
 80132e6:	c708      	stmia	r7!, {r3}
 80132e8:	9b04      	ldr	r3, [sp, #16]
 80132ea:	42b3      	cmp	r3, r6
 80132ec:	d8e9      	bhi.n	80132c2 <__multiply+0xc6>
 80132ee:	4663      	mov	r3, ip
 80132f0:	9a05      	ldr	r2, [sp, #20]
 80132f2:	509c      	str	r4, [r3, r2]
 80132f4:	9b00      	ldr	r3, [sp, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	0c1e      	lsrs	r6, r3, #16
 80132fa:	d020      	beq.n	801333e <__multiply+0x142>
 80132fc:	4663      	mov	r3, ip
 80132fe:	002c      	movs	r4, r5
 8013300:	4660      	mov	r0, ip
 8013302:	2700      	movs	r7, #0
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	3414      	adds	r4, #20
 8013308:	6822      	ldr	r2, [r4, #0]
 801330a:	b29b      	uxth	r3, r3
 801330c:	b291      	uxth	r1, r2
 801330e:	4371      	muls	r1, r6
 8013310:	6802      	ldr	r2, [r0, #0]
 8013312:	0c12      	lsrs	r2, r2, #16
 8013314:	1889      	adds	r1, r1, r2
 8013316:	19cf      	adds	r7, r1, r7
 8013318:	0439      	lsls	r1, r7, #16
 801331a:	430b      	orrs	r3, r1
 801331c:	6003      	str	r3, [r0, #0]
 801331e:	cc02      	ldmia	r4!, {r1}
 8013320:	6843      	ldr	r3, [r0, #4]
 8013322:	0c09      	lsrs	r1, r1, #16
 8013324:	4371      	muls	r1, r6
 8013326:	b29b      	uxth	r3, r3
 8013328:	0c3f      	lsrs	r7, r7, #16
 801332a:	18cb      	adds	r3, r1, r3
 801332c:	9a04      	ldr	r2, [sp, #16]
 801332e:	19db      	adds	r3, r3, r7
 8013330:	0c1f      	lsrs	r7, r3, #16
 8013332:	3004      	adds	r0, #4
 8013334:	42a2      	cmp	r2, r4
 8013336:	d8e7      	bhi.n	8013308 <__multiply+0x10c>
 8013338:	4662      	mov	r2, ip
 801333a:	9905      	ldr	r1, [sp, #20]
 801333c:	5053      	str	r3, [r2, r1]
 801333e:	9b00      	ldr	r3, [sp, #0]
 8013340:	3304      	adds	r3, #4
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	2304      	movs	r3, #4
 8013346:	449c      	add	ip, r3
 8013348:	e79d      	b.n	8013286 <__multiply+0x8a>
 801334a:	9b02      	ldr	r3, [sp, #8]
 801334c:	3b01      	subs	r3, #1
 801334e:	9302      	str	r3, [sp, #8]
 8013350:	e79d      	b.n	801328e <__multiply+0x92>
 8013352:	46c0      	nop			; (mov r8, r8)
 8013354:	0801618f 	.word	0x0801618f
 8013358:	080161a0 	.word	0x080161a0

0801335c <__pow5mult>:
 801335c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801335e:	2303      	movs	r3, #3
 8013360:	0015      	movs	r5, r2
 8013362:	0007      	movs	r7, r0
 8013364:	000e      	movs	r6, r1
 8013366:	401a      	ands	r2, r3
 8013368:	421d      	tst	r5, r3
 801336a:	d008      	beq.n	801337e <__pow5mult+0x22>
 801336c:	4925      	ldr	r1, [pc, #148]	; (8013404 <__pow5mult+0xa8>)
 801336e:	3a01      	subs	r2, #1
 8013370:	0092      	lsls	r2, r2, #2
 8013372:	5852      	ldr	r2, [r2, r1]
 8013374:	2300      	movs	r3, #0
 8013376:	0031      	movs	r1, r6
 8013378:	f7ff fe9e 	bl	80130b8 <__multadd>
 801337c:	0006      	movs	r6, r0
 801337e:	10ad      	asrs	r5, r5, #2
 8013380:	d03d      	beq.n	80133fe <__pow5mult+0xa2>
 8013382:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8013384:	2c00      	cmp	r4, #0
 8013386:	d10f      	bne.n	80133a8 <__pow5mult+0x4c>
 8013388:	2010      	movs	r0, #16
 801338a:	f7ff fe07 	bl	8012f9c <malloc>
 801338e:	1e02      	subs	r2, r0, #0
 8013390:	6278      	str	r0, [r7, #36]	; 0x24
 8013392:	d105      	bne.n	80133a0 <__pow5mult+0x44>
 8013394:	21d7      	movs	r1, #215	; 0xd7
 8013396:	4b1c      	ldr	r3, [pc, #112]	; (8013408 <__pow5mult+0xac>)
 8013398:	481c      	ldr	r0, [pc, #112]	; (801340c <__pow5mult+0xb0>)
 801339a:	0049      	lsls	r1, r1, #1
 801339c:	f000 fc7a 	bl	8013c94 <__assert_func>
 80133a0:	6044      	str	r4, [r0, #4]
 80133a2:	6084      	str	r4, [r0, #8]
 80133a4:	6004      	str	r4, [r0, #0]
 80133a6:	60c4      	str	r4, [r0, #12]
 80133a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133aa:	689c      	ldr	r4, [r3, #8]
 80133ac:	9301      	str	r3, [sp, #4]
 80133ae:	2c00      	cmp	r4, #0
 80133b0:	d108      	bne.n	80133c4 <__pow5mult+0x68>
 80133b2:	0038      	movs	r0, r7
 80133b4:	4916      	ldr	r1, [pc, #88]	; (8013410 <__pow5mult+0xb4>)
 80133b6:	f7ff ff0b 	bl	80131d0 <__i2b>
 80133ba:	9b01      	ldr	r3, [sp, #4]
 80133bc:	0004      	movs	r4, r0
 80133be:	6098      	str	r0, [r3, #8]
 80133c0:	2300      	movs	r3, #0
 80133c2:	6003      	str	r3, [r0, #0]
 80133c4:	2301      	movs	r3, #1
 80133c6:	421d      	tst	r5, r3
 80133c8:	d00a      	beq.n	80133e0 <__pow5mult+0x84>
 80133ca:	0031      	movs	r1, r6
 80133cc:	0022      	movs	r2, r4
 80133ce:	0038      	movs	r0, r7
 80133d0:	f7ff ff14 	bl	80131fc <__multiply>
 80133d4:	0031      	movs	r1, r6
 80133d6:	9001      	str	r0, [sp, #4]
 80133d8:	0038      	movs	r0, r7
 80133da:	f7ff fe49 	bl	8013070 <_Bfree>
 80133de:	9e01      	ldr	r6, [sp, #4]
 80133e0:	106d      	asrs	r5, r5, #1
 80133e2:	d00c      	beq.n	80133fe <__pow5mult+0xa2>
 80133e4:	6820      	ldr	r0, [r4, #0]
 80133e6:	2800      	cmp	r0, #0
 80133e8:	d107      	bne.n	80133fa <__pow5mult+0x9e>
 80133ea:	0022      	movs	r2, r4
 80133ec:	0021      	movs	r1, r4
 80133ee:	0038      	movs	r0, r7
 80133f0:	f7ff ff04 	bl	80131fc <__multiply>
 80133f4:	2300      	movs	r3, #0
 80133f6:	6020      	str	r0, [r4, #0]
 80133f8:	6003      	str	r3, [r0, #0]
 80133fa:	0004      	movs	r4, r0
 80133fc:	e7e2      	b.n	80133c4 <__pow5mult+0x68>
 80133fe:	0030      	movs	r0, r6
 8013400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013402:	46c0      	nop			; (mov r8, r8)
 8013404:	080162f0 	.word	0x080162f0
 8013408:	0801611d 	.word	0x0801611d
 801340c:	080161a0 	.word	0x080161a0
 8013410:	00000271 	.word	0x00000271

08013414 <__lshift>:
 8013414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013416:	000c      	movs	r4, r1
 8013418:	0017      	movs	r7, r2
 801341a:	6923      	ldr	r3, [r4, #16]
 801341c:	1155      	asrs	r5, r2, #5
 801341e:	b087      	sub	sp, #28
 8013420:	18eb      	adds	r3, r5, r3
 8013422:	9302      	str	r3, [sp, #8]
 8013424:	3301      	adds	r3, #1
 8013426:	9301      	str	r3, [sp, #4]
 8013428:	6849      	ldr	r1, [r1, #4]
 801342a:	68a3      	ldr	r3, [r4, #8]
 801342c:	9004      	str	r0, [sp, #16]
 801342e:	9a01      	ldr	r2, [sp, #4]
 8013430:	4293      	cmp	r3, r2
 8013432:	db10      	blt.n	8013456 <__lshift+0x42>
 8013434:	9804      	ldr	r0, [sp, #16]
 8013436:	f7ff fdd7 	bl	8012fe8 <_Balloc>
 801343a:	2300      	movs	r3, #0
 801343c:	0002      	movs	r2, r0
 801343e:	0006      	movs	r6, r0
 8013440:	0019      	movs	r1, r3
 8013442:	3214      	adds	r2, #20
 8013444:	4298      	cmp	r0, r3
 8013446:	d10c      	bne.n	8013462 <__lshift+0x4e>
 8013448:	21da      	movs	r1, #218	; 0xda
 801344a:	0002      	movs	r2, r0
 801344c:	4b26      	ldr	r3, [pc, #152]	; (80134e8 <__lshift+0xd4>)
 801344e:	4827      	ldr	r0, [pc, #156]	; (80134ec <__lshift+0xd8>)
 8013450:	31ff      	adds	r1, #255	; 0xff
 8013452:	f000 fc1f 	bl	8013c94 <__assert_func>
 8013456:	3101      	adds	r1, #1
 8013458:	005b      	lsls	r3, r3, #1
 801345a:	e7e8      	b.n	801342e <__lshift+0x1a>
 801345c:	0098      	lsls	r0, r3, #2
 801345e:	5011      	str	r1, [r2, r0]
 8013460:	3301      	adds	r3, #1
 8013462:	42ab      	cmp	r3, r5
 8013464:	dbfa      	blt.n	801345c <__lshift+0x48>
 8013466:	43eb      	mvns	r3, r5
 8013468:	17db      	asrs	r3, r3, #31
 801346a:	401d      	ands	r5, r3
 801346c:	211f      	movs	r1, #31
 801346e:	0023      	movs	r3, r4
 8013470:	0038      	movs	r0, r7
 8013472:	00ad      	lsls	r5, r5, #2
 8013474:	1955      	adds	r5, r2, r5
 8013476:	6922      	ldr	r2, [r4, #16]
 8013478:	3314      	adds	r3, #20
 801347a:	0092      	lsls	r2, r2, #2
 801347c:	4008      	ands	r0, r1
 801347e:	4684      	mov	ip, r0
 8013480:	189a      	adds	r2, r3, r2
 8013482:	420f      	tst	r7, r1
 8013484:	d02a      	beq.n	80134dc <__lshift+0xc8>
 8013486:	3101      	adds	r1, #1
 8013488:	1a09      	subs	r1, r1, r0
 801348a:	9105      	str	r1, [sp, #20]
 801348c:	2100      	movs	r1, #0
 801348e:	9503      	str	r5, [sp, #12]
 8013490:	4667      	mov	r7, ip
 8013492:	6818      	ldr	r0, [r3, #0]
 8013494:	40b8      	lsls	r0, r7
 8013496:	4301      	orrs	r1, r0
 8013498:	9803      	ldr	r0, [sp, #12]
 801349a:	c002      	stmia	r0!, {r1}
 801349c:	cb02      	ldmia	r3!, {r1}
 801349e:	9003      	str	r0, [sp, #12]
 80134a0:	9805      	ldr	r0, [sp, #20]
 80134a2:	40c1      	lsrs	r1, r0
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d8f3      	bhi.n	8013490 <__lshift+0x7c>
 80134a8:	0020      	movs	r0, r4
 80134aa:	3015      	adds	r0, #21
 80134ac:	2304      	movs	r3, #4
 80134ae:	4282      	cmp	r2, r0
 80134b0:	d304      	bcc.n	80134bc <__lshift+0xa8>
 80134b2:	1b13      	subs	r3, r2, r4
 80134b4:	3b15      	subs	r3, #21
 80134b6:	089b      	lsrs	r3, r3, #2
 80134b8:	3301      	adds	r3, #1
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	50e9      	str	r1, [r5, r3]
 80134be:	2900      	cmp	r1, #0
 80134c0:	d002      	beq.n	80134c8 <__lshift+0xb4>
 80134c2:	9b02      	ldr	r3, [sp, #8]
 80134c4:	3302      	adds	r3, #2
 80134c6:	9301      	str	r3, [sp, #4]
 80134c8:	9b01      	ldr	r3, [sp, #4]
 80134ca:	9804      	ldr	r0, [sp, #16]
 80134cc:	3b01      	subs	r3, #1
 80134ce:	0021      	movs	r1, r4
 80134d0:	6133      	str	r3, [r6, #16]
 80134d2:	f7ff fdcd 	bl	8013070 <_Bfree>
 80134d6:	0030      	movs	r0, r6
 80134d8:	b007      	add	sp, #28
 80134da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134dc:	cb02      	ldmia	r3!, {r1}
 80134de:	c502      	stmia	r5!, {r1}
 80134e0:	429a      	cmp	r2, r3
 80134e2:	d8fb      	bhi.n	80134dc <__lshift+0xc8>
 80134e4:	e7f0      	b.n	80134c8 <__lshift+0xb4>
 80134e6:	46c0      	nop			; (mov r8, r8)
 80134e8:	0801618f 	.word	0x0801618f
 80134ec:	080161a0 	.word	0x080161a0

080134f0 <__mcmp>:
 80134f0:	6902      	ldr	r2, [r0, #16]
 80134f2:	690b      	ldr	r3, [r1, #16]
 80134f4:	b530      	push	{r4, r5, lr}
 80134f6:	0004      	movs	r4, r0
 80134f8:	1ad0      	subs	r0, r2, r3
 80134fa:	429a      	cmp	r2, r3
 80134fc:	d10d      	bne.n	801351a <__mcmp+0x2a>
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	3414      	adds	r4, #20
 8013502:	3114      	adds	r1, #20
 8013504:	18e2      	adds	r2, r4, r3
 8013506:	18c9      	adds	r1, r1, r3
 8013508:	3a04      	subs	r2, #4
 801350a:	3904      	subs	r1, #4
 801350c:	6815      	ldr	r5, [r2, #0]
 801350e:	680b      	ldr	r3, [r1, #0]
 8013510:	429d      	cmp	r5, r3
 8013512:	d003      	beq.n	801351c <__mcmp+0x2c>
 8013514:	2001      	movs	r0, #1
 8013516:	429d      	cmp	r5, r3
 8013518:	d303      	bcc.n	8013522 <__mcmp+0x32>
 801351a:	bd30      	pop	{r4, r5, pc}
 801351c:	4294      	cmp	r4, r2
 801351e:	d3f3      	bcc.n	8013508 <__mcmp+0x18>
 8013520:	e7fb      	b.n	801351a <__mcmp+0x2a>
 8013522:	4240      	negs	r0, r0
 8013524:	e7f9      	b.n	801351a <__mcmp+0x2a>
	...

08013528 <__mdiff>:
 8013528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801352a:	000e      	movs	r6, r1
 801352c:	0007      	movs	r7, r0
 801352e:	0011      	movs	r1, r2
 8013530:	0030      	movs	r0, r6
 8013532:	b087      	sub	sp, #28
 8013534:	0014      	movs	r4, r2
 8013536:	f7ff ffdb 	bl	80134f0 <__mcmp>
 801353a:	1e05      	subs	r5, r0, #0
 801353c:	d110      	bne.n	8013560 <__mdiff+0x38>
 801353e:	0001      	movs	r1, r0
 8013540:	0038      	movs	r0, r7
 8013542:	f7ff fd51 	bl	8012fe8 <_Balloc>
 8013546:	1e02      	subs	r2, r0, #0
 8013548:	d104      	bne.n	8013554 <__mdiff+0x2c>
 801354a:	4b40      	ldr	r3, [pc, #256]	; (801364c <__mdiff+0x124>)
 801354c:	4940      	ldr	r1, [pc, #256]	; (8013650 <__mdiff+0x128>)
 801354e:	4841      	ldr	r0, [pc, #260]	; (8013654 <__mdiff+0x12c>)
 8013550:	f000 fba0 	bl	8013c94 <__assert_func>
 8013554:	2301      	movs	r3, #1
 8013556:	6145      	str	r5, [r0, #20]
 8013558:	6103      	str	r3, [r0, #16]
 801355a:	0010      	movs	r0, r2
 801355c:	b007      	add	sp, #28
 801355e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013560:	2301      	movs	r3, #1
 8013562:	9301      	str	r3, [sp, #4]
 8013564:	2800      	cmp	r0, #0
 8013566:	db04      	blt.n	8013572 <__mdiff+0x4a>
 8013568:	0023      	movs	r3, r4
 801356a:	0034      	movs	r4, r6
 801356c:	001e      	movs	r6, r3
 801356e:	2300      	movs	r3, #0
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	0038      	movs	r0, r7
 8013574:	6861      	ldr	r1, [r4, #4]
 8013576:	f7ff fd37 	bl	8012fe8 <_Balloc>
 801357a:	1e02      	subs	r2, r0, #0
 801357c:	d103      	bne.n	8013586 <__mdiff+0x5e>
 801357e:	2190      	movs	r1, #144	; 0x90
 8013580:	4b32      	ldr	r3, [pc, #200]	; (801364c <__mdiff+0x124>)
 8013582:	0089      	lsls	r1, r1, #2
 8013584:	e7e3      	b.n	801354e <__mdiff+0x26>
 8013586:	9b01      	ldr	r3, [sp, #4]
 8013588:	2700      	movs	r7, #0
 801358a:	60c3      	str	r3, [r0, #12]
 801358c:	6920      	ldr	r0, [r4, #16]
 801358e:	3414      	adds	r4, #20
 8013590:	9401      	str	r4, [sp, #4]
 8013592:	9b01      	ldr	r3, [sp, #4]
 8013594:	0084      	lsls	r4, r0, #2
 8013596:	191b      	adds	r3, r3, r4
 8013598:	0034      	movs	r4, r6
 801359a:	9302      	str	r3, [sp, #8]
 801359c:	6933      	ldr	r3, [r6, #16]
 801359e:	3414      	adds	r4, #20
 80135a0:	0099      	lsls	r1, r3, #2
 80135a2:	1863      	adds	r3, r4, r1
 80135a4:	9303      	str	r3, [sp, #12]
 80135a6:	0013      	movs	r3, r2
 80135a8:	3314      	adds	r3, #20
 80135aa:	469c      	mov	ip, r3
 80135ac:	9305      	str	r3, [sp, #20]
 80135ae:	9b01      	ldr	r3, [sp, #4]
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	9b04      	ldr	r3, [sp, #16]
 80135b4:	cc02      	ldmia	r4!, {r1}
 80135b6:	cb20      	ldmia	r3!, {r5}
 80135b8:	9304      	str	r3, [sp, #16]
 80135ba:	b2ab      	uxth	r3, r5
 80135bc:	19df      	adds	r7, r3, r7
 80135be:	b28b      	uxth	r3, r1
 80135c0:	1afb      	subs	r3, r7, r3
 80135c2:	0c09      	lsrs	r1, r1, #16
 80135c4:	0c2d      	lsrs	r5, r5, #16
 80135c6:	1a6d      	subs	r5, r5, r1
 80135c8:	1419      	asrs	r1, r3, #16
 80135ca:	186d      	adds	r5, r5, r1
 80135cc:	4661      	mov	r1, ip
 80135ce:	142f      	asrs	r7, r5, #16
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	042d      	lsls	r5, r5, #16
 80135d4:	432b      	orrs	r3, r5
 80135d6:	c108      	stmia	r1!, {r3}
 80135d8:	9b03      	ldr	r3, [sp, #12]
 80135da:	468c      	mov	ip, r1
 80135dc:	42a3      	cmp	r3, r4
 80135de:	d8e8      	bhi.n	80135b2 <__mdiff+0x8a>
 80135e0:	0031      	movs	r1, r6
 80135e2:	9c03      	ldr	r4, [sp, #12]
 80135e4:	3115      	adds	r1, #21
 80135e6:	2304      	movs	r3, #4
 80135e8:	428c      	cmp	r4, r1
 80135ea:	d304      	bcc.n	80135f6 <__mdiff+0xce>
 80135ec:	1ba3      	subs	r3, r4, r6
 80135ee:	3b15      	subs	r3, #21
 80135f0:	089b      	lsrs	r3, r3, #2
 80135f2:	3301      	adds	r3, #1
 80135f4:	009b      	lsls	r3, r3, #2
 80135f6:	9901      	ldr	r1, [sp, #4]
 80135f8:	18cc      	adds	r4, r1, r3
 80135fa:	9905      	ldr	r1, [sp, #20]
 80135fc:	0026      	movs	r6, r4
 80135fe:	18cb      	adds	r3, r1, r3
 8013600:	469c      	mov	ip, r3
 8013602:	9902      	ldr	r1, [sp, #8]
 8013604:	428e      	cmp	r6, r1
 8013606:	d310      	bcc.n	801362a <__mdiff+0x102>
 8013608:	9e02      	ldr	r6, [sp, #8]
 801360a:	1ee1      	subs	r1, r4, #3
 801360c:	2500      	movs	r5, #0
 801360e:	428e      	cmp	r6, r1
 8013610:	d304      	bcc.n	801361c <__mdiff+0xf4>
 8013612:	0031      	movs	r1, r6
 8013614:	3103      	adds	r1, #3
 8013616:	1b0c      	subs	r4, r1, r4
 8013618:	08a4      	lsrs	r4, r4, #2
 801361a:	00a5      	lsls	r5, r4, #2
 801361c:	195b      	adds	r3, r3, r5
 801361e:	3b04      	subs	r3, #4
 8013620:	6819      	ldr	r1, [r3, #0]
 8013622:	2900      	cmp	r1, #0
 8013624:	d00f      	beq.n	8013646 <__mdiff+0x11e>
 8013626:	6110      	str	r0, [r2, #16]
 8013628:	e797      	b.n	801355a <__mdiff+0x32>
 801362a:	ce02      	ldmia	r6!, {r1}
 801362c:	b28d      	uxth	r5, r1
 801362e:	19ed      	adds	r5, r5, r7
 8013630:	0c0f      	lsrs	r7, r1, #16
 8013632:	1429      	asrs	r1, r5, #16
 8013634:	1879      	adds	r1, r7, r1
 8013636:	140f      	asrs	r7, r1, #16
 8013638:	b2ad      	uxth	r5, r5
 801363a:	0409      	lsls	r1, r1, #16
 801363c:	430d      	orrs	r5, r1
 801363e:	4661      	mov	r1, ip
 8013640:	c120      	stmia	r1!, {r5}
 8013642:	468c      	mov	ip, r1
 8013644:	e7dd      	b.n	8013602 <__mdiff+0xda>
 8013646:	3801      	subs	r0, #1
 8013648:	e7e9      	b.n	801361e <__mdiff+0xf6>
 801364a:	46c0      	nop			; (mov r8, r8)
 801364c:	0801618f 	.word	0x0801618f
 8013650:	00000232 	.word	0x00000232
 8013654:	080161a0 	.word	0x080161a0

08013658 <__d2b>:
 8013658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801365a:	2101      	movs	r1, #1
 801365c:	0014      	movs	r4, r2
 801365e:	001e      	movs	r6, r3
 8013660:	9f08      	ldr	r7, [sp, #32]
 8013662:	f7ff fcc1 	bl	8012fe8 <_Balloc>
 8013666:	1e05      	subs	r5, r0, #0
 8013668:	d105      	bne.n	8013676 <__d2b+0x1e>
 801366a:	0002      	movs	r2, r0
 801366c:	4b26      	ldr	r3, [pc, #152]	; (8013708 <__d2b+0xb0>)
 801366e:	4927      	ldr	r1, [pc, #156]	; (801370c <__d2b+0xb4>)
 8013670:	4827      	ldr	r0, [pc, #156]	; (8013710 <__d2b+0xb8>)
 8013672:	f000 fb0f 	bl	8013c94 <__assert_func>
 8013676:	0333      	lsls	r3, r6, #12
 8013678:	0076      	lsls	r6, r6, #1
 801367a:	0b1b      	lsrs	r3, r3, #12
 801367c:	0d76      	lsrs	r6, r6, #21
 801367e:	d124      	bne.n	80136ca <__d2b+0x72>
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	2c00      	cmp	r4, #0
 8013684:	d027      	beq.n	80136d6 <__d2b+0x7e>
 8013686:	4668      	mov	r0, sp
 8013688:	9400      	str	r4, [sp, #0]
 801368a:	f7ff fd73 	bl	8013174 <__lo0bits>
 801368e:	9c00      	ldr	r4, [sp, #0]
 8013690:	2800      	cmp	r0, #0
 8013692:	d01e      	beq.n	80136d2 <__d2b+0x7a>
 8013694:	9b01      	ldr	r3, [sp, #4]
 8013696:	2120      	movs	r1, #32
 8013698:	001a      	movs	r2, r3
 801369a:	1a09      	subs	r1, r1, r0
 801369c:	408a      	lsls	r2, r1
 801369e:	40c3      	lsrs	r3, r0
 80136a0:	4322      	orrs	r2, r4
 80136a2:	616a      	str	r2, [r5, #20]
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	9c01      	ldr	r4, [sp, #4]
 80136a8:	61ac      	str	r4, [r5, #24]
 80136aa:	1e63      	subs	r3, r4, #1
 80136ac:	419c      	sbcs	r4, r3
 80136ae:	3401      	adds	r4, #1
 80136b0:	612c      	str	r4, [r5, #16]
 80136b2:	2e00      	cmp	r6, #0
 80136b4:	d018      	beq.n	80136e8 <__d2b+0x90>
 80136b6:	4b17      	ldr	r3, [pc, #92]	; (8013714 <__d2b+0xbc>)
 80136b8:	18f6      	adds	r6, r6, r3
 80136ba:	2335      	movs	r3, #53	; 0x35
 80136bc:	1836      	adds	r6, r6, r0
 80136be:	1a18      	subs	r0, r3, r0
 80136c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136c2:	603e      	str	r6, [r7, #0]
 80136c4:	6018      	str	r0, [r3, #0]
 80136c6:	0028      	movs	r0, r5
 80136c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80136ca:	2280      	movs	r2, #128	; 0x80
 80136cc:	0352      	lsls	r2, r2, #13
 80136ce:	4313      	orrs	r3, r2
 80136d0:	e7d6      	b.n	8013680 <__d2b+0x28>
 80136d2:	616c      	str	r4, [r5, #20]
 80136d4:	e7e7      	b.n	80136a6 <__d2b+0x4e>
 80136d6:	a801      	add	r0, sp, #4
 80136d8:	f7ff fd4c 	bl	8013174 <__lo0bits>
 80136dc:	2401      	movs	r4, #1
 80136de:	9b01      	ldr	r3, [sp, #4]
 80136e0:	612c      	str	r4, [r5, #16]
 80136e2:	616b      	str	r3, [r5, #20]
 80136e4:	3020      	adds	r0, #32
 80136e6:	e7e4      	b.n	80136b2 <__d2b+0x5a>
 80136e8:	4b0b      	ldr	r3, [pc, #44]	; (8013718 <__d2b+0xc0>)
 80136ea:	18c0      	adds	r0, r0, r3
 80136ec:	4b0b      	ldr	r3, [pc, #44]	; (801371c <__d2b+0xc4>)
 80136ee:	6038      	str	r0, [r7, #0]
 80136f0:	18e3      	adds	r3, r4, r3
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	18eb      	adds	r3, r5, r3
 80136f6:	6958      	ldr	r0, [r3, #20]
 80136f8:	f7ff fd22 	bl	8013140 <__hi0bits>
 80136fc:	0164      	lsls	r4, r4, #5
 80136fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013700:	1a24      	subs	r4, r4, r0
 8013702:	601c      	str	r4, [r3, #0]
 8013704:	e7df      	b.n	80136c6 <__d2b+0x6e>
 8013706:	46c0      	nop			; (mov r8, r8)
 8013708:	0801618f 	.word	0x0801618f
 801370c:	0000030a 	.word	0x0000030a
 8013710:	080161a0 	.word	0x080161a0
 8013714:	fffffbcd 	.word	0xfffffbcd
 8013718:	fffffbce 	.word	0xfffffbce
 801371c:	3fffffff 	.word	0x3fffffff

08013720 <_calloc_r>:
 8013720:	b570      	push	{r4, r5, r6, lr}
 8013722:	0c13      	lsrs	r3, r2, #16
 8013724:	0c0d      	lsrs	r5, r1, #16
 8013726:	d11e      	bne.n	8013766 <_calloc_r+0x46>
 8013728:	2b00      	cmp	r3, #0
 801372a:	d10c      	bne.n	8013746 <_calloc_r+0x26>
 801372c:	b289      	uxth	r1, r1
 801372e:	b294      	uxth	r4, r2
 8013730:	434c      	muls	r4, r1
 8013732:	0021      	movs	r1, r4
 8013734:	f7fd feac 	bl	8011490 <_malloc_r>
 8013738:	1e05      	subs	r5, r0, #0
 801373a:	d01b      	beq.n	8013774 <_calloc_r+0x54>
 801373c:	0022      	movs	r2, r4
 801373e:	2100      	movs	r1, #0
 8013740:	f7fd fe7c 	bl	801143c <memset>
 8013744:	e016      	b.n	8013774 <_calloc_r+0x54>
 8013746:	1c1d      	adds	r5, r3, #0
 8013748:	1c0b      	adds	r3, r1, #0
 801374a:	b292      	uxth	r2, r2
 801374c:	b289      	uxth	r1, r1
 801374e:	b29c      	uxth	r4, r3
 8013750:	4351      	muls	r1, r2
 8013752:	b2ab      	uxth	r3, r5
 8013754:	4363      	muls	r3, r4
 8013756:	0c0c      	lsrs	r4, r1, #16
 8013758:	191c      	adds	r4, r3, r4
 801375a:	0c22      	lsrs	r2, r4, #16
 801375c:	d107      	bne.n	801376e <_calloc_r+0x4e>
 801375e:	0424      	lsls	r4, r4, #16
 8013760:	b289      	uxth	r1, r1
 8013762:	430c      	orrs	r4, r1
 8013764:	e7e5      	b.n	8013732 <_calloc_r+0x12>
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <_calloc_r+0x4e>
 801376a:	1c13      	adds	r3, r2, #0
 801376c:	e7ed      	b.n	801374a <_calloc_r+0x2a>
 801376e:	230c      	movs	r3, #12
 8013770:	2500      	movs	r5, #0
 8013772:	6003      	str	r3, [r0, #0]
 8013774:	0028      	movs	r0, r5
 8013776:	bd70      	pop	{r4, r5, r6, pc}

08013778 <_free_r>:
 8013778:	b570      	push	{r4, r5, r6, lr}
 801377a:	0005      	movs	r5, r0
 801377c:	2900      	cmp	r1, #0
 801377e:	d010      	beq.n	80137a2 <_free_r+0x2a>
 8013780:	1f0c      	subs	r4, r1, #4
 8013782:	6823      	ldr	r3, [r4, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	da00      	bge.n	801378a <_free_r+0x12>
 8013788:	18e4      	adds	r4, r4, r3
 801378a:	0028      	movs	r0, r5
 801378c:	f7ff fc1c 	bl	8012fc8 <__malloc_lock>
 8013790:	4a1d      	ldr	r2, [pc, #116]	; (8013808 <_free_r+0x90>)
 8013792:	6813      	ldr	r3, [r2, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d105      	bne.n	80137a4 <_free_r+0x2c>
 8013798:	6063      	str	r3, [r4, #4]
 801379a:	6014      	str	r4, [r2, #0]
 801379c:	0028      	movs	r0, r5
 801379e:	f7ff fc1b 	bl	8012fd8 <__malloc_unlock>
 80137a2:	bd70      	pop	{r4, r5, r6, pc}
 80137a4:	42a3      	cmp	r3, r4
 80137a6:	d908      	bls.n	80137ba <_free_r+0x42>
 80137a8:	6821      	ldr	r1, [r4, #0]
 80137aa:	1860      	adds	r0, r4, r1
 80137ac:	4283      	cmp	r3, r0
 80137ae:	d1f3      	bne.n	8013798 <_free_r+0x20>
 80137b0:	6818      	ldr	r0, [r3, #0]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	1841      	adds	r1, r0, r1
 80137b6:	6021      	str	r1, [r4, #0]
 80137b8:	e7ee      	b.n	8013798 <_free_r+0x20>
 80137ba:	001a      	movs	r2, r3
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <_free_r+0x4e>
 80137c2:	42a3      	cmp	r3, r4
 80137c4:	d9f9      	bls.n	80137ba <_free_r+0x42>
 80137c6:	6811      	ldr	r1, [r2, #0]
 80137c8:	1850      	adds	r0, r2, r1
 80137ca:	42a0      	cmp	r0, r4
 80137cc:	d10b      	bne.n	80137e6 <_free_r+0x6e>
 80137ce:	6820      	ldr	r0, [r4, #0]
 80137d0:	1809      	adds	r1, r1, r0
 80137d2:	1850      	adds	r0, r2, r1
 80137d4:	6011      	str	r1, [r2, #0]
 80137d6:	4283      	cmp	r3, r0
 80137d8:	d1e0      	bne.n	801379c <_free_r+0x24>
 80137da:	6818      	ldr	r0, [r3, #0]
 80137dc:	685b      	ldr	r3, [r3, #4]
 80137de:	1841      	adds	r1, r0, r1
 80137e0:	6011      	str	r1, [r2, #0]
 80137e2:	6053      	str	r3, [r2, #4]
 80137e4:	e7da      	b.n	801379c <_free_r+0x24>
 80137e6:	42a0      	cmp	r0, r4
 80137e8:	d902      	bls.n	80137f0 <_free_r+0x78>
 80137ea:	230c      	movs	r3, #12
 80137ec:	602b      	str	r3, [r5, #0]
 80137ee:	e7d5      	b.n	801379c <_free_r+0x24>
 80137f0:	6821      	ldr	r1, [r4, #0]
 80137f2:	1860      	adds	r0, r4, r1
 80137f4:	4283      	cmp	r3, r0
 80137f6:	d103      	bne.n	8013800 <_free_r+0x88>
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	1841      	adds	r1, r0, r1
 80137fe:	6021      	str	r1, [r4, #0]
 8013800:	6063      	str	r3, [r4, #4]
 8013802:	6054      	str	r4, [r2, #4]
 8013804:	e7ca      	b.n	801379c <_free_r+0x24>
 8013806:	46c0      	nop			; (mov r8, r8)
 8013808:	20002ee4 	.word	0x20002ee4

0801380c <__ssputs_r>:
 801380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801380e:	688e      	ldr	r6, [r1, #8]
 8013810:	b085      	sub	sp, #20
 8013812:	0007      	movs	r7, r0
 8013814:	000c      	movs	r4, r1
 8013816:	9203      	str	r2, [sp, #12]
 8013818:	9301      	str	r3, [sp, #4]
 801381a:	429e      	cmp	r6, r3
 801381c:	d83c      	bhi.n	8013898 <__ssputs_r+0x8c>
 801381e:	2390      	movs	r3, #144	; 0x90
 8013820:	898a      	ldrh	r2, [r1, #12]
 8013822:	00db      	lsls	r3, r3, #3
 8013824:	421a      	tst	r2, r3
 8013826:	d034      	beq.n	8013892 <__ssputs_r+0x86>
 8013828:	6909      	ldr	r1, [r1, #16]
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	6960      	ldr	r0, [r4, #20]
 801382e:	1a5b      	subs	r3, r3, r1
 8013830:	9302      	str	r3, [sp, #8]
 8013832:	2303      	movs	r3, #3
 8013834:	4343      	muls	r3, r0
 8013836:	0fdd      	lsrs	r5, r3, #31
 8013838:	18ed      	adds	r5, r5, r3
 801383a:	9b01      	ldr	r3, [sp, #4]
 801383c:	9802      	ldr	r0, [sp, #8]
 801383e:	3301      	adds	r3, #1
 8013840:	181b      	adds	r3, r3, r0
 8013842:	106d      	asrs	r5, r5, #1
 8013844:	42ab      	cmp	r3, r5
 8013846:	d900      	bls.n	801384a <__ssputs_r+0x3e>
 8013848:	001d      	movs	r5, r3
 801384a:	0553      	lsls	r3, r2, #21
 801384c:	d532      	bpl.n	80138b4 <__ssputs_r+0xa8>
 801384e:	0029      	movs	r1, r5
 8013850:	0038      	movs	r0, r7
 8013852:	f7fd fe1d 	bl	8011490 <_malloc_r>
 8013856:	1e06      	subs	r6, r0, #0
 8013858:	d109      	bne.n	801386e <__ssputs_r+0x62>
 801385a:	230c      	movs	r3, #12
 801385c:	603b      	str	r3, [r7, #0]
 801385e:	2340      	movs	r3, #64	; 0x40
 8013860:	2001      	movs	r0, #1
 8013862:	89a2      	ldrh	r2, [r4, #12]
 8013864:	4240      	negs	r0, r0
 8013866:	4313      	orrs	r3, r2
 8013868:	81a3      	strh	r3, [r4, #12]
 801386a:	b005      	add	sp, #20
 801386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801386e:	9a02      	ldr	r2, [sp, #8]
 8013870:	6921      	ldr	r1, [r4, #16]
 8013872:	f7fd fdda 	bl	801142a <memcpy>
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	4a14      	ldr	r2, [pc, #80]	; (80138cc <__ssputs_r+0xc0>)
 801387a:	401a      	ands	r2, r3
 801387c:	2380      	movs	r3, #128	; 0x80
 801387e:	4313      	orrs	r3, r2
 8013880:	81a3      	strh	r3, [r4, #12]
 8013882:	9b02      	ldr	r3, [sp, #8]
 8013884:	6126      	str	r6, [r4, #16]
 8013886:	18f6      	adds	r6, r6, r3
 8013888:	6026      	str	r6, [r4, #0]
 801388a:	6165      	str	r5, [r4, #20]
 801388c:	9e01      	ldr	r6, [sp, #4]
 801388e:	1aed      	subs	r5, r5, r3
 8013890:	60a5      	str	r5, [r4, #8]
 8013892:	9b01      	ldr	r3, [sp, #4]
 8013894:	429e      	cmp	r6, r3
 8013896:	d900      	bls.n	801389a <__ssputs_r+0x8e>
 8013898:	9e01      	ldr	r6, [sp, #4]
 801389a:	0032      	movs	r2, r6
 801389c:	9903      	ldr	r1, [sp, #12]
 801389e:	6820      	ldr	r0, [r4, #0]
 80138a0:	f000 faa4 	bl	8013dec <memmove>
 80138a4:	68a3      	ldr	r3, [r4, #8]
 80138a6:	2000      	movs	r0, #0
 80138a8:	1b9b      	subs	r3, r3, r6
 80138aa:	60a3      	str	r3, [r4, #8]
 80138ac:	6823      	ldr	r3, [r4, #0]
 80138ae:	199e      	adds	r6, r3, r6
 80138b0:	6026      	str	r6, [r4, #0]
 80138b2:	e7da      	b.n	801386a <__ssputs_r+0x5e>
 80138b4:	002a      	movs	r2, r5
 80138b6:	0038      	movs	r0, r7
 80138b8:	f000 faab 	bl	8013e12 <_realloc_r>
 80138bc:	1e06      	subs	r6, r0, #0
 80138be:	d1e0      	bne.n	8013882 <__ssputs_r+0x76>
 80138c0:	0038      	movs	r0, r7
 80138c2:	6921      	ldr	r1, [r4, #16]
 80138c4:	f7ff ff58 	bl	8013778 <_free_r>
 80138c8:	e7c7      	b.n	801385a <__ssputs_r+0x4e>
 80138ca:	46c0      	nop			; (mov r8, r8)
 80138cc:	fffffb7f 	.word	0xfffffb7f

080138d0 <_svfiprintf_r>:
 80138d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138d2:	b0a1      	sub	sp, #132	; 0x84
 80138d4:	9003      	str	r0, [sp, #12]
 80138d6:	001d      	movs	r5, r3
 80138d8:	898b      	ldrh	r3, [r1, #12]
 80138da:	000f      	movs	r7, r1
 80138dc:	0016      	movs	r6, r2
 80138de:	061b      	lsls	r3, r3, #24
 80138e0:	d511      	bpl.n	8013906 <_svfiprintf_r+0x36>
 80138e2:	690b      	ldr	r3, [r1, #16]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d10e      	bne.n	8013906 <_svfiprintf_r+0x36>
 80138e8:	2140      	movs	r1, #64	; 0x40
 80138ea:	f7fd fdd1 	bl	8011490 <_malloc_r>
 80138ee:	6038      	str	r0, [r7, #0]
 80138f0:	6138      	str	r0, [r7, #16]
 80138f2:	2800      	cmp	r0, #0
 80138f4:	d105      	bne.n	8013902 <_svfiprintf_r+0x32>
 80138f6:	230c      	movs	r3, #12
 80138f8:	9a03      	ldr	r2, [sp, #12]
 80138fa:	3801      	subs	r0, #1
 80138fc:	6013      	str	r3, [r2, #0]
 80138fe:	b021      	add	sp, #132	; 0x84
 8013900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013902:	2340      	movs	r3, #64	; 0x40
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	2300      	movs	r3, #0
 8013908:	ac08      	add	r4, sp, #32
 801390a:	6163      	str	r3, [r4, #20]
 801390c:	3320      	adds	r3, #32
 801390e:	7663      	strb	r3, [r4, #25]
 8013910:	3310      	adds	r3, #16
 8013912:	76a3      	strb	r3, [r4, #26]
 8013914:	9507      	str	r5, [sp, #28]
 8013916:	0035      	movs	r5, r6
 8013918:	782b      	ldrb	r3, [r5, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d001      	beq.n	8013922 <_svfiprintf_r+0x52>
 801391e:	2b25      	cmp	r3, #37	; 0x25
 8013920:	d147      	bne.n	80139b2 <_svfiprintf_r+0xe2>
 8013922:	1bab      	subs	r3, r5, r6
 8013924:	9305      	str	r3, [sp, #20]
 8013926:	42b5      	cmp	r5, r6
 8013928:	d00c      	beq.n	8013944 <_svfiprintf_r+0x74>
 801392a:	0032      	movs	r2, r6
 801392c:	0039      	movs	r1, r7
 801392e:	9803      	ldr	r0, [sp, #12]
 8013930:	f7ff ff6c 	bl	801380c <__ssputs_r>
 8013934:	1c43      	adds	r3, r0, #1
 8013936:	d100      	bne.n	801393a <_svfiprintf_r+0x6a>
 8013938:	e0ae      	b.n	8013a98 <_svfiprintf_r+0x1c8>
 801393a:	6962      	ldr	r2, [r4, #20]
 801393c:	9b05      	ldr	r3, [sp, #20]
 801393e:	4694      	mov	ip, r2
 8013940:	4463      	add	r3, ip
 8013942:	6163      	str	r3, [r4, #20]
 8013944:	782b      	ldrb	r3, [r5, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d100      	bne.n	801394c <_svfiprintf_r+0x7c>
 801394a:	e0a5      	b.n	8013a98 <_svfiprintf_r+0x1c8>
 801394c:	2201      	movs	r2, #1
 801394e:	2300      	movs	r3, #0
 8013950:	4252      	negs	r2, r2
 8013952:	6062      	str	r2, [r4, #4]
 8013954:	a904      	add	r1, sp, #16
 8013956:	3254      	adds	r2, #84	; 0x54
 8013958:	1852      	adds	r2, r2, r1
 801395a:	1c6e      	adds	r6, r5, #1
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	60e3      	str	r3, [r4, #12]
 8013960:	60a3      	str	r3, [r4, #8]
 8013962:	7013      	strb	r3, [r2, #0]
 8013964:	65a3      	str	r3, [r4, #88]	; 0x58
 8013966:	2205      	movs	r2, #5
 8013968:	7831      	ldrb	r1, [r6, #0]
 801396a:	4854      	ldr	r0, [pc, #336]	; (8013abc <_svfiprintf_r+0x1ec>)
 801396c:	f7ff fb20 	bl	8012fb0 <memchr>
 8013970:	1c75      	adds	r5, r6, #1
 8013972:	2800      	cmp	r0, #0
 8013974:	d11f      	bne.n	80139b6 <_svfiprintf_r+0xe6>
 8013976:	6822      	ldr	r2, [r4, #0]
 8013978:	06d3      	lsls	r3, r2, #27
 801397a:	d504      	bpl.n	8013986 <_svfiprintf_r+0xb6>
 801397c:	2353      	movs	r3, #83	; 0x53
 801397e:	a904      	add	r1, sp, #16
 8013980:	185b      	adds	r3, r3, r1
 8013982:	2120      	movs	r1, #32
 8013984:	7019      	strb	r1, [r3, #0]
 8013986:	0713      	lsls	r3, r2, #28
 8013988:	d504      	bpl.n	8013994 <_svfiprintf_r+0xc4>
 801398a:	2353      	movs	r3, #83	; 0x53
 801398c:	a904      	add	r1, sp, #16
 801398e:	185b      	adds	r3, r3, r1
 8013990:	212b      	movs	r1, #43	; 0x2b
 8013992:	7019      	strb	r1, [r3, #0]
 8013994:	7833      	ldrb	r3, [r6, #0]
 8013996:	2b2a      	cmp	r3, #42	; 0x2a
 8013998:	d016      	beq.n	80139c8 <_svfiprintf_r+0xf8>
 801399a:	0035      	movs	r5, r6
 801399c:	2100      	movs	r1, #0
 801399e:	200a      	movs	r0, #10
 80139a0:	68e3      	ldr	r3, [r4, #12]
 80139a2:	782a      	ldrb	r2, [r5, #0]
 80139a4:	1c6e      	adds	r6, r5, #1
 80139a6:	3a30      	subs	r2, #48	; 0x30
 80139a8:	2a09      	cmp	r2, #9
 80139aa:	d94e      	bls.n	8013a4a <_svfiprintf_r+0x17a>
 80139ac:	2900      	cmp	r1, #0
 80139ae:	d111      	bne.n	80139d4 <_svfiprintf_r+0x104>
 80139b0:	e017      	b.n	80139e2 <_svfiprintf_r+0x112>
 80139b2:	3501      	adds	r5, #1
 80139b4:	e7b0      	b.n	8013918 <_svfiprintf_r+0x48>
 80139b6:	4b41      	ldr	r3, [pc, #260]	; (8013abc <_svfiprintf_r+0x1ec>)
 80139b8:	6822      	ldr	r2, [r4, #0]
 80139ba:	1ac0      	subs	r0, r0, r3
 80139bc:	2301      	movs	r3, #1
 80139be:	4083      	lsls	r3, r0
 80139c0:	4313      	orrs	r3, r2
 80139c2:	002e      	movs	r6, r5
 80139c4:	6023      	str	r3, [r4, #0]
 80139c6:	e7ce      	b.n	8013966 <_svfiprintf_r+0x96>
 80139c8:	9b07      	ldr	r3, [sp, #28]
 80139ca:	1d19      	adds	r1, r3, #4
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	9107      	str	r1, [sp, #28]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	db01      	blt.n	80139d8 <_svfiprintf_r+0x108>
 80139d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80139d6:	e004      	b.n	80139e2 <_svfiprintf_r+0x112>
 80139d8:	425b      	negs	r3, r3
 80139da:	60e3      	str	r3, [r4, #12]
 80139dc:	2302      	movs	r3, #2
 80139de:	4313      	orrs	r3, r2
 80139e0:	6023      	str	r3, [r4, #0]
 80139e2:	782b      	ldrb	r3, [r5, #0]
 80139e4:	2b2e      	cmp	r3, #46	; 0x2e
 80139e6:	d10a      	bne.n	80139fe <_svfiprintf_r+0x12e>
 80139e8:	786b      	ldrb	r3, [r5, #1]
 80139ea:	2b2a      	cmp	r3, #42	; 0x2a
 80139ec:	d135      	bne.n	8013a5a <_svfiprintf_r+0x18a>
 80139ee:	9b07      	ldr	r3, [sp, #28]
 80139f0:	3502      	adds	r5, #2
 80139f2:	1d1a      	adds	r2, r3, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	9207      	str	r2, [sp, #28]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	db2b      	blt.n	8013a54 <_svfiprintf_r+0x184>
 80139fc:	9309      	str	r3, [sp, #36]	; 0x24
 80139fe:	4e30      	ldr	r6, [pc, #192]	; (8013ac0 <_svfiprintf_r+0x1f0>)
 8013a00:	2203      	movs	r2, #3
 8013a02:	0030      	movs	r0, r6
 8013a04:	7829      	ldrb	r1, [r5, #0]
 8013a06:	f7ff fad3 	bl	8012fb0 <memchr>
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	d006      	beq.n	8013a1c <_svfiprintf_r+0x14c>
 8013a0e:	2340      	movs	r3, #64	; 0x40
 8013a10:	1b80      	subs	r0, r0, r6
 8013a12:	4083      	lsls	r3, r0
 8013a14:	6822      	ldr	r2, [r4, #0]
 8013a16:	3501      	adds	r5, #1
 8013a18:	4313      	orrs	r3, r2
 8013a1a:	6023      	str	r3, [r4, #0]
 8013a1c:	7829      	ldrb	r1, [r5, #0]
 8013a1e:	2206      	movs	r2, #6
 8013a20:	4828      	ldr	r0, [pc, #160]	; (8013ac4 <_svfiprintf_r+0x1f4>)
 8013a22:	1c6e      	adds	r6, r5, #1
 8013a24:	7621      	strb	r1, [r4, #24]
 8013a26:	f7ff fac3 	bl	8012fb0 <memchr>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d03c      	beq.n	8013aa8 <_svfiprintf_r+0x1d8>
 8013a2e:	4b26      	ldr	r3, [pc, #152]	; (8013ac8 <_svfiprintf_r+0x1f8>)
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d125      	bne.n	8013a80 <_svfiprintf_r+0x1b0>
 8013a34:	2207      	movs	r2, #7
 8013a36:	9b07      	ldr	r3, [sp, #28]
 8013a38:	3307      	adds	r3, #7
 8013a3a:	4393      	bics	r3, r2
 8013a3c:	3308      	adds	r3, #8
 8013a3e:	9307      	str	r3, [sp, #28]
 8013a40:	6963      	ldr	r3, [r4, #20]
 8013a42:	9a04      	ldr	r2, [sp, #16]
 8013a44:	189b      	adds	r3, r3, r2
 8013a46:	6163      	str	r3, [r4, #20]
 8013a48:	e765      	b.n	8013916 <_svfiprintf_r+0x46>
 8013a4a:	4343      	muls	r3, r0
 8013a4c:	0035      	movs	r5, r6
 8013a4e:	2101      	movs	r1, #1
 8013a50:	189b      	adds	r3, r3, r2
 8013a52:	e7a6      	b.n	80139a2 <_svfiprintf_r+0xd2>
 8013a54:	2301      	movs	r3, #1
 8013a56:	425b      	negs	r3, r3
 8013a58:	e7d0      	b.n	80139fc <_svfiprintf_r+0x12c>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	200a      	movs	r0, #10
 8013a5e:	001a      	movs	r2, r3
 8013a60:	3501      	adds	r5, #1
 8013a62:	6063      	str	r3, [r4, #4]
 8013a64:	7829      	ldrb	r1, [r5, #0]
 8013a66:	1c6e      	adds	r6, r5, #1
 8013a68:	3930      	subs	r1, #48	; 0x30
 8013a6a:	2909      	cmp	r1, #9
 8013a6c:	d903      	bls.n	8013a76 <_svfiprintf_r+0x1a6>
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d0c5      	beq.n	80139fe <_svfiprintf_r+0x12e>
 8013a72:	9209      	str	r2, [sp, #36]	; 0x24
 8013a74:	e7c3      	b.n	80139fe <_svfiprintf_r+0x12e>
 8013a76:	4342      	muls	r2, r0
 8013a78:	0035      	movs	r5, r6
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	1852      	adds	r2, r2, r1
 8013a7e:	e7f1      	b.n	8013a64 <_svfiprintf_r+0x194>
 8013a80:	ab07      	add	r3, sp, #28
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	003a      	movs	r2, r7
 8013a86:	0021      	movs	r1, r4
 8013a88:	4b10      	ldr	r3, [pc, #64]	; (8013acc <_svfiprintf_r+0x1fc>)
 8013a8a:	9803      	ldr	r0, [sp, #12]
 8013a8c:	f7fd fe20 	bl	80116d0 <_printf_float>
 8013a90:	9004      	str	r0, [sp, #16]
 8013a92:	9b04      	ldr	r3, [sp, #16]
 8013a94:	3301      	adds	r3, #1
 8013a96:	d1d3      	bne.n	8013a40 <_svfiprintf_r+0x170>
 8013a98:	89bb      	ldrh	r3, [r7, #12]
 8013a9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013a9c:	065b      	lsls	r3, r3, #25
 8013a9e:	d400      	bmi.n	8013aa2 <_svfiprintf_r+0x1d2>
 8013aa0:	e72d      	b.n	80138fe <_svfiprintf_r+0x2e>
 8013aa2:	2001      	movs	r0, #1
 8013aa4:	4240      	negs	r0, r0
 8013aa6:	e72a      	b.n	80138fe <_svfiprintf_r+0x2e>
 8013aa8:	ab07      	add	r3, sp, #28
 8013aaa:	9300      	str	r3, [sp, #0]
 8013aac:	003a      	movs	r2, r7
 8013aae:	0021      	movs	r1, r4
 8013ab0:	4b06      	ldr	r3, [pc, #24]	; (8013acc <_svfiprintf_r+0x1fc>)
 8013ab2:	9803      	ldr	r0, [sp, #12]
 8013ab4:	f7fe f8be 	bl	8011c34 <_printf_i>
 8013ab8:	e7ea      	b.n	8013a90 <_svfiprintf_r+0x1c0>
 8013aba:	46c0      	nop			; (mov r8, r8)
 8013abc:	080162fc 	.word	0x080162fc
 8013ac0:	08016302 	.word	0x08016302
 8013ac4:	08016306 	.word	0x08016306
 8013ac8:	080116d1 	.word	0x080116d1
 8013acc:	0801380d 	.word	0x0801380d

08013ad0 <_read_r>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	0004      	movs	r4, r0
 8013ad4:	0008      	movs	r0, r1
 8013ad6:	0011      	movs	r1, r2
 8013ad8:	001a      	movs	r2, r3
 8013ada:	2300      	movs	r3, #0
 8013adc:	4d05      	ldr	r5, [pc, #20]	; (8013af4 <_read_r+0x24>)
 8013ade:	602b      	str	r3, [r5, #0]
 8013ae0:	f7f1 fa50 	bl	8004f84 <_read>
 8013ae4:	1c43      	adds	r3, r0, #1
 8013ae6:	d103      	bne.n	8013af0 <_read_r+0x20>
 8013ae8:	682b      	ldr	r3, [r5, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d000      	beq.n	8013af0 <_read_r+0x20>
 8013aee:	6023      	str	r3, [r4, #0]
 8013af0:	bd70      	pop	{r4, r5, r6, pc}
 8013af2:	46c0      	nop			; (mov r8, r8)
 8013af4:	20002eec 	.word	0x20002eec

08013af8 <__swbuf_r>:
 8013af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afa:	0005      	movs	r5, r0
 8013afc:	000e      	movs	r6, r1
 8013afe:	0014      	movs	r4, r2
 8013b00:	2800      	cmp	r0, #0
 8013b02:	d004      	beq.n	8013b0e <__swbuf_r+0x16>
 8013b04:	6983      	ldr	r3, [r0, #24]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <__swbuf_r+0x16>
 8013b0a:	f7fd fbc7 	bl	801129c <__sinit>
 8013b0e:	4b22      	ldr	r3, [pc, #136]	; (8013b98 <__swbuf_r+0xa0>)
 8013b10:	429c      	cmp	r4, r3
 8013b12:	d12e      	bne.n	8013b72 <__swbuf_r+0x7a>
 8013b14:	686c      	ldr	r4, [r5, #4]
 8013b16:	69a3      	ldr	r3, [r4, #24]
 8013b18:	60a3      	str	r3, [r4, #8]
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	071b      	lsls	r3, r3, #28
 8013b1e:	d532      	bpl.n	8013b86 <__swbuf_r+0x8e>
 8013b20:	6923      	ldr	r3, [r4, #16]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d02f      	beq.n	8013b86 <__swbuf_r+0x8e>
 8013b26:	6823      	ldr	r3, [r4, #0]
 8013b28:	6922      	ldr	r2, [r4, #16]
 8013b2a:	b2f7      	uxtb	r7, r6
 8013b2c:	1a98      	subs	r0, r3, r2
 8013b2e:	6963      	ldr	r3, [r4, #20]
 8013b30:	b2f6      	uxtb	r6, r6
 8013b32:	4283      	cmp	r3, r0
 8013b34:	dc05      	bgt.n	8013b42 <__swbuf_r+0x4a>
 8013b36:	0021      	movs	r1, r4
 8013b38:	0028      	movs	r0, r5
 8013b3a:	f7ff f9d7 	bl	8012eec <_fflush_r>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d127      	bne.n	8013b92 <__swbuf_r+0x9a>
 8013b42:	68a3      	ldr	r3, [r4, #8]
 8013b44:	3001      	adds	r0, #1
 8013b46:	3b01      	subs	r3, #1
 8013b48:	60a3      	str	r3, [r4, #8]
 8013b4a:	6823      	ldr	r3, [r4, #0]
 8013b4c:	1c5a      	adds	r2, r3, #1
 8013b4e:	6022      	str	r2, [r4, #0]
 8013b50:	701f      	strb	r7, [r3, #0]
 8013b52:	6963      	ldr	r3, [r4, #20]
 8013b54:	4283      	cmp	r3, r0
 8013b56:	d004      	beq.n	8013b62 <__swbuf_r+0x6a>
 8013b58:	89a3      	ldrh	r3, [r4, #12]
 8013b5a:	07db      	lsls	r3, r3, #31
 8013b5c:	d507      	bpl.n	8013b6e <__swbuf_r+0x76>
 8013b5e:	2e0a      	cmp	r6, #10
 8013b60:	d105      	bne.n	8013b6e <__swbuf_r+0x76>
 8013b62:	0021      	movs	r1, r4
 8013b64:	0028      	movs	r0, r5
 8013b66:	f7ff f9c1 	bl	8012eec <_fflush_r>
 8013b6a:	2800      	cmp	r0, #0
 8013b6c:	d111      	bne.n	8013b92 <__swbuf_r+0x9a>
 8013b6e:	0030      	movs	r0, r6
 8013b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b72:	4b0a      	ldr	r3, [pc, #40]	; (8013b9c <__swbuf_r+0xa4>)
 8013b74:	429c      	cmp	r4, r3
 8013b76:	d101      	bne.n	8013b7c <__swbuf_r+0x84>
 8013b78:	68ac      	ldr	r4, [r5, #8]
 8013b7a:	e7cc      	b.n	8013b16 <__swbuf_r+0x1e>
 8013b7c:	4b08      	ldr	r3, [pc, #32]	; (8013ba0 <__swbuf_r+0xa8>)
 8013b7e:	429c      	cmp	r4, r3
 8013b80:	d1c9      	bne.n	8013b16 <__swbuf_r+0x1e>
 8013b82:	68ec      	ldr	r4, [r5, #12]
 8013b84:	e7c7      	b.n	8013b16 <__swbuf_r+0x1e>
 8013b86:	0021      	movs	r1, r4
 8013b88:	0028      	movs	r0, r5
 8013b8a:	f000 f80b 	bl	8013ba4 <__swsetup_r>
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	d0c9      	beq.n	8013b26 <__swbuf_r+0x2e>
 8013b92:	2601      	movs	r6, #1
 8013b94:	4276      	negs	r6, r6
 8013b96:	e7ea      	b.n	8013b6e <__swbuf_r+0x76>
 8013b98:	08016098 	.word	0x08016098
 8013b9c:	080160b8 	.word	0x080160b8
 8013ba0:	08016078 	.word	0x08016078

08013ba4 <__swsetup_r>:
 8013ba4:	4b37      	ldr	r3, [pc, #220]	; (8013c84 <__swsetup_r+0xe0>)
 8013ba6:	b570      	push	{r4, r5, r6, lr}
 8013ba8:	681d      	ldr	r5, [r3, #0]
 8013baa:	0006      	movs	r6, r0
 8013bac:	000c      	movs	r4, r1
 8013bae:	2d00      	cmp	r5, #0
 8013bb0:	d005      	beq.n	8013bbe <__swsetup_r+0x1a>
 8013bb2:	69ab      	ldr	r3, [r5, #24]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d102      	bne.n	8013bbe <__swsetup_r+0x1a>
 8013bb8:	0028      	movs	r0, r5
 8013bba:	f7fd fb6f 	bl	801129c <__sinit>
 8013bbe:	4b32      	ldr	r3, [pc, #200]	; (8013c88 <__swsetup_r+0xe4>)
 8013bc0:	429c      	cmp	r4, r3
 8013bc2:	d10f      	bne.n	8013be4 <__swsetup_r+0x40>
 8013bc4:	686c      	ldr	r4, [r5, #4]
 8013bc6:	230c      	movs	r3, #12
 8013bc8:	5ee2      	ldrsh	r2, [r4, r3]
 8013bca:	b293      	uxth	r3, r2
 8013bcc:	0711      	lsls	r1, r2, #28
 8013bce:	d42d      	bmi.n	8013c2c <__swsetup_r+0x88>
 8013bd0:	06d9      	lsls	r1, r3, #27
 8013bd2:	d411      	bmi.n	8013bf8 <__swsetup_r+0x54>
 8013bd4:	2309      	movs	r3, #9
 8013bd6:	2001      	movs	r0, #1
 8013bd8:	6033      	str	r3, [r6, #0]
 8013bda:	3337      	adds	r3, #55	; 0x37
 8013bdc:	4313      	orrs	r3, r2
 8013bde:	81a3      	strh	r3, [r4, #12]
 8013be0:	4240      	negs	r0, r0
 8013be2:	bd70      	pop	{r4, r5, r6, pc}
 8013be4:	4b29      	ldr	r3, [pc, #164]	; (8013c8c <__swsetup_r+0xe8>)
 8013be6:	429c      	cmp	r4, r3
 8013be8:	d101      	bne.n	8013bee <__swsetup_r+0x4a>
 8013bea:	68ac      	ldr	r4, [r5, #8]
 8013bec:	e7eb      	b.n	8013bc6 <__swsetup_r+0x22>
 8013bee:	4b28      	ldr	r3, [pc, #160]	; (8013c90 <__swsetup_r+0xec>)
 8013bf0:	429c      	cmp	r4, r3
 8013bf2:	d1e8      	bne.n	8013bc6 <__swsetup_r+0x22>
 8013bf4:	68ec      	ldr	r4, [r5, #12]
 8013bf6:	e7e6      	b.n	8013bc6 <__swsetup_r+0x22>
 8013bf8:	075b      	lsls	r3, r3, #29
 8013bfa:	d513      	bpl.n	8013c24 <__swsetup_r+0x80>
 8013bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bfe:	2900      	cmp	r1, #0
 8013c00:	d008      	beq.n	8013c14 <__swsetup_r+0x70>
 8013c02:	0023      	movs	r3, r4
 8013c04:	3344      	adds	r3, #68	; 0x44
 8013c06:	4299      	cmp	r1, r3
 8013c08:	d002      	beq.n	8013c10 <__swsetup_r+0x6c>
 8013c0a:	0030      	movs	r0, r6
 8013c0c:	f7ff fdb4 	bl	8013778 <_free_r>
 8013c10:	2300      	movs	r3, #0
 8013c12:	6363      	str	r3, [r4, #52]	; 0x34
 8013c14:	2224      	movs	r2, #36	; 0x24
 8013c16:	89a3      	ldrh	r3, [r4, #12]
 8013c18:	4393      	bics	r3, r2
 8013c1a:	81a3      	strh	r3, [r4, #12]
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	6063      	str	r3, [r4, #4]
 8013c20:	6923      	ldr	r3, [r4, #16]
 8013c22:	6023      	str	r3, [r4, #0]
 8013c24:	2308      	movs	r3, #8
 8013c26:	89a2      	ldrh	r2, [r4, #12]
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	81a3      	strh	r3, [r4, #12]
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d10b      	bne.n	8013c4a <__swsetup_r+0xa6>
 8013c32:	21a0      	movs	r1, #160	; 0xa0
 8013c34:	2280      	movs	r2, #128	; 0x80
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	0089      	lsls	r1, r1, #2
 8013c3a:	0092      	lsls	r2, r2, #2
 8013c3c:	400b      	ands	r3, r1
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d003      	beq.n	8013c4a <__swsetup_r+0xa6>
 8013c42:	0021      	movs	r1, r4
 8013c44:	0030      	movs	r0, r6
 8013c46:	f000 f87b 	bl	8013d40 <__smakebuf_r>
 8013c4a:	220c      	movs	r2, #12
 8013c4c:	5ea3      	ldrsh	r3, [r4, r2]
 8013c4e:	2001      	movs	r0, #1
 8013c50:	001a      	movs	r2, r3
 8013c52:	b299      	uxth	r1, r3
 8013c54:	4002      	ands	r2, r0
 8013c56:	4203      	tst	r3, r0
 8013c58:	d00f      	beq.n	8013c7a <__swsetup_r+0xd6>
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	60a2      	str	r2, [r4, #8]
 8013c5e:	6962      	ldr	r2, [r4, #20]
 8013c60:	4252      	negs	r2, r2
 8013c62:	61a2      	str	r2, [r4, #24]
 8013c64:	2000      	movs	r0, #0
 8013c66:	6922      	ldr	r2, [r4, #16]
 8013c68:	4282      	cmp	r2, r0
 8013c6a:	d1ba      	bne.n	8013be2 <__swsetup_r+0x3e>
 8013c6c:	060a      	lsls	r2, r1, #24
 8013c6e:	d5b8      	bpl.n	8013be2 <__swsetup_r+0x3e>
 8013c70:	2240      	movs	r2, #64	; 0x40
 8013c72:	4313      	orrs	r3, r2
 8013c74:	81a3      	strh	r3, [r4, #12]
 8013c76:	3801      	subs	r0, #1
 8013c78:	e7b3      	b.n	8013be2 <__swsetup_r+0x3e>
 8013c7a:	0788      	lsls	r0, r1, #30
 8013c7c:	d400      	bmi.n	8013c80 <__swsetup_r+0xdc>
 8013c7e:	6962      	ldr	r2, [r4, #20]
 8013c80:	60a2      	str	r2, [r4, #8]
 8013c82:	e7ef      	b.n	8013c64 <__swsetup_r+0xc0>
 8013c84:	20000074 	.word	0x20000074
 8013c88:	08016098 	.word	0x08016098
 8013c8c:	080160b8 	.word	0x080160b8
 8013c90:	08016078 	.word	0x08016078

08013c94 <__assert_func>:
 8013c94:	b530      	push	{r4, r5, lr}
 8013c96:	0014      	movs	r4, r2
 8013c98:	001a      	movs	r2, r3
 8013c9a:	4b09      	ldr	r3, [pc, #36]	; (8013cc0 <__assert_func+0x2c>)
 8013c9c:	0005      	movs	r5, r0
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	b085      	sub	sp, #20
 8013ca2:	68d8      	ldr	r0, [r3, #12]
 8013ca4:	4b07      	ldr	r3, [pc, #28]	; (8013cc4 <__assert_func+0x30>)
 8013ca6:	2c00      	cmp	r4, #0
 8013ca8:	d101      	bne.n	8013cae <__assert_func+0x1a>
 8013caa:	4b07      	ldr	r3, [pc, #28]	; (8013cc8 <__assert_func+0x34>)
 8013cac:	001c      	movs	r4, r3
 8013cae:	9301      	str	r3, [sp, #4]
 8013cb0:	9100      	str	r1, [sp, #0]
 8013cb2:	002b      	movs	r3, r5
 8013cb4:	4905      	ldr	r1, [pc, #20]	; (8013ccc <__assert_func+0x38>)
 8013cb6:	9402      	str	r4, [sp, #8]
 8013cb8:	f000 f80a 	bl	8013cd0 <fiprintf>
 8013cbc:	f000 fa47 	bl	801414e <abort>
 8013cc0:	20000074 	.word	0x20000074
 8013cc4:	0801630d 	.word	0x0801630d
 8013cc8:	08016348 	.word	0x08016348
 8013ccc:	0801631a 	.word	0x0801631a

08013cd0 <fiprintf>:
 8013cd0:	b40e      	push	{r1, r2, r3}
 8013cd2:	b503      	push	{r0, r1, lr}
 8013cd4:	0001      	movs	r1, r0
 8013cd6:	ab03      	add	r3, sp, #12
 8013cd8:	4804      	ldr	r0, [pc, #16]	; (8013cec <fiprintf+0x1c>)
 8013cda:	cb04      	ldmia	r3!, {r2}
 8013cdc:	6800      	ldr	r0, [r0, #0]
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	f000 f8ee 	bl	8013ec0 <_vfiprintf_r>
 8013ce4:	b002      	add	sp, #8
 8013ce6:	bc08      	pop	{r3}
 8013ce8:	b003      	add	sp, #12
 8013cea:	4718      	bx	r3
 8013cec:	20000074 	.word	0x20000074

08013cf0 <__swhatbuf_r>:
 8013cf0:	b570      	push	{r4, r5, r6, lr}
 8013cf2:	000e      	movs	r6, r1
 8013cf4:	001d      	movs	r5, r3
 8013cf6:	230e      	movs	r3, #14
 8013cf8:	5ec9      	ldrsh	r1, [r1, r3]
 8013cfa:	0014      	movs	r4, r2
 8013cfc:	b096      	sub	sp, #88	; 0x58
 8013cfe:	2900      	cmp	r1, #0
 8013d00:	da08      	bge.n	8013d14 <__swhatbuf_r+0x24>
 8013d02:	220c      	movs	r2, #12
 8013d04:	5eb3      	ldrsh	r3, [r6, r2]
 8013d06:	2200      	movs	r2, #0
 8013d08:	602a      	str	r2, [r5, #0]
 8013d0a:	061b      	lsls	r3, r3, #24
 8013d0c:	d411      	bmi.n	8013d32 <__swhatbuf_r+0x42>
 8013d0e:	2380      	movs	r3, #128	; 0x80
 8013d10:	00db      	lsls	r3, r3, #3
 8013d12:	e00f      	b.n	8013d34 <__swhatbuf_r+0x44>
 8013d14:	466a      	mov	r2, sp
 8013d16:	f000 fa21 	bl	801415c <_fstat_r>
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	dbf1      	blt.n	8013d02 <__swhatbuf_r+0x12>
 8013d1e:	23f0      	movs	r3, #240	; 0xf0
 8013d20:	9901      	ldr	r1, [sp, #4]
 8013d22:	021b      	lsls	r3, r3, #8
 8013d24:	4019      	ands	r1, r3
 8013d26:	4b05      	ldr	r3, [pc, #20]	; (8013d3c <__swhatbuf_r+0x4c>)
 8013d28:	18c9      	adds	r1, r1, r3
 8013d2a:	424b      	negs	r3, r1
 8013d2c:	4159      	adcs	r1, r3
 8013d2e:	6029      	str	r1, [r5, #0]
 8013d30:	e7ed      	b.n	8013d0e <__swhatbuf_r+0x1e>
 8013d32:	2340      	movs	r3, #64	; 0x40
 8013d34:	2000      	movs	r0, #0
 8013d36:	6023      	str	r3, [r4, #0]
 8013d38:	b016      	add	sp, #88	; 0x58
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	ffffe000 	.word	0xffffe000

08013d40 <__smakebuf_r>:
 8013d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d42:	2602      	movs	r6, #2
 8013d44:	898b      	ldrh	r3, [r1, #12]
 8013d46:	0005      	movs	r5, r0
 8013d48:	000c      	movs	r4, r1
 8013d4a:	4233      	tst	r3, r6
 8013d4c:	d006      	beq.n	8013d5c <__smakebuf_r+0x1c>
 8013d4e:	0023      	movs	r3, r4
 8013d50:	3347      	adds	r3, #71	; 0x47
 8013d52:	6023      	str	r3, [r4, #0]
 8013d54:	6123      	str	r3, [r4, #16]
 8013d56:	2301      	movs	r3, #1
 8013d58:	6163      	str	r3, [r4, #20]
 8013d5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013d5c:	466a      	mov	r2, sp
 8013d5e:	ab01      	add	r3, sp, #4
 8013d60:	f7ff ffc6 	bl	8013cf0 <__swhatbuf_r>
 8013d64:	9900      	ldr	r1, [sp, #0]
 8013d66:	0007      	movs	r7, r0
 8013d68:	0028      	movs	r0, r5
 8013d6a:	f7fd fb91 	bl	8011490 <_malloc_r>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d108      	bne.n	8013d84 <__smakebuf_r+0x44>
 8013d72:	220c      	movs	r2, #12
 8013d74:	5ea3      	ldrsh	r3, [r4, r2]
 8013d76:	059a      	lsls	r2, r3, #22
 8013d78:	d4ef      	bmi.n	8013d5a <__smakebuf_r+0x1a>
 8013d7a:	2203      	movs	r2, #3
 8013d7c:	4393      	bics	r3, r2
 8013d7e:	431e      	orrs	r6, r3
 8013d80:	81a6      	strh	r6, [r4, #12]
 8013d82:	e7e4      	b.n	8013d4e <__smakebuf_r+0xe>
 8013d84:	4b0f      	ldr	r3, [pc, #60]	; (8013dc4 <__smakebuf_r+0x84>)
 8013d86:	62ab      	str	r3, [r5, #40]	; 0x28
 8013d88:	2380      	movs	r3, #128	; 0x80
 8013d8a:	89a2      	ldrh	r2, [r4, #12]
 8013d8c:	6020      	str	r0, [r4, #0]
 8013d8e:	4313      	orrs	r3, r2
 8013d90:	81a3      	strh	r3, [r4, #12]
 8013d92:	9b00      	ldr	r3, [sp, #0]
 8013d94:	6120      	str	r0, [r4, #16]
 8013d96:	6163      	str	r3, [r4, #20]
 8013d98:	9b01      	ldr	r3, [sp, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00d      	beq.n	8013dba <__smakebuf_r+0x7a>
 8013d9e:	0028      	movs	r0, r5
 8013da0:	230e      	movs	r3, #14
 8013da2:	5ee1      	ldrsh	r1, [r4, r3]
 8013da4:	f000 f9ec 	bl	8014180 <_isatty_r>
 8013da8:	2800      	cmp	r0, #0
 8013daa:	d006      	beq.n	8013dba <__smakebuf_r+0x7a>
 8013dac:	2203      	movs	r2, #3
 8013dae:	89a3      	ldrh	r3, [r4, #12]
 8013db0:	4393      	bics	r3, r2
 8013db2:	001a      	movs	r2, r3
 8013db4:	2301      	movs	r3, #1
 8013db6:	4313      	orrs	r3, r2
 8013db8:	81a3      	strh	r3, [r4, #12]
 8013dba:	89a0      	ldrh	r0, [r4, #12]
 8013dbc:	4307      	orrs	r7, r0
 8013dbe:	81a7      	strh	r7, [r4, #12]
 8013dc0:	e7cb      	b.n	8013d5a <__smakebuf_r+0x1a>
 8013dc2:	46c0      	nop			; (mov r8, r8)
 8013dc4:	08011221 	.word	0x08011221

08013dc8 <__ascii_mbtowc>:
 8013dc8:	b082      	sub	sp, #8
 8013dca:	2900      	cmp	r1, #0
 8013dcc:	d100      	bne.n	8013dd0 <__ascii_mbtowc+0x8>
 8013dce:	a901      	add	r1, sp, #4
 8013dd0:	1e10      	subs	r0, r2, #0
 8013dd2:	d006      	beq.n	8013de2 <__ascii_mbtowc+0x1a>
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d006      	beq.n	8013de6 <__ascii_mbtowc+0x1e>
 8013dd8:	7813      	ldrb	r3, [r2, #0]
 8013dda:	600b      	str	r3, [r1, #0]
 8013ddc:	7810      	ldrb	r0, [r2, #0]
 8013dde:	1e43      	subs	r3, r0, #1
 8013de0:	4198      	sbcs	r0, r3
 8013de2:	b002      	add	sp, #8
 8013de4:	4770      	bx	lr
 8013de6:	2002      	movs	r0, #2
 8013de8:	4240      	negs	r0, r0
 8013dea:	e7fa      	b.n	8013de2 <__ascii_mbtowc+0x1a>

08013dec <memmove>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	4288      	cmp	r0, r1
 8013df0:	d902      	bls.n	8013df8 <memmove+0xc>
 8013df2:	188b      	adds	r3, r1, r2
 8013df4:	4298      	cmp	r0, r3
 8013df6:	d303      	bcc.n	8013e00 <memmove+0x14>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	e007      	b.n	8013e0c <memmove+0x20>
 8013dfc:	5c8b      	ldrb	r3, [r1, r2]
 8013dfe:	5483      	strb	r3, [r0, r2]
 8013e00:	3a01      	subs	r2, #1
 8013e02:	d2fb      	bcs.n	8013dfc <memmove+0x10>
 8013e04:	bd10      	pop	{r4, pc}
 8013e06:	5ccc      	ldrb	r4, [r1, r3]
 8013e08:	54c4      	strb	r4, [r0, r3]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d1fa      	bne.n	8013e06 <memmove+0x1a>
 8013e10:	e7f8      	b.n	8013e04 <memmove+0x18>

08013e12 <_realloc_r>:
 8013e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e14:	0007      	movs	r7, r0
 8013e16:	000e      	movs	r6, r1
 8013e18:	0014      	movs	r4, r2
 8013e1a:	2900      	cmp	r1, #0
 8013e1c:	d105      	bne.n	8013e2a <_realloc_r+0x18>
 8013e1e:	0011      	movs	r1, r2
 8013e20:	f7fd fb36 	bl	8011490 <_malloc_r>
 8013e24:	0005      	movs	r5, r0
 8013e26:	0028      	movs	r0, r5
 8013e28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013e2a:	2a00      	cmp	r2, #0
 8013e2c:	d103      	bne.n	8013e36 <_realloc_r+0x24>
 8013e2e:	f7ff fca3 	bl	8013778 <_free_r>
 8013e32:	0025      	movs	r5, r4
 8013e34:	e7f7      	b.n	8013e26 <_realloc_r+0x14>
 8013e36:	f000 f9b5 	bl	80141a4 <_malloc_usable_size_r>
 8013e3a:	9001      	str	r0, [sp, #4]
 8013e3c:	4284      	cmp	r4, r0
 8013e3e:	d803      	bhi.n	8013e48 <_realloc_r+0x36>
 8013e40:	0035      	movs	r5, r6
 8013e42:	0843      	lsrs	r3, r0, #1
 8013e44:	42a3      	cmp	r3, r4
 8013e46:	d3ee      	bcc.n	8013e26 <_realloc_r+0x14>
 8013e48:	0021      	movs	r1, r4
 8013e4a:	0038      	movs	r0, r7
 8013e4c:	f7fd fb20 	bl	8011490 <_malloc_r>
 8013e50:	1e05      	subs	r5, r0, #0
 8013e52:	d0e8      	beq.n	8013e26 <_realloc_r+0x14>
 8013e54:	9b01      	ldr	r3, [sp, #4]
 8013e56:	0022      	movs	r2, r4
 8013e58:	429c      	cmp	r4, r3
 8013e5a:	d900      	bls.n	8013e5e <_realloc_r+0x4c>
 8013e5c:	001a      	movs	r2, r3
 8013e5e:	0031      	movs	r1, r6
 8013e60:	0028      	movs	r0, r5
 8013e62:	f7fd fae2 	bl	801142a <memcpy>
 8013e66:	0031      	movs	r1, r6
 8013e68:	0038      	movs	r0, r7
 8013e6a:	f7ff fc85 	bl	8013778 <_free_r>
 8013e6e:	e7da      	b.n	8013e26 <_realloc_r+0x14>

08013e70 <__sfputc_r>:
 8013e70:	6893      	ldr	r3, [r2, #8]
 8013e72:	b510      	push	{r4, lr}
 8013e74:	3b01      	subs	r3, #1
 8013e76:	6093      	str	r3, [r2, #8]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	da04      	bge.n	8013e86 <__sfputc_r+0x16>
 8013e7c:	6994      	ldr	r4, [r2, #24]
 8013e7e:	42a3      	cmp	r3, r4
 8013e80:	db07      	blt.n	8013e92 <__sfputc_r+0x22>
 8013e82:	290a      	cmp	r1, #10
 8013e84:	d005      	beq.n	8013e92 <__sfputc_r+0x22>
 8013e86:	6813      	ldr	r3, [r2, #0]
 8013e88:	1c58      	adds	r0, r3, #1
 8013e8a:	6010      	str	r0, [r2, #0]
 8013e8c:	7019      	strb	r1, [r3, #0]
 8013e8e:	0008      	movs	r0, r1
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	f7ff fe31 	bl	8013af8 <__swbuf_r>
 8013e96:	0001      	movs	r1, r0
 8013e98:	e7f9      	b.n	8013e8e <__sfputc_r+0x1e>

08013e9a <__sfputs_r>:
 8013e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e9c:	0006      	movs	r6, r0
 8013e9e:	000f      	movs	r7, r1
 8013ea0:	0014      	movs	r4, r2
 8013ea2:	18d5      	adds	r5, r2, r3
 8013ea4:	42ac      	cmp	r4, r5
 8013ea6:	d101      	bne.n	8013eac <__sfputs_r+0x12>
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	e007      	b.n	8013ebc <__sfputs_r+0x22>
 8013eac:	7821      	ldrb	r1, [r4, #0]
 8013eae:	003a      	movs	r2, r7
 8013eb0:	0030      	movs	r0, r6
 8013eb2:	f7ff ffdd 	bl	8013e70 <__sfputc_r>
 8013eb6:	3401      	adds	r4, #1
 8013eb8:	1c43      	adds	r3, r0, #1
 8013eba:	d1f3      	bne.n	8013ea4 <__sfputs_r+0xa>
 8013ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ec0 <_vfiprintf_r>:
 8013ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ec2:	b0a1      	sub	sp, #132	; 0x84
 8013ec4:	0006      	movs	r6, r0
 8013ec6:	000c      	movs	r4, r1
 8013ec8:	001f      	movs	r7, r3
 8013eca:	9203      	str	r2, [sp, #12]
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d004      	beq.n	8013eda <_vfiprintf_r+0x1a>
 8013ed0:	6983      	ldr	r3, [r0, #24]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <_vfiprintf_r+0x1a>
 8013ed6:	f7fd f9e1 	bl	801129c <__sinit>
 8013eda:	4b8e      	ldr	r3, [pc, #568]	; (8014114 <_vfiprintf_r+0x254>)
 8013edc:	429c      	cmp	r4, r3
 8013ede:	d11c      	bne.n	8013f1a <_vfiprintf_r+0x5a>
 8013ee0:	6874      	ldr	r4, [r6, #4]
 8013ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ee4:	07db      	lsls	r3, r3, #31
 8013ee6:	d405      	bmi.n	8013ef4 <_vfiprintf_r+0x34>
 8013ee8:	89a3      	ldrh	r3, [r4, #12]
 8013eea:	059b      	lsls	r3, r3, #22
 8013eec:	d402      	bmi.n	8013ef4 <_vfiprintf_r+0x34>
 8013eee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ef0:	f7fd fa99 	bl	8011426 <__retarget_lock_acquire_recursive>
 8013ef4:	89a3      	ldrh	r3, [r4, #12]
 8013ef6:	071b      	lsls	r3, r3, #28
 8013ef8:	d502      	bpl.n	8013f00 <_vfiprintf_r+0x40>
 8013efa:	6923      	ldr	r3, [r4, #16]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d11d      	bne.n	8013f3c <_vfiprintf_r+0x7c>
 8013f00:	0021      	movs	r1, r4
 8013f02:	0030      	movs	r0, r6
 8013f04:	f7ff fe4e 	bl	8013ba4 <__swsetup_r>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d017      	beq.n	8013f3c <_vfiprintf_r+0x7c>
 8013f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f0e:	07db      	lsls	r3, r3, #31
 8013f10:	d50d      	bpl.n	8013f2e <_vfiprintf_r+0x6e>
 8013f12:	2001      	movs	r0, #1
 8013f14:	4240      	negs	r0, r0
 8013f16:	b021      	add	sp, #132	; 0x84
 8013f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f1a:	4b7f      	ldr	r3, [pc, #508]	; (8014118 <_vfiprintf_r+0x258>)
 8013f1c:	429c      	cmp	r4, r3
 8013f1e:	d101      	bne.n	8013f24 <_vfiprintf_r+0x64>
 8013f20:	68b4      	ldr	r4, [r6, #8]
 8013f22:	e7de      	b.n	8013ee2 <_vfiprintf_r+0x22>
 8013f24:	4b7d      	ldr	r3, [pc, #500]	; (801411c <_vfiprintf_r+0x25c>)
 8013f26:	429c      	cmp	r4, r3
 8013f28:	d1db      	bne.n	8013ee2 <_vfiprintf_r+0x22>
 8013f2a:	68f4      	ldr	r4, [r6, #12]
 8013f2c:	e7d9      	b.n	8013ee2 <_vfiprintf_r+0x22>
 8013f2e:	89a3      	ldrh	r3, [r4, #12]
 8013f30:	059b      	lsls	r3, r3, #22
 8013f32:	d4ee      	bmi.n	8013f12 <_vfiprintf_r+0x52>
 8013f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f36:	f7fd fa77 	bl	8011428 <__retarget_lock_release_recursive>
 8013f3a:	e7ea      	b.n	8013f12 <_vfiprintf_r+0x52>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	ad08      	add	r5, sp, #32
 8013f40:	616b      	str	r3, [r5, #20]
 8013f42:	3320      	adds	r3, #32
 8013f44:	766b      	strb	r3, [r5, #25]
 8013f46:	3310      	adds	r3, #16
 8013f48:	76ab      	strb	r3, [r5, #26]
 8013f4a:	9707      	str	r7, [sp, #28]
 8013f4c:	9f03      	ldr	r7, [sp, #12]
 8013f4e:	783b      	ldrb	r3, [r7, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d001      	beq.n	8013f58 <_vfiprintf_r+0x98>
 8013f54:	2b25      	cmp	r3, #37	; 0x25
 8013f56:	d14e      	bne.n	8013ff6 <_vfiprintf_r+0x136>
 8013f58:	9b03      	ldr	r3, [sp, #12]
 8013f5a:	1afb      	subs	r3, r7, r3
 8013f5c:	9305      	str	r3, [sp, #20]
 8013f5e:	9b03      	ldr	r3, [sp, #12]
 8013f60:	429f      	cmp	r7, r3
 8013f62:	d00d      	beq.n	8013f80 <_vfiprintf_r+0xc0>
 8013f64:	9b05      	ldr	r3, [sp, #20]
 8013f66:	0021      	movs	r1, r4
 8013f68:	0030      	movs	r0, r6
 8013f6a:	9a03      	ldr	r2, [sp, #12]
 8013f6c:	f7ff ff95 	bl	8013e9a <__sfputs_r>
 8013f70:	1c43      	adds	r3, r0, #1
 8013f72:	d100      	bne.n	8013f76 <_vfiprintf_r+0xb6>
 8013f74:	e0b5      	b.n	80140e2 <_vfiprintf_r+0x222>
 8013f76:	696a      	ldr	r2, [r5, #20]
 8013f78:	9b05      	ldr	r3, [sp, #20]
 8013f7a:	4694      	mov	ip, r2
 8013f7c:	4463      	add	r3, ip
 8013f7e:	616b      	str	r3, [r5, #20]
 8013f80:	783b      	ldrb	r3, [r7, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d100      	bne.n	8013f88 <_vfiprintf_r+0xc8>
 8013f86:	e0ac      	b.n	80140e2 <_vfiprintf_r+0x222>
 8013f88:	2201      	movs	r2, #1
 8013f8a:	1c7b      	adds	r3, r7, #1
 8013f8c:	9303      	str	r3, [sp, #12]
 8013f8e:	2300      	movs	r3, #0
 8013f90:	4252      	negs	r2, r2
 8013f92:	606a      	str	r2, [r5, #4]
 8013f94:	a904      	add	r1, sp, #16
 8013f96:	3254      	adds	r2, #84	; 0x54
 8013f98:	1852      	adds	r2, r2, r1
 8013f9a:	602b      	str	r3, [r5, #0]
 8013f9c:	60eb      	str	r3, [r5, #12]
 8013f9e:	60ab      	str	r3, [r5, #8]
 8013fa0:	7013      	strb	r3, [r2, #0]
 8013fa2:	65ab      	str	r3, [r5, #88]	; 0x58
 8013fa4:	9b03      	ldr	r3, [sp, #12]
 8013fa6:	2205      	movs	r2, #5
 8013fa8:	7819      	ldrb	r1, [r3, #0]
 8013faa:	485d      	ldr	r0, [pc, #372]	; (8014120 <_vfiprintf_r+0x260>)
 8013fac:	f7ff f800 	bl	8012fb0 <memchr>
 8013fb0:	9b03      	ldr	r3, [sp, #12]
 8013fb2:	1c5f      	adds	r7, r3, #1
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d120      	bne.n	8013ffa <_vfiprintf_r+0x13a>
 8013fb8:	682a      	ldr	r2, [r5, #0]
 8013fba:	06d3      	lsls	r3, r2, #27
 8013fbc:	d504      	bpl.n	8013fc8 <_vfiprintf_r+0x108>
 8013fbe:	2353      	movs	r3, #83	; 0x53
 8013fc0:	a904      	add	r1, sp, #16
 8013fc2:	185b      	adds	r3, r3, r1
 8013fc4:	2120      	movs	r1, #32
 8013fc6:	7019      	strb	r1, [r3, #0]
 8013fc8:	0713      	lsls	r3, r2, #28
 8013fca:	d504      	bpl.n	8013fd6 <_vfiprintf_r+0x116>
 8013fcc:	2353      	movs	r3, #83	; 0x53
 8013fce:	a904      	add	r1, sp, #16
 8013fd0:	185b      	adds	r3, r3, r1
 8013fd2:	212b      	movs	r1, #43	; 0x2b
 8013fd4:	7019      	strb	r1, [r3, #0]
 8013fd6:	9b03      	ldr	r3, [sp, #12]
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	2b2a      	cmp	r3, #42	; 0x2a
 8013fdc:	d016      	beq.n	801400c <_vfiprintf_r+0x14c>
 8013fde:	2100      	movs	r1, #0
 8013fe0:	68eb      	ldr	r3, [r5, #12]
 8013fe2:	9f03      	ldr	r7, [sp, #12]
 8013fe4:	783a      	ldrb	r2, [r7, #0]
 8013fe6:	1c78      	adds	r0, r7, #1
 8013fe8:	3a30      	subs	r2, #48	; 0x30
 8013fea:	4684      	mov	ip, r0
 8013fec:	2a09      	cmp	r2, #9
 8013fee:	d94f      	bls.n	8014090 <_vfiprintf_r+0x1d0>
 8013ff0:	2900      	cmp	r1, #0
 8013ff2:	d111      	bne.n	8014018 <_vfiprintf_r+0x158>
 8013ff4:	e017      	b.n	8014026 <_vfiprintf_r+0x166>
 8013ff6:	3701      	adds	r7, #1
 8013ff8:	e7a9      	b.n	8013f4e <_vfiprintf_r+0x8e>
 8013ffa:	4b49      	ldr	r3, [pc, #292]	; (8014120 <_vfiprintf_r+0x260>)
 8013ffc:	682a      	ldr	r2, [r5, #0]
 8013ffe:	1ac0      	subs	r0, r0, r3
 8014000:	2301      	movs	r3, #1
 8014002:	4083      	lsls	r3, r0
 8014004:	4313      	orrs	r3, r2
 8014006:	602b      	str	r3, [r5, #0]
 8014008:	9703      	str	r7, [sp, #12]
 801400a:	e7cb      	b.n	8013fa4 <_vfiprintf_r+0xe4>
 801400c:	9b07      	ldr	r3, [sp, #28]
 801400e:	1d19      	adds	r1, r3, #4
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	9107      	str	r1, [sp, #28]
 8014014:	2b00      	cmp	r3, #0
 8014016:	db01      	blt.n	801401c <_vfiprintf_r+0x15c>
 8014018:	930b      	str	r3, [sp, #44]	; 0x2c
 801401a:	e004      	b.n	8014026 <_vfiprintf_r+0x166>
 801401c:	425b      	negs	r3, r3
 801401e:	60eb      	str	r3, [r5, #12]
 8014020:	2302      	movs	r3, #2
 8014022:	4313      	orrs	r3, r2
 8014024:	602b      	str	r3, [r5, #0]
 8014026:	783b      	ldrb	r3, [r7, #0]
 8014028:	2b2e      	cmp	r3, #46	; 0x2e
 801402a:	d10a      	bne.n	8014042 <_vfiprintf_r+0x182>
 801402c:	787b      	ldrb	r3, [r7, #1]
 801402e:	2b2a      	cmp	r3, #42	; 0x2a
 8014030:	d137      	bne.n	80140a2 <_vfiprintf_r+0x1e2>
 8014032:	9b07      	ldr	r3, [sp, #28]
 8014034:	3702      	adds	r7, #2
 8014036:	1d1a      	adds	r2, r3, #4
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	9207      	str	r2, [sp, #28]
 801403c:	2b00      	cmp	r3, #0
 801403e:	db2d      	blt.n	801409c <_vfiprintf_r+0x1dc>
 8014040:	9309      	str	r3, [sp, #36]	; 0x24
 8014042:	2203      	movs	r2, #3
 8014044:	7839      	ldrb	r1, [r7, #0]
 8014046:	4837      	ldr	r0, [pc, #220]	; (8014124 <_vfiprintf_r+0x264>)
 8014048:	f7fe ffb2 	bl	8012fb0 <memchr>
 801404c:	2800      	cmp	r0, #0
 801404e:	d007      	beq.n	8014060 <_vfiprintf_r+0x1a0>
 8014050:	4b34      	ldr	r3, [pc, #208]	; (8014124 <_vfiprintf_r+0x264>)
 8014052:	682a      	ldr	r2, [r5, #0]
 8014054:	1ac0      	subs	r0, r0, r3
 8014056:	2340      	movs	r3, #64	; 0x40
 8014058:	4083      	lsls	r3, r0
 801405a:	4313      	orrs	r3, r2
 801405c:	3701      	adds	r7, #1
 801405e:	602b      	str	r3, [r5, #0]
 8014060:	7839      	ldrb	r1, [r7, #0]
 8014062:	1c7b      	adds	r3, r7, #1
 8014064:	2206      	movs	r2, #6
 8014066:	4830      	ldr	r0, [pc, #192]	; (8014128 <_vfiprintf_r+0x268>)
 8014068:	9303      	str	r3, [sp, #12]
 801406a:	7629      	strb	r1, [r5, #24]
 801406c:	f7fe ffa0 	bl	8012fb0 <memchr>
 8014070:	2800      	cmp	r0, #0
 8014072:	d045      	beq.n	8014100 <_vfiprintf_r+0x240>
 8014074:	4b2d      	ldr	r3, [pc, #180]	; (801412c <_vfiprintf_r+0x26c>)
 8014076:	2b00      	cmp	r3, #0
 8014078:	d127      	bne.n	80140ca <_vfiprintf_r+0x20a>
 801407a:	2207      	movs	r2, #7
 801407c:	9b07      	ldr	r3, [sp, #28]
 801407e:	3307      	adds	r3, #7
 8014080:	4393      	bics	r3, r2
 8014082:	3308      	adds	r3, #8
 8014084:	9307      	str	r3, [sp, #28]
 8014086:	696b      	ldr	r3, [r5, #20]
 8014088:	9a04      	ldr	r2, [sp, #16]
 801408a:	189b      	adds	r3, r3, r2
 801408c:	616b      	str	r3, [r5, #20]
 801408e:	e75d      	b.n	8013f4c <_vfiprintf_r+0x8c>
 8014090:	210a      	movs	r1, #10
 8014092:	434b      	muls	r3, r1
 8014094:	4667      	mov	r7, ip
 8014096:	189b      	adds	r3, r3, r2
 8014098:	3909      	subs	r1, #9
 801409a:	e7a3      	b.n	8013fe4 <_vfiprintf_r+0x124>
 801409c:	2301      	movs	r3, #1
 801409e:	425b      	negs	r3, r3
 80140a0:	e7ce      	b.n	8014040 <_vfiprintf_r+0x180>
 80140a2:	2300      	movs	r3, #0
 80140a4:	001a      	movs	r2, r3
 80140a6:	3701      	adds	r7, #1
 80140a8:	606b      	str	r3, [r5, #4]
 80140aa:	7839      	ldrb	r1, [r7, #0]
 80140ac:	1c78      	adds	r0, r7, #1
 80140ae:	3930      	subs	r1, #48	; 0x30
 80140b0:	4684      	mov	ip, r0
 80140b2:	2909      	cmp	r1, #9
 80140b4:	d903      	bls.n	80140be <_vfiprintf_r+0x1fe>
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d0c3      	beq.n	8014042 <_vfiprintf_r+0x182>
 80140ba:	9209      	str	r2, [sp, #36]	; 0x24
 80140bc:	e7c1      	b.n	8014042 <_vfiprintf_r+0x182>
 80140be:	230a      	movs	r3, #10
 80140c0:	435a      	muls	r2, r3
 80140c2:	4667      	mov	r7, ip
 80140c4:	1852      	adds	r2, r2, r1
 80140c6:	3b09      	subs	r3, #9
 80140c8:	e7ef      	b.n	80140aa <_vfiprintf_r+0x1ea>
 80140ca:	ab07      	add	r3, sp, #28
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	0022      	movs	r2, r4
 80140d0:	0029      	movs	r1, r5
 80140d2:	0030      	movs	r0, r6
 80140d4:	4b16      	ldr	r3, [pc, #88]	; (8014130 <_vfiprintf_r+0x270>)
 80140d6:	f7fd fafb 	bl	80116d0 <_printf_float>
 80140da:	9004      	str	r0, [sp, #16]
 80140dc:	9b04      	ldr	r3, [sp, #16]
 80140de:	3301      	adds	r3, #1
 80140e0:	d1d1      	bne.n	8014086 <_vfiprintf_r+0x1c6>
 80140e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140e4:	07db      	lsls	r3, r3, #31
 80140e6:	d405      	bmi.n	80140f4 <_vfiprintf_r+0x234>
 80140e8:	89a3      	ldrh	r3, [r4, #12]
 80140ea:	059b      	lsls	r3, r3, #22
 80140ec:	d402      	bmi.n	80140f4 <_vfiprintf_r+0x234>
 80140ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140f0:	f7fd f99a 	bl	8011428 <__retarget_lock_release_recursive>
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	065b      	lsls	r3, r3, #25
 80140f8:	d500      	bpl.n	80140fc <_vfiprintf_r+0x23c>
 80140fa:	e70a      	b.n	8013f12 <_vfiprintf_r+0x52>
 80140fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80140fe:	e70a      	b.n	8013f16 <_vfiprintf_r+0x56>
 8014100:	ab07      	add	r3, sp, #28
 8014102:	9300      	str	r3, [sp, #0]
 8014104:	0022      	movs	r2, r4
 8014106:	0029      	movs	r1, r5
 8014108:	0030      	movs	r0, r6
 801410a:	4b09      	ldr	r3, [pc, #36]	; (8014130 <_vfiprintf_r+0x270>)
 801410c:	f7fd fd92 	bl	8011c34 <_printf_i>
 8014110:	e7e3      	b.n	80140da <_vfiprintf_r+0x21a>
 8014112:	46c0      	nop			; (mov r8, r8)
 8014114:	08016098 	.word	0x08016098
 8014118:	080160b8 	.word	0x080160b8
 801411c:	08016078 	.word	0x08016078
 8014120:	080162fc 	.word	0x080162fc
 8014124:	08016302 	.word	0x08016302
 8014128:	08016306 	.word	0x08016306
 801412c:	080116d1 	.word	0x080116d1
 8014130:	08013e9b 	.word	0x08013e9b

08014134 <__ascii_wctomb>:
 8014134:	0003      	movs	r3, r0
 8014136:	1e08      	subs	r0, r1, #0
 8014138:	d005      	beq.n	8014146 <__ascii_wctomb+0x12>
 801413a:	2aff      	cmp	r2, #255	; 0xff
 801413c:	d904      	bls.n	8014148 <__ascii_wctomb+0x14>
 801413e:	228a      	movs	r2, #138	; 0x8a
 8014140:	2001      	movs	r0, #1
 8014142:	601a      	str	r2, [r3, #0]
 8014144:	4240      	negs	r0, r0
 8014146:	4770      	bx	lr
 8014148:	2001      	movs	r0, #1
 801414a:	700a      	strb	r2, [r1, #0]
 801414c:	e7fb      	b.n	8014146 <__ascii_wctomb+0x12>

0801414e <abort>:
 801414e:	2006      	movs	r0, #6
 8014150:	b510      	push	{r4, lr}
 8014152:	f000 f859 	bl	8014208 <raise>
 8014156:	2001      	movs	r0, #1
 8014158:	f7f0 ff08 	bl	8004f6c <_exit>

0801415c <_fstat_r>:
 801415c:	2300      	movs	r3, #0
 801415e:	b570      	push	{r4, r5, r6, lr}
 8014160:	4d06      	ldr	r5, [pc, #24]	; (801417c <_fstat_r+0x20>)
 8014162:	0004      	movs	r4, r0
 8014164:	0008      	movs	r0, r1
 8014166:	0011      	movs	r1, r2
 8014168:	602b      	str	r3, [r5, #0]
 801416a:	f7f0 ff4e 	bl	800500a <_fstat>
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	d103      	bne.n	801417a <_fstat_r+0x1e>
 8014172:	682b      	ldr	r3, [r5, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d000      	beq.n	801417a <_fstat_r+0x1e>
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	bd70      	pop	{r4, r5, r6, pc}
 801417c:	20002eec 	.word	0x20002eec

08014180 <_isatty_r>:
 8014180:	2300      	movs	r3, #0
 8014182:	b570      	push	{r4, r5, r6, lr}
 8014184:	4d06      	ldr	r5, [pc, #24]	; (80141a0 <_isatty_r+0x20>)
 8014186:	0004      	movs	r4, r0
 8014188:	0008      	movs	r0, r1
 801418a:	602b      	str	r3, [r5, #0]
 801418c:	f7f0 ff4b 	bl	8005026 <_isatty>
 8014190:	1c43      	adds	r3, r0, #1
 8014192:	d103      	bne.n	801419c <_isatty_r+0x1c>
 8014194:	682b      	ldr	r3, [r5, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d000      	beq.n	801419c <_isatty_r+0x1c>
 801419a:	6023      	str	r3, [r4, #0]
 801419c:	bd70      	pop	{r4, r5, r6, pc}
 801419e:	46c0      	nop			; (mov r8, r8)
 80141a0:	20002eec 	.word	0x20002eec

080141a4 <_malloc_usable_size_r>:
 80141a4:	1f0b      	subs	r3, r1, #4
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	1f18      	subs	r0, r3, #4
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	da01      	bge.n	80141b2 <_malloc_usable_size_r+0xe>
 80141ae:	580b      	ldr	r3, [r1, r0]
 80141b0:	18c0      	adds	r0, r0, r3
 80141b2:	4770      	bx	lr

080141b4 <_raise_r>:
 80141b4:	b570      	push	{r4, r5, r6, lr}
 80141b6:	0004      	movs	r4, r0
 80141b8:	000d      	movs	r5, r1
 80141ba:	291f      	cmp	r1, #31
 80141bc:	d904      	bls.n	80141c8 <_raise_r+0x14>
 80141be:	2316      	movs	r3, #22
 80141c0:	6003      	str	r3, [r0, #0]
 80141c2:	2001      	movs	r0, #1
 80141c4:	4240      	negs	r0, r0
 80141c6:	bd70      	pop	{r4, r5, r6, pc}
 80141c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d004      	beq.n	80141d8 <_raise_r+0x24>
 80141ce:	008a      	lsls	r2, r1, #2
 80141d0:	189b      	adds	r3, r3, r2
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	2a00      	cmp	r2, #0
 80141d6:	d108      	bne.n	80141ea <_raise_r+0x36>
 80141d8:	0020      	movs	r0, r4
 80141da:	f000 f831 	bl	8014240 <_getpid_r>
 80141de:	002a      	movs	r2, r5
 80141e0:	0001      	movs	r1, r0
 80141e2:	0020      	movs	r0, r4
 80141e4:	f000 f81a 	bl	801421c <_kill_r>
 80141e8:	e7ed      	b.n	80141c6 <_raise_r+0x12>
 80141ea:	2000      	movs	r0, #0
 80141ec:	2a01      	cmp	r2, #1
 80141ee:	d0ea      	beq.n	80141c6 <_raise_r+0x12>
 80141f0:	1c51      	adds	r1, r2, #1
 80141f2:	d103      	bne.n	80141fc <_raise_r+0x48>
 80141f4:	2316      	movs	r3, #22
 80141f6:	3001      	adds	r0, #1
 80141f8:	6023      	str	r3, [r4, #0]
 80141fa:	e7e4      	b.n	80141c6 <_raise_r+0x12>
 80141fc:	2400      	movs	r4, #0
 80141fe:	0028      	movs	r0, r5
 8014200:	601c      	str	r4, [r3, #0]
 8014202:	4790      	blx	r2
 8014204:	0020      	movs	r0, r4
 8014206:	e7de      	b.n	80141c6 <_raise_r+0x12>

08014208 <raise>:
 8014208:	b510      	push	{r4, lr}
 801420a:	4b03      	ldr	r3, [pc, #12]	; (8014218 <raise+0x10>)
 801420c:	0001      	movs	r1, r0
 801420e:	6818      	ldr	r0, [r3, #0]
 8014210:	f7ff ffd0 	bl	80141b4 <_raise_r>
 8014214:	bd10      	pop	{r4, pc}
 8014216:	46c0      	nop			; (mov r8, r8)
 8014218:	20000074 	.word	0x20000074

0801421c <_kill_r>:
 801421c:	2300      	movs	r3, #0
 801421e:	b570      	push	{r4, r5, r6, lr}
 8014220:	4d06      	ldr	r5, [pc, #24]	; (801423c <_kill_r+0x20>)
 8014222:	0004      	movs	r4, r0
 8014224:	0008      	movs	r0, r1
 8014226:	0011      	movs	r1, r2
 8014228:	602b      	str	r3, [r5, #0]
 801422a:	f7f0 fe8f 	bl	8004f4c <_kill>
 801422e:	1c43      	adds	r3, r0, #1
 8014230:	d103      	bne.n	801423a <_kill_r+0x1e>
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d000      	beq.n	801423a <_kill_r+0x1e>
 8014238:	6023      	str	r3, [r4, #0]
 801423a:	bd70      	pop	{r4, r5, r6, pc}
 801423c:	20002eec 	.word	0x20002eec

08014240 <_getpid_r>:
 8014240:	b510      	push	{r4, lr}
 8014242:	f7f0 fe7d 	bl	8004f40 <_getpid>
 8014246:	bd10      	pop	{r4, pc}

08014248 <cos>:
 8014248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801424a:	4a1e      	ldr	r2, [pc, #120]	; (80142c4 <cos+0x7c>)
 801424c:	004b      	lsls	r3, r1, #1
 801424e:	b087      	sub	sp, #28
 8014250:	085b      	lsrs	r3, r3, #1
 8014252:	4293      	cmp	r3, r2
 8014254:	dc04      	bgt.n	8014260 <cos+0x18>
 8014256:	2200      	movs	r2, #0
 8014258:	2300      	movs	r3, #0
 801425a:	f000 fabb 	bl	80147d4 <__kernel_cos>
 801425e:	e006      	b.n	801426e <cos+0x26>
 8014260:	4a19      	ldr	r2, [pc, #100]	; (80142c8 <cos+0x80>)
 8014262:	4293      	cmp	r3, r2
 8014264:	dd05      	ble.n	8014272 <cos+0x2a>
 8014266:	0002      	movs	r2, r0
 8014268:	000b      	movs	r3, r1
 801426a:	f7ed ff57 	bl	800211c <__aeabi_dsub>
 801426e:	b007      	add	sp, #28
 8014270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014272:	aa02      	add	r2, sp, #8
 8014274:	f000 f8be 	bl	80143f4 <__ieee754_rem_pio2>
 8014278:	9c04      	ldr	r4, [sp, #16]
 801427a:	9d05      	ldr	r5, [sp, #20]
 801427c:	2303      	movs	r3, #3
 801427e:	4003      	ands	r3, r0
 8014280:	2b01      	cmp	r3, #1
 8014282:	d008      	beq.n	8014296 <cos+0x4e>
 8014284:	9802      	ldr	r0, [sp, #8]
 8014286:	9903      	ldr	r1, [sp, #12]
 8014288:	2b02      	cmp	r3, #2
 801428a:	d00f      	beq.n	80142ac <cos+0x64>
 801428c:	2b00      	cmp	r3, #0
 801428e:	d112      	bne.n	80142b6 <cos+0x6e>
 8014290:	0022      	movs	r2, r4
 8014292:	002b      	movs	r3, r5
 8014294:	e7e1      	b.n	801425a <cos+0x12>
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	0022      	movs	r2, r4
 801429a:	9802      	ldr	r0, [sp, #8]
 801429c:	9903      	ldr	r1, [sp, #12]
 801429e:	002b      	movs	r3, r5
 80142a0:	f000 fec2 	bl	8015028 <__kernel_sin>
 80142a4:	2380      	movs	r3, #128	; 0x80
 80142a6:	061b      	lsls	r3, r3, #24
 80142a8:	18c9      	adds	r1, r1, r3
 80142aa:	e7e0      	b.n	801426e <cos+0x26>
 80142ac:	0022      	movs	r2, r4
 80142ae:	002b      	movs	r3, r5
 80142b0:	f000 fa90 	bl	80147d4 <__kernel_cos>
 80142b4:	e7f6      	b.n	80142a4 <cos+0x5c>
 80142b6:	2301      	movs	r3, #1
 80142b8:	0022      	movs	r2, r4
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	002b      	movs	r3, r5
 80142be:	f000 feb3 	bl	8015028 <__kernel_sin>
 80142c2:	e7d4      	b.n	801426e <cos+0x26>
 80142c4:	3fe921fb 	.word	0x3fe921fb
 80142c8:	7fefffff 	.word	0x7fefffff

080142cc <round>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	000d      	movs	r5, r1
 80142d0:	0006      	movs	r6, r0
 80142d2:	0001      	movs	r1, r0
 80142d4:	006a      	lsls	r2, r5, #1
 80142d6:	4820      	ldr	r0, [pc, #128]	; (8014358 <round+0x8c>)
 80142d8:	0d52      	lsrs	r2, r2, #21
 80142da:	1810      	adds	r0, r2, r0
 80142dc:	2813      	cmp	r0, #19
 80142de:	dc18      	bgt.n	8014312 <round+0x46>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	da09      	bge.n	80142f8 <round+0x2c>
 80142e4:	0feb      	lsrs	r3, r5, #31
 80142e6:	2200      	movs	r2, #0
 80142e8:	07db      	lsls	r3, r3, #31
 80142ea:	1c41      	adds	r1, r0, #1
 80142ec:	d101      	bne.n	80142f2 <round+0x26>
 80142ee:	491b      	ldr	r1, [pc, #108]	; (801435c <round+0x90>)
 80142f0:	430b      	orrs	r3, r1
 80142f2:	0019      	movs	r1, r3
 80142f4:	0010      	movs	r0, r2
 80142f6:	e018      	b.n	801432a <round+0x5e>
 80142f8:	4c19      	ldr	r4, [pc, #100]	; (8014360 <round+0x94>)
 80142fa:	4104      	asrs	r4, r0
 80142fc:	0022      	movs	r2, r4
 80142fe:	402a      	ands	r2, r5
 8014300:	4311      	orrs	r1, r2
 8014302:	d014      	beq.n	801432e <round+0x62>
 8014304:	2280      	movs	r2, #128	; 0x80
 8014306:	0312      	lsls	r2, r2, #12
 8014308:	4102      	asrs	r2, r0
 801430a:	1953      	adds	r3, r2, r5
 801430c:	43a3      	bics	r3, r4
 801430e:	2200      	movs	r2, #0
 8014310:	e7ef      	b.n	80142f2 <round+0x26>
 8014312:	2833      	cmp	r0, #51	; 0x33
 8014314:	dd0e      	ble.n	8014334 <round+0x68>
 8014316:	2380      	movs	r3, #128	; 0x80
 8014318:	00db      	lsls	r3, r3, #3
 801431a:	4298      	cmp	r0, r3
 801431c:	d107      	bne.n	801432e <round+0x62>
 801431e:	0032      	movs	r2, r6
 8014320:	002b      	movs	r3, r5
 8014322:	0030      	movs	r0, r6
 8014324:	0029      	movs	r1, r5
 8014326:	f7ec fd4f 	bl	8000dc8 <__aeabi_dadd>
 801432a:	0006      	movs	r6, r0
 801432c:	000d      	movs	r5, r1
 801432e:	0030      	movs	r0, r6
 8014330:	0029      	movs	r1, r5
 8014332:	bd70      	pop	{r4, r5, r6, pc}
 8014334:	4c0b      	ldr	r4, [pc, #44]	; (8014364 <round+0x98>)
 8014336:	1912      	adds	r2, r2, r4
 8014338:	2401      	movs	r4, #1
 801433a:	4264      	negs	r4, r4
 801433c:	40d4      	lsrs	r4, r2
 801433e:	4234      	tst	r4, r6
 8014340:	d0f5      	beq.n	801432e <round+0x62>
 8014342:	2233      	movs	r2, #51	; 0x33
 8014344:	1a10      	subs	r0, r2, r0
 8014346:	3a32      	subs	r2, #50	; 0x32
 8014348:	4082      	lsls	r2, r0
 801434a:	1992      	adds	r2, r2, r6
 801434c:	42b2      	cmp	r2, r6
 801434e:	4189      	sbcs	r1, r1
 8014350:	4249      	negs	r1, r1
 8014352:	186b      	adds	r3, r5, r1
 8014354:	43a2      	bics	r2, r4
 8014356:	e7cc      	b.n	80142f2 <round+0x26>
 8014358:	fffffc01 	.word	0xfffffc01
 801435c:	3ff00000 	.word	0x3ff00000
 8014360:	000fffff 	.word	0x000fffff
 8014364:	fffffbed 	.word	0xfffffbed

08014368 <sin>:
 8014368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801436a:	4a20      	ldr	r2, [pc, #128]	; (80143ec <sin+0x84>)
 801436c:	004b      	lsls	r3, r1, #1
 801436e:	b087      	sub	sp, #28
 8014370:	085b      	lsrs	r3, r3, #1
 8014372:	4293      	cmp	r3, r2
 8014374:	dc06      	bgt.n	8014384 <sin+0x1c>
 8014376:	2300      	movs	r3, #0
 8014378:	2200      	movs	r2, #0
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	2300      	movs	r3, #0
 801437e:	f000 fe53 	bl	8015028 <__kernel_sin>
 8014382:	e006      	b.n	8014392 <sin+0x2a>
 8014384:	4a1a      	ldr	r2, [pc, #104]	; (80143f0 <sin+0x88>)
 8014386:	4293      	cmp	r3, r2
 8014388:	dd05      	ble.n	8014396 <sin+0x2e>
 801438a:	0002      	movs	r2, r0
 801438c:	000b      	movs	r3, r1
 801438e:	f7ed fec5 	bl	800211c <__aeabi_dsub>
 8014392:	b007      	add	sp, #28
 8014394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014396:	aa02      	add	r2, sp, #8
 8014398:	f000 f82c 	bl	80143f4 <__ieee754_rem_pio2>
 801439c:	9c04      	ldr	r4, [sp, #16]
 801439e:	9d05      	ldr	r5, [sp, #20]
 80143a0:	2303      	movs	r3, #3
 80143a2:	4003      	ands	r3, r0
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d00a      	beq.n	80143be <sin+0x56>
 80143a8:	9802      	ldr	r0, [sp, #8]
 80143aa:	9903      	ldr	r1, [sp, #12]
 80143ac:	2b02      	cmp	r3, #2
 80143ae:	d00d      	beq.n	80143cc <sin+0x64>
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d115      	bne.n	80143e0 <sin+0x78>
 80143b4:	3301      	adds	r3, #1
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	0022      	movs	r2, r4
 80143ba:	002b      	movs	r3, r5
 80143bc:	e7df      	b.n	801437e <sin+0x16>
 80143be:	0022      	movs	r2, r4
 80143c0:	9802      	ldr	r0, [sp, #8]
 80143c2:	9903      	ldr	r1, [sp, #12]
 80143c4:	002b      	movs	r3, r5
 80143c6:	f000 fa05 	bl	80147d4 <__kernel_cos>
 80143ca:	e7e2      	b.n	8014392 <sin+0x2a>
 80143cc:	2301      	movs	r3, #1
 80143ce:	0022      	movs	r2, r4
 80143d0:	9300      	str	r3, [sp, #0]
 80143d2:	002b      	movs	r3, r5
 80143d4:	f000 fe28 	bl	8015028 <__kernel_sin>
 80143d8:	2380      	movs	r3, #128	; 0x80
 80143da:	061b      	lsls	r3, r3, #24
 80143dc:	18c9      	adds	r1, r1, r3
 80143de:	e7d8      	b.n	8014392 <sin+0x2a>
 80143e0:	0022      	movs	r2, r4
 80143e2:	002b      	movs	r3, r5
 80143e4:	f000 f9f6 	bl	80147d4 <__kernel_cos>
 80143e8:	e7f6      	b.n	80143d8 <sin+0x70>
 80143ea:	46c0      	nop			; (mov r8, r8)
 80143ec:	3fe921fb 	.word	0x3fe921fb
 80143f0:	7fefffff 	.word	0x7fefffff

080143f4 <__ieee754_rem_pio2>:
 80143f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143f6:	004b      	lsls	r3, r1, #1
 80143f8:	b091      	sub	sp, #68	; 0x44
 80143fa:	085b      	lsrs	r3, r3, #1
 80143fc:	9302      	str	r3, [sp, #8]
 80143fe:	0017      	movs	r7, r2
 8014400:	4bb6      	ldr	r3, [pc, #728]	; (80146dc <__ieee754_rem_pio2+0x2e8>)
 8014402:	9a02      	ldr	r2, [sp, #8]
 8014404:	0004      	movs	r4, r0
 8014406:	000d      	movs	r5, r1
 8014408:	9109      	str	r1, [sp, #36]	; 0x24
 801440a:	429a      	cmp	r2, r3
 801440c:	dc09      	bgt.n	8014422 <__ieee754_rem_pio2+0x2e>
 801440e:	0002      	movs	r2, r0
 8014410:	000b      	movs	r3, r1
 8014412:	603a      	str	r2, [r7, #0]
 8014414:	607b      	str	r3, [r7, #4]
 8014416:	2200      	movs	r2, #0
 8014418:	2300      	movs	r3, #0
 801441a:	60ba      	str	r2, [r7, #8]
 801441c:	60fb      	str	r3, [r7, #12]
 801441e:	2600      	movs	r6, #0
 8014420:	e025      	b.n	801446e <__ieee754_rem_pio2+0x7a>
 8014422:	4baf      	ldr	r3, [pc, #700]	; (80146e0 <__ieee754_rem_pio2+0x2ec>)
 8014424:	9a02      	ldr	r2, [sp, #8]
 8014426:	429a      	cmp	r2, r3
 8014428:	dd00      	ble.n	801442c <__ieee754_rem_pio2+0x38>
 801442a:	e06e      	b.n	801450a <__ieee754_rem_pio2+0x116>
 801442c:	4ead      	ldr	r6, [pc, #692]	; (80146e4 <__ieee754_rem_pio2+0x2f0>)
 801442e:	4aae      	ldr	r2, [pc, #696]	; (80146e8 <__ieee754_rem_pio2+0x2f4>)
 8014430:	2d00      	cmp	r5, #0
 8014432:	dd35      	ble.n	80144a0 <__ieee754_rem_pio2+0xac>
 8014434:	0020      	movs	r0, r4
 8014436:	0029      	movs	r1, r5
 8014438:	4baa      	ldr	r3, [pc, #680]	; (80146e4 <__ieee754_rem_pio2+0x2f0>)
 801443a:	f7ed fe6f 	bl	800211c <__aeabi_dsub>
 801443e:	9b02      	ldr	r3, [sp, #8]
 8014440:	0004      	movs	r4, r0
 8014442:	000d      	movs	r5, r1
 8014444:	42b3      	cmp	r3, r6
 8014446:	d015      	beq.n	8014474 <__ieee754_rem_pio2+0x80>
 8014448:	4aa8      	ldr	r2, [pc, #672]	; (80146ec <__ieee754_rem_pio2+0x2f8>)
 801444a:	4ba9      	ldr	r3, [pc, #676]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 801444c:	f7ed fe66 	bl	800211c <__aeabi_dsub>
 8014450:	0002      	movs	r2, r0
 8014452:	000b      	movs	r3, r1
 8014454:	0020      	movs	r0, r4
 8014456:	603a      	str	r2, [r7, #0]
 8014458:	607b      	str	r3, [r7, #4]
 801445a:	0029      	movs	r1, r5
 801445c:	f7ed fe5e 	bl	800211c <__aeabi_dsub>
 8014460:	4aa2      	ldr	r2, [pc, #648]	; (80146ec <__ieee754_rem_pio2+0x2f8>)
 8014462:	4ba3      	ldr	r3, [pc, #652]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 8014464:	f7ed fe5a 	bl	800211c <__aeabi_dsub>
 8014468:	2601      	movs	r6, #1
 801446a:	60b8      	str	r0, [r7, #8]
 801446c:	60f9      	str	r1, [r7, #12]
 801446e:	0030      	movs	r0, r6
 8014470:	b011      	add	sp, #68	; 0x44
 8014472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014474:	22d3      	movs	r2, #211	; 0xd3
 8014476:	4b9e      	ldr	r3, [pc, #632]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 8014478:	0552      	lsls	r2, r2, #21
 801447a:	f7ed fe4f 	bl	800211c <__aeabi_dsub>
 801447e:	4a9d      	ldr	r2, [pc, #628]	; (80146f4 <__ieee754_rem_pio2+0x300>)
 8014480:	4b9d      	ldr	r3, [pc, #628]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 8014482:	0004      	movs	r4, r0
 8014484:	000d      	movs	r5, r1
 8014486:	f7ed fe49 	bl	800211c <__aeabi_dsub>
 801448a:	0002      	movs	r2, r0
 801448c:	000b      	movs	r3, r1
 801448e:	0020      	movs	r0, r4
 8014490:	603a      	str	r2, [r7, #0]
 8014492:	607b      	str	r3, [r7, #4]
 8014494:	0029      	movs	r1, r5
 8014496:	f7ed fe41 	bl	800211c <__aeabi_dsub>
 801449a:	4a96      	ldr	r2, [pc, #600]	; (80146f4 <__ieee754_rem_pio2+0x300>)
 801449c:	4b96      	ldr	r3, [pc, #600]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 801449e:	e7e1      	b.n	8014464 <__ieee754_rem_pio2+0x70>
 80144a0:	0020      	movs	r0, r4
 80144a2:	0029      	movs	r1, r5
 80144a4:	4b8f      	ldr	r3, [pc, #572]	; (80146e4 <__ieee754_rem_pio2+0x2f0>)
 80144a6:	f7ec fc8f 	bl	8000dc8 <__aeabi_dadd>
 80144aa:	9b02      	ldr	r3, [sp, #8]
 80144ac:	0004      	movs	r4, r0
 80144ae:	000d      	movs	r5, r1
 80144b0:	42b3      	cmp	r3, r6
 80144b2:	d014      	beq.n	80144de <__ieee754_rem_pio2+0xea>
 80144b4:	4a8d      	ldr	r2, [pc, #564]	; (80146ec <__ieee754_rem_pio2+0x2f8>)
 80144b6:	4b8e      	ldr	r3, [pc, #568]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 80144b8:	f7ec fc86 	bl	8000dc8 <__aeabi_dadd>
 80144bc:	0002      	movs	r2, r0
 80144be:	000b      	movs	r3, r1
 80144c0:	0020      	movs	r0, r4
 80144c2:	603a      	str	r2, [r7, #0]
 80144c4:	607b      	str	r3, [r7, #4]
 80144c6:	0029      	movs	r1, r5
 80144c8:	f7ed fe28 	bl	800211c <__aeabi_dsub>
 80144cc:	4a87      	ldr	r2, [pc, #540]	; (80146ec <__ieee754_rem_pio2+0x2f8>)
 80144ce:	4b88      	ldr	r3, [pc, #544]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 80144d0:	f7ec fc7a 	bl	8000dc8 <__aeabi_dadd>
 80144d4:	2601      	movs	r6, #1
 80144d6:	60b8      	str	r0, [r7, #8]
 80144d8:	60f9      	str	r1, [r7, #12]
 80144da:	4276      	negs	r6, r6
 80144dc:	e7c7      	b.n	801446e <__ieee754_rem_pio2+0x7a>
 80144de:	22d3      	movs	r2, #211	; 0xd3
 80144e0:	4b83      	ldr	r3, [pc, #524]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 80144e2:	0552      	lsls	r2, r2, #21
 80144e4:	f7ec fc70 	bl	8000dc8 <__aeabi_dadd>
 80144e8:	4a82      	ldr	r2, [pc, #520]	; (80146f4 <__ieee754_rem_pio2+0x300>)
 80144ea:	4b83      	ldr	r3, [pc, #524]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 80144ec:	0004      	movs	r4, r0
 80144ee:	000d      	movs	r5, r1
 80144f0:	f7ec fc6a 	bl	8000dc8 <__aeabi_dadd>
 80144f4:	0002      	movs	r2, r0
 80144f6:	000b      	movs	r3, r1
 80144f8:	0020      	movs	r0, r4
 80144fa:	603a      	str	r2, [r7, #0]
 80144fc:	607b      	str	r3, [r7, #4]
 80144fe:	0029      	movs	r1, r5
 8014500:	f7ed fe0c 	bl	800211c <__aeabi_dsub>
 8014504:	4a7b      	ldr	r2, [pc, #492]	; (80146f4 <__ieee754_rem_pio2+0x300>)
 8014506:	4b7c      	ldr	r3, [pc, #496]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 8014508:	e7e2      	b.n	80144d0 <__ieee754_rem_pio2+0xdc>
 801450a:	4b7c      	ldr	r3, [pc, #496]	; (80146fc <__ieee754_rem_pio2+0x308>)
 801450c:	9a02      	ldr	r2, [sp, #8]
 801450e:	429a      	cmp	r2, r3
 8014510:	dd00      	ble.n	8014514 <__ieee754_rem_pio2+0x120>
 8014512:	e0d3      	b.n	80146bc <__ieee754_rem_pio2+0x2c8>
 8014514:	0020      	movs	r0, r4
 8014516:	0029      	movs	r1, r5
 8014518:	f000 fe32 	bl	8015180 <fabs>
 801451c:	4a78      	ldr	r2, [pc, #480]	; (8014700 <__ieee754_rem_pio2+0x30c>)
 801451e:	4b79      	ldr	r3, [pc, #484]	; (8014704 <__ieee754_rem_pio2+0x310>)
 8014520:	0004      	movs	r4, r0
 8014522:	000d      	movs	r5, r1
 8014524:	f7ed fb8e 	bl	8001c44 <__aeabi_dmul>
 8014528:	2200      	movs	r2, #0
 801452a:	4b77      	ldr	r3, [pc, #476]	; (8014708 <__ieee754_rem_pio2+0x314>)
 801452c:	f7ec fc4c 	bl	8000dc8 <__aeabi_dadd>
 8014530:	f7ee f9a4 	bl	800287c <__aeabi_d2iz>
 8014534:	0006      	movs	r6, r0
 8014536:	f7ee f9d7 	bl	80028e8 <__aeabi_i2d>
 801453a:	4a6b      	ldr	r2, [pc, #428]	; (80146e8 <__ieee754_rem_pio2+0x2f4>)
 801453c:	4b69      	ldr	r3, [pc, #420]	; (80146e4 <__ieee754_rem_pio2+0x2f0>)
 801453e:	9006      	str	r0, [sp, #24]
 8014540:	9107      	str	r1, [sp, #28]
 8014542:	f7ed fb7f 	bl	8001c44 <__aeabi_dmul>
 8014546:	0002      	movs	r2, r0
 8014548:	000b      	movs	r3, r1
 801454a:	0020      	movs	r0, r4
 801454c:	0029      	movs	r1, r5
 801454e:	f7ed fde5 	bl	800211c <__aeabi_dsub>
 8014552:	4a66      	ldr	r2, [pc, #408]	; (80146ec <__ieee754_rem_pio2+0x2f8>)
 8014554:	9004      	str	r0, [sp, #16]
 8014556:	9105      	str	r1, [sp, #20]
 8014558:	9806      	ldr	r0, [sp, #24]
 801455a:	9907      	ldr	r1, [sp, #28]
 801455c:	4b64      	ldr	r3, [pc, #400]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 801455e:	f7ed fb71 	bl	8001c44 <__aeabi_dmul>
 8014562:	0004      	movs	r4, r0
 8014564:	000d      	movs	r5, r1
 8014566:	2e1f      	cmp	r6, #31
 8014568:	dc0f      	bgt.n	801458a <__ieee754_rem_pio2+0x196>
 801456a:	4a68      	ldr	r2, [pc, #416]	; (801470c <__ieee754_rem_pio2+0x318>)
 801456c:	1e73      	subs	r3, r6, #1
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	589b      	ldr	r3, [r3, r2]
 8014572:	9a02      	ldr	r2, [sp, #8]
 8014574:	4293      	cmp	r3, r2
 8014576:	d008      	beq.n	801458a <__ieee754_rem_pio2+0x196>
 8014578:	9804      	ldr	r0, [sp, #16]
 801457a:	9905      	ldr	r1, [sp, #20]
 801457c:	0022      	movs	r2, r4
 801457e:	002b      	movs	r3, r5
 8014580:	f7ed fdcc 	bl	800211c <__aeabi_dsub>
 8014584:	6038      	str	r0, [r7, #0]
 8014586:	6079      	str	r1, [r7, #4]
 8014588:	e012      	b.n	80145b0 <__ieee754_rem_pio2+0x1bc>
 801458a:	0022      	movs	r2, r4
 801458c:	9804      	ldr	r0, [sp, #16]
 801458e:	9905      	ldr	r1, [sp, #20]
 8014590:	002b      	movs	r3, r5
 8014592:	f7ed fdc3 	bl	800211c <__aeabi_dsub>
 8014596:	9b02      	ldr	r3, [sp, #8]
 8014598:	151b      	asrs	r3, r3, #20
 801459a:	9308      	str	r3, [sp, #32]
 801459c:	9a08      	ldr	r2, [sp, #32]
 801459e:	004b      	lsls	r3, r1, #1
 80145a0:	0d5b      	lsrs	r3, r3, #21
 80145a2:	1ad3      	subs	r3, r2, r3
 80145a4:	2b10      	cmp	r3, #16
 80145a6:	dc21      	bgt.n	80145ec <__ieee754_rem_pio2+0x1f8>
 80145a8:	0002      	movs	r2, r0
 80145aa:	000b      	movs	r3, r1
 80145ac:	603a      	str	r2, [r7, #0]
 80145ae:	607b      	str	r3, [r7, #4]
 80145b0:	9804      	ldr	r0, [sp, #16]
 80145b2:	9905      	ldr	r1, [sp, #20]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	683a      	ldr	r2, [r7, #0]
 80145b8:	9302      	str	r3, [sp, #8]
 80145ba:	9b02      	ldr	r3, [sp, #8]
 80145bc:	f7ed fdae 	bl	800211c <__aeabi_dsub>
 80145c0:	0022      	movs	r2, r4
 80145c2:	002b      	movs	r3, r5
 80145c4:	f7ed fdaa 	bl	800211c <__aeabi_dsub>
 80145c8:	000b      	movs	r3, r1
 80145ca:	0002      	movs	r2, r0
 80145cc:	60ba      	str	r2, [r7, #8]
 80145ce:	60fb      	str	r3, [r7, #12]
 80145d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	db00      	blt.n	80145d8 <__ieee754_rem_pio2+0x1e4>
 80145d6:	e74a      	b.n	801446e <__ieee754_rem_pio2+0x7a>
 80145d8:	2380      	movs	r3, #128	; 0x80
 80145da:	061b      	lsls	r3, r3, #24
 80145dc:	469c      	mov	ip, r3
 80145de:	9c02      	ldr	r4, [sp, #8]
 80145e0:	18c9      	adds	r1, r1, r3
 80145e2:	4464      	add	r4, ip
 80145e4:	607c      	str	r4, [r7, #4]
 80145e6:	60b8      	str	r0, [r7, #8]
 80145e8:	60f9      	str	r1, [r7, #12]
 80145ea:	e776      	b.n	80144da <__ieee754_rem_pio2+0xe6>
 80145ec:	22d3      	movs	r2, #211	; 0xd3
 80145ee:	9806      	ldr	r0, [sp, #24]
 80145f0:	9907      	ldr	r1, [sp, #28]
 80145f2:	4b3f      	ldr	r3, [pc, #252]	; (80146f0 <__ieee754_rem_pio2+0x2fc>)
 80145f4:	0552      	lsls	r2, r2, #21
 80145f6:	f7ed fb25 	bl	8001c44 <__aeabi_dmul>
 80145fa:	0004      	movs	r4, r0
 80145fc:	000d      	movs	r5, r1
 80145fe:	0002      	movs	r2, r0
 8014600:	000b      	movs	r3, r1
 8014602:	9804      	ldr	r0, [sp, #16]
 8014604:	9905      	ldr	r1, [sp, #20]
 8014606:	f7ed fd89 	bl	800211c <__aeabi_dsub>
 801460a:	0002      	movs	r2, r0
 801460c:	000b      	movs	r3, r1
 801460e:	9002      	str	r0, [sp, #8]
 8014610:	9103      	str	r1, [sp, #12]
 8014612:	9804      	ldr	r0, [sp, #16]
 8014614:	9905      	ldr	r1, [sp, #20]
 8014616:	f7ed fd81 	bl	800211c <__aeabi_dsub>
 801461a:	0022      	movs	r2, r4
 801461c:	002b      	movs	r3, r5
 801461e:	f7ed fd7d 	bl	800211c <__aeabi_dsub>
 8014622:	0004      	movs	r4, r0
 8014624:	000d      	movs	r5, r1
 8014626:	9806      	ldr	r0, [sp, #24]
 8014628:	9907      	ldr	r1, [sp, #28]
 801462a:	4a32      	ldr	r2, [pc, #200]	; (80146f4 <__ieee754_rem_pio2+0x300>)
 801462c:	4b32      	ldr	r3, [pc, #200]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 801462e:	f7ed fb09 	bl	8001c44 <__aeabi_dmul>
 8014632:	0022      	movs	r2, r4
 8014634:	002b      	movs	r3, r5
 8014636:	f7ed fd71 	bl	800211c <__aeabi_dsub>
 801463a:	0002      	movs	r2, r0
 801463c:	000b      	movs	r3, r1
 801463e:	0004      	movs	r4, r0
 8014640:	000d      	movs	r5, r1
 8014642:	9802      	ldr	r0, [sp, #8]
 8014644:	9903      	ldr	r1, [sp, #12]
 8014646:	f7ed fd69 	bl	800211c <__aeabi_dsub>
 801464a:	9a08      	ldr	r2, [sp, #32]
 801464c:	004b      	lsls	r3, r1, #1
 801464e:	0d5b      	lsrs	r3, r3, #21
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	2b31      	cmp	r3, #49	; 0x31
 8014654:	dc08      	bgt.n	8014668 <__ieee754_rem_pio2+0x274>
 8014656:	0002      	movs	r2, r0
 8014658:	000b      	movs	r3, r1
 801465a:	603a      	str	r2, [r7, #0]
 801465c:	607b      	str	r3, [r7, #4]
 801465e:	9a02      	ldr	r2, [sp, #8]
 8014660:	9b03      	ldr	r3, [sp, #12]
 8014662:	9204      	str	r2, [sp, #16]
 8014664:	9305      	str	r3, [sp, #20]
 8014666:	e7a3      	b.n	80145b0 <__ieee754_rem_pio2+0x1bc>
 8014668:	22b8      	movs	r2, #184	; 0xb8
 801466a:	9806      	ldr	r0, [sp, #24]
 801466c:	9907      	ldr	r1, [sp, #28]
 801466e:	4b22      	ldr	r3, [pc, #136]	; (80146f8 <__ieee754_rem_pio2+0x304>)
 8014670:	0592      	lsls	r2, r2, #22
 8014672:	f7ed fae7 	bl	8001c44 <__aeabi_dmul>
 8014676:	0004      	movs	r4, r0
 8014678:	000d      	movs	r5, r1
 801467a:	0002      	movs	r2, r0
 801467c:	000b      	movs	r3, r1
 801467e:	9802      	ldr	r0, [sp, #8]
 8014680:	9903      	ldr	r1, [sp, #12]
 8014682:	f7ed fd4b 	bl	800211c <__aeabi_dsub>
 8014686:	0002      	movs	r2, r0
 8014688:	000b      	movs	r3, r1
 801468a:	9004      	str	r0, [sp, #16]
 801468c:	9105      	str	r1, [sp, #20]
 801468e:	9802      	ldr	r0, [sp, #8]
 8014690:	9903      	ldr	r1, [sp, #12]
 8014692:	f7ed fd43 	bl	800211c <__aeabi_dsub>
 8014696:	0022      	movs	r2, r4
 8014698:	002b      	movs	r3, r5
 801469a:	f7ed fd3f 	bl	800211c <__aeabi_dsub>
 801469e:	0004      	movs	r4, r0
 80146a0:	000d      	movs	r5, r1
 80146a2:	9806      	ldr	r0, [sp, #24]
 80146a4:	9907      	ldr	r1, [sp, #28]
 80146a6:	4a1a      	ldr	r2, [pc, #104]	; (8014710 <__ieee754_rem_pio2+0x31c>)
 80146a8:	4b1a      	ldr	r3, [pc, #104]	; (8014714 <__ieee754_rem_pio2+0x320>)
 80146aa:	f7ed facb 	bl	8001c44 <__aeabi_dmul>
 80146ae:	0022      	movs	r2, r4
 80146b0:	002b      	movs	r3, r5
 80146b2:	f7ed fd33 	bl	800211c <__aeabi_dsub>
 80146b6:	0004      	movs	r4, r0
 80146b8:	000d      	movs	r5, r1
 80146ba:	e75d      	b.n	8014578 <__ieee754_rem_pio2+0x184>
 80146bc:	4b16      	ldr	r3, [pc, #88]	; (8014718 <__ieee754_rem_pio2+0x324>)
 80146be:	9a02      	ldr	r2, [sp, #8]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	dd2b      	ble.n	801471c <__ieee754_rem_pio2+0x328>
 80146c4:	0022      	movs	r2, r4
 80146c6:	002b      	movs	r3, r5
 80146c8:	0020      	movs	r0, r4
 80146ca:	0029      	movs	r1, r5
 80146cc:	f7ed fd26 	bl	800211c <__aeabi_dsub>
 80146d0:	60b8      	str	r0, [r7, #8]
 80146d2:	60f9      	str	r1, [r7, #12]
 80146d4:	6038      	str	r0, [r7, #0]
 80146d6:	6079      	str	r1, [r7, #4]
 80146d8:	e6a1      	b.n	801441e <__ieee754_rem_pio2+0x2a>
 80146da:	46c0      	nop			; (mov r8, r8)
 80146dc:	3fe921fb 	.word	0x3fe921fb
 80146e0:	4002d97b 	.word	0x4002d97b
 80146e4:	3ff921fb 	.word	0x3ff921fb
 80146e8:	54400000 	.word	0x54400000
 80146ec:	1a626331 	.word	0x1a626331
 80146f0:	3dd0b461 	.word	0x3dd0b461
 80146f4:	2e037073 	.word	0x2e037073
 80146f8:	3ba3198a 	.word	0x3ba3198a
 80146fc:	413921fb 	.word	0x413921fb
 8014700:	6dc9c883 	.word	0x6dc9c883
 8014704:	3fe45f30 	.word	0x3fe45f30
 8014708:	3fe00000 	.word	0x3fe00000
 801470c:	08016454 	.word	0x08016454
 8014710:	252049c1 	.word	0x252049c1
 8014714:	397b839a 	.word	0x397b839a
 8014718:	7fefffff 	.word	0x7fefffff
 801471c:	9a02      	ldr	r2, [sp, #8]
 801471e:	0020      	movs	r0, r4
 8014720:	1516      	asrs	r6, r2, #20
 8014722:	4a29      	ldr	r2, [pc, #164]	; (80147c8 <__ieee754_rem_pio2+0x3d4>)
 8014724:	18b6      	adds	r6, r6, r2
 8014726:	9a02      	ldr	r2, [sp, #8]
 8014728:	0533      	lsls	r3, r6, #20
 801472a:	1ad5      	subs	r5, r2, r3
 801472c:	0029      	movs	r1, r5
 801472e:	f7ee f8a5 	bl	800287c <__aeabi_d2iz>
 8014732:	f7ee f8d9 	bl	80028e8 <__aeabi_i2d>
 8014736:	0002      	movs	r2, r0
 8014738:	000b      	movs	r3, r1
 801473a:	0020      	movs	r0, r4
 801473c:	0029      	movs	r1, r5
 801473e:	920a      	str	r2, [sp, #40]	; 0x28
 8014740:	930b      	str	r3, [sp, #44]	; 0x2c
 8014742:	f7ed fceb 	bl	800211c <__aeabi_dsub>
 8014746:	2200      	movs	r2, #0
 8014748:	4b20      	ldr	r3, [pc, #128]	; (80147cc <__ieee754_rem_pio2+0x3d8>)
 801474a:	f7ed fa7b 	bl	8001c44 <__aeabi_dmul>
 801474e:	000d      	movs	r5, r1
 8014750:	0004      	movs	r4, r0
 8014752:	f7ee f893 	bl	800287c <__aeabi_d2iz>
 8014756:	f7ee f8c7 	bl	80028e8 <__aeabi_i2d>
 801475a:	0002      	movs	r2, r0
 801475c:	000b      	movs	r3, r1
 801475e:	0020      	movs	r0, r4
 8014760:	0029      	movs	r1, r5
 8014762:	920c      	str	r2, [sp, #48]	; 0x30
 8014764:	930d      	str	r3, [sp, #52]	; 0x34
 8014766:	f7ed fcd9 	bl	800211c <__aeabi_dsub>
 801476a:	2200      	movs	r2, #0
 801476c:	4b17      	ldr	r3, [pc, #92]	; (80147cc <__ieee754_rem_pio2+0x3d8>)
 801476e:	f7ed fa69 	bl	8001c44 <__aeabi_dmul>
 8014772:	2503      	movs	r5, #3
 8014774:	900e      	str	r0, [sp, #56]	; 0x38
 8014776:	910f      	str	r1, [sp, #60]	; 0x3c
 8014778:	ac0a      	add	r4, sp, #40	; 0x28
 801477a:	2200      	movs	r2, #0
 801477c:	6920      	ldr	r0, [r4, #16]
 801477e:	6961      	ldr	r1, [r4, #20]
 8014780:	2300      	movs	r3, #0
 8014782:	9502      	str	r5, [sp, #8]
 8014784:	3c08      	subs	r4, #8
 8014786:	3d01      	subs	r5, #1
 8014788:	f7eb fe60 	bl	800044c <__aeabi_dcmpeq>
 801478c:	2800      	cmp	r0, #0
 801478e:	d1f4      	bne.n	801477a <__ieee754_rem_pio2+0x386>
 8014790:	4b0f      	ldr	r3, [pc, #60]	; (80147d0 <__ieee754_rem_pio2+0x3dc>)
 8014792:	0032      	movs	r2, r6
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	2302      	movs	r3, #2
 8014798:	0039      	movs	r1, r7
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	a80a      	add	r0, sp, #40	; 0x28
 801479e:	9b02      	ldr	r3, [sp, #8]
 80147a0:	f000 f8d8 	bl	8014954 <__kernel_rem_pio2>
 80147a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147a6:	0006      	movs	r6, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	db00      	blt.n	80147ae <__ieee754_rem_pio2+0x3ba>
 80147ac:	e65f      	b.n	801446e <__ieee754_rem_pio2+0x7a>
 80147ae:	2180      	movs	r1, #128	; 0x80
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	683a      	ldr	r2, [r7, #0]
 80147b4:	0609      	lsls	r1, r1, #24
 80147b6:	1843      	adds	r3, r0, r1
 80147b8:	68f8      	ldr	r0, [r7, #12]
 80147ba:	603a      	str	r2, [r7, #0]
 80147bc:	607b      	str	r3, [r7, #4]
 80147be:	68ba      	ldr	r2, [r7, #8]
 80147c0:	1843      	adds	r3, r0, r1
 80147c2:	60ba      	str	r2, [r7, #8]
 80147c4:	60fb      	str	r3, [r7, #12]
 80147c6:	e688      	b.n	80144da <__ieee754_rem_pio2+0xe6>
 80147c8:	fffffbea 	.word	0xfffffbea
 80147cc:	41700000 	.word	0x41700000
 80147d0:	080164d4 	.word	0x080164d4

080147d4 <__kernel_cos>:
 80147d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147d6:	b087      	sub	sp, #28
 80147d8:	9204      	str	r2, [sp, #16]
 80147da:	9305      	str	r3, [sp, #20]
 80147dc:	004b      	lsls	r3, r1, #1
 80147de:	085b      	lsrs	r3, r3, #1
 80147e0:	9300      	str	r3, [sp, #0]
 80147e2:	23f9      	movs	r3, #249	; 0xf9
 80147e4:	9a00      	ldr	r2, [sp, #0]
 80147e6:	0007      	movs	r7, r0
 80147e8:	000e      	movs	r6, r1
 80147ea:	059b      	lsls	r3, r3, #22
 80147ec:	429a      	cmp	r2, r3
 80147ee:	da04      	bge.n	80147fa <__kernel_cos+0x26>
 80147f0:	f7ee f844 	bl	800287c <__aeabi_d2iz>
 80147f4:	2800      	cmp	r0, #0
 80147f6:	d100      	bne.n	80147fa <__kernel_cos+0x26>
 80147f8:	e084      	b.n	8014904 <__kernel_cos+0x130>
 80147fa:	003a      	movs	r2, r7
 80147fc:	0033      	movs	r3, r6
 80147fe:	0038      	movs	r0, r7
 8014800:	0031      	movs	r1, r6
 8014802:	f7ed fa1f 	bl	8001c44 <__aeabi_dmul>
 8014806:	2200      	movs	r2, #0
 8014808:	4b40      	ldr	r3, [pc, #256]	; (801490c <__kernel_cos+0x138>)
 801480a:	0004      	movs	r4, r0
 801480c:	000d      	movs	r5, r1
 801480e:	f7ed fa19 	bl	8001c44 <__aeabi_dmul>
 8014812:	4a3f      	ldr	r2, [pc, #252]	; (8014910 <__kernel_cos+0x13c>)
 8014814:	9002      	str	r0, [sp, #8]
 8014816:	9103      	str	r1, [sp, #12]
 8014818:	4b3e      	ldr	r3, [pc, #248]	; (8014914 <__kernel_cos+0x140>)
 801481a:	0020      	movs	r0, r4
 801481c:	0029      	movs	r1, r5
 801481e:	f7ed fa11 	bl	8001c44 <__aeabi_dmul>
 8014822:	4a3d      	ldr	r2, [pc, #244]	; (8014918 <__kernel_cos+0x144>)
 8014824:	4b3d      	ldr	r3, [pc, #244]	; (801491c <__kernel_cos+0x148>)
 8014826:	f7ec facf 	bl	8000dc8 <__aeabi_dadd>
 801482a:	0022      	movs	r2, r4
 801482c:	002b      	movs	r3, r5
 801482e:	f7ed fa09 	bl	8001c44 <__aeabi_dmul>
 8014832:	4a3b      	ldr	r2, [pc, #236]	; (8014920 <__kernel_cos+0x14c>)
 8014834:	4b3b      	ldr	r3, [pc, #236]	; (8014924 <__kernel_cos+0x150>)
 8014836:	f7ed fc71 	bl	800211c <__aeabi_dsub>
 801483a:	0022      	movs	r2, r4
 801483c:	002b      	movs	r3, r5
 801483e:	f7ed fa01 	bl	8001c44 <__aeabi_dmul>
 8014842:	4a39      	ldr	r2, [pc, #228]	; (8014928 <__kernel_cos+0x154>)
 8014844:	4b39      	ldr	r3, [pc, #228]	; (801492c <__kernel_cos+0x158>)
 8014846:	f7ec fabf 	bl	8000dc8 <__aeabi_dadd>
 801484a:	0022      	movs	r2, r4
 801484c:	002b      	movs	r3, r5
 801484e:	f7ed f9f9 	bl	8001c44 <__aeabi_dmul>
 8014852:	4a37      	ldr	r2, [pc, #220]	; (8014930 <__kernel_cos+0x15c>)
 8014854:	4b37      	ldr	r3, [pc, #220]	; (8014934 <__kernel_cos+0x160>)
 8014856:	f7ed fc61 	bl	800211c <__aeabi_dsub>
 801485a:	0022      	movs	r2, r4
 801485c:	002b      	movs	r3, r5
 801485e:	f7ed f9f1 	bl	8001c44 <__aeabi_dmul>
 8014862:	4a35      	ldr	r2, [pc, #212]	; (8014938 <__kernel_cos+0x164>)
 8014864:	4b35      	ldr	r3, [pc, #212]	; (801493c <__kernel_cos+0x168>)
 8014866:	f7ec faaf 	bl	8000dc8 <__aeabi_dadd>
 801486a:	0022      	movs	r2, r4
 801486c:	002b      	movs	r3, r5
 801486e:	f7ed f9e9 	bl	8001c44 <__aeabi_dmul>
 8014872:	0022      	movs	r2, r4
 8014874:	002b      	movs	r3, r5
 8014876:	f7ed f9e5 	bl	8001c44 <__aeabi_dmul>
 801487a:	9a04      	ldr	r2, [sp, #16]
 801487c:	9b05      	ldr	r3, [sp, #20]
 801487e:	0004      	movs	r4, r0
 8014880:	000d      	movs	r5, r1
 8014882:	0038      	movs	r0, r7
 8014884:	0031      	movs	r1, r6
 8014886:	f7ed f9dd 	bl	8001c44 <__aeabi_dmul>
 801488a:	0002      	movs	r2, r0
 801488c:	000b      	movs	r3, r1
 801488e:	0020      	movs	r0, r4
 8014890:	0029      	movs	r1, r5
 8014892:	f7ed fc43 	bl	800211c <__aeabi_dsub>
 8014896:	4b2a      	ldr	r3, [pc, #168]	; (8014940 <__kernel_cos+0x16c>)
 8014898:	9a00      	ldr	r2, [sp, #0]
 801489a:	0004      	movs	r4, r0
 801489c:	000d      	movs	r5, r1
 801489e:	429a      	cmp	r2, r3
 80148a0:	dc0d      	bgt.n	80148be <__kernel_cos+0xea>
 80148a2:	0002      	movs	r2, r0
 80148a4:	000b      	movs	r3, r1
 80148a6:	9802      	ldr	r0, [sp, #8]
 80148a8:	9903      	ldr	r1, [sp, #12]
 80148aa:	f7ed fc37 	bl	800211c <__aeabi_dsub>
 80148ae:	0002      	movs	r2, r0
 80148b0:	2000      	movs	r0, #0
 80148b2:	000b      	movs	r3, r1
 80148b4:	4923      	ldr	r1, [pc, #140]	; (8014944 <__kernel_cos+0x170>)
 80148b6:	f7ed fc31 	bl	800211c <__aeabi_dsub>
 80148ba:	b007      	add	sp, #28
 80148bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148be:	4b22      	ldr	r3, [pc, #136]	; (8014948 <__kernel_cos+0x174>)
 80148c0:	9a00      	ldr	r2, [sp, #0]
 80148c2:	2600      	movs	r6, #0
 80148c4:	429a      	cmp	r2, r3
 80148c6:	dc1b      	bgt.n	8014900 <__kernel_cos+0x12c>
 80148c8:	0013      	movs	r3, r2
 80148ca:	4a20      	ldr	r2, [pc, #128]	; (801494c <__kernel_cos+0x178>)
 80148cc:	4694      	mov	ip, r2
 80148ce:	4463      	add	r3, ip
 80148d0:	001f      	movs	r7, r3
 80148d2:	0032      	movs	r2, r6
 80148d4:	003b      	movs	r3, r7
 80148d6:	2000      	movs	r0, #0
 80148d8:	491a      	ldr	r1, [pc, #104]	; (8014944 <__kernel_cos+0x170>)
 80148da:	f7ed fc1f 	bl	800211c <__aeabi_dsub>
 80148de:	0032      	movs	r2, r6
 80148e0:	003b      	movs	r3, r7
 80148e2:	9000      	str	r0, [sp, #0]
 80148e4:	9101      	str	r1, [sp, #4]
 80148e6:	9802      	ldr	r0, [sp, #8]
 80148e8:	9903      	ldr	r1, [sp, #12]
 80148ea:	f7ed fc17 	bl	800211c <__aeabi_dsub>
 80148ee:	0022      	movs	r2, r4
 80148f0:	002b      	movs	r3, r5
 80148f2:	f7ed fc13 	bl	800211c <__aeabi_dsub>
 80148f6:	0002      	movs	r2, r0
 80148f8:	000b      	movs	r3, r1
 80148fa:	9800      	ldr	r0, [sp, #0]
 80148fc:	9901      	ldr	r1, [sp, #4]
 80148fe:	e7da      	b.n	80148b6 <__kernel_cos+0xe2>
 8014900:	4f13      	ldr	r7, [pc, #76]	; (8014950 <__kernel_cos+0x17c>)
 8014902:	e7e6      	b.n	80148d2 <__kernel_cos+0xfe>
 8014904:	2000      	movs	r0, #0
 8014906:	490f      	ldr	r1, [pc, #60]	; (8014944 <__kernel_cos+0x170>)
 8014908:	e7d7      	b.n	80148ba <__kernel_cos+0xe6>
 801490a:	46c0      	nop			; (mov r8, r8)
 801490c:	3fe00000 	.word	0x3fe00000
 8014910:	be8838d4 	.word	0xbe8838d4
 8014914:	bda8fae9 	.word	0xbda8fae9
 8014918:	bdb4b1c4 	.word	0xbdb4b1c4
 801491c:	3e21ee9e 	.word	0x3e21ee9e
 8014920:	809c52ad 	.word	0x809c52ad
 8014924:	3e927e4f 	.word	0x3e927e4f
 8014928:	19cb1590 	.word	0x19cb1590
 801492c:	3efa01a0 	.word	0x3efa01a0
 8014930:	16c15177 	.word	0x16c15177
 8014934:	3f56c16c 	.word	0x3f56c16c
 8014938:	5555554c 	.word	0x5555554c
 801493c:	3fa55555 	.word	0x3fa55555
 8014940:	3fd33332 	.word	0x3fd33332
 8014944:	3ff00000 	.word	0x3ff00000
 8014948:	3fe90000 	.word	0x3fe90000
 801494c:	ffe00000 	.word	0xffe00000
 8014950:	3fd20000 	.word	0x3fd20000

08014954 <__kernel_rem_pio2>:
 8014954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014956:	4ccb      	ldr	r4, [pc, #812]	; (8014c84 <__kernel_rem_pio2+0x330>)
 8014958:	44a5      	add	sp, r4
 801495a:	930d      	str	r3, [sp, #52]	; 0x34
 801495c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801495e:	0014      	movs	r4, r2
 8014960:	009a      	lsls	r2, r3, #2
 8014962:	4bc9      	ldr	r3, [pc, #804]	; (8014c88 <__kernel_rem_pio2+0x334>)
 8014964:	900e      	str	r0, [sp, #56]	; 0x38
 8014966:	58d3      	ldr	r3, [r2, r3]
 8014968:	9107      	str	r1, [sp, #28]
 801496a:	930a      	str	r3, [sp, #40]	; 0x28
 801496c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801496e:	3b01      	subs	r3, #1
 8014970:	930c      	str	r3, [sp, #48]	; 0x30
 8014972:	2300      	movs	r3, #0
 8014974:	9300      	str	r3, [sp, #0]
 8014976:	0023      	movs	r3, r4
 8014978:	3314      	adds	r3, #20
 801497a:	db04      	blt.n	8014986 <__kernel_rem_pio2+0x32>
 801497c:	2118      	movs	r1, #24
 801497e:	1ee0      	subs	r0, r4, #3
 8014980:	f7eb fc68 	bl	8000254 <__divsi3>
 8014984:	9000      	str	r0, [sp, #0]
 8014986:	2218      	movs	r2, #24
 8014988:	9b00      	ldr	r3, [sp, #0]
 801498a:	4252      	negs	r2, r2
 801498c:	3301      	adds	r3, #1
 801498e:	435a      	muls	r2, r3
 8014990:	1913      	adds	r3, r2, r4
 8014992:	9302      	str	r3, [sp, #8]
 8014994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014996:	9b00      	ldr	r3, [sp, #0]
 8014998:	ae26      	add	r6, sp, #152	; 0x98
 801499a:	1a9d      	subs	r5, r3, r2
 801499c:	002c      	movs	r4, r5
 801499e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149a0:	189f      	adds	r7, r3, r2
 80149a2:	1b63      	subs	r3, r4, r5
 80149a4:	429f      	cmp	r7, r3
 80149a6:	da0f      	bge.n	80149c8 <__kernel_rem_pio2+0x74>
 80149a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80149aa:	af76      	add	r7, sp, #472	; 0x1d8
 80149ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80149b0:	1af3      	subs	r3, r6, r3
 80149b2:	429a      	cmp	r2, r3
 80149b4:	db30      	blt.n	8014a18 <__kernel_rem_pio2+0xc4>
 80149b6:	ab26      	add	r3, sp, #152	; 0x98
 80149b8:	00f4      	lsls	r4, r6, #3
 80149ba:	2200      	movs	r2, #0
 80149bc:	18e4      	adds	r4, r4, r3
 80149be:	2300      	movs	r3, #0
 80149c0:	2500      	movs	r5, #0
 80149c2:	9204      	str	r2, [sp, #16]
 80149c4:	9305      	str	r3, [sp, #20]
 80149c6:	e01e      	b.n	8014a06 <__kernel_rem_pio2+0xb2>
 80149c8:	2c00      	cmp	r4, #0
 80149ca:	db07      	blt.n	80149dc <__kernel_rem_pio2+0x88>
 80149cc:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80149ce:	00a3      	lsls	r3, r4, #2
 80149d0:	58d0      	ldr	r0, [r2, r3]
 80149d2:	f7ed ff89 	bl	80028e8 <__aeabi_i2d>
 80149d6:	c603      	stmia	r6!, {r0, r1}
 80149d8:	3401      	adds	r4, #1
 80149da:	e7e2      	b.n	80149a2 <__kernel_rem_pio2+0x4e>
 80149dc:	2000      	movs	r0, #0
 80149de:	2100      	movs	r1, #0
 80149e0:	e7f9      	b.n	80149d6 <__kernel_rem_pio2+0x82>
 80149e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149e4:	00e9      	lsls	r1, r5, #3
 80149e6:	1859      	adds	r1, r3, r1
 80149e8:	6808      	ldr	r0, [r1, #0]
 80149ea:	6849      	ldr	r1, [r1, #4]
 80149ec:	6822      	ldr	r2, [r4, #0]
 80149ee:	6863      	ldr	r3, [r4, #4]
 80149f0:	f7ed f928 	bl	8001c44 <__aeabi_dmul>
 80149f4:	0002      	movs	r2, r0
 80149f6:	000b      	movs	r3, r1
 80149f8:	9804      	ldr	r0, [sp, #16]
 80149fa:	9905      	ldr	r1, [sp, #20]
 80149fc:	f7ec f9e4 	bl	8000dc8 <__aeabi_dadd>
 8014a00:	9004      	str	r0, [sp, #16]
 8014a02:	9105      	str	r1, [sp, #20]
 8014a04:	3501      	adds	r5, #1
 8014a06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a08:	3c08      	subs	r4, #8
 8014a0a:	429d      	cmp	r5, r3
 8014a0c:	dde9      	ble.n	80149e2 <__kernel_rem_pio2+0x8e>
 8014a0e:	9b04      	ldr	r3, [sp, #16]
 8014a10:	9c05      	ldr	r4, [sp, #20]
 8014a12:	3601      	adds	r6, #1
 8014a14:	c718      	stmia	r7!, {r3, r4}
 8014a16:	e7c9      	b.n	80149ac <__kernel_rem_pio2+0x58>
 8014a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a1a:	aa12      	add	r2, sp, #72	; 0x48
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	189b      	adds	r3, r3, r2
 8014a20:	9310      	str	r3, [sp, #64]	; 0x40
 8014a22:	9b00      	ldr	r3, [sp, #0]
 8014a24:	0098      	lsls	r0, r3, #2
 8014a26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014a28:	181b      	adds	r3, r3, r0
 8014a2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a2e:	9304      	str	r3, [sp, #16]
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	aa76      	add	r2, sp, #472	; 0x1d8
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	18d3      	adds	r3, r2, r3
 8014a38:	681c      	ldr	r4, [r3, #0]
 8014a3a:	685d      	ldr	r5, [r3, #4]
 8014a3c:	ab12      	add	r3, sp, #72	; 0x48
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	9309      	str	r3, [sp, #36]	; 0x24
 8014a42:	9b04      	ldr	r3, [sp, #16]
 8014a44:	9211      	str	r2, [sp, #68]	; 0x44
 8014a46:	9308      	str	r3, [sp, #32]
 8014a48:	9b08      	ldr	r3, [sp, #32]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	dc74      	bgt.n	8014b38 <__kernel_rem_pio2+0x1e4>
 8014a4e:	0020      	movs	r0, r4
 8014a50:	0029      	movs	r1, r5
 8014a52:	9a02      	ldr	r2, [sp, #8]
 8014a54:	f000 fc22 	bl	801529c <scalbn>
 8014a58:	23ff      	movs	r3, #255	; 0xff
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	059b      	lsls	r3, r3, #22
 8014a5e:	0004      	movs	r4, r0
 8014a60:	000d      	movs	r5, r1
 8014a62:	f7ed f8ef 	bl	8001c44 <__aeabi_dmul>
 8014a66:	f000 fb8f 	bl	8015188 <floor>
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	4b87      	ldr	r3, [pc, #540]	; (8014c8c <__kernel_rem_pio2+0x338>)
 8014a6e:	f7ed f8e9 	bl	8001c44 <__aeabi_dmul>
 8014a72:	0002      	movs	r2, r0
 8014a74:	000b      	movs	r3, r1
 8014a76:	0020      	movs	r0, r4
 8014a78:	0029      	movs	r1, r5
 8014a7a:	f7ed fb4f 	bl	800211c <__aeabi_dsub>
 8014a7e:	000d      	movs	r5, r1
 8014a80:	0004      	movs	r4, r0
 8014a82:	f7ed fefb 	bl	800287c <__aeabi_d2iz>
 8014a86:	9009      	str	r0, [sp, #36]	; 0x24
 8014a88:	f7ed ff2e 	bl	80028e8 <__aeabi_i2d>
 8014a8c:	000b      	movs	r3, r1
 8014a8e:	0002      	movs	r2, r0
 8014a90:	0029      	movs	r1, r5
 8014a92:	0020      	movs	r0, r4
 8014a94:	f7ed fb42 	bl	800211c <__aeabi_dsub>
 8014a98:	9b02      	ldr	r3, [sp, #8]
 8014a9a:	0006      	movs	r6, r0
 8014a9c:	000f      	movs	r7, r1
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	dd74      	ble.n	8014b8c <__kernel_rem_pio2+0x238>
 8014aa2:	2118      	movs	r1, #24
 8014aa4:	9b04      	ldr	r3, [sp, #16]
 8014aa6:	aa12      	add	r2, sp, #72	; 0x48
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	589a      	ldr	r2, [r3, r2]
 8014aae:	9802      	ldr	r0, [sp, #8]
 8014ab0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014ab2:	1a09      	subs	r1, r1, r0
 8014ab4:	0010      	movs	r0, r2
 8014ab6:	4108      	asrs	r0, r1
 8014ab8:	1824      	adds	r4, r4, r0
 8014aba:	4088      	lsls	r0, r1
 8014abc:	a912      	add	r1, sp, #72	; 0x48
 8014abe:	1a12      	subs	r2, r2, r0
 8014ac0:	505a      	str	r2, [r3, r1]
 8014ac2:	2317      	movs	r3, #23
 8014ac4:	9902      	ldr	r1, [sp, #8]
 8014ac6:	9409      	str	r4, [sp, #36]	; 0x24
 8014ac8:	1a5b      	subs	r3, r3, r1
 8014aca:	411a      	asrs	r2, r3
 8014acc:	9208      	str	r2, [sp, #32]
 8014ace:	9b08      	ldr	r3, [sp, #32]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	dd6d      	ble.n	8014bb0 <__kernel_rem_pio2+0x25c>
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ad8:	2080      	movs	r0, #128	; 0x80
 8014ada:	3301      	adds	r3, #1
 8014adc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ade:	4b6c      	ldr	r3, [pc, #432]	; (8014c90 <__kernel_rem_pio2+0x33c>)
 8014ae0:	0014      	movs	r4, r2
 8014ae2:	469c      	mov	ip, r3
 8014ae4:	2501      	movs	r5, #1
 8014ae6:	0440      	lsls	r0, r0, #17
 8014ae8:	9b04      	ldr	r3, [sp, #16]
 8014aea:	4293      	cmp	r3, r2
 8014aec:	dd00      	ble.n	8014af0 <__kernel_rem_pio2+0x19c>
 8014aee:	e099      	b.n	8014c24 <__kernel_rem_pio2+0x2d0>
 8014af0:	9b02      	ldr	r3, [sp, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	dd05      	ble.n	8014b02 <__kernel_rem_pio2+0x1ae>
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d100      	bne.n	8014afc <__kernel_rem_pio2+0x1a8>
 8014afa:	e0a9      	b.n	8014c50 <__kernel_rem_pio2+0x2fc>
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d100      	bne.n	8014b02 <__kernel_rem_pio2+0x1ae>
 8014b00:	e0b1      	b.n	8014c66 <__kernel_rem_pio2+0x312>
 8014b02:	9b08      	ldr	r3, [sp, #32]
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	d153      	bne.n	8014bb0 <__kernel_rem_pio2+0x25c>
 8014b08:	0032      	movs	r2, r6
 8014b0a:	003b      	movs	r3, r7
 8014b0c:	2000      	movs	r0, #0
 8014b0e:	4961      	ldr	r1, [pc, #388]	; (8014c94 <__kernel_rem_pio2+0x340>)
 8014b10:	f7ed fb04 	bl	800211c <__aeabi_dsub>
 8014b14:	0006      	movs	r6, r0
 8014b16:	000f      	movs	r7, r1
 8014b18:	2c00      	cmp	r4, #0
 8014b1a:	d049      	beq.n	8014bb0 <__kernel_rem_pio2+0x25c>
 8014b1c:	9a02      	ldr	r2, [sp, #8]
 8014b1e:	2000      	movs	r0, #0
 8014b20:	495c      	ldr	r1, [pc, #368]	; (8014c94 <__kernel_rem_pio2+0x340>)
 8014b22:	f000 fbbb 	bl	801529c <scalbn>
 8014b26:	0002      	movs	r2, r0
 8014b28:	000b      	movs	r3, r1
 8014b2a:	0030      	movs	r0, r6
 8014b2c:	0039      	movs	r1, r7
 8014b2e:	f7ed faf5 	bl	800211c <__aeabi_dsub>
 8014b32:	0006      	movs	r6, r0
 8014b34:	000f      	movs	r7, r1
 8014b36:	e03b      	b.n	8014bb0 <__kernel_rem_pio2+0x25c>
 8014b38:	2200      	movs	r2, #0
 8014b3a:	4b57      	ldr	r3, [pc, #348]	; (8014c98 <__kernel_rem_pio2+0x344>)
 8014b3c:	0020      	movs	r0, r4
 8014b3e:	0029      	movs	r1, r5
 8014b40:	f7ed f880 	bl	8001c44 <__aeabi_dmul>
 8014b44:	f7ed fe9a 	bl	800287c <__aeabi_d2iz>
 8014b48:	f7ed fece 	bl	80028e8 <__aeabi_i2d>
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4b53      	ldr	r3, [pc, #332]	; (8014c9c <__kernel_rem_pio2+0x348>)
 8014b50:	0006      	movs	r6, r0
 8014b52:	000f      	movs	r7, r1
 8014b54:	f7ed f876 	bl	8001c44 <__aeabi_dmul>
 8014b58:	0002      	movs	r2, r0
 8014b5a:	000b      	movs	r3, r1
 8014b5c:	0020      	movs	r0, r4
 8014b5e:	0029      	movs	r1, r5
 8014b60:	f7ed fadc 	bl	800211c <__aeabi_dsub>
 8014b64:	f7ed fe8a 	bl	800287c <__aeabi_d2iz>
 8014b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014b6c:	c301      	stmia	r3!, {r0}
 8014b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b70:	9b08      	ldr	r3, [sp, #32]
 8014b72:	0030      	movs	r0, r6
 8014b74:	3b01      	subs	r3, #1
 8014b76:	9308      	str	r3, [sp, #32]
 8014b78:	00db      	lsls	r3, r3, #3
 8014b7a:	18d3      	adds	r3, r2, r3
 8014b7c:	0039      	movs	r1, r7
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	f7ec f921 	bl	8000dc8 <__aeabi_dadd>
 8014b86:	0004      	movs	r4, r0
 8014b88:	000d      	movs	r5, r1
 8014b8a:	e75d      	b.n	8014a48 <__kernel_rem_pio2+0xf4>
 8014b8c:	9b02      	ldr	r3, [sp, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d107      	bne.n	8014ba2 <__kernel_rem_pio2+0x24e>
 8014b92:	9b04      	ldr	r3, [sp, #16]
 8014b94:	aa12      	add	r2, sp, #72	; 0x48
 8014b96:	3b01      	subs	r3, #1
 8014b98:	009b      	lsls	r3, r3, #2
 8014b9a:	5898      	ldr	r0, [r3, r2]
 8014b9c:	15c3      	asrs	r3, r0, #23
 8014b9e:	9308      	str	r3, [sp, #32]
 8014ba0:	e795      	b.n	8014ace <__kernel_rem_pio2+0x17a>
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	4b3e      	ldr	r3, [pc, #248]	; (8014ca0 <__kernel_rem_pio2+0x34c>)
 8014ba6:	f7eb fc75 	bl	8000494 <__aeabi_dcmpge>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d137      	bne.n	8014c1e <__kernel_rem_pio2+0x2ca>
 8014bae:	9008      	str	r0, [sp, #32]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	0030      	movs	r0, r6
 8014bb6:	0039      	movs	r1, r7
 8014bb8:	f7eb fc48 	bl	800044c <__aeabi_dcmpeq>
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	d100      	bne.n	8014bc2 <__kernel_rem_pio2+0x26e>
 8014bc0:	e0b9      	b.n	8014d36 <__kernel_rem_pio2+0x3e2>
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	9b04      	ldr	r3, [sp, #16]
 8014bc6:	3b01      	subs	r3, #1
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014bcc:	428b      	cmp	r3, r1
 8014bce:	da53      	bge.n	8014c78 <__kernel_rem_pio2+0x324>
 8014bd0:	2a00      	cmp	r2, #0
 8014bd2:	d100      	bne.n	8014bd6 <__kernel_rem_pio2+0x282>
 8014bd4:	e095      	b.n	8014d02 <__kernel_rem_pio2+0x3ae>
 8014bd6:	9b02      	ldr	r3, [sp, #8]
 8014bd8:	aa12      	add	r2, sp, #72	; 0x48
 8014bda:	3b18      	subs	r3, #24
 8014bdc:	9302      	str	r3, [sp, #8]
 8014bde:	9b00      	ldr	r3, [sp, #0]
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	589b      	ldr	r3, [r3, r2]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d100      	bne.n	8014bea <__kernel_rem_pio2+0x296>
 8014be8:	e0a1      	b.n	8014d2e <__kernel_rem_pio2+0x3da>
 8014bea:	2000      	movs	r0, #0
 8014bec:	9a02      	ldr	r2, [sp, #8]
 8014bee:	4929      	ldr	r1, [pc, #164]	; (8014c94 <__kernel_rem_pio2+0x340>)
 8014bf0:	f000 fb54 	bl	801529c <scalbn>
 8014bf4:	0006      	movs	r6, r0
 8014bf6:	000f      	movs	r7, r1
 8014bf8:	9c00      	ldr	r4, [sp, #0]
 8014bfa:	2c00      	cmp	r4, #0
 8014bfc:	db00      	blt.n	8014c00 <__kernel_rem_pio2+0x2ac>
 8014bfe:	e0d9      	b.n	8014db4 <__kernel_rem_pio2+0x460>
 8014c00:	9c00      	ldr	r4, [sp, #0]
 8014c02:	2c00      	cmp	r4, #0
 8014c04:	da00      	bge.n	8014c08 <__kernel_rem_pio2+0x2b4>
 8014c06:	e10c      	b.n	8014e22 <__kernel_rem_pio2+0x4ce>
 8014c08:	ab76      	add	r3, sp, #472	; 0x1d8
 8014c0a:	00e6      	lsls	r6, r4, #3
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	18f6      	adds	r6, r6, r3
 8014c10:	2300      	movs	r3, #0
 8014c12:	9202      	str	r2, [sp, #8]
 8014c14:	9303      	str	r3, [sp, #12]
 8014c16:	9b00      	ldr	r3, [sp, #0]
 8014c18:	2500      	movs	r5, #0
 8014c1a:	1b1f      	subs	r7, r3, r4
 8014c1c:	e0f3      	b.n	8014e06 <__kernel_rem_pio2+0x4b2>
 8014c1e:	2302      	movs	r3, #2
 8014c20:	9308      	str	r3, [sp, #32]
 8014c22:	e757      	b.n	8014ad4 <__kernel_rem_pio2+0x180>
 8014c24:	9b00      	ldr	r3, [sp, #0]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2c00      	cmp	r4, #0
 8014c2a:	d10b      	bne.n	8014c44 <__kernel_rem_pio2+0x2f0>
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d003      	beq.n	8014c38 <__kernel_rem_pio2+0x2e4>
 8014c30:	9c00      	ldr	r4, [sp, #0]
 8014c32:	1ac3      	subs	r3, r0, r3
 8014c34:	6023      	str	r3, [r4, #0]
 8014c36:	002b      	movs	r3, r5
 8014c38:	9c00      	ldr	r4, [sp, #0]
 8014c3a:	3201      	adds	r2, #1
 8014c3c:	3404      	adds	r4, #4
 8014c3e:	9400      	str	r4, [sp, #0]
 8014c40:	001c      	movs	r4, r3
 8014c42:	e751      	b.n	8014ae8 <__kernel_rem_pio2+0x194>
 8014c44:	4661      	mov	r1, ip
 8014c46:	1acb      	subs	r3, r1, r3
 8014c48:	9900      	ldr	r1, [sp, #0]
 8014c4a:	600b      	str	r3, [r1, #0]
 8014c4c:	0023      	movs	r3, r4
 8014c4e:	e7f3      	b.n	8014c38 <__kernel_rem_pio2+0x2e4>
 8014c50:	9b04      	ldr	r3, [sp, #16]
 8014c52:	aa12      	add	r2, sp, #72	; 0x48
 8014c54:	3b01      	subs	r3, #1
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	589a      	ldr	r2, [r3, r2]
 8014c5a:	9200      	str	r2, [sp, #0]
 8014c5c:	0252      	lsls	r2, r2, #9
 8014c5e:	0a52      	lsrs	r2, r2, #9
 8014c60:	a912      	add	r1, sp, #72	; 0x48
 8014c62:	505a      	str	r2, [r3, r1]
 8014c64:	e74d      	b.n	8014b02 <__kernel_rem_pio2+0x1ae>
 8014c66:	9b04      	ldr	r3, [sp, #16]
 8014c68:	aa12      	add	r2, sp, #72	; 0x48
 8014c6a:	3b01      	subs	r3, #1
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	589a      	ldr	r2, [r3, r2]
 8014c70:	9200      	str	r2, [sp, #0]
 8014c72:	0292      	lsls	r2, r2, #10
 8014c74:	0a92      	lsrs	r2, r2, #10
 8014c76:	e7f3      	b.n	8014c60 <__kernel_rem_pio2+0x30c>
 8014c78:	0099      	lsls	r1, r3, #2
 8014c7a:	a812      	add	r0, sp, #72	; 0x48
 8014c7c:	5809      	ldr	r1, [r1, r0]
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	430a      	orrs	r2, r1
 8014c82:	e7a2      	b.n	8014bca <__kernel_rem_pio2+0x276>
 8014c84:	fffffd84 	.word	0xfffffd84
 8014c88:	08016620 	.word	0x08016620
 8014c8c:	40200000 	.word	0x40200000
 8014c90:	00ffffff 	.word	0x00ffffff
 8014c94:	3ff00000 	.word	0x3ff00000
 8014c98:	3e700000 	.word	0x3e700000
 8014c9c:	41700000 	.word	0x41700000
 8014ca0:	3fe00000 	.word	0x3fe00000
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014ca8:	009a      	lsls	r2, r3, #2
 8014caa:	4252      	negs	r2, r2
 8014cac:	588a      	ldr	r2, [r1, r2]
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	d0f8      	beq.n	8014ca4 <__kernel_rem_pio2+0x350>
 8014cb2:	9a04      	ldr	r2, [sp, #16]
 8014cb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014cb6:	1c57      	adds	r7, r2, #1
 8014cb8:	1854      	adds	r4, r2, r1
 8014cba:	00e4      	lsls	r4, r4, #3
 8014cbc:	aa26      	add	r2, sp, #152	; 0x98
 8014cbe:	1914      	adds	r4, r2, r4
 8014cc0:	9a04      	ldr	r2, [sp, #16]
 8014cc2:	18d3      	adds	r3, r2, r3
 8014cc4:	9304      	str	r3, [sp, #16]
 8014cc6:	9b04      	ldr	r3, [sp, #16]
 8014cc8:	42bb      	cmp	r3, r7
 8014cca:	da00      	bge.n	8014cce <__kernel_rem_pio2+0x37a>
 8014ccc:	e6b0      	b.n	8014a30 <__kernel_rem_pio2+0xdc>
 8014cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014cd0:	00bb      	lsls	r3, r7, #2
 8014cd2:	58d0      	ldr	r0, [r2, r3]
 8014cd4:	f7ed fe08 	bl	80028e8 <__aeabi_i2d>
 8014cd8:	2200      	movs	r2, #0
 8014cda:	2300      	movs	r3, #0
 8014cdc:	0026      	movs	r6, r4
 8014cde:	2500      	movs	r5, #0
 8014ce0:	6020      	str	r0, [r4, #0]
 8014ce2:	6061      	str	r1, [r4, #4]
 8014ce4:	9200      	str	r2, [sp, #0]
 8014ce6:	9301      	str	r3, [sp, #4]
 8014ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cea:	429d      	cmp	r5, r3
 8014cec:	dd0b      	ble.n	8014d06 <__kernel_rem_pio2+0x3b2>
 8014cee:	00fb      	lsls	r3, r7, #3
 8014cf0:	aa76      	add	r2, sp, #472	; 0x1d8
 8014cf2:	18d3      	adds	r3, r2, r3
 8014cf4:	3701      	adds	r7, #1
 8014cf6:	9900      	ldr	r1, [sp, #0]
 8014cf8:	9a01      	ldr	r2, [sp, #4]
 8014cfa:	3408      	adds	r4, #8
 8014cfc:	6019      	str	r1, [r3, #0]
 8014cfe:	605a      	str	r2, [r3, #4]
 8014d00:	e7e1      	b.n	8014cc6 <__kernel_rem_pio2+0x372>
 8014d02:	2301      	movs	r3, #1
 8014d04:	e7cf      	b.n	8014ca6 <__kernel_rem_pio2+0x352>
 8014d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d08:	00e9      	lsls	r1, r5, #3
 8014d0a:	1859      	adds	r1, r3, r1
 8014d0c:	6808      	ldr	r0, [r1, #0]
 8014d0e:	6849      	ldr	r1, [r1, #4]
 8014d10:	6832      	ldr	r2, [r6, #0]
 8014d12:	6873      	ldr	r3, [r6, #4]
 8014d14:	f7ec ff96 	bl	8001c44 <__aeabi_dmul>
 8014d18:	0002      	movs	r2, r0
 8014d1a:	000b      	movs	r3, r1
 8014d1c:	9800      	ldr	r0, [sp, #0]
 8014d1e:	9901      	ldr	r1, [sp, #4]
 8014d20:	f7ec f852 	bl	8000dc8 <__aeabi_dadd>
 8014d24:	3501      	adds	r5, #1
 8014d26:	9000      	str	r0, [sp, #0]
 8014d28:	9101      	str	r1, [sp, #4]
 8014d2a:	3e08      	subs	r6, #8
 8014d2c:	e7dc      	b.n	8014ce8 <__kernel_rem_pio2+0x394>
 8014d2e:	9b00      	ldr	r3, [sp, #0]
 8014d30:	3b01      	subs	r3, #1
 8014d32:	9300      	str	r3, [sp, #0]
 8014d34:	e74f      	b.n	8014bd6 <__kernel_rem_pio2+0x282>
 8014d36:	9b02      	ldr	r3, [sp, #8]
 8014d38:	0030      	movs	r0, r6
 8014d3a:	425a      	negs	r2, r3
 8014d3c:	0039      	movs	r1, r7
 8014d3e:	f000 faad 	bl	801529c <scalbn>
 8014d42:	2200      	movs	r2, #0
 8014d44:	4bb5      	ldr	r3, [pc, #724]	; (801501c <__kernel_rem_pio2+0x6c8>)
 8014d46:	0004      	movs	r4, r0
 8014d48:	000d      	movs	r5, r1
 8014d4a:	f7eb fba3 	bl	8000494 <__aeabi_dcmpge>
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	d025      	beq.n	8014d9e <__kernel_rem_pio2+0x44a>
 8014d52:	2200      	movs	r2, #0
 8014d54:	4bb2      	ldr	r3, [pc, #712]	; (8015020 <__kernel_rem_pio2+0x6cc>)
 8014d56:	0020      	movs	r0, r4
 8014d58:	0029      	movs	r1, r5
 8014d5a:	f7ec ff73 	bl	8001c44 <__aeabi_dmul>
 8014d5e:	f7ed fd8d 	bl	800287c <__aeabi_d2iz>
 8014d62:	9b04      	ldr	r3, [sp, #16]
 8014d64:	0006      	movs	r6, r0
 8014d66:	009f      	lsls	r7, r3, #2
 8014d68:	f7ed fdbe 	bl	80028e8 <__aeabi_i2d>
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	4bab      	ldr	r3, [pc, #684]	; (801501c <__kernel_rem_pio2+0x6c8>)
 8014d70:	f7ec ff68 	bl	8001c44 <__aeabi_dmul>
 8014d74:	0002      	movs	r2, r0
 8014d76:	000b      	movs	r3, r1
 8014d78:	0020      	movs	r0, r4
 8014d7a:	0029      	movs	r1, r5
 8014d7c:	f7ed f9ce 	bl	800211c <__aeabi_dsub>
 8014d80:	f7ed fd7c 	bl	800287c <__aeabi_d2iz>
 8014d84:	ab12      	add	r3, sp, #72	; 0x48
 8014d86:	51d8      	str	r0, [r3, r7]
 8014d88:	9b04      	ldr	r3, [sp, #16]
 8014d8a:	aa12      	add	r2, sp, #72	; 0x48
 8014d8c:	3301      	adds	r3, #1
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	9b02      	ldr	r3, [sp, #8]
 8014d92:	3318      	adds	r3, #24
 8014d94:	9302      	str	r3, [sp, #8]
 8014d96:	9b00      	ldr	r3, [sp, #0]
 8014d98:	009b      	lsls	r3, r3, #2
 8014d9a:	509e      	str	r6, [r3, r2]
 8014d9c:	e725      	b.n	8014bea <__kernel_rem_pio2+0x296>
 8014d9e:	9b04      	ldr	r3, [sp, #16]
 8014da0:	0020      	movs	r0, r4
 8014da2:	0029      	movs	r1, r5
 8014da4:	009e      	lsls	r6, r3, #2
 8014da6:	f7ed fd69 	bl	800287c <__aeabi_d2iz>
 8014daa:	ab12      	add	r3, sp, #72	; 0x48
 8014dac:	5198      	str	r0, [r3, r6]
 8014dae:	9b04      	ldr	r3, [sp, #16]
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	e71a      	b.n	8014bea <__kernel_rem_pio2+0x296>
 8014db4:	00e5      	lsls	r5, r4, #3
 8014db6:	ab76      	add	r3, sp, #472	; 0x1d8
 8014db8:	aa12      	add	r2, sp, #72	; 0x48
 8014dba:	195d      	adds	r5, r3, r5
 8014dbc:	00a3      	lsls	r3, r4, #2
 8014dbe:	5898      	ldr	r0, [r3, r2]
 8014dc0:	f7ed fd92 	bl	80028e8 <__aeabi_i2d>
 8014dc4:	0032      	movs	r2, r6
 8014dc6:	003b      	movs	r3, r7
 8014dc8:	f7ec ff3c 	bl	8001c44 <__aeabi_dmul>
 8014dcc:	2200      	movs	r2, #0
 8014dce:	6028      	str	r0, [r5, #0]
 8014dd0:	6069      	str	r1, [r5, #4]
 8014dd2:	4b93      	ldr	r3, [pc, #588]	; (8015020 <__kernel_rem_pio2+0x6cc>)
 8014dd4:	0030      	movs	r0, r6
 8014dd6:	0039      	movs	r1, r7
 8014dd8:	f7ec ff34 	bl	8001c44 <__aeabi_dmul>
 8014ddc:	3c01      	subs	r4, #1
 8014dde:	0006      	movs	r6, r0
 8014de0:	000f      	movs	r7, r1
 8014de2:	e70a      	b.n	8014bfa <__kernel_rem_pio2+0x2a6>
 8014de4:	4b8f      	ldr	r3, [pc, #572]	; (8015024 <__kernel_rem_pio2+0x6d0>)
 8014de6:	00e9      	lsls	r1, r5, #3
 8014de8:	1859      	adds	r1, r3, r1
 8014dea:	6808      	ldr	r0, [r1, #0]
 8014dec:	6849      	ldr	r1, [r1, #4]
 8014dee:	ce0c      	ldmia	r6!, {r2, r3}
 8014df0:	f7ec ff28 	bl	8001c44 <__aeabi_dmul>
 8014df4:	0002      	movs	r2, r0
 8014df6:	000b      	movs	r3, r1
 8014df8:	9802      	ldr	r0, [sp, #8]
 8014dfa:	9903      	ldr	r1, [sp, #12]
 8014dfc:	f7eb ffe4 	bl	8000dc8 <__aeabi_dadd>
 8014e00:	9002      	str	r0, [sp, #8]
 8014e02:	9103      	str	r1, [sp, #12]
 8014e04:	3501      	adds	r5, #1
 8014e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e08:	429d      	cmp	r5, r3
 8014e0a:	dc01      	bgt.n	8014e10 <__kernel_rem_pio2+0x4bc>
 8014e0c:	42bd      	cmp	r5, r7
 8014e0e:	dde9      	ble.n	8014de4 <__kernel_rem_pio2+0x490>
 8014e10:	ab4e      	add	r3, sp, #312	; 0x138
 8014e12:	00ff      	lsls	r7, r7, #3
 8014e14:	19df      	adds	r7, r3, r7
 8014e16:	3c01      	subs	r4, #1
 8014e18:	9a02      	ldr	r2, [sp, #8]
 8014e1a:	9b03      	ldr	r3, [sp, #12]
 8014e1c:	603a      	str	r2, [r7, #0]
 8014e1e:	607b      	str	r3, [r7, #4]
 8014e20:	e6ef      	b.n	8014c02 <__kernel_rem_pio2+0x2ae>
 8014e22:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	dc0e      	bgt.n	8014e46 <__kernel_rem_pio2+0x4f2>
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	dd00      	ble.n	8014e2e <__kernel_rem_pio2+0x4da>
 8014e2c:	e08c      	b.n	8014f48 <__kernel_rem_pio2+0x5f4>
 8014e2e:	2500      	movs	r5, #0
 8014e30:	002c      	movs	r4, r5
 8014e32:	42ab      	cmp	r3, r5
 8014e34:	d046      	beq.n	8014ec4 <__kernel_rem_pio2+0x570>
 8014e36:	2007      	movs	r0, #7
 8014e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e3a:	4003      	ands	r3, r0
 8014e3c:	0018      	movs	r0, r3
 8014e3e:	239f      	movs	r3, #159	; 0x9f
 8014e40:	009b      	lsls	r3, r3, #2
 8014e42:	449d      	add	sp, r3
 8014e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014e48:	2b03      	cmp	r3, #3
 8014e4a:	d1f4      	bne.n	8014e36 <__kernel_rem_pio2+0x4e2>
 8014e4c:	9b00      	ldr	r3, [sp, #0]
 8014e4e:	00dc      	lsls	r4, r3, #3
 8014e50:	ab4e      	add	r3, sp, #312	; 0x138
 8014e52:	191c      	adds	r4, r3, r4
 8014e54:	0025      	movs	r5, r4
 8014e56:	9b00      	ldr	r3, [sp, #0]
 8014e58:	9302      	str	r3, [sp, #8]
 8014e5a:	9b02      	ldr	r3, [sp, #8]
 8014e5c:	3d08      	subs	r5, #8
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	dd00      	ble.n	8014e64 <__kernel_rem_pio2+0x510>
 8014e62:	e07f      	b.n	8014f64 <__kernel_rem_pio2+0x610>
 8014e64:	9d00      	ldr	r5, [sp, #0]
 8014e66:	3c08      	subs	r4, #8
 8014e68:	2d01      	cmp	r5, #1
 8014e6a:	dd00      	ble.n	8014e6e <__kernel_rem_pio2+0x51a>
 8014e6c:	e09c      	b.n	8014fa8 <__kernel_rem_pio2+0x654>
 8014e6e:	2400      	movs	r4, #0
 8014e70:	0021      	movs	r1, r4
 8014e72:	9b00      	ldr	r3, [sp, #0]
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	dd00      	ble.n	8014e7a <__kernel_rem_pio2+0x526>
 8014e78:	e0b4      	b.n	8014fe4 <__kernel_rem_pio2+0x690>
 8014e7a:	9b08      	ldr	r3, [sp, #32]
 8014e7c:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8014e7e:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8014e80:	9d50      	ldr	r5, [sp, #320]	; 0x140
 8014e82:	9851      	ldr	r0, [sp, #324]	; 0x144
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d000      	beq.n	8014e8a <__kernel_rem_pio2+0x536>
 8014e88:	e0ba      	b.n	8015000 <__kernel_rem_pio2+0x6ac>
 8014e8a:	0033      	movs	r3, r6
 8014e8c:	003a      	movs	r2, r7
 8014e8e:	9e07      	ldr	r6, [sp, #28]
 8014e90:	6032      	str	r2, [r6, #0]
 8014e92:	6073      	str	r3, [r6, #4]
 8014e94:	002a      	movs	r2, r5
 8014e96:	0003      	movs	r3, r0
 8014e98:	60b2      	str	r2, [r6, #8]
 8014e9a:	60f3      	str	r3, [r6, #12]
 8014e9c:	0022      	movs	r2, r4
 8014e9e:	000b      	movs	r3, r1
 8014ea0:	6132      	str	r2, [r6, #16]
 8014ea2:	6173      	str	r3, [r6, #20]
 8014ea4:	e7c7      	b.n	8014e36 <__kernel_rem_pio2+0x4e2>
 8014ea6:	9b00      	ldr	r3, [sp, #0]
 8014ea8:	aa4e      	add	r2, sp, #312	; 0x138
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	18d3      	adds	r3, r2, r3
 8014eae:	0028      	movs	r0, r5
 8014eb0:	681a      	ldr	r2, [r3, #0]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	0021      	movs	r1, r4
 8014eb6:	f7eb ff87 	bl	8000dc8 <__aeabi_dadd>
 8014eba:	0005      	movs	r5, r0
 8014ebc:	000c      	movs	r4, r1
 8014ebe:	9b00      	ldr	r3, [sp, #0]
 8014ec0:	3b01      	subs	r3, #1
 8014ec2:	9300      	str	r3, [sp, #0]
 8014ec4:	9b00      	ldr	r3, [sp, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	daed      	bge.n	8014ea6 <__kernel_rem_pio2+0x552>
 8014eca:	9b08      	ldr	r3, [sp, #32]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d002      	beq.n	8014ed6 <__kernel_rem_pio2+0x582>
 8014ed0:	2380      	movs	r3, #128	; 0x80
 8014ed2:	061b      	lsls	r3, r3, #24
 8014ed4:	18e4      	adds	r4, r4, r3
 8014ed6:	002a      	movs	r2, r5
 8014ed8:	0023      	movs	r3, r4
 8014eda:	9907      	ldr	r1, [sp, #28]
 8014edc:	600a      	str	r2, [r1, #0]
 8014ede:	604b      	str	r3, [r1, #4]
 8014ee0:	e7a9      	b.n	8014e36 <__kernel_rem_pio2+0x4e2>
 8014ee2:	00e3      	lsls	r3, r4, #3
 8014ee4:	aa4e      	add	r2, sp, #312	; 0x138
 8014ee6:	18d3      	adds	r3, r2, r3
 8014ee8:	0030      	movs	r0, r6
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	685b      	ldr	r3, [r3, #4]
 8014eee:	0029      	movs	r1, r5
 8014ef0:	f7eb ff6a 	bl	8000dc8 <__aeabi_dadd>
 8014ef4:	0006      	movs	r6, r0
 8014ef6:	000d      	movs	r5, r1
 8014ef8:	3c01      	subs	r4, #1
 8014efa:	2c00      	cmp	r4, #0
 8014efc:	daf1      	bge.n	8014ee2 <__kernel_rem_pio2+0x58e>
 8014efe:	9b08      	ldr	r3, [sp, #32]
 8014f00:	0029      	movs	r1, r5
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d002      	beq.n	8014f0c <__kernel_rem_pio2+0x5b8>
 8014f06:	2380      	movs	r3, #128	; 0x80
 8014f08:	061b      	lsls	r3, r3, #24
 8014f0a:	18e9      	adds	r1, r5, r3
 8014f0c:	0032      	movs	r2, r6
 8014f0e:	000b      	movs	r3, r1
 8014f10:	9907      	ldr	r1, [sp, #28]
 8014f12:	2401      	movs	r4, #1
 8014f14:	600a      	str	r2, [r1, #0]
 8014f16:	604b      	str	r3, [r1, #4]
 8014f18:	984e      	ldr	r0, [sp, #312]	; 0x138
 8014f1a:	994f      	ldr	r1, [sp, #316]	; 0x13c
 8014f1c:	002b      	movs	r3, r5
 8014f1e:	f7ed f8fd 	bl	800211c <__aeabi_dsub>
 8014f22:	0007      	movs	r7, r0
 8014f24:	000e      	movs	r6, r1
 8014f26:	ad4e      	add	r5, sp, #312	; 0x138
 8014f28:	9b00      	ldr	r3, [sp, #0]
 8014f2a:	3508      	adds	r5, #8
 8014f2c:	42a3      	cmp	r3, r4
 8014f2e:	da0f      	bge.n	8014f50 <__kernel_rem_pio2+0x5fc>
 8014f30:	9b08      	ldr	r3, [sp, #32]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <__kernel_rem_pio2+0x5e8>
 8014f36:	2380      	movs	r3, #128	; 0x80
 8014f38:	061b      	lsls	r3, r3, #24
 8014f3a:	18f6      	adds	r6, r6, r3
 8014f3c:	003a      	movs	r2, r7
 8014f3e:	0033      	movs	r3, r6
 8014f40:	9907      	ldr	r1, [sp, #28]
 8014f42:	608a      	str	r2, [r1, #8]
 8014f44:	60cb      	str	r3, [r1, #12]
 8014f46:	e776      	b.n	8014e36 <__kernel_rem_pio2+0x4e2>
 8014f48:	2600      	movs	r6, #0
 8014f4a:	9c00      	ldr	r4, [sp, #0]
 8014f4c:	0035      	movs	r5, r6
 8014f4e:	e7d4      	b.n	8014efa <__kernel_rem_pio2+0x5a6>
 8014f50:	0038      	movs	r0, r7
 8014f52:	682a      	ldr	r2, [r5, #0]
 8014f54:	686b      	ldr	r3, [r5, #4]
 8014f56:	0031      	movs	r1, r6
 8014f58:	f7eb ff36 	bl	8000dc8 <__aeabi_dadd>
 8014f5c:	3401      	adds	r4, #1
 8014f5e:	0007      	movs	r7, r0
 8014f60:	000e      	movs	r6, r1
 8014f62:	e7e1      	b.n	8014f28 <__kernel_rem_pio2+0x5d4>
 8014f64:	9b02      	ldr	r3, [sp, #8]
 8014f66:	68ae      	ldr	r6, [r5, #8]
 8014f68:	68ef      	ldr	r7, [r5, #12]
 8014f6a:	3b01      	subs	r3, #1
 8014f6c:	9302      	str	r3, [sp, #8]
 8014f6e:	682a      	ldr	r2, [r5, #0]
 8014f70:	686b      	ldr	r3, [r5, #4]
 8014f72:	9204      	str	r2, [sp, #16]
 8014f74:	9305      	str	r3, [sp, #20]
 8014f76:	9804      	ldr	r0, [sp, #16]
 8014f78:	9905      	ldr	r1, [sp, #20]
 8014f7a:	0032      	movs	r2, r6
 8014f7c:	003b      	movs	r3, r7
 8014f7e:	f7eb ff23 	bl	8000dc8 <__aeabi_dadd>
 8014f82:	0002      	movs	r2, r0
 8014f84:	000b      	movs	r3, r1
 8014f86:	900a      	str	r0, [sp, #40]	; 0x28
 8014f88:	910b      	str	r1, [sp, #44]	; 0x2c
 8014f8a:	9804      	ldr	r0, [sp, #16]
 8014f8c:	9905      	ldr	r1, [sp, #20]
 8014f8e:	f7ed f8c5 	bl	800211c <__aeabi_dsub>
 8014f92:	0032      	movs	r2, r6
 8014f94:	003b      	movs	r3, r7
 8014f96:	f7eb ff17 	bl	8000dc8 <__aeabi_dadd>
 8014f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f9e:	60a8      	str	r0, [r5, #8]
 8014fa0:	60e9      	str	r1, [r5, #12]
 8014fa2:	602a      	str	r2, [r5, #0]
 8014fa4:	606b      	str	r3, [r5, #4]
 8014fa6:	e758      	b.n	8014e5a <__kernel_rem_pio2+0x506>
 8014fa8:	6826      	ldr	r6, [r4, #0]
 8014faa:	6867      	ldr	r7, [r4, #4]
 8014fac:	68a2      	ldr	r2, [r4, #8]
 8014fae:	68e3      	ldr	r3, [r4, #12]
 8014fb0:	0030      	movs	r0, r6
 8014fb2:	0039      	movs	r1, r7
 8014fb4:	9202      	str	r2, [sp, #8]
 8014fb6:	9303      	str	r3, [sp, #12]
 8014fb8:	f7eb ff06 	bl	8000dc8 <__aeabi_dadd>
 8014fbc:	0002      	movs	r2, r0
 8014fbe:	000b      	movs	r3, r1
 8014fc0:	9004      	str	r0, [sp, #16]
 8014fc2:	9105      	str	r1, [sp, #20]
 8014fc4:	0030      	movs	r0, r6
 8014fc6:	0039      	movs	r1, r7
 8014fc8:	f7ed f8a8 	bl	800211c <__aeabi_dsub>
 8014fcc:	9a02      	ldr	r2, [sp, #8]
 8014fce:	9b03      	ldr	r3, [sp, #12]
 8014fd0:	f7eb fefa 	bl	8000dc8 <__aeabi_dadd>
 8014fd4:	9a04      	ldr	r2, [sp, #16]
 8014fd6:	9b05      	ldr	r3, [sp, #20]
 8014fd8:	60a0      	str	r0, [r4, #8]
 8014fda:	60e1      	str	r1, [r4, #12]
 8014fdc:	6022      	str	r2, [r4, #0]
 8014fde:	6063      	str	r3, [r4, #4]
 8014fe0:	3d01      	subs	r5, #1
 8014fe2:	e740      	b.n	8014e66 <__kernel_rem_pio2+0x512>
 8014fe4:	9b00      	ldr	r3, [sp, #0]
 8014fe6:	aa4e      	add	r2, sp, #312	; 0x138
 8014fe8:	00db      	lsls	r3, r3, #3
 8014fea:	18d3      	adds	r3, r2, r3
 8014fec:	0020      	movs	r0, r4
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	f7eb fee9 	bl	8000dc8 <__aeabi_dadd>
 8014ff6:	9b00      	ldr	r3, [sp, #0]
 8014ff8:	0004      	movs	r4, r0
 8014ffa:	3b01      	subs	r3, #1
 8014ffc:	9300      	str	r3, [sp, #0]
 8014ffe:	e738      	b.n	8014e72 <__kernel_rem_pio2+0x51e>
 8015000:	9b07      	ldr	r3, [sp, #28]
 8015002:	9a07      	ldr	r2, [sp, #28]
 8015004:	601f      	str	r7, [r3, #0]
 8015006:	2380      	movs	r3, #128	; 0x80
 8015008:	061b      	lsls	r3, r3, #24
 801500a:	18f6      	adds	r6, r6, r3
 801500c:	18c0      	adds	r0, r0, r3
 801500e:	18c9      	adds	r1, r1, r3
 8015010:	6056      	str	r6, [r2, #4]
 8015012:	6095      	str	r5, [r2, #8]
 8015014:	60d0      	str	r0, [r2, #12]
 8015016:	6114      	str	r4, [r2, #16]
 8015018:	6151      	str	r1, [r2, #20]
 801501a:	e70c      	b.n	8014e36 <__kernel_rem_pio2+0x4e2>
 801501c:	41700000 	.word	0x41700000
 8015020:	3e700000 	.word	0x3e700000
 8015024:	080165e0 	.word	0x080165e0

08015028 <__kernel_sin>:
 8015028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801502a:	b089      	sub	sp, #36	; 0x24
 801502c:	9202      	str	r2, [sp, #8]
 801502e:	9303      	str	r3, [sp, #12]
 8015030:	22f9      	movs	r2, #249	; 0xf9
 8015032:	004b      	lsls	r3, r1, #1
 8015034:	0007      	movs	r7, r0
 8015036:	000e      	movs	r6, r1
 8015038:	085b      	lsrs	r3, r3, #1
 801503a:	0592      	lsls	r2, r2, #22
 801503c:	4293      	cmp	r3, r2
 801503e:	da03      	bge.n	8015048 <__kernel_sin+0x20>
 8015040:	f7ed fc1c 	bl	800287c <__aeabi_d2iz>
 8015044:	2800      	cmp	r0, #0
 8015046:	d04c      	beq.n	80150e2 <__kernel_sin+0xba>
 8015048:	003a      	movs	r2, r7
 801504a:	0033      	movs	r3, r6
 801504c:	0038      	movs	r0, r7
 801504e:	0031      	movs	r1, r6
 8015050:	f7ec fdf8 	bl	8001c44 <__aeabi_dmul>
 8015054:	0004      	movs	r4, r0
 8015056:	000d      	movs	r5, r1
 8015058:	0002      	movs	r2, r0
 801505a:	000b      	movs	r3, r1
 801505c:	0038      	movs	r0, r7
 801505e:	0031      	movs	r1, r6
 8015060:	f7ec fdf0 	bl	8001c44 <__aeabi_dmul>
 8015064:	4a39      	ldr	r2, [pc, #228]	; (801514c <__kernel_sin+0x124>)
 8015066:	9000      	str	r0, [sp, #0]
 8015068:	9101      	str	r1, [sp, #4]
 801506a:	4b39      	ldr	r3, [pc, #228]	; (8015150 <__kernel_sin+0x128>)
 801506c:	0020      	movs	r0, r4
 801506e:	0029      	movs	r1, r5
 8015070:	f7ec fde8 	bl	8001c44 <__aeabi_dmul>
 8015074:	4a37      	ldr	r2, [pc, #220]	; (8015154 <__kernel_sin+0x12c>)
 8015076:	4b38      	ldr	r3, [pc, #224]	; (8015158 <__kernel_sin+0x130>)
 8015078:	f7ed f850 	bl	800211c <__aeabi_dsub>
 801507c:	0022      	movs	r2, r4
 801507e:	002b      	movs	r3, r5
 8015080:	f7ec fde0 	bl	8001c44 <__aeabi_dmul>
 8015084:	4a35      	ldr	r2, [pc, #212]	; (801515c <__kernel_sin+0x134>)
 8015086:	4b36      	ldr	r3, [pc, #216]	; (8015160 <__kernel_sin+0x138>)
 8015088:	f7eb fe9e 	bl	8000dc8 <__aeabi_dadd>
 801508c:	0022      	movs	r2, r4
 801508e:	002b      	movs	r3, r5
 8015090:	f7ec fdd8 	bl	8001c44 <__aeabi_dmul>
 8015094:	4a33      	ldr	r2, [pc, #204]	; (8015164 <__kernel_sin+0x13c>)
 8015096:	4b34      	ldr	r3, [pc, #208]	; (8015168 <__kernel_sin+0x140>)
 8015098:	f7ed f840 	bl	800211c <__aeabi_dsub>
 801509c:	0022      	movs	r2, r4
 801509e:	002b      	movs	r3, r5
 80150a0:	f7ec fdd0 	bl	8001c44 <__aeabi_dmul>
 80150a4:	4b31      	ldr	r3, [pc, #196]	; (801516c <__kernel_sin+0x144>)
 80150a6:	4a32      	ldr	r2, [pc, #200]	; (8015170 <__kernel_sin+0x148>)
 80150a8:	f7eb fe8e 	bl	8000dc8 <__aeabi_dadd>
 80150ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150ae:	9004      	str	r0, [sp, #16]
 80150b0:	9105      	str	r1, [sp, #20]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d119      	bne.n	80150ea <__kernel_sin+0xc2>
 80150b6:	0002      	movs	r2, r0
 80150b8:	000b      	movs	r3, r1
 80150ba:	0020      	movs	r0, r4
 80150bc:	0029      	movs	r1, r5
 80150be:	f7ec fdc1 	bl	8001c44 <__aeabi_dmul>
 80150c2:	4a2c      	ldr	r2, [pc, #176]	; (8015174 <__kernel_sin+0x14c>)
 80150c4:	4b2c      	ldr	r3, [pc, #176]	; (8015178 <__kernel_sin+0x150>)
 80150c6:	f7ed f829 	bl	800211c <__aeabi_dsub>
 80150ca:	9a00      	ldr	r2, [sp, #0]
 80150cc:	9b01      	ldr	r3, [sp, #4]
 80150ce:	f7ec fdb9 	bl	8001c44 <__aeabi_dmul>
 80150d2:	0002      	movs	r2, r0
 80150d4:	000b      	movs	r3, r1
 80150d6:	0038      	movs	r0, r7
 80150d8:	0031      	movs	r1, r6
 80150da:	f7eb fe75 	bl	8000dc8 <__aeabi_dadd>
 80150de:	0007      	movs	r7, r0
 80150e0:	000e      	movs	r6, r1
 80150e2:	0038      	movs	r0, r7
 80150e4:	0031      	movs	r1, r6
 80150e6:	b009      	add	sp, #36	; 0x24
 80150e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150ea:	2200      	movs	r2, #0
 80150ec:	9802      	ldr	r0, [sp, #8]
 80150ee:	9903      	ldr	r1, [sp, #12]
 80150f0:	4b22      	ldr	r3, [pc, #136]	; (801517c <__kernel_sin+0x154>)
 80150f2:	f7ec fda7 	bl	8001c44 <__aeabi_dmul>
 80150f6:	9a04      	ldr	r2, [sp, #16]
 80150f8:	9b05      	ldr	r3, [sp, #20]
 80150fa:	9006      	str	r0, [sp, #24]
 80150fc:	9107      	str	r1, [sp, #28]
 80150fe:	9800      	ldr	r0, [sp, #0]
 8015100:	9901      	ldr	r1, [sp, #4]
 8015102:	f7ec fd9f 	bl	8001c44 <__aeabi_dmul>
 8015106:	0002      	movs	r2, r0
 8015108:	000b      	movs	r3, r1
 801510a:	9806      	ldr	r0, [sp, #24]
 801510c:	9907      	ldr	r1, [sp, #28]
 801510e:	f7ed f805 	bl	800211c <__aeabi_dsub>
 8015112:	0022      	movs	r2, r4
 8015114:	002b      	movs	r3, r5
 8015116:	f7ec fd95 	bl	8001c44 <__aeabi_dmul>
 801511a:	9a02      	ldr	r2, [sp, #8]
 801511c:	9b03      	ldr	r3, [sp, #12]
 801511e:	f7ec fffd 	bl	800211c <__aeabi_dsub>
 8015122:	4a14      	ldr	r2, [pc, #80]	; (8015174 <__kernel_sin+0x14c>)
 8015124:	0004      	movs	r4, r0
 8015126:	000d      	movs	r5, r1
 8015128:	9800      	ldr	r0, [sp, #0]
 801512a:	9901      	ldr	r1, [sp, #4]
 801512c:	4b12      	ldr	r3, [pc, #72]	; (8015178 <__kernel_sin+0x150>)
 801512e:	f7ec fd89 	bl	8001c44 <__aeabi_dmul>
 8015132:	0002      	movs	r2, r0
 8015134:	000b      	movs	r3, r1
 8015136:	0020      	movs	r0, r4
 8015138:	0029      	movs	r1, r5
 801513a:	f7eb fe45 	bl	8000dc8 <__aeabi_dadd>
 801513e:	0002      	movs	r2, r0
 8015140:	000b      	movs	r3, r1
 8015142:	0038      	movs	r0, r7
 8015144:	0031      	movs	r1, r6
 8015146:	f7ec ffe9 	bl	800211c <__aeabi_dsub>
 801514a:	e7c8      	b.n	80150de <__kernel_sin+0xb6>
 801514c:	5acfd57c 	.word	0x5acfd57c
 8015150:	3de5d93a 	.word	0x3de5d93a
 8015154:	8a2b9ceb 	.word	0x8a2b9ceb
 8015158:	3e5ae5e6 	.word	0x3e5ae5e6
 801515c:	57b1fe7d 	.word	0x57b1fe7d
 8015160:	3ec71de3 	.word	0x3ec71de3
 8015164:	19c161d5 	.word	0x19c161d5
 8015168:	3f2a01a0 	.word	0x3f2a01a0
 801516c:	3f811111 	.word	0x3f811111
 8015170:	1110f8a6 	.word	0x1110f8a6
 8015174:	55555549 	.word	0x55555549
 8015178:	3fc55555 	.word	0x3fc55555
 801517c:	3fe00000 	.word	0x3fe00000

08015180 <fabs>:
 8015180:	004b      	lsls	r3, r1, #1
 8015182:	0859      	lsrs	r1, r3, #1
 8015184:	4770      	bx	lr
	...

08015188 <floor>:
 8015188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801518a:	004b      	lsls	r3, r1, #1
 801518c:	4a3d      	ldr	r2, [pc, #244]	; (8015284 <floor+0xfc>)
 801518e:	0d5b      	lsrs	r3, r3, #21
 8015190:	189f      	adds	r7, r3, r2
 8015192:	4684      	mov	ip, r0
 8015194:	000e      	movs	r6, r1
 8015196:	000d      	movs	r5, r1
 8015198:	0004      	movs	r4, r0
 801519a:	9001      	str	r0, [sp, #4]
 801519c:	2f13      	cmp	r7, #19
 801519e:	dc34      	bgt.n	801520a <floor+0x82>
 80151a0:	2f00      	cmp	r7, #0
 80151a2:	da16      	bge.n	80151d2 <floor+0x4a>
 80151a4:	4a38      	ldr	r2, [pc, #224]	; (8015288 <floor+0x100>)
 80151a6:	4b39      	ldr	r3, [pc, #228]	; (801528c <floor+0x104>)
 80151a8:	4660      	mov	r0, ip
 80151aa:	0031      	movs	r1, r6
 80151ac:	f7eb fe0c 	bl	8000dc8 <__aeabi_dadd>
 80151b0:	2200      	movs	r2, #0
 80151b2:	2300      	movs	r3, #0
 80151b4:	f7eb f964 	bl	8000480 <__aeabi_dcmpgt>
 80151b8:	2800      	cmp	r0, #0
 80151ba:	d007      	beq.n	80151cc <floor+0x44>
 80151bc:	2e00      	cmp	r6, #0
 80151be:	da5d      	bge.n	801527c <floor+0xf4>
 80151c0:	0073      	lsls	r3, r6, #1
 80151c2:	085b      	lsrs	r3, r3, #1
 80151c4:	431c      	orrs	r4, r3
 80151c6:	d001      	beq.n	80151cc <floor+0x44>
 80151c8:	2400      	movs	r4, #0
 80151ca:	4d31      	ldr	r5, [pc, #196]	; (8015290 <floor+0x108>)
 80151cc:	46a4      	mov	ip, r4
 80151ce:	002e      	movs	r6, r5
 80151d0:	e029      	b.n	8015226 <floor+0x9e>
 80151d2:	4b30      	ldr	r3, [pc, #192]	; (8015294 <floor+0x10c>)
 80151d4:	413b      	asrs	r3, r7
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	400b      	ands	r3, r1
 80151da:	4303      	orrs	r3, r0
 80151dc:	d023      	beq.n	8015226 <floor+0x9e>
 80151de:	4a2a      	ldr	r2, [pc, #168]	; (8015288 <floor+0x100>)
 80151e0:	4b2a      	ldr	r3, [pc, #168]	; (801528c <floor+0x104>)
 80151e2:	4660      	mov	r0, ip
 80151e4:	0031      	movs	r1, r6
 80151e6:	f7eb fdef 	bl	8000dc8 <__aeabi_dadd>
 80151ea:	2200      	movs	r2, #0
 80151ec:	2300      	movs	r3, #0
 80151ee:	f7eb f947 	bl	8000480 <__aeabi_dcmpgt>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d0ea      	beq.n	80151cc <floor+0x44>
 80151f6:	2e00      	cmp	r6, #0
 80151f8:	da03      	bge.n	8015202 <floor+0x7a>
 80151fa:	2380      	movs	r3, #128	; 0x80
 80151fc:	035b      	lsls	r3, r3, #13
 80151fe:	413b      	asrs	r3, r7
 8015200:	18f5      	adds	r5, r6, r3
 8015202:	9b00      	ldr	r3, [sp, #0]
 8015204:	2400      	movs	r4, #0
 8015206:	439d      	bics	r5, r3
 8015208:	e7e0      	b.n	80151cc <floor+0x44>
 801520a:	2f33      	cmp	r7, #51	; 0x33
 801520c:	dd0f      	ble.n	801522e <floor+0xa6>
 801520e:	2380      	movs	r3, #128	; 0x80
 8015210:	00db      	lsls	r3, r3, #3
 8015212:	429f      	cmp	r7, r3
 8015214:	d107      	bne.n	8015226 <floor+0x9e>
 8015216:	0002      	movs	r2, r0
 8015218:	000b      	movs	r3, r1
 801521a:	4660      	mov	r0, ip
 801521c:	0031      	movs	r1, r6
 801521e:	f7eb fdd3 	bl	8000dc8 <__aeabi_dadd>
 8015222:	4684      	mov	ip, r0
 8015224:	000e      	movs	r6, r1
 8015226:	4660      	mov	r0, ip
 8015228:	0031      	movs	r1, r6
 801522a:	b003      	add	sp, #12
 801522c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801522e:	4a1a      	ldr	r2, [pc, #104]	; (8015298 <floor+0x110>)
 8015230:	189b      	adds	r3, r3, r2
 8015232:	2201      	movs	r2, #1
 8015234:	4252      	negs	r2, r2
 8015236:	40da      	lsrs	r2, r3
 8015238:	9200      	str	r2, [sp, #0]
 801523a:	4210      	tst	r0, r2
 801523c:	d0f3      	beq.n	8015226 <floor+0x9e>
 801523e:	4a12      	ldr	r2, [pc, #72]	; (8015288 <floor+0x100>)
 8015240:	4b12      	ldr	r3, [pc, #72]	; (801528c <floor+0x104>)
 8015242:	4660      	mov	r0, ip
 8015244:	0031      	movs	r1, r6
 8015246:	f7eb fdbf 	bl	8000dc8 <__aeabi_dadd>
 801524a:	2200      	movs	r2, #0
 801524c:	2300      	movs	r3, #0
 801524e:	f7eb f917 	bl	8000480 <__aeabi_dcmpgt>
 8015252:	2800      	cmp	r0, #0
 8015254:	d0ba      	beq.n	80151cc <floor+0x44>
 8015256:	2e00      	cmp	r6, #0
 8015258:	da02      	bge.n	8015260 <floor+0xd8>
 801525a:	2f14      	cmp	r7, #20
 801525c:	d103      	bne.n	8015266 <floor+0xde>
 801525e:	3501      	adds	r5, #1
 8015260:	9b00      	ldr	r3, [sp, #0]
 8015262:	439c      	bics	r4, r3
 8015264:	e7b2      	b.n	80151cc <floor+0x44>
 8015266:	2334      	movs	r3, #52	; 0x34
 8015268:	1bdf      	subs	r7, r3, r7
 801526a:	3b33      	subs	r3, #51	; 0x33
 801526c:	40bb      	lsls	r3, r7
 801526e:	18e4      	adds	r4, r4, r3
 8015270:	9b01      	ldr	r3, [sp, #4]
 8015272:	429c      	cmp	r4, r3
 8015274:	419b      	sbcs	r3, r3
 8015276:	425b      	negs	r3, r3
 8015278:	18f5      	adds	r5, r6, r3
 801527a:	e7f1      	b.n	8015260 <floor+0xd8>
 801527c:	2400      	movs	r4, #0
 801527e:	0025      	movs	r5, r4
 8015280:	e7a4      	b.n	80151cc <floor+0x44>
 8015282:	46c0      	nop			; (mov r8, r8)
 8015284:	fffffc01 	.word	0xfffffc01
 8015288:	8800759c 	.word	0x8800759c
 801528c:	7e37e43c 	.word	0x7e37e43c
 8015290:	bff00000 	.word	0xbff00000
 8015294:	000fffff 	.word	0x000fffff
 8015298:	fffffbed 	.word	0xfffffbed

0801529c <scalbn>:
 801529c:	004b      	lsls	r3, r1, #1
 801529e:	b570      	push	{r4, r5, r6, lr}
 80152a0:	0d5b      	lsrs	r3, r3, #21
 80152a2:	0014      	movs	r4, r2
 80152a4:	000a      	movs	r2, r1
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d10d      	bne.n	80152c6 <scalbn+0x2a>
 80152aa:	004b      	lsls	r3, r1, #1
 80152ac:	085b      	lsrs	r3, r3, #1
 80152ae:	4303      	orrs	r3, r0
 80152b0:	d010      	beq.n	80152d4 <scalbn+0x38>
 80152b2:	4b27      	ldr	r3, [pc, #156]	; (8015350 <scalbn+0xb4>)
 80152b4:	2200      	movs	r2, #0
 80152b6:	f7ec fcc5 	bl	8001c44 <__aeabi_dmul>
 80152ba:	4b26      	ldr	r3, [pc, #152]	; (8015354 <scalbn+0xb8>)
 80152bc:	429c      	cmp	r4, r3
 80152be:	da0a      	bge.n	80152d6 <scalbn+0x3a>
 80152c0:	4a25      	ldr	r2, [pc, #148]	; (8015358 <scalbn+0xbc>)
 80152c2:	4b26      	ldr	r3, [pc, #152]	; (801535c <scalbn+0xc0>)
 80152c4:	e019      	b.n	80152fa <scalbn+0x5e>
 80152c6:	4d26      	ldr	r5, [pc, #152]	; (8015360 <scalbn+0xc4>)
 80152c8:	42ab      	cmp	r3, r5
 80152ca:	d108      	bne.n	80152de <scalbn+0x42>
 80152cc:	0002      	movs	r2, r0
 80152ce:	000b      	movs	r3, r1
 80152d0:	f7eb fd7a 	bl	8000dc8 <__aeabi_dadd>
 80152d4:	bd70      	pop	{r4, r5, r6, pc}
 80152d6:	000a      	movs	r2, r1
 80152d8:	004b      	lsls	r3, r1, #1
 80152da:	0d5b      	lsrs	r3, r3, #21
 80152dc:	3b36      	subs	r3, #54	; 0x36
 80152de:	4d21      	ldr	r5, [pc, #132]	; (8015364 <scalbn+0xc8>)
 80152e0:	18e3      	adds	r3, r4, r3
 80152e2:	42ab      	cmp	r3, r5
 80152e4:	dd0c      	ble.n	8015300 <scalbn+0x64>
 80152e6:	4c20      	ldr	r4, [pc, #128]	; (8015368 <scalbn+0xcc>)
 80152e8:	4d20      	ldr	r5, [pc, #128]	; (801536c <scalbn+0xd0>)
 80152ea:	2900      	cmp	r1, #0
 80152ec:	da01      	bge.n	80152f2 <scalbn+0x56>
 80152ee:	4c1e      	ldr	r4, [pc, #120]	; (8015368 <scalbn+0xcc>)
 80152f0:	4d1f      	ldr	r5, [pc, #124]	; (8015370 <scalbn+0xd4>)
 80152f2:	0020      	movs	r0, r4
 80152f4:	0029      	movs	r1, r5
 80152f6:	4a1c      	ldr	r2, [pc, #112]	; (8015368 <scalbn+0xcc>)
 80152f8:	4b1c      	ldr	r3, [pc, #112]	; (801536c <scalbn+0xd0>)
 80152fa:	f7ec fca3 	bl	8001c44 <__aeabi_dmul>
 80152fe:	e7e9      	b.n	80152d4 <scalbn+0x38>
 8015300:	2b00      	cmp	r3, #0
 8015302:	dd05      	ble.n	8015310 <scalbn+0x74>
 8015304:	4c1b      	ldr	r4, [pc, #108]	; (8015374 <scalbn+0xd8>)
 8015306:	051b      	lsls	r3, r3, #20
 8015308:	4022      	ands	r2, r4
 801530a:	431a      	orrs	r2, r3
 801530c:	0011      	movs	r1, r2
 801530e:	e7e1      	b.n	80152d4 <scalbn+0x38>
 8015310:	001d      	movs	r5, r3
 8015312:	3535      	adds	r5, #53	; 0x35
 8015314:	da13      	bge.n	801533e <scalbn+0xa2>
 8015316:	4a18      	ldr	r2, [pc, #96]	; (8015378 <scalbn+0xdc>)
 8015318:	0fcb      	lsrs	r3, r1, #31
 801531a:	4294      	cmp	r4, r2
 801531c:	dd08      	ble.n	8015330 <scalbn+0x94>
 801531e:	4812      	ldr	r0, [pc, #72]	; (8015368 <scalbn+0xcc>)
 8015320:	4912      	ldr	r1, [pc, #72]	; (801536c <scalbn+0xd0>)
 8015322:	2b00      	cmp	r3, #0
 8015324:	d001      	beq.n	801532a <scalbn+0x8e>
 8015326:	4810      	ldr	r0, [pc, #64]	; (8015368 <scalbn+0xcc>)
 8015328:	4911      	ldr	r1, [pc, #68]	; (8015370 <scalbn+0xd4>)
 801532a:	4a0f      	ldr	r2, [pc, #60]	; (8015368 <scalbn+0xcc>)
 801532c:	4b0f      	ldr	r3, [pc, #60]	; (801536c <scalbn+0xd0>)
 801532e:	e7e4      	b.n	80152fa <scalbn+0x5e>
 8015330:	4809      	ldr	r0, [pc, #36]	; (8015358 <scalbn+0xbc>)
 8015332:	490a      	ldr	r1, [pc, #40]	; (801535c <scalbn+0xc0>)
 8015334:	2b00      	cmp	r3, #0
 8015336:	d0c3      	beq.n	80152c0 <scalbn+0x24>
 8015338:	4807      	ldr	r0, [pc, #28]	; (8015358 <scalbn+0xbc>)
 801533a:	4910      	ldr	r1, [pc, #64]	; (801537c <scalbn+0xe0>)
 801533c:	e7c0      	b.n	80152c0 <scalbn+0x24>
 801533e:	4c0d      	ldr	r4, [pc, #52]	; (8015374 <scalbn+0xd8>)
 8015340:	3336      	adds	r3, #54	; 0x36
 8015342:	4022      	ands	r2, r4
 8015344:	051b      	lsls	r3, r3, #20
 8015346:	4313      	orrs	r3, r2
 8015348:	0019      	movs	r1, r3
 801534a:	2200      	movs	r2, #0
 801534c:	4b0c      	ldr	r3, [pc, #48]	; (8015380 <scalbn+0xe4>)
 801534e:	e7d4      	b.n	80152fa <scalbn+0x5e>
 8015350:	43500000 	.word	0x43500000
 8015354:	ffff3cb0 	.word	0xffff3cb0
 8015358:	c2f8f359 	.word	0xc2f8f359
 801535c:	01a56e1f 	.word	0x01a56e1f
 8015360:	000007ff 	.word	0x000007ff
 8015364:	000007fe 	.word	0x000007fe
 8015368:	8800759c 	.word	0x8800759c
 801536c:	7e37e43c 	.word	0x7e37e43c
 8015370:	fe37e43c 	.word	0xfe37e43c
 8015374:	800fffff 	.word	0x800fffff
 8015378:	0000c350 	.word	0x0000c350
 801537c:	81a56e1f 	.word	0x81a56e1f
 8015380:	3c900000 	.word	0x3c900000

08015384 <_init>:
 8015384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015386:	46c0      	nop			; (mov r8, r8)
 8015388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801538a:	bc08      	pop	{r3}
 801538c:	469e      	mov	lr, r3
 801538e:	4770      	bx	lr

08015390 <_fini>:
 8015390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015392:	46c0      	nop			; (mov r8, r8)
 8015394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015396:	bc08      	pop	{r3}
 8015398:	469e      	mov	lr, r3
 801539a:	4770      	bx	lr
