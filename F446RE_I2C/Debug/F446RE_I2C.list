
F446RE_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800457c  0800457c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080045f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080045f4  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b176  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001799  00000000  00000000  0002b216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000216a1  00000000  00000000  0002dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c949  00000000  00000000  0004f281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cacae  00000000  00000000  0005bbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  001268c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044ac 	.word	0x080044ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080044ac 	.word	0x080044ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[24];
	uint8_t time[3];
	uint8_t ini_time[] = {REG_SEC, 0x00, 0x00, 0x00};
 80005ca:	2303      	movs	r3, #3
 80005cc:	713b      	strb	r3, [r7, #4]
 80005ce:	2300      	movs	r3, #0
 80005d0:	717b      	strb	r3, [r7, #5]
 80005d2:	2300      	movs	r3, #0
 80005d4:	71bb      	strb	r3, [r7, #6]
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb4f 	bl	8000c7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f8bf 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f983 	bl	80008ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f957 	bl	8000898 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ea:	f000 f927 	bl	800083c <MX_I2C1_Init>
  HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, ini_time, 4, 100);
 80005ee:	23d0      	movs	r3, #208	; 0xd0
 80005f0:	b299      	uxth	r1, r3
 80005f2:	1d3a      	adds	r2, r7, #4
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2304      	movs	r3, #4
 80005fa:	4852      	ldr	r0, [pc, #328]	; (8000744 <main+0x180>)
 80005fc:	f000 ffac 	bl	8001558 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = REG_SEC;
 8000600:	2303      	movs	r3, #3
 8000602:	733b      	strb	r3, [r7, #12]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, RTC_ADDR, buf, 1, 100);
 8000604:	23d0      	movs	r3, #208	; 0xd0
 8000606:	b299      	uxth	r1, r3
 8000608:	f107 020c 	add.w	r2, r7, #12
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	484c      	ldr	r0, [pc, #304]	; (8000744 <main+0x180>)
 8000614:	f000 ffa0 	bl	8001558 <HAL_I2C_Master_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if (ret != HAL_OK) {
 800061e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000622:	2b00      	cmp	r3, #0
 8000624:	d009      	beq.n	800063a <main+0x76>
		  strcpy((char*)buf, "Error Transmision\r\n");
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	4a47      	ldr	r2, [pc, #284]	; (8000748 <main+0x184>)
 800062c:	461c      	mov	r4, r3
 800062e:	4615      	mov	r5, r2
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	682b      	ldr	r3, [r5, #0]
 8000636:	6023      	str	r3, [r4, #0]
 8000638:	e070      	b.n	800071c <main+0x158>
	  } else {
		  ret = HAL_I2C_Master_Receive(&hi2c1, RTC_ADDR, buf, 1, 100);
 800063a:	23d0      	movs	r3, #208	; 0xd0
 800063c:	b299      	uxth	r1, r3
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2301      	movs	r3, #1
 8000648:	483e      	ldr	r0, [pc, #248]	; (8000744 <main+0x180>)
 800064a:	f001 f883 	bl	8001754 <HAL_I2C_Master_Receive>
 800064e:	4603      	mov	r3, r0
 8000650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if (ret != HAL_OK) {
 8000654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000658:	2b00      	cmp	r3, #0
 800065a:	d009      	beq.n	8000670 <main+0xac>
			  strcpy((char*)buf, "Error Recepcion S\r\n");
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4a3a      	ldr	r2, [pc, #232]	; (800074c <main+0x188>)
 8000662:	461c      	mov	r4, r3
 8000664:	4615      	mov	r5, r2
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	682b      	ldr	r3, [r5, #0]
 800066c:	6023      	str	r3, [r4, #0]
 800066e:	e001      	b.n	8000674 <main+0xb0>
		  } else {
			  time[0]=buf[0];
 8000670:	7b3b      	ldrb	r3, [r7, #12]
 8000672:	723b      	strb	r3, [r7, #8]
		  }
		  ret = HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, REG_MIN, 1, buf, 1, 100);
 8000674:	23d0      	movs	r3, #208	; 0xd0
 8000676:	b299      	uxth	r1, r3
 8000678:	2304      	movs	r3, #4
 800067a:	b29a      	uxth	r2, r3
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	9302      	str	r3, [sp, #8]
 8000680:	2301      	movs	r3, #1
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	482d      	ldr	r0, [pc, #180]	; (8000744 <main+0x180>)
 800068e:	f001 fa87 	bl	8001ba0 <HAL_I2C_Mem_Read>
 8000692:	4603      	mov	r3, r0
 8000694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if (ret != HAL_OK) {
 8000698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800069c:	2b00      	cmp	r3, #0
 800069e:	d009      	beq.n	80006b4 <main+0xf0>
			  strcpy((char*)buf, "Error Recepcion M\r\n");
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <main+0x18c>)
 80006a6:	461c      	mov	r4, r3
 80006a8:	4615      	mov	r5, r2
 80006aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ae:	682b      	ldr	r3, [r5, #0]
 80006b0:	6023      	str	r3, [r4, #0]
 80006b2:	e001      	b.n	80006b8 <main+0xf4>
		  } else {
			  time[1]=buf[0];
 80006b4:	7b3b      	ldrb	r3, [r7, #12]
 80006b6:	727b      	strb	r3, [r7, #9]
		  }
		  ret = HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR, REG_HOUR, 1, buf, 1, 100);
 80006b8:	23d0      	movs	r3, #208	; 0xd0
 80006ba:	b299      	uxth	r1, r3
 80006bc:	2305      	movs	r3, #5
 80006be:	b29a      	uxth	r2, r3
 80006c0:	2364      	movs	r3, #100	; 0x64
 80006c2:	9302      	str	r3, [sp, #8]
 80006c4:	2301      	movs	r3, #1
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	481c      	ldr	r0, [pc, #112]	; (8000744 <main+0x180>)
 80006d2:	f001 fa65 	bl	8001ba0 <HAL_I2C_Mem_Read>
 80006d6:	4603      	mov	r3, r0
 80006d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if (ret != HAL_OK) {
 80006dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d009      	beq.n	80006f8 <main+0x134>
		  strcpy((char*)buf, "Error Recepcion H\r\n");
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <main+0x190>)
 80006ea:	461c      	mov	r4, r3
 80006ec:	4615      	mov	r5, r2
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	682b      	ldr	r3, [r5, #0]
 80006f4:	6023      	str	r3, [r4, #0]
 80006f6:	e011      	b.n	800071c <main+0x158>
		  } else {
			  time[2]=buf[0];
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	72bb      	strb	r3, [r7, #10]
			  sprintf((char*)buf, "%02x:%02x:%02x\r\n", time[2] & 0x3F, time[1] & 0x7F, time[0] & 0x7F);
 80006fc:	7abb      	ldrb	r3, [r7, #10]
 80006fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000702:	7a7b      	ldrb	r3, [r7, #9]
 8000704:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8000708:	7a3b      	ldrb	r3, [r7, #8]
 800070a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800070e:	f107 000c 	add.w	r0, r7, #12
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	460b      	mov	r3, r1
 8000716:	4910      	ldr	r1, [pc, #64]	; (8000758 <main+0x194>)
 8000718:	f003 fa5a 	bl	8003bd0 <siprintf>
		  }
	  }

	  // strcpy((char*)buf, "Hello!\r\n");
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd75 	bl	8000210 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 010c 	add.w	r1, r7, #12
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <main+0x198>)
 8000734:	f002 fea5 	bl	8003482 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073c:	f000 fb10 	bl	8000d60 <HAL_Delay>
	  buf[0] = REG_SEC;
 8000740:	e75e      	b.n	8000600 <main+0x3c>
 8000742:	bf00      	nop
 8000744:	2000008c 	.word	0x2000008c
 8000748:	080044c4 	.word	0x080044c4
 800074c:	080044d8 	.word	0x080044d8
 8000750:	080044ec 	.word	0x080044ec
 8000754:	08004500 	.word	0x08004500
 8000758:	08004514 	.word	0x08004514
 800075c:	200000e0 	.word	0x200000e0

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2234      	movs	r2, #52	; 0x34
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fa26 	bl	8003bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <SystemClock_Config+0xd4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a29      	ldr	r2, [pc, #164]	; (8000834 <SystemClock_Config+0xd4>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <SystemClock_Config+0xd8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a22      	ldr	r2, [pc, #136]	; (8000838 <SystemClock_Config+0xd8>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <SystemClock_Config+0xd8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2310      	movs	r3, #16
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007d4:	2310      	movs	r3, #16
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007de:	2304      	movs	r3, #4
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fb5c 	bl	8002eac <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007fa:	f000 f8e5 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2102      	movs	r1, #2
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fffc 	bl	8002818 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000826:	f000 f8cf 	bl	80009c8 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x50>)
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_I2C1_Init+0x54>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C1_Init+0x50>)
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_I2C1_Init+0x58>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_I2C1_Init+0x50>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_I2C1_Init+0x50>)
 800087a:	f000 fd29 	bl	80012d0 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000884:	f000 f8a0 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000008c 	.word	0x2000008c
 8000890:	40005400 	.word	0x40005400
 8000894:	000186a0 	.word	0x000186a0

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f002 fd8a 	bl	80033e8 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f875 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e0 	.word	0x200000e0
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2c      	ldr	r2, [pc, #176]	; (80009bc <MX_GPIO_Init+0xd0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a25      	ldr	r2, [pc, #148]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_GPIO_Init+0xd4>)
 8000978:	f000 fc90 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000982:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_GPIO_Init+0xd8>)
 8000994:	f000 faee 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0xd4>)
 80009b0:	f000 fae0 	bl	8000f74 <HAL_GPIO_Init>

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020800 	.word	0x40020800

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a12:	2007      	movs	r0, #7
 8000a14:	f000 fa7a 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <HAL_I2C_MspInit+0x84>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d12c      	bne.n	8000aa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a68:	2312      	movs	r3, #18
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a74:	2304      	movs	r3, #4
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <HAL_I2C_MspInit+0x8c>)
 8000a80:	f000 fa78 	bl	8000f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_I2C_MspInit+0x88>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_UART_MspInit+0x84>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d12b      	bne.n	8000b2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0e:	230c      	movs	r3, #12
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x8c>)
 8000b2a:	f000 fa23 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8c6 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f002 ffd0 	bl	8003b6c <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20020000 	.word	0x20020000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	20000124 	.word	0x20000124
 8000c00:	20000140 	.word	0x20000140

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f002 ff8f 	bl	8003b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fcb3 	bl	80005c4 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c6c:	08004584 	.word	0x08004584
  ldr r2, =_sbss
 8000c70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c74:	2000013c 	.word	0x2000013c

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f931 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe90 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f93b 	bl	8000f5a <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 f911 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000128 	.word	0x20000128

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000128 	.word	0x20000128

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Delay+0x44>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db0a      	blt.n	8000e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	490c      	ldr	r1, [pc, #48]	; (8000e58 <__NVIC_SetPriority+0x4c>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	0112      	lsls	r2, r2, #4
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	440b      	add	r3, r1
 8000e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e34:	e00a      	b.n	8000e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <__NVIC_SetPriority+0x50>)
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	3b04      	subs	r3, #4
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	b2d2      	uxtb	r2, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	761a      	strb	r2, [r3, #24]
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f1c3 0307 	rsb	r3, r3, #7
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	bf28      	it	cs
 8000e7e:	2304      	movcs	r3, #4
 8000e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3304      	adds	r3, #4
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d902      	bls.n	8000e90 <NVIC_EncodePriority+0x30>
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3b03      	subs	r3, #3
 8000e8e:	e000      	b.n	8000e92 <NVIC_EncodePriority+0x32>
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb2:	43d9      	mvns	r1, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	4313      	orrs	r3, r2
         );
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f7ff ff8e 	bl	8000e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff47 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff5c 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff8e 	bl	8000e60 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffb0 	bl	8000ec8 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e165      	b.n	800125c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8154 	bne.w	8001256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d130      	bne.n	8001028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ae 	beq.w	8001256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_GPIO_Init+0x300>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a5c      	ldr	r2, [pc, #368]	; (8001274 <HAL_GPIO_Init+0x300>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <HAL_GPIO_Init+0x300>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a58      	ldr	r2, [pc, #352]	; (8001278 <HAL_GPIO_Init+0x304>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	; (800127c <HAL_GPIO_Init+0x308>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <HAL_GPIO_Init+0x30c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x216>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	; (8001284 <HAL_GPIO_Init+0x310>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	; (8001288 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	; (800128c <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x20a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	; (8001290 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x206>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x202>
 8001172:	2306      	movs	r3, #6
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001176:	2307      	movs	r3, #7
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	; (8001278 <HAL_GPIO_Init+0x304>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a31      	ldr	r2, [pc, #196]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a26      	ldr	r2, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_GPIO_Init+0x324>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae96 	bls.w	8000f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e12b      	b.n	800153a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fb94 	bl	8000a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001334:	f001 fb62 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8001338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a81      	ldr	r2, [pc, #516]	; (8001544 <HAL_I2C_Init+0x274>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d807      	bhi.n	8001354 <HAL_I2C_Init+0x84>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a80      	ldr	r2, [pc, #512]	; (8001548 <HAL_I2C_Init+0x278>)
 8001348:	4293      	cmp	r3, r2
 800134a:	bf94      	ite	ls
 800134c:	2301      	movls	r3, #1
 800134e:	2300      	movhi	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	e006      	b.n	8001362 <HAL_I2C_Init+0x92>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a7d      	ldr	r2, [pc, #500]	; (800154c <HAL_I2C_Init+0x27c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	bf94      	ite	ls
 800135c:	2301      	movls	r3, #1
 800135e:	2300      	movhi	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0e7      	b.n	800153a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a78      	ldr	r2, [pc, #480]	; (8001550 <HAL_I2C_Init+0x280>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a6a      	ldr	r2, [pc, #424]	; (8001544 <HAL_I2C_Init+0x274>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d802      	bhi.n	80013a4 <HAL_I2C_Init+0xd4>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	3301      	adds	r3, #1
 80013a2:	e009      	b.n	80013b8 <HAL_I2C_Init+0xe8>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a69      	ldr	r2, [pc, #420]	; (8001554 <HAL_I2C_Init+0x284>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	099b      	lsrs	r3, r3, #6
 80013b6:	3301      	adds	r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	430b      	orrs	r3, r1
 80013be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	495c      	ldr	r1, [pc, #368]	; (8001544 <HAL_I2C_Init+0x274>)
 80013d4:	428b      	cmp	r3, r1
 80013d6:	d819      	bhi.n	800140c <HAL_I2C_Init+0x13c>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e59      	subs	r1, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e6:	1c59      	adds	r1, r3, #1
 80013e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013ec:	400b      	ands	r3, r1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00a      	beq.n	8001408 <HAL_I2C_Init+0x138>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e59      	subs	r1, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001406:	e051      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 8001408:	2304      	movs	r3, #4
 800140a:	e04f      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_I2C_Init+0x168>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e58      	subs	r0, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	440b      	add	r3, r1
 8001422:	fbb0 f3f3 	udiv	r3, r0, r3
 8001426:	3301      	adds	r3, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf0c      	ite	eq
 8001430:	2301      	moveq	r3, #1
 8001432:	2300      	movne	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e012      	b.n	800145e <HAL_I2C_Init+0x18e>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e58      	subs	r0, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	0099      	lsls	r1, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	fbb0 f3f3 	udiv	r3, r0, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Init+0x196>
 8001462:	2301      	movs	r3, #1
 8001464:	e022      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10e      	bne.n	800148c <HAL_I2C_Init+0x1bc>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1e58      	subs	r0, r3, #1
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6859      	ldr	r1, [r3, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	440b      	add	r3, r1
 800147c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001480:	3301      	adds	r3, #1
 8001482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	e00f      	b.n	80014ac <HAL_I2C_Init+0x1dc>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e58      	subs	r0, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	0099      	lsls	r1, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a2:	3301      	adds	r3, #1
 80014a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	6809      	ldr	r1, [r1, #0]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69da      	ldr	r2, [r3, #28]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6911      	ldr	r1, [r2, #16]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68d2      	ldr	r2, [r2, #12]
 80014e6:	4311      	orrs	r1, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	000186a0 	.word	0x000186a0
 8001548:	001e847f 	.word	0x001e847f
 800154c:	003d08ff 	.word	0x003d08ff
 8001550:	431bde83 	.word	0x431bde83
 8001554:	10624dd3 	.word	0x10624dd3

08001558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	460b      	mov	r3, r1
 8001566:	817b      	strh	r3, [r7, #10]
 8001568:	4613      	mov	r3, r2
 800156a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fbec 	bl	8000d48 <HAL_GetTick>
 8001570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	f040 80e0 	bne.w	8001740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2319      	movs	r3, #25
 8001586:	2201      	movs	r2, #1
 8001588:	4970      	ldr	r1, [pc, #448]	; (800174c <HAL_I2C_Master_Transmit+0x1f4>)
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 ff66 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001596:	2302      	movs	r3, #2
 8001598:	e0d3      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <HAL_I2C_Master_Transmit+0x50>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e0cc      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d007      	beq.n	80015ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2221      	movs	r2, #33	; 0x21
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2210      	movs	r2, #16
 80015ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	893a      	ldrh	r2, [r7, #8]
 80015fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29a      	uxth	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_I2C_Master_Transmit+0x1f8>)
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001610:	8979      	ldrh	r1, [r7, #10]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fce8 	bl	8001fec <I2C_MasterRequestWrite>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e08d      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800163c:	e066      	b.n	800170c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	6a39      	ldr	r1, [r7, #32]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 ffe0 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00d      	beq.n	800166a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2b04      	cmp	r3, #4
 8001654:	d107      	bne.n	8001666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06b      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001692:	3b01      	subs	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d11b      	bne.n	80016e0 <HAL_I2C_Master_Transmit+0x188>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d017      	beq.n	80016e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	6a39      	ldr	r1, [r7, #32]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 ffd0 	bl	800268a <I2C_WaitOnBTFFlagUntilTimeout>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00d      	beq.n	800170c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d107      	bne.n	8001708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e01a      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d194      	bne.n	800163e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	00100002 	.word	0x00100002
 8001750:	ffff0000 	.word	0xffff0000

08001754 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	; 0x30
 8001758:	af02      	add	r7, sp, #8
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	461a      	mov	r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	817b      	strh	r3, [r7, #10]
 8001764:	4613      	mov	r3, r2
 8001766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff faee 	bl	8000d48 <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b20      	cmp	r3, #32
 8001778:	f040 820b 	bne.w	8001b92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2319      	movs	r3, #25
 8001782:	2201      	movs	r2, #1
 8001784:	497c      	ldr	r1, [pc, #496]	; (8001978 <HAL_I2C_Master_Receive+0x224>)
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fe68 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001792:	2302      	movs	r3, #2
 8001794:	e1fe      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_I2C_Master_Receive+0x50>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e1f7      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d007      	beq.n	80017ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2222      	movs	r2, #34	; 0x22
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2210      	movs	r2, #16
 80017e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	893a      	ldrh	r2, [r7, #8]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a5c      	ldr	r2, [pc, #368]	; (800197c <HAL_I2C_Master_Receive+0x228>)
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800180c:	8979      	ldrh	r1, [r7, #10]
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fc6c 	bl	80020f0 <I2C_MasterRequestRead>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1b8      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	d113      	bne.n	8001852 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	623b      	str	r3, [r7, #32]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	623b      	str	r3, [r7, #32]
 800183e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	e18c      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	2b01      	cmp	r3, #1
 8001858:	d11b      	bne.n	8001892 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	e16c      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001896:	2b02      	cmp	r3, #2
 8001898:	d11b      	bne.n	80018d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	e14c      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018f8:	e138      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fe:	2b03      	cmp	r3, #3
 8001900:	f200 80f1 	bhi.w	8001ae6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	2b01      	cmp	r3, #1
 800190a:	d123      	bne.n	8001954 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fefb 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e139      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	3b01      	subs	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001952:	e10b      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	2b02      	cmp	r3, #2
 800195a:	d14e      	bne.n	80019fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2200      	movs	r2, #0
 8001964:	4906      	ldr	r1, [pc, #24]	; (8001980 <HAL_I2C_Master_Receive+0x22c>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fd78 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e10e      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
 8001976:	bf00      	nop
 8001978:	00100002 	.word	0x00100002
 800197c:	ffff0000 	.word	0xffff0000
 8001980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019f8:	e0b8      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	2200      	movs	r2, #0
 8001a02:	4966      	ldr	r1, [pc, #408]	; (8001b9c <HAL_I2C_Master_Receive+0x448>)
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 fd29 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0bf      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	494f      	ldr	r1, [pc, #316]	; (8001b9c <HAL_I2C_Master_Receive+0x448>)
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fcfb 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e091      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae4:	e042      	b.n	8001b6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fe0e 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e04c      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b16:	3b01      	subs	r3, #1
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d118      	bne.n	8001b6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f aec2 	bne.w	80018fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b92:	2302      	movs	r3, #2
  }
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	00010004 	.word	0x00010004

08001ba0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bba:	f7ff f8c5 	bl	8000d48 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	f040 8208 	bne.w	8001fde <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2319      	movs	r3, #25
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	497b      	ldr	r1, [pc, #492]	; (8001dc4 <HAL_I2C_Mem_Read+0x224>)
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 fc3f 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001be4:	2302      	movs	r3, #2
 8001be6:	e1fb      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_I2C_Mem_Read+0x56>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e1f4      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d007      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2222      	movs	r2, #34	; 0x22
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a5b      	ldr	r2, [pc, #364]	; (8001dc8 <HAL_I2C_Mem_Read+0x228>)
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c5e:	88f8      	ldrh	r0, [r7, #6]
 8001c60:	893a      	ldrh	r2, [r7, #8]
 8001c62:	8979      	ldrh	r1, [r7, #10]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fb0c 	bl	800228c <I2C_RequestMemoryRead>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1b0      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d113      	bne.n	8001cae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e184      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d11b      	bne.n	8001cee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e164      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d11b      	bne.n	8001d2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	e144      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d44:	e138      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	f200 80f1 	bhi.w	8001f32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d123      	bne.n	8001da0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 fcd5 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e139      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d9e:	e10b      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d14e      	bne.n	8001e46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dae:	2200      	movs	r2, #0
 8001db0:	4906      	ldr	r1, [pc, #24]	; (8001dcc <HAL_I2C_Mem_Read+0x22c>)
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fb52 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d008      	beq.n	8001dd0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e10e      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
 8001dc2:	bf00      	nop
 8001dc4:	00100002 	.word	0x00100002
 8001dc8:	ffff0000 	.word	0xffff0000
 8001dcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e44:	e0b8      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4966      	ldr	r1, [pc, #408]	; (8001fe8 <HAL_I2C_Mem_Read+0x448>)
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f000 fb03 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0bf      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	494f      	ldr	r1, [pc, #316]	; (8001fe8 <HAL_I2C_Mem_Read+0x448>)
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 fad5 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e091      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f30:	e042      	b.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 fbe8 	bl	800270c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e04c      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d118      	bne.n	8001fb8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f aec2 	bne.w	8001d46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	00010004 	.word	0x00010004

08001fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d006      	beq.n	8002016 <I2C_MasterRequestWrite+0x2a>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d003      	beq.n	8002016 <I2C_MasterRequestWrite+0x2a>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e00b      	b.n	8002040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	2b12      	cmp	r3, #18
 800202e:	d107      	bne.n	8002040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800203e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fa05 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002066:	d103      	bne.n	8002070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e035      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	e01b      	b.n	80020c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	11db      	asrs	r3, r3, #7
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f003 0306 	and.w	r3, r3, #6
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f063 030f 	orn	r3, r3, #15
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <I2C_MasterRequestWrite+0xfc>)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 fa2b 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e010      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020be:	897b      	ldrh	r3, [r7, #10]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <I2C_MasterRequestWrite+0x100>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fa1b 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	00010008 	.word	0x00010008
 80020ec:	00010002 	.word	0x00010002

080020f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002114:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d006      	beq.n	800212a <I2C_MasterRequestRead+0x3a>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d003      	beq.n	800212a <I2C_MasterRequestRead+0x3a>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002128:	d108      	bne.n	800213c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e00b      	b.n	8002154 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	2b11      	cmp	r3, #17
 8002142:	d107      	bne.n	8002154 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f97b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d103      	bne.n	8002184 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e079      	b.n	800227c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002190:	d108      	bne.n	80021a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002192:	897b      	ldrh	r3, [r7, #10]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	e05f      	b.n	8002264 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021a4:	897b      	ldrh	r3, [r7, #10]
 80021a6:	11db      	asrs	r3, r3, #7
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f003 0306 	and.w	r3, r3, #6
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f063 030f 	orn	r3, r3, #15
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4930      	ldr	r1, [pc, #192]	; (8002284 <I2C_MasterRequestRead+0x194>)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9a1 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e054      	b.n	800227c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4929      	ldr	r1, [pc, #164]	; (8002288 <I2C_MasterRequestRead+0x198>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f991 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e044      	b.n	800227c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f919 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223e:	d103      	bne.n	8002248 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e017      	b.n	800227c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0306 	and.w	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 030e 	orn	r3, r3, #14
 800225c:	b2da      	uxtb	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4907      	ldr	r1, [pc, #28]	; (8002288 <I2C_MasterRequestRead+0x198>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f94d 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	00010008 	.word	0x00010008
 8002288:	00010002 	.word	0x00010002

0800228c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8c2 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ec:	d103      	bne.n	80022f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0aa      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	4952      	ldr	r1, [pc, #328]	; (8002458 <I2C_RequestMemoryRead+0x1cc>)
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f8fa 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e097      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6a39      	ldr	r1, [r7, #32]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f964 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b04      	cmp	r3, #4
 800234c:	d107      	bne.n	800235e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e076      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e021      	b.n	80023b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002374:	893b      	ldrh	r3, [r7, #8]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f93e 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00d      	beq.n	80023ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	2b04      	cmp	r3, #4
 8002398:	d107      	bne.n	80023aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e050      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023ae:	893b      	ldrh	r3, [r7, #8]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	6a39      	ldr	r1, [r7, #32]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f923 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e035      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f82b 	bl	800245c <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241a:	d103      	bne.n	8002424 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e013      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002428:	897b      	ldrh	r3, [r7, #10]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	6a3a      	ldr	r2, [r7, #32]
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <I2C_RequestMemoryRead+0x1cc>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f863 	bl	800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00010002 	.word	0x00010002

0800245c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800246c:	e025      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002474:	d021      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002476:	f7fe fc67 	bl	8000d48 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e023      	b.n	8002502 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0c1b      	lsrs	r3, r3, #16
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d10d      	bne.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4013      	ands	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	e00c      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d0b6      	beq.n	800246e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002518:	e051      	b.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002528:	d123      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002542:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f043 0204 	orr.w	r2, r3, #4
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e046      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d021      	beq.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7fe fbe5 	bl	8000d48 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e020      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10c      	bne.n	80025e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e00b      	b.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d18d      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	e02d      	b.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8ce 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e02d      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800262c:	d021      	beq.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7fe fb8b 	bl	8000d48 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d116      	bne.n	8002672 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0220 	orr.w	r2, r3, #32
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e007      	b.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d1ca      	bne.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002696:	e02d      	b.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f88d 	bl	80027b8 <I2C_IsAcknowledgeFailed>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e02d      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ae:	d021      	beq.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026b0:	f7fe fb4a 	bl	8000d48 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d302      	bcc.n	80026c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e007      	b.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d1ca      	bne.n	8002698 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002718:	e042      	b.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b10      	cmp	r3, #16
 8002726:	d119      	bne.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0210 	mvn.w	r2, #16
 8002730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e029      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275c:	f7fe faf4 	bl	8000d48 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d302      	bcc.n	8002772 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e007      	b.n	80027b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d1b5      	bne.n	800271a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d11b      	bne.n	8002808 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0cc      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d90c      	bls.n	8002854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283a:	4b65      	ldr	r3, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800288e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d119      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e6:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e067      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f6:	4b37      	ldr	r3, [pc, #220]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 0203 	bic.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4934      	ldr	r1, [pc, #208]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002908:	f7fe fa1e 	bl	8000d48 <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fa1a 	bl	8000d48 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	; 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e04f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 020c 	and.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	429a      	cmp	r2, r3
 8002936:	d1eb      	bne.n	8002910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002938:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d20c      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f855 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f97e 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023c00 	.word	0x40023c00
 80029d4:	40023800 	.word	0x40023800
 80029d8:	08004528 	.word	0x08004528
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a00:	f7ff fff0 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08004538 	.word	0x08004538

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a28:	f7ff ffdc 	bl	80029e4 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40023800 	.word	0x40023800
 8002a48:	08004538 	.word	0x08004538

08002a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a50:	b0ae      	sub	sp, #184	; 0xb8
 8002a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a72:	4bcb      	ldr	r3, [pc, #812]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	f200 8206 	bhi.w	8002e8c <HAL_RCC_GetSysClockFreq+0x440>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002e8d 	.word	0x08002e8d
 8002a90:	08002e8d 	.word	0x08002e8d
 8002a94:	08002e8d 	.word	0x08002e8d
 8002a98:	08002ac5 	.word	0x08002ac5
 8002a9c:	08002e8d 	.word	0x08002e8d
 8002aa0:	08002e8d 	.word	0x08002e8d
 8002aa4:	08002e8d 	.word	0x08002e8d
 8002aa8:	08002acd 	.word	0x08002acd
 8002aac:	08002e8d 	.word	0x08002e8d
 8002ab0:	08002e8d 	.word	0x08002e8d
 8002ab4:	08002e8d 	.word	0x08002e8d
 8002ab8:	08002cbd 	.word	0x08002cbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4bb9      	ldr	r3, [pc, #740]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ac2:	e1e7      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4bb8      	ldr	r3, [pc, #736]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aca:	e1e3      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4bb4      	ldr	r3, [pc, #720]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad8:	4bb1      	ldr	r3, [pc, #708]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d071      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae4:	4bae      	ldr	r3, [pc, #696]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002af0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b0a:	4622      	mov	r2, r4
 8002b0c:	462b      	mov	r3, r5
 8002b0e:	f04f 0000 	mov.w	r0, #0
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	0159      	lsls	r1, r3, #5
 8002b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1c:	0150      	lsls	r0, r2, #5
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4621      	mov	r1, r4
 8002b24:	1a51      	subs	r1, r2, r1
 8002b26:	6439      	str	r1, [r7, #64]	; 0x40
 8002b28:	4629      	mov	r1, r5
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	018b      	lsls	r3, r1, #6
 8002b40:	4641      	mov	r1, r8
 8002b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b46:	4641      	mov	r1, r8
 8002b48:	018a      	lsls	r2, r1, #6
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	1a51      	subs	r1, r2, r1
 8002b4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b50:	4649      	mov	r1, r9
 8002b52:	eb63 0301 	sbc.w	r3, r3, r1
 8002b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b64:	4649      	mov	r1, r9
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4641      	mov	r1, r8
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4641      	mov	r1, r8
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4622      	mov	r2, r4
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7e:	462b      	mov	r3, r5
 8002b80:	460a      	mov	r2, r1
 8002b82:	eb42 0303 	adc.w	r3, r2, r3
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b94:	4629      	mov	r1, r5
 8002b96:	024b      	lsls	r3, r1, #9
 8002b98:	4621      	mov	r1, r4
 8002b9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	024a      	lsls	r2, r1, #9
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bb8:	f7fd fb82 	bl	80002c0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc6:	e067      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc8:	4b75      	ldr	r3, [pc, #468]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bd4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002be2:	2300      	movs	r3, #0
 8002be4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bea:	4622      	mov	r2, r4
 8002bec:	462b      	mov	r3, r5
 8002bee:	f04f 0000 	mov.w	r0, #0
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	0159      	lsls	r1, r3, #5
 8002bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfc:	0150      	lsls	r0, r2, #5
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4621      	mov	r1, r4
 8002c04:	1a51      	subs	r1, r2, r1
 8002c06:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c08:	4629      	mov	r1, r5
 8002c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	018b      	lsls	r3, r1, #6
 8002c20:	4641      	mov	r1, r8
 8002c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c26:	4641      	mov	r1, r8
 8002c28:	018a      	lsls	r2, r1, #6
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c30:	4649      	mov	r1, r9
 8002c32:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4a:	4692      	mov	sl, r2
 8002c4c:	469b      	mov	fp, r3
 8002c4e:	4623      	mov	r3, r4
 8002c50:	eb1a 0303 	adds.w	r3, sl, r3
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	462b      	mov	r3, r5
 8002c58:	eb4b 0303 	adc.w	r3, fp, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	028b      	lsls	r3, r1, #10
 8002c6e:	4621      	mov	r1, r4
 8002c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c74:	4621      	mov	r1, r4
 8002c76:	028a      	lsls	r2, r1, #10
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c80:	2200      	movs	r2, #0
 8002c82:	673b      	str	r3, [r7, #112]	; 0x70
 8002c84:	677a      	str	r2, [r7, #116]	; 0x74
 8002c86:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c8a:	f7fd fb19 	bl	80002c0 <__aeabi_uldivmod>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4613      	mov	r3, r2
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c98:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cba:	e0eb      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d06b      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd4:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	2200      	movs	r2, #0
 8002cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ce8:	2300      	movs	r3, #0
 8002cea:	667b      	str	r3, [r7, #100]	; 0x64
 8002cec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	462b      	mov	r3, r5
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	0159      	lsls	r1, r3, #5
 8002cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d02:	0150      	lsls	r0, r2, #5
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4621      	mov	r1, r4
 8002d0a:	1a51      	subs	r1, r2, r1
 8002d0c:	61b9      	str	r1, [r7, #24]
 8002d0e:	4629      	mov	r1, r5
 8002d10:	eb63 0301 	sbc.w	r3, r3, r1
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d22:	4659      	mov	r1, fp
 8002d24:	018b      	lsls	r3, r1, #6
 8002d26:	4651      	mov	r1, sl
 8002d28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d2c:	4651      	mov	r1, sl
 8002d2e:	018a      	lsls	r2, r1, #6
 8002d30:	4651      	mov	r1, sl
 8002d32:	ebb2 0801 	subs.w	r8, r2, r1
 8002d36:	4659      	mov	r1, fp
 8002d38:	eb63 0901 	sbc.w	r9, r3, r1
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d50:	4690      	mov	r8, r2
 8002d52:	4699      	mov	r9, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	eb18 0303 	adds.w	r3, r8, r3
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	eb49 0303 	adc.w	r3, r9, r3
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d70:	4629      	mov	r1, r5
 8002d72:	024b      	lsls	r3, r1, #9
 8002d74:	4621      	mov	r1, r4
 8002d76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	024a      	lsls	r2, r1, #9
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d86:	2200      	movs	r2, #0
 8002d88:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d8a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d90:	f7fd fa96 	bl	80002c0 <__aeabi_uldivmod>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d9e:	e065      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x420>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	2200      	movs	r2, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	4611      	mov	r1, r2
 8002db8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dc6:	4642      	mov	r2, r8
 8002dc8:	464b      	mov	r3, r9
 8002dca:	f04f 0000 	mov.w	r0, #0
 8002dce:	f04f 0100 	mov.w	r1, #0
 8002dd2:	0159      	lsls	r1, r3, #5
 8002dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd8:	0150      	lsls	r0, r2, #5
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4641      	mov	r1, r8
 8002de0:	1a51      	subs	r1, r2, r1
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	4649      	mov	r1, r9
 8002de6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002df8:	4659      	mov	r1, fp
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e02:	4651      	mov	r1, sl
 8002e04:	018a      	lsls	r2, r1, #6
 8002e06:	4651      	mov	r1, sl
 8002e08:	1a54      	subs	r4, r2, r1
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	eb63 0501 	sbc.w	r5, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	4643      	mov	r3, r8
 8002e26:	18e3      	adds	r3, r4, r3
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	028b      	lsls	r3, r1, #10
 8002e42:	4621      	mov	r1, r4
 8002e44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e48:	4621      	mov	r1, r4
 8002e4a:	028a      	lsls	r2, r1, #10
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e54:	2200      	movs	r2, #0
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e5a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e5e:	f7fd fa2f 	bl	80002c0 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4613      	mov	r3, r2
 8002e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0f1b      	lsrs	r3, r3, #28
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e8a:	e003      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	37b8      	adds	r7, #184	; 0xb8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	00f42400 	.word	0x00f42400

08002eac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e28d      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8083 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ecc:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d019      	beq.n	8002f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ed8:	4b91      	ldr	r3, [pc, #580]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee4:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d00c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x124>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e25a      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x90>
 8002f2e:	4b7c      	ldr	r3, [pc, #496]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xcc>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0xb4>
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a72      	ldr	r2, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xcc>
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6e      	ldr	r2, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd fee2 	bl	8000d48 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fd fede 	bl	8000d48 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e21f      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xdc>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fece 	bl	8000d48 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fd feca 	bl	8000d48 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e20b      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b57      	ldr	r3, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x104>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d06f      	beq.n	80030be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d017      	beq.n	800301a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fea:	4b4d      	ldr	r3, [pc, #308]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300a:	2b0c      	cmp	r3, #12
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x186>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1d3      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b34      	ldr	r3, [pc, #208]	; (8003124 <HAL_RCC_OscConfig+0x278>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fe77 	bl	8000d48 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd fe73 	bl	8000d48 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1b4      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4925      	ldr	r1, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x278>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd fe56 	bl	8000d48 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fd fe52 	bl	8000d48 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e193      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d036      	beq.n	8003138 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fd fe36 	bl	8000d48 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fd fe32 	bl	8000d48 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e173      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x234>
 80030fe:	e01b      	b.n	8003138 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x27c>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003106:	f7fd fe1f 	bl	8000d48 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e00e      	b.n	800312c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fd fe1b 	bl	8000d48 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d907      	bls.n	800312c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e15c      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
 8003120:	40023800 	.word	0x40023800
 8003124:	42470000 	.word	0x42470000
 8003128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b8a      	ldr	r3, [pc, #552]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ea      	bne.n	800310e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8097 	beq.w	8003274 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b79      	ldr	r3, [pc, #484]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d118      	bne.n	80031b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fd fddb 	bl	8000d48 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003196:	f7fd fdd7 	bl	8000d48 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e118      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	4b6c      	ldr	r3, [pc, #432]	; (800335c <HAL_RCC_OscConfig+0x4b0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x31e>
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c0:	4a65      	ldr	r2, [pc, #404]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	; 0x70
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x358>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x340>
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	4a60      	ldr	r2, [pc, #384]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	f043 0304 	orr.w	r3, r3, #4
 80031dc:	6713      	str	r3, [r2, #112]	; 0x70
 80031de:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a5d      	ldr	r2, [pc, #372]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0x358>
 80031ec:	4b5a      	ldr	r3, [pc, #360]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	4a59      	ldr	r2, [pc, #356]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6713      	str	r3, [r2, #112]	; 0x70
 80031f8:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a56      	ldr	r2, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	f023 0304 	bic.w	r3, r3, #4
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd fd9c 	bl	8000d48 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd fd98 	bl	8000d48 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0d7      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0ee      	beq.n	8003214 <HAL_RCC_OscConfig+0x368>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd fd86 	bl	8000d48 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fd fd82 	bl	8000d48 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0c1      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ee      	bne.n	8003240 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	4a3a      	ldr	r2, [pc, #232]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80ad 	beq.w	80033d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b08      	cmp	r3, #8
 8003288:	d060      	beq.n	800334c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d145      	bne.n	800331e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd fd56 	bl	8000d48 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd fd52 	bl	8000d48 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e093      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	019b      	lsls	r3, r3, #6
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	3b01      	subs	r3, #1
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	491b      	ldr	r1, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fd27 	bl	8000d48 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fd fd23 	bl	8000d48 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e064      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x452>
 800331c:	e05c      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x4b4>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fd10 	bl	8000d48 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7fd fd0c 	bl	8000d48 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04d      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x4ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x480>
 800334a:	e045      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e040      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
 8003358:	40023800 	.word	0x40023800
 800335c:	40007000 	.word	0x40007000
 8003360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCC_OscConfig+0x538>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d129      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d122      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800339c:	4293      	cmp	r3, r2
 800339e:	d119      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	085b      	lsrs	r3, r3, #1
 80033ac:	3b01      	subs	r3, #1
 80033ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d10f      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e03f      	b.n	800347a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fb50 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800342a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f929 	bl	8003684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b08a      	sub	sp, #40	; 0x28
 8003486:	af02      	add	r7, sp, #8
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d17c      	bne.n	800359c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_UART_Transmit+0x2c>
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e075      	b.n	800359e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Transmit+0x3e>
 80034bc:	2302      	movs	r3, #2
 80034be:	e06e      	b.n	800359e <HAL_UART_Transmit+0x11c>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2221      	movs	r2, #33	; 0x21
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034d6:	f7fd fc37 	bl	8000d48 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d108      	bne.n	8003504 <HAL_UART_Transmit+0x82>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d104      	bne.n	8003504 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	e003      	b.n	800350c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003514:	e02a      	b.n	800356c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f840 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e036      	b.n	800359e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003544:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	3302      	adds	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	e007      	b.n	800355e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	3301      	adds	r3, #1
 800355c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1cf      	bne.n	8003516 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f810 	bl	80035a6 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e006      	b.n	800359e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b090      	sub	sp, #64	; 0x40
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	e050      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035be:	d04c      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c6:	f7fd fbbf 	bl	8000d48 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d241      	bcs.n	800365a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f6:	637a      	str	r2, [r7, #52]	; 0x34
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e5      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	613b      	str	r3, [r7, #16]
   return(result);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362a:	623a      	str	r2, [r7, #32]
 800362c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	61bb      	str	r3, [r7, #24]
   return(result);
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00f      	b.n	800367a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4013      	ands	r3, r2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	bf0c      	ite	eq
 800366a:	2301      	moveq	r3, #1
 800366c:	2300      	movne	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	429a      	cmp	r2, r3
 8003676:	d09f      	beq.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3740      	adds	r7, #64	; 0x40
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
	...

08003684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b0c0      	sub	sp, #256	; 0x100
 800368a:	af00      	add	r7, sp, #0
 800368c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	ea40 0301 	orr.w	r3, r0, r1
 80036ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036dc:	f021 010c 	bic.w	r1, r1, #12
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036ea:	430b      	orrs	r3, r1
 80036ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	6999      	ldr	r1, [r3, #24]
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	ea40 0301 	orr.w	r3, r0, r1
 800370a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <UART_SetConfig+0x2cc>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d005      	beq.n	8003724 <UART_SetConfig+0xa0>
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <UART_SetConfig+0x2d0>)
 8003720:	429a      	cmp	r2, r3
 8003722:	d104      	bne.n	800372e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003724:	f7ff f97e 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8003728:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800372c:	e003      	b.n	8003736 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7ff f965 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8003732:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	f040 810c 	bne.w	800395c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800374e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003752:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	1891      	adds	r1, r2, r2
 800375c:	65b9      	str	r1, [r7, #88]	; 0x58
 800375e:	415b      	adcs	r3, r3
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003766:	4621      	mov	r1, r4
 8003768:	eb12 0801 	adds.w	r8, r2, r1
 800376c:	4629      	mov	r1, r5
 800376e:	eb43 0901 	adc.w	r9, r3, r1
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800377e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003786:	4690      	mov	r8, r2
 8003788:	4699      	mov	r9, r3
 800378a:	4623      	mov	r3, r4
 800378c:	eb18 0303 	adds.w	r3, r8, r3
 8003790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003794:	462b      	mov	r3, r5
 8003796:	eb49 0303 	adc.w	r3, r9, r3
 800379a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800379e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037b2:	460b      	mov	r3, r1
 80037b4:	18db      	adds	r3, r3, r3
 80037b6:	653b      	str	r3, [r7, #80]	; 0x50
 80037b8:	4613      	mov	r3, r2
 80037ba:	eb42 0303 	adc.w	r3, r2, r3
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
 80037c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037c8:	f7fc fd7a 	bl	80002c0 <__aeabi_uldivmod>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <UART_SetConfig+0x2d4>)
 80037d2:	fba3 2302 	umull	r2, r3, r3, r2
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	011c      	lsls	r4, r3, #4
 80037da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037ec:	4642      	mov	r2, r8
 80037ee:	464b      	mov	r3, r9
 80037f0:	1891      	adds	r1, r2, r2
 80037f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037f4:	415b      	adcs	r3, r3
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037fc:	4641      	mov	r1, r8
 80037fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003802:	4649      	mov	r1, r9
 8003804:	eb43 0b01 	adc.w	fp, r3, r1
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003814:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800381c:	4692      	mov	sl, r2
 800381e:	469b      	mov	fp, r3
 8003820:	4643      	mov	r3, r8
 8003822:	eb1a 0303 	adds.w	r3, sl, r3
 8003826:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800382a:	464b      	mov	r3, r9
 800382c:	eb4b 0303 	adc.w	r3, fp, r3
 8003830:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003840:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003844:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003848:	460b      	mov	r3, r1
 800384a:	18db      	adds	r3, r3, r3
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
 800384e:	4613      	mov	r3, r2
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
 8003856:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800385a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800385e:	f7fc fd2f 	bl	80002c0 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4611      	mov	r1, r2
 8003868:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <UART_SetConfig+0x2d4>)
 800386a:	fba3 2301 	umull	r2, r3, r3, r1
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2264      	movs	r2, #100	; 0x64
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	1acb      	subs	r3, r1, r3
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800387e:	4b36      	ldr	r3, [pc, #216]	; (8003958 <UART_SetConfig+0x2d4>)
 8003880:	fba3 2302 	umull	r2, r3, r3, r2
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800388c:	441c      	add	r4, r3
 800388e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003898:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800389c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	1891      	adds	r1, r2, r2
 80038a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038a8:	415b      	adcs	r3, r3
 80038aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038b0:	4641      	mov	r1, r8
 80038b2:	1851      	adds	r1, r2, r1
 80038b4:	6339      	str	r1, [r7, #48]	; 0x30
 80038b6:	4649      	mov	r1, r9
 80038b8:	414b      	adcs	r3, r1
 80038ba:	637b      	str	r3, [r7, #52]	; 0x34
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038c8:	4659      	mov	r1, fp
 80038ca:	00cb      	lsls	r3, r1, #3
 80038cc:	4651      	mov	r1, sl
 80038ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038d2:	4651      	mov	r1, sl
 80038d4:	00ca      	lsls	r2, r1, #3
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	4642      	mov	r2, r8
 80038de:	189b      	adds	r3, r3, r2
 80038e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038e4:	464b      	mov	r3, r9
 80038e6:	460a      	mov	r2, r1
 80038e8:	eb42 0303 	adc.w	r3, r2, r3
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003900:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003904:	460b      	mov	r3, r1
 8003906:	18db      	adds	r3, r3, r3
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
 800390a:	4613      	mov	r3, r2
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003916:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800391a:	f7fc fcd1 	bl	80002c0 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <UART_SetConfig+0x2d4>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a08      	ldr	r2, [pc, #32]	; (8003958 <UART_SetConfig+0x2d4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4422      	add	r2, r4
 800394a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800394c:	e105      	b.n	8003b5a <UART_SetConfig+0x4d6>
 800394e:	bf00      	nop
 8003950:	40011000 	.word	0x40011000
 8003954:	40011400 	.word	0x40011400
 8003958:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003966:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800396a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800396e:	4642      	mov	r2, r8
 8003970:	464b      	mov	r3, r9
 8003972:	1891      	adds	r1, r2, r2
 8003974:	6239      	str	r1, [r7, #32]
 8003976:	415b      	adcs	r3, r3
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800397e:	4641      	mov	r1, r8
 8003980:	1854      	adds	r4, r2, r1
 8003982:	4649      	mov	r1, r9
 8003984:	eb43 0501 	adc.w	r5, r3, r1
 8003988:	f04f 0200 	mov.w	r2, #0
 800398c:	f04f 0300 	mov.w	r3, #0
 8003990:	00eb      	lsls	r3, r5, #3
 8003992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003996:	00e2      	lsls	r2, r4, #3
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	4643      	mov	r3, r8
 800399e:	18e3      	adds	r3, r4, r3
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039a4:	464b      	mov	r3, r9
 80039a6:	eb45 0303 	adc.w	r3, r5, r3
 80039aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039ca:	4629      	mov	r1, r5
 80039cc:	008b      	lsls	r3, r1, #2
 80039ce:	4621      	mov	r1, r4
 80039d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d4:	4621      	mov	r1, r4
 80039d6:	008a      	lsls	r2, r1, #2
 80039d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039dc:	f7fc fc70 	bl	80002c0 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <UART_SetConfig+0x4e4>)
 80039e6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	011c      	lsls	r4, r3, #4
 80039ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a00:	4642      	mov	r2, r8
 8003a02:	464b      	mov	r3, r9
 8003a04:	1891      	adds	r1, r2, r2
 8003a06:	61b9      	str	r1, [r7, #24]
 8003a08:	415b      	adcs	r3, r3
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a10:	4641      	mov	r1, r8
 8003a12:	1851      	adds	r1, r2, r1
 8003a14:	6139      	str	r1, [r7, #16]
 8003a16:	4649      	mov	r1, r9
 8003a18:	414b      	adcs	r3, r1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a28:	4659      	mov	r1, fp
 8003a2a:	00cb      	lsls	r3, r1, #3
 8003a2c:	4651      	mov	r1, sl
 8003a2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a32:	4651      	mov	r1, sl
 8003a34:	00ca      	lsls	r2, r1, #3
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a44:	464b      	mov	r3, r9
 8003a46:	460a      	mov	r2, r1
 8003a48:	eb42 0303 	adc.w	r3, r2, r3
 8003a4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a68:	4649      	mov	r1, r9
 8003a6a:	008b      	lsls	r3, r1, #2
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a72:	4641      	mov	r1, r8
 8003a74:	008a      	lsls	r2, r1, #2
 8003a76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a7a:	f7fc fc21 	bl	80002c0 <__aeabi_uldivmod>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003a84:	fba3 1302 	umull	r1, r3, r3, r2
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	2164      	movs	r1, #100	; 0x64
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	3332      	adds	r3, #50	; 0x32
 8003a96:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa2:	441c      	add	r4, r3
 8003aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8003aac:	677a      	str	r2, [r7, #116]	; 0x74
 8003aae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	415b      	adcs	r3, r3
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	1851      	adds	r1, r2, r1
 8003ac6:	6039      	str	r1, [r7, #0]
 8003ac8:	4649      	mov	r1, r9
 8003aca:	414b      	adcs	r3, r1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ada:	4659      	mov	r1, fp
 8003adc:	00cb      	lsls	r3, r1, #3
 8003ade:	4651      	mov	r1, sl
 8003ae0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae4:	4651      	mov	r1, sl
 8003ae6:	00ca      	lsls	r2, r1, #3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	4603      	mov	r3, r0
 8003aee:	4642      	mov	r2, r8
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003af4:	464b      	mov	r3, r9
 8003af6:	460a      	mov	r2, r1
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	663b      	str	r3, [r7, #96]	; 0x60
 8003b08:	667a      	str	r2, [r7, #100]	; 0x64
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b16:	4649      	mov	r1, r9
 8003b18:	008b      	lsls	r3, r1, #2
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b20:	4641      	mov	r1, r8
 8003b22:	008a      	lsls	r2, r1, #2
 8003b24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b28:	f7fc fbca 	bl	80002c0 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <UART_SetConfig+0x4e4>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4422      	add	r2, r4
 8003b58:	609a      	str	r2, [r3, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	51eb851f 	.word	0x51eb851f

08003b6c <__errno>:
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <__errno+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	2000000c 	.word	0x2000000c

08003b78 <__libc_init_array>:
 8003b78:	b570      	push	{r4, r5, r6, lr}
 8003b7a:	4d0d      	ldr	r5, [pc, #52]	; (8003bb0 <__libc_init_array+0x38>)
 8003b7c:	4c0d      	ldr	r4, [pc, #52]	; (8003bb4 <__libc_init_array+0x3c>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	2600      	movs	r6, #0
 8003b84:	42a6      	cmp	r6, r4
 8003b86:	d109      	bne.n	8003b9c <__libc_init_array+0x24>
 8003b88:	4d0b      	ldr	r5, [pc, #44]	; (8003bb8 <__libc_init_array+0x40>)
 8003b8a:	4c0c      	ldr	r4, [pc, #48]	; (8003bbc <__libc_init_array+0x44>)
 8003b8c:	f000 fc8e 	bl	80044ac <_init>
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	2600      	movs	r6, #0
 8003b96:	42a6      	cmp	r6, r4
 8003b98:	d105      	bne.n	8003ba6 <__libc_init_array+0x2e>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba0:	4798      	blx	r3
 8003ba2:	3601      	adds	r6, #1
 8003ba4:	e7ee      	b.n	8003b84 <__libc_init_array+0xc>
 8003ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003baa:	4798      	blx	r3
 8003bac:	3601      	adds	r6, #1
 8003bae:	e7f2      	b.n	8003b96 <__libc_init_array+0x1e>
 8003bb0:	0800457c 	.word	0x0800457c
 8003bb4:	0800457c 	.word	0x0800457c
 8003bb8:	0800457c 	.word	0x0800457c
 8003bbc:	08004580 	.word	0x08004580

08003bc0 <memset>:
 8003bc0:	4402      	add	r2, r0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d100      	bne.n	8003bca <memset+0xa>
 8003bc8:	4770      	bx	lr
 8003bca:	f803 1b01 	strb.w	r1, [r3], #1
 8003bce:	e7f9      	b.n	8003bc4 <memset+0x4>

08003bd0 <siprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003be0:	4809      	ldr	r0, [pc, #36]	; (8003c08 <siprintf+0x38>)
 8003be2:	9107      	str	r1, [sp, #28]
 8003be4:	9104      	str	r1, [sp, #16]
 8003be6:	4909      	ldr	r1, [pc, #36]	; (8003c0c <siprintf+0x3c>)
 8003be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	a902      	add	r1, sp, #8
 8003bf4:	f000 f868 	bl	8003cc8 <_svfiprintf_r>
 8003bf8:	9b02      	ldr	r3, [sp, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	b01c      	add	sp, #112	; 0x70
 8003c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c04:	b003      	add	sp, #12
 8003c06:	4770      	bx	lr
 8003c08:	2000000c 	.word	0x2000000c
 8003c0c:	ffff0208 	.word	0xffff0208

08003c10 <__ssputs_r>:
 8003c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c14:	688e      	ldr	r6, [r1, #8]
 8003c16:	429e      	cmp	r6, r3
 8003c18:	4682      	mov	sl, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	461f      	mov	r7, r3
 8003c20:	d838      	bhi.n	8003c94 <__ssputs_r+0x84>
 8003c22:	898a      	ldrh	r2, [r1, #12]
 8003c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c28:	d032      	beq.n	8003c90 <__ssputs_r+0x80>
 8003c2a:	6825      	ldr	r5, [r4, #0]
 8003c2c:	6909      	ldr	r1, [r1, #16]
 8003c2e:	eba5 0901 	sub.w	r9, r5, r1
 8003c32:	6965      	ldr	r5, [r4, #20]
 8003c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	444b      	add	r3, r9
 8003c40:	106d      	asrs	r5, r5, #1
 8003c42:	429d      	cmp	r5, r3
 8003c44:	bf38      	it	cc
 8003c46:	461d      	movcc	r5, r3
 8003c48:	0553      	lsls	r3, r2, #21
 8003c4a:	d531      	bpl.n	8003cb0 <__ssputs_r+0xa0>
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	f000 fb63 	bl	8004318 <_malloc_r>
 8003c52:	4606      	mov	r6, r0
 8003c54:	b950      	cbnz	r0, 8003c6c <__ssputs_r+0x5c>
 8003c56:	230c      	movs	r3, #12
 8003c58:	f8ca 3000 	str.w	r3, [sl]
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6c:	6921      	ldr	r1, [r4, #16]
 8003c6e:	464a      	mov	r2, r9
 8003c70:	f000 fabe 	bl	80041f0 <memcpy>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	6126      	str	r6, [r4, #16]
 8003c82:	6165      	str	r5, [r4, #20]
 8003c84:	444e      	add	r6, r9
 8003c86:	eba5 0509 	sub.w	r5, r5, r9
 8003c8a:	6026      	str	r6, [r4, #0]
 8003c8c:	60a5      	str	r5, [r4, #8]
 8003c8e:	463e      	mov	r6, r7
 8003c90:	42be      	cmp	r6, r7
 8003c92:	d900      	bls.n	8003c96 <__ssputs_r+0x86>
 8003c94:	463e      	mov	r6, r7
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	4632      	mov	r2, r6
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	f000 fab6 	bl	800420c <memmove>
 8003ca0:	68a3      	ldr	r3, [r4, #8]
 8003ca2:	1b9b      	subs	r3, r3, r6
 8003ca4:	60a3      	str	r3, [r4, #8]
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	4433      	add	r3, r6
 8003caa:	6023      	str	r3, [r4, #0]
 8003cac:	2000      	movs	r0, #0
 8003cae:	e7db      	b.n	8003c68 <__ssputs_r+0x58>
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	f000 fba5 	bl	8004400 <_realloc_r>
 8003cb6:	4606      	mov	r6, r0
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d1e1      	bne.n	8003c80 <__ssputs_r+0x70>
 8003cbc:	6921      	ldr	r1, [r4, #16]
 8003cbe:	4650      	mov	r0, sl
 8003cc0:	f000 fabe 	bl	8004240 <_free_r>
 8003cc4:	e7c7      	b.n	8003c56 <__ssputs_r+0x46>
	...

08003cc8 <_svfiprintf_r>:
 8003cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	4698      	mov	r8, r3
 8003cce:	898b      	ldrh	r3, [r1, #12]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	b09d      	sub	sp, #116	; 0x74
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4614      	mov	r4, r2
 8003cda:	d50e      	bpl.n	8003cfa <_svfiprintf_r+0x32>
 8003cdc:	690b      	ldr	r3, [r1, #16]
 8003cde:	b963      	cbnz	r3, 8003cfa <_svfiprintf_r+0x32>
 8003ce0:	2140      	movs	r1, #64	; 0x40
 8003ce2:	f000 fb19 	bl	8004318 <_malloc_r>
 8003ce6:	6028      	str	r0, [r5, #0]
 8003ce8:	6128      	str	r0, [r5, #16]
 8003cea:	b920      	cbnz	r0, 8003cf6 <_svfiprintf_r+0x2e>
 8003cec:	230c      	movs	r3, #12
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf4:	e0d1      	b.n	8003e9a <_svfiprintf_r+0x1d2>
 8003cf6:	2340      	movs	r3, #64	; 0x40
 8003cf8:	616b      	str	r3, [r5, #20]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfe:	2320      	movs	r3, #32
 8003d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d08:	2330      	movs	r3, #48	; 0x30
 8003d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003eb4 <_svfiprintf_r+0x1ec>
 8003d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d12:	f04f 0901 	mov.w	r9, #1
 8003d16:	4623      	mov	r3, r4
 8003d18:	469a      	mov	sl, r3
 8003d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d1e:	b10a      	cbz	r2, 8003d24 <_svfiprintf_r+0x5c>
 8003d20:	2a25      	cmp	r2, #37	; 0x25
 8003d22:	d1f9      	bne.n	8003d18 <_svfiprintf_r+0x50>
 8003d24:	ebba 0b04 	subs.w	fp, sl, r4
 8003d28:	d00b      	beq.n	8003d42 <_svfiprintf_r+0x7a>
 8003d2a:	465b      	mov	r3, fp
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7ff ff6d 	bl	8003c10 <__ssputs_r>
 8003d36:	3001      	adds	r0, #1
 8003d38:	f000 80aa 	beq.w	8003e90 <_svfiprintf_r+0x1c8>
 8003d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d3e:	445a      	add	r2, fp
 8003d40:	9209      	str	r2, [sp, #36]	; 0x24
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80a2 	beq.w	8003e90 <_svfiprintf_r+0x1c8>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d56:	f10a 0a01 	add.w	sl, sl, #1
 8003d5a:	9304      	str	r3, [sp, #16]
 8003d5c:	9307      	str	r3, [sp, #28]
 8003d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d62:	931a      	str	r3, [sp, #104]	; 0x68
 8003d64:	4654      	mov	r4, sl
 8003d66:	2205      	movs	r2, #5
 8003d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6c:	4851      	ldr	r0, [pc, #324]	; (8003eb4 <_svfiprintf_r+0x1ec>)
 8003d6e:	f7fc fa57 	bl	8000220 <memchr>
 8003d72:	9a04      	ldr	r2, [sp, #16]
 8003d74:	b9d8      	cbnz	r0, 8003dae <_svfiprintf_r+0xe6>
 8003d76:	06d0      	lsls	r0, r2, #27
 8003d78:	bf44      	itt	mi
 8003d7a:	2320      	movmi	r3, #32
 8003d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d80:	0711      	lsls	r1, r2, #28
 8003d82:	bf44      	itt	mi
 8003d84:	232b      	movmi	r3, #43	; 0x2b
 8003d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003d90:	d015      	beq.n	8003dbe <_svfiprintf_r+0xf6>
 8003d92:	9a07      	ldr	r2, [sp, #28]
 8003d94:	4654      	mov	r4, sl
 8003d96:	2000      	movs	r0, #0
 8003d98:	f04f 0c0a 	mov.w	ip, #10
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da2:	3b30      	subs	r3, #48	; 0x30
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d94e      	bls.n	8003e46 <_svfiprintf_r+0x17e>
 8003da8:	b1b0      	cbz	r0, 8003dd8 <_svfiprintf_r+0x110>
 8003daa:	9207      	str	r2, [sp, #28]
 8003dac:	e014      	b.n	8003dd8 <_svfiprintf_r+0x110>
 8003dae:	eba0 0308 	sub.w	r3, r0, r8
 8003db2:	fa09 f303 	lsl.w	r3, r9, r3
 8003db6:	4313      	orrs	r3, r2
 8003db8:	9304      	str	r3, [sp, #16]
 8003dba:	46a2      	mov	sl, r4
 8003dbc:	e7d2      	b.n	8003d64 <_svfiprintf_r+0x9c>
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	9103      	str	r1, [sp, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bfbb      	ittet	lt
 8003dca:	425b      	neglt	r3, r3
 8003dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8003dd0:	9307      	strge	r3, [sp, #28]
 8003dd2:	9307      	strlt	r3, [sp, #28]
 8003dd4:	bfb8      	it	lt
 8003dd6:	9204      	strlt	r2, [sp, #16]
 8003dd8:	7823      	ldrb	r3, [r4, #0]
 8003dda:	2b2e      	cmp	r3, #46	; 0x2e
 8003ddc:	d10c      	bne.n	8003df8 <_svfiprintf_r+0x130>
 8003dde:	7863      	ldrb	r3, [r4, #1]
 8003de0:	2b2a      	cmp	r3, #42	; 0x2a
 8003de2:	d135      	bne.n	8003e50 <_svfiprintf_r+0x188>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	9203      	str	r2, [sp, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bfb8      	it	lt
 8003df0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003df4:	3402      	adds	r4, #2
 8003df6:	9305      	str	r3, [sp, #20]
 8003df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ec4 <_svfiprintf_r+0x1fc>
 8003dfc:	7821      	ldrb	r1, [r4, #0]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	4650      	mov	r0, sl
 8003e02:	f7fc fa0d 	bl	8000220 <memchr>
 8003e06:	b140      	cbz	r0, 8003e1a <_svfiprintf_r+0x152>
 8003e08:	2340      	movs	r3, #64	; 0x40
 8003e0a:	eba0 000a 	sub.w	r0, r0, sl
 8003e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e12:	9b04      	ldr	r3, [sp, #16]
 8003e14:	4303      	orrs	r3, r0
 8003e16:	3401      	adds	r4, #1
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <_svfiprintf_r+0x1f0>)
 8003e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e24:	2206      	movs	r2, #6
 8003e26:	f7fc f9fb 	bl	8000220 <memchr>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d038      	beq.n	8003ea0 <_svfiprintf_r+0x1d8>
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <_svfiprintf_r+0x1f4>)
 8003e30:	bb1b      	cbnz	r3, 8003e7a <_svfiprintf_r+0x1b2>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	3307      	adds	r3, #7
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	9303      	str	r3, [sp, #12]
 8003e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e40:	4433      	add	r3, r6
 8003e42:	9309      	str	r3, [sp, #36]	; 0x24
 8003e44:	e767      	b.n	8003d16 <_svfiprintf_r+0x4e>
 8003e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	e7a5      	b.n	8003d9c <_svfiprintf_r+0xd4>
 8003e50:	2300      	movs	r3, #0
 8003e52:	3401      	adds	r4, #1
 8003e54:	9305      	str	r3, [sp, #20]
 8003e56:	4619      	mov	r1, r3
 8003e58:	f04f 0c0a 	mov.w	ip, #10
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e62:	3a30      	subs	r2, #48	; 0x30
 8003e64:	2a09      	cmp	r2, #9
 8003e66:	d903      	bls.n	8003e70 <_svfiprintf_r+0x1a8>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0c5      	beq.n	8003df8 <_svfiprintf_r+0x130>
 8003e6c:	9105      	str	r1, [sp, #20]
 8003e6e:	e7c3      	b.n	8003df8 <_svfiprintf_r+0x130>
 8003e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e74:	4604      	mov	r4, r0
 8003e76:	2301      	movs	r3, #1
 8003e78:	e7f0      	b.n	8003e5c <_svfiprintf_r+0x194>
 8003e7a:	ab03      	add	r3, sp, #12
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	462a      	mov	r2, r5
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <_svfiprintf_r+0x1f8>)
 8003e82:	a904      	add	r1, sp, #16
 8003e84:	4638      	mov	r0, r7
 8003e86:	f3af 8000 	nop.w
 8003e8a:	1c42      	adds	r2, r0, #1
 8003e8c:	4606      	mov	r6, r0
 8003e8e:	d1d6      	bne.n	8003e3e <_svfiprintf_r+0x176>
 8003e90:	89ab      	ldrh	r3, [r5, #12]
 8003e92:	065b      	lsls	r3, r3, #25
 8003e94:	f53f af2c 	bmi.w	8003cf0 <_svfiprintf_r+0x28>
 8003e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e9a:	b01d      	add	sp, #116	; 0x74
 8003e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea0:	ab03      	add	r3, sp, #12
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	462a      	mov	r2, r5
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <_svfiprintf_r+0x1f8>)
 8003ea8:	a904      	add	r1, sp, #16
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f000 f87a 	bl	8003fa4 <_printf_i>
 8003eb0:	e7eb      	b.n	8003e8a <_svfiprintf_r+0x1c2>
 8003eb2:	bf00      	nop
 8003eb4:	08004540 	.word	0x08004540
 8003eb8:	0800454a 	.word	0x0800454a
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08003c11 	.word	0x08003c11
 8003ec4:	08004546 	.word	0x08004546

08003ec8 <_printf_common>:
 8003ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	4616      	mov	r6, r2
 8003ece:	4699      	mov	r9, r3
 8003ed0:	688a      	ldr	r2, [r1, #8]
 8003ed2:	690b      	ldr	r3, [r1, #16]
 8003ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bfb8      	it	lt
 8003edc:	4613      	movlt	r3, r2
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b10a      	cbz	r2, 8003eee <_printf_common+0x26>
 8003eea:	3301      	adds	r3, #1
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	0699      	lsls	r1, r3, #26
 8003ef2:	bf42      	ittt	mi
 8003ef4:	6833      	ldrmi	r3, [r6, #0]
 8003ef6:	3302      	addmi	r3, #2
 8003ef8:	6033      	strmi	r3, [r6, #0]
 8003efa:	6825      	ldr	r5, [r4, #0]
 8003efc:	f015 0506 	ands.w	r5, r5, #6
 8003f00:	d106      	bne.n	8003f10 <_printf_common+0x48>
 8003f02:	f104 0a19 	add.w	sl, r4, #25
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	6832      	ldr	r2, [r6, #0]
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	42ab      	cmp	r3, r5
 8003f0e:	dc26      	bgt.n	8003f5e <_printf_common+0x96>
 8003f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f14:	1e13      	subs	r3, r2, #0
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	bf18      	it	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	0692      	lsls	r2, r2, #26
 8003f1e:	d42b      	bmi.n	8003f78 <_printf_common+0xb0>
 8003f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d01e      	beq.n	8003f6c <_printf_common+0xa4>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	68e5      	ldr	r5, [r4, #12]
 8003f32:	6832      	ldr	r2, [r6, #0]
 8003f34:	f003 0306 	and.w	r3, r3, #6
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	bf08      	it	eq
 8003f3c:	1aad      	subeq	r5, r5, r2
 8003f3e:	68a3      	ldr	r3, [r4, #8]
 8003f40:	6922      	ldr	r2, [r4, #16]
 8003f42:	bf0c      	ite	eq
 8003f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f48:	2500      	movne	r5, #0
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	bfc4      	itt	gt
 8003f4e:	1a9b      	subgt	r3, r3, r2
 8003f50:	18ed      	addgt	r5, r5, r3
 8003f52:	2600      	movs	r6, #0
 8003f54:	341a      	adds	r4, #26
 8003f56:	42b5      	cmp	r5, r6
 8003f58:	d11a      	bne.n	8003f90 <_printf_common+0xc8>
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	e008      	b.n	8003f70 <_printf_common+0xa8>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4652      	mov	r2, sl
 8003f62:	4649      	mov	r1, r9
 8003f64:	4638      	mov	r0, r7
 8003f66:	47c0      	blx	r8
 8003f68:	3001      	adds	r0, #1
 8003f6a:	d103      	bne.n	8003f74 <_printf_common+0xac>
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	3501      	adds	r5, #1
 8003f76:	e7c6      	b.n	8003f06 <_printf_common+0x3e>
 8003f78:	18e1      	adds	r1, r4, r3
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	2030      	movs	r0, #48	; 0x30
 8003f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f82:	4422      	add	r2, r4
 8003f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	e7c7      	b.n	8003f20 <_printf_common+0x58>
 8003f90:	2301      	movs	r3, #1
 8003f92:	4622      	mov	r2, r4
 8003f94:	4649      	mov	r1, r9
 8003f96:	4638      	mov	r0, r7
 8003f98:	47c0      	blx	r8
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d0e6      	beq.n	8003f6c <_printf_common+0xa4>
 8003f9e:	3601      	adds	r6, #1
 8003fa0:	e7d9      	b.n	8003f56 <_printf_common+0x8e>
	...

08003fa4 <_printf_i>:
 8003fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	7e0f      	ldrb	r7, [r1, #24]
 8003faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fac:	2f78      	cmp	r7, #120	; 0x78
 8003fae:	4691      	mov	r9, r2
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fba:	d807      	bhi.n	8003fcc <_printf_i+0x28>
 8003fbc:	2f62      	cmp	r7, #98	; 0x62
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x32>
 8003fc0:	2f00      	cmp	r7, #0
 8003fc2:	f000 80d8 	beq.w	8004176 <_printf_i+0x1d2>
 8003fc6:	2f58      	cmp	r7, #88	; 0x58
 8003fc8:	f000 80a3 	beq.w	8004112 <_printf_i+0x16e>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fd4:	e03a      	b.n	800404c <_printf_i+0xa8>
 8003fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fda:	2b15      	cmp	r3, #21
 8003fdc:	d8f6      	bhi.n	8003fcc <_printf_i+0x28>
 8003fde:	a101      	add	r1, pc, #4	; (adr r1, 8003fe4 <_printf_i+0x40>)
 8003fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe4:	0800403d 	.word	0x0800403d
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08003fcd 	.word	0x08003fcd
 8003ff0:	08003fcd 	.word	0x08003fcd
 8003ff4:	08003fcd 	.word	0x08003fcd
 8003ff8:	08003fcd 	.word	0x08003fcd
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08003fcd 	.word	0x08003fcd
 8004004:	08003fcd 	.word	0x08003fcd
 8004008:	08003fcd 	.word	0x08003fcd
 800400c:	08003fcd 	.word	0x08003fcd
 8004010:	0800415d 	.word	0x0800415d
 8004014:	08004081 	.word	0x08004081
 8004018:	0800413f 	.word	0x0800413f
 800401c:	08003fcd 	.word	0x08003fcd
 8004020:	08003fcd 	.word	0x08003fcd
 8004024:	0800417f 	.word	0x0800417f
 8004028:	08003fcd 	.word	0x08003fcd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003fcd 	.word	0x08003fcd
 8004034:	08003fcd 	.word	0x08003fcd
 8004038:	08004147 	.word	0x08004147
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	602a      	str	r2, [r5, #0]
 8004044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800404c:	2301      	movs	r3, #1
 800404e:	e0a3      	b.n	8004198 <_printf_i+0x1f4>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	6829      	ldr	r1, [r5, #0]
 8004054:	0606      	lsls	r6, r0, #24
 8004056:	f101 0304 	add.w	r3, r1, #4
 800405a:	d50a      	bpl.n	8004072 <_printf_i+0xce>
 800405c:	680e      	ldr	r6, [r1, #0]
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	2e00      	cmp	r6, #0
 8004062:	da03      	bge.n	800406c <_printf_i+0xc8>
 8004064:	232d      	movs	r3, #45	; 0x2d
 8004066:	4276      	negs	r6, r6
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406c:	485e      	ldr	r0, [pc, #376]	; (80041e8 <_printf_i+0x244>)
 800406e:	230a      	movs	r3, #10
 8004070:	e019      	b.n	80040a6 <_printf_i+0x102>
 8004072:	680e      	ldr	r6, [r1, #0]
 8004074:	602b      	str	r3, [r5, #0]
 8004076:	f010 0f40 	tst.w	r0, #64	; 0x40
 800407a:	bf18      	it	ne
 800407c:	b236      	sxthne	r6, r6
 800407e:	e7ef      	b.n	8004060 <_printf_i+0xbc>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	1d19      	adds	r1, r3, #4
 8004086:	6029      	str	r1, [r5, #0]
 8004088:	0601      	lsls	r1, r0, #24
 800408a:	d501      	bpl.n	8004090 <_printf_i+0xec>
 800408c:	681e      	ldr	r6, [r3, #0]
 800408e:	e002      	b.n	8004096 <_printf_i+0xf2>
 8004090:	0646      	lsls	r6, r0, #25
 8004092:	d5fb      	bpl.n	800408c <_printf_i+0xe8>
 8004094:	881e      	ldrh	r6, [r3, #0]
 8004096:	4854      	ldr	r0, [pc, #336]	; (80041e8 <_printf_i+0x244>)
 8004098:	2f6f      	cmp	r7, #111	; 0x6f
 800409a:	bf0c      	ite	eq
 800409c:	2308      	moveq	r3, #8
 800409e:	230a      	movne	r3, #10
 80040a0:	2100      	movs	r1, #0
 80040a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040a6:	6865      	ldr	r5, [r4, #4]
 80040a8:	60a5      	str	r5, [r4, #8]
 80040aa:	2d00      	cmp	r5, #0
 80040ac:	bfa2      	ittt	ge
 80040ae:	6821      	ldrge	r1, [r4, #0]
 80040b0:	f021 0104 	bicge.w	r1, r1, #4
 80040b4:	6021      	strge	r1, [r4, #0]
 80040b6:	b90e      	cbnz	r6, 80040bc <_printf_i+0x118>
 80040b8:	2d00      	cmp	r5, #0
 80040ba:	d04d      	beq.n	8004158 <_printf_i+0x1b4>
 80040bc:	4615      	mov	r5, r2
 80040be:	fbb6 f1f3 	udiv	r1, r6, r3
 80040c2:	fb03 6711 	mls	r7, r3, r1, r6
 80040c6:	5dc7      	ldrb	r7, [r0, r7]
 80040c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040cc:	4637      	mov	r7, r6
 80040ce:	42bb      	cmp	r3, r7
 80040d0:	460e      	mov	r6, r1
 80040d2:	d9f4      	bls.n	80040be <_printf_i+0x11a>
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d10b      	bne.n	80040f0 <_printf_i+0x14c>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	07de      	lsls	r6, r3, #31
 80040dc:	d508      	bpl.n	80040f0 <_printf_i+0x14c>
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	6861      	ldr	r1, [r4, #4]
 80040e2:	4299      	cmp	r1, r3
 80040e4:	bfde      	ittt	le
 80040e6:	2330      	movle	r3, #48	; 0x30
 80040e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040f0:	1b52      	subs	r2, r2, r5
 80040f2:	6122      	str	r2, [r4, #16]
 80040f4:	f8cd a000 	str.w	sl, [sp]
 80040f8:	464b      	mov	r3, r9
 80040fa:	aa03      	add	r2, sp, #12
 80040fc:	4621      	mov	r1, r4
 80040fe:	4640      	mov	r0, r8
 8004100:	f7ff fee2 	bl	8003ec8 <_printf_common>
 8004104:	3001      	adds	r0, #1
 8004106:	d14c      	bne.n	80041a2 <_printf_i+0x1fe>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800410c:	b004      	add	sp, #16
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	4835      	ldr	r0, [pc, #212]	; (80041e8 <_printf_i+0x244>)
 8004114:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004118:	6829      	ldr	r1, [r5, #0]
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004120:	6029      	str	r1, [r5, #0]
 8004122:	061d      	lsls	r5, r3, #24
 8004124:	d514      	bpl.n	8004150 <_printf_i+0x1ac>
 8004126:	07df      	lsls	r7, r3, #31
 8004128:	bf44      	itt	mi
 800412a:	f043 0320 	orrmi.w	r3, r3, #32
 800412e:	6023      	strmi	r3, [r4, #0]
 8004130:	b91e      	cbnz	r6, 800413a <_printf_i+0x196>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f023 0320 	bic.w	r3, r3, #32
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	2310      	movs	r3, #16
 800413c:	e7b0      	b.n	80040a0 <_printf_i+0xfc>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	2378      	movs	r3, #120	; 0x78
 8004148:	4828      	ldr	r0, [pc, #160]	; (80041ec <_printf_i+0x248>)
 800414a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800414e:	e7e3      	b.n	8004118 <_printf_i+0x174>
 8004150:	0659      	lsls	r1, r3, #25
 8004152:	bf48      	it	mi
 8004154:	b2b6      	uxthmi	r6, r6
 8004156:	e7e6      	b.n	8004126 <_printf_i+0x182>
 8004158:	4615      	mov	r5, r2
 800415a:	e7bb      	b.n	80040d4 <_printf_i+0x130>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	6826      	ldr	r6, [r4, #0]
 8004160:	6961      	ldr	r1, [r4, #20]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	6028      	str	r0, [r5, #0]
 8004166:	0635      	lsls	r5, r6, #24
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	d501      	bpl.n	8004170 <_printf_i+0x1cc>
 800416c:	6019      	str	r1, [r3, #0]
 800416e:	e002      	b.n	8004176 <_printf_i+0x1d2>
 8004170:	0670      	lsls	r0, r6, #25
 8004172:	d5fb      	bpl.n	800416c <_printf_i+0x1c8>
 8004174:	8019      	strh	r1, [r3, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	6123      	str	r3, [r4, #16]
 800417a:	4615      	mov	r5, r2
 800417c:	e7ba      	b.n	80040f4 <_printf_i+0x150>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	1d1a      	adds	r2, r3, #4
 8004182:	602a      	str	r2, [r5, #0]
 8004184:	681d      	ldr	r5, [r3, #0]
 8004186:	6862      	ldr	r2, [r4, #4]
 8004188:	2100      	movs	r1, #0
 800418a:	4628      	mov	r0, r5
 800418c:	f7fc f848 	bl	8000220 <memchr>
 8004190:	b108      	cbz	r0, 8004196 <_printf_i+0x1f2>
 8004192:	1b40      	subs	r0, r0, r5
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	6863      	ldr	r3, [r4, #4]
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	2300      	movs	r3, #0
 800419c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a0:	e7a8      	b.n	80040f4 <_printf_i+0x150>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	462a      	mov	r2, r5
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	47d0      	blx	sl
 80041ac:	3001      	adds	r0, #1
 80041ae:	d0ab      	beq.n	8004108 <_printf_i+0x164>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	079b      	lsls	r3, r3, #30
 80041b4:	d413      	bmi.n	80041de <_printf_i+0x23a>
 80041b6:	68e0      	ldr	r0, [r4, #12]
 80041b8:	9b03      	ldr	r3, [sp, #12]
 80041ba:	4298      	cmp	r0, r3
 80041bc:	bfb8      	it	lt
 80041be:	4618      	movlt	r0, r3
 80041c0:	e7a4      	b.n	800410c <_printf_i+0x168>
 80041c2:	2301      	movs	r3, #1
 80041c4:	4632      	mov	r2, r6
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	47d0      	blx	sl
 80041cc:	3001      	adds	r0, #1
 80041ce:	d09b      	beq.n	8004108 <_printf_i+0x164>
 80041d0:	3501      	adds	r5, #1
 80041d2:	68e3      	ldr	r3, [r4, #12]
 80041d4:	9903      	ldr	r1, [sp, #12]
 80041d6:	1a5b      	subs	r3, r3, r1
 80041d8:	42ab      	cmp	r3, r5
 80041da:	dcf2      	bgt.n	80041c2 <_printf_i+0x21e>
 80041dc:	e7eb      	b.n	80041b6 <_printf_i+0x212>
 80041de:	2500      	movs	r5, #0
 80041e0:	f104 0619 	add.w	r6, r4, #25
 80041e4:	e7f5      	b.n	80041d2 <_printf_i+0x22e>
 80041e6:	bf00      	nop
 80041e8:	08004551 	.word	0x08004551
 80041ec:	08004562 	.word	0x08004562

080041f0 <memcpy>:
 80041f0:	440a      	add	r2, r1
 80041f2:	4291      	cmp	r1, r2
 80041f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041f8:	d100      	bne.n	80041fc <memcpy+0xc>
 80041fa:	4770      	bx	lr
 80041fc:	b510      	push	{r4, lr}
 80041fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004206:	4291      	cmp	r1, r2
 8004208:	d1f9      	bne.n	80041fe <memcpy+0xe>
 800420a:	bd10      	pop	{r4, pc}

0800420c <memmove>:
 800420c:	4288      	cmp	r0, r1
 800420e:	b510      	push	{r4, lr}
 8004210:	eb01 0402 	add.w	r4, r1, r2
 8004214:	d902      	bls.n	800421c <memmove+0x10>
 8004216:	4284      	cmp	r4, r0
 8004218:	4623      	mov	r3, r4
 800421a:	d807      	bhi.n	800422c <memmove+0x20>
 800421c:	1e43      	subs	r3, r0, #1
 800421e:	42a1      	cmp	r1, r4
 8004220:	d008      	beq.n	8004234 <memmove+0x28>
 8004222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800422a:	e7f8      	b.n	800421e <memmove+0x12>
 800422c:	4402      	add	r2, r0
 800422e:	4601      	mov	r1, r0
 8004230:	428a      	cmp	r2, r1
 8004232:	d100      	bne.n	8004236 <memmove+0x2a>
 8004234:	bd10      	pop	{r4, pc}
 8004236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800423a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423e:	e7f7      	b.n	8004230 <memmove+0x24>

08004240 <_free_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	2900      	cmp	r1, #0
 8004244:	d044      	beq.n	80042d0 <_free_r+0x90>
 8004246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424a:	9001      	str	r0, [sp, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f1a1 0404 	sub.w	r4, r1, #4
 8004252:	bfb8      	it	lt
 8004254:	18e4      	addlt	r4, r4, r3
 8004256:	f000 f913 	bl	8004480 <__malloc_lock>
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <_free_r+0x94>)
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x30>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	b003      	add	sp, #12
 8004268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426c:	f000 b90e 	b.w	800448c <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x46>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1949      	addeq	r1, r1, r5
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x22>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x50>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x46>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1855      	adds	r5, r2, r1
 8004294:	42a5      	cmp	r5, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x70>
 8004298:	6824      	ldr	r4, [r4, #0]
 800429a:	4421      	add	r1, r4
 800429c:	1854      	adds	r4, r2, r1
 800429e:	42a3      	cmp	r3, r4
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x26>
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	4421      	add	r1, r4
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x26>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x78>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x26>
 80042b8:	6825      	ldr	r5, [r4, #0]
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1949      	addeq	r1, r1, r5
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x26>
 80042d0:	b003      	add	sp, #12
 80042d2:	bd30      	pop	{r4, r5, pc}
 80042d4:	2000012c 	.word	0x2000012c

080042d8 <sbrk_aligned>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4e0e      	ldr	r6, [pc, #56]	; (8004314 <sbrk_aligned+0x3c>)
 80042dc:	460c      	mov	r4, r1
 80042de:	6831      	ldr	r1, [r6, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	b911      	cbnz	r1, 80042ea <sbrk_aligned+0x12>
 80042e4:	f000 f8bc 	bl	8004460 <_sbrk_r>
 80042e8:	6030      	str	r0, [r6, #0]
 80042ea:	4621      	mov	r1, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f8b7 	bl	8004460 <_sbrk_r>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	d00a      	beq.n	800430c <sbrk_aligned+0x34>
 80042f6:	1cc4      	adds	r4, r0, #3
 80042f8:	f024 0403 	bic.w	r4, r4, #3
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	d007      	beq.n	8004310 <sbrk_aligned+0x38>
 8004300:	1a21      	subs	r1, r4, r0
 8004302:	4628      	mov	r0, r5
 8004304:	f000 f8ac 	bl	8004460 <_sbrk_r>
 8004308:	3001      	adds	r0, #1
 800430a:	d101      	bne.n	8004310 <sbrk_aligned+0x38>
 800430c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004310:	4620      	mov	r0, r4
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	20000130 	.word	0x20000130

08004318 <_malloc_r>:
 8004318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800431c:	1ccd      	adds	r5, r1, #3
 800431e:	f025 0503 	bic.w	r5, r5, #3
 8004322:	3508      	adds	r5, #8
 8004324:	2d0c      	cmp	r5, #12
 8004326:	bf38      	it	cc
 8004328:	250c      	movcc	r5, #12
 800432a:	2d00      	cmp	r5, #0
 800432c:	4607      	mov	r7, r0
 800432e:	db01      	blt.n	8004334 <_malloc_r+0x1c>
 8004330:	42a9      	cmp	r1, r5
 8004332:	d905      	bls.n	8004340 <_malloc_r+0x28>
 8004334:	230c      	movs	r3, #12
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	2600      	movs	r6, #0
 800433a:	4630      	mov	r0, r6
 800433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004340:	4e2e      	ldr	r6, [pc, #184]	; (80043fc <_malloc_r+0xe4>)
 8004342:	f000 f89d 	bl	8004480 <__malloc_lock>
 8004346:	6833      	ldr	r3, [r6, #0]
 8004348:	461c      	mov	r4, r3
 800434a:	bb34      	cbnz	r4, 800439a <_malloc_r+0x82>
 800434c:	4629      	mov	r1, r5
 800434e:	4638      	mov	r0, r7
 8004350:	f7ff ffc2 	bl	80042d8 <sbrk_aligned>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	4604      	mov	r4, r0
 8004358:	d14d      	bne.n	80043f6 <_malloc_r+0xde>
 800435a:	6834      	ldr	r4, [r6, #0]
 800435c:	4626      	mov	r6, r4
 800435e:	2e00      	cmp	r6, #0
 8004360:	d140      	bne.n	80043e4 <_malloc_r+0xcc>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	4631      	mov	r1, r6
 8004366:	4638      	mov	r0, r7
 8004368:	eb04 0803 	add.w	r8, r4, r3
 800436c:	f000 f878 	bl	8004460 <_sbrk_r>
 8004370:	4580      	cmp	r8, r0
 8004372:	d13a      	bne.n	80043ea <_malloc_r+0xd2>
 8004374:	6821      	ldr	r1, [r4, #0]
 8004376:	3503      	adds	r5, #3
 8004378:	1a6d      	subs	r5, r5, r1
 800437a:	f025 0503 	bic.w	r5, r5, #3
 800437e:	3508      	adds	r5, #8
 8004380:	2d0c      	cmp	r5, #12
 8004382:	bf38      	it	cc
 8004384:	250c      	movcc	r5, #12
 8004386:	4629      	mov	r1, r5
 8004388:	4638      	mov	r0, r7
 800438a:	f7ff ffa5 	bl	80042d8 <sbrk_aligned>
 800438e:	3001      	adds	r0, #1
 8004390:	d02b      	beq.n	80043ea <_malloc_r+0xd2>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	442b      	add	r3, r5
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	e00e      	b.n	80043b8 <_malloc_r+0xa0>
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	1b52      	subs	r2, r2, r5
 800439e:	d41e      	bmi.n	80043de <_malloc_r+0xc6>
 80043a0:	2a0b      	cmp	r2, #11
 80043a2:	d916      	bls.n	80043d2 <_malloc_r+0xba>
 80043a4:	1961      	adds	r1, r4, r5
 80043a6:	42a3      	cmp	r3, r4
 80043a8:	6025      	str	r5, [r4, #0]
 80043aa:	bf18      	it	ne
 80043ac:	6059      	strne	r1, [r3, #4]
 80043ae:	6863      	ldr	r3, [r4, #4]
 80043b0:	bf08      	it	eq
 80043b2:	6031      	streq	r1, [r6, #0]
 80043b4:	5162      	str	r2, [r4, r5]
 80043b6:	604b      	str	r3, [r1, #4]
 80043b8:	4638      	mov	r0, r7
 80043ba:	f104 060b 	add.w	r6, r4, #11
 80043be:	f000 f865 	bl	800448c <__malloc_unlock>
 80043c2:	f026 0607 	bic.w	r6, r6, #7
 80043c6:	1d23      	adds	r3, r4, #4
 80043c8:	1af2      	subs	r2, r6, r3
 80043ca:	d0b6      	beq.n	800433a <_malloc_r+0x22>
 80043cc:	1b9b      	subs	r3, r3, r6
 80043ce:	50a3      	str	r3, [r4, r2]
 80043d0:	e7b3      	b.n	800433a <_malloc_r+0x22>
 80043d2:	6862      	ldr	r2, [r4, #4]
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	bf0c      	ite	eq
 80043d8:	6032      	streq	r2, [r6, #0]
 80043da:	605a      	strne	r2, [r3, #4]
 80043dc:	e7ec      	b.n	80043b8 <_malloc_r+0xa0>
 80043de:	4623      	mov	r3, r4
 80043e0:	6864      	ldr	r4, [r4, #4]
 80043e2:	e7b2      	b.n	800434a <_malloc_r+0x32>
 80043e4:	4634      	mov	r4, r6
 80043e6:	6876      	ldr	r6, [r6, #4]
 80043e8:	e7b9      	b.n	800435e <_malloc_r+0x46>
 80043ea:	230c      	movs	r3, #12
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4638      	mov	r0, r7
 80043f0:	f000 f84c 	bl	800448c <__malloc_unlock>
 80043f4:	e7a1      	b.n	800433a <_malloc_r+0x22>
 80043f6:	6025      	str	r5, [r4, #0]
 80043f8:	e7de      	b.n	80043b8 <_malloc_r+0xa0>
 80043fa:	bf00      	nop
 80043fc:	2000012c 	.word	0x2000012c

08004400 <_realloc_r>:
 8004400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	4680      	mov	r8, r0
 8004406:	4614      	mov	r4, r2
 8004408:	460e      	mov	r6, r1
 800440a:	b921      	cbnz	r1, 8004416 <_realloc_r+0x16>
 800440c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	4611      	mov	r1, r2
 8004412:	f7ff bf81 	b.w	8004318 <_malloc_r>
 8004416:	b92a      	cbnz	r2, 8004424 <_realloc_r+0x24>
 8004418:	f7ff ff12 	bl	8004240 <_free_r>
 800441c:	4625      	mov	r5, r4
 800441e:	4628      	mov	r0, r5
 8004420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004424:	f000 f838 	bl	8004498 <_malloc_usable_size_r>
 8004428:	4284      	cmp	r4, r0
 800442a:	4607      	mov	r7, r0
 800442c:	d802      	bhi.n	8004434 <_realloc_r+0x34>
 800442e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004432:	d812      	bhi.n	800445a <_realloc_r+0x5a>
 8004434:	4621      	mov	r1, r4
 8004436:	4640      	mov	r0, r8
 8004438:	f7ff ff6e 	bl	8004318 <_malloc_r>
 800443c:	4605      	mov	r5, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	d0ed      	beq.n	800441e <_realloc_r+0x1e>
 8004442:	42bc      	cmp	r4, r7
 8004444:	4622      	mov	r2, r4
 8004446:	4631      	mov	r1, r6
 8004448:	bf28      	it	cs
 800444a:	463a      	movcs	r2, r7
 800444c:	f7ff fed0 	bl	80041f0 <memcpy>
 8004450:	4631      	mov	r1, r6
 8004452:	4640      	mov	r0, r8
 8004454:	f7ff fef4 	bl	8004240 <_free_r>
 8004458:	e7e1      	b.n	800441e <_realloc_r+0x1e>
 800445a:	4635      	mov	r5, r6
 800445c:	e7df      	b.n	800441e <_realloc_r+0x1e>
	...

08004460 <_sbrk_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4d06      	ldr	r5, [pc, #24]	; (800447c <_sbrk_r+0x1c>)
 8004464:	2300      	movs	r3, #0
 8004466:	4604      	mov	r4, r0
 8004468:	4608      	mov	r0, r1
 800446a:	602b      	str	r3, [r5, #0]
 800446c:	f7fc fb94 	bl	8000b98 <_sbrk>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_sbrk_r+0x1a>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_sbrk_r+0x1a>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	20000134 	.word	0x20000134

08004480 <__malloc_lock>:
 8004480:	4801      	ldr	r0, [pc, #4]	; (8004488 <__malloc_lock+0x8>)
 8004482:	f000 b811 	b.w	80044a8 <__retarget_lock_acquire_recursive>
 8004486:	bf00      	nop
 8004488:	20000138 	.word	0x20000138

0800448c <__malloc_unlock>:
 800448c:	4801      	ldr	r0, [pc, #4]	; (8004494 <__malloc_unlock+0x8>)
 800448e:	f000 b80c 	b.w	80044aa <__retarget_lock_release_recursive>
 8004492:	bf00      	nop
 8004494:	20000138 	.word	0x20000138

08004498 <_malloc_usable_size_r>:
 8004498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449c:	1f18      	subs	r0, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bfbc      	itt	lt
 80044a2:	580b      	ldrlt	r3, [r1, r0]
 80044a4:	18c0      	addlt	r0, r0, r3
 80044a6:	4770      	bx	lr

080044a8 <__retarget_lock_acquire_recursive>:
 80044a8:	4770      	bx	lr

080044aa <__retarget_lock_release_recursive>:
 80044aa:	4770      	bx	lr

080044ac <_init>:
 80044ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ae:	bf00      	nop
 80044b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044b2:	bc08      	pop	{r3}
 80044b4:	469e      	mov	lr, r3
 80044b6:	4770      	bx	lr

080044b8 <_fini>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	bf00      	nop
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr
