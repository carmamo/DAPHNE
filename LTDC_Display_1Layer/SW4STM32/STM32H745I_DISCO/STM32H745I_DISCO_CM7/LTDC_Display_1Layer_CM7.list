
LTDC_Display_1Layer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003fc40  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080435d0  080435d0  000535d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080435d4  080435d4  000535d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080435d8  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  20000024  080435fc  00060024  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200000ec  080435fc  000600ec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00060024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000baaa  00000000  00000000  00060052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a77  00000000  00000000  0006bafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000978  00000000  00000000  0006d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008b0  00000000  00000000  0006def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003aff9  00000000  00000000  0006e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bf13  00000000  00000000  000a9799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001908c6  00000000  00000000  000b56ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00245f72  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002554  00000000  00000000  00245fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000024 	.word	0x20000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003978 	.word	0x08003978

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000028 	.word	0x20000028
 80002d4:	08003978 	.word	0x08003978

080002d8 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d10f      	bne.n	800030c <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 80002ec:	4b26      	ldr	r3, [pc, #152]	; (8000388 <BSP_LED_Init+0xb0>)
 80002ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f2:	4a25      	ldr	r2, [pc, #148]	; (8000388 <BSP_LED_Init+0xb0>)
 80002f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fc:	4b22      	ldr	r3, [pc, #136]	; (8000388 <BSP_LED_Init+0xb0>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	e015      	b.n	8000338 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d10f      	bne.n	8000332 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <BSP_LED_Init+0xb0>)
 8000314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000318:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <BSP_LED_Init+0xb0>)
 800031a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <BSP_LED_Init+0xb0>)
 8000324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	e002      	b.n	8000338 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000332:	f06f 0301 	mvn.w	r3, #1
 8000336:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <BSP_LED_Init+0xb4>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000342:	2301      	movs	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000346:	2301      	movs	r3, #1
 8000348:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800034a:	2303      	movs	r3, #3
 800034c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <BSP_LED_Init+0xb8>)
 8000352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000356:	f107 0210 	add.w	r2, r7, #16
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fac5 	bl	80008ec <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <BSP_LED_Init+0xb8>)
 8000366:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a07      	ldr	r2, [pc, #28]	; (800038c <BSP_LED_Init+0xb4>)
 800036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000372:	b29b      	uxth	r3, r3
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	f000 fc68 	bl	8000c4c <HAL_GPIO_WritePin>
  return ret;
 800037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 800037e:	4618      	mov	r0, r3
 8000380:	3728      	adds	r7, #40	; 0x28
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	58024400 	.word	0x58024400
 800038c:	08003990 	.word	0x08003990
 8000390:	20000000 	.word	0x20000000

08000394 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800039e:	2300      	movs	r3, #0
 80003a0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <BSP_LED_On+0x34>)
 80003a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	4a07      	ldr	r2, [pc, #28]	; (80003cc <BSP_LED_On+0x38>)
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	f000 fc48 	bl	8000c4c <HAL_GPIO_WritePin>
  return ret;
 80003bc:	68fb      	ldr	r3, [r7, #12]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000000 	.word	0x20000000
 80003cc:	08003990 	.word	0x08003990

080003d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f000 f802 	bl	80003de <BSP_PB_Callback>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}

080003de <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80003de:	b480      	push	{r7}
 80003e0:	b083      	sub	sp, #12
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4603      	mov	r3, r0
 80003e6:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003f8:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <SystemInit+0xcc>)
 80003fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fe:	4a30      	ldr	r2, [pc, #192]	; (80004c0 <SystemInit+0xcc>)
 8000400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <SystemInit+0xcc>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a2c      	ldr	r2, [pc, #176]	; (80004c0 <SystemInit+0xcc>)
 800040e:	f043 0310 	orr.w	r3, r3, #16
 8000412:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <SystemInit+0xd0>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a2a      	ldr	r2, [pc, #168]	; (80004c4 <SystemInit+0xd0>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <SystemInit+0xd0>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000426:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <SystemInit+0xd0>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	4926      	ldr	r1, [pc, #152]	; (80004c4 <SystemInit+0xd0>)
 800042c:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <SystemInit+0xd4>)
 800042e:	4013      	ands	r3, r2
 8000430:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <SystemInit+0xd0>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000438:	4b22      	ldr	r3, [pc, #136]	; (80004c4 <SystemInit+0xd0>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <SystemInit+0xd0>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <SystemInit+0xd0>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <SystemInit+0xd0>)
 800044c:	2200      	movs	r2, #0
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <SystemInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000456:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <SystemInit+0xd0>)
 8000458:	2200      	movs	r2, #0
 800045a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <SystemInit+0xd0>)
 800045e:	2200      	movs	r2, #0
 8000460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <SystemInit+0xd0>)
 8000464:	2200      	movs	r2, #0
 8000466:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <SystemInit+0xd0>)
 800046a:	2200      	movs	r2, #0
 800046c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <SystemInit+0xd0>)
 8000470:	2200      	movs	r2, #0
 8000472:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <SystemInit+0xd0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <SystemInit+0xd0>)
 800047a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800047e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <SystemInit+0xd0>)
 8000482:	2200      	movs	r2, #0
 8000484:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8000486:	4b11      	ldr	r3, [pc, #68]	; (80004cc <SystemInit+0xd8>)
 8000488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <SystemInit+0xd8>)
 800048c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000490:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <SystemInit+0xdc>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <SystemInit+0xe0>)
 8000498:	4013      	ands	r3, r2
 800049a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800049e:	d202      	bcs.n	80004a6 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <SystemInit+0xe4>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <SystemInit+0xe8>)
 80004a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80004ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <SystemInit+0xcc>)
 80004b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	58024400 	.word	0x58024400
 80004c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004cc:	580000c0 	.word	0x580000c0
 80004d0:	5c001000 	.word	0x5c001000
 80004d4:	ffff0000 	.word	0xffff0000
 80004d8:	51008108 	.word	0x51008108
 80004dc:	52004000 	.word	0x52004000

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f000 f952 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004ec:	f001 fd06 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 80004f0:	4602      	mov	r2, r0
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_Init+0x68>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	0a1b      	lsrs	r3, r3, #8
 80004f8:	f003 030f 	and.w	r3, r3, #15
 80004fc:	4913      	ldr	r1, [pc, #76]	; (800054c <HAL_Init+0x6c>)
 80004fe:	5ccb      	ldrb	r3, [r1, r3]
 8000500:	f003 031f 	and.w	r3, r3, #31
 8000504:	fa22 f303 	lsr.w	r3, r2, r3
 8000508:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_Init+0x68>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 030f 	and.w	r3, r3, #15
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_Init+0x6c>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	f003 031f 	and.w	r3, r3, #31
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	fa22 f303 	lsr.w	r3, r2, r3
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_Init+0x70>)
 8000522:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x74>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800052a:	200f      	movs	r0, #15
 800052c:	f000 f81c 	bl	8000568 <HAL_InitTick>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e002      	b.n	8000540 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800053a:	f000 f80d 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	58024400 	.word	0x58024400
 800054c:	080039c0 	.word	0x080039c0
 8000550:	20000018 	.word	0x20000018
 8000554:	20000014 	.word	0x20000014

08000558 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_InitTick+0x60>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d101      	bne.n	800057c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000578:	2301      	movs	r3, #1
 800057a:	e021      	b.n	80005c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <HAL_InitTick+0x64>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <HAL_InitTick+0x60>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	fbb3 f3f1 	udiv	r3, r3, r1
 800058e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f921 	bl	80007da <HAL_SYSTICK_Config>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e00e      	b.n	80005c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d80a      	bhi.n	80005be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005b0:	f000 f8f9 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_InitTick+0x68>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000020 	.word	0x20000020
 80005cc:	20000014 	.word	0x20000014
 80005d0:	2000001c 	.word	0x2000001c

080005d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_IncTick+0x20>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x24>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_IncTick+0x24>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000020 	.word	0x20000020
 80005f8:	20000040 	.word	0x20000040

080005fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <HAL_GetTick+0x14>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000040 	.word	0x20000040

08000614 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_GetREVID+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	0c1b      	lsrs	r3, r3, #16
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	5c001000 	.word	0x5c001000

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <__NVIC_SetPriorityGrouping+0x40>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	4313      	orrs	r3, r2
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x40>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00
 8000670:	05fa0000 	.word	0x05fa0000

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff47 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff5e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff ffb2 	bl	800074c <SysTick_Config>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80007f8:	f3bf 8f5f 	dmb	sy
}
 80007fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_MPU_Disable+0x28>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_MPU_Disable+0x28>)
 8000804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000808:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_MPU_Disable+0x2c>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	e000ed90 	.word	0xe000ed90

08000824 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <HAL_MPU_Enable+0x38>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_MPU_Enable+0x3c>)
 8000838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_MPU_Enable+0x3c>)
 800083c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000840:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000842:	f3bf 8f4f 	dsb	sy
}
 8000846:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000848:	f3bf 8f6f 	isb	sy
}
 800084c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed90 	.word	0xe000ed90
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <HAL_MPU_ConfigRegion+0x84>)
 8000872:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d029      	beq.n	80008d0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800087c:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <HAL_MPU_ConfigRegion+0x84>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7b1b      	ldrb	r3, [r3, #12]
 8000888:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	7adb      	ldrb	r3, [r3, #11]
 800088e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000890:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7a9b      	ldrb	r3, [r3, #10]
 8000896:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000898:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7b5b      	ldrb	r3, [r3, #13]
 800089e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7b9b      	ldrb	r3, [r3, #14]
 80008a6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7bdb      	ldrb	r3, [r3, #15]
 80008ae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80008b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7a5b      	ldrb	r3, [r3, #9]
 80008b6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80008b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7a1b      	ldrb	r3, [r3, #8]
 80008be:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80008c0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80008ca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008cc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80008ce:	e005      	b.n	80008dc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_MPU_ConfigRegion+0x84>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <HAL_MPU_ConfigRegion+0x84>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed90 	.word	0xe000ed90

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80008fa:	4b89      	ldr	r3, [pc, #548]	; (8000b20 <HAL_GPIO_Init+0x234>)
 80008fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80008fe:	e194      	b.n	8000c2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 8186 	beq.w	8000c24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	2b01      	cmp	r3, #1
 8000922:	d005      	beq.n	8000930 <HAL_GPIO_Init+0x44>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0303 	and.w	r3, r3, #3
 800092c:	2b02      	cmp	r3, #2
 800092e:	d130      	bne.n	8000992 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2203      	movs	r2, #3
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68da      	ldr	r2, [r3, #12]
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000966:	2201      	movs	r2, #1
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4013      	ands	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	091b      	lsrs	r3, r3, #4
 800097c:	f003 0201 	and.w	r2, r3, #1
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b03      	cmp	r3, #3
 800099c:	d017      	beq.n	80009ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	689a      	ldr	r2, [r3, #8]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d123      	bne.n	8000a22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	08da      	lsrs	r2, r3, #3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3208      	adds	r2, #8
 80009e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	220f      	movs	r2, #15
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	f003 0307 	and.w	r3, r3, #7
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	08da      	lsrs	r2, r3, #3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	69b9      	ldr	r1, [r7, #24]
 8000a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0203 	and.w	r2, r3, #3
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 80e0 	beq.w	8000c24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <HAL_GPIO_Init+0x238>)
 8000a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a6a:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_GPIO_Init+0x238>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a74:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_GPIO_Init+0x238>)
 8000a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <HAL_GPIO_Init+0x23c>)
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	220f      	movs	r2, #15
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <HAL_GPIO_Init+0x240>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d052      	beq.n	8000b54 <HAL_GPIO_Init+0x268>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_GPIO_Init+0x244>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d031      	beq.n	8000b1a <HAL_GPIO_Init+0x22e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <HAL_GPIO_Init+0x248>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d02b      	beq.n	8000b16 <HAL_GPIO_Init+0x22a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_GPIO_Init+0x24c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d025      	beq.n	8000b12 <HAL_GPIO_Init+0x226>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	; (8000b3c <HAL_GPIO_Init+0x250>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d01f      	beq.n	8000b0e <HAL_GPIO_Init+0x222>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <HAL_GPIO_Init+0x254>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <HAL_GPIO_Init+0x21e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x258>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0x21a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a19      	ldr	r2, [pc, #100]	; (8000b48 <HAL_GPIO_Init+0x25c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d00d      	beq.n	8000b02 <HAL_GPIO_Init+0x216>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <HAL_GPIO_Init+0x260>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d007      	beq.n	8000afe <HAL_GPIO_Init+0x212>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_GPIO_Init+0x264>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d101      	bne.n	8000afa <HAL_GPIO_Init+0x20e>
 8000af6:	2309      	movs	r3, #9
 8000af8:	e02d      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000afa:	230a      	movs	r3, #10
 8000afc:	e02b      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000afe:	2308      	movs	r3, #8
 8000b00:	e029      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e027      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b06:	2306      	movs	r3, #6
 8000b08:	e025      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b0a:	2305      	movs	r3, #5
 8000b0c:	e023      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b0e:	2304      	movs	r3, #4
 8000b10:	e021      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b12:	2303      	movs	r3, #3
 8000b14:	e01f      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e01d      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e01b      	b.n	8000b56 <HAL_GPIO_Init+0x26a>
 8000b1e:	bf00      	nop
 8000b20:	58000080 	.word	0x58000080
 8000b24:	58024400 	.word	0x58024400
 8000b28:	58000400 	.word	0x58000400
 8000b2c:	58020000 	.word	0x58020000
 8000b30:	58020400 	.word	0x58020400
 8000b34:	58020800 	.word	0x58020800
 8000b38:	58020c00 	.word	0x58020c00
 8000b3c:	58021000 	.word	0x58021000
 8000b40:	58021400 	.word	0x58021400
 8000b44:	58021800 	.word	0x58021800
 8000b48:	58021c00 	.word	0x58021c00
 8000b4c:	58022000 	.word	0x58022000
 8000b50:	58022400 	.word	0x58022400
 8000b54:	2300      	movs	r3, #0
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	f002 0203 	and.w	r2, r2, #3
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b66:	4938      	ldr	r1, [pc, #224]	; (8000c48 <HAL_GPIO_Init+0x35c>)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa22 f303 	lsr.w	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f47f ae63 	bne.w	8000900 <HAL_GPIO_Init+0x14>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	3724      	adds	r7, #36	; 0x24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58000400 	.word	0x58000400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000c68:	e003      	b.n	8000c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	619a      	str	r2, [r3, #24]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e0bf      	b.n	8000e12 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f002 fd38 	bl	800371c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000cc2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6999      	ldr	r1, [r3, #24]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000cd8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	6899      	ldr	r1, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <HAL_LTDC_Init+0x19c>)
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6899      	ldr	r1, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68d9      	ldr	r1, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <HAL_LTDC_Init+0x19c>)
 8000d22:	400b      	ands	r3, r1
 8000d24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68d9      	ldr	r1, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a1a      	ldr	r2, [r3, #32]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6919      	ldr	r1, [r3, #16]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_LTDC_Init+0x19c>)
 8000d50:	400b      	ands	r3, r1
 8000d52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	041b      	lsls	r3, r3, #16
 8000d5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6919      	ldr	r1, [r3, #16]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6959      	ldr	r1, [r3, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_LTDC_Init+0x19c>)
 8000d7e:	400b      	ands	r3, r1
 8000d80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6959      	ldr	r1, [r3, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000db0:	041b      	lsls	r3, r3, #16
 8000db2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0206 	orr.w	r2, r2, #6
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0201 	orr.w	r2, r2, #1
 8000dfe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	f000f800 	.word	0xf000f800

08000e20 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e049      	b.n	8000ec6 <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3384      	adds	r3, #132	; 0x84
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	3284      	adds	r2, #132	; 0x84
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f042 0202 	orr.w	r2, r2, #2
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e6e:	f7ff fbc5 	bl	80005fc <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8000e74:	e006      	b.n	8000e84 <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 8000e76:	f7ff fbc1 	bl	80005fc <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b64      	cmp	r3, #100	; 0x64
 8000e82:	d807      	bhi.n	8000e94 <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f1      	beq.n	8000e76 <HAL_LTDC_DeInit+0x56>
 8000e92:	e000      	b.n	8000e96 <HAL_LTDC_DeInit+0x76>
    {
      break;
 8000e94:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f002 fcf8 	bl	800389c <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8000ece:	b5b0      	push	{r4, r5, r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_LTDC_ConfigLayer+0x1a>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e02c      	b.n	8000f42 <HAL_LTDC_ConfigLayer+0x74>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2134      	movs	r1, #52	; 0x34
 8000efe:	fb01 f303 	mul.w	r3, r1, r3
 8000f02:	4413      	add	r3, r2
 8000f04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4614      	mov	r4, r2
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	682b      	ldr	r3, [r5, #0]
 8000f1c:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f812 	bl	8000f4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f68:	4413      	add	r3, r2
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	01db      	lsls	r3, r3, #7
 8000f78:	4413      	add	r3, r2
 8000f7a:	3384      	adds	r3, #132	; 0x84
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	01d2      	lsls	r2, r2, #7
 8000f88:	440a      	add	r2, r1
 8000f8a:	3284      	adds	r2, #132	; 0x84
 8000f8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000f90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000fa2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000fa4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3384      	adds	r3, #132	; 0x84
 8000fb4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8000fba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fca:	4413      	add	r3, r2
 8000fcc:	041b      	lsls	r3, r3, #16
 8000fce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	01db      	lsls	r3, r3, #7
 8000fda:	4413      	add	r3, r2
 8000fdc:	3384      	adds	r3, #132	; 0x84
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	01d2      	lsls	r2, r2, #7
 8000fea:	440a      	add	r2, r1
 8000fec:	3284      	adds	r2, #132	; 0x84
 8000fee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000ff2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001002:	4413      	add	r3, r2
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	01db      	lsls	r3, r3, #7
 8001010:	440b      	add	r3, r1
 8001012:	3384      	adds	r3, #132	; 0x84
 8001014:	4619      	mov	r1, r3
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	01db      	lsls	r3, r3, #7
 8001026:	4413      	add	r3, r2
 8001028:	3384      	adds	r3, #132	; 0x84
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	4611      	mov	r1, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	01d2      	lsls	r2, r2, #7
 8001036:	440a      	add	r2, r1
 8001038:	3284      	adds	r2, #132	; 0x84
 800103a:	f023 0307 	bic.w	r3, r3, #7
 800103e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	01db      	lsls	r3, r3, #7
 800104a:	4413      	add	r3, r2
 800104c:	3384      	adds	r3, #132	; 0x84
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	061b      	lsls	r3, r3, #24
 8001070:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	01db      	lsls	r3, r3, #7
 800107c:	4413      	add	r3, r2
 800107e:	3384      	adds	r3, #132	; 0x84
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	01db      	lsls	r3, r3, #7
 800108c:	4413      	add	r3, r2
 800108e:	3384      	adds	r3, #132	; 0x84
 8001090:	461a      	mov	r2, r3
 8001092:	2300      	movs	r3, #0
 8001094:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800109c:	461a      	mov	r2, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	01db      	lsls	r3, r3, #7
 80010b0:	440b      	add	r3, r1
 80010b2:	3384      	adds	r3, #132	; 0x84
 80010b4:	4619      	mov	r1, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	01db      	lsls	r3, r3, #7
 80010c6:	4413      	add	r3, r2
 80010c8:	3384      	adds	r3, #132	; 0x84
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	4611      	mov	r1, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	01d2      	lsls	r2, r2, #7
 80010d6:	440a      	add	r2, r1
 80010d8:	3284      	adds	r2, #132	; 0x84
 80010da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	4413      	add	r3, r2
 80010ec:	3384      	adds	r3, #132	; 0x84
 80010ee:	461a      	mov	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	01db      	lsls	r3, r3, #7
 8001100:	4413      	add	r3, r2
 8001102:	3384      	adds	r3, #132	; 0x84
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	440b      	add	r3, r1
 8001112:	3384      	adds	r3, #132	; 0x84
 8001114:	4619      	mov	r1, r3
 8001116:	4b58      	ldr	r3, [pc, #352]	; (8001278 <LTDC_SetConfig+0x32c>)
 8001118:	4013      	ands	r3, r2
 800111a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	68f9      	ldr	r1, [r7, #12]
 8001126:	6809      	ldr	r1, [r1, #0]
 8001128:	4608      	mov	r0, r1
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	01c9      	lsls	r1, r1, #7
 800112e:	4401      	add	r1, r0
 8001130:	3184      	adds	r1, #132	; 0x84
 8001132:	4313      	orrs	r3, r2
 8001134:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	01db      	lsls	r3, r3, #7
 8001140:	4413      	add	r3, r2
 8001142:	3384      	adds	r3, #132	; 0x84
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	01db      	lsls	r3, r3, #7
 8001150:	4413      	add	r3, r2
 8001152:	3384      	adds	r3, #132	; 0x84
 8001154:	461a      	mov	r2, r3
 8001156:	2300      	movs	r3, #0
 8001158:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	01db      	lsls	r3, r3, #7
 8001164:	4413      	add	r3, r2
 8001166:	3384      	adds	r3, #132	; 0x84
 8001168:	461a      	mov	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8001178:	2304      	movs	r3, #4
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e01b      	b.n	80011b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d102      	bne.n	800118c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8001186:	2303      	movs	r3, #3
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e014      	b.n	80011b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d00b      	beq.n	80011ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001198:	2b02      	cmp	r3, #2
 800119a:	d007      	beq.n	80011ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d003      	beq.n	80011ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d102      	bne.n	80011b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	e001      	b.n	80011b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80011b2:	2301      	movs	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	4413      	add	r3, r2
 80011c2:	3384      	adds	r3, #132	; 0x84
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	4611      	mov	r1, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	01d2      	lsls	r2, r2, #7
 80011d0:	440a      	add	r2, r1
 80011d2:	3284      	adds	r2, #132	; 0x84
 80011d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80011d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	6859      	ldr	r1, [r3, #4]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	69f9      	ldr	r1, [r7, #28]
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	3307      	adds	r3, #7
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	6809      	ldr	r1, [r1, #0]
 80011fc:	4608      	mov	r0, r1
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	01c9      	lsls	r1, r1, #7
 8001202:	4401      	add	r1, r0
 8001204:	3184      	adds	r1, #132	; 0x84
 8001206:	4313      	orrs	r3, r2
 8001208:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	01db      	lsls	r3, r3, #7
 8001214:	4413      	add	r3, r2
 8001216:	3384      	adds	r3, #132	; 0x84
 8001218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	440b      	add	r3, r1
 8001226:	3384      	adds	r3, #132	; 0x84
 8001228:	4619      	mov	r1, r3
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <LTDC_SetConfig+0x330>)
 800122c:	4013      	ands	r3, r2
 800122e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	01db      	lsls	r3, r3, #7
 800123a:	4413      	add	r3, r2
 800123c:	3384      	adds	r3, #132	; 0x84
 800123e:	461a      	mov	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	01db      	lsls	r3, r3, #7
 8001250:	4413      	add	r3, r2
 8001252:	3384      	adds	r3, #132	; 0x84
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	4611      	mov	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	01d2      	lsls	r2, r2, #7
 8001260:	440a      	add	r2, r1
 8001262:	3284      	adds	r2, #132	; 0x84
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6013      	str	r3, [r2, #0]
}
 800126a:	bf00      	nop
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	fffff8f8 	.word	0xfffff8f8
 800127c:	fffff800 	.word	0xfffff800

08001280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2b06      	cmp	r3, #6
 8001292:	d00a      	beq.n	80012aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e040      	b.n	8001328 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e03e      	b.n	8001328 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80012b2:	491f      	ldr	r1, [pc, #124]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012ba:	f7ff f99f 	bl	80005fc <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012c0:	e009      	b.n	80012d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012c2:	f7ff f99b 	bl	80005fc <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d0:	d901      	bls.n	80012d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e028      	b.n	8001328 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e2:	d1ee      	bne.n	80012c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b1e      	cmp	r3, #30
 80012e8:	d008      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b2e      	cmp	r3, #46	; 0x2e
 80012ee:	d005      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b1d      	cmp	r3, #29
 80012f4:	d002      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b2d      	cmp	r3, #45	; 0x2d
 80012fa:	d114      	bne.n	8001326 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012fc:	f7ff f97e 	bl	80005fc <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001302:	e009      	b.n	8001318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001304:	f7ff f97a 	bl	80005fc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	d901      	bls.n	8001318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e007      	b.n	8001328 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d1ee      	bne.n	8001304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024800 	.word	0x58024800

08001334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f000 bc1d 	b.w	8001b82 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8087 	beq.w	8001464 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001356:	4b99      	ldr	r3, [pc, #612]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001360:	4b96      	ldr	r3, [pc, #600]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	2b10      	cmp	r3, #16
 800136a:	d007      	beq.n	800137c <HAL_RCC_OscConfig+0x48>
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	2b18      	cmp	r3, #24
 8001370:	d110      	bne.n	8001394 <HAL_RCC_OscConfig+0x60>
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4b8f      	ldr	r3, [pc, #572]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d06c      	beq.n	8001462 <HAL_RCC_OscConfig+0x12e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d168      	bne.n	8001462 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e3f6      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x78>
 800139e:	4b87      	ldr	r3, [pc, #540]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a86      	ldr	r2, [pc, #536]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e02e      	b.n	800140a <HAL_RCC_OscConfig+0xd6>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x9a>
 80013b4:	4b81      	ldr	r3, [pc, #516]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a80      	ldr	r2, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a7d      	ldr	r2, [pc, #500]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e01d      	b.n	800140a <HAL_RCC_OscConfig+0xd6>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0xbe>
 80013d8:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b75      	ldr	r3, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a74      	ldr	r2, [pc, #464]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0xd6>
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80013f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d013      	beq.n	800143a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff f8f3 	bl	80005fc <HAL_GetTick>
 8001416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141a:	f7ff f8ef 	bl	80005fc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	; 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e3aa      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800142c:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0xe6>
 8001438:	e014      	b.n	8001464 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff f8df 	bl	80005fc <HAL_GetTick>
 800143e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001442:	f7ff f8db 	bl	80005fc <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e396      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x10e>
 8001460:	e000      	b.n	8001464 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001462:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80cb 	beq.w	8001608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001472:	4b52      	ldr	r3, [pc, #328]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800147a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800147c:	4b4f      	ldr	r3, [pc, #316]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_RCC_OscConfig+0x164>
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b18      	cmp	r3, #24
 800148c:	d156      	bne.n	800153c <HAL_RCC_OscConfig+0x208>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d151      	bne.n	800153c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	4b48      	ldr	r3, [pc, #288]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x17c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e368      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 0219 	bic.w	r2, r3, #25
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	493f      	ldr	r1, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014c2:	f7ff f89b 	bl	80005fc <HAL_GetTick>
 80014c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff f897 	bl	80005fc <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e352      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	f7ff f894 	bl	8000614 <HAL_GetREVID>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d817      	bhi.n	8001526 <HAL_RCC_OscConfig+0x1f2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d108      	bne.n	8001510 <HAL_RCC_OscConfig+0x1dc>
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001506:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150e:	e07b      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	031b      	lsls	r3, r3, #12
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001524:	e070      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	061b      	lsls	r3, r3, #24
 8001534:	4921      	ldr	r1, [pc, #132]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153a:	e065      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d048      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 0219 	bic.w	r2, r3, #25
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	491a      	ldr	r1, [pc, #104]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff f851 	bl	80005fc <HAL_GetTick>
 800155a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff f84d 	bl	80005fc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e308      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	f7ff f84a 	bl	8000614 <HAL_GetREVID>
 8001580:	4603      	mov	r3, r0
 8001582:	f241 0203 	movw	r2, #4099	; 0x1003
 8001586:	4293      	cmp	r3, r2
 8001588:	d81a      	bhi.n	80015c0 <HAL_RCC_OscConfig+0x28c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b40      	cmp	r3, #64	; 0x40
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x270>
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6053      	str	r3, [r2, #4]
 80015a2:	e031      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	4902      	ldr	r1, [pc, #8]	; (80015bc <HAL_RCC_OscConfig+0x288>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e026      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
 80015ba:	bf00      	nop
 80015bc:	58024400 	.word	0x58024400
 80015c0:	4b9a      	ldr	r3, [pc, #616]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	061b      	lsls	r3, r3, #24
 80015ce:	4997      	ldr	r1, [pc, #604]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b95      	ldr	r3, [pc, #596]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a94      	ldr	r2, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff f80b 	bl	80005fc <HAL_GetTick>
 80015e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff f807 	bl	80005fc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e2c2      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015fc:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a9 	beq.w	8001768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001616:	4b85      	ldr	r3, [pc, #532]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800161e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001620:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d007      	beq.n	800163c <HAL_RCC_OscConfig+0x308>
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b18      	cmp	r3, #24
 8001630:	d13a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x374>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d135      	bne.n	80016a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800163c:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x320>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	2b80      	cmp	r3, #128	; 0x80
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e296      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001654:	f7fe ffde 	bl	8000614 <HAL_GetREVID>
 8001658:	4603      	mov	r3, r0
 800165a:	f241 0203 	movw	r2, #4099	; 0x1003
 800165e:	4293      	cmp	r3, r2
 8001660:	d817      	bhi.n	8001692 <HAL_RCC_OscConfig+0x35e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	2b20      	cmp	r3, #32
 8001668:	d108      	bne.n	800167c <HAL_RCC_OscConfig+0x348>
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001672:	4a6e      	ldr	r2, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001678:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800167a:	e075      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800167c:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	069b      	lsls	r3, r3, #26
 800168a:	4968      	ldr	r1, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001690:	e06a      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	061b      	lsls	r3, r3, #24
 80016a0:	4962      	ldr	r1, [pc, #392]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016a6:	e05f      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d042      	beq.n	8001736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a5d      	ldr	r2, [pc, #372]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80016b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7fe ff9e 	bl	80005fc <HAL_GetTick>
 80016c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016c4:	f7fe ff9a 	bl	80005fc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e255      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016e2:	f7fe ff97 	bl	8000614 <HAL_GetREVID>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d817      	bhi.n	8001720 <HAL_RCC_OscConfig+0x3ec>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d108      	bne.n	800170a <HAL_RCC_OscConfig+0x3d6>
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001700:	4a4a      	ldr	r2, [pc, #296]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001706:	6053      	str	r3, [r2, #4]
 8001708:	e02e      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	069b      	lsls	r3, r3, #26
 8001718:	4944      	ldr	r1, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
 800171e:	e023      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	493f      	ldr	r1, [pc, #252]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800173c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7fe ff5b 	bl	80005fc <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800174a:	f7fe ff57 	bl	80005fc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e212      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d036      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d019      	beq.n	80017b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800177e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001780:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7fe ff38 	bl	80005fc <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7fe ff34 	bl	80005fc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ef      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x45c>
 80017ae:	e018      	b.n	80017e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7fe ff1e 	bl	80005fc <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7fe ff1a 	bl	80005fc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1d5      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d039      	beq.n	8001862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01c      	beq.n	8001830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a0c      	ldr	r2, [pc, #48]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001802:	f7fe fefb 	bl	80005fc <HAL_GetTick>
 8001806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800180a:	f7fe fef7 	bl	80005fc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1b2      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_OscConfig+0x4f8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x4d6>
 8001828:	e01b      	b.n	8001862 <HAL_RCC_OscConfig+0x52e>
 800182a:	bf00      	nop
 800182c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001830:	4b9b      	ldr	r3, [pc, #620]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9a      	ldr	r2, [pc, #616]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183c:	f7fe fede 	bl	80005fc <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001844:	f7fe feda 	bl	80005fc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e195      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001856:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8081 	beq.w	8001972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001870:	4b8c      	ldr	r3, [pc, #560]	; (8001aa4 <HAL_RCC_OscConfig+0x770>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a8b      	ldr	r2, [pc, #556]	; (8001aa4 <HAL_RCC_OscConfig+0x770>)
 8001876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800187c:	f7fe febe 	bl	80005fc <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7fe feba 	bl	80005fc <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e175      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <HAL_RCC_OscConfig+0x770>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x584>
 80018aa:	4b7d      	ldr	r3, [pc, #500]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a7c      	ldr	r2, [pc, #496]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	e02d      	b.n	8001914 <HAL_RCC_OscConfig+0x5e0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10c      	bne.n	80018da <HAL_RCC_OscConfig+0x5a6>
 80018c0:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a76      	ldr	r2, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	4b74      	ldr	r3, [pc, #464]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a73      	ldr	r2, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x5e0>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c8>
 80018e2:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
 80018ee:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	4a6b      	ldr	r2, [pc, #428]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6713      	str	r3, [r2, #112]	; 0x70
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0x5e0>
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a67      	ldr	r2, [pc, #412]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d015      	beq.n	8001948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191c:	f7fe fe6e 	bl	80005fc <HAL_GetTick>
 8001920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7fe fe6a 	bl	80005fc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e123      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800193a:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0ee      	beq.n	8001924 <HAL_RCC_OscConfig+0x5f0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7fe fe58 	bl	80005fc <HAL_GetTick>
 800194c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7fe fe54 	bl	80005fc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e10d      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001966:	4b4e      	ldr	r3, [pc, #312]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8102 	beq.w	8001b80 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800197c:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001984:	2b18      	cmp	r3, #24
 8001986:	f000 80bd 	beq.w	8001b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b02      	cmp	r3, #2
 8001990:	f040 809e 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b42      	ldr	r3, [pc, #264]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7fe fe2c 	bl	80005fc <HAL_GetTick>
 80019a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7fe fe28 	bl	80005fc <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0e3      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80019c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x774>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	430a      	orrs	r2, r1
 80019da:	4931      	ldr	r1, [pc, #196]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	628b      	str	r3, [r1, #40]	; 0x28
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	3b01      	subs	r3, #1
 80019e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	3b01      	subs	r3, #1
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	3b01      	subs	r3, #1
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_RCC_OscConfig+0x778>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a2e:	00d2      	lsls	r2, r2, #3
 8001a30:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f023 020c 	bic.w	r2, r3, #12
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f023 0202 	bic.w	r2, r3, #2
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	4912      	ldr	r1, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe fdb1 	bl	80005fc <HAL_GetTick>
 8001a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a9c:	e011      	b.n	8001ac2 <HAL_RCC_OscConfig+0x78e>
 8001a9e:	bf00      	nop
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58024800 	.word	0x58024800
 8001aa8:	fffffc0c 	.word	0xfffffc0c
 8001aac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7fe fda4 	bl	80005fc <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e05f      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x77c>
 8001ace:	e057      	b.n	8001b80 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7fe fd8e 	bl	80005fc <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fd8a 	bl	80005fc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e045      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x7b0>
 8001b02:	e03d      	b.n	8001b80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b0a:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_RCC_OscConfig+0x858>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d031      	beq.n	8001b7c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d12a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d122      	bne.n	8001b7c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d11a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0a5b      	lsrs	r3, r3, #9
 8001b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d111      	bne.n	8001b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	0c1b      	lsrs	r3, r3, #16
 8001b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0e1b      	lsrs	r3, r3, #24
 8001b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3730      	adds	r7, #48	; 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	58024400 	.word	0x58024400

08001b90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e19c      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b8a      	ldr	r3, [pc, #552]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d910      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b87      	ldr	r3, [pc, #540]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 020f 	bic.w	r2, r3, #15
 8001bba:	4985      	ldr	r1, [pc, #532]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b83      	ldr	r3, [pc, #524]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e184      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d908      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4975      	ldr	r1, [pc, #468]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d908      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	496a      	ldr	r1, [pc, #424]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c4c:	4b61      	ldr	r3, [pc, #388]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	495e      	ldr	r1, [pc, #376]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d908      	bls.n	8001c8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c7a:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4953      	ldr	r1, [pc, #332]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d908      	bls.n	8001cba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f023 020f 	bic.w	r2, r3, #15
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4947      	ldr	r1, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d055      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001cc6:	4b43      	ldr	r3, [pc, #268]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	4940      	ldr	r1, [pc, #256]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce0:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d121      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0f6      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d115      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0ea      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0de      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0d6      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f023 0207 	bic.w	r2, r3, #7
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4925      	ldr	r1, [pc, #148]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7fe fc5b 	bl	80005fc <HAL_GetTick>
 8001d46:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4a:	f7fe fc57 	bl	80005fc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0be      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d1eb      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d208      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f023 020f 	bic.w	r2, r3, #15
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d214      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 020f 	bic.w	r2, r3, #15
 8001db6:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e086      	b.n	8001ede <HAL_RCC_ClockConfig+0x34e>
 8001dd0:	52002000 	.word	0x52002000
 8001dd4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d208      	bcs.n	8001e06 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df4:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	4939      	ldr	r1, [pc, #228]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d208      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	492e      	ldr	r1, [pc, #184]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d208      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4922      	ldr	r1, [pc, #136]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d208      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4917      	ldr	r1, [pc, #92]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e90:	f000 f834 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <HAL_RCC_ClockConfig+0x35c>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_RCC_ClockConfig+0x358>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_RCC_ClockConfig+0x35c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <HAL_RCC_ClockConfig+0x360>)
 8001ec6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_RCC_ClockConfig+0x364>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x368>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb48 	bl	8000568 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	080039c0 	.word	0x080039c0
 8001ef0:	20000018 	.word	0x20000018
 8001ef4:	20000014 	.word	0x20000014
 8001ef8:	2000001c 	.word	0x2000001c

08001efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f02:	4bb3      	ldr	r3, [pc, #716]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f0a:	2b18      	cmp	r3, #24
 8001f0c:	f200 8155 	bhi.w	80021ba <HAL_RCC_GetSysClockFreq+0x2be>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f7d 	.word	0x08001f7d
 8001f1c:	080021bb 	.word	0x080021bb
 8001f20:	080021bb 	.word	0x080021bb
 8001f24:	080021bb 	.word	0x080021bb
 8001f28:	080021bb 	.word	0x080021bb
 8001f2c:	080021bb 	.word	0x080021bb
 8001f30:	080021bb 	.word	0x080021bb
 8001f34:	080021bb 	.word	0x080021bb
 8001f38:	08001fa3 	.word	0x08001fa3
 8001f3c:	080021bb 	.word	0x080021bb
 8001f40:	080021bb 	.word	0x080021bb
 8001f44:	080021bb 	.word	0x080021bb
 8001f48:	080021bb 	.word	0x080021bb
 8001f4c:	080021bb 	.word	0x080021bb
 8001f50:	080021bb 	.word	0x080021bb
 8001f54:	080021bb 	.word	0x080021bb
 8001f58:	08001fa9 	.word	0x08001fa9
 8001f5c:	080021bb 	.word	0x080021bb
 8001f60:	080021bb 	.word	0x080021bb
 8001f64:	080021bb 	.word	0x080021bb
 8001f68:	080021bb 	.word	0x080021bb
 8001f6c:	080021bb 	.word	0x080021bb
 8001f70:	080021bb 	.word	0x080021bb
 8001f74:	080021bb 	.word	0x080021bb
 8001f78:	08001faf 	.word	0x08001faf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f7c:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f88:	4b91      	ldr	r3, [pc, #580]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	4a90      	ldr	r2, [pc, #576]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f9a:	e111      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f9c:	4b8d      	ldr	r3, [pc, #564]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f9e:	61bb      	str	r3, [r7, #24]
    break;
 8001fa0:	e10e      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fa4:	61bb      	str	r3, [r7, #24]
    break;
 8001fa6:	e10b      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001faa:	61bb      	str	r3, [r7, #24]
    break;
 8001fac:	e108      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001fb8:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001fc4:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001fce:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	08db      	lsrs	r3, r3, #3
 8001fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80e1 	beq.w	80021b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	f000 8083 	beq.w	8002100 <HAL_RCC_GetSysClockFreq+0x204>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	f200 80a1 	bhi.w	8002144 <HAL_RCC_GetSysClockFreq+0x248>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x114>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d056      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800200e:	e099      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d02d      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800201c:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	4a6b      	ldr	r2, [pc, #428]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002046:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002056:	ed97 6a02 	vldr	s12, [r7, #8]
 800205a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80021e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800205e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800206a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002076:	e087      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002082:	eddf 6a58 	vldr	s13, [pc, #352]	; 80021e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800209a:	ed97 6a02 	vldr	s12, [r7, #8]
 800209e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80021e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020ba:	e065      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80021e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020de:	ed97 6a02 	vldr	s12, [r7, #8]
 80020e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80021e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020fe:	e043      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80021ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002112:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002122:	ed97 6a02 	vldr	s12, [r7, #8]
 8002126:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80021e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002142:	e021      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80021e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002166:	ed97 6a02 	vldr	s12, [r7, #8]
 800216a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80021e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002186:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	0a5b      	lsrs	r3, r3, #9
 800218e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002192:	3301      	adds	r3, #1
 8002194:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80021a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ac:	ee17 3a90 	vmov	r3, s15
 80021b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021b2:	e005      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
    break;
 80021b8:	e002      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021bc:	61bb      	str	r3, [r7, #24]
    break;
 80021be:	bf00      	nop
  }

  return sysclockfreq;
 80021c0:	69bb      	ldr	r3, [r7, #24]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	58024400 	.word	0x58024400
 80021d4:	03d09000 	.word	0x03d09000
 80021d8:	003d0900 	.word	0x003d0900
 80021dc:	017d7840 	.word	0x017d7840
 80021e0:	46000000 	.word	0x46000000
 80021e4:	4c742400 	.word	0x4c742400
 80021e8:	4a742400 	.word	0x4a742400
 80021ec:	4bbebc20 	.word	0x4bbebc20

080021f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021f8:	2300      	movs	r3, #0
 80021fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03f      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002214:	d02a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800221a:	d824      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800221c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002220:	d018      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002226:	d81e      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800222c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002230:	d007      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002232:	e018      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002234:	4ba3      	ldr	r3, [pc, #652]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	4aa2      	ldr	r2, [pc, #648]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800223a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002240:	e015      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f000 ff17 	bl	800307c <RCCEx_PLL2_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002252:	e00c      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3324      	adds	r3, #36	; 0x24
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 ffc0 	bl	80031e0 <RCCEx_PLL3_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002264:	e003      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
      break;
 800226a:	e000      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800226c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002274:	4b93      	ldr	r3, [pc, #588]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002280:	4990      	ldr	r1, [pc, #576]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	650b      	str	r3, [r1, #80]	; 0x50
 8002286:	e001      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d03d      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	2b04      	cmp	r3, #4
 800229e:	d826      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022bd 	.word	0x080022bd
 80022ac:	080022cb 	.word	0x080022cb
 80022b0:	080022dd 	.word	0x080022dd
 80022b4:	080022f5 	.word	0x080022f5
 80022b8:	080022f5 	.word	0x080022f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022bc:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022c8:	e015      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fed3 	bl	800307c <RCCEx_PLL2_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022da:	e00c      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3324      	adds	r3, #36	; 0x24
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 ff7c 	bl	80031e0 <RCCEx_PLL3_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022ec:	e003      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
      break;
 80022f2:	e000      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80022f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022fc:	4b71      	ldr	r3, [pc, #452]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	496e      	ldr	r1, [pc, #440]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	650b      	str	r3, [r1, #80]	; 0x50
 800230e:	e001      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231c:	2b00      	cmp	r3, #0
 800231e:	d042      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d02b      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800232a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232e:	d825      	bhi.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002330:	2bc0      	cmp	r3, #192	; 0xc0
 8002332:	d028      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002334:	2bc0      	cmp	r3, #192	; 0xc0
 8002336:	d821      	bhi.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d016      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d81d      	bhi.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d007      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002348:	e018      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002356:	e017      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fe8c 	bl	800307c <RCCEx_PLL2_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002368:	e00e      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3324      	adds	r3, #36	; 0x24
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f000 ff35 	bl	80031e0 <RCCEx_PLL3_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800237a:	e005      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	75fb      	strb	r3, [r7, #23]
      break;
 8002380:	e002      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002382:	bf00      	nop
 8002384:	e000      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800238e:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	494a      	ldr	r1, [pc, #296]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	650b      	str	r3, [r1, #80]	; 0x50
 80023a0:	e001      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d049      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023bc:	d030      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80023be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c2:	d82a      	bhi.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80023c8:	d02c      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80023ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80023ce:	d824      	bhi.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d4:	d018      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80023d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023da:	d81e      	bhi.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80023e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023e4:	d007      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80023e6:	e018      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	4a35      	ldr	r2, [pc, #212]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023f4:	e017      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fe3d 	bl	800307c <RCCEx_PLL2_Config>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002406:	e00e      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3324      	adds	r3, #36	; 0x24
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fee6 	bl	80031e0 <RCCEx_PLL3_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002418:	e005      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800243a:	4922      	ldr	r1, [pc, #136]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	658b      	str	r3, [r1, #88]	; 0x58
 8002440:	e001      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
 8002444:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244e:	2b00      	cmp	r3, #0
 8002450:	d04b      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245c:	d030      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d82a      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002464:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002468:	d02e      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800246a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800246e:	d824      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002474:	d018      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247a:	d81e      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d007      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002486:	e018      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002494:	e019      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fded 	bl	800307c <RCCEx_PLL2_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80024a6:	e010      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3324      	adds	r3, #36	; 0x24
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fe96 	bl	80031e0 <RCCEx_PLL3_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024b8:	e007      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	75fb      	strb	r3, [r7, #23]
      break;
 80024be:	e004      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80024c0:	bf00      	nop
 80024c2:	e002      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80024c4:	58024400 	.word	0x58024400
      break;
 80024c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024d0:	4b99      	ldr	r3, [pc, #612]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024de:	4996      	ldr	r1, [pc, #600]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	658b      	str	r3, [r1, #88]	; 0x58
 80024e4:	e001      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d032      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fa:	2b30      	cmp	r3, #48	; 0x30
 80024fc:	d01c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80024fe:	2b30      	cmp	r3, #48	; 0x30
 8002500:	d817      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002502:	2b20      	cmp	r3, #32
 8002504:	d00c      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002506:	2b20      	cmp	r3, #32
 8002508:	d813      	bhi.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800250e:	2b10      	cmp	r3, #16
 8002510:	d10f      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002512:	4b89      	ldr	r3, [pc, #548]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002516:	4a88      	ldr	r2, [pc, #544]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800251e:	e00e      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	2102      	movs	r1, #2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fda8 	bl	800307c <RCCEx_PLL2_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002530:	e005      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	75fb      	strb	r3, [r7, #23]
      break;
 8002536:	e002      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002538:	bf00      	nop
 800253a:	e000      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800253c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002544:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	4979      	ldr	r1, [pc, #484]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002552:	4313      	orrs	r3, r2
 8002554:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002556:	e001      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
 800255a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d047      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002570:	d030      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002576:	d82a      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800257c:	d02c      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800257e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002582:	d824      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002588:	d018      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	d81e      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002598:	d007      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800259a:	e018      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025a8:	e017      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fd63 	bl	800307c <RCCEx_PLL2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025ba:	e00e      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fe0c 	bl	80031e0 <RCCEx_PLL3_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80025cc:	e005      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80025d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80025e0:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	4952      	ldr	r1, [pc, #328]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	650b      	str	r3, [r1, #80]	; 0x50
 80025f2:	e001      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800260c:	d02e      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800260e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002612:	d828      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002618:	d02a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800261a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800261e:	d822      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002624:	d026      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800262a:	d81c      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800262c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002630:	d010      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002636:	d816      	bhi.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01d      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d111      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fd17 	bl	800307c <RCCEx_PLL2_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002652:	e012      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3324      	adds	r3, #36	; 0x24
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fdc0 	bl	80031e0 <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002664:	e009      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
      break;
 800266a:	e006      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800266c:	bf00      	nop
 800266e:	e004      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002674:	bf00      	nop
 8002676:	e000      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268c:	492a      	ldr	r1, [pc, #168]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800268e:	4313      	orrs	r3, r2
 8002690:	650b      	str	r3, [r1, #80]	; 0x50
 8002692:	e001      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ae:	d02e      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80026b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b4:	d828      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ba:	d02a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d822      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80026c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026c6:	d026      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80026c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026cc:	d81c      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80026ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d2:	d010      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80026d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d8:	d816      	bhi.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01d      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80026de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e2:	d111      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fcc6 	bl	800307c <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80026f4:	e012      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3324      	adds	r3, #36	; 0x24
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fd6f 	bl	80031e0 <RCCEx_PLL3_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002706:	e009      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
      break;
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800270e:	bf00      	nop
 8002710:	e004      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800271a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002726:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002730:	4901      	ldr	r1, [pc, #4]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002732:	4313      	orrs	r3, r2
 8002734:	658b      	str	r3, [r1, #88]	; 0x58
 8002736:	e003      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02f      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002754:	d00e      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275a:	d814      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002764:	d10f      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002766:	4baf      	ldr	r3, [pc, #700]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	4aae      	ldr	r2, [pc, #696]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	2101      	movs	r1, #1
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fc7e 	bl	800307c <RCCEx_PLL2_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002794:	4ba3      	ldr	r3, [pc, #652]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a0:	49a0      	ldr	r1, [pc, #640]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	650b      	str	r3, [r1, #80]	; 0x50
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d032      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d81b      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80027c0:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027ff 	.word	0x080027ff
 80027cc:	080027d9 	.word	0x080027d9
 80027d0:	080027e7 	.word	0x080027e7
 80027d4:	080027ff 	.word	0x080027ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d8:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4a91      	ldr	r2, [pc, #580]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80027e4:	e00c      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2102      	movs	r1, #2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fc45 	bl	800307c <RCCEx_PLL2_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80027f6:	e003      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
      break;
 80027fc:	e000      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80027fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002806:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4984      	ldr	r1, [pc, #528]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002814:	4313      	orrs	r3, r2
 8002816:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002818:	e001      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8086 	beq.w	8002938 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282c:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a7d      	ldr	r2, [pc, #500]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002838:	f7fd fee0 	bl	80005fc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002840:	f7fd fedc 	bl	80005fc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b64      	cmp	r3, #100	; 0x64
 800284c:	d902      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	75fb      	strb	r3, [r7, #23]
        break;
 8002852:	e005      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002854:	4b74      	ldr	r3, [pc, #464]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ef      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d166      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002866:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002870:	4053      	eors	r3, r2
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	2b00      	cmp	r3, #0
 8002878:	d013      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002882:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800289c:	4a61      	ldr	r2, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ac:	d115      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fd fea5 	bl	80005fc <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028b4:	e00b      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fd fea1 	bl	80005fc <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d902      	bls.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	75fb      	strb	r3, [r7, #23]
            break;
 80028cc:	e005      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ce:	4b55      	ldr	r3, [pc, #340]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ed      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d126      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ee:	d10d      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028fe:	0919      	lsrs	r1, r3, #4
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002902:	400b      	ands	r3, r1
 8002904:	4947      	ldr	r1, [pc, #284]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002906:	4313      	orrs	r3, r2
 8002908:	610b      	str	r3, [r1, #16]
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a44      	ldr	r2, [pc, #272]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002912:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002916:	6113      	str	r3, [r2, #16]
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800291a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	493f      	ldr	r1, [pc, #252]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002928:	4313      	orrs	r3, r2
 800292a:	670b      	str	r3, [r1, #112]	; 0x70
 800292c:	e004      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	75bb      	strb	r3, [r7, #22]
 8002932:	e001      	b.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8085 	beq.w	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800294a:	2b28      	cmp	r3, #40	; 0x28
 800294c:	d866      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002a31 	.word	0x08002a31
 8002958:	08002a1d 	.word	0x08002a1d
 800295c:	08002a1d 	.word	0x08002a1d
 8002960:	08002a1d 	.word	0x08002a1d
 8002964:	08002a1d 	.word	0x08002a1d
 8002968:	08002a1d 	.word	0x08002a1d
 800296c:	08002a1d 	.word	0x08002a1d
 8002970:	08002a1d 	.word	0x08002a1d
 8002974:	080029f9 	.word	0x080029f9
 8002978:	08002a1d 	.word	0x08002a1d
 800297c:	08002a1d 	.word	0x08002a1d
 8002980:	08002a1d 	.word	0x08002a1d
 8002984:	08002a1d 	.word	0x08002a1d
 8002988:	08002a1d 	.word	0x08002a1d
 800298c:	08002a1d 	.word	0x08002a1d
 8002990:	08002a1d 	.word	0x08002a1d
 8002994:	08002a0b 	.word	0x08002a0b
 8002998:	08002a1d 	.word	0x08002a1d
 800299c:	08002a1d 	.word	0x08002a1d
 80029a0:	08002a1d 	.word	0x08002a1d
 80029a4:	08002a1d 	.word	0x08002a1d
 80029a8:	08002a1d 	.word	0x08002a1d
 80029ac:	08002a1d 	.word	0x08002a1d
 80029b0:	08002a1d 	.word	0x08002a1d
 80029b4:	08002a31 	.word	0x08002a31
 80029b8:	08002a1d 	.word	0x08002a1d
 80029bc:	08002a1d 	.word	0x08002a1d
 80029c0:	08002a1d 	.word	0x08002a1d
 80029c4:	08002a1d 	.word	0x08002a1d
 80029c8:	08002a1d 	.word	0x08002a1d
 80029cc:	08002a1d 	.word	0x08002a1d
 80029d0:	08002a1d 	.word	0x08002a1d
 80029d4:	08002a31 	.word	0x08002a31
 80029d8:	08002a1d 	.word	0x08002a1d
 80029dc:	08002a1d 	.word	0x08002a1d
 80029e0:	08002a1d 	.word	0x08002a1d
 80029e4:	08002a1d 	.word	0x08002a1d
 80029e8:	08002a1d 	.word	0x08002a1d
 80029ec:	08002a1d 	.word	0x08002a1d
 80029f0:	08002a1d 	.word	0x08002a1d
 80029f4:	08002a31 	.word	0x08002a31
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fb3c 	bl	800307c <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a08:	e013      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3324      	adds	r3, #36	; 0x24
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fbe5 	bl	80031e0 <RCCEx_PLL3_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a20:	e007      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a22:	bf00      	nop
 8002a24:	58024400 	.word	0x58024400
 8002a28:	58024800 	.word	0x58024800
 8002a2c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a38:	4b96      	ldr	r3, [pc, #600]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a44:	4993      	ldr	r1, [pc, #588]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	654b      	str	r3, [r1, #84]	; 0x54
 8002a4a:	e001      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d038      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d821      	bhi.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002aaf 	.word	0x08002aaf
 8002a70:	08002a85 	.word	0x08002a85
 8002a74:	08002a97 	.word	0x08002a97
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	2101      	movs	r1, #1
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 faf6 	bl	800307c <RCCEx_PLL2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002a94:	e00c      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fb9f 	bl	80031e0 <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002aa6:	e003      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d109      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ab6:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f023 0207 	bic.w	r2, r3, #7
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	4974      	ldr	r1, [pc, #464]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ac8:	e001      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d03a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d821      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b2f 	.word	0x08002b2f
 8002af0:	08002b05 	.word	0x08002b05
 8002af4:	08002b17 	.word	0x08002b17
 8002af8:	08002b2f 	.word	0x08002b2f
 8002afc:	08002b2f 	.word	0x08002b2f
 8002b00:	08002b2f 	.word	0x08002b2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fab6 	bl	800307c <RCCEx_PLL2_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b14:	e00c      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3324      	adds	r3, #36	; 0x24
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fb5f 	bl	80031e0 <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b36:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4953      	ldr	r1, [pc, #332]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	658b      	str	r3, [r1, #88]	; 0x58
 8002b4a:	e001      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d04b      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b66:	d02e      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b6c:	d828      	bhi.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d02a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b78:	d822      	bhi.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b7e:	d026      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002b80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b84:	d81c      	bhi.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8a:	d010      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b90:	d816      	bhi.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01d      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b9a:	d111      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fa6a 	bl	800307c <RCCEx_PLL2_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002bac:	e012      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3324      	adds	r3, #36	; 0x24
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fb13 	bl	80031e0 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002bbe:	e009      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8002bc4:	e006      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e002      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be8:	492a      	ldr	r1, [pc, #168]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	654b      	str	r3, [r1, #84]	; 0x54
 8002bee:	e001      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d04d      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c0a:	d02e      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002c0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c10:	d828      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c16:	d02a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d822      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c22:	d026      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c28:	d81c      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2e:	d010      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c34:	d816      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01d      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fa18 	bl	800307c <RCCEx_PLL2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002c50:	e012      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3324      	adds	r3, #36	; 0x24
 8002c56:	2102      	movs	r1, #2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fac1 	bl	80031e0 <RCCEx_PLL3_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	75fb      	strb	r3, [r7, #23]
      break;
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e004      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8c:	4901      	ldr	r1, [pc, #4]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	658b      	str	r3, [r1, #88]	; 0x58
 8002c92:	e003      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002c94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d04b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002cb2:	d02e      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002cb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002cb8:	d828      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbe:	d02a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	d822      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002cc6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002cca:	d026      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002ccc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002cd0:	d81c      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cdc:	d816      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01d      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d111      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9c4 	bl	800307c <RCCEx_PLL2_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002cf8:	e012      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3324      	adds	r3, #36	; 0x24
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fa6d 	bl	80031e0 <RCCEx_PLL3_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d26:	4b9d      	ldr	r3, [pc, #628]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d34:	4999      	ldr	r1, [pc, #612]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	658b      	str	r3, [r1, #88]	; 0x58
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d10a      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa3e 	bl	80031e0 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	4987      	ldr	r1, [pc, #540]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d98:	d10a      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3324      	adds	r3, #36	; 0x24
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fa1d 	bl	80031e0 <RCCEx_PLL3_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002db0:	4b7a      	ldr	r3, [pc, #488]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	4977      	ldr	r1, [pc, #476]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d034      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dda:	d01d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002de0:	d817      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d009      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002dec:	e011      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f941 	bl	800307c <RCCEx_PLL2_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002dfe:	e00c      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3324      	adds	r3, #36	; 0x24
 8002e04:	2102      	movs	r1, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f9ea 	bl	80031e0 <RCCEx_PLL3_Config>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
      break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e20:	4b5e      	ldr	r3, [pc, #376]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e2e:	495b      	ldr	r1, [pc, #364]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	658b      	str	r3, [r1, #88]	; 0x58
 8002e34:	e001      	b.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d033      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e50:	d01c      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002e52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e56:	d816      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e62:	d007      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002e64:	e00f      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	4a4c      	ldr	r2, [pc, #304]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002e72:	e00c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3324      	adds	r3, #36	; 0x24
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f9b0 	bl	80031e0 <RCCEx_PLL3_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e94:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	493e      	ldr	r1, [pc, #248]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8002ea8:	e001      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d029      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d007      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ed6:	e00b      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f8cc 	bl	800307c <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	4926      	ldr	r1, [pc, #152]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f08:	e001      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3324      	adds	r3, #36	; 0x24
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f95d 	bl	80031e0 <RCCEx_PLL3_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d033      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f44:	d017      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4a:	d811      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d013      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f56:	d80b      	bhi.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f60:	d106      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002f6e:	e007      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	75fb      	strb	r3, [r7, #23]
      break;
 8002f74:	e004      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f92:	4902      	ldr	r1, [pc, #8]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	654b      	str	r3, [r1, #84]	; 0x54
 8002f98:	e004      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002f9a:	bf00      	nop
 8002f9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	492e      	ldr	r1, [pc, #184]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fdc:	4926      	ldr	r1, [pc, #152]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffa:	491f      	ldr	r1, [pc, #124]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003016:	6113      	str	r3, [r2, #16]
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003022:	4915      	ldr	r1, [pc, #84]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003024:	4313      	orrs	r3, r2
 8003026:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	da08      	bge.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800303e:	4313      	orrs	r3, r2
 8003040:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	4906      	ldr	r1, [pc, #24]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800305e:	4313      	orrs	r3, r2
 8003060:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003062:	7dbb      	ldrb	r3, [r7, #22]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	e000      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	58024400 	.word	0x58024400

0800307c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d101      	bne.n	800309a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e099      	b.n	80031ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800309a:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80030a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a6:	f7fd faa9 	bl	80005fc <HAL_GetTick>
 80030aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80030ac:	e008      	b.n	80030c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80030ae:	f7fd faa5 	bl	80005fc <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e086      	b.n	80031ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80030c0:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	031b      	lsls	r3, r3, #12
 80030da:	493f      	ldr	r1, [pc, #252]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	628b      	str	r3, [r1, #40]	; 0x28
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	025b      	lsls	r3, r3, #9
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	3b01      	subs	r3, #1
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003110:	4931      	ldr	r1, [pc, #196]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003112:	4313      	orrs	r3, r2
 8003114:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	492d      	ldr	r1, [pc, #180]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f023 0220 	bic.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4928      	ldr	r1, [pc, #160]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003136:	4313      	orrs	r3, r2
 8003138:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003140:	f023 0310 	bic.w	r3, r3, #16
 8003144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <RCCEx_PLL2_Config+0x160>)
 800314c:	4013      	ands	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	69d2      	ldr	r2, [r2, #28]
 8003152:	00d2      	lsls	r2, r2, #3
 8003154:	4920      	ldr	r1, [pc, #128]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003160:	f043 0310 	orr.w	r3, r3, #16
 8003164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003178:	e00f      	b.n	800319a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d106      	bne.n	800318e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800318c:	e005      	b.n	800319a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	4a11      	ldr	r2, [pc, #68]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 8003194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80031a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a6:	f7fd fa29 	bl	80005fc <HAL_GetTick>
 80031aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80031ac:	e008      	b.n	80031c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80031ae:	f7fd fa25 	bl	80005fc <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e006      	b.n	80031ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <RCCEx_PLL2_Config+0x15c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400
 80031dc:	ffff0007 	.word	0xffff0007

080031e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80031ee:	4b53      	ldr	r3, [pc, #332]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d101      	bne.n	80031fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e099      	b.n	8003332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80031fe:	4b4f      	ldr	r3, [pc, #316]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4e      	ldr	r2, [pc, #312]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320a:	f7fd f9f7 	bl	80005fc <HAL_GetTick>
 800320e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003210:	e008      	b.n	8003224 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003212:	f7fd f9f3 	bl	80005fc <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e086      	b.n	8003332 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003224:	4b45      	ldr	r3, [pc, #276]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003230:	4b42      	ldr	r3, [pc, #264]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	051b      	lsls	r3, r3, #20
 800323e:	493f      	ldr	r1, [pc, #252]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	628b      	str	r3, [r1, #40]	; 0x28
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	3b01      	subs	r3, #1
 800324a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	3b01      	subs	r3, #1
 8003254:	025b      	lsls	r3, r3, #9
 8003256:	b29b      	uxth	r3, r3
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	3b01      	subs	r3, #1
 8003260:	041b      	lsls	r3, r3, #16
 8003262:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	3b01      	subs	r3, #1
 800326e:	061b      	lsls	r3, r3, #24
 8003270:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003274:	4931      	ldr	r1, [pc, #196]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800327a:	4b30      	ldr	r3, [pc, #192]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	492d      	ldr	r1, [pc, #180]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4928      	ldr	r1, [pc, #160]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	4a26      	ldr	r2, [pc, #152]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <RCCEx_PLL3_Config+0x160>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	69d2      	ldr	r2, [r2, #28]
 80032b6:	00d2      	lsls	r2, r2, #3
 80032b8:	4920      	ldr	r1, [pc, #128]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032dc:	e00f      	b.n	80032fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032f0:	e005      	b.n	80032fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 80032f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330a:	f7fd f977 	bl	80005fc <HAL_GetTick>
 800330e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003310:	e008      	b.n	8003324 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003312:	f7fd f973 	bl	80005fc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e006      	b.n	8003332 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <RCCEx_PLL3_Config+0x15c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003330:	7bfb      	ldrb	r3, [r7, #15]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
 8003340:	ffff0007 	.word	0xffff0007

08003344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800337c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003348:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800334a:	e003      	b.n	8003354 <LoopCopyDataInit>

0800334c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800334e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003350:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003352:	3104      	adds	r1, #4

08003354 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003354:	480b      	ldr	r0, [pc, #44]	; (8003384 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003358:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800335a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800335c:	d3f6      	bcc.n	800334c <CopyDataInit>
  ldr  r2, =_sbss
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003360:	e002      	b.n	8003368 <LoopFillZerobss>

08003362 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003362:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003364:	f842 3b04 	str.w	r3, [r2], #4

08003368 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800336a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800336c:	d3f9      	bcc.n	8003362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800336e:	f7fd f841 	bl	80003f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003372:	f000 fadd 	bl	8003930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003376:	f000 f80e 	bl	8003396 <main>
  bx  lr    
 800337a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003380:	080435d8 	.word	0x080435d8
  ldr  r0, =_sdata
 8003384:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003388:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 800338c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8003390:	200000ec 	.word	0x200000ec

08003394 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003394:	e7fe      	b.n	8003394 <ADC3_IRQHandler>

08003396 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7) 
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */
  
  /* Configure the MPU attributes */
  MPU_Config();
 800339a:	f000 f999 	bl	80036d0 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800339e:	f000 f929 	bl	80035f4 <CPU_CACHE_Enable>
  duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
  handled in milliseconds basis.
  - Set NVIC Group Priority to 4
  - Low Level Initialization
  */
  HAL_Init();
 80033a2:	f7fd f89d 	bl	80004e0 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 80033a6:	f000 f807 	bl	80033b8 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);   
 80033aa:	2001      	movs	r0, #1
 80033ac:	f7fc ff94 	bl	80002d8 <BSP_LED_Init>
    
  /* Configure LCD : Only one layer is used */
  LCD_Config();
 80033b0:	f000 f87e 	bl	80034b0 <LCD_Config>
    
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <main+0x1e>
	...

080033b8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b09e      	sub	sp, #120	; 0x78
 80033bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80033c4:	2004      	movs	r0, #4
 80033c6:	f7fd ff5b 	bl	8001280 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <SystemClock_Config+0xf0>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <SystemClock_Config+0xf0>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <SystemClock_Config+0xf0>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <SystemClock_Config+0xf4>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	4a30      	ldr	r2, [pc, #192]	; (80034ac <SystemClock_Config+0xf4>)
 80033ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033ee:	6193      	str	r3, [r2, #24]
 80033f0:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <SystemClock_Config+0xf4>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80033fc:	bf00      	nop
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <SystemClock_Config+0xf4>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d1f8      	bne.n	80033fe <SystemClock_Config+0x46>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800340c:	2301      	movs	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003414:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800341e:	2302      	movs	r3, #2
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003422:	2302      	movs	r3, #2
 8003424:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8003426:	2305      	movs	r3, #5
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800342a:	23a0      	movs	r3, #160	; 0xa0
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003432:	2302      	movs	r3, #2
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003436:	2302      	movs	r3, #2
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800343a:	2304      	movs	r3, #4
 800343c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800343e:	2300      	movs	r3, #0
 8003440:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003442:	2308      	movs	r3, #8
 8003444:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003446:	f107 0308 	add.w	r3, r7, #8
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd ff72 	bl	8001334 <HAL_RCC_OscConfig>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8003456:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800345a:	2b00      	cmp	r3, #0
 800345c:	d000      	beq.n	8003460 <SystemClock_Config+0xa8>
  {
    while(1) { ; }
 800345e:	e7fe      	b.n	800345e <SystemClock_Config+0xa6>
  }
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8003460:	233f      	movs	r3, #63	; 0x3f
 8003462:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003464:	2303      	movs	r3, #3
 8003466:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003468:	2300      	movs	r3, #0
 800346a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800346c:	2308      	movs	r3, #8
 800346e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8003478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800347c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8003482:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003486:	2104      	movs	r1, #4
 8003488:	4618      	mov	r0, r3
 800348a:	f7fe fb81 	bl	8001b90 <HAL_RCC_ClockConfig>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8003494:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003498:	2b00      	cmp	r3, #0
 800349a:	d000      	beq.n	800349e <SystemClock_Config+0xe6>
  {
    while(1) { ; }
 800349c:	e7fe      	b.n	800349c <SystemClock_Config+0xe4>
  }
}
 800349e:	bf00      	nop
 80034a0:	3778      	adds	r7, #120	; 0x78
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	58000400 	.word	0x58000400
 80034ac:	58024800 	.word	0x58024800

080034b0 <LCD_Config>:
  *           - The Layer size configuration : 480x272                      
  * @retval
  *  None
 */
static void LCD_Config(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0bc      	sub	sp, #240	; 0xf0
 80034b4:	af00      	add	r7, sp, #0
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80034b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  periph_clk_init_struct.PLL3.PLL3M = 5;
 80034bc:	2305      	movs	r3, #5
 80034be:	65bb      	str	r3, [r7, #88]	; 0x58
  periph_clk_init_struct.PLL3.PLL3N = 160;
 80034c0:	23a0      	movs	r3, #160	; 0xa0
 80034c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  periph_clk_init_struct.PLL3.PLL3FRACN = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	677b      	str	r3, [r7, #116]	; 0x74
  periph_clk_init_struct.PLL3.PLL3P = 2;
 80034c8:	2302      	movs	r3, #2
 80034ca:	663b      	str	r3, [r7, #96]	; 0x60
  periph_clk_init_struct.PLL3.PLL3Q = 2;
 80034cc:	2302      	movs	r3, #2
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
  periph_clk_init_struct.PLL3.PLL3R = 83;
 80034d0:	2353      	movs	r3, #83	; 0x53
 80034d2:	66bb      	str	r3, [r7, #104]	; 0x68
  periph_clk_init_struct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	673b      	str	r3, [r7, #112]	; 0x70
  periph_clk_init_struct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80034d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);    
 80034de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fe84 	bl	80021f0 <HAL_RCCEx_PeriphCLKConfig>
 
  /* LTDC Initialization -------------------------------------------------------*/
  /* DeInit */
  hltdc_F.Instance = LTDC;
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <LCD_Config+0x12c>)
 80034ea:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <LCD_Config+0x130>)
 80034ec:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hltdc_F);
 80034ee:	483b      	ldr	r0, [pc, #236]	; (80035dc <LCD_Config+0x12c>)
 80034f0:	f7fd fc96 	bl	8000e20 <HAL_LTDC_DeInit>
  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  hltdc_F.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80034f4:	4b39      	ldr	r3, [pc, #228]	; (80035dc <LCD_Config+0x12c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
  /* Initialize the vertical synchronization polarity as active low */ 
  hltdc_F.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <LCD_Config+0x12c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  /* Initialize the data enable polarity as active low */ 
  hltdc_F.Init.DEPolarity = LTDC_DEPOLARITY_AL; 
 8003500:	4b36      	ldr	r3, [pc, #216]	; (80035dc <LCD_Config+0x12c>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  /* Initialize the pixel clock polarity as input pixel clock */  
  hltdc_F.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003506:	4b35      	ldr	r3, [pc, #212]	; (80035dc <LCD_Config+0x12c>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  /* Timing configuration */
  /* The LCD AMPIRE 640x480 is selected */
  /* Timing configuration */
  hltdc_F.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <LCD_Config+0x12c>)
 800350e:	2228      	movs	r2, #40	; 0x28
 8003510:	615a      	str	r2, [r3, #20]
  hltdc_F.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <LCD_Config+0x12c>)
 8003514:	2209      	movs	r2, #9
 8003516:	619a      	str	r2, [r3, #24]
  hltdc_F.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003518:	4b30      	ldr	r3, [pc, #192]	; (80035dc <LCD_Config+0x12c>)
 800351a:	2235      	movs	r2, #53	; 0x35
 800351c:	61da      	str	r2, [r3, #28]
  hltdc_F.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);  
 800351e:	4b2f      	ldr	r3, [pc, #188]	; (80035dc <LCD_Config+0x12c>)
 8003520:	220b      	movs	r2, #11
 8003522:	621a      	str	r2, [r3, #32]
  hltdc_F.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <LCD_Config+0x12c>)
 8003526:	f240 121b 	movw	r2, #283	; 0x11b
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc_F.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <LCD_Config+0x12c>)
 800352e:	f240 2215 	movw	r2, #533	; 0x215
 8003532:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc_F.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003534:	4b29      	ldr	r3, [pc, #164]	; (80035dc <LCD_Config+0x12c>)
 8003536:	f240 121d 	movw	r2, #285	; 0x11d
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc_F.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1); 
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <LCD_Config+0x12c>)
 800353e:	f240 2235 	movw	r2, #565	; 0x235
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Configure R,G,B component values for LCD background color */
  hltdc_F.Init.Backcolor.Blue = 0;
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <LCD_Config+0x12c>)
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_F.Init.Backcolor.Green = 0;
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <LCD_Config+0x12c>)
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_F.Init.Backcolor.Red = 0;
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <LCD_Config+0x12c>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  hltdc_F.Instance = LTDC;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <LCD_Config+0x12c>)
 800355e:	4a20      	ldr	r2, [pc, #128]	; (80035e0 <LCD_Config+0x130>)
 8003560:	601a      	str	r2, [r3, #0]
  /* In this case all the active display area is used to display a picture then :
     Horizontal start = horizontal synchronization + Horizontal back porch = 43 
     Vertical start   = vertical synchronization + vertical back porch     = 12
     Horizontal stop = Horizontal start + window width -1 = 43 + 480 -1 
     Vertical stop   = Vertical start + window height -1  = 12 + 272 -1      */
  pLayerCfg.WindowX0 = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
  pLayerCfg.WindowX1 = 480;
 8003566:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800356a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowY0 = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY1 = 272;
 8003570:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003574:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/ 
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003576:	2302      	movs	r3, #2
 8003578:	613b      	str	r3, [r7, #16]
  
  /* Start Address configuration : frame buffer is located at FLASH memory */
  pLayerCfg.FBStartAdress = (uint32_t)&RGB565_480x272;
 800357a:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <LCD_Config+0x134>)
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Alpha constant (255 == totally opaque) */
  pLayerCfg.Alpha = 255;
 800357e:	23ff      	movs	r3, #255	; 0xff
 8003580:	617b      	str	r3, [r7, #20]
  
  /* Default Color configuration (configure A,R,G,B component values) : no background color */
  pLayerCfg.Alpha0 = 0; /* fully transparent */
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Backcolor.Blue = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg.Backcolor.Red = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  
  /* Configure blending factors */
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800359e:	2305      	movs	r3, #5
 80035a0:	623b      	str	r3, [r7, #32]
  
  /* Configure the number of lines and number of pixels per line */
  pLayerCfg.ImageWidth  = 480;
 80035a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageHeight = 272;
 80035a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Configure the LTDC */  
  if(HAL_LTDC_Init(&hltdc_F) != HAL_OK)
 80035ae:	480b      	ldr	r0, [pc, #44]	; (80035dc <LCD_Config+0x12c>)
 80035b0:	f7fd fb66 	bl	8000c80 <HAL_LTDC_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <LCD_Config+0x10e>
  {
    /* Initialization Error */
    Error_Handler(); 
 80035ba:	f000 f815 	bl	80035e8 <Error_Handler>
  }
  
  /* Configure the Layer*/
  if(HAL_LTDC_ConfigLayer(&hltdc_F, &pLayerCfg, 1) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2201      	movs	r2, #1
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <LCD_Config+0x12c>)
 80035c6:	f7fd fc82 	bl	8000ece <HAL_LTDC_ConfigLayer>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <LCD_Config+0x124>
  {
    /* Initialization Error */
    Error_Handler(); 
 80035d0:	f000 f80a 	bl	80035e8 <Error_Handler>
  }  
}
 80035d4:	bf00      	nop
 80035d6:	37f0      	adds	r7, #240	; 0xf0
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000044 	.word	0x20000044
 80035e0:	50001000 	.word	0x50001000
 80035e4:	080039d0 	.word	0x080039d0

080035e8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
    /* Turn LED2 on */
    BSP_LED_On(LED2);
 80035ec:	2001      	movs	r0, #1
 80035ee:	f7fc fed1 	bl	8000394 <BSP_LED_On>
    while(1)
 80035f2:	e7fe      	b.n	80035f2 <Error_Handler+0xa>

080035f4 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11b      	bne.n	800363e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003606:	f3bf 8f4f 	dsb	sy
}
 800360a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800360c:	f3bf 8f6f 	isb	sy
}
 8003610:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003612:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 8003614:	2200      	movs	r2, #0
 8003616:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800361a:	f3bf 8f4f 	dsb	sy
}
 800361e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003620:	f3bf 8f6f 	isb	sy
}
 8003624:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003626:	4b29      	ldr	r3, [pc, #164]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4a28      	ldr	r2, [pc, #160]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003632:	f3bf 8f4f 	dsb	sy
}
 8003636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003638:	f3bf 8f6f 	isb	sy
}
 800363c:	e000      	b.n	8003640 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800363e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d138      	bne.n	80036be <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 800364e:	2200      	movs	r2, #0
 8003650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003654:	f3bf 8f4f 	dsb	sy
}
 8003658:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 800365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003660:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	0b5b      	lsrs	r3, r3, #13
 8003666:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800366a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003674:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800367e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003684:	4911      	ldr	r1, [pc, #68]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ef      	bne.n	8003676 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	60ba      	str	r2, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80036a0:	f3bf 8f4f 	dsb	sy
}
 80036a4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <CPU_CACHE_Enable+0xd8>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80036b2:	f3bf 8f4f 	dsb	sy
}
 80036b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036b8:	f3bf 8f6f 	isb	sy
}
 80036bc:	e000      	b.n	80036c0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80036be:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80036d6:	f7fd f88d 	bl	80007f4 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80036da:	2301      	movs	r3, #1
 80036dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80036e2:	231f      	movs	r3, #31
 80036e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80036e6:	2300      	movs	r3, #0
 80036e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80036fe:	2387      	movs	r3, #135	; 0x87
 8003700:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003702:	2301      	movs	r3, #1
 8003704:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003706:	463b      	mov	r3, r7
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd f8ab 	bl	8000864 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800370e:	2004      	movs	r0, #4
 8003710:	f7fd f888 	bl	8000824 <HAL_MPU_Enable>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{  
 800371c:	b580      	push	{r7, lr}
 800371e:	b08e      	sub	sp, #56	; 0x38
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 GPIO_InitTypeDef gpio_init_structure;

  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003726:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800372a:	4a56      	ldr	r2, [pc, #344]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003734:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003736:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003742:	4b50      	ldr	r3, [pc, #320]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003748:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003752:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003760:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003766:	4a47      	ldr	r2, [pc, #284]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003770:	4b44      	ldr	r3, [pc, #272]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003784:	4a3f      	ldr	r2, [pc, #252]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800378a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800378e:	4b3d      	ldr	r3, [pc, #244]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 8003790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800379c:	4b39      	ldr	r3, [pc, #228]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 800379e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a2:	4a38      	ldr	r2, [pc, #224]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 80037ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ba:	4b32      	ldr	r3, [pc, #200]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 80037bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037c0:	4a30      	ldr	r2, [pc, #192]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ca:	4b2e      	ldr	r3, [pc, #184]	; (8003884 <HAL_LTDC_MspInit+0x168>)
 80037cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
  /*** LTDC Pins configuration ***/
  /* GPIOI configuration */
  gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 |GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 80037d8:	f24d 2303 	movw	r3, #53763	; 0xd203
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80037e6:	2302      	movs	r3, #2
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80037ea:	230e      	movs	r3, #14
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80037ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f2:	4619      	mov	r1, r3
 80037f4:	4824      	ldr	r0, [pc, #144]	; (8003888 <HAL_LTDC_MspInit+0x16c>)
 80037f6:	f7fd f879 	bl	80008ec <HAL_GPIO_Init>

  /* GPIOJ configuration */
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_3 | \
 80037fa:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003800:	2302      	movs	r3, #2
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003808:	2302      	movs	r3, #2
 800380a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800380c:	230e      	movs	r3, #14
 800380e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003814:	4619      	mov	r1, r3
 8003816:	481d      	ldr	r0, [pc, #116]	; (800388c <HAL_LTDC_MspInit+0x170>)
 8003818:	f7fd f868 	bl	80008ec <HAL_GPIO_Init>

  /* GPIOK configuration */
  gpio_init_structure.Pin       = GPIO_PIN_2 | GPIO_PIN_3 | \
 800381c:	237c      	movs	r3, #124	; 0x7c
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 ;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003828:	2302      	movs	r3, #2
 800382a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800382c:	230e      	movs	r3, #14
 800382e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	4619      	mov	r1, r3
 8003836:	4816      	ldr	r0, [pc, #88]	; (8003890 <HAL_LTDC_MspInit+0x174>)
 8003838:	f7fd f858 	bl	80008ec <HAL_GPIO_Init>
  
  /* GPIOH configuration */
  gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 800383c:	f240 2302 	movw	r3, #514	; 0x202
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800384a:	2302      	movs	r3, #2
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800384e:	230e      	movs	r3, #14
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);  
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	480e      	ldr	r0, [pc, #56]	; (8003894 <HAL_LTDC_MspInit+0x178>)
 800385a:	f7fd f847 	bl	80008ec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003862:	2301      	movs	r3, #1
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);  
 8003866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386a:	4619      	mov	r1, r3
 800386c:	480a      	ldr	r0, [pc, #40]	; (8003898 <HAL_LTDC_MspInit+0x17c>)
 800386e:	f7fd f83d 	bl	80008ec <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003872:	2201      	movs	r2, #1
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	4808      	ldr	r0, [pc, #32]	; (8003898 <HAL_LTDC_MspInit+0x17c>)
 8003878:	f7fd f9e8 	bl	8000c4c <HAL_GPIO_WritePin>

}
 800387c:	bf00      	nop
 800387e:	3738      	adds	r7, #56	; 0x38
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	58024400 	.word	0x58024400
 8003888:	58022000 	.word	0x58022000
 800388c:	58022400 	.word	0x58022400
 8003890:	58022800 	.word	0x58022800
 8003894:	58021c00 	.word	0x58021c00
 8003898:	58020c00 	.word	0x58020c00

0800389c <HAL_LTDC_MspDeInit>:
  *          - Disable the Peripheral's clock
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  
  /*##-1- Reset peripherals ##################################################*/
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <HAL_LTDC_MspDeInit+0x34>)
 80038a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_LTDC_MspDeInit+0x34>)
 80038ac:	f043 0308 	orr.w	r3, r3, #8
 80038b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  /* Release LTDC from reset state */ 
  __HAL_RCC_LTDC_RELEASE_RESET();
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_LTDC_MspDeInit+0x34>)
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_LTDC_MspDeInit+0x34>)
 80038bc:	f023 0308 	bic.w	r3, r3, #8
 80038c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	58024400 	.word	0x58024400

080038d4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <MemManage_Handler+0x4>

080038ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80038f2:	e7fe      	b.n	80038f2 <BusFault_Handler+0x4>

080038f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80038f8:	e7fe      	b.n	80038f8 <UsageFault_Handler+0x4>

080038fa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8003928:	f7fc fe54 	bl	80005d4 <HAL_IncTick>
}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}

08003930 <__libc_init_array>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	4d0d      	ldr	r5, [pc, #52]	; (8003968 <__libc_init_array+0x38>)
 8003934:	4c0d      	ldr	r4, [pc, #52]	; (800396c <__libc_init_array+0x3c>)
 8003936:	1b64      	subs	r4, r4, r5
 8003938:	10a4      	asrs	r4, r4, #2
 800393a:	2600      	movs	r6, #0
 800393c:	42a6      	cmp	r6, r4
 800393e:	d109      	bne.n	8003954 <__libc_init_array+0x24>
 8003940:	4d0b      	ldr	r5, [pc, #44]	; (8003970 <__libc_init_array+0x40>)
 8003942:	4c0c      	ldr	r4, [pc, #48]	; (8003974 <__libc_init_array+0x44>)
 8003944:	f000 f818 	bl	8003978 <_init>
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	10a4      	asrs	r4, r4, #2
 800394c:	2600      	movs	r6, #0
 800394e:	42a6      	cmp	r6, r4
 8003950:	d105      	bne.n	800395e <__libc_init_array+0x2e>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	f855 3b04 	ldr.w	r3, [r5], #4
 8003958:	4798      	blx	r3
 800395a:	3601      	adds	r6, #1
 800395c:	e7ee      	b.n	800393c <__libc_init_array+0xc>
 800395e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003962:	4798      	blx	r3
 8003964:	3601      	adds	r6, #1
 8003966:	e7f2      	b.n	800394e <__libc_init_array+0x1e>
 8003968:	080435d0 	.word	0x080435d0
 800396c:	080435d0 	.word	0x080435d0
 8003970:	080435d0 	.word	0x080435d0
 8003974:	080435d4 	.word	0x080435d4

08003978 <_init>:
 8003978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397a:	bf00      	nop
 800397c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397e:	bc08      	pop	{r3}
 8003980:	469e      	mov	lr, r3
 8003982:	4770      	bx	lr

08003984 <_fini>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	bf00      	nop
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr
