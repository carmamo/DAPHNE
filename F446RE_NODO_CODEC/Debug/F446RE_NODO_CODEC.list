
F446RE_NODO_CODEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bcc  08006bcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bcc  08006bcc  00016bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd4  08006bd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000141fc  20000070  08006c4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001426c  08006c4c  0002426c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013508  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d76  00000000  00000000  000335a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002442e  00000000  00000000  000382a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158c3  00000000  00000000  0005c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d370c  00000000  00000000  00071f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014569d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004370  00000000  00000000  001456f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006b7c 	.word	0x08006b7c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08006b7c 	.word	0x08006b7c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <AIC3254_Init>:

/*
 * INIZIALIZE
 */

uint8_t AIC3254_Init(AIC3254_t *dev, I2C_HandleTypeDef *i2cHandle) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]

	/* Init Struct */
	dev->i2cHandle = i2cHandle;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	601a      	str	r2, [r3, #0]
	 * Set Stereo ADC with 48ksps Sample Rate and High Performance
	 */

	/* Initialize to Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f91e 	bl	800075e <AIC3254_SendCommand>
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <AIC3254_Init+0x2a>
 800052c:	2001      	movs	r0, #1
 800052e:	f006 fae5 	bl	8006afc <exit>

	/* S/W Reset to initialize all registers */

	status = AIC3254_SendCommand(dev, SW_RESET, 0x01);
 8000532:	2201      	movs	r2, #1
 8000534:	2101      	movs	r1, #1
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f911 	bl	800075e <AIC3254_SendCommand>
 800053c:	4603      	mov	r3, r0
 800053e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <AIC3254_Init+0x44>
 8000546:	2001      	movs	r0, #1
 8000548:	f006 fad8 	bl	8006afc <exit>

	/* Power up NADC divider with value 1 */

	status = AIC3254_SendCommand(dev, CSR_8, 0x81);
 800054c:	2281      	movs	r2, #129	; 0x81
 800054e:	2112      	movs	r1, #18
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f000 f904 	bl	800075e <AIC3254_SendCommand>
 8000556:	4603      	mov	r3, r0
 8000558:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800055a:	7bfb      	ldrb	r3, [r7, #15]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d002      	beq.n	8000566 <AIC3254_Init+0x5e>
 8000560:	2001      	movs	r0, #1
 8000562:	f006 facb 	bl	8006afc <exit>

	/* Power up MADC divider with value 2 */

	status = AIC3254_SendCommand(dev, CSR_9, 0x82);
 8000566:	2282      	movs	r2, #130	; 0x82
 8000568:	2113      	movs	r1, #19
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f8f7 	bl	800075e <AIC3254_SendCommand>
 8000570:	4603      	mov	r3, r0
 8000572:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <AIC3254_Init+0x78>
 800057a:	2001      	movs	r0, #1
 800057c:	f006 fabe 	bl	8006afc <exit>

	/* Program OSR for ADC to 128 */

	status = AIC3254_SendCommand(dev, AOSR, 0x80);
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	2114      	movs	r1, #20
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f8ea 	bl	800075e <AIC3254_SendCommand>
 800058a:	4603      	mov	r3, r0
 800058c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d002      	beq.n	800059a <AIC3254_Init+0x92>
 8000594:	2001      	movs	r0, #1
 8000596:	f006 fab1 	bl	8006afc <exit>

	/* Select ADC PRB_R1 */

	status = AIC3254_SendCommand(dev, PBCR, 0x01);
 800059a:	2201      	movs	r2, #1
 800059c:	213d      	movs	r1, #61	; 0x3d
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f8dd 	bl	800075e <AIC3254_SendCommand>
 80005a4:	4603      	mov	r3, r0
 80005a6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <AIC3254_Init+0xac>
 80005ae:	2001      	movs	r0, #1
 80005b0:	f006 faa4 	bl	8006afc <exit>

	/* Select Page 1 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f8d0 	bl	800075e <AIC3254_SendCommand>
 80005be:	4603      	mov	r3, r0
 80005c0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <AIC3254_Init+0xc6>
 80005c8:	2001      	movs	r0, #1
 80005ca:	f006 fa97 	bl	8006afc <exit>

	/* Disable Internal Crude AVdd in presence of external AVdd supply or before
	 * powering up internal AVdd LDO
	 */

	status = AIC3254_SendCommand(dev, POW_CONF, 0x08);
 80005ce:	2208      	movs	r2, #8
 80005d0:	2101      	movs	r1, #1
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f8c3 	bl	800075e <AIC3254_SendCommand>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <AIC3254_Init+0xe0>
 80005e2:	2001      	movs	r0, #1
 80005e4:	f006 fa8a 	bl	8006afc <exit>

	/* Enable Master Analog Power Control */

	status = AIC3254_SendCommand(dev, LDO_CR, 0x00);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2102      	movs	r1, #2
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f8b6 	bl	800075e <AIC3254_SendCommand>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <AIC3254_Init+0xfa>
 80005fc:	2001      	movs	r0, #1
 80005fe:	f006 fa7d 	bl	8006afc <exit>

	/* Set the input common mode to 0.9V */

	status = AIC3254_SendCommand(dev, CMM_CR, 0x00);
 8000602:	2200      	movs	r2, #0
 8000604:	210a      	movs	r1, #10
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f8a9 	bl	800075e <AIC3254_SendCommand>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <AIC3254_Init+0x114>
 8000616:	2001      	movs	r0, #1
 8000618:	f006 fa70 	bl	8006afc <exit>

	/* Select ADC PTM_R4 */

	status = AIC3254_SendCommand(dev, POW_TUN, 0x00);
 800061c:	2200      	movs	r2, #0
 800061e:	213d      	movs	r1, #61	; 0x3d
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f89c 	bl	800075e <AIC3254_SendCommand>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <AIC3254_Init+0x12e>
 8000630:	2001      	movs	r0, #1
 8000632:	f006 fa63 	bl	8006afc <exit>

	/* Set MicPGA startup delay to 3.1ms */

	status = AIC3254_SendCommand(dev, AIQC_CR, 0x32);
 8000636:	2232      	movs	r2, #50	; 0x32
 8000638:	2147      	movs	r1, #71	; 0x47
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f88f 	bl	800075e <AIC3254_SendCommand>
 8000640:	4603      	mov	r3, r0
 8000642:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <AIC3254_Init+0x148>
 800064a:	2001      	movs	r0, #1
 800064c:	f006 fa56 	bl	8006afc <exit>

	/* Set the REF charging time to 40ms */

	status = AIC3254_SendCommand(dev, REF_POW_CR, 0x01);
 8000650:	2201      	movs	r2, #1
 8000652:	217b      	movs	r1, #123	; 0x7b
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 f882 	bl	800075e <AIC3254_SendCommand>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <AIC3254_Init+0x162>
 8000664:	2001      	movs	r0, #1
 8000666:	f006 fa49 	bl	8006afc <exit>

	/* Route IN1L to LEFT_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, LROUTE_PCR, 0x80);
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	2134      	movs	r1, #52	; 0x34
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f875 	bl	800075e <AIC3254_SendCommand>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <AIC3254_Init+0x17c>
 800067e:	2001      	movs	r0, #1
 8000680:	f006 fa3c 	bl	8006afc <exit>

	/* Route Common Mode to LEFT_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, LROUTE_NCR, 0x80);
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	2136      	movs	r1, #54	; 0x36
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f868 	bl	800075e <AIC3254_SendCommand>
 800068e:	4603      	mov	r3, r0
 8000690:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <AIC3254_Init+0x196>
 8000698:	2001      	movs	r0, #1
 800069a:	f006 fa2f 	bl	8006afc <exit>

	/* Route IN1R to Right_P with 20K input impedance */

	status = AIC3254_SendCommand(dev, RROUTE_PCR, 0x80);
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	2137      	movs	r1, #55	; 0x37
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f85b 	bl	800075e <AIC3254_SendCommand>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <AIC3254_Init+0x1b0>
 80006b2:	2001      	movs	r0, #1
 80006b4:	f006 fa22 	bl	8006afc <exit>

	/* Route Common Mode to Right_M with impedance of 20K */

	status = AIC3254_SendCommand(dev, RROUTE_NCR, 0x80);
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	2139      	movs	r1, #57	; 0x39
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f84e 	bl	800075e <AIC3254_SendCommand>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <AIC3254_Init+0x1ca>
 80006cc:	2001      	movs	r0, #1
 80006ce:	f006 fa15 	bl	8006afc <exit>

	/* Unmute Left MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, LVOLUME_CR, 0x0c);
 80006d2:	220c      	movs	r2, #12
 80006d4:	213b      	movs	r1, #59	; 0x3b
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f841 	bl	800075e <AIC3254_SendCommand>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <AIC3254_Init+0x1e4>
 80006e6:	2001      	movs	r0, #1
 80006e8:	f006 fa08 	bl	8006afc <exit>

	/* Unmute Right MICPGA, Gain selection of 6dB to make channel gain 0dB
	 * Register of 6dB with input impedance of 20K -> Channel Gain of 0dB
	 */

	status = AIC3254_SendCommand(dev, RVOLUME_CR, 0x0c);
 80006ec:	220c      	movs	r2, #12
 80006ee:	213c      	movs	r1, #60	; 0x3c
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f834 	bl	800075e <AIC3254_SendCommand>
 80006f6:	4603      	mov	r3, r0
 80006f8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <AIC3254_Init+0x1fe>
 8000700:	2001      	movs	r0, #1
 8000702:	f006 f9fb 	bl	8006afc <exit>

	/* Select Page 0 */

	status = AIC3254_SendCommand(dev, PAGE_SELECT, PAGE_0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 f827 	bl	800075e <AIC3254_SendCommand>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <AIC3254_Init+0x218>
 800071a:	2001      	movs	r0, #1
 800071c:	f006 f9ee 	bl	8006afc <exit>

	/* Power up Left and Right ADC Channels */

	status = AIC3254_SendCommand(dev, CH_SETUP, 0xc0);
 8000720:	22c0      	movs	r2, #192	; 0xc0
 8000722:	2151      	movs	r1, #81	; 0x51
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f81a 	bl	800075e <AIC3254_SendCommand>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <AIC3254_Init+0x232>
 8000734:	2001      	movs	r0, #1
 8000736:	f006 f9e1 	bl	8006afc <exit>

	/* Unmute Left and Right ADC Digital Volume Control */

	status = AIC3254_SendCommand(dev, CH_GAIN, 0x00);
 800073a:	2200      	movs	r2, #0
 800073c:	2152      	movs	r1, #82	; 0x52
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f80d 	bl	800075e <AIC3254_SendCommand>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) exit(1);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <AIC3254_Init+0x24c>
 800074e:	2001      	movs	r0, #1
 8000750:	f006 f9d4 	bl	8006afc <exit>

	return status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <AIC3254_SendCommand>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef AIC3254_SendCommand(AIC3254_t *dev, uint8_t Register, uint8_t Data) {
 800075e:	b580      	push	{r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af04      	add	r7, sp, #16
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	70fb      	strb	r3, [r7, #3]
 800076a:	4613      	mov	r3, r2
 800076c:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, AIC3254_I2C_ADDR , Register, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	b29a      	uxth	r2, r3
 8000776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	1cbb      	adds	r3, r7, #2
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	2130      	movs	r1, #48	; 0x30
 8000788:	f001 fd08 	bl	800219c <HAL_I2C_Mem_Write>
 800078c:	4603      	mov	r3, r0

}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 fcc2 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f83c 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 f96c 	bl	8000a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a8:	f000 f94a 	bl	8000a40 <MX_DMA_Init>
  MX_I2C1_Init();
 80007ac:	f000 f8a2 	bl	80008f4 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 80007b0:	f000 f8fc 	bl	80009ac <MX_SDIO_SD_Init>
  MX_I2S2_Init();
 80007b4:	f000 f8cc 	bl	8000950 <MX_I2S2_Init>
  MX_FATFS_Init();
 80007b8:	f005 ffa0 	bl	80066fc <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80007bc:	f000 f916 	bl	80009ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize CODEC */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c6:	4810      	ldr	r0, [pc, #64]	; (8000808 <main+0x70>)
 80007c8:	f001 fb70 	bl	8001eac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fd1b 	bl	8001208 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <main+0x70>)
 80007da:	f001 fb67 	bl	8001eac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 fd12 	bl	8001208 <HAL_Delay>
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <main+0x70>)
 80007ec:	f001 fb5e 	bl	8001eac <HAL_GPIO_WritePin>
  AIC3254_Init(&codec, &hi2c1);
 80007f0:	4906      	ldr	r1, [pc, #24]	; (800080c <main+0x74>)
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <main+0x78>)
 80007f4:	f7ff fe88 	bl	8000508 <AIC3254_Init>

	/* Buffer Audio */


  HAL_I2S_Receive_DMA(&hi2s2, CODEC_BUF, CODEC_BUF_LEN);
 80007f8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80007fc:	4905      	ldr	r1, [pc, #20]	; (8000814 <main+0x7c>)
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <main+0x80>)
 8000800:	f002 f8dc 	bl	80029bc <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000804:	e7fe      	b.n	8000804 <main+0x6c>
 8000806:	bf00      	nop
 8000808:	40020400 	.word	0x40020400
 800080c:	2000008c 	.word	0x2000008c
 8000810:	20000250 	.word	0x20000250
 8000814:	20000254 	.word	0x20000254
 8000818:	200000e0 	.word	0x200000e0

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2234      	movs	r2, #52	; 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 f99e 	bl	8006b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	4b29      	ldr	r3, [pc, #164]	; (80008ec <SystemClock_Config+0xd0>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a28      	ldr	r2, [pc, #160]	; (80008ec <SystemClock_Config+0xd0>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <SystemClock_Config+0xd0>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <SystemClock_Config+0xd4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <SystemClock_Config+0xd4>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800089c:	2303      	movs	r3, #3
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 fac9 	bl	8003e40 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008b4:	f000 f9a0 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2302      	movs	r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fa7d 	bl	8002dd4 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80008e0:	f000 f98a 	bl	8000bf8 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3750      	adds	r7, #80	; 0x50
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f001 faef 	bl	8001f14 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f95c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000008c 	.word	0x2000008c
 8000948:	40005400 	.word	0x40005400
 800094c:	000186a0 	.word	0x000186a0

08000950 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <MX_I2S2_Init+0x58>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2S2_Init+0x54>)
 800095c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000960:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2S2_Init+0x54>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000978:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800097c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_I2S2_Init+0x54>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2S2_Init+0x54>)
 8000992:	f001 ff1b 	bl	80027cc <HAL_I2S_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800099c:	f000 f92c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000e0 	.word	0x200000e0
 80009a8:	40003800 	.word	0x40003800

080009ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009b2:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <MX_SDIO_SD_Init+0x3c>)
 80009b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <MX_SDIO_SD_Init+0x38>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000188 	.word	0x20000188
 80009e8:	40012c00 	.word	0x40012c00

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART2_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f004 fe35 	bl	8005692 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f8e3 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000020c 	.word	0x2000020c
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_DMA_Init+0x3c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200e      	movs	r0, #14
 8000a68:	f000 fccd 	bl	8001406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a6c:	200e      	movs	r0, #14
 8000a6e:	f000 fce6 	bl	800143e <HAL_NVIC_EnableIRQ>

}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a37      	ldr	r2, [pc, #220]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a30      	ldr	r2, [pc, #192]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a22      	ldr	r2, [pc, #136]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_GPIO_Init+0x118>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CODEC_Reset_GPIO_Port, CODEC_Reset_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b28:	481c      	ldr	r0, [pc, #112]	; (8000b9c <MX_GPIO_Init+0x11c>)
 8000b2a:	f001 f9bf 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <MX_GPIO_Init+0x120>)
 8000b36:	f001 f9b9 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CODEC_Reset_Pin */
  GPIO_InitStruct.Pin = CODEC_Reset_Pin;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CODEC_Reset_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4812      	ldr	r0, [pc, #72]	; (8000b9c <MX_GPIO_Init+0x11c>)
 8000b54:	f000 fffe 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x120>)
 8000b6e:	f000 fff1 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_GPIO_Init+0x120>)
 8000b8c:	f000 ffe2 	bl	8001b54 <HAL_GPIO_Init>

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000bb4:	f001 f97a 	bl	8001eac <HAL_GPIO_WritePin>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_I2S_RxCpltCallback+0x28>)
 8000bd4:	f001 f96a 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_I2S_Receive_DMA(&hi2s2, CODEC_BUF, CODEC_BUF_LEN);
 8000bd8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000bdc:	4904      	ldr	r1, [pc, #16]	; (8000bf0 <HAL_I2S_RxCpltCallback+0x2c>)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <HAL_I2S_RxCpltCallback+0x30>)
 8000be0:	f001 feec 	bl	80029bc <HAL_I2S_Receive_DMA>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	20000254 	.word	0x20000254
 8000bf4:	200000e0 	.word	0x200000e0

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c92:	23c0      	movs	r3, #192	; 0xc0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cae:	f000 ff51 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0a2      	sub	sp, #136	; 0x88
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	225c      	movs	r2, #92	; 0x5c
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 ff31 	bl	8006b6c <memset>
  if(hi2s->Instance==SPI2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <HAL_I2S_MspInit+0x168>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	f040 8096 	bne.w	8000e42 <HAL_I2S_MspInit+0x15e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000d1a:	2332      	movs	r3, #50	; 0x32
 8000d1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000d22:	2308      	movs	r3, #8
 8000d24:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000d32:	2300      	movs	r3, #0
 8000d34:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 f964 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_I2S_MspInit+0x66>
    {
      Error_Handler();
 8000d46:	f7ff ff57 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a3f      	ldr	r2, [pc, #252]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a38      	ldr	r2, [pc, #224]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_I2S_MspInit+0x16c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d9e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000da2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db2:	2305      	movs	r3, #5
 8000db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4825      	ldr	r0, [pc, #148]	; (8000e54 <HAL_I2S_MspInit+0x170>)
 8000dc0:	f000 fec8 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000de0:	4619      	mov	r1, r3
 8000de2:	481d      	ldr	r0, [pc, #116]	; (8000e58 <HAL_I2S_MspInit+0x174>)
 8000de4:	f000 feb6 	bl	8001b54 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000dea:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_I2S_MspInit+0x17c>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e06:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e28:	f000 fb24 	bl	8001474 <HAL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2S_MspInit+0x152>
    {
      Error_Handler();
 8000e32:	f7ff fee1 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_I2S_MspInit+0x178>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3788      	adds	r7, #136	; 0x88
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40003800 	.word	0x40003800
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	20000128 	.word	0x20000128
 8000e60:	40026058 	.word	0x40026058

08000e64 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0a2      	sub	sp, #136	; 0x88
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	225c      	movs	r2, #92	; 0x5c
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f005 fe71 	bl	8006b6c <memset>
  if(hsd->Instance==SDIO)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <HAL_SD_MspInit+0xf8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d15f      	bne.n	8000f54 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f8ae 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000eb2:	f7ff fea1 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a28      	ldr	r2, [pc, #160]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_SD_MspInit+0xfc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f0e:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480e      	ldr	r0, [pc, #56]	; (8000f64 <HAL_SD_MspInit+0x100>)
 8000f2c:	f000 fe12 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f42:	230c      	movs	r3, #12
 8000f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <HAL_SD_MspInit+0x104>)
 8000f50:	f000 fe00 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3788      	adds	r7, #136	; 0x88
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x84>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d12b      	bne.n	8000fe6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_UART_MspInit+0x8c>)
 8000fe2:	f000 fdb7 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001048:	f000 f8be 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001054:	4802      	ldr	r0, [pc, #8]	; (8001060 <DMA1_Stream3_IRQHandler+0x10>)
 8001056:	f000 fb13 	bl	8001680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000128 	.word	0x20000128

08001064 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106e:	f005 fd3f 	bl	8006af0 <__errno>
 8001072:	4603      	mov	r3, r0
 8001074:	2216      	movs	r2, #22
 8001076:	601a      	str	r2, [r3, #0]
	return -1;
 8001078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_exit>:

void _exit (int status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800108c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffe7 	bl	8001064 <_kill>
	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <_exit+0x24>)
 800109c:	f000 ff1f 	bl	8001ede <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f000 f8b1 	bl	8001208 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80010a6:	e7f6      	b.n	8001096 <_exit+0x12>
 80010a8:	40020000 	.word	0x40020000

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SystemInit+0x20>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <SystemInit+0x20>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d6:	490e      	ldr	r1, [pc, #56]	; (8001110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d8:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010ec:	4c0b      	ldr	r4, [pc, #44]	; (800111c <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fa:	f7ff ffd7 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f005 fd11 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001102:	f7ff fb49 	bl	8000798 <main>
  bx  lr    
 8001106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001110:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001114:	08006bdc 	.word	0x08006bdc
  ldr r2, =_sbss
 8001118:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800111c:	2001426c 	.word	0x2001426c

08001120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <HAL_Init+0x40>)
 800112e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_Init+0x40>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x40>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114c:	2003      	movs	r0, #3
 800114e:	f000 f94f 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001152:	200f      	movs	r0, #15
 8001154:	f000 f808 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001158:	f7ff fd54 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023c00 	.word	0x40023c00

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x54>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f967 	bl	800145a <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e00e      	b.n	80011b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b0f      	cmp	r3, #15
 800119a:	d80a      	bhi.n	80011b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800119c:	2200      	movs	r2, #0
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f000 f92f 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_InitTick+0x5c>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e000      	b.n	80011b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20014254 	.word	0x20014254

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20014254 	.word	0x20014254

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff ffee 	bl	80011f0 <HAL_GetTick>
 8001214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122e:	bf00      	nop
 8001230:	f7ff ffde 	bl	80011f0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff feb6 	bl	80011f0 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e099      	b.n	80015c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b0:	e00f      	b.n	80014d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b2:	f7ff fe9d 	bl	80011f0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d908      	bls.n	80014d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2220      	movs	r2, #32
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e078      	b.n	80015c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e8      	bne.n	80014b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <HAL_DMA_Init+0x158>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b04      	cmp	r3, #4
 800152a:	d107      	bne.n	800153c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4313      	orrs	r3, r2
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f023 0307 	bic.w	r3, r3, #7
 8001552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4313      	orrs	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b04      	cmp	r3, #4
 8001564:	d117      	bne.n	8001596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fa6f 	bl	8001a5c <DMA_CheckFifoParam>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2240      	movs	r2, #64	; 0x40
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001592:	2301      	movs	r3, #1
 8001594:	e016      	b.n	80015c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa26 	bl	80019f0 <DMA_CalcBaseAndBitshift>
 80015a4:	4603      	mov	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f010803f 	.word	0xf010803f

080015d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Start_IT+0x26>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e040      	b.n	8001678 <HAL_DMA_Start_IT+0xa8>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d12f      	bne.n	800166a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2202      	movs	r2, #2
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2200      	movs	r2, #0
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f9b8 	bl	8001994 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	223f      	movs	r2, #63	; 0x3f
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0216 	orr.w	r2, r2, #22
 800163e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0208 	orr.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e005      	b.n	8001676 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001672:	2302      	movs	r3, #2
 8001674:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001676:	7dfb      	ldrb	r3, [r7, #23]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800168c:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <HAL_DMA_IRQHandler+0x248>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a8e      	ldr	r2, [pc, #568]	; (80018cc <HAL_DMA_IRQHandler+0x24c>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0a9b      	lsrs	r3, r3, #10
 8001698:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2208      	movs	r2, #8
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01a      	beq.n	80016ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0204 	bic.w	r2, r2, #4
 80016d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2208      	movs	r2, #8
 80016da:	409a      	lsls	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2201      	movs	r2, #1
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d012      	beq.n	8001722 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2201      	movs	r2, #1
 8001710:	409a      	lsls	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f043 0202 	orr.w	r2, r3, #2
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	2204      	movs	r2, #4
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d012      	beq.n	8001758 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2204      	movs	r2, #4
 8001746:	409a      	lsls	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	f043 0204 	orr.w	r2, r3, #4
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	2210      	movs	r2, #16
 800175e:	409a      	lsls	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d043      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d03c      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2210      	movs	r2, #16
 800177c:	409a      	lsls	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d018      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d024      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	4798      	blx	r3
 80017ae:	e01f      	b.n	80017f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
 80017c0:	e016      	b.n	80017f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0208 	bic.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2220      	movs	r2, #32
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 808f 	beq.w	8001920 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8087 	beq.w	8001920 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2220      	movs	r2, #32
 8001818:	409a      	lsls	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b05      	cmp	r3, #5
 8001828:	d136      	bne.n	8001898 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0216 	bic.w	r2, r2, #22
 8001838:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001848:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_DMA_IRQHandler+0x1da>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0208 	bic.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	223f      	movs	r2, #63	; 0x3f
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188a:	2b00      	cmp	r3, #0
 800188c:	d07e      	beq.n	800198c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
        }
        return;
 8001896:	e079      	b.n	800198c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01d      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d10d      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d031      	beq.n	8001920 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e02c      	b.n	8001920 <HAL_DMA_IRQHandler+0x2a0>
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000
 80018cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
 80018e0:	e01e      	b.n	8001920 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10f      	bne.n	8001910 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0210 	bic.w	r2, r2, #16
 80018fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	2b00      	cmp	r3, #0
 8001926:	d032      	beq.n	800198e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d022      	beq.n	800197a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2205      	movs	r2, #5
 8001938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d307      	bcc.n	8001968 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f2      	bne.n	800194c <HAL_DMA_IRQHandler+0x2cc>
 8001966:	e000      	b.n	800196a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001968:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
 800198a:	e000      	b.n	800198e <HAL_DMA_IRQHandler+0x30e>
        return;
 800198c:	bf00      	nop
    }
  }
}
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b40      	cmp	r3, #64	; 0x40
 80019c0:	d108      	bne.n	80019d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019d2:	e007      	b.n	80019e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3b10      	subs	r3, #16
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <DMA_CalcBaseAndBitshift+0x64>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <DMA_CalcBaseAndBitshift+0x68>)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d909      	bls.n	8001a32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a26:	f023 0303 	bic.w	r3, r3, #3
 8001a2a:	1d1a      	adds	r2, r3, #4
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a30:	e007      	b.n	8001a42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	aaaaaaab 	.word	0xaaaaaaab
 8001a58:	08006bac 	.word	0x08006bac

08001a5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d11f      	bne.n	8001ab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d856      	bhi.n	8001b2a <DMA_CheckFifoParam+0xce>
 8001a7c:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <DMA_CheckFifoParam+0x28>)
 8001a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a82:	bf00      	nop
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001aa7 	.word	0x08001aa7
 8001a8c:	08001a95 	.word	0x08001a95
 8001a90:	08001b2b 	.word	0x08001b2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d046      	beq.n	8001b2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa4:	e043      	b.n	8001b2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aae:	d140      	bne.n	8001b32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab4:	e03d      	b.n	8001b32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abe:	d121      	bne.n	8001b04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d837      	bhi.n	8001b36 <DMA_CheckFifoParam+0xda>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <DMA_CheckFifoParam+0x70>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001ae3 	.word	0x08001ae3
 8001ad4:	08001add 	.word	0x08001add
 8001ad8:	08001af5 	.word	0x08001af5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae0:	e030      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d025      	beq.n	8001b3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af2:	e022      	b.n	8001b3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001afc:	d11f      	bne.n	8001b3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b02:	e01c      	b.n	8001b3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d903      	bls.n	8001b12 <DMA_CheckFifoParam+0xb6>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d003      	beq.n	8001b18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b10:	e018      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	73fb      	strb	r3, [r7, #15]
      break;
 8001b16:	e015      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      break;
 8001b28:	e00b      	b.n	8001b42 <DMA_CheckFifoParam+0xe6>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e00a      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e008      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e006      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e004      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e002      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b3e:	bf00      	nop
 8001b40:	e000      	b.n	8001b44 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
    }
  } 
  
  return status; 
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	; 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	e165      	b.n	8001e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f040 8154 	bne.w	8001e36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d005      	beq.n	8001ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	69b9      	ldr	r1, [r7, #24]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80ae 	beq.w	8001e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a5c      	ldr	r2, [pc, #368]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_GPIO_Init+0x300>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf6:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_GPIO_Init+0x304>)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x308>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x21a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	; (8001e60 <HAL_GPIO_Init+0x30c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x216>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4d      	ldr	r2, [pc, #308]	; (8001e64 <HAL_GPIO_Init+0x310>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x212>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <HAL_GPIO_Init+0x314>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x20e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_GPIO_Init+0x318>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x20a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_GPIO_Init+0x31c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a49      	ldr	r2, [pc, #292]	; (8001e74 <HAL_GPIO_Init+0x320>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x202>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e00c      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00a      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e008      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d5e:	2304      	movs	r3, #4
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d62:	2303      	movs	r3, #3
 8001d64:	e004      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x21c>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f002 0203 	and.w	r2, r2, #3
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	4093      	lsls	r3, r2
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d80:	4935      	ldr	r1, [pc, #212]	; (8001e58 <HAL_GPIO_Init+0x304>)
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	3302      	adds	r3, #2
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001db2:	4a31      	ldr	r2, [pc, #196]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e30:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_GPIO_Init+0x324>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f67f ae96 	bls.w	8001b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	887b      	ldrh	r3, [r7, #2]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	e001      	b.n	8001e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e12b      	b.n	800217e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fe8a 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2224      	movs	r2, #36	; 0x24
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f78:	f001 f81e 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8001f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a81      	ldr	r2, [pc, #516]	; (8002188 <HAL_I2C_Init+0x274>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d807      	bhi.n	8001f98 <HAL_I2C_Init+0x84>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a80      	ldr	r2, [pc, #512]	; (800218c <HAL_I2C_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf94      	ite	ls
 8001f90:	2301      	movls	r3, #1
 8001f92:	2300      	movhi	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e006      	b.n	8001fa6 <HAL_I2C_Init+0x92>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a7d      	ldr	r2, [pc, #500]	; (8002190 <HAL_I2C_Init+0x27c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0e7      	b.n	800217e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4a78      	ldr	r2, [pc, #480]	; (8002194 <HAL_I2C_Init+0x280>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	0c9b      	lsrs	r3, r3, #18
 8001fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a6a      	ldr	r2, [pc, #424]	; (8002188 <HAL_I2C_Init+0x274>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_I2C_Init+0xd4>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	e009      	b.n	8001ffc <HAL_I2C_Init+0xe8>
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	4a69      	ldr	r2, [pc, #420]	; (8002198 <HAL_I2C_Init+0x284>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	430b      	orrs	r3, r1
 8002002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800200e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	495c      	ldr	r1, [pc, #368]	; (8002188 <HAL_I2C_Init+0x274>)
 8002018:	428b      	cmp	r3, r1
 800201a:	d819      	bhi.n	8002050 <HAL_I2C_Init+0x13c>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1e59      	subs	r1, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	fbb1 f3f3 	udiv	r3, r1, r3
 800202a:	1c59      	adds	r1, r3, #1
 800202c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002030:	400b      	ands	r3, r1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <HAL_I2C_Init+0x138>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1e59      	subs	r1, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fbb1 f3f3 	udiv	r3, r1, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	e051      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 800204c:	2304      	movs	r3, #4
 800204e:	e04f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <HAL_I2C_Init+0x168>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1e58      	subs	r0, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	440b      	add	r3, r1
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	3301      	adds	r3, #1
 800206c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e012      	b.n	80020a2 <HAL_I2C_Init+0x18e>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	0099      	lsls	r1, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Init+0x196>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e022      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10e      	bne.n	80020d0 <HAL_I2C_Init+0x1bc>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1e58      	subs	r0, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	440b      	add	r3, r1
 80020c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	e00f      	b.n	80020f0 <HAL_I2C_Init+0x1dc>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	0099      	lsls	r1, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	6809      	ldr	r1, [r1, #0]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800211e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6911      	ldr	r1, [r2, #16]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68d2      	ldr	r2, [r2, #12]
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	000186a0 	.word	0x000186a0
 800218c:	001e847f 	.word	0x001e847f
 8002190:	003d08ff 	.word	0x003d08ff
 8002194:	431bde83 	.word	0x431bde83
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	460b      	mov	r3, r1
 80021b0:	813b      	strh	r3, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b6:	f7ff f81b 	bl	80011f0 <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	f040 80d9 	bne.w	800237c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2319      	movs	r3, #25
 80021d0:	2201      	movs	r2, #1
 80021d2:	496d      	ldr	r1, [pc, #436]	; (8002388 <HAL_I2C_Mem_Write+0x1ec>)
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f971 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Mem_Write+0x56>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e0c5      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d007      	beq.n	8002218 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2221      	movs	r2, #33	; 0x21
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2240      	movs	r2, #64	; 0x40
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a3a      	ldr	r2, [r7, #32]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a4d      	ldr	r2, [pc, #308]	; (800238c <HAL_I2C_Mem_Write+0x1f0>)
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800225a:	88f8      	ldrh	r0, [r7, #6]
 800225c:	893a      	ldrh	r2, [r7, #8]
 800225e:	8979      	ldrh	r1, [r7, #10]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f890 	bl	8002390 <I2C_RequestMemoryWrite>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d052      	beq.n	800231c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e081      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f9f2 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Mem_Write+0x180>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1aa      	bne.n	800227a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f9de 	bl	80026ea <I2C_WaitOnBTFFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e016      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	4608      	mov	r0, r1
 800239a:	4611      	mov	r1, r2
 800239c:	461a      	mov	r2, r3
 800239e:	4603      	mov	r3, r0
 80023a0:	817b      	strh	r3, [r7, #10]
 80023a2:	460b      	mov	r3, r1
 80023a4:	813b      	strh	r3, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f878 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e0:	d103      	bne.n	80023ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e05f      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	492d      	ldr	r1, [pc, #180]	; (80024b8 <I2C_RequestMemoryWrite+0x128>)
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f8b0 	bl	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e04c      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	6a39      	ldr	r1, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f91a 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e02b      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800245c:	893b      	ldrh	r3, [r7, #8]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	e021      	b.n	80024ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002468:	893b      	ldrh	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b29b      	uxth	r3, r3
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	6a39      	ldr	r1, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8f4 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b04      	cmp	r3, #4
 800248c:	d107      	bne.n	800249e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e005      	b.n	80024ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	00010002 	.word	0x00010002

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e025      	b.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d4:	d021      	beq.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe fe8b 	bl	80011f0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d116      	bne.n	800251a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e023      	b.n	8002562 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d10d      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	43da      	mvns	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4013      	ands	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	bf0c      	ite	eq
 8002536:	2301      	moveq	r3, #1
 8002538:	2300      	movne	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	461a      	mov	r2, r3
 800253e:	e00c      	b.n	800255a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	43da      	mvns	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4013      	ands	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf0c      	ite	eq
 8002552:	2301      	moveq	r3, #1
 8002554:	2300      	movne	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	429a      	cmp	r2, r3
 800255e:	d0b6      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002578:	e051      	b.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002588:	d123      	bne.n	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0204 	orr.w	r2, r3, #4
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e046      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d8:	d021      	beq.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025da:	f7fe fe09 	bl	80011f0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d116      	bne.n	800261e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e020      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	0c1b      	lsrs	r3, r3, #16
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10c      	bne.n	8002642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4013      	ands	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e00b      	b.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d18d      	bne.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	e02d      	b.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f878 	bl	800276c <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02d      	b.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d021      	beq.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fdaf 	bl	80011f0 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	d1ca      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f6:	e02d      	b.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f837 	bl	800276c <I2C_IsAcknowledgeFailed>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e02d      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270e:	d021      	beq.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002710:	f7fe fd6e 	bl	80011f0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d302      	bcc.n	8002726 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d116      	bne.n	8002754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b04      	cmp	r3, #4
 8002760:	d1ca      	bne.n	80026f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002782:	d11b      	bne.n	80027bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800278c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e1      	b.n	80029a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a6d      	ldr	r2, [pc, #436]	; (80029ac <HAL_I2S_Init+0x1e0>)
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe fa73 	bl	8000ce4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002814:	f023 030f 	bic.w	r3, r3, #15
 8002818:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2202      	movs	r2, #2
 8002820:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d06f      	beq.n	800290a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002832:	2310      	movs	r3, #16
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e001      	b.n	800283c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b20      	cmp	r3, #32
 8002842:	d802      	bhi.n	800284a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_I2S_Init+0x1e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_I2S_Init+0x92>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a56      	ldr	r2, [pc, #344]	; (80029b4 <HAL_I2S_Init+0x1e8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d104      	bne.n	8002868 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800285e:	2001      	movs	r0, #1
 8002860:	f000 fefc 	bl	800365c <HAL_RCCEx_GetPeriphCLKFreq>
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	e003      	b.n	8002870 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002868:	2002      	movs	r0, #2
 800286a:	f000 fef7 	bl	800365c <HAL_RCCEx_GetPeriphCLKFreq>
 800286e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	d125      	bne.n	80028c6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d010      	beq.n	80028a4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	fbb2 f2f3 	udiv	r2, r2, r3
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	3305      	adds	r3, #5
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	e01f      	b.n	80028e4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c0:	3305      	adds	r3, #5
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	e00e      	b.n	80028e4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	3305      	adds	r3, #5
 80028e2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_I2S_Init+0x1ec>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e003      	b.n	8002912 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800290a:	2302      	movs	r3, #2
 800290c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d902      	bls.n	800291e <HAL_I2S_Init+0x152>
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d907      	bls.n	800292e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f043 0210 	orr.w	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e039      	b.n	80029a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	ea42 0103 	orr.w	r1, r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	430a      	orrs	r2, r1
 8002940:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6851      	ldr	r1, [r2, #4]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	4311      	orrs	r1, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6992      	ldr	r2, [r2, #24]
 8002964:	430a      	orrs	r2, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002970:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b30      	cmp	r3, #48	; 0x30
 8002978:	d003      	beq.n	8002982 <HAL_I2S_Init+0x1b6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2bb0      	cmp	r3, #176	; 0xb0
 8002980:	d107      	bne.n	8002992 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002990:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	08002cc1 	.word	0x08002cc1
 80029b0:	40003800 	.word	0x40003800
 80029b4:	40003c00 	.word	0x40003c00
 80029b8:	cccccccd 	.word	0xcccccccd

080029bc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_I2S_Receive_DMA+0x1a>
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0a1      	b.n	8002b1e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_I2S_Receive_DMA+0x2e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e099      	b.n	8002b1e <HAL_I2S_Receive_DMA+0x162>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e089      	b.n	8002b1e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d002      	beq.n	8002a36 <HAL_I2S_Receive_DMA+0x7a>
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10a      	bne.n	8002a4c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	865a      	strh	r2, [r3, #50]	; 0x32
 8002a4a:	e005      	b.n	8002a58 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_I2S_Receive_DMA+0x16c>)
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_I2S_Receive_DMA+0x170>)
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <HAL_I2S_Receive_DMA+0x174>)
 8002a6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a7e:	d10a      	bne.n	8002a96 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002aac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002aae:	f7fe fd8f 	bl	80015d0 <HAL_DMA_Start_IT>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f043 0208 	orr.w	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e022      	b.n	8002b1e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d107      	bne.n	8002af6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	08002b9f 	.word	0x08002b9f
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002bbb 	.word	0x08002bbb

08002b34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7fe f817 	bl	8000bc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7fd fff9 	bl	8000ba4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0203 	bic.w	r2, r2, #3
 8002bd6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f043 0208 	orr.w	r2, r3, #8
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ffa5 	bl	8002b48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c9a      	adds	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c4a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff6d 	bl	8002b34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	b292      	uxth	r2, r2
 8002c76:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	1c9a      	adds	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ca8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fd ff86 	bl	8000bc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d13a      	bne.n	8002d52 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d109      	bne.n	8002cfa <I2S_IRQHandler+0x3a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d102      	bne.n	8002cfa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ffb4 	bl	8002c62 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b40      	cmp	r3, #64	; 0x40
 8002d02:	d126      	bne.n	8002d52 <I2S_IRQHandler+0x92>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d11f      	bne.n	8002d52 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d20:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	f043 0202 	orr.w	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fefb 	bl	8002b48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d136      	bne.n	8002dcc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d109      	bne.n	8002d7c <I2S_IRQHandler+0xbc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d102      	bne.n	8002d7c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff45 	bl	8002c06 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d122      	bne.n	8002dcc <I2S_IRQHandler+0x10c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d11b      	bne.n	8002dcc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff febe 	bl	8002b48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0cc      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d90c      	bls.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b65      	ldr	r3, [pc, #404]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b63      	ldr	r3, [pc, #396]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0b8      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e40:	4b53      	ldr	r3, [pc, #332]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a52      	ldr	r2, [pc, #328]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	494d      	ldr	r1, [pc, #308]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e07f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e067      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb2:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4934      	ldr	r1, [pc, #208]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f994 	bl	80011f0 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ecc:	f7fe f990 	bl	80011f0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e04f      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 020c 	and.w	r2, r3, #12
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1eb      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d20c      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e032      	b.n	8002f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4916      	ldr	r1, [pc, #88]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	490e      	ldr	r1, [pc, #56]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f5a:	f000 fdc7 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490a      	ldr	r1, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_RCC_ClockConfig+0x1c8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f8f4 	bl	8001168 <HAL_InitTick>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	08006b94 	.word	0x08006b94
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08006ba4 	.word	0x08006ba4

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffdc 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	08006ba4 	.word	0x08006ba4

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003046:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	496c      	ldr	r1, [pc, #432]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800305e:	2301      	movs	r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800306e:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003074:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	4960      	ldr	r1, [pc, #384]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800308c:	2301      	movs	r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800309c:	4b58      	ldr	r3, [pc, #352]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800309e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4955      	ldr	r1, [pc, #340]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d101      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80030bc:	2301      	movs	r3, #1
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d017      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d8:	4b49      	ldr	r3, [pc, #292]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	4946      	ldr	r1, [pc, #280]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d101      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80030f8:	2301      	movs	r3, #1
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 808a 	beq.w	800322a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	4a38      	ldr	r2, [pc, #224]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	; 0x40
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003132:	4b34      	ldr	r3, [pc, #208]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a33      	ldr	r2, [pc, #204]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800313e:	f7fe f857 	bl	80011f0 <HAL_GetTick>
 8003142:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003146:	f7fe f853 	bl	80011f0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e278      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02f      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317c:	6a3a      	ldr	r2, [r7, #32]
 800317e:	429a      	cmp	r2, r3
 8003180:	d028      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003198:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d114      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031aa:	f7fe f821 	bl	80011f0 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe f81d 	bl	80011f0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e240      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e0:	d114      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f6:	4902      	ldr	r1, [pc, #8]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
 80031fc:	e00c      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40007000 	.word	0x40007000
 8003208:	42470e40 	.word	0x42470e40
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003212:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800321a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003224:	4944      	ldr	r1, [pc, #272]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003226:	4313      	orrs	r3, r2
 8003228:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800323e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800324c:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800324e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325a:	4937      	ldr	r1, [pc, #220]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003274:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327c:	492e      	ldr	r1, [pc, #184]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d011      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003290:	4b29      	ldr	r3, [pc, #164]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003296:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	4926      	ldr	r1, [pc, #152]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ae:	d101      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80032b0:	2301      	movs	r3, #1
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	491a      	ldr	r1, [pc, #104]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d011      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	4911      	ldr	r1, [pc, #68]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003300:	d101      	bne.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003302:	2301      	movs	r3, #1
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d005      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003314:	f040 80ff 	bne.w	8003516 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800331e:	f7fd ff67 	bl	80011f0 <HAL_GetTick>
 8003322:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003324:	e00e      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003326:	f7fd ff63 	bl	80011f0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d907      	bls.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e188      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003338:	40023800 	.word	0x40023800
 800333c:	424711e0 	.word	0x424711e0
 8003340:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003344:	4b7e      	ldr	r3, [pc, #504]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1ea      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800336c:	2b00      	cmp	r3, #0
 800336e:	d028      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d124      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003378:	4b71      	ldr	r3, [pc, #452]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800337a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	3301      	adds	r3, #1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800338a:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800338c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003390:	0e1b      	lsrs	r3, r3, #24
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	3b01      	subs	r3, #1
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	431a      	orrs	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	071b      	lsls	r3, r3, #28
 80033ba:	4961      	ldr	r1, [pc, #388]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d035      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ec:	d130      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80033ee:	4b54      	ldr	r3, [pc, #336]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	019b      	lsls	r3, r3, #6
 8003418:	431a      	orrs	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	431a      	orrs	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	071b      	lsls	r3, r3, #28
 8003430:	4943      	ldr	r1, [pc, #268]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800343a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343e:	f023 021f 	bic.w	r2, r3, #31
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003458:	2b00      	cmp	r3, #0
 800345a:	d029      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003464:	d124      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003466:	4b36      	ldr	r3, [pc, #216]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	3301      	adds	r3, #1
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347e:	0f1b      	lsrs	r3, r3, #28
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	019b      	lsls	r3, r3, #6
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	431a      	orrs	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	071b      	lsls	r3, r3, #28
 80034a8:	4925      	ldr	r1, [pc, #148]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d016      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	071b      	lsls	r3, r3, #28
 80034e2:	4917      	ldr	r1, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034f0:	f7fd fe7e 	bl	80011f0 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034f8:	f7fd fe7a 	bl	80011f0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e09f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b01      	cmp	r3, #1
 800351a:	f040 8095 	bne.w	8003648 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003524:	f7fd fe64 	bl	80011f0 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800352a:	e00f      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800352c:	f7fd fe60 	bl	80011f0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d908      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e085      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	42470068 	.word	0x42470068
 8003548:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d0e8      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02b      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d127      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003582:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	0c1b      	lsrs	r3, r3, #16
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	3301      	adds	r3, #1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	431a      	orrs	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	4928      	ldr	r1, [pc, #160]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	3b01      	subs	r3, #1
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	4922      	ldr	r1, [pc, #136]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01d      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e6:	d118      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	0e1b      	lsrs	r3, r3, #24
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	019b      	lsls	r3, r3, #6
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4910      	ldr	r1, [pc, #64]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd fde6 	bl	80011f0 <HAL_GetTick>
 8003624:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003628:	f7fd fde2 	bl	80011f0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e007      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003646:	d1ef      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3730      	adds	r7, #48	; 0x30
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	42470070 	.word	0x42470070

0800365c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	2b07      	cmp	r3, #7
 8003682:	f200 8224 	bhi.w	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800388f 	.word	0x0800388f
 8003690:	080039b9 	.word	0x080039b9
 8003694:	08003acf 	.word	0x08003acf
 8003698:	080036ad 	.word	0x080036ad
 800369c:	08003acf 	.word	0x08003acf
 80036a0:	08003acf 	.word	0x08003acf
 80036a4:	08003acf 	.word	0x08003acf
 80036a8:	080036ad 	.word	0x080036ad
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80036ac:	4ba8      	ldr	r3, [pc, #672]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036c2:	f000 80d6 	beq.w	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036cc:	f200 80dd 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d6:	f000 809f 	beq.w	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e0:	f200 80d3 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d05b      	beq.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	f200 80ca 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036fc:	f000 80b6 	beq.w	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003706:	f200 80c0 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003710:	f000 8082 	beq.w	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371a:	f200 80b6 	bhi.w	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d03b      	beq.n	80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800372c:	e0ad      	b.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800372e:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800373a:	4b85      	ldr	r3, [pc, #532]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	4a83      	ldr	r2, [pc, #524]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	e008      	b.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800374e:	4b80      	ldr	r3, [pc, #512]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003758:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003760:	4b7b      	ldr	r3, [pc, #492]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	0e1b      	lsrs	r3, r3, #24
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800376e:	4b78      	ldr	r3, [pc, #480]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	fb03 f202 	mul.w	r2, r3, r2
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003788:	4b71      	ldr	r3, [pc, #452]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	3301      	adds	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	61fb      	str	r3, [r7, #28]
          break;
 80037a2:	e073      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80037a4:	4b6a      	ldr	r3, [pc, #424]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037b0:	4b67      	ldr	r3, [pc, #412]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ba:	4a66      	ldr	r2, [pc, #408]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ce:	4a62      	ldr	r2, [pc, #392]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80037d6:	4b5e      	ldr	r3, [pc, #376]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	0e1b      	lsrs	r3, r3, #24
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80037e4:	4b5a      	ldr	r3, [pc, #360]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	fb03 f202 	mul.w	r2, r3, r2
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80037fe:	4b54      	ldr	r3, [pc, #336]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	61fb      	str	r3, [r7, #28]
          break;
 8003816:	e039      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003818:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003824:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800382c:	4a49      	ldr	r2, [pc, #292]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e007      	b.n	8003846 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003836:	4b46      	ldr	r3, [pc, #280]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383e:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003846:	4b42      	ldr	r3, [pc, #264]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003852:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	fb03 f202 	mul.w	r2, r3, r2
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	61fb      	str	r3, [r7, #28]
          break;
 800386a:	e00f      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800386c:	4b3b      	ldr	r3, [pc, #236]	; (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800386e:	61fb      	str	r3, [r7, #28]
          break;
 8003870:	e00c      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003872:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800387e:	4b35      	ldr	r3, [pc, #212]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003880:	61fb      	str	r3, [r7, #28]
          break;
 8003882:	e003      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003886:	61fb      	str	r3, [r7, #28]
          break;
 8003888:	e000      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800388a:	bf00      	nop
        }
      }
      break;
 800388c:	e11f      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800388e:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003894:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038a0:	d079      	beq.n	8003996 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80038a8:	f200 8082 	bhi.w	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b2:	d03c      	beq.n	800392e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d879      	bhi.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c8:	d172      	bne.n	80039b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80038cc:	61fb      	str	r3, [r7, #28]
          break;
 80038ce:	e072      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038d0:	4b1f      	ldr	r3, [pc, #124]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d109      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e008      	b.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80038fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003902:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800391e:	0f1b      	lsrs	r3, r3, #28
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	61fb      	str	r3, [r7, #28]
          break;
 800392c:	e043      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d111      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e010      	b.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	00f42400 	.word	0x00f42400
 8003958:	017d7840 	.word	0x017d7840
 800395c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003960:	4b5e      	ldr	r3, [pc, #376]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003968:	4a5d      	ldr	r2, [pc, #372]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003970:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	099b      	lsrs	r3, r3, #6
 8003976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	0f1b      	lsrs	r3, r3, #28
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	61fb      	str	r3, [r7, #28]
          break;
 8003994:	e00f      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003996:	4b51      	ldr	r3, [pc, #324]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a2:	d102      	bne.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80039a6:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80039a8:	e005      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80039aa:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80039ac:	61fb      	str	r3, [r7, #28]
          break;
 80039ae:	e002      	b.n	80039b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
          break;
 80039b4:	bf00      	nop
        }
      }
      break;
 80039b6:	e08a      	b.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80039b8:	4b48      	ldr	r3, [pc, #288]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039be:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80039ca:	d06f      	beq.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80039d2:	d878      	bhi.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039da:	d03c      	beq.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e2:	d870      	bhi.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d169      	bne.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80039f2:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80039f4:	61fb      	str	r3, [r7, #28]
          break;
 80039f6:	e069      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039f8:	4b38      	ldr	r3, [pc, #224]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a04:	d109      	bne.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a06:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e008      	b.n	8003a2c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003a1a:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a24:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a40:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a46:	0f1b      	lsrs	r3, r3, #28
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	61fb      	str	r3, [r7, #28]
          break;
 8003a54:	e03a      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a62:	d108      	bne.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e007      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a76:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	0f1b      	lsrs	r3, r3, #28
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	61fb      	str	r3, [r7, #28]
          break;
 8003aaa:	e00f      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003abc:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003ac2:	61fb      	str	r3, [r7, #28]
          break;
 8003ac4:	e002      	b.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
          break;
 8003aca:	bf00      	nop
        }
      }
      break;
 8003acc:	bf00      	nop
    }
  }
  return frequency;
 8003ace:	69fb      	ldr	r3, [r7, #28]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3724      	adds	r7, #36	; 0x24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	017d7840 	.word	0x017d7840
 8003ae8:	00bb8000 	.word	0x00bb8000

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b0a6      	sub	sp, #152	; 0x98
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b12:	4bc8      	ldr	r3, [pc, #800]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	f200 817e 	bhi.w	8003e1c <HAL_RCC_GetSysClockFreq+0x330>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003e1d 	.word	0x08003e1d
 8003b30:	08003e1d 	.word	0x08003e1d
 8003b34:	08003e1d 	.word	0x08003e1d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003e1d 	.word	0x08003e1d
 8003b40:	08003e1d 	.word	0x08003e1d
 8003b44:	08003e1d 	.word	0x08003e1d
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003e1d 	.word	0x08003e1d
 8003b50:	08003e1d 	.word	0x08003e1d
 8003b54:	08003e1d 	.word	0x08003e1d
 8003b58:	08003cd7 	.word	0x08003cd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4bb6      	ldr	r3, [pc, #728]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003b62:	e15f      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b64:	4bb5      	ldr	r3, [pc, #724]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x350>)
 8003b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003b6a:	e15b      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b6c:	4bb1      	ldr	r3, [pc, #708]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b78:	4bae      	ldr	r3, [pc, #696]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d031      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b84:	4bab      	ldr	r3, [pc, #684]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	099b      	lsrs	r3, r3, #6
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	663b      	str	r3, [r7, #96]	; 0x60
 8003b98:	2300      	movs	r3, #0
 8003b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8003b9c:	4ba7      	ldr	r3, [pc, #668]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x350>)
 8003b9e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ba2:	462a      	mov	r2, r5
 8003ba4:	fb03 f202 	mul.w	r2, r3, r2
 8003ba8:	2300      	movs	r3, #0
 8003baa:	4621      	mov	r1, r4
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4aa2      	ldr	r2, [pc, #648]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x350>)
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	fba1 1202 	umull	r1, r2, r1, r2
 8003bba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	67ba      	str	r2, [r7, #120]	; 0x78
 8003bc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003bc2:	4413      	add	r3, r2
 8003bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bca:	2200      	movs	r2, #0
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003bd8:	f7fc fb14 	bl	8000204 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be6:	e064      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003be8:	4b92      	ldr	r3, [pc, #584]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	2200      	movs	r2, #0
 8003bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf2:	657a      	str	r2, [r7, #84]	; 0x54
 8003bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c04:	4622      	mov	r2, r4
 8003c06:	462b      	mov	r3, r5
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c16:	0150      	lsls	r0, r2, #5
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	1a51      	subs	r1, r2, r1
 8003c20:	6139      	str	r1, [r7, #16]
 8003c22:	4629      	mov	r1, r5
 8003c24:	eb63 0301 	sbc.w	r3, r3, r1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c36:	4659      	mov	r1, fp
 8003c38:	018b      	lsls	r3, r1, #6
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c40:	4651      	mov	r1, sl
 8003c42:	018a      	lsls	r2, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ebb2 0801 	subs.w	r8, r2, r1
 8003c4a:	4659      	mov	r1, fp
 8003c4c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c64:	4690      	mov	r8, r2
 8003c66:	4699      	mov	r9, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	eb18 0303 	adds.w	r3, r8, r3
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	462b      	mov	r3, r5
 8003c72:	eb49 0303 	adc.w	r3, r9, r3
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c84:	4629      	mov	r1, r5
 8003c86:	028b      	lsls	r3, r1, #10
 8003c88:	4621      	mov	r1, r4
 8003c8a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c8e:	4621      	mov	r1, r4
 8003c90:	028a      	lsls	r2, r1, #10
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ca4:	f7fc faae 	bl	8000204 <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cb2:	4b60      	ldr	r3, [pc, #384]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003cc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003cd4:	e0a6      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce2:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02a      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	099b      	lsrs	r3, r3, #6
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d00:	2100      	movs	r1, #0
 8003d02:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x350>)
 8003d04:	fb03 f201 	mul.w	r2, r3, r1
 8003d08:	2300      	movs	r3, #0
 8003d0a:	fb00 f303 	mul.w	r3, r0, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x350>)
 8003d12:	fba0 1202 	umull	r1, r2, r0, r2
 8003d16:	677a      	str	r2, [r7, #116]	; 0x74
 8003d18:	460a      	mov	r2, r1
 8003d1a:	673a      	str	r2, [r7, #112]	; 0x70
 8003d1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d1e:	4413      	add	r3, r2
 8003d20:	677b      	str	r3, [r7, #116]	; 0x74
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	2200      	movs	r2, #0
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d30:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003d34:	f7fc fa66 	bl	8000204 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d42:	e05b      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d44:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	623b      	str	r3, [r7, #32]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	f04f 0000 	mov.w	r0, #0
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	0159      	lsls	r1, r3, #5
 8003d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d72:	0150      	lsls	r0, r2, #5
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d7e:	4649      	mov	r1, r9
 8003d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d98:	ebb2 040a 	subs.w	r4, r2, sl
 8003d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	00eb      	lsls	r3, r5, #3
 8003daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dae:	00e2      	lsls	r2, r4, #3
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	18e3      	adds	r3, r4, r3
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	464b      	mov	r3, r9
 8003dbc:	eb45 0303 	adc.w	r3, r5, r3
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	028b      	lsls	r3, r1, #10
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd8:	4621      	mov	r1, r4
 8003dda:	028a      	lsls	r2, r1, #10
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de4:	2200      	movs	r2, #0
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	61fa      	str	r2, [r7, #28]
 8003dea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dee:	f7fc fa09 	bl	8000204 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4613      	mov	r3, r2
 8003df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0f1b      	lsrs	r3, r3, #28
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003e0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003e22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3798      	adds	r7, #152	; 0x98
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	017d7840 	.word	0x017d7840

08003e40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e28d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8083 	beq.w	8003f66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e60:	4b94      	ldr	r3, [pc, #592]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d019      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d106      	bne.n	8003e86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e78:	4b8e      	ldr	r3, [pc, #568]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e84:	d00c      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b8b      	ldr	r3, [pc, #556]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d112      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e92:	4b88      	ldr	r3, [pc, #544]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	4b84      	ldr	r3, [pc, #528]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d05b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x124>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e25a      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x90>
 8003ec2:	4b7c      	ldr	r3, [pc, #496]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a7b      	ldr	r2, [pc, #492]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xb4>
 8003eda:	4b76      	ldr	r3, [pc, #472]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a75      	ldr	r2, [pc, #468]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a72      	ldr	r2, [pc, #456]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xcc>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd f96c 	bl	80011f0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd f968 	bl	80011f0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e21f      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b61      	ldr	r3, [pc, #388]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xdc>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f958 	bl	80011f0 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd f954 	bl	80011f0 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e20b      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b57      	ldr	r3, [pc, #348]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x104>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d06f      	beq.n	8004052 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f72:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d017      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f7e:	4b4d      	ldr	r3, [pc, #308]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d11c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b44      	ldr	r3, [pc, #272]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d116      	bne.n	8003fdc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e1d3      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b3b      	ldr	r3, [pc, #236]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	e03a      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d020      	beq.n	8004026 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCC_OscConfig+0x278>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fd f901 	bl	80011f0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fd f8fd 	bl	80011f0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e1b4      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	4925      	ldr	r1, [pc, #148]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
 8004024:	e015      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x278>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd f8e0 	bl	80011f0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004034:	f7fd f8dc 	bl	80011f0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e193      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d036      	beq.n	80040cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd f8c0 	bl	80011f0 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd f8bc 	bl	80011f0 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e173      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_RCC_OscConfig+0x274>)
 8004088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x234>
 8004092:	e01b      	b.n	80040cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x27c>)
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409a:	f7fd f8a9 	bl	80011f0 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a0:	e00e      	b.n	80040c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040a2:	f7fd f8a5 	bl	80011f0 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d907      	bls.n	80040c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e15c      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	42470000 	.word	0x42470000
 80040bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c0:	4b8a      	ldr	r3, [pc, #552]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ea      	bne.n	80040a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8097 	beq.w	8004208 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040de:	4b83      	ldr	r3, [pc, #524]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10f      	bne.n	800410a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	4b7f      	ldr	r3, [pc, #508]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a7e      	ldr	r2, [pc, #504]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b7c      	ldr	r3, [pc, #496]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b79      	ldr	r3, [pc, #484]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d118      	bne.n	8004148 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800411c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004122:	f7fd f865 	bl	80011f0 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412a:	f7fd f861 	bl	80011f0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e118      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x4b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x31e>
 8004150:	4b66      	ldr	r3, [pc, #408]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a65      	ldr	r2, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b05      	cmp	r3, #5
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0x340>
 8004166:	4b61      	ldr	r3, [pc, #388]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a60      	ldr	r2, [pc, #384]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800416c:	f043 0304 	orr.w	r3, r3, #4
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a5d      	ldr	r2, [pc, #372]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6713      	str	r3, [r2, #112]	; 0x70
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0x358>
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a59      	ldr	r2, [pc, #356]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b57      	ldr	r3, [pc, #348]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004192:	f023 0304 	bic.w	r3, r3, #4
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd f826 	bl	80011f0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd f822 	bl	80011f0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0d7      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041be:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0ee      	beq.n	80041a8 <HAL_RCC_OscConfig+0x368>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041cc:	f7fd f810 	bl	80011f0 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d4:	f7fd f80c 	bl	80011f0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0c1      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ea:	4b40      	ldr	r3, [pc, #256]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ee      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b3b      	ldr	r3, [pc, #236]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	4a3a      	ldr	r2, [pc, #232]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80ad 	beq.w	800436c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004212:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b08      	cmp	r3, #8
 800421c:	d060      	beq.n	80042e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d145      	bne.n	80042b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fc ffe0 	bl	80011f0 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fc ffdc 	bl	80011f0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e093      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	3b01      	subs	r3, #1
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	061b      	lsls	r3, r3, #24
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	491b      	ldr	r1, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7fc ffb1 	bl	80011f0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004292:	f7fc ffad 	bl	80011f0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e064      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x452>
 80042b0:	e05c      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_RCC_OscConfig+0x4b4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fc ff9a 	bl	80011f0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fc ff96 	bl	80011f0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04d      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x480>
 80042de:	e045      	b.n	800436c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e040      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40007000 	.word	0x40007000
 80042f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_RCC_OscConfig+0x538>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d030      	beq.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d129      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d122      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004328:	4013      	ands	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800432e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004330:	4293      	cmp	r3, r2
 8004332:	d119      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	3b01      	subs	r3, #1
 8004342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d10f      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800

0800437c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e022      	b.n	80043d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fc fd5f 	bl	8000e64 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2203      	movs	r2, #3
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f814 	bl	80043dc <HAL_SD_InitCard>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00a      	b.n	80043d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043dc:	b5b0      	push	{r4, r5, r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af04      	add	r7, sp, #16
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043f8:	2376      	movs	r3, #118	; 0x76
 80043fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681d      	ldr	r5, [r3, #0]
 8004400:	466c      	mov	r4, sp
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800440a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004414:	4628      	mov	r0, r5
 8004416:	f001 fbfd 	bl	8005c14 <SDIO_Init>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e04f      	b.n	80044cc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800442c:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_SD_InitCard+0xf8>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f001 fc35 	bl	8005ca6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_SD_InitCard+0xf8>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004442:	2002      	movs	r0, #2
 8004444:	f7fc fee0 	bl	8001208 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 ff03 	bl	8005254 <SD_PowerON>
 800444e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e02e      	b.n	80044cc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fe22 	bl	80050b8 <SD_InitCard>
 8004474:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00b      	beq.n	8004494 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e01b      	b.n	80044cc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800449c:	4618      	mov	r0, r3
 800449e:	f001 fc94 	bl	8005dca <SDMMC_CmdBlockLength>
 80044a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00f      	beq.n	80044ca <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <HAL_SD_InitCard+0xfc>)
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3728      	adds	r7, #40	; 0x28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bdb0      	pop	{r4, r5, r7, pc}
 80044d4:	422580a0 	.word	0x422580a0
 80044d8:	004005ff 	.word	0x004005ff

080044dc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b092      	sub	sp, #72	; 0x48
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7fc fe81 	bl	80011f0 <HAL_GetTick>
 80044ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e1bd      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	f040 81b0 	bne.w	800487c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	441a      	add	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452c:	429a      	cmp	r2, r3
 800452e:	d907      	bls.n	8004540 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e1a4      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2203      	movs	r2, #3
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2200      	movs	r2, #0
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	2b01      	cmp	r3, #1
 8004556:	d002      	beq.n	800455e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	025b      	lsls	r3, r3, #9
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004562:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	025b      	lsls	r3, r3, #9
 8004568:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800456a:	2390      	movs	r3, #144	; 0x90
 800456c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800456e:	2302      	movs	r3, #2
 8004570:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004572:	2300      	movs	r3, #0
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004576:	2301      	movs	r3, #1
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f107 0214 	add.w	r2, r7, #20
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f001 fbf4 	bl	8005d72 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d90a      	bls.n	80045a6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2202      	movs	r2, #2
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fc58 	bl	8005e52 <SDMMC_CmdReadMultiBlock>
 80045a2:	6478      	str	r0, [r7, #68]	; 0x44
 80045a4:	e009      	b.n	80045ba <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fc2b 	bl	8005e0e <SDMMC_CmdReadSingleBlock>
 80045b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e151      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80045ea:	e061      	b.n	80046b0 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03c      	beq.n	8004674 <HAL_SD_ReadBlocks+0x198>
 80045fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d039      	beq.n	8004674 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004600:	2300      	movs	r3, #0
 8004602:	643b      	str	r3, [r7, #64]	; 0x40
 8004604:	e033      	b.n	800466e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fb2d 	bl	8005c6a <SDIO_ReadFIFO>
 8004610:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	b2da      	uxtb	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	3301      	adds	r3, #1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004622:	3b01      	subs	r3, #1
 8004624:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	b2da      	uxtb	r2, r3
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	3301      	adds	r3, #1
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	3b01      	subs	r3, #1
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	b2da      	uxtb	r2, r3
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004644:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	3301      	adds	r3, #1
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464e:	3b01      	subs	r3, #1
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	0e1b      	lsrs	r3, r3, #24
 8004656:	b2da      	uxtb	r2, r3
 8004658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	3301      	adds	r3, #1
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004664:	3b01      	subs	r3, #1
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466a:	3301      	adds	r3, #1
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
 800466e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004670:	2b07      	cmp	r3, #7
 8004672:	d9c8      	bls.n	8004606 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004674:	f7fc fdbc 	bl	80011f0 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004680:	429a      	cmp	r2, r3
 8004682:	d902      	bls.n	800468a <HAL_SD_ReadBlocks+0x1ae>
 8004684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d112      	bne.n	80046b0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a48      	ldr	r2, [pc, #288]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0ec      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d096      	beq.n	80045ec <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d022      	beq.n	8004712 <HAL_SD_ReadBlocks+0x236>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d91f      	bls.n	8004712 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d01b      	beq.n	8004712 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 fc1e 	bl	8005f20 <SDMMC_CmdStopTransfer>
 80046e4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2f      	ldr	r2, [pc, #188]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e0bb      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	f043 0208 	orr.w	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0a1      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d012      	beq.n	800477a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a15      	ldr	r2, [pc, #84]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	f043 0202 	orr.w	r2, r3, #2
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e087      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d064      	beq.n	8004852 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <HAL_SD_ReadBlocks+0x2d4>)
 800478e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f043 0220 	orr.w	r2, r3, #32
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06d      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
 80047ae:	bf00      	nop
 80047b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fa56 	bl	8005c6a <SDIO_ReadFIFO>
 80047be:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ca:	3301      	adds	r3, #1
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d0:	3b01      	subs	r3, #1
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	3301      	adds	r3, #1
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	3b01      	subs	r3, #1
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	3301      	adds	r3, #1
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	3b01      	subs	r3, #1
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	0e1b      	lsrs	r3, r3, #24
 8004804:	b2da      	uxtb	r2, r3
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800480a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480c:	3301      	adds	r3, #1
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	3b01      	subs	r3, #1
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004816:	f7fc fceb 	bl	80011f0 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004822:	429a      	cmp	r2, r3
 8004824:	d902      	bls.n	800482c <HAL_SD_ReadBlocks+0x350>
 8004826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004828:	2b00      	cmp	r3, #0
 800482a:	d112      	bne.n	8004852 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_SD_ReadBlocks+0x3b8>)
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01b      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_SD_ReadBlocks+0x38a>
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1a6      	bne.n	80047b4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f240 523a 	movw	r2, #1338	; 0x53a
 800486e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	e006      	b.n	800488a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3748      	adds	r7, #72	; 0x48
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	004005ff 	.word	0x004005ff

08004898 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b092      	sub	sp, #72	; 0x48
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80048a6:	f7fc fca3 	bl	80011f0 <HAL_GetTick>
 80048aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e165      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	f040 8158 	bne.w	8004b88 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d907      	bls.n	80048fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e14c      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2200      	movs	r2, #0
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	2b01      	cmp	r3, #1
 8004912:	d002      	beq.n	800491a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800491a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800491e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	025b      	lsls	r3, r3, #9
 8004924:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004926:	2390      	movs	r3, #144	; 0x90
 8004928:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800492e:	2300      	movs	r3, #0
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004932:	2301      	movs	r3, #1
 8004934:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f107 0218 	add.w	r2, r7, #24
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f001 fa16 	bl	8005d72 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d90a      	bls.n	8004962 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fabe 	bl	8005eda <SDMMC_CmdWriteMultiBlock>
 800495e:	6478      	str	r0, [r7, #68]	; 0x44
 8004960:	e009      	b.n	8004976 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2210      	movs	r2, #16
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fa91 	bl	8005e96 <SDMMC_CmdWriteSingleBlock>
 8004974:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a87      	ldr	r2, [pc, #540]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	431a      	orrs	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0f9      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80049a6:	e065      	b.n	8004a74 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d040      	beq.n	8004a38 <HAL_SD_WriteBlocks+0x1a0>
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d03d      	beq.n	8004a38 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80049bc:	2300      	movs	r3, #0
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
 80049c0:	e037      	b.n	8004a32 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	3301      	adds	r3, #1
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	3b01      	subs	r3, #1
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	021a      	lsls	r2, r3, #8
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	3301      	adds	r3, #1
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	3b01      	subs	r3, #1
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	041a      	lsls	r2, r3, #16
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	3301      	adds	r3, #1
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	3b01      	subs	r3, #1
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	061a      	lsls	r2, r3, #24
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	3301      	adds	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f107 0214 	add.w	r2, r7, #20
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 f92c 	bl	8005c84 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	3301      	adds	r3, #1
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	2b07      	cmp	r3, #7
 8004a36:	d9c4      	bls.n	80049c2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004a38:	f7fc fbda 	bl	80011f0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d902      	bls.n	8004a4e <HAL_SD_WriteBlocks+0x1b6>
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d112      	bne.n	8004a74 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a53      	ldr	r2, [pc, #332]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e090      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d092      	beq.n	80049a8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d022      	beq.n	8004ad6 <HAL_SD_WriteBlocks+0x23e>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d91f      	bls.n	8004ad6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d01b      	beq.n	8004ad6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fa3c 	bl	8005f20 <SDMMC_CmdStopTransfer>
 8004aa8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d012      	beq.n	8004ad6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3a      	ldr	r2, [pc, #232]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e05f      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	f043 0208 	orr.w	r2, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e045      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d012      	beq.n	8004b3e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	f043 0202 	orr.w	r2, r3, #2
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e02b      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <HAL_SD_WriteBlocks+0x308>)
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f043 0210 	orr.w	r2, r3, #16
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e011      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e006      	b.n	8004b96 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3748      	adds	r7, #72	; 0x48
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	004005ff 	.word	0x004005ff

08004ba4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb2:	0f9b      	lsrs	r3, r3, #30
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbe:	0e9b      	lsrs	r3, r3, #26
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd0:	0e1b      	lsrs	r3, r3, #24
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be2:	0c1b      	lsrs	r3, r3, #16
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c04:	0d1b      	lsrs	r3, r3, #20
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c22:	0bdb      	lsrs	r3, r3, #15
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c34:	0b9b      	lsrs	r3, r3, #14
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c46:	0b5b      	lsrs	r3, r3, #13
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c58:	0b1b      	lsrs	r3, r3, #12
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d163      	bne.n	8004d3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c78:	009a      	lsls	r2, r3, #2
 8004c7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c7e:	4013      	ands	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c84:	0f92      	lsrs	r2, r2, #30
 8004c86:	431a      	orrs	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c90:	0edb      	lsrs	r3, r3, #27
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca2:	0e1b      	lsrs	r3, r3, #24
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb4:	0d5b      	lsrs	r3, r3, #21
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc6:	0c9b      	lsrs	r3, r3, #18
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	0bdb      	lsrs	r3, r3, #15
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	7e1b      	ldrb	r3, [r3, #24]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d06:	fb03 f202 	mul.w	r2, r3, r2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	7a1b      	ldrb	r3, [r3, #8]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	2201      	movs	r2, #1
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d28:	0a52      	lsrs	r2, r2, #9
 8004d2a:	fb03 f202 	mul.w	r2, r3, r2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d38:	661a      	str	r2, [r3, #96]	; 0x60
 8004d3a:	e031      	b.n	8004da0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d11d      	bne.n	8004d80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	029a      	lsls	r2, r3, #10
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	661a      	str	r2, [r3, #96]	; 0x60
 8004d7e:	e00f      	b.n	8004da0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_SD_GetCardCSD+0x344>)
 8004d86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e09d      	b.n	8004edc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	0b9b      	lsrs	r3, r3, #14
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db6:	09db      	lsrs	r3, r3, #7
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	0fdb      	lsrs	r3, r3, #31
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	0f5b      	lsrs	r3, r3, #29
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	0e9b      	lsrs	r3, r3, #26
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	0d9b      	lsrs	r3, r3, #22
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	0d5b      	lsrs	r3, r3, #21
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	0c1b      	lsrs	r3, r3, #16
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	0bdb      	lsrs	r3, r3, #15
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	0b9b      	lsrs	r3, r3, #14
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	0b5b      	lsrs	r3, r3, #13
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	0b1b      	lsrs	r3, r3, #12
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	004005ff 	.word	0x004005ff

08004eec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b08e      	sub	sp, #56	; 0x38
 8004f48:	af04      	add	r7, sp, #16
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2203      	movs	r2, #3
 8004f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d02e      	beq.n	8004fc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	d106      	bne.n	8004f7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38
 8004f78:	e029      	b.n	8004fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f80:	d10a      	bne.n	8004f98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fa1c 	bl	80053c0 <SD_WideBus_Enable>
 8004f88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
 8004f96:	e01a      	b.n	8004fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa59 	bl	8005456 <SD_WideBus_Disable>
 8004fa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004fb2:	e00c      	b.n	8004fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004fc0:	e005      	b.n	8004fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fec:	e01f      	b.n	800502e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681d      	ldr	r5, [r3, #0]
 8005014:	466c      	mov	r4, sp
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800501e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fdf3 	bl	8005c14 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fec7 	bl	8005dca <SDMMC_CmdBlockLength>
 800503c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00c      	beq.n	800505e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <HAL_SD_ConfigWideBusOperation+0x130>)
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	; 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bdb0      	pop	{r4, r5, r7, pc}
 8005072:	bf00      	nop
 8005074:	004005ff 	.word	0x004005ff

08005078 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	4619      	mov	r1, r3
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f970 	bl	8005370 <SD_SendStatus>
 8005090:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	0a5b      	lsrs	r3, r3, #9
 80050a8:	f003 030f 	and.w	r3, r3, #15
 80050ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80050ae:	693b      	ldr	r3, [r7, #16]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050b8:	b5b0      	push	{r4, r5, r7, lr}
 80050ba:	b094      	sub	sp, #80	; 0x50
 80050bc:	af04      	add	r7, sp, #16
 80050be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80050c0:	2301      	movs	r3, #1
 80050c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fdfa 	bl	8005cc2 <SDIO_GetPowerState>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80050d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050d8:	e0b8      	b.n	800524c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d02f      	beq.n	8005142 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 f824 	bl	8006134 <SDMMC_CmdSendCID>
 80050ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	e0a9      	b.n	800524c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fe24 	bl	8005d4c <SDIO_GetResponse>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2104      	movs	r1, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fe1b 	bl	8005d4c <SDIO_GetResponse>
 8005116:	4602      	mov	r2, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2108      	movs	r1, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fe12 	bl	8005d4c <SDIO_GetResponse>
 8005128:	4602      	mov	r2, r0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	210c      	movs	r1, #12
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fe09 	bl	8005d4c <SDIO_GetResponse>
 800513a:	4602      	mov	r2, r0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	2b03      	cmp	r3, #3
 8005148:	d00d      	beq.n	8005166 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f107 020e 	add.w	r2, r7, #14
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f82a 	bl	80061ae <SDMMC_CmdSetRelAdd>
 800515a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <SD_InitCard+0xae>
    {
      return errorstate;
 8005162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005164:	e072      	b.n	800524c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	2b03      	cmp	r3, #3
 800516c:	d036      	beq.n	80051dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800516e:	89fb      	ldrh	r3, [r7, #14]
 8005170:	461a      	mov	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fff4 	bl	8006170 <SDMMC_CmdSendCSD>
 8005188:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005192:	e05b      	b.n	800524c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fdd6 	bl	8005d4c <SDIO_GetResponse>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2104      	movs	r1, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 fdcd 	bl	8005d4c <SDIO_GetResponse>
 80051b2:	4602      	mov	r2, r0
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2108      	movs	r1, #8
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fdc4 	bl	8005d4c <SDIO_GetResponse>
 80051c4:	4602      	mov	r2, r0
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	210c      	movs	r1, #12
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fdbb 	bl	8005d4c <SDIO_GetResponse>
 80051d6:	4602      	mov	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2104      	movs	r1, #4
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fdb2 	bl	8005d4c <SDIO_GetResponse>
 80051e8:	4603      	mov	r3, r0
 80051ea:	0d1a      	lsrs	r2, r3, #20
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	4619      	mov	r1, r3
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fcd4 	bl	8004ba4 <HAL_SD_GetCardCSD>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005202:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005206:	e021      	b.n	800524c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6819      	ldr	r1, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	2200      	movs	r2, #0
 8005214:	461c      	mov	r4, r3
 8005216:	4615      	mov	r5, r2
 8005218:	4622      	mov	r2, r4
 800521a:	462b      	mov	r3, r5
 800521c:	4608      	mov	r0, r1
 800521e:	f000 fea1 	bl	8005f64 <SDMMC_CmdSelDesel>
 8005222:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <SD_InitCard+0x176>
  {
    return errorstate;
 800522a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800522c:	e00e      	b.n	800524c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681d      	ldr	r5, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	466c      	mov	r4, sp
 8005236:	f103 0210 	add.w	r2, r3, #16
 800523a:	ca07      	ldmia	r2, {r0, r1, r2}
 800523c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005240:	3304      	adds	r3, #4
 8005242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005244:	4628      	mov	r0, r5
 8005246:	f000 fce5 	bl	8005c14 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3740      	adds	r7, #64	; 0x40
 8005250:	46bd      	mov	sp, r7
 8005252:	bdb0      	pop	{r4, r5, r7, pc}

08005254 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fe9c 	bl	8005faa <SDMMC_CmdGoIdleState>
 8005272:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <SD_PowerON+0x2a>
  {
    return errorstate;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	e072      	b.n	8005364 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 feaf 	bl	8005fe6 <SDMMC_CmdOperCond>
 8005288:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fe85 	bl	8005faa <SDMMC_CmdGoIdleState>
 80052a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e05b      	b.n	8005364 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d137      	bne.n	800532a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2100      	movs	r1, #0
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 feaf 	bl	8006024 <SDMMC_CmdAppCommand>
 80052c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d02d      	beq.n	800532a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052d2:	e047      	b.n	8005364 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2100      	movs	r1, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fea2 	bl	8006024 <SDMMC_CmdAppCommand>
 80052e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <SD_PowerON+0x98>
    {
      return errorstate;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	e03b      	b.n	8005364 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	491e      	ldr	r1, [pc, #120]	; (800536c <SD_PowerON+0x118>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 feb8 	bl	8006068 <SDMMC_CmdAppOperCommand>
 80052f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005304:	e02e      	b.n	8005364 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fd1d 	bl	8005d4c <SDIO_GetResponse>
 8005312:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	0fdb      	lsrs	r3, r3, #31
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <SD_PowerON+0xcc>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <SD_PowerON+0xce>
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

    count++;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	3301      	adds	r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005330:	4293      	cmp	r3, r2
 8005332:	d802      	bhi.n	800533a <SD_PowerON+0xe6>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0cc      	beq.n	80052d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005340:	4293      	cmp	r3, r2
 8005342:	d902      	bls.n	800534a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005348:	e00c      	b.n	8005364 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
 800535a:	e002      	b.n	8005362 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	c1100000 	.word	0xc1100000

08005370 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d102      	bne.n	8005386 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005384:	e018      	b.n	80053b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 ff2c 	bl	80061f0 <SDMMC_CmdSendStatus>
 8005398:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	e009      	b.n	80053b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fcce 	bl	8005d4c <SDIO_GetResponse>
 80053b0:	4602      	mov	r2, r0
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	2300      	movs	r3, #0
 80053ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fcb8 	bl	8005d4c <SDIO_GetResponse>
 80053dc:	4603      	mov	r3, r0
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e6:	d102      	bne.n	80053ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ec:	e02f      	b.n	800544e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f879 	bl	80054ec <SD_FindSCR>
 80053fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	e023      	b.n	800544e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01c      	beq.n	800544a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f000 fe01 	bl	8006024 <SDMMC_CmdAppCommand>
 8005422:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	e00f      	b.n	800544e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe3a 	bl	80060ae <SDMMC_CmdBusWidth>
 800543a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	e003      	b.n	800544e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005446:	2300      	movs	r3, #0
 8005448:	e001      	b.n	800544e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800544a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b086      	sub	sp, #24
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fc6d 	bl	8005d4c <SDIO_GetResponse>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547c:	d102      	bne.n	8005484 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800547e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005482:	e02f      	b.n	80054e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005484:	f107 030c 	add.w	r3, r7, #12
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f82e 	bl	80054ec <SD_FindSCR>
 8005490:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	e023      	b.n	80054e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01c      	beq.n	80054e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ae:	041b      	lsls	r3, r3, #16
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fdb6 	bl	8006024 <SDMMC_CmdAppCommand>
 80054b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e00f      	b.n	80054e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fdef 	bl	80060ae <SDMMC_CmdBusWidth>
 80054d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	e003      	b.n	80054e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80054dc:	2300      	movs	r3, #0
 80054de:	e001      	b.n	80054e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b08f      	sub	sp, #60	; 0x3c
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80054f6:	f7fb fe7b 	bl	80011f0 <HAL_GetTick>
 80054fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2108      	movs	r1, #8
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fc59 	bl	8005dca <SDMMC_CmdBlockLength>
 8005518:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	e0b2      	b.n	800568a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	041b      	lsls	r3, r3, #16
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fd77 	bl	8006024 <SDMMC_CmdAppCommand>
 8005536:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <SD_FindSCR+0x56>
  {
    return errorstate;
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	e0a3      	b.n	800568a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005546:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005548:	2308      	movs	r3, #8
 800554a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005550:	2302      	movs	r3, #2
 8005552:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005554:	2300      	movs	r3, #0
 8005556:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005558:	2301      	movs	r3, #1
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f107 0210 	add.w	r2, r7, #16
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fc03 	bl	8005d72 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fdbe 	bl	80060f2 <SDMMC_CmdSendSCR>
 8005576:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02a      	beq.n	80055d4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	e083      	b.n	800568a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00f      	beq.n	80055b0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	f107 0208 	add.w	r2, r7, #8
 800559c:	18d4      	adds	r4, r2, r3
 800559e:	4608      	mov	r0, r1
 80055a0:	f000 fb63 	bl	8005c6a <SDIO_ReadFIFO>
 80055a4:	4603      	mov	r3, r0
 80055a6:	6023      	str	r3, [r4, #0]
      index++;
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	3301      	adds	r3, #1
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
 80055ae:	e006      	b.n	80055be <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055be:	f7fb fe17 	bl	80011f0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055cc:	d102      	bne.n	80055d4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80055ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055d2:	e05a      	b.n	800568a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0cf      	beq.n	8005582 <SD_FindSCR+0x96>
 80055e2:	e000      	b.n	80055e6 <SD_FindSCR+0xfa>
      break;
 80055e4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2208      	movs	r2, #8
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80055fc:	2308      	movs	r3, #8
 80055fe:	e044      	b.n	800568a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2202      	movs	r2, #2
 8005614:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005616:	2302      	movs	r3, #2
 8005618:	e037      	b.n	800568a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2220      	movs	r2, #32
 800562e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005630:	2320      	movs	r3, #32
 8005632:	e02a      	b.n	800568a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f240 523a 	movw	r2, #1338	; 0x53a
 800563c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	061a      	lsls	r2, r3, #24
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800564a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005654:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	601a      	str	r2, [r3, #0]
    scr++;
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	3304      	adds	r3, #4
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	061a      	lsls	r2, r3, #24
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005672:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800567c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	373c      	adds	r7, #60	; 0x3c
 800568e:	46bd      	mov	sp, r7
 8005690:	bd90      	pop	{r4, r7, pc}

08005692 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e03f      	b.n	8005724 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb fc57 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2224      	movs	r2, #36	; 0x24
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f828 	bl	800572c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800570a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005730:	b0c0      	sub	sp, #256	; 0x100
 8005732:	af00      	add	r7, sp, #0
 8005734:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	68d9      	ldr	r1, [r3, #12]
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	ea40 0301 	orr.w	r3, r0, r1
 8005754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	431a      	orrs	r2, r3
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005784:	f021 010c 	bic.w	r1, r1, #12
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005792:	430b      	orrs	r3, r1
 8005794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	6999      	ldr	r1, [r3, #24]
 80057a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	ea40 0301 	orr.w	r3, r0, r1
 80057b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b8f      	ldr	r3, [pc, #572]	; (80059f8 <UART_SetConfig+0x2cc>)
 80057bc:	429a      	cmp	r2, r3
 80057be:	d005      	beq.n	80057cc <UART_SetConfig+0xa0>
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b8d      	ldr	r3, [pc, #564]	; (80059fc <UART_SetConfig+0x2d0>)
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d104      	bne.n	80057d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057cc:	f7fd fc08 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80057d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057d4:	e003      	b.n	80057de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057d6:	f7fd fbef 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80057da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e8:	f040 810c 	bne.w	8005a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	1891      	adds	r1, r2, r2
 8005804:	65b9      	str	r1, [r7, #88]	; 0x58
 8005806:	415b      	adcs	r3, r3
 8005808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800580a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800580e:	4621      	mov	r1, r4
 8005810:	eb12 0801 	adds.w	r8, r2, r1
 8005814:	4629      	mov	r1, r5
 8005816:	eb43 0901 	adc.w	r9, r3, r1
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800582a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800582e:	4690      	mov	r8, r2
 8005830:	4699      	mov	r9, r3
 8005832:	4623      	mov	r3, r4
 8005834:	eb18 0303 	adds.w	r3, r8, r3
 8005838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800583c:	462b      	mov	r3, r5
 800583e:	eb49 0303 	adc.w	r3, r9, r3
 8005842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005852:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800585a:	460b      	mov	r3, r1
 800585c:	18db      	adds	r3, r3, r3
 800585e:	653b      	str	r3, [r7, #80]	; 0x50
 8005860:	4613      	mov	r3, r2
 8005862:	eb42 0303 	adc.w	r3, r2, r3
 8005866:	657b      	str	r3, [r7, #84]	; 0x54
 8005868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800586c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005870:	f7fa fcc8 	bl	8000204 <__aeabi_uldivmod>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <UART_SetConfig+0x2d4>)
 800587a:	fba3 2302 	umull	r2, r3, r3, r2
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	011c      	lsls	r4, r3, #4
 8005882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800588c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	64b9      	str	r1, [r7, #72]	; 0x48
 800589c:	415b      	adcs	r3, r3
 800589e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058a4:	4641      	mov	r1, r8
 80058a6:	eb12 0a01 	adds.w	sl, r2, r1
 80058aa:	4649      	mov	r1, r9
 80058ac:	eb43 0b01 	adc.w	fp, r3, r1
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c4:	4692      	mov	sl, r2
 80058c6:	469b      	mov	fp, r3
 80058c8:	4643      	mov	r3, r8
 80058ca:	eb1a 0303 	adds.w	r3, sl, r3
 80058ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058d2:	464b      	mov	r3, r9
 80058d4:	eb4b 0303 	adc.w	r3, fp, r3
 80058d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058f0:	460b      	mov	r3, r1
 80058f2:	18db      	adds	r3, r3, r3
 80058f4:	643b      	str	r3, [r7, #64]	; 0x40
 80058f6:	4613      	mov	r3, r2
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	647b      	str	r3, [r7, #68]	; 0x44
 80058fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005906:	f7fa fc7d 	bl	8000204 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4611      	mov	r1, r2
 8005910:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <UART_SetConfig+0x2d4>)
 8005912:	fba3 2301 	umull	r2, r3, r3, r1
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	2264      	movs	r2, #100	; 0x64
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	1acb      	subs	r3, r1, r3
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005926:	4b36      	ldr	r3, [pc, #216]	; (8005a00 <UART_SetConfig+0x2d4>)
 8005928:	fba3 2302 	umull	r2, r3, r3, r2
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005934:	441c      	add	r4, r3
 8005936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005940:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	1891      	adds	r1, r2, r2
 800594e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005950:	415b      	adcs	r3, r3
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005958:	4641      	mov	r1, r8
 800595a:	1851      	adds	r1, r2, r1
 800595c:	6339      	str	r1, [r7, #48]	; 0x30
 800595e:	4649      	mov	r1, r9
 8005960:	414b      	adcs	r3, r1
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005970:	4659      	mov	r1, fp
 8005972:	00cb      	lsls	r3, r1, #3
 8005974:	4651      	mov	r1, sl
 8005976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800597a:	4651      	mov	r1, sl
 800597c:	00ca      	lsls	r2, r1, #3
 800597e:	4610      	mov	r0, r2
 8005980:	4619      	mov	r1, r3
 8005982:	4603      	mov	r3, r0
 8005984:	4642      	mov	r2, r8
 8005986:	189b      	adds	r3, r3, r2
 8005988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800598c:	464b      	mov	r3, r9
 800598e:	460a      	mov	r2, r1
 8005990:	eb42 0303 	adc.w	r3, r2, r3
 8005994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059ac:	460b      	mov	r3, r1
 80059ae:	18db      	adds	r3, r3, r3
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b2:	4613      	mov	r3, r2
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059c2:	f7fa fc1f 	bl	8000204 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <UART_SetConfig+0x2d4>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	; 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	3332      	adds	r3, #50	; 0x32
 80059de:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <UART_SetConfig+0x2d4>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 0207 	and.w	r2, r3, #7
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4422      	add	r2, r4
 80059f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059f4:	e105      	b.n	8005c02 <UART_SetConfig+0x4d6>
 80059f6:	bf00      	nop
 80059f8:	40011000 	.word	0x40011000
 80059fc:	40011400 	.word	0x40011400
 8005a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a16:	4642      	mov	r2, r8
 8005a18:	464b      	mov	r3, r9
 8005a1a:	1891      	adds	r1, r2, r2
 8005a1c:	6239      	str	r1, [r7, #32]
 8005a1e:	415b      	adcs	r3, r3
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a26:	4641      	mov	r1, r8
 8005a28:	1854      	adds	r4, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb43 0501 	adc.w	r5, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	00eb      	lsls	r3, r5, #3
 8005a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3e:	00e2      	lsls	r2, r4, #3
 8005a40:	4614      	mov	r4, r2
 8005a42:	461d      	mov	r5, r3
 8005a44:	4643      	mov	r3, r8
 8005a46:	18e3      	adds	r3, r4, r3
 8005a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	eb45 0303 	adc.w	r3, r5, r3
 8005a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a66:	f04f 0200 	mov.w	r2, #0
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a72:	4629      	mov	r1, r5
 8005a74:	008b      	lsls	r3, r1, #2
 8005a76:	4621      	mov	r1, r4
 8005a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	008a      	lsls	r2, r1, #2
 8005a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a84:	f7fa fbbe 	bl	8000204 <__aeabi_uldivmod>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4b60      	ldr	r3, [pc, #384]	; (8005c10 <UART_SetConfig+0x4e4>)
 8005a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	011c      	lsls	r4, r3, #4
 8005a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	464b      	mov	r3, r9
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	61b9      	str	r1, [r7, #24]
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab8:	4641      	mov	r1, r8
 8005aba:	1851      	adds	r1, r2, r1
 8005abc:	6139      	str	r1, [r7, #16]
 8005abe:	4649      	mov	r1, r9
 8005ac0:	414b      	adcs	r3, r1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	00cb      	lsls	r3, r1, #3
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ada:	4651      	mov	r1, sl
 8005adc:	00ca      	lsls	r2, r1, #3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	4642      	mov	r2, r8
 8005ae6:	189b      	adds	r3, r3, r2
 8005ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005aec:	464b      	mov	r3, r9
 8005aee:	460a      	mov	r2, r1
 8005af0:	eb42 0303 	adc.w	r3, r2, r3
 8005af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b10:	4649      	mov	r1, r9
 8005b12:	008b      	lsls	r3, r1, #2
 8005b14:	4641      	mov	r1, r8
 8005b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	008a      	lsls	r2, r1, #2
 8005b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b22:	f7fa fb6f 	bl	8000204 <__aeabi_uldivmod>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <UART_SetConfig+0x4e4>)
 8005b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	2164      	movs	r1, #100	; 0x64
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	3332      	adds	r3, #50	; 0x32
 8005b3e:	4a34      	ldr	r2, [pc, #208]	; (8005c10 <UART_SetConfig+0x4e4>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4a:	441c      	add	r4, r3
 8005b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b50:	2200      	movs	r2, #0
 8005b52:	673b      	str	r3, [r7, #112]	; 0x70
 8005b54:	677a      	str	r2, [r7, #116]	; 0x74
 8005b56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	1891      	adds	r1, r2, r2
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	415b      	adcs	r3, r3
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	1851      	adds	r1, r2, r1
 8005b6e:	6039      	str	r1, [r7, #0]
 8005b70:	4649      	mov	r1, r9
 8005b72:	414b      	adcs	r3, r1
 8005b74:	607b      	str	r3, [r7, #4]
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	f04f 0300 	mov.w	r3, #0
 8005b7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b82:	4659      	mov	r1, fp
 8005b84:	00cb      	lsls	r3, r1, #3
 8005b86:	4651      	mov	r1, sl
 8005b88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	00ca      	lsls	r2, r1, #3
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	4603      	mov	r3, r0
 8005b96:	4642      	mov	r2, r8
 8005b98:	189b      	adds	r3, r3, r2
 8005b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9c:	464b      	mov	r3, r9
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	eb42 0303 	adc.w	r3, r2, r3
 8005ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	663b      	str	r3, [r7, #96]	; 0x60
 8005bb0:	667a      	str	r2, [r7, #100]	; 0x64
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	008b      	lsls	r3, r1, #2
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc8:	4641      	mov	r1, r8
 8005bca:	008a      	lsls	r2, r1, #2
 8005bcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bd0:	f7fa fb18 	bl	8000204 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <UART_SetConfig+0x4e4>)
 8005bda:	fba3 1302 	umull	r1, r3, r3, r2
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2164      	movs	r1, #100	; 0x64
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <UART_SetConfig+0x4e4>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4422      	add	r2, r4
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	51eb851f 	.word	0x51eb851f

08005c14 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005c14:	b084      	sub	sp, #16
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	f107 001c 	add.w	r0, r7, #28
 8005c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c2a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c2e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005c36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005c3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005c3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	b004      	add	sp, #16
 8005c68:	4770      	bx	lr

08005c6a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0303 	and.w	r3, r3, #3
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cfc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005d02:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005d08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d18:	f023 030f 	bic.w	r3, r3, #15
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	b2db      	uxtb	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3314      	adds	r3, #20
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
}  
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d98:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d9e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005da4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0

}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005dd8:	2310      	movs	r3, #16
 8005dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dea:	f107 0308 	add.w	r3, r7, #8
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff ff74 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfa:	2110      	movs	r1, #16
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa19 	bl	8006234 <SDMMC_GetCmdResp1>
 8005e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e04:	69fb      	ldr	r3, [r7, #28]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3720      	adds	r7, #32
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b088      	sub	sp, #32
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e1c:	2311      	movs	r3, #17
 8005e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e20:	2340      	movs	r3, #64	; 0x40
 8005e22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff52 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	2111      	movs	r1, #17
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9f7 	bl	8006234 <SDMMC_GetCmdResp1>
 8005e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e48:	69fb      	ldr	r3, [r7, #28]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b088      	sub	sp, #32
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005e60:	2312      	movs	r3, #18
 8005e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff ff30 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	2112      	movs	r1, #18
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f9d5 	bl	8006234 <SDMMC_GetCmdResp1>
 8005e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b088      	sub	sp, #32
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005ea4:	2318      	movs	r3, #24
 8005ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff0e 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	2118      	movs	r1, #24
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f9b3 	bl	8006234 <SDMMC_GetCmdResp1>
 8005ece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b088      	sub	sp, #32
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ee8:	2319      	movs	r3, #25
 8005eea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005efa:	f107 0308 	add.w	r3, r7, #8
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff feec 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	2119      	movs	r1, #25
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f991 	bl	8006234 <SDMMC_GetCmdResp1>
 8005f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f14:	69fb      	ldr	r3, [r7, #28]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff feca 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005f4a:	4a05      	ldr	r2, [pc, #20]	; (8005f60 <SDMMC_CmdStopTransfer+0x40>)
 8005f4c:	210c      	movs	r1, #12
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f970 	bl	8006234 <SDMMC_GetCmdResp1>
 8005f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f56:	69fb      	ldr	r3, [r7, #28]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	05f5e100 	.word	0x05f5e100

08005f64 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08a      	sub	sp, #40	; 0x28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f74:	2307      	movs	r3, #7
 8005f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f84:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff fea6 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	2107      	movs	r1, #7
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f94b 	bl	8006234 <SDMMC_GetCmdResp1>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	; 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fc8:	f107 0308 	add.w	r3, r7, #8
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fe85 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb65 	bl	80066a4 <SDMMC_GetCmdError>
 8005fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b088      	sub	sp, #32
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005fee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006004:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006006:	f107 0308 	add.w	r3, r7, #8
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fe66 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 faf8 	bl	8006608 <SDMMC_GetCmdResp7>
 8006018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800601a:	69fb      	ldr	r3, [r7, #28]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006032:	2337      	movs	r3, #55	; 0x37
 8006034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006036:	2340      	movs	r3, #64	; 0x40
 8006038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800603e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006042:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fe47 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	2137      	movs	r1, #55	; 0x37
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f8ec 	bl	8006234 <SDMMC_GetCmdResp1>
 800605c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800605e:	69fb      	ldr	r3, [r7, #28]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006078:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800607e:	2329      	movs	r3, #41	; 0x29
 8006080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006082:	2340      	movs	r3, #64	; 0x40
 8006084:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800608a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800608e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006090:	f107 0308 	add.w	r3, r7, #8
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fe21 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f9ff 	bl	80064a0 <SDMMC_GetCmdResp3>
 80060a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060a4:	69fb      	ldr	r3, [r7, #28]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80060bc:	2306      	movs	r3, #6
 80060be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060c0:	2340      	movs	r3, #64	; 0x40
 80060c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7ff fe02 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80060da:	f241 3288 	movw	r2, #5000	; 0x1388
 80060de:	2106      	movs	r1, #6
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8a7 	bl	8006234 <SDMMC_GetCmdResp1>
 80060e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060e8:	69fb      	ldr	r3, [r7, #28]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80060fe:	2333      	movs	r3, #51	; 0x33
 8006100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800610a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fde1 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800611c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006120:	2133      	movs	r1, #51	; 0x33
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f886 	bl	8006234 <SDMMC_GetCmdResp1>
 8006128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006140:	2302      	movs	r3, #2
 8006142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006144:	23c0      	movs	r3, #192	; 0xc0
 8006146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800614c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff fdc0 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f956 	bl	8006410 <SDMMC_GetCmdResp2>
 8006164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006166:	69fb      	ldr	r3, [r7, #28]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3720      	adds	r7, #32
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800617e:	2309      	movs	r3, #9
 8006180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006182:	23c0      	movs	r3, #192	; 0xc0
 8006184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fda1 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f937 	bl	8006410 <SDMMC_GetCmdResp2>
 80061a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a4:	69fb      	ldr	r3, [r7, #28]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80061bc:	2303      	movs	r3, #3
 80061be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fd82 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	2103      	movs	r1, #3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f99c 	bl	800651c <SDMMC_GetCmdResp6>
 80061e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e6:	69fb      	ldr	r3, [r7, #28]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80061fe:	230d      	movs	r3, #13
 8006200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006206:	2300      	movs	r3, #0
 8006208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff fd61 	bl	8005cde <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800621c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006220:	210d      	movs	r1, #13
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f806 	bl	8006234 <SDMMC_GetCmdResp1>
 8006228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800622a:	69fb      	ldr	r3, [r7, #28]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	460b      	mov	r3, r1
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006242:	4b70      	ldr	r3, [pc, #448]	; (8006404 <SDMMC_GetCmdResp1+0x1d0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a70      	ldr	r2, [pc, #448]	; (8006408 <SDMMC_GetCmdResp1+0x1d4>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	0a5a      	lsrs	r2, r3, #9
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	fb02 f303 	mul.w	r3, r2, r3
 8006254:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	1e5a      	subs	r2, r3, #1
 800625a:	61fa      	str	r2, [r7, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006264:	e0c9      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0ef      	beq.n	8006256 <SDMMC_GetCmdResp1+0x22>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1ea      	bne.n	8006256 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2204      	movs	r2, #4
 8006290:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006292:	2304      	movs	r3, #4
 8006294:	e0b1      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0a6      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	22c5      	movs	r2, #197	; 0xc5
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fd3d 	bl	8005d32 <SDIO_GetCommandResponse>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	4293      	cmp	r3, r2
 80062c0:	d001      	beq.n	80062c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e099      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80062c6:	2100      	movs	r1, #0
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fd3f 	bl	8005d4c <SDIO_GetResponse>
 80062ce:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4b4e      	ldr	r3, [pc, #312]	; (800640c <SDMMC_GetCmdResp1+0x1d8>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80062da:	2300      	movs	r3, #0
 80062dc:	e08d      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da02      	bge.n	80062ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80062e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062e8:	e087      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	e080      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006302:	2380      	movs	r3, #128	; 0x80
 8006304:	e079      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006314:	e071      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006324:	e069      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006334:	e061      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006344:	e059      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006354:	e051      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006364:	e049      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006374:	e041      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006384:	e039      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006394:	e031      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80063a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80063a4:	e029      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80063b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80063b4:	e021      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80063c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063c4:	e019      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80063d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063d4:	e011      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80063e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063e4:	e009      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063f4:	e001      	b.n	80063fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000000 	.word	0x20000000
 8006408:	10624dd3 	.word	0x10624dd3
 800640c:	fdffe008 	.word	0xfdffe008

08006410 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006418:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <SDMMC_GetCmdResp2+0x88>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1f      	ldr	r2, [pc, #124]	; (800649c <SDMMC_GetCmdResp2+0x8c>)
 800641e:	fba2 2303 	umull	r2, r3, r2, r3
 8006422:	0a5b      	lsrs	r3, r3, #9
 8006424:	f241 3288 	movw	r2, #5000	; 0x1388
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	60fa      	str	r2, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800643c:	e026      	b.n	800648c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0ef      	beq.n	800642e <SDMMC_GetCmdResp2+0x1e>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2204      	movs	r2, #4
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800646a:	2304      	movs	r3, #4
 800646c:	e00e      	b.n	800648c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006480:	2301      	movs	r3, #1
 8006482:	e003      	b.n	800648c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22c5      	movs	r2, #197	; 0xc5
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000000 	.word	0x20000000
 800649c:	10624dd3 	.word	0x10624dd3

080064a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <SDMMC_GetCmdResp3+0x74>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <SDMMC_GetCmdResp3+0x78>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	0a5b      	lsrs	r3, r3, #9
 80064b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b8:	fb02 f303 	mul.w	r3, r2, r3
 80064bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1e5a      	subs	r2, r3, #1
 80064c2:	60fa      	str	r2, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064cc:	e01b      	b.n	8006506 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0ef      	beq.n	80064be <SDMMC_GetCmdResp3+0x1e>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ea      	bne.n	80064be <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2204      	movs	r2, #4
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064fa:	2304      	movs	r3, #4
 80064fc:	e003      	b.n	8006506 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	22c5      	movs	r2, #197	; 0xc5
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000000 	.word	0x20000000
 8006518:	10624dd3 	.word	0x10624dd3

0800651c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	460b      	mov	r3, r1
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800652a:	4b35      	ldr	r3, [pc, #212]	; (8006600 <SDMMC_GetCmdResp6+0xe4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a35      	ldr	r2, [pc, #212]	; (8006604 <SDMMC_GetCmdResp6+0xe8>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	0a5b      	lsrs	r3, r3, #9
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	1e5a      	subs	r2, r3, #1
 8006544:	61fa      	str	r2, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800654a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800654e:	e052      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0ef      	beq.n	8006540 <SDMMC_GetCmdResp6+0x24>
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1ea      	bne.n	8006540 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d004      	beq.n	8006580 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2204      	movs	r2, #4
 800657a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800657c:	2304      	movs	r3, #4
 800657e:	e03a      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006592:	2301      	movs	r3, #1
 8006594:	e02f      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fbcb 	bl	8005d32 <SDIO_GetCommandResponse>
 800659c:	4603      	mov	r3, r0
 800659e:	461a      	mov	r2, r3
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d001      	beq.n	80065aa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e025      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22c5      	movs	r2, #197	; 0xc5
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fbca 	bl	8005d4c <SDIO_GetResponse>
 80065b8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d106      	bne.n	80065d2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	0c1b      	lsrs	r3, r3, #16
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e011      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065e0:	e009      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065f0:	e001      	b.n	80065f6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000000 	.word	0x20000000
 8006604:	10624dd3 	.word	0x10624dd3

08006608 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006610:	4b22      	ldr	r3, [pc, #136]	; (800669c <SDMMC_GetCmdResp7+0x94>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a22      	ldr	r2, [pc, #136]	; (80066a0 <SDMMC_GetCmdResp7+0x98>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	0a5b      	lsrs	r3, r3, #9
 800661c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006620:	fb02 f303 	mul.w	r3, r2, r3
 8006624:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	1e5a      	subs	r2, r3, #1
 800662a:	60fa      	str	r2, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006634:	e02c      	b.n	8006690 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0ef      	beq.n	8006626 <SDMMC_GetCmdResp7+0x1e>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1ea      	bne.n	8006626 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2204      	movs	r2, #4
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006662:	2304      	movs	r3, #4
 8006664:	e014      	b.n	8006690 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006678:	2301      	movs	r3, #1
 800667a:	e009      	b.n	8006690 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2240      	movs	r2, #64	; 0x40
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800668e:	2300      	movs	r3, #0
  
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20000000 	.word	0x20000000
 80066a0:	10624dd3 	.word	0x10624dd3

080066a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <SDMMC_GetCmdError+0x50>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <SDMMC_GetCmdError+0x54>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	0a5b      	lsrs	r3, r3, #9
 80066b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
 80066c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	60fa      	str	r2, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066d0:	e009      	b.n	80066e6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f1      	beq.n	80066c2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	22c5      	movs	r2, #197	; 0xc5
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000000 	.word	0x20000000
 80066f8:	10624dd3 	.word	0x10624dd3

080066fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006700:	4904      	ldr	r1, [pc, #16]	; (8006714 <MX_FATFS_Init+0x18>)
 8006702:	4805      	ldr	r0, [pc, #20]	; (8006718 <MX_FATFS_Init+0x1c>)
 8006704:	f000 f9e4 	bl	8006ad0 <FATFS_LinkDriver>
 8006708:	4603      	mov	r3, r0
 800670a:	461a      	mov	r2, r3
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <MX_FATFS_Init+0x20>)
 800670e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}
 8006714:	2001425c 	.word	0x2001425c
 8006718:	08006bb4 	.word	0x08006bb4
 800671c:	20014258 	.word	0x20014258

08006720 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800672a:	f000 f879 	bl	8006820 <BSP_SD_IsDetected>
 800672e:	4603      	mov	r3, r0
 8006730:	2b01      	cmp	r3, #1
 8006732:	d001      	beq.n	8006738 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e012      	b.n	800675e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006738:	480b      	ldr	r0, [pc, #44]	; (8006768 <BSP_SD_Init+0x48>)
 800673a:	f7fd fe1f 	bl	800437c <HAL_SD_Init>
 800673e:	4603      	mov	r3, r0
 8006740:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d109      	bne.n	800675c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800674c:	4806      	ldr	r0, [pc, #24]	; (8006768 <BSP_SD_Init+0x48>)
 800674e:	f7fe fbf9 	bl	8004f44 <HAL_SD_ConfigWideBusOperation>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800675c:	79fb      	ldrb	r3, [r7, #7]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20000188 	.word	0x20000188

0800676c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	4806      	ldr	r0, [pc, #24]	; (80067a4 <BSP_SD_ReadBlocks+0x38>)
 800678a:	f7fd fea7 	bl	80044dc <HAL_SD_ReadBlocks>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20000188 	.word	0x20000188

080067a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	4806      	ldr	r0, [pc, #24]	; (80067e0 <BSP_SD_WriteBlocks+0x38>)
 80067c6:	f7fe f867 	bl	8004898 <HAL_SD_WriteBlocks>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000188 	.word	0x20000188

080067e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80067e8:	4805      	ldr	r0, [pc, #20]	; (8006800 <BSP_SD_GetCardState+0x1c>)
 80067ea:	f7fe fc45 	bl	8005078 <HAL_SD_GetCardState>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	bf14      	ite	ne
 80067f4:	2301      	movne	r3, #1
 80067f6:	2300      	moveq	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000188 	.word	0x20000188

08006804 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4803      	ldr	r0, [pc, #12]	; (800681c <BSP_SD_GetCardInfo+0x18>)
 8006810:	f7fe fb6c 	bl	8004eec <HAL_SD_GetCardInfo>
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20000188 	.word	0x20000188

08006820 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006826:	2301      	movs	r3, #1
 8006828:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800682a:	f000 f80b 	bl	8006844 <BSP_PlatformIsDetected>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006834:	2300      	movs	r3, #0
 8006836:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	b2db      	uxtb	r3, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800684a:	2301      	movs	r3, #1
 800684c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800684e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006852:	4806      	ldr	r0, [pc, #24]	; (800686c <BSP_PlatformIsDetected+0x28>)
 8006854:	f7fb fb12 	bl	8001e7c <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800685e:	2300      	movs	r3, #0
 8006860:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006862:	79fb      	ldrb	r3, [r7, #7]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40020000 	.word	0x40020000

08006870 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <SD_CheckStatus+0x38>)
 800687c:	2201      	movs	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006880:	f7ff ffb0 	bl	80067e4 <BSP_SD_GetCardState>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d107      	bne.n	800689a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <SD_CheckStatus+0x38>)
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f023 0301 	bic.w	r3, r3, #1
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <SD_CheckStatus+0x38>)
 8006898:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800689a:	4b03      	ldr	r3, [pc, #12]	; (80068a8 <SD_CheckStatus+0x38>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000009 	.word	0x20000009

080068ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <SD_initialize+0x38>)
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80068bc:	f7ff ff30 	bl	8006720 <BSP_SD_Init>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ffd1 	bl	8006870 <SD_CheckStatus>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <SD_initialize+0x38>)
 80068d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80068d6:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <SD_initialize+0x38>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b2db      	uxtb	r3, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000009 	.word	0x20000009

080068e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ffbb 	bl	8006870 <SD_CheckStatus>
 80068fa:	4603      	mov	r3, r0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68b8      	ldr	r0, [r7, #8]
 8006922:	f7ff ff23 	bl	800676c <BSP_SD_ReadBlocks>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d107      	bne.n	800693c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800692c:	bf00      	nop
 800692e:	f7ff ff59 	bl	80067e4 <BSP_SD_GetCardState>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1fa      	bne.n	800692e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800695a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	68b8      	ldr	r0, [r7, #8]
 8006964:	f7ff ff20 	bl	80067a8 <BSP_SD_WriteBlocks>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d107      	bne.n	800697e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800696e:	bf00      	nop
 8006970:	f7ff ff38 	bl	80067e4 <BSP_SD_GetCardState>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1fa      	bne.n	8006970 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	603a      	str	r2, [r7, #0]
 8006992:	71fb      	strb	r3, [r7, #7]
 8006994:	460b      	mov	r3, r1
 8006996:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800699e:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <SD_ioctl+0xac>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <SD_ioctl+0x28>
 80069ac:	2303      	movs	r3, #3
 80069ae:	e03c      	b.n	8006a2a <SD_ioctl+0xa2>

  switch (cmd)
 80069b0:	79bb      	ldrb	r3, [r7, #6]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d834      	bhi.n	8006a20 <SD_ioctl+0x98>
 80069b6:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <SD_ioctl+0x34>)
 80069b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069d5 	.word	0x080069d5
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	08006a07 	.word	0x08006a07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069d2:	e028      	b.n	8006a26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff13 	bl	8006804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80069ea:	e01c      	b.n	8006a26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff07 	bl	8006804 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a04:	e00f      	b.n	8006a26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006a06:	f107 030c 	add.w	r3, r7, #12
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fefa 	bl	8006804 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	0a5a      	lsrs	r2, r3, #9
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006a1e:	e002      	b.n	8006a26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000009 	.word	0x20000009

08006a38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a4e:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a50:	7a5b      	ldrb	r3, [r3, #9]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d131      	bne.n	8006abc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a58:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a5a:	7a5b      	ldrb	r3, [r3, #9]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a66:	4b19      	ldr	r3, [pc, #100]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a68:	7a5b      	ldrb	r3, [r3, #9]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a78:	7a5b      	ldrb	r3, [r3, #9]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a80:	4413      	add	r3, r2
 8006a82:	79fa      	ldrb	r2, [r7, #7]
 8006a84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a88:	7a5b      	ldrb	r3, [r3, #9]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	b2d1      	uxtb	r1, r2
 8006a90:	4a0e      	ldr	r2, [pc, #56]	; (8006acc <FATFS_LinkDriverEx+0x94>)
 8006a92:	7251      	strb	r1, [r2, #9]
 8006a94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a96:	7dbb      	ldrb	r3, [r7, #22]
 8006a98:	3330      	adds	r3, #48	; 0x30
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	223a      	movs	r2, #58	; 0x3a
 8006aa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	3302      	adds	r3, #2
 8006aac:	222f      	movs	r2, #47	; 0x2f
 8006aae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3303      	adds	r3, #3
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20014260 	.word	0x20014260

08006ad0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff ffaa 	bl	8006a38 <FATFS_LinkDriverEx>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <__errno>:
 8006af0:	4b01      	ldr	r3, [pc, #4]	; (8006af8 <__errno+0x8>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	2000000c 	.word	0x2000000c

08006afc <exit>:
 8006afc:	b508      	push	{r3, lr}
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <exit+0x20>)
 8006b00:	4604      	mov	r4, r0
 8006b02:	b113      	cbz	r3, 8006b0a <exit+0xe>
 8006b04:	2100      	movs	r1, #0
 8006b06:	f3af 8000 	nop.w
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <exit+0x24>)
 8006b0c:	6818      	ldr	r0, [r3, #0]
 8006b0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b10:	b103      	cbz	r3, 8006b14 <exit+0x18>
 8006b12:	4798      	blx	r3
 8006b14:	4620      	mov	r0, r4
 8006b16:	f7fa fab5 	bl	8001084 <_exit>
 8006b1a:	bf00      	nop
 8006b1c:	00000000 	.word	0x00000000
 8006b20:	08006bc8 	.word	0x08006bc8

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	; (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	; (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	; (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	; (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 f820 	bl	8006b7c <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	08006bd4 	.word	0x08006bd4
 8006b60:	08006bd4 	.word	0x08006bd4
 8006b64:	08006bd4 	.word	0x08006bd4
 8006b68:	08006bd8 	.word	0x08006bd8

08006b6c <memset>:
 8006b6c:	4402      	add	r2, r0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d100      	bne.n	8006b76 <memset+0xa>
 8006b74:	4770      	bx	lr
 8006b76:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7a:	e7f9      	b.n	8006b70 <memset+0x4>

08006b7c <_init>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr

08006b88 <_fini>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	bf00      	nop
 8006b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8e:	bc08      	pop	{r3}
 8006b90:	469e      	mov	lr, r3
 8006b92:	4770      	bx	lr
