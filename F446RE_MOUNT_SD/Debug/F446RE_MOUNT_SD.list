
F446RE_MOUNT_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006528  08006528  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006528  08006528  00016528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006530  08006530  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006534  08006534  00016534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  2000000c  08006544  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  08006544  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118d0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002970  00000000  00000000  0003190c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00034280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00035080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239df  00000000  00000000  00035d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fc8  00000000  00000000  00059747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf4ef  00000000  00000000  0006c70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013bbfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  0013bc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800646c 	.word	0x0800646c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800646c 	.word	0x0800646c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Send_Uart>:
static void MX_USART2_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */
void Send_Uart (char *string)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff fe6f 	bl	8000204 <strlen>
 8000526:	4603      	mov	r3, r0
 8000528:	b29a      	uxth	r2, r3
 800052a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <Send_Uart+0x28>)
 8000532:	f003 ffdb 	bl	80044ec <HAL_UART_Transmit>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000016c 	.word	0x2000016c

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fbd8 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f834 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f910 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8bc 	bl	80006d0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000558:	f000 f8e4 	bl	8000724 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800055c:	f000 f898 	bl	8000690 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000560:	f005 f8ac 	bl	80056bc <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000564:	490e      	ldr	r1, [pc, #56]	; (80005a0 <main+0x5c>)
 8000566:	480f      	ldr	r0, [pc, #60]	; (80005a4 <main+0x60>)
 8000568:	f005 ff44 	bl	80063f4 <FATFS_LinkDriver>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10e      	bne.n	8000590 <main+0x4c>
		{
			/*##-2- Register the file system object to the FatFs module ##############*/
			if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8000572:	2200      	movs	r2, #0
 8000574:	490a      	ldr	r1, [pc, #40]	; (80005a0 <main+0x5c>)
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <main+0x64>)
 8000578:	f005 feaa 	bl	80062d0 <f_mount>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d003      	beq.n	800058a <main+0x46>
			{
				/* FatFs Initialization Error */
				Send_Uart ("ERROR!!! in mounting SD CARD...\r\n\n");
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x68>)
 8000584:	f7ff ffc8 	bl	8000518 <Send_Uart>
 8000588:	e002      	b.n	8000590 <main+0x4c>
			}  else Send_Uart("SD CARD mounted successfully...\r\n");
 800058a:	4809      	ldr	r0, [pc, #36]	; (80005b0 <main+0x6c>)
 800058c:	f7ff ffc4 	bl	8000518 <Send_Uart>
		}
		Send_Uart ("ERROR!!! Linking SD CARD Driver...\r\n\n");
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x70>)
 8000592:	f7ff ffc1 	bl	8000518 <Send_Uart>

		HAL_Delay(2000);
 8000596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800059a:	f000 fc21 	bl	8000de0 <HAL_Delay>
		if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800059e:	e7e1      	b.n	8000564 <main+0x20>
 80005a0:	200001b8 	.word	0x200001b8
 80005a4:	08006514 	.word	0x08006514
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	08006484 	.word	0x08006484
 80005b0:	080064a8 	.word	0x080064a8
 80005b4:	080064cc 	.word	0x080064cc

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 ff48 	bl	800645c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <SystemClock_Config+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a28      	ldr	r2, [pc, #160]	; (8000688 <SystemClock_Config+0xd0>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <SystemClock_Config+0xd0>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b23      	ldr	r3, [pc, #140]	; (800068c <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <SystemClock_Config+0xd4>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 800062c:	23a8      	movs	r3, #168	; 0xa8
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f849 	bl	80026d8 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 f91a 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f9be 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067a:	f000 f903 	bl	8000884 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <MX_SDIO_SD_Init+0x3c>)
 8000698:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <MX_SDIO_SD_Init+0x38>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f003 fea3 	bl	8004452 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8b7 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000016c 	.word	0x2000016c
 8000720:	40004400 	.word	0x40004400

08000724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_DMA_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_DMA_Init+0x4c>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	203b      	movs	r0, #59	; 0x3b
 800074c:	f000 fc47 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000750:	203b      	movs	r0, #59	; 0x3b
 8000752:	f000 fc60 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2045      	movs	r0, #69	; 0x45
 800075c:	f000 fc3f 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000760:	2045      	movs	r0, #69	; 0x45
 8000762:	f000 fc58 	bl	8001016 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <MX_GPIO_Init+0x104>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a39      	ldr	r2, [pc, #228]	; (8000878 <MX_GPIO_Init+0x104>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_GPIO_Init+0x104>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b33      	ldr	r3, [pc, #204]	; (8000878 <MX_GPIO_Init+0x104>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <MX_GPIO_Init+0x104>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x104>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_GPIO_Init+0x104>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <MX_GPIO_Init+0x104>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x104>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0x104>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0x104>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_GPIO_Init+0x104>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <MX_GPIO_Init+0x104>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <MX_GPIO_Init+0x104>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MX_GPIO_Init+0x104>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	4818      	ldr	r0, [pc, #96]	; (800087c <MX_GPIO_Init+0x108>)
 800081c:	f001 f8ce 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4812      	ldr	r0, [pc, #72]	; (8000880 <MX_GPIO_Init+0x10c>)
 8000838:	f000 ff14 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083c:	2320      	movs	r3, #32
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <MX_GPIO_Init+0x108>)
 8000854:	f000 ff06 	bl	8001664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000858:	2340      	movs	r3, #64	; 0x40
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0x10c>)
 800086c:	f000 fefa 	bl	8001664 <HAL_GPIO_Init>

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fb7a 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b0a2      	sub	sp, #136	; 0x88
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	225c      	movs	r2, #92	; 0x5c
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f005 fdab 	bl	800645c <memset>
  if(hsd->Instance==SDIO)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a8d      	ldr	r2, [pc, #564]	; (8000b40 <HAL_SD_MspInit+0x260>)
 800090c:	4293      	cmp	r3, r2
 800090e:	f040 8112 	bne.w	8000b36 <HAL_SD_MspInit+0x256>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000918:	2300      	movs	r3, #0
 800091a:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800091c:	2300      	movs	r3, #0
 800091e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f97d 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000930:	f7ff ffa8 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	4b82      	ldr	r3, [pc, #520]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	4a81      	ldr	r2, [pc, #516]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800093e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000942:	6453      	str	r3, [r2, #68]	; 0x44
 8000944:	4b7f      	ldr	r3, [pc, #508]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	4b7b      	ldr	r3, [pc, #492]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a7a      	ldr	r2, [pc, #488]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b78      	ldr	r3, [pc, #480]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4b74      	ldr	r3, [pc, #464]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	4a73      	ldr	r2, [pc, #460]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6313      	str	r3, [r2, #48]	; 0x30
 800097c:	4b71      	ldr	r3, [pc, #452]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	4b6d      	ldr	r3, [pc, #436]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a6c      	ldr	r2, [pc, #432]	; (8000b44 <HAL_SD_MspInit+0x264>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b6a      	ldr	r3, [pc, #424]	; (8000b44 <HAL_SD_MspInit+0x264>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009a4:	2303      	movs	r3, #3
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009b6:	230c      	movs	r3, #12
 80009b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009c0:	4619      	mov	r1, r3
 80009c2:	4861      	ldr	r0, [pc, #388]	; (8000b48 <HAL_SD_MspInit+0x268>)
 80009c4:	f000 fe4e 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c8:	2304      	movs	r3, #4
 80009ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009da:	230c      	movs	r3, #12
 80009dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009e4:	4619      	mov	r1, r3
 80009e6:	4858      	ldr	r0, [pc, #352]	; (8000b48 <HAL_SD_MspInit+0x268>)
 80009e8:	f000 fe3c 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80009ec:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80009f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a00:	230c      	movs	r3, #12
 8000a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	484f      	ldr	r0, [pc, #316]	; (8000b4c <HAL_SD_MspInit+0x26c>)
 8000a0e:	f000 fe29 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a12:	2304      	movs	r3, #4
 8000a14:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4847      	ldr	r0, [pc, #284]	; (8000b50 <HAL_SD_MspInit+0x270>)
 8000a32:	f000 fe17 	bl	8001664 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a38:	4a47      	ldr	r2, [pc, #284]	; (8000b58 <HAL_SD_MspInit+0x278>)
 8000a3a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a3c:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a56:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a58:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a5e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a60:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a6e:	4b39      	ldr	r3, [pc, #228]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a74:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a76:	4b37      	ldr	r3, [pc, #220]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a7c:	4b35      	ldr	r3, [pc, #212]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a82:	4b34      	ldr	r3, [pc, #208]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a8a:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000a92:	4830      	ldr	r0, [pc, #192]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000a94:	f000 fada 	bl	800104c <HAL_DMA_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_SD_MspInit+0x1c2>
    {
      Error_Handler();
 8000a9e:	f7ff fef1 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa8:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <HAL_SD_MspInit+0x274>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ab0:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <HAL_SD_MspInit+0x280>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000ae8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aec:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000af0:	2204      	movs	r2, #4
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000afc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b00:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000b04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b08:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000b0c:	f000 fa9e 	bl	800104c <HAL_DMA_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_SD_MspInit+0x23a>
    {
      Error_Handler();
 8000b16:	f7ff feb5 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_SD_MspInit+0x27c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2031      	movs	r0, #49	; 0x31
 8000b2c:	f000 fa57 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000b30:	2031      	movs	r0, #49	; 0x31
 8000b32:	f000 fa70 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3788      	adds	r7, #136	; 0x88
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	200000ac 	.word	0x200000ac
 8000b58:	40026458 	.word	0x40026458
 8000b5c:	2000010c 	.word	0x2000010c
 8000b60:	400264a0 	.word	0x400264a0

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12b      	bne.n	8000bde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000bda:	f000 fd43 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f8ae 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <SDIO_IRQHandler+0x10>)
 8000c4e:	f002 fbf5 	bl	800343c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000028 	.word	0x20000028

08000c5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA2_Stream3_IRQHandler+0x10>)
 8000c62:	f000 fac3 	bl	80011ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000ac 	.word	0x200000ac

08000c70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA2_Stream6_IRQHandler+0x10>)
 8000c76:	f000 fab9 	bl	80011ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000010c 	.word	0x2000010c

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f005 fb9d 	bl	8006414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc33 	bl	8000544 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cec:	08006538 	.word	0x08006538
  ldr r2, =_sbss
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf4:	20001220 	.word	0x20001220

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f94f 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fdae 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f967 	bl	8001032 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d7c:	f000 f92f 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	200001b0 	.word	0x200001b0

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	200001b0 	.word	0x200001b0

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff feb6 	bl	8000dc8 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e099      	b.n	800119c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001088:	e00f      	b.n	80010aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800108a:	f7ff fe9d 	bl	8000dc8 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b05      	cmp	r3, #5
 8001096:	d908      	bls.n	80010aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2220      	movs	r2, #32
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e078      	b.n	800119c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e8      	bne.n	800108a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_DMA_Init+0x158>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2b04      	cmp	r3, #4
 8001102:	d107      	bne.n	8001114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4313      	orrs	r3, r2
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	2b04      	cmp	r3, #4
 800113c:	d117      	bne.n	800116e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fa0b 	bl	800156c <DMA_CheckFifoParam>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800116a:	2301      	movs	r3, #1
 800116c:	e016      	b.n	800119c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f9c2 	bl	8001500 <DMA_CalcBaseAndBitshift>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	223f      	movs	r2, #63	; 0x3f
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f010803f 	.word	0xf010803f

080011a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d004      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00c      	b.n	80011e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2205      	movs	r2, #5
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011f8:	4b8e      	ldr	r3, [pc, #568]	; (8001434 <HAL_DMA_IRQHandler+0x248>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a8e      	ldr	r2, [pc, #568]	; (8001438 <HAL_DMA_IRQHandler+0x24c>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	0a9b      	lsrs	r3, r3, #10
 8001204:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2208      	movs	r2, #8
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d01a      	beq.n	8001258 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	2208      	movs	r2, #8
 8001246:	409a      	lsls	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	2201      	movs	r2, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d012      	beq.n	800128e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	2201      	movs	r2, #1
 800127c:	409a      	lsls	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001286:	f043 0202 	orr.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2204      	movs	r2, #4
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d012      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00b      	beq.n	80012c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2204      	movs	r2, #4
 80012b2:	409a      	lsls	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012bc:	f043 0204 	orr.w	r2, r3, #4
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2210      	movs	r2, #16
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d043      	beq.n	800135c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d03c      	beq.n	800135c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2210      	movs	r2, #16
 80012e8:	409a      	lsls	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d018      	beq.n	800132e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d108      	bne.n	800131c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	2b00      	cmp	r3, #0
 8001310:	d024      	beq.n	800135c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
 800131a:	e01f      	b.n	800135c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001320:	2b00      	cmp	r3, #0
 8001322:	d01b      	beq.n	800135c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
 800132c:	e016      	b.n	800135c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0208 	bic.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	2220      	movs	r2, #32
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 808f 	beq.w	800148c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8087 	beq.w	800148c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001382:	2220      	movs	r2, #32
 8001384:	409a      	lsls	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b05      	cmp	r3, #5
 8001394:	d136      	bne.n	8001404 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0216 	bic.w	r2, r2, #22
 80013a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <HAL_DMA_IRQHandler+0x1da>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0208 	bic.w	r2, r2, #8
 80013d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013da:	223f      	movs	r2, #63	; 0x3f
 80013dc:	409a      	lsls	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d07e      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
        }
        return;
 8001402:	e079      	b.n	80014f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01d      	beq.n	800144e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10d      	bne.n	800143c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	2b00      	cmp	r3, #0
 8001426:	d031      	beq.n	800148c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	4798      	blx	r3
 8001430:	e02c      	b.n	800148c <HAL_DMA_IRQHandler+0x2a0>
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000
 8001438:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	4798      	blx	r3
 800144c:	e01e      	b.n	800148c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10f      	bne.n	800147c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0210 	bic.w	r2, r2, #16
 800146a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2b00      	cmp	r3, #0
 8001492:	d032      	beq.n	80014fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d022      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2205      	movs	r2, #5
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3301      	adds	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d307      	bcc.n	80014d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f2      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x2cc>
 80014d2:	e000      	b.n	80014d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
 80014f6:	e000      	b.n	80014fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80014f8:	bf00      	nop
    }
  }
}
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	3b10      	subs	r3, #16
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <DMA_CalcBaseAndBitshift+0x64>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <DMA_CalcBaseAndBitshift+0x68>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d909      	bls.n	8001542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	1d1a      	adds	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	659a      	str	r2, [r3, #88]	; 0x58
 8001540:	e007      	b.n	8001552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	aaaaaaab 	.word	0xaaaaaaab
 8001568:	0800650c 	.word	0x0800650c

0800156c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d11f      	bne.n	80015c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d856      	bhi.n	800163a <DMA_CheckFifoParam+0xce>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <DMA_CheckFifoParam+0x28>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015b7 	.word	0x080015b7
 800159c:	080015a5 	.word	0x080015a5
 80015a0:	0800163b 	.word	0x0800163b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d046      	beq.n	800163e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b4:	e043      	b.n	800163e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015be:	d140      	bne.n	8001642 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c4:	e03d      	b.n	8001642 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d121      	bne.n	8001614 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d837      	bhi.n	8001646 <DMA_CheckFifoParam+0xda>
 80015d6:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <DMA_CheckFifoParam+0x70>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015f3 	.word	0x080015f3
 80015e4:	080015ed 	.word	0x080015ed
 80015e8:	08001605 	.word	0x08001605
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
      break;
 80015f0:	e030      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d025      	beq.n	800164a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001602:	e022      	b.n	800164a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800160c:	d11f      	bne.n	800164e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001612:	e01c      	b.n	800164e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d903      	bls.n	8001622 <DMA_CheckFifoParam+0xb6>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d003      	beq.n	8001628 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001620:	e018      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
      break;
 8001626:	e015      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
      break;
 8001638:	e00b      	b.n	8001652 <DMA_CheckFifoParam+0xe6>
      break;
 800163a:	bf00      	nop
 800163c:	e00a      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;
 800163e:	bf00      	nop
 8001640:	e008      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;
 8001642:	bf00      	nop
 8001644:	e006      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
 8001648:	e004      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;
 800164a:	bf00      	nop
 800164c:	e002      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;   
 800164e:	bf00      	nop
 8001650:	e000      	b.n	8001654 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
    }
  } 
  
  return status; 
 8001654:	7bfb      	ldrb	r3, [r7, #15]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e165      	b.n	800194c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001680:	2201      	movs	r2, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8154 	bne.w	8001946 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d005      	beq.n	80016b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d130      	bne.n	8001718 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80ae 	beq.w	8001946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a5c      	ldr	r2, [pc, #368]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_GPIO_Init+0x300>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001806:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4f      	ldr	r2, [pc, #316]	; (800196c <HAL_GPIO_Init+0x308>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x21a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <HAL_GPIO_Init+0x30c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x216>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <HAL_GPIO_Init+0x310>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x212>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x314>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_GPIO_Init+0x318>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x20a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4a      	ldr	r2, [pc, #296]	; (8001980 <HAL_GPIO_Init+0x31c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x206>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_GPIO_Init+0x320>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x202>
 8001862:	2306      	movs	r3, #6
 8001864:	e00c      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001866:	2307      	movs	r3, #7
 8001868:	e00a      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800186a:	2305      	movs	r3, #5
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800186e:	2304      	movs	r3, #4
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x21c>
 800187e:	2300      	movs	r3, #0
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x304>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_GPIO_Init+0x324>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_GPIO_Init+0x324>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_GPIO_Init+0x324>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_GPIO_Init+0x324>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	f67f ae96 	bls.w	8001680 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40021400 	.word	0x40021400
 8001984:	40021800 	.word	0x40021800
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d8:	e003      	b.n	80019e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	041a      	lsls	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	619a      	str	r2, [r3, #24]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cc      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b68      	ldr	r3, [pc, #416]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90c      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b65      	ldr	r3, [pc, #404]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d044      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e067      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4934      	ldr	r1, [pc, #208]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f972 	bl	8000dc8 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f96e 	bl	8000dc8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 fb7f 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8d2 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080064f4 	.word	0x080064f4
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08006504 	.word	0x08006504

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08006504 	.word	0x08006504

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	; 0x30
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d010      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001c5c:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	496c      	ldr	r1, [pc, #432]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001c8a:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	4960      	ldr	r1, [pc, #384]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d017      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cb8:	4b58      	ldr	r3, [pc, #352]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4955      	ldr	r1, [pc, #340]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d017      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	4946      	ldr	r1, [pc, #280]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d12:	d101      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001d14:	2301      	movs	r3, #1
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 808a 	beq.w	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a33      	ldr	r2, [pc, #204]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d5a:	f7ff f835 	bl	8000dc8 <HAL_GetTick>
 8001d5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7ff f831 	bl	8000dc8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e278      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d80:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d88:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d02f      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d98:	6a3a      	ldr	r2, [r7, #32]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d028      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001da6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001da8:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d114      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe ffff 	bl	8000dc8 <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe fffb 	bl	8000dc8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e240      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ee      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dfc:	d114      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e12:	4902      	ldr	r1, [pc, #8]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]
 8001e18:	e00c      	b.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000
 8001e24:	42470e40 	.word	0x42470e40
 8001e28:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a49      	ldr	r2, [pc, #292]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e32:	6093      	str	r3, [r2, #8]
 8001e34:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	4944      	ldr	r1, [pc, #272]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001e58:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001e5a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001e68:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4937      	ldr	r1, [pc, #220]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e8a:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e98:	492e      	ldr	r1, [pc, #184]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d011      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	4926      	ldr	r1, [pc, #152]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001edc:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	491a      	ldr	r1, [pc, #104]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0c:	4911      	ldr	r1, [pc, #68]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f30:	f040 80ff 	bne.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f3a:	f7fe ff45 	bl	8000dc8 <HAL_GetTick>
 8001f3e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f42:	f7fe ff41 	bl	8000dc8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e188      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	424711e0 	.word	0x424711e0
 8001f5c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1ea      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d028      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d124      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f94:	4b71      	ldr	r3, [pc, #452]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fac:	0e1b      	lsrs	r3, r3, #24
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	4961      	ldr	r1, [pc, #388]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d035      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d130      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800200a:	4b54      	ldr	r3, [pc, #336]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	3301      	adds	r3, #1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800201e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002022:	0f1b      	lsrs	r3, r3, #28
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	431a      	orrs	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	3b01      	subs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	071b      	lsls	r3, r3, #28
 800204c:	4943      	ldr	r1, [pc, #268]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002054:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	f023 021f 	bic.w	r2, r3, #31
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	493d      	ldr	r1, [pc, #244]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d029      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002080:	d124      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	3301      	adds	r3, #1
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209a:	0f1b      	lsrs	r3, r3, #28
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	019b      	lsls	r3, r3, #6
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	041b      	lsls	r3, r3, #16
 80020b8:	431a      	orrs	r2, r3
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	431a      	orrs	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	071b      	lsls	r3, r3, #28
 80020c4:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	3b01      	subs	r3, #1
 80020ec:	041b      	lsls	r3, r3, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	071b      	lsls	r3, r3, #28
 80020fe:	4917      	ldr	r1, [pc, #92]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800210c:	f7fe fe5c 	bl	8000dc8 <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002114:	f7fe fe58 	bl	8000dc8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e09f      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	2b01      	cmp	r3, #1
 8002136:	f040 8095 	bne.w	8002264 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002140:	f7fe fe42 	bl	8000dc8 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002146:	e00f      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002148:	f7fe fe3e 	bl	8000dc8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d908      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e085      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	42470068 	.word	0x42470068
 8002164:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002174:	d0e8      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2b00      	cmp	r3, #0
 8002188:	d009      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02b      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	2b00      	cmp	r3, #0
 800219c:	d127      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	3301      	adds	r3, #1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	431a      	orrs	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	4928      	ldr	r1, [pc, #160]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	3b01      	subs	r3, #1
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4922      	ldr	r1, [pc, #136]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01d      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d118      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	0e1b      	lsrs	r3, r3, #24
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	019b      	lsls	r3, r3, #6
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	3b01      	subs	r3, #1
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	4910      	ldr	r1, [pc, #64]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800223c:	f7fe fdc4 	bl	8000dc8 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002244:	f7fe fdc0 	bl	8000dc8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e007      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800225e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002262:	d1ef      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3730      	adds	r7, #48	; 0x30
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	42470070 	.word	0x42470070

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800227c:	b0ae      	sub	sp, #184	; 0xb8
 800227e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800229e:	4bcb      	ldr	r3, [pc, #812]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	f200 8206 	bhi.w	80026b8 <HAL_RCC_GetSysClockFreq+0x440>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022e9 	.word	0x080022e9
 80022b8:	080026b9 	.word	0x080026b9
 80022bc:	080026b9 	.word	0x080026b9
 80022c0:	080026b9 	.word	0x080026b9
 80022c4:	080022f1 	.word	0x080022f1
 80022c8:	080026b9 	.word	0x080026b9
 80022cc:	080026b9 	.word	0x080026b9
 80022d0:	080026b9 	.word	0x080026b9
 80022d4:	080022f9 	.word	0x080022f9
 80022d8:	080026b9 	.word	0x080026b9
 80022dc:	080026b9 	.word	0x080026b9
 80022e0:	080026b9 	.word	0x080026b9
 80022e4:	080024e9 	.word	0x080024e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4bb9      	ldr	r3, [pc, #740]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80022ee:	e1e7      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4bb8      	ldr	r3, [pc, #736]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022f6:	e1e3      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4bb4      	ldr	r3, [pc, #720]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002304:	4bb1      	ldr	r3, [pc, #708]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d071      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002310:	4bae      	ldr	r3, [pc, #696]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	2200      	movs	r2, #0
 8002318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800231c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f04f 0000 	mov.w	r0, #0
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	0159      	lsls	r1, r3, #5
 8002344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002348:	0150      	lsls	r0, r2, #5
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4621      	mov	r1, r4
 8002350:	1a51      	subs	r1, r2, r1
 8002352:	6439      	str	r1, [r7, #64]	; 0x40
 8002354:	4629      	mov	r1, r5
 8002356:	eb63 0301 	sbc.w	r3, r3, r1
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002368:	4649      	mov	r1, r9
 800236a:	018b      	lsls	r3, r1, #6
 800236c:	4641      	mov	r1, r8
 800236e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002372:	4641      	mov	r1, r8
 8002374:	018a      	lsls	r2, r1, #6
 8002376:	4641      	mov	r1, r8
 8002378:	1a51      	subs	r1, r2, r1
 800237a:	63b9      	str	r1, [r7, #56]	; 0x38
 800237c:	4649      	mov	r1, r9
 800237e:	eb63 0301 	sbc.w	r3, r3, r1
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002390:	4649      	mov	r1, r9
 8002392:	00cb      	lsls	r3, r1, #3
 8002394:	4641      	mov	r1, r8
 8002396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800239a:	4641      	mov	r1, r8
 800239c:	00ca      	lsls	r2, r1, #3
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	4622      	mov	r2, r4
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
 80023aa:	462b      	mov	r3, r5
 80023ac:	460a      	mov	r2, r1
 80023ae:	eb42 0303 	adc.w	r3, r2, r3
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023c0:	4629      	mov	r1, r5
 80023c2:	024b      	lsls	r3, r1, #9
 80023c4:	4621      	mov	r1, r4
 80023c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ca:	4621      	mov	r1, r4
 80023cc:	024a      	lsls	r2, r1, #9
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023d6:	2200      	movs	r2, #0
 80023d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80023dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80023e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80023e4:	f7fd ff16 	bl	8000214 <__aeabi_uldivmod>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4613      	mov	r3, r2
 80023ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023f2:	e067      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	2200      	movs	r2, #0
 80023fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002400:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002404:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240c:	67bb      	str	r3, [r7, #120]	; 0x78
 800240e:	2300      	movs	r3, #0
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002412:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	f04f 0000 	mov.w	r0, #0
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	0159      	lsls	r1, r3, #5
 8002424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002428:	0150      	lsls	r0, r2, #5
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4621      	mov	r1, r4
 8002430:	1a51      	subs	r1, r2, r1
 8002432:	62b9      	str	r1, [r7, #40]	; 0x28
 8002434:	4629      	mov	r1, r5
 8002436:	eb63 0301 	sbc.w	r3, r3, r1
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002448:	4649      	mov	r1, r9
 800244a:	018b      	lsls	r3, r1, #6
 800244c:	4641      	mov	r1, r8
 800244e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002452:	4641      	mov	r1, r8
 8002454:	018a      	lsls	r2, r1, #6
 8002456:	4641      	mov	r1, r8
 8002458:	ebb2 0a01 	subs.w	sl, r2, r1
 800245c:	4649      	mov	r1, r9
 800245e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800246e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002476:	4692      	mov	sl, r2
 8002478:	469b      	mov	fp, r3
 800247a:	4623      	mov	r3, r4
 800247c:	eb1a 0303 	adds.w	r3, sl, r3
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	462b      	mov	r3, r5
 8002484:	eb4b 0303 	adc.w	r3, fp, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ac:	2200      	movs	r2, #0
 80024ae:	673b      	str	r3, [r7, #112]	; 0x70
 80024b0:	677a      	str	r2, [r7, #116]	; 0x74
 80024b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80024b6:	f7fd fead 	bl	8000214 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4613      	mov	r3, r2
 80024c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	3301      	adds	r3, #1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80024d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80024e6:	e0eb      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06b      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <HAL_RCC_GetSysClockFreq+0x354>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	2200      	movs	r2, #0
 8002508:	66bb      	str	r3, [r7, #104]	; 0x68
 800250a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800250c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	663b      	str	r3, [r7, #96]	; 0x60
 8002514:	2300      	movs	r3, #0
 8002516:	667b      	str	r3, [r7, #100]	; 0x64
 8002518:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800251c:	4622      	mov	r2, r4
 800251e:	462b      	mov	r3, r5
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	0159      	lsls	r1, r3, #5
 800252a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800252e:	0150      	lsls	r0, r2, #5
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4621      	mov	r1, r4
 8002536:	1a51      	subs	r1, r2, r1
 8002538:	61b9      	str	r1, [r7, #24]
 800253a:	4629      	mov	r1, r5
 800253c:	eb63 0301 	sbc.w	r3, r3, r1
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800254e:	4659      	mov	r1, fp
 8002550:	018b      	lsls	r3, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002558:	4651      	mov	r1, sl
 800255a:	018a      	lsls	r2, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ebb2 0801 	subs.w	r8, r2, r1
 8002562:	4659      	mov	r1, fp
 8002564:	eb63 0901 	sbc.w	r9, r3, r1
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002574:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002578:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257c:	4690      	mov	r8, r2
 800257e:	4699      	mov	r9, r3
 8002580:	4623      	mov	r3, r4
 8002582:	eb18 0303 	adds.w	r3, r8, r3
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	462b      	mov	r3, r5
 800258a:	eb49 0303 	adc.w	r3, r9, r3
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800259c:	4629      	mov	r1, r5
 800259e:	024b      	lsls	r3, r1, #9
 80025a0:	4621      	mov	r1, r4
 80025a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a6:	4621      	mov	r1, r4
 80025a8:	024a      	lsls	r2, r1, #9
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025b2:	2200      	movs	r2, #0
 80025b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80025b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025bc:	f7fd fe2a 	bl	8000214 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4613      	mov	r3, r2
 80025c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ca:	e065      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x420>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d8:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	2200      	movs	r2, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	4611      	mov	r1, r2
 80025e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e8:	653b      	str	r3, [r7, #80]	; 0x50
 80025ea:	2300      	movs	r3, #0
 80025ec:	657b      	str	r3, [r7, #84]	; 0x54
 80025ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4641      	mov	r1, r8
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4649      	mov	r1, r9
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002624:	4659      	mov	r1, fp
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4651      	mov	r1, sl
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4651      	mov	r1, sl
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4651      	mov	r1, sl
 8002634:	1a54      	subs	r4, r2, r1
 8002636:	4659      	mov	r1, fp
 8002638:	eb63 0501 	sbc.w	r5, r3, r1
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	00eb      	lsls	r3, r5, #3
 8002646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800264a:	00e2      	lsls	r2, r4, #3
 800264c:	4614      	mov	r4, r2
 800264e:	461d      	mov	r5, r3
 8002650:	4643      	mov	r3, r8
 8002652:	18e3      	adds	r3, r4, r3
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	464b      	mov	r3, r9
 8002658:	eb45 0303 	adc.w	r3, r5, r3
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266a:	4629      	mov	r1, r5
 800266c:	028b      	lsls	r3, r1, #10
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002674:	4621      	mov	r1, r4
 8002676:	028a      	lsls	r2, r1, #10
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002680:	2200      	movs	r2, #0
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
 8002684:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800268a:	f7fd fdc3 	bl	8000214 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4613      	mov	r3, r2
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002698:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0f1b      	lsrs	r3, r3, #28
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80026a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026b6:	e003      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	37b8      	adds	r7, #184	; 0xb8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	00f42400 	.word	0x00f42400

080026d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e28d      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8083 	beq.w	80027fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026f8:	4b94      	ldr	r3, [pc, #592]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b04      	cmp	r3, #4
 8002702:	d019      	beq.n	8002738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002704:	4b91      	ldr	r3, [pc, #580]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800270c:	2b08      	cmp	r3, #8
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002710:	4b8e      	ldr	r3, [pc, #568]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271c:	d00c      	beq.n	8002738 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002726:	2b0c      	cmp	r3, #12
 8002728:	d112      	bne.n	8002750 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05b      	beq.n	80027fc <HAL_RCC_OscConfig+0x124>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d157      	bne.n	80027fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e25a      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x90>
 800275a:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7b      	ldr	r2, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xcc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0xb4>
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a75      	ldr	r2, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a72      	ldr	r2, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xcc>
 800278c:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b6c      	ldr	r3, [pc, #432]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6b      	ldr	r2, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fb0c 	bl	8000dc8 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fb08 	bl	8000dc8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e21f      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xdc>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe faf8 	bl	8000dc8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe faf4 	bl	8000dc8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e20b      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b57      	ldr	r3, [pc, #348]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x104>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d06f      	beq.n	80028ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002816:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x186>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1d3      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4937      	ldr	r1, [pc, #220]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <HAL_RCC_OscConfig+0x278>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe faa1 	bl	8000dc8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fa9d 	bl	8000dc8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1b4      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4925      	ldr	r1, [pc, #148]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_OscConfig+0x278>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fa80 	bl	8000dc8 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe fa7c 	bl	8000dc8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e193      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d036      	beq.n	8002964 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_RCC_OscConfig+0x27c>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002904:	f7fe fa60 	bl	8000dc8 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fa5c 	bl	8000dc8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e173      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x274>)
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x234>
 800292a:	e01b      	b.n	8002964 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_OscConfig+0x27c>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fa49 	bl	8000dc8 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	e00e      	b.n	8002958 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293a:	f7fe fa45 	bl	8000dc8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d907      	bls.n	8002958 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e15c      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 800294c:	40023800 	.word	0x40023800
 8002950:	42470000 	.word	0x42470000
 8002954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b8a      	ldr	r3, [pc, #552]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ea      	bne.n	800293a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8097 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10f      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b7f      	ldr	r3, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a7e      	ldr	r2, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b7c      	ldr	r3, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b79      	ldr	r3, [pc, #484]	; (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a75      	ldr	r2, [pc, #468]	; (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fa05 	bl	8000dc8 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fa01 	bl	8000dc8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e118      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b6c      	ldr	r3, [pc, #432]	; (8002b88 <HAL_RCC_OscConfig+0x4b0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x31e>
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	; 0x70
 80029f4:	e01c      	b.n	8002a30 <HAL_RCC_OscConfig+0x358>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x340>
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a60      	ldr	r2, [pc, #384]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x358>
 8002a18:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a56      	ldr	r2, [pc, #344]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a2a:	f023 0304 	bic.w	r3, r3, #4
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d015      	beq.n	8002a64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe f9c6 	bl	8000dc8 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a40:	f7fe f9c2 	bl	8000dc8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0d7      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0ee      	beq.n	8002a40 <HAL_RCC_OscConfig+0x368>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe f9b0 	bl	8000dc8 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a6c:	f7fe f9ac 	bl	8000dc8 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0c1      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80ad 	beq.w	8002c04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aaa:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d060      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d145      	bne.n	8002b4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f980 	bl	8000dc8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe f97c 	bl	8000dc8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e093      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	019b      	lsls	r3, r3, #6
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	071b      	lsls	r3, r3, #28
 8002b16:	491b      	ldr	r1, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe f951 	bl	8000dc8 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fe f94d 	bl	8000dc8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e064      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x452>
 8002b48:	e05c      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_RCC_OscConfig+0x4b4>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe f93a 	bl	8000dc8 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe f936 	bl	8000dc8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04d      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x480>
 8002b76:	e045      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e040      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <HAL_RCC_OscConfig+0x538>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d030      	beq.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d129      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d122      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d119      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d10f      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800

08002c14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e022      	b.n	8002c6c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fe51 	bl	80008e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2203      	movs	r2, #3
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f814 	bl	8002c74 <HAL_SD_InitCard>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00a      	b.n	8002c6c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c90:	2376      	movs	r3, #118	; 0x76
 8002c92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681d      	ldr	r5, [r3, #0]
 8002c98:	466c      	mov	r4, sp
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cac:	4628      	mov	r0, r5
 8002cae:	f001 ff91 	bl	8004bd4 <SDIO_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e04f      	b.n	8002d64 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_SD_InitCard+0xf8>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 ffc9 	bl	8004c66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_SD_InitCard+0xf8>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f7fe f880 	bl	8000de0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f001 f8f1 	bl	8003ec8 <SD_PowerON>
 8002ce6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e02e      	b.n	8002d64 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 f810 	bl	8003d2c <SD_InitCard>
 8002d0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00b      	beq.n	8002d2c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e01b      	b.n	8002d64 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f828 	bl	8004d8a <SDMMC_CmdBlockLength>
 8002d3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00f      	beq.n	8002d62 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_SD_InitCard+0xfc>)
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6c:	422580a0 	.word	0x422580a0
 8002d70:	004005ff 	.word	0x004005ff

08002d74 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b092      	sub	sp, #72	; 0x48
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d82:	f7fe f821 	bl	8000dc8 <HAL_GetTick>
 8002d86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d107      	bne.n	8002da6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1bd      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	f040 81b0 	bne.w	8003114 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d907      	bls.n	8002dd8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e1a4      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	025b      	lsls	r3, r3, #9
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	025b      	lsls	r3, r3, #9
 8002e00:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002e02:	2390      	movs	r3, #144	; 0x90
 8002e04:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f107 0214 	add.w	r2, r7, #20
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 ff88 	bl	8004d32 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d90a      	bls.n	8002e3e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 ffec 	bl	8004e12 <SDMMC_CmdReadMultiBlock>
 8002e3a:	6478      	str	r0, [r7, #68]	; 0x44
 8002e3c:	e009      	b.n	8002e52 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 ffbf 	bl	8004dce <SDMMC_CmdReadSingleBlock>
 8002e50:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d012      	beq.n	8002e7e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7a      	ldr	r2, [pc, #488]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	431a      	orrs	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e151      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e82:	e061      	b.n	8002f48 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03c      	beq.n	8002f0c <HAL_SD_ReadBlocks+0x198>
 8002e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d039      	beq.n	8002f0c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9c:	e033      	b.n	8002f06 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 fec1 	bl	8004c2a <SDIO_ReadFIFO>
 8002ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	3301      	adds	r3, #1
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	0e1b      	lsrs	r3, r3, #24
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efc:	3b01      	subs	r3, #1
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	3301      	adds	r3, #1
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
 8002f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d9c8      	bls.n	8002e9e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002f0c:	f7fd ff5c 	bl	8000dc8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <HAL_SD_ReadBlocks+0x1ae>
 8002f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d112      	bne.n	8002f48 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0ec      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d096      	beq.n	8002e84 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_SD_ReadBlocks+0x236>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d91f      	bls.n	8002faa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d01b      	beq.n	8002faa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 ffb2 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8002f7c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2f      	ldr	r2, [pc, #188]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e0bb      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d012      	beq.n	8002fde <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	f043 0208 	orr.w	r2, r3, #8
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0a1      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d012      	beq.n	8003012 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	f043 0202 	orr.w	r2, r3, #2
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e087      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d064      	beq.n	80030ea <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_SD_ReadBlocks+0x2d4>)
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e06d      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
 8003046:	bf00      	nop
 8003048:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fdea 	bl	8004c2a <SDIO_ReadFIFO>
 8003056:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	3301      	adds	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	3301      	adds	r3, #1
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	3b01      	subs	r3, #1
 8003080:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	b2da      	uxtb	r2, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	3301      	adds	r3, #1
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	3b01      	subs	r3, #1
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	0e1b      	lsrs	r3, r3, #24
 800309c:	b2da      	uxtb	r2, r3
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	3301      	adds	r3, #1
 80030a6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80030a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030aa:	3b01      	subs	r3, #1
 80030ac:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80030ae:	f7fd fe8b 	bl	8000dc8 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d902      	bls.n	80030c4 <HAL_SD_ReadBlocks+0x350>
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d112      	bne.n	80030ea <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_SD_ReadBlocks+0x3b8>)
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01b      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_SD_ReadBlocks+0x38a>
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1a6      	bne.n	800304c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f240 523a 	movw	r2, #1338	; 0x53a
 8003106:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	e006      	b.n	8003122 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3748      	adds	r7, #72	; 0x48
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	004005ff 	.word	0x004005ff

08003130 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b092      	sub	sp, #72	; 0x48
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800313e:	f7fd fe43 	bl	8000dc8 <HAL_GetTick>
 8003142:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e165      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	f040 8158 	bne.w	8003420 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	441a      	add	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	429a      	cmp	r2, r3
 8003182:	d907      	bls.n	8003194 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e14c      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2203      	movs	r2, #3
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	025b      	lsls	r3, r3, #9
 80031b0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031be:	2390      	movs	r3, #144	; 0x90
 80031c0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f107 0218 	add.w	r2, r7, #24
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fdaa 	bl	8004d32 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d90a      	bls.n	80031fa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 fe52 	bl	8004e9a <SDMMC_CmdWriteMultiBlock>
 80031f6:	6478      	str	r0, [r7, #68]	; 0x44
 80031f8:	e009      	b.n	800320e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2210      	movs	r2, #16
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fe25 	bl	8004e56 <SDMMC_CmdWriteSingleBlock>
 800320c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800320e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003210:	2b00      	cmp	r3, #0
 8003212:	d012      	beq.n	800323a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a87      	ldr	r2, [pc, #540]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003222:	431a      	orrs	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0f9      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800323e:	e065      	b.n	800330c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d040      	beq.n	80032d0 <HAL_SD_WriteBlocks+0x1a0>
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d03d      	beq.n	80032d0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003254:	2300      	movs	r3, #0
 8003256:	643b      	str	r3, [r7, #64]	; 0x40
 8003258:	e037      	b.n	80032ca <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	3301      	adds	r3, #1
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	3b01      	subs	r3, #1
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	021a      	lsls	r2, r3, #8
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327a:	3301      	adds	r3, #1
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800327e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003280:	3b01      	subs	r3, #1
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003292:	3301      	adds	r3, #1
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003298:	3b01      	subs	r3, #1
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	061a      	lsls	r2, r3, #24
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	3301      	adds	r3, #1
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b0:	3b01      	subs	r3, #1
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f107 0214 	add.w	r2, r7, #20
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 fcc0 	bl	8004c44 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80032c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c6:	3301      	adds	r3, #1
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
 80032ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032cc:	2b07      	cmp	r3, #7
 80032ce:	d9c4      	bls.n	800325a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032d0:	f7fd fd7a 	bl	8000dc8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032dc:	429a      	cmp	r2, r3
 80032de:	d902      	bls.n	80032e6 <HAL_SD_WriteBlocks+0x1b6>
 80032e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d112      	bne.n	800330c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a53      	ldr	r2, [pc, #332]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e090      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003316:	2b00      	cmp	r3, #0
 8003318:	d092      	beq.n	8003240 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d022      	beq.n	800336e <HAL_SD_WriteBlocks+0x23e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d91f      	bls.n	800336e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	2b03      	cmp	r3, #3
 8003334:	d01b      	beq.n	800336e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fdd0 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003340:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a3a      	ldr	r2, [pc, #232]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e05f      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2d      	ldr	r2, [pc, #180]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f043 0208 	orr.w	r2, r3, #8
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e045      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a20      	ldr	r2, [pc, #128]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e02b      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a13      	ldr	r2, [pc, #76]	; (8003438 <HAL_SD_WriteBlocks+0x308>)
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	f043 0210 	orr.w	r2, r3, #16
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e011      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e006      	b.n	800342e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
  }
}
 800342e:	4618      	mov	r0, r3
 8003430:	3748      	adds	r7, #72	; 0x48
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	004005ff 	.word	0x004005ff

0800343c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_SD_IRQHandler+0x2e>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 ff4f 	bl	8004306 <SD_Read_IT>
 8003468:	e155      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 808f 	beq.w	8003598 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003492:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003496:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d039      	beq.n	8003526 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_SD_IRQHandler+0x8a>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d011      	beq.n	80034ea <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fd08 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 80034d0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91f 	bl	8003728 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_SD_IRQHandler+0xda>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f002 f976 	bl	8005808 <HAL_SD_RxCpltCallback>
 800351c:	e0fb      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f002 f968 	bl	80057f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003524:	e0f7      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80f2 	beq.w	8003716 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d011      	beq.n	8003560 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fccd 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003546:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8e4 	bl	8003728 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 80d5 	bne.w	8003716 <HAL_SD_IRQHandler+0x2da>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 80cf 	bne.w	8003716 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0208 	bic.w	r2, r2, #8
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f002 f92f 	bl	80057f4 <HAL_SD_TxCpltCallback>
}
 8003596:	e0be      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_SD_IRQHandler+0x17c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fef9 	bl	80043a8 <SD_Write_IT>
 80035b6:	e0ae      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035be:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a7 	beq.w	8003716 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f043 0208 	orr.w	r2, r3, #8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	f043 0210 	orr.w	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f240 523a 	movw	r2, #1338	; 0x53a
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f001 fc46 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f855 	bl	8003728 <HAL_SD_ErrorCallback>
}
 800367e:	e04a      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d045      	beq.n	8003716 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d104      	bne.n	800369e <HAL_SD_IRQHandler+0x262>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d011      	beq.n	80036c2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a2:	4a1f      	ldr	r2, [pc, #124]	; (8003720 <HAL_SD_IRQHandler+0x2e4>)
 80036a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fd7c 	bl	80011a8 <HAL_DMA_Abort_IT>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02f      	beq.n	8003716 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fac8 	bl	8003c50 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036c0:	e029      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_SD_IRQHandler+0x29a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d011      	beq.n	80036fa <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_SD_IRQHandler+0x2e8>)
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd fd60 	bl	80011a8 <HAL_DMA_Abort_IT>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fae3 	bl	8003cbe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036f8:	e00d      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f002 f866 	bl	80057e0 <HAL_SD_AbortCallback>
}
 8003714:	e7ff      	b.n	8003716 <HAL_SD_IRQHandler+0x2da>
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	08003c51 	.word	0x08003c51
 8003724:	08003cbf 	.word	0x08003cbf

08003728 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800374a:	0f9b      	lsrs	r3, r3, #30
 800374c:	b2da      	uxtb	r2, r3
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003756:	0e9b      	lsrs	r3, r3, #26
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	b2da      	uxtb	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003768:	0e1b      	lsrs	r3, r3, #24
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	b2da      	uxtb	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b2da      	uxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003792:	b2da      	uxtb	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379c:	0d1b      	lsrs	r3, r3, #20
 800379e:	b29a      	uxth	r2, r3
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 030f 	and.w	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ba:	0bdb      	lsrs	r3, r3, #15
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037cc:	0b9b      	lsrs	r3, r3, #14
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	0b1b      	lsrs	r3, r3, #12
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2200      	movs	r2, #0
 8003802:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003808:	2b00      	cmp	r3, #0
 800380a:	d163      	bne.n	80038d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003810:	009a      	lsls	r2, r3, #2
 8003812:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800381c:	0f92      	lsrs	r2, r2, #30
 800381e:	431a      	orrs	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003828:	0edb      	lsrs	r3, r3, #27
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b2da      	uxtb	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800383a:	0e1b      	lsrs	r3, r3, #24
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	b2da      	uxtb	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384c:	0d5b      	lsrs	r3, r3, #21
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	b2da      	uxtb	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	b2da      	uxtb	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003870:	0bdb      	lsrs	r3, r3, #15
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	b2da      	uxtb	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	7e1b      	ldrb	r3, [r3, #24]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	3302      	adds	r3, #2
 8003894:	2201      	movs	r2, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800389e:	fb03 f202 	mul.w	r2, r3, r2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	7a1b      	ldrb	r3, [r3, #8]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038c0:	0a52      	lsrs	r2, r2, #9
 80038c2:	fb03 f202 	mul.w	r2, r3, r2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60
 80038d2:	e031      	b.n	8003938 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11d      	bne.n	8003918 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	431a      	orrs	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	3301      	adds	r3, #1
 80038f8:	029a      	lsls	r2, r3, #10
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	661a      	str	r2, [r3, #96]	; 0x60
 8003916:	e00f      	b.n	8003938 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <HAL_SD_GetCardCSD+0x344>)
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e09d      	b.n	8003a74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	0b9b      	lsrs	r3, r3, #14
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	09db      	lsrs	r3, r3, #7
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003956:	b2da      	uxtb	r2, r3
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003966:	b2da      	uxtb	r2, r3
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	0fdb      	lsrs	r3, r3, #31
 8003972:	b2da      	uxtb	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	0f5b      	lsrs	r3, r3, #29
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	b2da      	uxtb	r2, r3
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	b2da      	uxtb	r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	0d9b      	lsrs	r3, r3, #22
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	0d5b      	lsrs	r3, r3, #21
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	0c1b      	lsrs	r3, r3, #16
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	0bdb      	lsrs	r3, r3, #15
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	0b9b      	lsrs	r3, r3, #14
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	0b5b      	lsrs	r3, r3, #13
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	0b1b      	lsrs	r3, r3, #12
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	0a9b      	lsrs	r3, r3, #10
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	004005ff 	.word	0x004005ff

08003a84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af04      	add	r7, sp, #16
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d02e      	beq.n	8003b5a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d106      	bne.n	8003b12 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
 8003b10:	e029      	b.n	8003b66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d10a      	bne.n	8003b30 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa8a 	bl	8004034 <SD_WideBus_Enable>
 8003b20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b2e:	e01a      	b.n	8003b66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fac7 	bl	80040ca <SD_WideBus_Disable>
 8003b3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4a:	e00c      	b.n	8003b66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
 8003b58:	e005      	b.n	8003b66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b84:	e01f      	b.n	8003bc6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681d      	ldr	r5, [r3, #0]
 8003bac:	466c      	mov	r4, sp
 8003bae:	f107 0314 	add.w	r3, r7, #20
 8003bb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	f001 f807 	bl	8004bd4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 f8db 	bl	8004d8a <SDMMC_CmdBlockLength>
 8003bd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bdb0      	pop	{r4, r5, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	004005ff 	.word	0x004005ff

08003c10 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c1c:	f107 030c 	add.w	r3, r7, #12
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9de 	bl	8003fe4 <SD_SendStatus>
 8003c28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	0a5b      	lsrs	r3, r3, #9
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c46:	693b      	ldr	r3, [r7, #16]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ffd1 	bl	8003c10 <HAL_SD_GetCardState>
 8003c6e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d002      	beq.n	8003c8a <SD_DMATxAbort+0x3a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d10a      	bne.n	8003ca0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 f926 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f001 fd99 	bl	80057e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003cae:	e002      	b.n	8003cb6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fd39 	bl	8003728 <HAL_SD_ErrorCallback>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cd4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff ff9a 	bl	8003c10 <HAL_SD_GetCardState>
 8003cdc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b06      	cmp	r3, #6
 8003cf0:	d002      	beq.n	8003cf8 <SD_DMARxAbort+0x3a>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d10a      	bne.n	8003d0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f8ef 	bl	8004ee0 <SDMMC_CmdStopTransfer>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f001 fd62 	bl	80057e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d1c:	e002      	b.n	8003d24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fd02 	bl	8003728 <HAL_SD_ErrorCallback>
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	b094      	sub	sp, #80	; 0x50
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 ffa0 	bl	8004c82 <SDIO_GetPowerState>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d4c:	e0b8      	b.n	8003ec0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d02f      	beq.n	8003db6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 f9ca 	bl	80050f4 <SDMMC_CmdSendCID>
 8003d60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <SD_InitCard+0x40>
    {
      return errorstate;
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	e0a9      	b.n	8003ec0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffca 	bl	8004d0c <SDIO_GetResponse>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2104      	movs	r1, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 ffc1 	bl	8004d0c <SDIO_GetResponse>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2108      	movs	r1, #8
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 ffb8 	bl	8004d0c <SDIO_GetResponse>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	210c      	movs	r1, #12
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ffaf 	bl	8004d0c <SDIO_GetResponse>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d00d      	beq.n	8003dda <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f107 020e 	add.w	r2, r7, #14
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f9d0 	bl	800516e <SDMMC_CmdSetRelAdd>
 8003dce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <SD_InitCard+0xae>
    {
      return errorstate;
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	e072      	b.n	8003ec0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d036      	beq.n	8003e50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003de2:	89fb      	ldrh	r3, [r7, #14]
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f001 f99a 	bl	8005130 <SDMMC_CmdSendCSD>
 8003dfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e06:	e05b      	b.n	8003ec0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ff7c 	bl	8004d0c <SDIO_GetResponse>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2104      	movs	r1, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 ff73 	bl	8004d0c <SDIO_GetResponse>
 8003e26:	4602      	mov	r2, r0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2108      	movs	r1, #8
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff6a 	bl	8004d0c <SDIO_GetResponse>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	210c      	movs	r1, #12
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 ff61 	bl	8004d0c <SDIO_GetResponse>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2104      	movs	r1, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 ff58 	bl	8004d0c <SDIO_GetResponse>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	0d1a      	lsrs	r2, r3, #20
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fc66 	bl	800373c <HAL_SD_GetCardCSD>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e7a:	e021      	b.n	8003ec0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	2200      	movs	r2, #0
 8003e88:	461c      	mov	r4, r3
 8003e8a:	4615      	mov	r5, r2
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	462b      	mov	r3, r5
 8003e90:	4608      	mov	r0, r1
 8003e92:	f001 f847 	bl	8004f24 <SDMMC_CmdSelDesel>
 8003e96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <SD_InitCard+0x176>
  {
    return errorstate;
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	e00e      	b.n	8003ec0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681d      	ldr	r5, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	466c      	mov	r4, sp
 8003eaa:	f103 0210 	add.w	r2, r3, #16
 8003eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8003eb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 fe8b 	bl	8004bd4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3740      	adds	r7, #64	; 0x40
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bdb0      	pop	{r4, r5, r7, pc}

08003ec8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 f842 	bl	8004f6a <SDMMC_CmdGoIdleState>
 8003ee6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e072      	b.n	8003fd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f855 	bl	8004fa6 <SDMMC_CmdOperCond>
 8003efc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f82b 	bl	8004f6a <SDMMC_CmdGoIdleState>
 8003f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	e05b      	b.n	8003fd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d137      	bne.n	8003f9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 f855 	bl	8004fe4 <SDMMC_CmdAppCommand>
 8003f3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02d      	beq.n	8003f9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f46:	e047      	b.n	8003fd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f848 	bl	8004fe4 <SDMMC_CmdAppCommand>
 8003f54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	e03b      	b.n	8003fd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	491e      	ldr	r1, [pc, #120]	; (8003fe0 <SD_PowerON+0x118>)
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f85e 	bl	8005028 <SDMMC_CmdAppOperCommand>
 8003f6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f78:	e02e      	b.n	8003fd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fec3 	bl	8004d0c <SDIO_GetResponse>
 8003f86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	0fdb      	lsrs	r3, r3, #31
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <SD_PowerON+0xcc>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <SD_PowerON+0xce>
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

    count++;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d802      	bhi.n	8003fae <SD_PowerON+0xe6>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0cc      	beq.n	8003f48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d902      	bls.n	8003fbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fbc:	e00c      	b.n	8003fd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
 8003fce:	e002      	b.n	8003fd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	c1100000 	.word	0xc1100000

08003fe4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003ff4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ff8:	e018      	b.n	800402c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f001 f8d2 	bl	80051b0 <SDMMC_CmdSendStatus>
 800400c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	e009      	b.n	800402c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fe74 	bl	8004d0c <SDIO_GetResponse>
 8004024:	4602      	mov	r2, r0
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fe5e 	bl	8004d0c <SDIO_GetResponse>
 8004050:	4603      	mov	r3, r0
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800405a:	d102      	bne.n	8004062 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800405c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004060:	e02f      	b.n	80040c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f879 	bl	8004160 <SD_FindSCR>
 800406e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	e023      	b.n	80040c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01c      	beq.n	80040be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 ffa7 	bl	8004fe4 <SDMMC_CmdAppCommand>
 8004096:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	e00f      	b.n	80040c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ffe0 	bl	800506e <SDMMC_CmdBusWidth>
 80040ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	e003      	b.n	80040c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e001      	b.n	80040c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b086      	sub	sp, #24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fe13 	bl	8004d0c <SDIO_GetResponse>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f0:	d102      	bne.n	80040f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f6:	e02f      	b.n	8004158 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040f8:	f107 030c 	add.w	r3, r7, #12
 80040fc:	4619      	mov	r1, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f82e 	bl	8004160 <SD_FindSCR>
 8004104:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	e023      	b.n	8004158 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01c      	beq.n	8004154 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 ff5c 	bl	8004fe4 <SDMMC_CmdAppCommand>
 800412c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e00f      	b.n	8004158 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 ff95 	bl	800506e <SDMMC_CmdBusWidth>
 8004144:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	e003      	b.n	8004158 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004150:	2300      	movs	r3, #0
 8004152:	e001      	b.n	8004158 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004154:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b08f      	sub	sp, #60	; 0x3c
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800416a:	f7fc fe2d 	bl	8000dc8 <HAL_GetTick>
 800416e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2108      	movs	r1, #8
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fdff 	bl	8004d8a <SDMMC_CmdBlockLength>
 800418c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	e0b2      	b.n	80042fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 ff1d 	bl	8004fe4 <SDMMC_CmdAppCommand>
 80041aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	e0a3      	b.n	80042fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80041bc:	2308      	movs	r3, #8
 80041be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80041c0:	2330      	movs	r3, #48	; 0x30
 80041c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80041c4:	2302      	movs	r3, #2
 80041c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f107 0210 	add.w	r2, r7, #16
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fda9 	bl	8004d32 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 ff64 	bl	80050b2 <SDMMC_CmdSendSCR>
 80041ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02a      	beq.n	8004248 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	e083      	b.n	80042fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00f      	beq.n	8004224 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	f107 0208 	add.w	r2, r7, #8
 8004210:	18d4      	adds	r4, r2, r3
 8004212:	4608      	mov	r0, r1
 8004214:	f000 fd09 	bl	8004c2a <SDIO_ReadFIFO>
 8004218:	4603      	mov	r3, r0
 800421a:	6023      	str	r3, [r4, #0]
      index++;
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	3301      	adds	r3, #1
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	e006      	b.n	8004232 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004232:	f7fc fdc9 	bl	8000dc8 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004240:	d102      	bne.n	8004248 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004246:	e05a      	b.n	80042fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0cf      	beq.n	80041f6 <SD_FindSCR+0x96>
 8004256:	e000      	b.n	800425a <SD_FindSCR+0xfa>
      break;
 8004258:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2208      	movs	r2, #8
 800426e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004270:	2308      	movs	r3, #8
 8004272:	e044      	b.n	80042fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800428a:	2302      	movs	r3, #2
 800428c:	e037      	b.n	80042fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2220      	movs	r2, #32
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e02a      	b.n	80042fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	061a      	lsls	r2, r3, #24
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	601a      	str	r2, [r3, #0]
    scr++;
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	3304      	adds	r3, #4
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	061a      	lsls	r2, r3, #24
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0e1b      	lsrs	r3, r3, #24
 80042f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	373c      	adds	r7, #60	; 0x3c
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}

08004306 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03f      	beq.n	80043a0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e033      	b.n	800438e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fc7d 	bl	8004c2a <SDIO_ReadFIFO>
 8004330:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]
      tmp++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	3b01      	subs	r3, #1
 8004344:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3b01      	subs	r3, #1
 800435a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3301      	adds	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	3b01      	subs	r3, #1
 8004370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3b01      	subs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b07      	cmp	r3, #7
 8004392:	d9c8      	bls.n	8004326 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d043      	beq.n	800444a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e037      	b.n	8004438 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	041a      	lsls	r2, r3, #16
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	061a      	lsls	r2, r3, #24
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
 8004414:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	3b01      	subs	r3, #1
 8004420:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f107 0208 	add.w	r2, r7, #8
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fc09 	bl	8004c44 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b07      	cmp	r3, #7
 800443c:	d9c4      	bls.n	80043c8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e03f      	b.n	80044e4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fc fb73 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2224      	movs	r2, #36	; 0x24
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004494:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f928 	bl	80046ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	d17c      	bne.n	8004606 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Transmit+0x2c>
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e075      	b.n	8004608 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UART_Transmit+0x3e>
 8004526:	2302      	movs	r3, #2
 8004528:	e06e      	b.n	8004608 <HAL_UART_Transmit+0x11c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2221      	movs	r2, #33	; 0x21
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004540:	f7fc fc42 	bl	8000dc8 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d108      	bne.n	800456e <HAL_UART_Transmit+0x82>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	e003      	b.n	8004576 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800457e:	e02a      	b.n	80045d6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	2180      	movs	r1, #128	; 0x80
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f840 	bl	8004610 <UART_WaitOnFlagUntilTimeout>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e036      	b.n	8004608 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	3302      	adds	r3, #2
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e007      	b.n	80045c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1cf      	bne.n	8004580 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f810 	bl	8004610 <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e006      	b.n	8004608 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004606:	2302      	movs	r3, #2
  }
}
 8004608:	4618      	mov	r0, r3
 800460a:	3720      	adds	r7, #32
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b090      	sub	sp, #64	; 0x40
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004620:	e050      	b.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d04c      	beq.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0x30>
 8004630:	f7fc fbca 	bl	8000dc8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800463c:	429a      	cmp	r2, r3
 800463e:	d241      	bcs.n	80046c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004660:	637a      	str	r2, [r7, #52]	; 0x34
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e5      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	613b      	str	r3, [r7, #16]
   return(result);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3314      	adds	r3, #20
 8004692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004694:	623a      	str	r2, [r7, #32]
 8004696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	69f9      	ldr	r1, [r7, #28]
 800469a:	6a3a      	ldr	r2, [r7, #32]
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e00f      	b.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4013      	ands	r3, r2
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	461a      	mov	r2, r3
 80046dc:	79fb      	ldrb	r3, [r7, #7]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d09f      	beq.n	8004622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3740      	adds	r7, #64	; 0x40
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f0:	b0c0      	sub	sp, #256	; 0x100
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	68d9      	ldr	r1, [r3, #12]
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	ea40 0301 	orr.w	r3, r0, r1
 8004714:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	431a      	orrs	r2, r3
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	431a      	orrs	r2, r3
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004744:	f021 010c 	bic.w	r1, r1, #12
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004752:	430b      	orrs	r3, r1
 8004754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	6999      	ldr	r1, [r3, #24]
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	ea40 0301 	orr.w	r3, r0, r1
 8004772:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b8f      	ldr	r3, [pc, #572]	; (80049b8 <UART_SetConfig+0x2cc>)
 800477c:	429a      	cmp	r2, r3
 800477e:	d005      	beq.n	800478c <UART_SetConfig+0xa0>
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8d      	ldr	r3, [pc, #564]	; (80049bc <UART_SetConfig+0x2d0>)
 8004788:	429a      	cmp	r2, r3
 800478a:	d104      	bne.n	8004796 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fd fa36 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8004790:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004794:	e003      	b.n	800479e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004796:	f7fd fa1d 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 800479a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	f040 810c 	bne.w	80049c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	1891      	adds	r1, r2, r2
 80047c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047c6:	415b      	adcs	r3, r3
 80047c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ce:	4621      	mov	r1, r4
 80047d0:	eb12 0801 	adds.w	r8, r2, r1
 80047d4:	4629      	mov	r1, r5
 80047d6:	eb43 0901 	adc.w	r9, r3, r1
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ee:	4690      	mov	r8, r2
 80047f0:	4699      	mov	r9, r3
 80047f2:	4623      	mov	r3, r4
 80047f4:	eb18 0303 	adds.w	r3, r8, r3
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047fc:	462b      	mov	r3, r5
 80047fe:	eb49 0303 	adc.w	r3, r9, r3
 8004802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004812:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800481a:	460b      	mov	r3, r1
 800481c:	18db      	adds	r3, r3, r3
 800481e:	653b      	str	r3, [r7, #80]	; 0x50
 8004820:	4613      	mov	r3, r2
 8004822:	eb42 0303 	adc.w	r3, r2, r3
 8004826:	657b      	str	r3, [r7, #84]	; 0x54
 8004828:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800482c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004830:	f7fb fcf0 	bl	8000214 <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <UART_SetConfig+0x2d4>)
 800483a:	fba3 2302 	umull	r2, r3, r3, r2
 800483e:	095b      	lsrs	r3, r3, #5
 8004840:	011c      	lsls	r4, r3, #4
 8004842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800484c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004850:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004854:	4642      	mov	r2, r8
 8004856:	464b      	mov	r3, r9
 8004858:	1891      	adds	r1, r2, r2
 800485a:	64b9      	str	r1, [r7, #72]	; 0x48
 800485c:	415b      	adcs	r3, r3
 800485e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004860:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004864:	4641      	mov	r1, r8
 8004866:	eb12 0a01 	adds.w	sl, r2, r1
 800486a:	4649      	mov	r1, r9
 800486c:	eb43 0b01 	adc.w	fp, r3, r1
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800487c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004884:	4692      	mov	sl, r2
 8004886:	469b      	mov	fp, r3
 8004888:	4643      	mov	r3, r8
 800488a:	eb1a 0303 	adds.w	r3, sl, r3
 800488e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004892:	464b      	mov	r3, r9
 8004894:	eb4b 0303 	adc.w	r3, fp, r3
 8004898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80048ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80048b0:	460b      	mov	r3, r1
 80048b2:	18db      	adds	r3, r3, r3
 80048b4:	643b      	str	r3, [r7, #64]	; 0x40
 80048b6:	4613      	mov	r3, r2
 80048b8:	eb42 0303 	adc.w	r3, r2, r3
 80048bc:	647b      	str	r3, [r7, #68]	; 0x44
 80048be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048c6:	f7fb fca5 	bl	8000214 <__aeabi_uldivmod>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <UART_SetConfig+0x2d4>)
 80048d2:	fba3 2301 	umull	r2, r3, r3, r1
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2264      	movs	r2, #100	; 0x64
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	1acb      	subs	r3, r1, r3
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048e6:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <UART_SetConfig+0x2d4>)
 80048e8:	fba3 2302 	umull	r2, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f4:	441c      	add	r4, r3
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004900:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004904:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004908:	4642      	mov	r2, r8
 800490a:	464b      	mov	r3, r9
 800490c:	1891      	adds	r1, r2, r2
 800490e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004910:	415b      	adcs	r3, r3
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004918:	4641      	mov	r1, r8
 800491a:	1851      	adds	r1, r2, r1
 800491c:	6339      	str	r1, [r7, #48]	; 0x30
 800491e:	4649      	mov	r1, r9
 8004920:	414b      	adcs	r3, r1
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004930:	4659      	mov	r1, fp
 8004932:	00cb      	lsls	r3, r1, #3
 8004934:	4651      	mov	r1, sl
 8004936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493a:	4651      	mov	r1, sl
 800493c:	00ca      	lsls	r2, r1, #3
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	4603      	mov	r3, r0
 8004944:	4642      	mov	r2, r8
 8004946:	189b      	adds	r3, r3, r2
 8004948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800494c:	464b      	mov	r3, r9
 800494e:	460a      	mov	r2, r1
 8004950:	eb42 0303 	adc.w	r3, r2, r3
 8004954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004964:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004968:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800496c:	460b      	mov	r3, r1
 800496e:	18db      	adds	r3, r3, r3
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
 8004972:	4613      	mov	r3, r2
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800497e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004982:	f7fb fc47 	bl	8000214 <__aeabi_uldivmod>
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <UART_SetConfig+0x2d4>)
 800498c:	fba3 1302 	umull	r1, r3, r3, r2
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	2164      	movs	r1, #100	; 0x64
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	3332      	adds	r3, #50	; 0x32
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <UART_SetConfig+0x2d4>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	f003 0207 	and.w	r2, r3, #7
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4422      	add	r2, r4
 80049b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049b4:	e105      	b.n	8004bc2 <UART_SetConfig+0x4d6>
 80049b6:	bf00      	nop
 80049b8:	40011000 	.word	0x40011000
 80049bc:	40011400 	.word	0x40011400
 80049c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049d6:	4642      	mov	r2, r8
 80049d8:	464b      	mov	r3, r9
 80049da:	1891      	adds	r1, r2, r2
 80049dc:	6239      	str	r1, [r7, #32]
 80049de:	415b      	adcs	r3, r3
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049e6:	4641      	mov	r1, r8
 80049e8:	1854      	adds	r4, r2, r1
 80049ea:	4649      	mov	r1, r9
 80049ec:	eb43 0501 	adc.w	r5, r3, r1
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	00eb      	lsls	r3, r5, #3
 80049fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fe:	00e2      	lsls	r2, r4, #3
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	18e3      	adds	r3, r4, r3
 8004a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	eb45 0303 	adc.w	r3, r5, r3
 8004a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a32:	4629      	mov	r1, r5
 8004a34:	008b      	lsls	r3, r1, #2
 8004a36:	4621      	mov	r1, r4
 8004a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	008a      	lsls	r2, r1, #2
 8004a40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a44:	f7fb fbe6 	bl	8000214 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b60      	ldr	r3, [pc, #384]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011c      	lsls	r4, r3, #4
 8004a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	61b9      	str	r1, [r7, #24]
 8004a70:	415b      	adcs	r3, r3
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a78:	4641      	mov	r1, r8
 8004a7a:	1851      	adds	r1, r2, r1
 8004a7c:	6139      	str	r1, [r7, #16]
 8004a7e:	4649      	mov	r1, r9
 8004a80:	414b      	adcs	r3, r1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a90:	4659      	mov	r1, fp
 8004a92:	00cb      	lsls	r3, r1, #3
 8004a94:	4651      	mov	r1, sl
 8004a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	00ca      	lsls	r2, r1, #3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	189b      	adds	r3, r3, r2
 8004aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004aac:	464b      	mov	r3, r9
 8004aae:	460a      	mov	r2, r1
 8004ab0:	eb42 0303 	adc.w	r3, r2, r3
 8004ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	008b      	lsls	r3, r1, #2
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ada:	4641      	mov	r1, r8
 8004adc:	008a      	lsls	r2, r1, #2
 8004ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ae2:	f7fb fb97 	bl	8000214 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	441c      	add	r4, r3
 8004b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b10:	2200      	movs	r2, #0
 8004b12:	673b      	str	r3, [r7, #112]	; 0x70
 8004b14:	677a      	str	r2, [r7, #116]	; 0x74
 8004b16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	1891      	adds	r1, r2, r2
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	415b      	adcs	r3, r3
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	1851      	adds	r1, r2, r1
 8004b2e:	6039      	str	r1, [r7, #0]
 8004b30:	4649      	mov	r1, r9
 8004b32:	414b      	adcs	r3, r1
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b42:	4659      	mov	r1, fp
 8004b44:	00cb      	lsls	r3, r1, #3
 8004b46:	4651      	mov	r1, sl
 8004b48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	00ca      	lsls	r2, r1, #3
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	4642      	mov	r2, r8
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	460a      	mov	r2, r1
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b70:	667a      	str	r2, [r7, #100]	; 0x64
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b7e:	4649      	mov	r1, r9
 8004b80:	008b      	lsls	r3, r1, #2
 8004b82:	4641      	mov	r1, r8
 8004b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b88:	4641      	mov	r1, r8
 8004b8a:	008a      	lsls	r2, r1, #2
 8004b8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b90:	f7fb fb40 	bl	8000214 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	2164      	movs	r1, #100	; 0x64
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	3332      	adds	r3, #50	; 0x32
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <UART_SetConfig+0x4e4>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4422      	add	r2, r4
 8004bc0:	609a      	str	r2, [r3, #8]
}
 8004bc2:	bf00      	nop
 8004bc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	51eb851f 	.word	0x51eb851f

08004bd4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 001c 	add.w	r0, r7, #28
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004bea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004bec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004bee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004bf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004bf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004bfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004bfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004c0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	b004      	add	sp, #16
 8004c28:	4770      	bx	lr

08004c2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2203      	movs	r2, #3
 8004c72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cbc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004cc2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004cc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004cd8:	f023 030f 	bic.w	r3, r3, #15
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	b2db      	uxtb	r3, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
}  
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004d5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004d64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0

}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004d98:	2310      	movs	r3, #16
 8004d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff74 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	2110      	movs	r1, #16
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fa19 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ddc:	2311      	movs	r3, #17
 8004dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff52 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	2111      	movs	r1, #17
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f9f7 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e08:	69fb      	ldr	r3, [r7, #28]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3720      	adds	r7, #32
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b088      	sub	sp, #32
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004e20:	2312      	movs	r3, #18
 8004e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e32:	f107 0308 	add.w	r3, r7, #8
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff ff30 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	2112      	movs	r1, #18
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9d5 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b088      	sub	sp, #32
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004e64:	2318      	movs	r3, #24
 8004e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff0e 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	2118      	movs	r1, #24
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f9b3 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e90:	69fb      	ldr	r3, [r7, #28]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b088      	sub	sp, #32
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ea8:	2319      	movs	r3, #25
 8004eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eba:	f107 0308 	add.w	r3, r7, #8
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff feec 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	2119      	movs	r1, #25
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f991 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004ed2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004eec:	230c      	movs	r3, #12
 8004eee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ef0:	2340      	movs	r3, #64	; 0x40
 8004ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004efe:	f107 0308 	add.w	r3, r7, #8
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff feca 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004f0a:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <SDMMC_CmdStopTransfer+0x40>)
 8004f0c:	210c      	movs	r1, #12
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f970 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f16:	69fb      	ldr	r3, [r7, #28]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	05f5e100 	.word	0x05f5e100

08004f24 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004f34:	2307      	movs	r3, #7
 8004f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f44:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f46:	f107 0310 	add.w	r3, r7, #16
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fea6 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	2107      	movs	r1, #7
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f94b 	bl	80051f4 <SDMMC_GetCmdResp1>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3728      	adds	r7, #40	; 0x28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b088      	sub	sp, #32
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f88:	f107 0308 	add.w	r3, r7, #8
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fe85 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 fb65 	bl	8005664 <SDMMC_GetCmdError>
 8004f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b088      	sub	sp, #32
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004fae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fb8:	2340      	movs	r3, #64	; 0x40
 8004fba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe66 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 faf8 	bl	80055c8 <SDMMC_GetCmdResp7>
 8004fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ff2:	2337      	movs	r3, #55	; 0x37
 8004ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff6:	2340      	movs	r3, #64	; 0x40
 8004ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005002:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fe47 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	2137      	movs	r1, #55	; 0x37
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8ec 	bl	80051f4 <SDMMC_GetCmdResp1>
 800501c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501e:	69fb      	ldr	r3, [r7, #28]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800503c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800503e:	2329      	movs	r3, #41	; 0x29
 8005040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005042:	2340      	movs	r3, #64	; 0x40
 8005044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800504a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fe21 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9ff 	bl	8005460 <SDMMC_GetCmdResp3>
 8005062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005064:	69fb      	ldr	r3, [r7, #28]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b088      	sub	sp, #32
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800507c:	2306      	movs	r3, #6
 800507e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800508e:	f107 0308 	add.w	r3, r7, #8
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fe02 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	2106      	movs	r1, #6
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8a7 	bl	80051f4 <SDMMC_GetCmdResp1>
 80050a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050a8:	69fb      	ldr	r3, [r7, #28]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80050be:	2333      	movs	r3, #51	; 0x33
 80050c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050c2:	2340      	movs	r3, #64	; 0x40
 80050c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050d0:	f107 0308 	add.w	r3, r7, #8
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fde1 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	2133      	movs	r1, #51	; 0x33
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f886 	bl	80051f4 <SDMMC_GetCmdResp1>
 80050e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050ea:	69fb      	ldr	r3, [r7, #28]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005100:	2302      	movs	r3, #2
 8005102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005104:	23c0      	movs	r3, #192	; 0xc0
 8005106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fdc0 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f956 	bl	80053d0 <SDMMC_GetCmdResp2>
 8005124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800513e:	2309      	movs	r3, #9
 8005140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005142:	23c0      	movs	r3, #192	; 0xc0
 8005144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800514a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fda1 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f937 	bl	80053d0 <SDMMC_GetCmdResp2>
 8005162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800517c:	2303      	movs	r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518e:	f107 0308 	add.w	r3, r7, #8
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff fd82 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	2103      	movs	r1, #3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f99c 	bl	80054dc <SDMMC_GetCmdResp6>
 80051a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80051be:	230d      	movs	r3, #13
 80051c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051c2:	2340      	movs	r3, #64	; 0x40
 80051c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d0:	f107 0308 	add.w	r3, r7, #8
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fd61 	bl	8004c9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	210d      	movs	r1, #13
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f806 	bl	80051f4 <SDMMC_GetCmdResp1>
 80051e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ea:	69fb      	ldr	r3, [r7, #28]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3720      	adds	r7, #32
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	460b      	mov	r3, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <SDMMC_GetCmdResp1+0x1d0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a70      	ldr	r2, [pc, #448]	; (80053c8 <SDMMC_GetCmdResp1+0x1d4>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0a5a      	lsrs	r2, r3, #9
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	fb02 f303 	mul.w	r3, r2, r3
 8005214:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	1e5a      	subs	r2, r3, #1
 800521a:	61fa      	str	r2, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005220:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005224:	e0c9      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ef      	beq.n	8005216 <SDMMC_GetCmdResp1+0x22>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1ea      	bne.n	8005216 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2204      	movs	r2, #4
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005252:	2304      	movs	r3, #4
 8005254:	e0b1      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d004      	beq.n	800526c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005268:	2301      	movs	r3, #1
 800526a:	e0a6      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	22c5      	movs	r2, #197	; 0xc5
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff fd3d 	bl	8004cf2 <SDIO_GetCommandResponse>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	4293      	cmp	r3, r2
 8005280:	d001      	beq.n	8005286 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005282:	2301      	movs	r3, #1
 8005284:	e099      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005286:	2100      	movs	r1, #0
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f7ff fd3f 	bl	8004d0c <SDIO_GetResponse>
 800528e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <SDMMC_GetCmdResp1+0x1d8>)
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
 800529c:	e08d      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da02      	bge.n	80052aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80052a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a8:	e087      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	e080      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	e079      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80052d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d4:	e071      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80052e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e4:	e069      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	e061      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005304:	e059      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005314:	e051      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005324:	e049      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005334:	e041      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005344:	e039      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005354:	e031      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005364:	e029      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005374:	e021      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005384:	e019      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005394:	e011      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80053a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80053a4:	e009      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80053b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80053b4:	e001      	b.n	80053ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000
 80053c8:	10624dd3 	.word	0x10624dd3
 80053cc:	fdffe008 	.word	0xfdffe008

080053d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <SDMMC_GetCmdResp2+0x88>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1f      	ldr	r2, [pc, #124]	; (800545c <SDMMC_GetCmdResp2+0x8c>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	0a5b      	lsrs	r3, r3, #9
 80053e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e5a      	subs	r2, r3, #1
 80053f2:	60fa      	str	r2, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d102      	bne.n	80053fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053fc:	e026      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ef      	beq.n	80053ee <SDMMC_GetCmdResp2+0x1e>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2204      	movs	r2, #4
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800542a:	2304      	movs	r3, #4
 800542c:	e00e      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005440:	2301      	movs	r3, #1
 8005442:	e003      	b.n	800544c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	22c5      	movs	r2, #197	; 0xc5
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000000 	.word	0x20000000
 800545c:	10624dd3 	.word	0x10624dd3

08005460 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <SDMMC_GetCmdResp3+0x74>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <SDMMC_GetCmdResp3+0x78>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	0a5b      	lsrs	r3, r3, #9
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	fb02 f303 	mul.w	r3, r2, r3
 800547c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1e5a      	subs	r2, r3, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800548c:	e01b      	b.n	80054c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <SDMMC_GetCmdResp3+0x1e>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ea      	bne.n	800547e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d004      	beq.n	80054be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2204      	movs	r2, #4
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ba:	2304      	movs	r3, #4
 80054bc:	e003      	b.n	80054c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	22c5      	movs	r2, #197	; 0xc5
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000000 	.word	0x20000000
 80054d8:	10624dd3 	.word	0x10624dd3

080054dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	460b      	mov	r3, r1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054ea:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <SDMMC_GetCmdResp6+0xe4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a35      	ldr	r2, [pc, #212]	; (80055c4 <SDMMC_GetCmdResp6+0xe8>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fa:	fb02 f303 	mul.w	r3, r2, r3
 80054fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	61fa      	str	r2, [r7, #28]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800550a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800550e:	e052      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800551c:	2b00      	cmp	r3, #0
 800551e:	d0ef      	beq.n	8005500 <SDMMC_GetCmdResp6+0x24>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ea      	bne.n	8005500 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800553c:	2304      	movs	r3, #4
 800553e:	e03a      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005552:	2301      	movs	r3, #1
 8005554:	e02f      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff fbcb 	bl	8004cf2 <SDIO_GetCommandResponse>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	7afb      	ldrb	r3, [r7, #11]
 8005562:	4293      	cmp	r3, r2
 8005564:	d001      	beq.n	800556a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005566:	2301      	movs	r3, #1
 8005568:	e025      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	22c5      	movs	r2, #197	; 0xc5
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005570:	2100      	movs	r1, #0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fbca 	bl	8004d0c <SDIO_GetResponse>
 8005578:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b29a      	uxth	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	e011      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800559c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a0:	e009      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80055ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b0:	e001      	b.n	80055b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000000 	.word	0x20000000
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055d0:	4b22      	ldr	r3, [pc, #136]	; (800565c <SDMMC_GetCmdResp7+0x94>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <SDMMC_GetCmdResp7+0x98>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0a5b      	lsrs	r3, r3, #9
 80055dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f4:	e02c      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0ef      	beq.n	80055e6 <SDMMC_GetCmdResp7+0x1e>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ea      	bne.n	80055e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2204      	movs	r2, #4
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005622:	2304      	movs	r3, #4
 8005624:	e014      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005638:	2301      	movs	r3, #1
 800563a:	e009      	b.n	8005650 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800564e:	2300      	movs	r3, #0
  
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	20000000 	.word	0x20000000
 8005660:	10624dd3 	.word	0x10624dd3

08005664 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <SDMMC_GetCmdError+0x50>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a11      	ldr	r2, [pc, #68]	; (80056b8 <SDMMC_GetCmdError+0x54>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0a5b      	lsrs	r3, r3, #9
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	fb02 f303 	mul.w	r3, r2, r3
 8005680:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e5a      	subs	r2, r3, #1
 8005686:	60fa      	str	r2, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800568c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005690:	e009      	b.n	80056a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f1      	beq.n	8005682 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	22c5      	movs	r2, #197	; 0xc5
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000000 	.word	0x20000000
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <MX_FATFS_Init+0x18>)
 80056c2:	4805      	ldr	r0, [pc, #20]	; (80056d8 <MX_FATFS_Init+0x1c>)
 80056c4:	f000 fe96 	bl	80063f4 <FATFS_LinkDriver>
 80056c8:	4603      	mov	r3, r0
 80056ca:	461a      	mov	r2, r3
 80056cc:	4b03      	ldr	r3, [pc, #12]	; (80056dc <MX_FATFS_Init+0x20>)
 80056ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80056d0:	bf00      	nop
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	200001b8 	.word	0x200001b8
 80056d8:	08006514 	.word	0x08006514
 80056dc:	200001b4 	.word	0x200001b4

080056e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80056ea:	f000 f8ac 	bl	8005846 <BSP_SD_IsDetected>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e012      	b.n	800571e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80056f8:	480b      	ldr	r0, [pc, #44]	; (8005728 <BSP_SD_Init+0x48>)
 80056fa:	f7fd fa8b 	bl	8002c14 <HAL_SD_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005708:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800570c:	4806      	ldr	r0, [pc, #24]	; (8005728 <BSP_SD_Init+0x48>)
 800570e:	f7fe f9e5 	bl	8003adc <HAL_SD_ConfigWideBusOperation>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800571c:	79fb      	ldrb	r3, [r7, #7]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000028 	.word	0x20000028

0800572c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	4806      	ldr	r0, [pc, #24]	; (8005764 <BSP_SD_ReadBlocks+0x38>)
 800574a:	f7fd fb13 	bl	8002d74 <HAL_SD_ReadBlocks>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000028 	.word	0x20000028

08005768 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	4806      	ldr	r0, [pc, #24]	; (80057a0 <BSP_SD_WriteBlocks+0x38>)
 8005786:	f7fd fcd3 	bl	8003130 <HAL_SD_WriteBlocks>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000028 	.word	0x20000028

080057a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80057a8:	4805      	ldr	r0, [pc, #20]	; (80057c0 <BSP_SD_GetCardState+0x1c>)
 80057aa:	f7fe fa31 	bl	8003c10 <HAL_SD_GetCardState>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000028 	.word	0x20000028

080057c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4803      	ldr	r0, [pc, #12]	; (80057dc <BSP_SD_GetCardInfo+0x18>)
 80057d0:	f7fe f958 	bl	8003a84 <HAL_SD_GetCardInfo>
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000028 	.word	0x20000028

080057e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80057e8:	f000 f818 	bl	800581c <BSP_SD_AbortCallback>
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80057fc:	f000 f815 	bl	800582a <BSP_SD_WriteCpltCallback>
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005810:	f000 f812 	bl	8005838 <BSP_SD_ReadCpltCallback>
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0

}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800582a:	b480      	push	{r7}
 800582c:	af00      	add	r7, sp, #0

}
 800582e:	bf00      	nop
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0

}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800584c:	2301      	movs	r3, #1
 800584e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005850:	f000 f80c 	bl	800586c <BSP_PlatformIsDetected>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800585a:	2300      	movs	r3, #0
 800585c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	b2db      	uxtb	r3, r3
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005872:	2301      	movs	r3, #1
 8005874:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	4806      	ldr	r0, [pc, #24]	; (8005894 <BSP_PlatformIsDetected+0x28>)
 800587a:	f7fc f887 	bl	800198c <HAL_GPIO_ReadPin>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005884:	2300      	movs	r3, #0
 8005886:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005888:	79fb      	ldrb	r3, [r7, #7]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40020800 	.word	0x40020800

08005898 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <SD_CheckStatus+0x38>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80058a8:	f7ff ff7c 	bl	80057a4 <BSP_SD_GetCardState>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <SD_CheckStatus+0x38>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <SD_CheckStatus+0x38>)
 80058c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <SD_CheckStatus+0x38>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b2db      	uxtb	r3, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000009 	.word	0x20000009

080058d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <SD_initialize+0x38>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80058e4:	f7ff fefc 	bl	80056e0 <BSP_SD_Init>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ffd1 	bl	8005898 <SD_CheckStatus>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	4b04      	ldr	r3, [pc, #16]	; (800590c <SD_initialize+0x38>)
 80058fc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80058fe:	4b03      	ldr	r3, [pc, #12]	; (800590c <SD_initialize+0x38>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b2db      	uxtb	r3, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000009 	.word	0x20000009

08005910 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ffbb 	bl	8005898 <SD_CheckStatus>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	68b8      	ldr	r0, [r7, #8]
 800594a:	f7ff feef 	bl	800572c <BSP_SD_ReadBlocks>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d107      	bne.n	8005964 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005954:	bf00      	nop
 8005956:	f7ff ff25 	bl	80057a4 <BSP_SD_GetCardState>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1fa      	bne.n	8005956 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b086      	sub	sp, #24
 8005972:	af00      	add	r7, sp, #0
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	4603      	mov	r3, r0
 800597c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f7ff feec 	bl	8005768 <BSP_SD_WriteBlocks>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005996:	bf00      	nop
 8005998:	f7ff ff04 	bl	80057a4 <BSP_SD_GetCardState>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1fa      	bne.n	8005998 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	; 0x30
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	603a      	str	r2, [r7, #0]
 80059ba:	71fb      	strb	r3, [r7, #7]
 80059bc:	460b      	mov	r3, r1
 80059be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80059c6:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <SD_ioctl+0xac>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <SD_ioctl+0x28>
 80059d4:	2303      	movs	r3, #3
 80059d6:	e03c      	b.n	8005a52 <SD_ioctl+0xa2>

  switch (cmd)
 80059d8:	79bb      	ldrb	r3, [r7, #6]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d834      	bhi.n	8005a48 <SD_ioctl+0x98>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <SD_ioctl+0x34>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	080059fd 	.word	0x080059fd
 80059ec:	08005a15 	.word	0x08005a15
 80059f0:	08005a2f 	.word	0x08005a2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80059fa:	e028      	b.n	8005a4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff fedf 	bl	80057c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a12:	e01c      	b.n	8005a4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fed3 	bl	80057c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a2c:	e00f      	b.n	8005a4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005a2e:	f107 030c 	add.w	r3, r7, #12
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fec6 	bl	80057c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	0a5a      	lsrs	r2, r3, #9
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005a46:	e002      	b.n	8005a4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005a48:	2304      	movs	r3, #4
 8005a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3730      	adds	r7, #48	; 0x30
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000009 	.word	0x20000009

08005a60 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <disk_status+0x30>)
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	79fa      	ldrb	r2, [r7, #7]
 8005a78:	4905      	ldr	r1, [pc, #20]	; (8005a90 <disk_status+0x30>)
 8005a7a:	440a      	add	r2, r1
 8005a7c:	7a12      	ldrb	r2, [r2, #8]
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4798      	blx	r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20001214 	.word	0x20001214

08005a94 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	4a0d      	ldr	r2, [pc, #52]	; (8005adc <disk_initialize+0x48>)
 8005aa6:	5cd3      	ldrb	r3, [r2, r3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d111      	bne.n	8005ad0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	4a0b      	ldr	r2, [pc, #44]	; (8005adc <disk_initialize+0x48>)
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <disk_initialize+0x48>)
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	79fa      	ldrb	r2, [r7, #7]
 8005ac2:	4906      	ldr	r1, [pc, #24]	; (8005adc <disk_initialize+0x48>)
 8005ac4:	440a      	add	r2, r1
 8005ac6:	7a12      	ldrb	r2, [r2, #8]
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4798      	blx	r3
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20001214 	.word	0x20001214

08005ae0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <disk_read+0x3c>)
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	689c      	ldr	r4, [r3, #8]
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4a07      	ldr	r2, [pc, #28]	; (8005b1c <disk_read+0x3c>)
 8005b00:	4413      	add	r3, r2
 8005b02:	7a18      	ldrb	r0, [r3, #8]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	47a0      	blx	r4
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20001214 	.word	0x20001214

08005b20 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005b20:	b590      	push	{r4, r7, lr}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <disk_write+0x3c>)
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68dc      	ldr	r4, [r3, #12]
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <disk_write+0x3c>)
 8005b40:	4413      	add	r3, r2
 8005b42:	7a18      	ldrb	r0, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	47a0      	blx	r4
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd90      	pop	{r4, r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20001214 	.word	0x20001214

08005b60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b70:	89fb      	ldrh	r3, [r7, #14]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	b21a      	sxth	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	b21b      	sxth	r3, r3
 8005b80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b82:	89fb      	ldrh	r3, [r7, #14]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	3202      	adds	r2, #2
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	3201      	adds	r2, #1
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e010      	b.n	8005c08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005be6:	4a0d      	ldr	r2, [pc, #52]	; (8005c1c <clear_lock+0x44>)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	4413      	add	r3, r2
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d105      	bne.n	8005c02 <clear_lock+0x2a>
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <clear_lock+0x44>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d9eb      	bls.n	8005be6 <clear_lock+0xe>
	}
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	200011f4 	.word	0x200011f4

08005c20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d034      	beq.n	8005c9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	7858      	ldrb	r0, [r3, #1]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c44:	2301      	movs	r3, #1
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	f7ff ff6a 	bl	8005b20 <disk_write>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
 8005c56:	e022      	b.n	8005c9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	1ad2      	subs	r2, r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d217      	bcs.n	8005c9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	789b      	ldrb	r3, [r3, #2]
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e010      	b.n	8005c98 <sync_window+0x78>
					wsect += fs->fsize;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7858      	ldrb	r0, [r3, #1]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	f7ff ff47 	bl	8005b20 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d8eb      	bhi.n	8005c76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d01b      	beq.n	8005cf8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ffad 	bl	8005c20 <sync_window>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d113      	bne.n	8005cf8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7858      	ldrb	r0, [r3, #1]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cda:	2301      	movs	r3, #1
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	f7ff feff 	bl	8005ae0 <disk_read>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d031      	beq.n	8005d7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	e002      	b.n	8005d26 <get_ldnumber+0x24>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d903      	bls.n	8005d36 <get_ldnumber+0x34>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b3a      	cmp	r3, #58	; 0x3a
 8005d34:	d1f4      	bne.n	8005d20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8005d3c:	d11c      	bne.n	8005d78 <get_ldnumber+0x76>
			tp = *path;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	60fa      	str	r2, [r7, #12]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	3b30      	subs	r3, #48	; 0x30
 8005d4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d80e      	bhi.n	8005d74 <get_ldnumber+0x72>
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d10a      	bne.n	8005d74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d107      	bne.n	8005d74 <get_ldnumber+0x72>
					vol = (int)i;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	e002      	b.n	8005d7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005d7c:	693b      	ldr	r3, [r7, #16]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	70da      	strb	r2, [r3, #3]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff ff7e 	bl	8005ca8 <move_window>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <check_fs+0x2a>
 8005db2:	2304      	movs	r3, #4
 8005db4:	e038      	b.n	8005e28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3330      	adds	r3, #48	; 0x30
 8005dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fece 	bl	8005b60 <ld_word>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <check_fs+0x48>
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e029      	b.n	8005e28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dda:	2be9      	cmp	r3, #233	; 0xe9
 8005ddc:	d009      	beq.n	8005df2 <check_fs+0x66>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005de4:	2beb      	cmp	r3, #235	; 0xeb
 8005de6:	d11e      	bne.n	8005e26 <check_fs+0x9a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005dee:	2b90      	cmp	r3, #144	; 0x90
 8005df0:	d119      	bne.n	8005e26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3330      	adds	r3, #48	; 0x30
 8005df6:	3336      	adds	r3, #54	; 0x36
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fec9 	bl	8005b90 <ld_dword>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <check_fs+0xa4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d101      	bne.n	8005e0e <check_fs+0x82>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e00c      	b.n	8005e28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3330      	adds	r3, #48	; 0x30
 8005e12:	3352      	adds	r3, #82	; 0x52
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff febb 	bl	8005b90 <ld_dword>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <check_fs+0xa8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d101      	bne.n	8005e26 <check_fs+0x9a>
 8005e22:	2300      	movs	r3, #0
 8005e24:	e000      	b.n	8005e28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005e26:	2302      	movs	r3, #2
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	00544146 	.word	0x00544146
 8005e34:	33544146 	.word	0x33544146

08005e38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff ff58 	bl	8005d02 <get_ldnumber>
 8005e52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da01      	bge.n	8005e5e <find_volume+0x26>
 8005e5a:	230b      	movs	r3, #11
 8005e5c:	e22d      	b.n	80062ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005e5e:	4aa1      	ldr	r2, [pc, #644]	; (80060e4 <find_volume+0x2ac>)
 8005e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <find_volume+0x3a>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	e223      	b.n	80062ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01a      	beq.n	8005ebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fde7 	bl	8005a60 <disk_status>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <find_volume+0x82>
 8005eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005eae:	f003 0304 	and.w	r3, r3, #4
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e1ff      	b.n	80062ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e1fd      	b.n	80062ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fddf 	bl	8005a94 <disk_initialize>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e1e6      	b.n	80062ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <find_volume+0xca>
 8005ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005efe:	230a      	movs	r3, #10
 8005f00:	e1db      	b.n	80062ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f0a:	f7ff ff3f 	bl	8005d8c <check_fs>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d149      	bne.n	8005fb0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f20:	e01e      	b.n	8005f60 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005f30:	4413      	add	r3, r2
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	3304      	adds	r3, #4
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <find_volume+0x114>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	3308      	adds	r3, #8
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fe24 	bl	8005b90 <ld_dword>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	e000      	b.n	8005f4e <find_volume+0x116>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	3358      	adds	r3, #88	; 0x58
 8005f54:	443b      	add	r3, r7
 8005f56:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d9dd      	bls.n	8005f22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005f66:	2300      	movs	r3, #0
 8005f68:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <find_volume+0x13e>
 8005f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f72:	3b01      	subs	r3, #1
 8005f74:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	3358      	adds	r3, #88	; 0x58
 8005f7c:	443b      	add	r3, r7
 8005f7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <find_volume+0x15e>
 8005f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f8e:	f7ff fefd 	bl	8005d8c <check_fs>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e000      	b.n	8005f98 <find_volume+0x160>
 8005f96:	2303      	movs	r3, #3
 8005f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d905      	bls.n	8005fb0 <find_volume+0x178>
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8005faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d9e2      	bls.n	8005f76 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d101      	bne.n	8005fbc <find_volume+0x184>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e17e      	b.n	80062ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d901      	bls.n	8005fc8 <find_volume+0x190>
 8005fc4:	230d      	movs	r3, #13
 8005fc6:	e178      	b.n	80062ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	330b      	adds	r3, #11
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fdc6 	bl	8005b60 <ld_word>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fda:	d001      	beq.n	8005fe0 <find_volume+0x1a8>
 8005fdc:	230d      	movs	r3, #13
 8005fde:	e16c      	b.n	80062ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	3330      	adds	r3, #48	; 0x30
 8005fe4:	3316      	adds	r3, #22
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fdba 	bl	8005b60 <ld_word>
 8005fec:	4603      	mov	r3, r0
 8005fee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <find_volume+0x1cc>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	3330      	adds	r3, #48	; 0x30
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fdc7 	bl	8005b90 <ld_dword>
 8006002:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006008:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	789b      	ldrb	r3, [r3, #2]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d005      	beq.n	8006028 <find_volume+0x1f0>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	789b      	ldrb	r3, [r3, #2]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d001      	beq.n	8006028 <find_volume+0x1f0>
 8006024:	230d      	movs	r3, #13
 8006026:	e148      	b.n	80062ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	789b      	ldrb	r3, [r3, #2]
 800602c:	461a      	mov	r2, r3
 800602e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603c:	b29a      	uxth	r2, r3
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	895b      	ldrh	r3, [r3, #10]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <find_volume+0x224>
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	895b      	ldrh	r3, [r3, #10]
 800604e:	461a      	mov	r2, r3
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	895b      	ldrh	r3, [r3, #10]
 8006054:	3b01      	subs	r3, #1
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <find_volume+0x228>
 800605c:	230d      	movs	r3, #13
 800605e:	e12c      	b.n	80062ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	3311      	adds	r3, #17
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fd7a 	bl	8005b60 <ld_word>
 800606c:	4603      	mov	r3, r0
 800606e:	461a      	mov	r2, r3
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	891b      	ldrh	r3, [r3, #8]
 8006078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <find_volume+0x24e>
 8006082:	230d      	movs	r3, #13
 8006084:	e119      	b.n	80062ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	3313      	adds	r3, #19
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fd67 	bl	8005b60 <ld_word>
 8006092:	4603      	mov	r3, r0
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <find_volume+0x272>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	3330      	adds	r3, #48	; 0x30
 80060a0:	3320      	adds	r3, #32
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fd74 	bl	8005b90 <ld_dword>
 80060a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	3330      	adds	r3, #48	; 0x30
 80060ae:	330e      	adds	r3, #14
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fd55 	bl	8005b60 <ld_word>
 80060b6:	4603      	mov	r3, r0
 80060b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80060ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <find_volume+0x28c>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e0fa      	b.n	80062ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80060c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	4413      	add	r3, r2
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	8912      	ldrh	r2, [r2, #8]
 80060ce:	09d2      	lsrs	r2, r2, #7
 80060d0:	b292      	uxth	r2, r2
 80060d2:	4413      	add	r3, r2
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80060d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	429a      	cmp	r2, r3
 80060dc:	d204      	bcs.n	80060e8 <find_volume+0x2b0>
 80060de:	230d      	movs	r3, #13
 80060e0:	e0eb      	b.n	80062ba <find_volume+0x482>
 80060e2:	bf00      	nop
 80060e4:	200011ec 	.word	0x200011ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f0:	8952      	ldrh	r2, [r2, #10]
 80060f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <find_volume+0x2ca>
 80060fe:	230d      	movs	r3, #13
 8006100:	e0db      	b.n	80062ba <find_volume+0x482>
		fmt = FS_FAT32;
 8006102:	2303      	movs	r3, #3
 8006104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800610e:	4293      	cmp	r3, r2
 8006110:	d802      	bhi.n	8006118 <find_volume+0x2e0>
 8006112:	2302      	movs	r3, #2
 8006114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800611e:	4293      	cmp	r3, r2
 8006120:	d802      	bhi.n	8006128 <find_volume+0x2f0>
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006134:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006136:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613a:	441a      	add	r2, r3
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	441a      	add	r2, r3
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800614a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800614e:	2b03      	cmp	r3, #3
 8006150:	d11e      	bne.n	8006190 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	3330      	adds	r3, #48	; 0x30
 8006156:	332a      	adds	r3, #42	; 0x2a
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fd01 	bl	8005b60 <ld_word>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <find_volume+0x330>
 8006164:	230d      	movs	r3, #13
 8006166:	e0a8      	b.n	80062ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	891b      	ldrh	r3, [r3, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <find_volume+0x33c>
 8006170:	230d      	movs	r3, #13
 8006172:	e0a2      	b.n	80062ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	3330      	adds	r3, #48	; 0x30
 8006178:	332c      	adds	r3, #44	; 0x2c
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fd08 	bl	8005b90 <ld_dword>
 8006180:	4602      	mov	r2, r0
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	647b      	str	r3, [r7, #68]	; 0x44
 800618e:	e01f      	b.n	80061d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	891b      	ldrh	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <find_volume+0x364>
 8006198:	230d      	movs	r3, #13
 800619a:	e08e      	b.n	80062ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a2:	441a      	add	r2, r3
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80061a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d103      	bne.n	80061b8 <find_volume+0x380>
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	e00a      	b.n	80061ce <find_volume+0x396>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	085a      	lsrs	r2, r3, #1
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80061ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	699a      	ldr	r2, [r3, #24]
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80061da:	0b1b      	lsrs	r3, r3, #12
 80061dc:	429a      	cmp	r2, r3
 80061de:	d201      	bcs.n	80061e4 <find_volume+0x3ac>
 80061e0:	230d      	movs	r3, #13
 80061e2:	e06a      	b.n	80062ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ea:	611a      	str	r2, [r3, #16]
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80061fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d149      	bne.n	8006296 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	3330      	adds	r3, #48	; 0x30
 8006206:	3330      	adds	r3, #48	; 0x30
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fca9 	bl	8005b60 <ld_word>
 800620e:	4603      	mov	r3, r0
 8006210:	2b01      	cmp	r3, #1
 8006212:	d140      	bne.n	8006296 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006216:	3301      	adds	r3, #1
 8006218:	4619      	mov	r1, r3
 800621a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800621c:	f7ff fd44 	bl	8005ca8 <move_window>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d137      	bne.n	8006296 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2200      	movs	r2, #0
 800622a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	3330      	adds	r3, #48	; 0x30
 8006230:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fc93 	bl	8005b60 <ld_word>
 800623a:	4603      	mov	r3, r0
 800623c:	461a      	mov	r2, r3
 800623e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006242:	429a      	cmp	r2, r3
 8006244:	d127      	bne.n	8006296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	3330      	adds	r3, #48	; 0x30
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fca0 	bl	8005b90 <ld_dword>
 8006250:	4603      	mov	r3, r0
 8006252:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <find_volume+0x48c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d11e      	bne.n	8006296 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	3330      	adds	r3, #48	; 0x30
 800625c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fc95 	bl	8005b90 <ld_dword>
 8006266:	4603      	mov	r3, r0
 8006268:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <find_volume+0x490>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d113      	bne.n	8006296 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	3330      	adds	r3, #48	; 0x30
 8006272:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fc8a 	bl	8005b90 <ld_dword>
 800627c:	4602      	mov	r2, r0
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006284:	3330      	adds	r3, #48	; 0x30
 8006286:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fc80 	bl	8005b90 <ld_dword>
 8006290:	4602      	mov	r2, r0
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800629c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <find_volume+0x494>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <find_volume+0x494>)
 80062a8:	801a      	strh	r2, [r3, #0]
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <find_volume+0x494>)
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80062b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062b4:	f7ff fc90 	bl	8005bd8 <clear_lock>
#endif
	return FR_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3758      	adds	r7, #88	; 0x58
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	41615252 	.word	0x41615252
 80062c8:	61417272 	.word	0x61417272
 80062cc:	200011f0 	.word	0x200011f0

080062d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80062e2:	f107 0310 	add.w	r3, r7, #16
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fd0b 	bl	8005d02 <get_ldnumber>
 80062ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da01      	bge.n	80062f8 <f_mount+0x28>
 80062f4:	230b      	movs	r3, #11
 80062f6:	e02b      	b.n	8006350 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80062f8:	4a17      	ldr	r2, [pc, #92]	; (8006358 <f_mount+0x88>)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006300:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006308:	69b8      	ldr	r0, [r7, #24]
 800630a:	f7ff fc65 	bl	8005bd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	490d      	ldr	r1, [pc, #52]	; (8006358 <f_mount+0x88>)
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <f_mount+0x66>
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d001      	beq.n	800633a <f_mount+0x6a>
 8006336:	2300      	movs	r3, #0
 8006338:	e00a      	b.n	8006350 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800633a:	f107 010c 	add.w	r1, r7, #12
 800633e:	f107 0308 	add.w	r3, r7, #8
 8006342:	2200      	movs	r2, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fd77 	bl	8005e38 <find_volume>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200011ec 	.word	0x200011ec

0800635c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800636a:	2301      	movs	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006372:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 8006374:	7a5b      	ldrb	r3, [r3, #9]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d131      	bne.n	80063e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 800637e:	7a5b      	ldrb	r3, [r3, #9]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	461a      	mov	r2, r3
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800638a:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 800638c:	7a5b      	ldrb	r3, [r3, #9]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4a17      	ldr	r2, [pc, #92]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800639a:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 800639c:	7a5b      	ldrb	r3, [r3, #9]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 80063a4:	4413      	add	r3, r2
 80063a6:	79fa      	ldrb	r2, [r7, #7]
 80063a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80063aa:	4b11      	ldr	r3, [pc, #68]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 80063ac:	7a5b      	ldrb	r3, [r3, #9]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	b2d1      	uxtb	r1, r2
 80063b4:	4a0e      	ldr	r2, [pc, #56]	; (80063f0 <FATFS_LinkDriverEx+0x94>)
 80063b6:	7251      	strb	r1, [r2, #9]
 80063b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80063ba:	7dbb      	ldrb	r3, [r7, #22]
 80063bc:	3330      	adds	r3, #48	; 0x30
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	3301      	adds	r3, #1
 80063c8:	223a      	movs	r2, #58	; 0x3a
 80063ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3302      	adds	r3, #2
 80063d0:	222f      	movs	r2, #47	; 0x2f
 80063d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	3303      	adds	r3, #3
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20001214 	.word	0x20001214

080063f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80063fe:	2200      	movs	r2, #0
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ffaa 	bl	800635c <FATFS_LinkDriverEx>
 8006408:	4603      	mov	r3, r0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <__libc_init_array>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	4d0d      	ldr	r5, [pc, #52]	; (800644c <__libc_init_array+0x38>)
 8006418:	4c0d      	ldr	r4, [pc, #52]	; (8006450 <__libc_init_array+0x3c>)
 800641a:	1b64      	subs	r4, r4, r5
 800641c:	10a4      	asrs	r4, r4, #2
 800641e:	2600      	movs	r6, #0
 8006420:	42a6      	cmp	r6, r4
 8006422:	d109      	bne.n	8006438 <__libc_init_array+0x24>
 8006424:	4d0b      	ldr	r5, [pc, #44]	; (8006454 <__libc_init_array+0x40>)
 8006426:	4c0c      	ldr	r4, [pc, #48]	; (8006458 <__libc_init_array+0x44>)
 8006428:	f000 f820 	bl	800646c <_init>
 800642c:	1b64      	subs	r4, r4, r5
 800642e:	10a4      	asrs	r4, r4, #2
 8006430:	2600      	movs	r6, #0
 8006432:	42a6      	cmp	r6, r4
 8006434:	d105      	bne.n	8006442 <__libc_init_array+0x2e>
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	f855 3b04 	ldr.w	r3, [r5], #4
 800643c:	4798      	blx	r3
 800643e:	3601      	adds	r6, #1
 8006440:	e7ee      	b.n	8006420 <__libc_init_array+0xc>
 8006442:	f855 3b04 	ldr.w	r3, [r5], #4
 8006446:	4798      	blx	r3
 8006448:	3601      	adds	r6, #1
 800644a:	e7f2      	b.n	8006432 <__libc_init_array+0x1e>
 800644c:	08006530 	.word	0x08006530
 8006450:	08006530 	.word	0x08006530
 8006454:	08006530 	.word	0x08006530
 8006458:	08006534 	.word	0x08006534

0800645c <memset>:
 800645c:	4402      	add	r2, r0
 800645e:	4603      	mov	r3, r0
 8006460:	4293      	cmp	r3, r2
 8006462:	d100      	bne.n	8006466 <memset+0xa>
 8006464:	4770      	bx	lr
 8006466:	f803 1b01 	strb.w	r1, [r3], #1
 800646a:	e7f9      	b.n	8006460 <memset+0x4>

0800646c <_init>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr

08006478 <_fini>:
 8006478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647a:	bf00      	nop
 800647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647e:	bc08      	pop	{r3}
 8006480:	469e      	mov	lr, r3
 8006482:	4770      	bx	lr
