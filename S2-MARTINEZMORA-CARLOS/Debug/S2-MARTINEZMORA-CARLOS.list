
S2-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040bc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004284  08004284  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004284  08004284  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004284  08004284  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800428c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab0  20000074  08004300  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b24  08004300  00021b24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c04  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002436  00000000  00000000  00030ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000330d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002471  00000000  00000000  000349d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6a8  00000000  00000000  00036e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069413  00000000  00000000  000454e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae8fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a4  00000000  00000000  000ae94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004164 	.word	0x08004164

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004164 	.word	0x08004164

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9ca 	bl	80005bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f818 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f892 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f860 	bl	80002f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000234:	f001 fc46 	bl	8001ac4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000238:	4a05      	ldr	r2, [pc, #20]	; (8000250 <main+0x30>)
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <main+0x34>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fc9a 	bl	8001b78 <osThreadNew>
 8000244:	0002      	movs	r2, r0
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <main+0x38>)
 8000248:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800024a:	f001 fc67 	bl	8001b1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024e:	e7fe      	b.n	800024e <main+0x2e>
 8000250:	080041c0 	.word	0x080041c0
 8000254:	0800042d 	.word	0x0800042d
 8000258:	20000114 	.word	0x20000114

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b091      	sub	sp, #68	; 0x44
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	2410      	movs	r4, #16
 8000264:	193b      	adds	r3, r7, r4
 8000266:	0018      	movs	r0, r3
 8000268:	2330      	movs	r3, #48	; 0x30
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f003 fea4 	bl	8003fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f003 fe9d 	bl	8003fba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	0021      	movs	r1, r4
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2202      	movs	r2, #2
 8000298:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	0212      	lsls	r2, r2, #8
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0352      	lsls	r2, r2, #13
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fc28 	bl	8000b08 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002bc:	f000 f8be 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	003b      	movs	r3, r7
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2202      	movs	r2, #2
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d8:	003b      	movs	r3, r7
 80002da:	2101      	movs	r1, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 ff31 	bl	8001144 <HAL_RCC_ClockConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002e6:	f000 f8a9 	bl	800043c <Error_Handler>
  }
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b011      	add	sp, #68	; 0x44
 80002f0:	bd90      	pop	{r4, r7, pc}
	...

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	2296      	movs	r2, #150	; 0x96
 8000302:	0212      	lsls	r2, r2, #8
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	0018      	movs	r0, r3
 800033a:	f001 f857 	bl	80013ec <HAL_UART_Init>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f87b 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000090 	.word	0x20000090
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	240c      	movs	r4, #12
 800035c:	193b      	adds	r3, r7, r4
 800035e:	0018      	movs	r0, r3
 8000360:	2314      	movs	r3, #20
 8000362:	001a      	movs	r2, r3
 8000364:	2100      	movs	r1, #0
 8000366:	f003 fe28 	bl	8003fba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b2e      	ldr	r3, [pc, #184]	; (8000424 <MX_GPIO_Init+0xd0>)
 800036c:	695a      	ldr	r2, [r3, #20]
 800036e:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <MX_GPIO_Init+0xd0>)
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	0309      	lsls	r1, r1, #12
 8000374:	430a      	orrs	r2, r1
 8000376:	615a      	str	r2, [r3, #20]
 8000378:	4b2a      	ldr	r3, [pc, #168]	; (8000424 <MX_GPIO_Init+0xd0>)
 800037a:	695a      	ldr	r2, [r3, #20]
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	031b      	lsls	r3, r3, #12
 8000380:	4013      	ands	r3, r2
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_GPIO_Init+0xd0>)
 8000388:	695a      	ldr	r2, [r3, #20]
 800038a:	4b26      	ldr	r3, [pc, #152]	; (8000424 <MX_GPIO_Init+0xd0>)
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	03c9      	lsls	r1, r1, #15
 8000390:	430a      	orrs	r2, r1
 8000392:	615a      	str	r2, [r3, #20]
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <MX_GPIO_Init+0xd0>)
 8000396:	695a      	ldr	r2, [r3, #20]
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	03db      	lsls	r3, r3, #15
 800039c:	4013      	ands	r3, r2
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b20      	ldr	r3, [pc, #128]	; (8000424 <MX_GPIO_Init+0xd0>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <MX_GPIO_Init+0xd0>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0289      	lsls	r1, r1, #10
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <MX_GPIO_Init+0xd0>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	029b      	lsls	r3, r3, #10
 80003b8:	4013      	ands	r3, r2
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80003be:	23c8      	movs	r3, #200	; 0xc8
 80003c0:	0099      	lsls	r1, r3, #2
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	2200      	movs	r2, #0
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fb7f 	bl	8000acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	0192      	lsls	r2, r2, #6
 80003d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	2284      	movs	r2, #132	; 0x84
 80003da:	0392      	lsls	r2, r2, #14
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MX_GPIO_Init+0xd4>)
 80003e8:	0019      	movs	r1, r3
 80003ea:	0010      	movs	r0, r2
 80003ec:	f000 f9fe 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80003f0:	0021      	movs	r1, r4
 80003f2:	193b      	adds	r3, r7, r4
 80003f4:	22c8      	movs	r2, #200	; 0xc8
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	187a      	adds	r2, r7, r1
 800040e:	2390      	movs	r3, #144	; 0x90
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f000 f9e9 	bl	80007ec <HAL_GPIO_Init>

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b009      	add	sp, #36	; 0x24
 8000420:	bd90      	pop	{r4, r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000
 8000428:	48000800 	.word	0x48000800

0800042c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000434:	2001      	movs	r0, #1
 8000436:	f001 fc47 	bl	8001cc8 <osDelay>
 800043a:	e7fb      	b.n	8000434 <StartDefaultTask+0x8>

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <HAL_MspInit+0x50>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <HAL_MspInit+0x50>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x50>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x50>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <HAL_MspInit+0x50>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_MspInit+0x50>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000482:	2302      	movs	r3, #2
 8000484:	425b      	negs	r3, r3
 8000486:	2200      	movs	r2, #0
 8000488:	2103      	movs	r1, #3
 800048a:	0018      	movs	r0, r3
 800048c:	f000 f98c 	bl	80007a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b08b      	sub	sp, #44	; 0x2c
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	2414      	movs	r4, #20
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	2314      	movs	r3, #20
 80004ac:	001a      	movs	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f003 fd83 	bl	8003fba <memset>
  if(huart->Instance==USART2)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1c      	ldr	r2, [pc, #112]	; (800052c <HAL_UART_MspInit+0x90>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d132      	bne.n	8000524 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004c0:	69da      	ldr	r2, [r3, #28]
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	0289      	lsls	r1, r1, #10
 80004c8:	430a      	orrs	r2, r1
 80004ca:	61da      	str	r2, [r3, #28]
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004ce:	69da      	ldr	r2, [r3, #28]
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	029b      	lsls	r3, r3, #10
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004dc:	695a      	ldr	r2, [r3, #20]
 80004de:	4b14      	ldr	r3, [pc, #80]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0289      	lsls	r1, r1, #10
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_UART_MspInit+0x94>)
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	029b      	lsls	r3, r3, #10
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2203      	movs	r2, #3
 800050e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2201      	movs	r2, #1
 8000514:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	187a      	adds	r2, r7, r1
 8000518:	2390      	movs	r3, #144	; 0x90
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 f964 	bl	80007ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b00b      	add	sp, #44	; 0x2c
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40004400 	.word	0x40004400
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f882 	bl	800064c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000548:	f002 fe90 	bl	800326c <xTaskGetSchedulerState>
 800054c:	0003      	movs	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d001      	beq.n	8000556 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000552:	f003 fb21 	bl	8003b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490e      	ldr	r1, [pc, #56]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0b      	ldr	r4, [pc, #44]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000592:	f7ff ffe3 	bl	800055c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000596:	f003 fce1 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fe41 	bl	8000220 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005ac:	0800428c 	.word	0x0800428c
  ldr r2, =_sbss
 80005b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005b4:	20001b24 	.word	0x20001b24

080005b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_IRQHandler>
	...

080005bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <HAL_Init+0x24>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_Init+0x24>)
 80005c6:	2110      	movs	r1, #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f809 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d2:	f7ff ff39 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40022000 	.word	0x40022000

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <HAL_InitTick+0x5c>)
 80005ee:	681c      	ldr	r4, [r3, #0]
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_InitTick+0x60>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	0019      	movs	r1, r3
 80005f6:	23fa      	movs	r3, #250	; 0xfa
 80005f8:	0098      	lsls	r0, r3, #2
 80005fa:	f7ff fd85 	bl	8000108 <__udivsi3>
 80005fe:	0003      	movs	r3, r0
 8000600:	0019      	movs	r1, r3
 8000602:	0020      	movs	r0, r4
 8000604:	f7ff fd80 	bl	8000108 <__udivsi3>
 8000608:	0003      	movs	r3, r0
 800060a:	0018      	movs	r0, r3
 800060c:	f000 f8e1 	bl	80007d2 <HAL_SYSTICK_Config>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e00f      	b.n	8000638 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b03      	cmp	r3, #3
 800061c:	d80b      	bhi.n	8000636 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	2301      	movs	r3, #1
 8000622:	425b      	negs	r3, r3
 8000624:	2200      	movs	r2, #0
 8000626:	0018      	movs	r0, r3
 8000628:	f000 f8be 	bl	80007a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_InitTick+0x64>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	0018      	movs	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	b003      	add	sp, #12
 800063e:	bd90      	pop	{r4, r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000008 	.word	0x20000008
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	18d2      	adds	r2, r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_IncTick+0x20>)
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000008 	.word	0x20000008
 800066c:	20000118 	.word	0x20000118

08000670 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000118 	.word	0x20000118

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	0002      	movs	r2, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b7f      	cmp	r3, #127	; 0x7f
 8000698:	d828      	bhi.n	80006ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069a:	4a2f      	ldr	r2, [pc, #188]	; (8000758 <__NVIC_SetPriority+0xd4>)
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	33c0      	adds	r3, #192	; 0xc0
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	589b      	ldr	r3, [r3, r2]
 80006aa:	1dfa      	adds	r2, r7, #7
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	0011      	movs	r1, r2
 80006b0:	2203      	movs	r2, #3
 80006b2:	400a      	ands	r2, r1
 80006b4:	00d2      	lsls	r2, r2, #3
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	4091      	lsls	r1, r2
 80006ba:	000a      	movs	r2, r1
 80006bc:	43d2      	mvns	r2, r2
 80006be:	401a      	ands	r2, r3
 80006c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	401a      	ands	r2, r3
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0018      	movs	r0, r3
 80006d0:	2303      	movs	r3, #3
 80006d2:	4003      	ands	r3, r0
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d8:	481f      	ldr	r0, [pc, #124]	; (8000758 <__NVIC_SetPriority+0xd4>)
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	089b      	lsrs	r3, r3, #2
 80006e2:	430a      	orrs	r2, r1
 80006e4:	33c0      	adds	r3, #192	; 0xc0
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006ea:	e031      	b.n	8000750 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <__NVIC_SetPriority+0xd8>)
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	0019      	movs	r1, r3
 80006f4:	230f      	movs	r3, #15
 80006f6:	400b      	ands	r3, r1
 80006f8:	3b08      	subs	r3, #8
 80006fa:	089b      	lsrs	r3, r3, #2
 80006fc:	3306      	adds	r3, #6
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	18d3      	adds	r3, r2, r3
 8000702:	3304      	adds	r3, #4
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	0011      	movs	r1, r2
 800070c:	2203      	movs	r2, #3
 800070e:	400a      	ands	r2, r1
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	21ff      	movs	r1, #255	; 0xff
 8000714:	4091      	lsls	r1, r2
 8000716:	000a      	movs	r2, r1
 8000718:	43d2      	mvns	r2, r2
 800071a:	401a      	ands	r2, r3
 800071c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	22ff      	movs	r2, #255	; 0xff
 8000724:	401a      	ands	r2, r3
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	2303      	movs	r3, #3
 800072e:	4003      	ands	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <__NVIC_SetPriority+0xd8>)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	001c      	movs	r4, r3
 800073c:	230f      	movs	r3, #15
 800073e:	4023      	ands	r3, r4
 8000740:	3b08      	subs	r3, #8
 8000742:	089b      	lsrs	r3, r3, #2
 8000744:	430a      	orrs	r2, r1
 8000746:	3306      	adds	r3, #6
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	18c3      	adds	r3, r0, r3
 800074c:	3304      	adds	r3, #4
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b003      	add	sp, #12
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	045b      	lsls	r3, r3, #17
 8000770:	429a      	cmp	r2, r3
 8000772:	d301      	bcc.n	8000778 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000774:	2301      	movs	r3, #1
 8000776:	e010      	b.n	800079a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SysTick_Config+0x44>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	3a01      	subs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000780:	2301      	movs	r3, #1
 8000782:	425b      	negs	r3, r3
 8000784:	2103      	movs	r1, #3
 8000786:	0018      	movs	r0, r3
 8000788:	f7ff ff7c 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x44>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x44>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	0018      	movs	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	210f      	movs	r1, #15
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	1c02      	adds	r2, r0, #0
 80007b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff5d 	bl	8000684 <__NVIC_SetPriority>
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b004      	add	sp, #16
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ffbf 	bl	8000760 <SysTick_Config>
 80007e2:	0003      	movs	r3, r0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fa:	e14f      	b.n	8000a9c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	4091      	lsls	r1, r2
 8000806:	000a      	movs	r2, r1
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d100      	bne.n	8000814 <HAL_GPIO_Init+0x28>
 8000812:	e140      	b.n	8000a96 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2203      	movs	r2, #3
 800081a:	4013      	ands	r3, r2
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2203      	movs	r2, #3
 8000826:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000828:	2b02      	cmp	r3, #2
 800082a:	d130      	bne.n	800088e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2203      	movs	r2, #3
 8000838:	409a      	lsls	r2, r3
 800083a:	0013      	movs	r3, r2
 800083c:	43da      	mvns	r2, r3
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	409a      	lsls	r2, r3
 800084e:	0013      	movs	r3, r2
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000862:	2201      	movs	r2, #1
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
 8000868:	0013      	movs	r3, r2
 800086a:	43da      	mvns	r2, r3
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	4013      	ands	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	2201      	movs	r2, #1
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	2203      	movs	r2, #3
 8000894:	4013      	ands	r3, r2
 8000896:	2b03      	cmp	r3, #3
 8000898:	d017      	beq.n	80008ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	43da      	mvns	r2, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	409a      	lsls	r2, r3
 80008bc:	0013      	movs	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2203      	movs	r2, #3
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d123      	bne.n	800091e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	08da      	lsrs	r2, r3, #3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3208      	adds	r2, #8
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	58d3      	ldr	r3, [r2, r3]
 80008e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	2207      	movs	r2, #7
 80008e8:	4013      	ands	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	220f      	movs	r2, #15
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	43da      	mvns	r2, r3
 80008f4:	693b      	ldr	r3, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	691a      	ldr	r2, [r3, #16]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	2107      	movs	r1, #7
 8000902:	400b      	ands	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	08da      	lsrs	r2, r3, #3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3208      	adds	r2, #8
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	6939      	ldr	r1, [r7, #16]
 800091c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	43da      	mvns	r2, r3
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2203      	movs	r2, #3
 800093c:	401a      	ands	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	409a      	lsls	r2, r3
 8000944:	0013      	movs	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	23c0      	movs	r3, #192	; 0xc0
 8000958:	029b      	lsls	r3, r3, #10
 800095a:	4013      	ands	r3, r2
 800095c:	d100      	bne.n	8000960 <HAL_GPIO_Init+0x174>
 800095e:	e09a      	b.n	8000a96 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000960:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <HAL_GPIO_Init+0x2c8>)
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <HAL_GPIO_Init+0x2c8>)
 8000966:	2101      	movs	r1, #1
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <HAL_GPIO_Init+0x2c8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	2201      	movs	r2, #1
 8000972:	4013      	ands	r3, r2
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000978:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_GPIO_Init+0x2cc>)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	3302      	adds	r3, #2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	589b      	ldr	r3, [r3, r2]
 8000984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	2203      	movs	r2, #3
 800098a:	4013      	ands	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	220f      	movs	r2, #15
 8000990:	409a      	lsls	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	43da      	mvns	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d013      	beq.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a44      	ldr	r2, [pc, #272]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d00d      	beq.n	80009ca <HAL_GPIO_Init+0x1de>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a43      	ldr	r2, [pc, #268]	; (8000ac0 <HAL_GPIO_Init+0x2d4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d007      	beq.n	80009c6 <HAL_GPIO_Init+0x1da>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a42      	ldr	r2, [pc, #264]	; (8000ac4 <HAL_GPIO_Init+0x2d8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_GPIO_Init+0x1d6>
 80009be:	2303      	movs	r3, #3
 80009c0:	e006      	b.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009c2:	2305      	movs	r3, #5
 80009c4:	e004      	b.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009c6:	2302      	movs	r3, #2
 80009c8:	e002      	b.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009ce:	2300      	movs	r3, #0
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	2103      	movs	r1, #3
 80009d4:	400a      	ands	r2, r1
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	4093      	lsls	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e0:	4935      	ldr	r1, [pc, #212]	; (8000ab8 <HAL_GPIO_Init+0x2cc>)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	4013      	ands	r3, r2
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43da      	mvns	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	035b      	lsls	r3, r3, #13
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	43da      	mvns	r2, r3
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	039b      	lsls	r3, r3, #14
 8000a84:	4013      	ands	r3, r2
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_GPIO_Init+0x2dc>)
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	1e13      	subs	r3, r2, #0
 8000aa6:	d000      	beq.n	8000aaa <HAL_GPIO_Init+0x2be>
 8000aa8:	e6a8      	b.n	80007fc <HAL_GPIO_Init+0x10>
  } 
}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b006      	add	sp, #24
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	0008      	movs	r0, r1
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	1cbb      	adds	r3, r7, #2
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	801a      	strh	r2, [r3, #0]
 8000ade:	1c7b      	adds	r3, r7, #1
 8000ae0:	1c0a      	adds	r2, r1, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae4:	1c7b      	adds	r3, r7, #1
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aec:	1cbb      	adds	r3, r7, #2
 8000aee:	881a      	ldrh	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000af4:	e003      	b.n	8000afe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000af6:	1cbb      	adds	r3, r7, #2
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e305      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4013      	ands	r3, r2
 8000b22:	d100      	bne.n	8000b26 <HAL_RCC_OscConfig+0x1e>
 8000b24:	e08d      	b.n	8000c42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b26:	4bc5      	ldr	r3, [pc, #788]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d00e      	beq.n	8000b50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b32:	4bc2      	ldr	r3, [pc, #776]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	220c      	movs	r2, #12
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d116      	bne.n	8000b6c <HAL_RCC_OscConfig+0x64>
 8000b3e:	4bbf      	ldr	r3, [pc, #764]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	23c0      	movs	r3, #192	; 0xc0
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	401a      	ands	r2, r3
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d10d      	bne.n	8000b6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	4bba      	ldr	r3, [pc, #744]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	029b      	lsls	r3, r3, #10
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d100      	bne.n	8000b5e <HAL_RCC_OscConfig+0x56>
 8000b5c:	e070      	b.n	8000c40 <HAL_RCC_OscConfig+0x138>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d000      	beq.n	8000b68 <HAL_RCC_OscConfig+0x60>
 8000b66:	e06b      	b.n	8000c40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e2dc      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d107      	bne.n	8000b84 <HAL_RCC_OscConfig+0x7c>
 8000b74:	4bb1      	ldr	r3, [pc, #708]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4bb0      	ldr	r3, [pc, #704]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	0249      	lsls	r1, r1, #9
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e02f      	b.n	8000be4 <HAL_RCC_OscConfig+0xdc>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10c      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x9e>
 8000b8c:	4bab      	ldr	r3, [pc, #684]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4baa      	ldr	r3, [pc, #680]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b92:	49ab      	ldr	r1, [pc, #684]	; (8000e40 <HAL_RCC_OscConfig+0x338>)
 8000b94:	400a      	ands	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	4ba8      	ldr	r3, [pc, #672]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4ba7      	ldr	r3, [pc, #668]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000b9e:	49a9      	ldr	r1, [pc, #676]	; (8000e44 <HAL_RCC_OscConfig+0x33c>)
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e01e      	b.n	8000be4 <HAL_RCC_OscConfig+0xdc>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b05      	cmp	r3, #5
 8000bac:	d10e      	bne.n	8000bcc <HAL_RCC_OscConfig+0xc4>
 8000bae:	4ba3      	ldr	r3, [pc, #652]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	4ba2      	ldr	r3, [pc, #648]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	02c9      	lsls	r1, r1, #11
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	4b9f      	ldr	r3, [pc, #636]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b9e      	ldr	r3, [pc, #632]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bc2:	2180      	movs	r1, #128	; 0x80
 8000bc4:	0249      	lsls	r1, r1, #9
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e00b      	b.n	8000be4 <HAL_RCC_OscConfig+0xdc>
 8000bcc:	4b9b      	ldr	r3, [pc, #620]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b9a      	ldr	r3, [pc, #616]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bd2:	499b      	ldr	r1, [pc, #620]	; (8000e40 <HAL_RCC_OscConfig+0x338>)
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	4b98      	ldr	r3, [pc, #608]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b97      	ldr	r3, [pc, #604]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000bde:	4999      	ldr	r1, [pc, #612]	; (8000e44 <HAL_RCC_OscConfig+0x33c>)
 8000be0:	400a      	ands	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d014      	beq.n	8000c16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bec:	f7ff fd40 	bl	8000670 <HAL_GetTick>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf4:	e008      	b.n	8000c08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf6:	f7ff fd3b 	bl	8000670 <HAL_GetTick>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	2b64      	cmp	r3, #100	; 0x64
 8000c02:	d901      	bls.n	8000c08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e28e      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c08:	4b8c      	ldr	r3, [pc, #560]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	029b      	lsls	r3, r3, #10
 8000c10:	4013      	ands	r3, r2
 8000c12:	d0f0      	beq.n	8000bf6 <HAL_RCC_OscConfig+0xee>
 8000c14:	e015      	b.n	8000c42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c16:	f7ff fd2b 	bl	8000670 <HAL_GetTick>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	e008      	b.n	8000c32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c20:	f7ff fd26 	bl	8000670 <HAL_GetTick>
 8000c24:	0002      	movs	r2, r0
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b64      	cmp	r3, #100	; 0x64
 8000c2c:	d901      	bls.n	8000c32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e279      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	4b82      	ldr	r3, [pc, #520]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	029b      	lsls	r3, r3, #10
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d1f0      	bne.n	8000c20 <HAL_RCC_OscConfig+0x118>
 8000c3e:	e000      	b.n	8000c42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2202      	movs	r2, #2
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d100      	bne.n	8000c4e <HAL_RCC_OscConfig+0x146>
 8000c4c:	e06c      	b.n	8000d28 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	220c      	movs	r2, #12
 8000c54:	4013      	ands	r3, r2
 8000c56:	d00e      	beq.n	8000c76 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c58:	4b78      	ldr	r3, [pc, #480]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d11f      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x19c>
 8000c64:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	025b      	lsls	r3, r3, #9
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d116      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_OscConfig+0x184>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d001      	beq.n	8000c8c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e24c      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	22f8      	movs	r2, #248	; 0xf8
 8000c92:	4393      	bics	r3, r2
 8000c94:	0019      	movs	r1, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	00da      	lsls	r2, r3, #3
 8000c9c:	4b67      	ldr	r3, [pc, #412]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	e041      	b.n	8000d28 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d024      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cac:	4b63      	ldr	r3, [pc, #396]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcda 	bl	8000670 <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	e008      	b.n	8000cd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fcd5 	bl	8000670 <HAL_GetTick>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e228      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d0f1      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	22f8      	movs	r2, #248	; 0xf8
 8000ce4:	4393      	bics	r3, r2
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	00da      	lsls	r2, r3, #3
 8000cee:	4b53      	ldr	r3, [pc, #332]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e018      	b.n	8000d28 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf6:	4b51      	ldr	r3, [pc, #324]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b50      	ldr	r3, [pc, #320]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	438a      	bics	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d02:	f7ff fcb5 	bl	8000670 <HAL_GetTick>
 8000d06:	0003      	movs	r3, r0
 8000d08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d0c:	f7ff fcb0 	bl	8000670 <HAL_GetTick>
 8000d10:	0002      	movs	r2, r0
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e203      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2202      	movs	r2, #2
 8000d24:	4013      	ands	r3, r2
 8000d26:	d1f1      	bne.n	8000d0c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d036      	beq.n	8000da0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d019      	beq.n	8000d6e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d46:	f7ff fc93 	bl	8000670 <HAL_GetTick>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc8e 	bl	8000670 <HAL_GetTick>
 8000d54:	0002      	movs	r2, r0
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1e1      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	4b36      	ldr	r3, [pc, #216]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	2202      	movs	r2, #2
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d0f1      	beq.n	8000d50 <HAL_RCC_OscConfig+0x248>
 8000d6c:	e018      	b.n	8000da0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d72:	4b32      	ldr	r3, [pc, #200]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	438a      	bics	r2, r1
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7a:	f7ff fc79 	bl	8000670 <HAL_GetTick>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc74 	bl	8000670 <HAL_GetTick>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e1c7      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d1f1      	bne.n	8000d84 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2204      	movs	r2, #4
 8000da6:	4013      	ands	r3, r2
 8000da8:	d100      	bne.n	8000dac <HAL_RCC_OscConfig+0x2a4>
 8000daa:	e0b5      	b.n	8000f18 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dac:	201f      	movs	r0, #31
 8000dae:	183b      	adds	r3, r7, r0
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000db6:	69da      	ldr	r2, [r3, #28]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	055b      	lsls	r3, r3, #21
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d110      	bne.n	8000de2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000dc2:	69da      	ldr	r2, [r3, #28]
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	0549      	lsls	r1, r1, #21
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	61da      	str	r2, [r3, #28]
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000dd0:	69da      	ldr	r2, [r3, #28]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	055b      	lsls	r3, r3, #21
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ddc:	183b      	adds	r3, r7, r0
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_OscConfig+0x340>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4013      	ands	r3, r2
 8000dec:	d11a      	bne.n	8000e24 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_RCC_OscConfig+0x340>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_RCC_OscConfig+0x340>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0049      	lsls	r1, r1, #1
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc38 	bl	8000670 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e06:	f7ff fc33 	bl	8000670 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	; 0x64
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e186      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_RCC_OscConfig+0x340>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4013      	ands	r3, r2
 8000e22:	d0f0      	beq.n	8000e06 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10f      	bne.n	8000e4c <HAL_RCC_OscConfig+0x344>
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000e2e:	6a1a      	ldr	r2, [r3, #32]
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_RCC_OscConfig+0x334>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	621a      	str	r2, [r3, #32]
 8000e38:	e036      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3a0>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	fffeffff 	.word	0xfffeffff
 8000e44:	fffbffff 	.word	0xfffbffff
 8000e48:	40007000 	.word	0x40007000
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x366>
 8000e54:	4bb6      	ldr	r3, [pc, #728]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e56:	6a1a      	ldr	r2, [r3, #32]
 8000e58:	4bb5      	ldr	r3, [pc, #724]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	438a      	bics	r2, r1
 8000e5e:	621a      	str	r2, [r3, #32]
 8000e60:	4bb3      	ldr	r3, [pc, #716]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e62:	6a1a      	ldr	r2, [r3, #32]
 8000e64:	4bb2      	ldr	r3, [pc, #712]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e66:	2104      	movs	r1, #4
 8000e68:	438a      	bics	r2, r1
 8000e6a:	621a      	str	r2, [r3, #32]
 8000e6c:	e01c      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3a0>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x388>
 8000e76:	4bae      	ldr	r3, [pc, #696]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	4bad      	ldr	r3, [pc, #692]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	4bab      	ldr	r3, [pc, #684]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	4baa      	ldr	r3, [pc, #680]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	621a      	str	r2, [r3, #32]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_RCC_OscConfig+0x3a0>
 8000e90:	4ba7      	ldr	r3, [pc, #668]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e92:	6a1a      	ldr	r2, [r3, #32]
 8000e94:	4ba6      	ldr	r3, [pc, #664]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e96:	2101      	movs	r1, #1
 8000e98:	438a      	bics	r2, r1
 8000e9a:	621a      	str	r2, [r3, #32]
 8000e9c:	4ba4      	ldr	r3, [pc, #656]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	4ba3      	ldr	r3, [pc, #652]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	438a      	bics	r2, r1
 8000ea6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d014      	beq.n	8000eda <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fbde 	bl	8000670 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb8:	e009      	b.n	8000ece <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f7ff fbd9 	bl	8000670 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	4a9b      	ldr	r2, [pc, #620]	; (8001134 <HAL_RCC_OscConfig+0x62c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e12b      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x3b2>
 8000ed8:	e013      	b.n	8000f02 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fbc9 	bl	8000670 <HAL_GetTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee2:	e009      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee4:	f7ff fbc4 	bl	8000670 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	4a91      	ldr	r2, [pc, #580]	; (8001134 <HAL_RCC_OscConfig+0x62c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e116      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	2202      	movs	r2, #2
 8000efe:	4013      	ands	r3, r2
 8000f00:	d1f0      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f02:	231f      	movs	r3, #31
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d105      	bne.n	8000f18 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f0c:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f0e:	69da      	ldr	r2, [r3, #28]
 8000f10:	4b87      	ldr	r3, [pc, #540]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f12:	4989      	ldr	r1, [pc, #548]	; (8001138 <HAL_RCC_OscConfig+0x630>)
 8000f14:	400a      	ands	r2, r1
 8000f16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d063      	beq.n	8000fea <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d12a      	bne.n	8000f80 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f2a:	4b81      	ldr	r3, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b80      	ldr	r3, [pc, #512]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f30:	2104      	movs	r1, #4
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f36:	4b7e      	ldr	r3, [pc, #504]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb95 	bl	8000670 <HAL_GetTick>
 8000f46:	0003      	movs	r3, r0
 8000f48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f4c:	f7ff fb90 	bl	8000670 <HAL_GetTick>
 8000f50:	0002      	movs	r2, r0
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e0e3      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f5e:	4b74      	ldr	r3, [pc, #464]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d0f1      	beq.n	8000f4c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f68:	4b71      	ldr	r3, [pc, #452]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6c:	22f8      	movs	r2, #248	; 0xf8
 8000f6e:	4393      	bics	r3, r2
 8000f70:	0019      	movs	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	4b6d      	ldr	r3, [pc, #436]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7e:	e034      	b.n	8000fea <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	3305      	adds	r3, #5
 8000f86:	d111      	bne.n	8000fac <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f88:	4b69      	ldr	r3, [pc, #420]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f8e:	2104      	movs	r1, #4
 8000f90:	438a      	bics	r2, r1
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f98:	22f8      	movs	r2, #248	; 0xf8
 8000f9a:	4393      	bics	r3, r2
 8000f9c:	0019      	movs	r1, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	00da      	lsls	r2, r3, #3
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8000faa:	e01e      	b.n	8000fea <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fac:	4b60      	ldr	r3, [pc, #384]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb0:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbc:	4b5c      	ldr	r3, [pc, #368]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	438a      	bics	r2, r1
 8000fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fb54 	bl	8000670 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fce:	f7ff fb4f 	bl	8000670 <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e0a2      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fe0:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d1f1      	bne.n	8000fce <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
 8000ff2:	e097      	b.n	8001124 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ff4:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d100      	bne.n	8001002 <HAL_RCC_OscConfig+0x4fa>
 8001000:	e06b      	b.n	80010da <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d14c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001010:	494a      	ldr	r1, [pc, #296]	; (800113c <HAL_RCC_OscConfig+0x634>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb2b 	bl	8000670 <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fb26 	bl	8000670 <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e079      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	049b      	lsls	r3, r3, #18
 800103a:	4013      	ands	r3, r2
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	220f      	movs	r2, #15
 8001044:	4393      	bics	r3, r2
 8001046:	0019      	movs	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 800104e:	430a      	orrs	r2, r1
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a3a      	ldr	r2, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x638>)
 8001058:	4013      	ands	r3, r2
 800105a:	0019      	movs	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001064:	431a      	orrs	r2, r3
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001068:	430a      	orrs	r2, r1
 800106a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0449      	lsls	r1, r1, #17
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107a:	f7ff faf9 	bl	8000670 <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff faf4 	bl	8000670 <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e047      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	2380      	movs	r3, #128	; 0x80
 800109c:	049b      	lsls	r3, r3, #18
 800109e:	4013      	ands	r3, r2
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x57c>
 80010a2:	e03f      	b.n	8001124 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 80010aa:	4924      	ldr	r1, [pc, #144]	; (800113c <HAL_RCC_OscConfig+0x634>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fade 	bl	8000670 <HAL_GetTick>
 80010b4:	0003      	movs	r3, r0
 80010b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ba:	f7ff fad9 	bl	8000670 <HAL_GetTick>
 80010be:	0002      	movs	r2, r0
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e02c      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	049b      	lsls	r3, r3, #18
 80010d4:	4013      	ands	r3, r2
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x5b2>
 80010d8:	e024      	b.n	8001124 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01f      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_RCC_OscConfig+0x628>)
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	025b      	lsls	r3, r3, #9
 80010f8:	401a      	ands	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	429a      	cmp	r2, r3
 8001100:	d10e      	bne.n	8001120 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	220f      	movs	r2, #15
 8001106:	401a      	ands	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800110c:	429a      	cmp	r2, r3
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	23f0      	movs	r3, #240	; 0xf0
 8001114:	039b      	lsls	r3, r3, #14
 8001116:	401a      	ands	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b008      	add	sp, #32
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	40021000 	.word	0x40021000
 8001134:	00001388 	.word	0x00001388
 8001138:	efffffff 	.word	0xefffffff
 800113c:	feffffff 	.word	0xfeffffff
 8001140:	ffc27fff 	.word	0xffc27fff

08001144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e0b3      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2201      	movs	r2, #1
 800115e:	4013      	ands	r3, r2
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d911      	bls.n	800118a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001166:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	4393      	bics	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e09a      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d015      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2204      	movs	r2, #4
 800119a:	4013      	ands	r3, r2
 800119c:	d006      	beq.n	80011ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b4a      	ldr	r3, [pc, #296]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011a4:	21e0      	movs	r1, #224	; 0xe0
 80011a6:	00c9      	lsls	r1, r1, #3
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	22f0      	movs	r2, #240	; 0xf0
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	d040      	beq.n	800124c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	029b      	lsls	r3, r3, #10
 80011da:	4013      	ands	r3, r2
 80011dc:	d114      	bne.n	8001208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e06e      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d107      	bne.n	80011fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ea:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	049b      	lsls	r3, r3, #18
 80011f2:	4013      	ands	r3, r2
 80011f4:	d108      	bne.n	8001208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e062      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e05b      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2203      	movs	r2, #3
 800120e:	4393      	bics	r3, r2
 8001210:	0019      	movs	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 8001218:	430a      	orrs	r2, r1
 800121a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800121c:	f7ff fa28 	bl	8000670 <HAL_GetTick>
 8001220:	0003      	movs	r3, r0
 8001222:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001224:	e009      	b.n	800123a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001226:	f7ff fa23 	bl	8000670 <HAL_GetTick>
 800122a:	0002      	movs	r2, r0
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <HAL_RCC_ClockConfig+0x18c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d901      	bls.n	800123a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e042      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	220c      	movs	r2, #12
 8001240:	401a      	ands	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	429a      	cmp	r2, r3
 800124a:	d1ec      	bne.n	8001226 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d211      	bcs.n	800127e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4393      	bics	r3, r2
 8001262:	0019      	movs	r1, r3
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d001      	beq.n	800127e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e020      	b.n	80012c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	d009      	beq.n	800129c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_RCC_ClockConfig+0x190>)
 800128e:	4013      	ands	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 8001298:	430a      	orrs	r2, r1
 800129a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800129c:	f000 f820 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 80012a0:	0001      	movs	r1, r0
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_RCC_ClockConfig+0x188>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	220f      	movs	r2, #15
 80012aa:	4013      	ands	r3, r2
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_RCC_ClockConfig+0x194>)
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	000a      	movs	r2, r1
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x198>)
 80012b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff f993 	bl	80005e4 <HAL_InitTick>
  
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	00001388 	.word	0x00001388
 80012d4:	fffff8ff 	.word	0xfffff8ff
 80012d8:	080041e4 	.word	0x080041e4
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08f      	sub	sp, #60	; 0x3c
 80012e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012e6:	2314      	movs	r3, #20
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	4a2c      	ldr	r2, [pc, #176]	; (800139c <HAL_RCC_GetSysClockFreq+0xbc>)
 80012ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012ee:	c313      	stmia	r3!, {r0, r1, r4}
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012fa:	c313      	stmia	r3!, {r0, r1, r4}
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	220c      	movs	r2, #12
 800131e:	4013      	ands	r3, r2
 8001320:	2b04      	cmp	r3, #4
 8001322:	d002      	beq.n	800132a <HAL_RCC_GetSysClockFreq+0x4a>
 8001324:	2b08      	cmp	r3, #8
 8001326:	d003      	beq.n	8001330 <HAL_RCC_GetSysClockFreq+0x50>
 8001328:	e02f      	b.n	800138a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800132e:	e02f      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001332:	0c9b      	lsrs	r3, r3, #18
 8001334:	220f      	movs	r2, #15
 8001336:	4013      	ands	r3, r2
 8001338:	2214      	movs	r2, #20
 800133a:	18ba      	adds	r2, r7, r2
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	220f      	movs	r2, #15
 8001346:	4013      	ands	r3, r2
 8001348:	1d3a      	adds	r2, r7, #4
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800134e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001350:	23c0      	movs	r3, #192	; 0xc0
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	401a      	ands	r2, r3
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	025b      	lsls	r3, r3, #9
 800135a:	429a      	cmp	r2, r3
 800135c:	d109      	bne.n	8001372 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800135e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001362:	f7fe fed1 	bl	8000108 <__udivsi3>
 8001366:	0003      	movs	r3, r0
 8001368:	001a      	movs	r2, r3
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	4353      	muls	r3, r2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
 8001370:	e008      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001372:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001376:	f7fe fec7 	bl	8000108 <__udivsi3>
 800137a:	0003      	movs	r3, r0
 800137c:	001a      	movs	r2, r3
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	4353      	muls	r3, r2
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001388:	e002      	b.n	8001390 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800138e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b00f      	add	sp, #60	; 0x3c
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	08004188 	.word	0x08004188
 80013a0:	08004198 	.word	0x08004198
 80013a4:	40021000 	.word	0x40021000
 80013a8:	007a1200 	.word	0x007a1200

080013ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <HAL_RCC_GetHCLKFreq+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80013c4:	f7ff fff2 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013c8:	0001      	movs	r1, r0
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	2207      	movs	r2, #7
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	40d9      	lsrs	r1, r3
 80013da:	000b      	movs	r3, r1
}    
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	40021000 	.word	0x40021000
 80013e8:	080041f4 	.word	0x080041f4

080013ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e044      	b.n	8001488 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2274      	movs	r2, #116	; 0x74
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff f843 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2224      	movs	r2, #36	; 0x24
 800141a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2101      	movs	r1, #1
 8001428:	438a      	bics	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 f830 	bl	8001494 <UART_SetConfig>
 8001434:	0003      	movs	r3, r0
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e024      	b.n	8001488 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f000 f97b 	bl	8001744 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	490d      	ldr	r1, [pc, #52]	; (8001490 <HAL_UART_Init+0xa4>)
 800145a:	400a      	ands	r2, r1
 800145c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2108      	movs	r1, #8
 800146a:	438a      	bics	r2, r1
 800146c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0018      	movs	r0, r3
 8001482:	f000 fa13 	bl	80018ac <UART_CheckIdleState>
 8001486:	0003      	movs	r3, r0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}
 8001490:	fffff7ff 	.word	0xfffff7ff

08001494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800149c:	231e      	movs	r3, #30
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a97      	ldr	r2, [pc, #604]	; (8001720 <UART_SetConfig+0x28c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a92      	ldr	r2, [pc, #584]	; (8001724 <UART_SetConfig+0x290>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a89      	ldr	r2, [pc, #548]	; (8001728 <UART_SetConfig+0x294>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	430a      	orrs	r2, r1
 800150e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a85      	ldr	r2, [pc, #532]	; (800172c <UART_SetConfig+0x298>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d127      	bne.n	800156a <UART_SetConfig+0xd6>
 800151a:	4b85      	ldr	r3, [pc, #532]	; (8001730 <UART_SetConfig+0x29c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	2b03      	cmp	r3, #3
 8001524:	d00d      	beq.n	8001542 <UART_SetConfig+0xae>
 8001526:	d81b      	bhi.n	8001560 <UART_SetConfig+0xcc>
 8001528:	2b02      	cmp	r3, #2
 800152a:	d014      	beq.n	8001556 <UART_SetConfig+0xc2>
 800152c:	d818      	bhi.n	8001560 <UART_SetConfig+0xcc>
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <UART_SetConfig+0xa4>
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00a      	beq.n	800154c <UART_SetConfig+0xb8>
 8001536:	e013      	b.n	8001560 <UART_SetConfig+0xcc>
 8001538:	231f      	movs	r3, #31
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	e035      	b.n	80015ae <UART_SetConfig+0x11a>
 8001542:	231f      	movs	r3, #31
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	e030      	b.n	80015ae <UART_SetConfig+0x11a>
 800154c:	231f      	movs	r3, #31
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	2204      	movs	r2, #4
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e02b      	b.n	80015ae <UART_SetConfig+0x11a>
 8001556:	231f      	movs	r3, #31
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	2208      	movs	r2, #8
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e026      	b.n	80015ae <UART_SetConfig+0x11a>
 8001560:	231f      	movs	r3, #31
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	2210      	movs	r2, #16
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e021      	b.n	80015ae <UART_SetConfig+0x11a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a71      	ldr	r2, [pc, #452]	; (8001734 <UART_SetConfig+0x2a0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d104      	bne.n	800157e <UART_SetConfig+0xea>
 8001574:	231f      	movs	r3, #31
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e017      	b.n	80015ae <UART_SetConfig+0x11a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6d      	ldr	r2, [pc, #436]	; (8001738 <UART_SetConfig+0x2a4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d104      	bne.n	8001592 <UART_SetConfig+0xfe>
 8001588:	231f      	movs	r3, #31
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e00d      	b.n	80015ae <UART_SetConfig+0x11a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a69      	ldr	r2, [pc, #420]	; (800173c <UART_SetConfig+0x2a8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d104      	bne.n	80015a6 <UART_SetConfig+0x112>
 800159c:	231f      	movs	r3, #31
 800159e:	18fb      	adds	r3, r7, r3
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e003      	b.n	80015ae <UART_SetConfig+0x11a>
 80015a6:	231f      	movs	r3, #31
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	2210      	movs	r2, #16
 80015ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d15d      	bne.n	8001676 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80015ba:	231f      	movs	r3, #31
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d015      	beq.n	80015f0 <UART_SetConfig+0x15c>
 80015c4:	dc18      	bgt.n	80015f8 <UART_SetConfig+0x164>
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d00d      	beq.n	80015e6 <UART_SetConfig+0x152>
 80015ca:	dc15      	bgt.n	80015f8 <UART_SetConfig+0x164>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <UART_SetConfig+0x142>
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d005      	beq.n	80015e0 <UART_SetConfig+0x14c>
 80015d4:	e010      	b.n	80015f8 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80015d6:	f7ff fef3 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]
        break;
 80015de:	e012      	b.n	8001606 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80015e0:	4b57      	ldr	r3, [pc, #348]	; (8001740 <UART_SetConfig+0x2ac>)
 80015e2:	61bb      	str	r3, [r7, #24]
        break;
 80015e4:	e00f      	b.n	8001606 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80015e6:	f7ff fe7b 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
        break;
 80015ee:	e00a      	b.n	8001606 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	61bb      	str	r3, [r7, #24]
        break;
 80015f6:	e006      	b.n	8001606 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80015fc:	231e      	movs	r3, #30
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
        break;
 8001604:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d100      	bne.n	800160e <UART_SetConfig+0x17a>
 800160c:	e07b      	b.n	8001706 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	005a      	lsls	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	18d2      	adds	r2, r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f7fe fd71 	bl	8000108 <__udivsi3>
 8001626:	0003      	movs	r3, r0
 8001628:	b29b      	uxth	r3, r3
 800162a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	d91c      	bls.n	800166c <UART_SetConfig+0x1d8>
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d217      	bcs.n	800166c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	b29a      	uxth	r2, r3
 8001640:	200e      	movs	r0, #14
 8001642:	183b      	adds	r3, r7, r0
 8001644:	210f      	movs	r1, #15
 8001646:	438a      	bics	r2, r1
 8001648:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	b29b      	uxth	r3, r3
 8001650:	2207      	movs	r2, #7
 8001652:	4013      	ands	r3, r2
 8001654:	b299      	uxth	r1, r3
 8001656:	183b      	adds	r3, r7, r0
 8001658:	183a      	adds	r2, r7, r0
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	183a      	adds	r2, r7, r0
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	e04c      	b.n	8001706 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800166c:	231e      	movs	r3, #30
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e047      	b.n	8001706 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001676:	231f      	movs	r3, #31
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d015      	beq.n	80016ac <UART_SetConfig+0x218>
 8001680:	dc18      	bgt.n	80016b4 <UART_SetConfig+0x220>
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00d      	beq.n	80016a2 <UART_SetConfig+0x20e>
 8001686:	dc15      	bgt.n	80016b4 <UART_SetConfig+0x220>
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <UART_SetConfig+0x1fe>
 800168c:	2b02      	cmp	r3, #2
 800168e:	d005      	beq.n	800169c <UART_SetConfig+0x208>
 8001690:	e010      	b.n	80016b4 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001692:	f7ff fe95 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
        break;
 800169a:	e012      	b.n	80016c2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <UART_SetConfig+0x2ac>)
 800169e:	61bb      	str	r3, [r7, #24]
        break;
 80016a0:	e00f      	b.n	80016c2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016a2:	f7ff fe1d 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 80016a6:	0003      	movs	r3, r0
 80016a8:	61bb      	str	r3, [r7, #24]
        break;
 80016aa:	e00a      	b.n	80016c2 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	61bb      	str	r3, [r7, #24]
        break;
 80016b2:	e006      	b.n	80016c2 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80016b8:	231e      	movs	r3, #30
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
        break;
 80016c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01e      	beq.n	8001706 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	085a      	lsrs	r2, r3, #1
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	18d2      	adds	r2, r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0019      	movs	r1, r3
 80016d8:	0010      	movs	r0, r2
 80016da:	f7fe fd15 	bl	8000108 <__udivsi3>
 80016de:	0003      	movs	r3, r0
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	d909      	bls.n	80016fe <UART_SetConfig+0x26a>
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d204      	bcs.n	80016fe <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	e003      	b.n	8001706 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80016fe:	231e      	movs	r3, #30
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001712:	231e      	movs	r3, #30
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	781b      	ldrb	r3, [r3, #0]
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b008      	add	sp, #32
 800171e:	bd80      	pop	{r7, pc}
 8001720:	efff69f3 	.word	0xefff69f3
 8001724:	ffffcfff 	.word	0xffffcfff
 8001728:	fffff4ff 	.word	0xfffff4ff
 800172c:	40013800 	.word	0x40013800
 8001730:	40021000 	.word	0x40021000
 8001734:	40004400 	.word	0x40004400
 8001738:	40004800 	.word	0x40004800
 800173c:	40004c00 	.word	0x40004c00
 8001740:	007a1200 	.word	0x007a1200

08001744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d00b      	beq.n	800176e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <UART_AdvFeatureConfig+0x144>)
 800175e:	4013      	ands	r3, r2
 8001760:	0019      	movs	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d00b      	beq.n	8001790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4a43      	ldr	r2, [pc, #268]	; (800188c <UART_AdvFeatureConfig+0x148>)
 8001780:	4013      	ands	r3, r2
 8001782:	0019      	movs	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2204      	movs	r2, #4
 8001796:	4013      	ands	r3, r2
 8001798:	d00b      	beq.n	80017b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <UART_AdvFeatureConfig+0x14c>)
 80017a2:	4013      	ands	r3, r2
 80017a4:	0019      	movs	r1, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	2208      	movs	r2, #8
 80017b8:	4013      	ands	r3, r2
 80017ba:	d00b      	beq.n	80017d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a34      	ldr	r2, [pc, #208]	; (8001894 <UART_AdvFeatureConfig+0x150>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2210      	movs	r2, #16
 80017da:	4013      	ands	r3, r2
 80017dc:	d00b      	beq.n	80017f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a2c      	ldr	r2, [pc, #176]	; (8001898 <UART_AdvFeatureConfig+0x154>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2220      	movs	r2, #32
 80017fc:	4013      	ands	r3, r2
 80017fe:	d00b      	beq.n	8001818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <UART_AdvFeatureConfig+0x158>)
 8001808:	4013      	ands	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	4013      	ands	r3, r2
 8001820:	d01d      	beq.n	800185e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <UART_AdvFeatureConfig+0x15c>)
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	035b      	lsls	r3, r3, #13
 8001842:	429a      	cmp	r2, r3
 8001844:	d10b      	bne.n	800185e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <UART_AdvFeatureConfig+0x160>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	4013      	ands	r3, r2
 8001866:	d00b      	beq.n	8001880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <UART_AdvFeatureConfig+0x164>)
 8001870:	4013      	ands	r3, r2
 8001872:	0019      	movs	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]
  }
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffdffff 	.word	0xfffdffff
 800188c:	fffeffff 	.word	0xfffeffff
 8001890:	fffbffff 	.word	0xfffbffff
 8001894:	ffff7fff 	.word	0xffff7fff
 8001898:	ffffefff 	.word	0xffffefff
 800189c:	ffffdfff 	.word	0xffffdfff
 80018a0:	ffefffff 	.word	0xffefffff
 80018a4:	ff9fffff 	.word	0xff9fffff
 80018a8:	fff7ffff 	.word	0xfff7ffff

080018ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	2100      	movs	r1, #0
 80018ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80018bc:	f7fe fed8 	bl	8000670 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2208      	movs	r2, #8
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d10c      	bne.n	80018ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0391      	lsls	r1, r2, #14
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <UART_CheckIdleState+0x8c>)
 80018dc:	9200      	str	r2, [sp, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	f000 f82c 	bl	800193c <UART_WaitOnFlagUntilTimeout>
 80018e4:	1e03      	subs	r3, r0, #0
 80018e6:	d001      	beq.n	80018ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e021      	b.n	8001930 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2204      	movs	r2, #4
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d10c      	bne.n	8001914 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	03d1      	lsls	r1, r2, #15
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <UART_CheckIdleState+0x8c>)
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	f000 f818 	bl	800193c <UART_WaitOnFlagUntilTimeout>
 800190c:	1e03      	subs	r3, r0, #0
 800190e:	d001      	beq.n	8001914 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e00d      	b.n	8001930 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2220      	movs	r2, #32
 800191e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2274      	movs	r2, #116	; 0x74
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}
 8001938:	01ffffff 	.word	0x01ffffff

0800193c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800194c:	e0a3      	b.n	8001a96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800194e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001950:	3301      	adds	r3, #1
 8001952:	d100      	bne.n	8001956 <UART_WaitOnFlagUntilTimeout+0x1a>
 8001954:	e09f      	b.n	8001a96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001956:	f7fe fe8b 	bl	8000670 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001962:	429a      	cmp	r2, r3
 8001964:	d302      	bcc.n	800196c <UART_WaitOnFlagUntilTimeout+0x30>
 8001966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001968:	2b00      	cmp	r3, #0
 800196a:	d13d      	bne.n	80019e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800196c:	f3ef 8310 	mrs	r3, PRIMASK
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
 8001976:	2301      	movs	r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	f383 8810 	msr	PRIMASK, r3
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	494c      	ldr	r1, [pc, #304]	; (8001ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	f383 8810 	msr	PRIMASK, r3
}
 800199c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800199e:	f3ef 8310 	mrs	r3, PRIMASK
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80019a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019a6:	643b      	str	r3, [r7, #64]	; 0x40
 80019a8:	2301      	movs	r3, #1
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ae:	f383 8810 	msr	PRIMASK, r3
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2101      	movs	r1, #1
 80019c0:	438a      	bics	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ca:	f383 8810 	msr	PRIMASK, r3
}
 80019ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2274      	movs	r2, #116	; 0x74
 80019e0:	2100      	movs	r1, #0
 80019e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e067      	b.n	8001ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2204      	movs	r2, #4
 80019f0:	4013      	ands	r3, r2
 80019f2:	d050      	beq.n	8001a96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	401a      	ands	r2, r3
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d146      	bne.n	8001a96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a12:	f3ef 8310 	mrs	r3, PRIMASK
 8001a16:	613b      	str	r3, [r7, #16]
  return(result);
 8001a18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f383 8810 	msr	PRIMASK, r3
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4923      	ldr	r1, [pc, #140]	; (8001ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f383 8810 	msr	PRIMASK, r3
}
 8001a42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a44:	f3ef 8310 	mrs	r3, PRIMASK
 8001a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8001a4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a4e:	2301      	movs	r3, #1
 8001a50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f383 8810 	msr	PRIMASK, r3
}
 8001a58:	46c0      	nop			; (mov r8, r8)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	438a      	bics	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	f383 8810 	msr	PRIMASK, r3
}
 8001a74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	2120      	movs	r1, #32
 8001a88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2274      	movs	r2, #116	; 0x74
 8001a8e:	2100      	movs	r1, #0
 8001a90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e010      	b.n	8001ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	425a      	negs	r2, r3
 8001aa6:	4153      	adcs	r3, r2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	001a      	movs	r2, r3
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d100      	bne.n	8001ab6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8001ab4:	e74b      	b.n	800194e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b014      	add	sp, #80	; 0x50
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	fffffe5f 	.word	0xfffffe5f

08001ac4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aca:	f3ef 8305 	mrs	r3, IPSR
 8001ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ada:	607b      	str	r3, [r7, #4]
  return(result);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <osKernelInitialize+0x2e>
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <osKernelInitialize+0x54>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d103      	bne.n	8001af2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8001aea:	2306      	movs	r3, #6
 8001aec:	425b      	negs	r3, r3
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e00c      	b.n	8001b0c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <osKernelInitialize+0x54>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <osKernelInitialize+0x54>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e002      	b.n	8001b0c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8001b06:	2301      	movs	r3, #1
 8001b08:	425b      	negs	r3, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	2000011c 	.word	0x2000011c

08001b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b22:	f3ef 8305 	mrs	r3, IPSR
 8001b26:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b32:	607b      	str	r3, [r7, #4]
  return(result);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <osKernelStart+0x2e>
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <osKernelStart+0x58>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <osKernelStart+0x2e>
    stat = osErrorISR;
 8001b42:	2306      	movs	r3, #6
 8001b44:	425b      	negs	r3, r3
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e00e      	b.n	8001b68 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <osKernelStart+0x58>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d107      	bne.n	8001b62 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <osKernelStart+0x58>)
 8001b54:	2202      	movs	r2, #2
 8001b56:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001b58:	f000 ff94 	bl	8002a84 <vTaskStartScheduler>
      stat = osOK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e002      	b.n	8001b68 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8001b62:	2301      	movs	r3, #1
 8001b64:	425b      	negs	r3, r3
 8001b66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	2000011c 	.word	0x2000011c

08001b78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b090      	sub	sp, #64	; 0x40
 8001b7c:	af04      	add	r7, sp, #16
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b88:	f3ef 8305 	mrs	r3, IPSR
 8001b8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b8e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d000      	beq.n	8001b96 <osThreadNew+0x1e>
 8001b94:	e090      	b.n	8001cb8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b96:	f3ef 8310 	mrs	r3, PRIMASK
 8001b9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <osThreadNew+0x34>
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <osThreadNew+0x14c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d100      	bne.n	8001bac <osThreadNew+0x34>
 8001baa:	e085      	b.n	8001cb8 <osThreadNew+0x140>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d100      	bne.n	8001bb4 <osThreadNew+0x3c>
 8001bb2:	e081      	b.n	8001cb8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001bb8:	2318      	movs	r3, #24
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8001bbc:	2117      	movs	r1, #23
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	425b      	negs	r3, r3
 8001bcc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d044      	beq.n	8001c5e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <osThreadNew+0x6a>
        name = attr->name;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <osThreadNew+0x8e>
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	2b38      	cmp	r3, #56	; 0x38
 8001bfa:	d804      	bhi.n	8001c06 <osThreadNew+0x8e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d001      	beq.n	8001c0a <osThreadNew+0x92>
        return (NULL);
 8001c06:	2300      	movs	r3, #0
 8001c08:	e057      	b.n	8001cba <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <osThreadNew+0xc8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2bbb      	cmp	r3, #187	; 0xbb
 8001c28:	d90a      	bls.n	8001c40 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <osThreadNew+0xc8>
        mem = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	e010      	b.n	8001c62 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <osThreadNew+0xea>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d108      	bne.n	8001c62 <osThreadNew+0xea>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d104      	bne.n	8001c62 <osThreadNew+0xea>
          mem = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	e001      	b.n	8001c62 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d112      	bne.n	8001c8e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c70:	68bd      	ldr	r5, [r7, #8]
 8001c72:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	9201      	str	r2, [sp, #4]
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	002b      	movs	r3, r5
 8001c82:	0022      	movs	r2, r4
 8001c84:	f000 fd49 	bl	800271a <xTaskCreateStatic>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e014      	b.n	8001cb8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68bc      	ldr	r4, [r7, #8]
 8001c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	0023      	movs	r3, r4
 8001caa:	f000 fd79 	bl	80027a0 <xTaskCreate>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <osThreadNew+0x140>
          hTask = NULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001cb8:	693b      	ldr	r3, [r7, #16]
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b00c      	add	sp, #48	; 0x30
 8001cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	2000011c 	.word	0x2000011c

08001cc8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cd0:	f3ef 8305 	mrs	r3, IPSR
 8001cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8001cd6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <osDelay+0x30>
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <osDelay+0x4c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d103      	bne.n	8001cf8 <osDelay+0x30>
    stat = osErrorISR;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e008      	b.n	8001d0a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <osDelay+0x42>
      vTaskDelay(ticks);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fe97 	bl	8002a38 <vTaskDelay>
    }
  }

  return (stat);
 8001d0a:	697b      	ldr	r3, [r7, #20]
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b006      	add	sp, #24
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000011c 	.word	0x2000011c

08001d18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <vApplicationGetIdleTaskMemory+0x28>)
 8001d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	20000120 	.word	0x20000120
 8001d44:	200001dc 	.word	0x200001dc

08001d48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <vApplicationGetTimerTaskMemory+0x28>)
 8001d58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	0052      	lsls	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b004      	add	sp, #16
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200003dc 	.word	0x200003dc
 8001d74:	20000498 	.word	0x20000498

08001d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3308      	adds	r3, #8
 8001d84:	001a      	movs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4252      	negs	r2, r2
 8001d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3308      	adds	r3, #8
 8001d96:	001a      	movs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	001a      	movs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b002      	add	sp, #8
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	d103      	bne.n	8001e2c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e00c      	b.n	8001e46 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e002      	b.n	8001e3a <vListInsert+0x2c>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d2f6      	bcs.n	8001e34 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b004      	add	sp, #16
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6892      	ldr	r2, [r2, #8]
 8001e90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6852      	ldr	r2, [r2, #4]
 8001e9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d103      	bne.n	8001eae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <xQueueGenericReset+0x18>
 8001ede:	b672      	cpsid	i
 8001ee0:	e7fe      	b.n	8001ee0 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8001ee2:	f001 fdfd 	bl	8003ae0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	434b      	muls	r3, r1
 8001ef4:	18d2      	adds	r2, r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	1e59      	subs	r1, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	434b      	muls	r3, r1
 8001f18:	18d2      	adds	r2, r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2244      	movs	r2, #68	; 0x44
 8001f22:	21ff      	movs	r1, #255	; 0xff
 8001f24:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2245      	movs	r2, #69	; 0x45
 8001f2a:	21ff      	movs	r1, #255	; 0xff
 8001f2c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3310      	adds	r3, #16
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fff5 	bl	8002f30 <xTaskRemoveFromEventList>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d00c      	beq.n	8001f64 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f4a:	f001 fdb9 	bl	8003ac0 <vPortYield>
 8001f4e:	e009      	b.n	8001f64 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3310      	adds	r3, #16
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff ff0f 	bl	8001d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3324      	adds	r3, #36	; 0x24
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7ff ff0a 	bl	8001d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f64:	f001 fdce 	bl	8003b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b004      	add	sp, #16
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f72:	b590      	push	{r4, r7, lr}
 8001f74:	b089      	sub	sp, #36	; 0x24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <xQueueGenericCreateStatic+0x18>
 8001f86:	b672      	cpsid	i
 8001f88:	e7fe      	b.n	8001f88 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <xQueueGenericCreateStatic+0x22>
 8001f90:	b672      	cpsid	i
 8001f92:	e7fe      	b.n	8001f92 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <xQueueGenericCreateStatic+0x2e>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <xQueueGenericCreateStatic+0x32>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <xQueueGenericCreateStatic+0x34>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <xQueueGenericCreateStatic+0x3c>
 8001faa:	b672      	cpsid	i
 8001fac:	e7fe      	b.n	8001fac <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <xQueueGenericCreateStatic+0x48>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <xQueueGenericCreateStatic+0x4c>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <xQueueGenericCreateStatic+0x4e>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <xQueueGenericCreateStatic+0x56>
 8001fc4:	b672      	cpsid	i
 8001fc6:	e7fe      	b.n	8001fc6 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fc8:	2350      	movs	r3, #80	; 0x50
 8001fca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b50      	cmp	r3, #80	; 0x50
 8001fd0:	d001      	beq.n	8001fd6 <xQueueGenericCreateStatic+0x64>
 8001fd2:	b672      	cpsid	i
 8001fd4:	e7fe      	b.n	8001fd4 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00e      	beq.n	8001ffe <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2246      	movs	r2, #70	; 0x46
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fe8:	2328      	movs	r3, #40	; 0x28
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781c      	ldrb	r4, [r3, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	0023      	movs	r3, r4
 8001ffa:	f000 f805 	bl	8002008 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001ffe:	697b      	ldr	r3, [r7, #20]
	}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b007      	add	sp, #28
 8002006:	bd90      	pop	{r4, r7, pc}

08002008 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	001a      	movs	r2, r3
 8002016:	1cfb      	adds	r3, r7, #3
 8002018:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d103      	bne.n	8002028 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e002      	b.n	800202e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2101      	movs	r1, #1
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff ff43 	bl	8001eca <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	1cfa      	adds	r2, r7, #3
 8002048:	214c      	movs	r1, #76	; 0x4c
 800204a:	7812      	ldrb	r2, [r2, #0]
 800204c:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}

08002056 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b08a      	sub	sp, #40	; 0x28
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <xQueueGenericSend+0x20>
 8002072:	b672      	cpsid	i
 8002074:	e7fe      	b.n	8002074 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <xQueueGenericSend+0x2e>
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <xQueueGenericSend+0x32>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <xQueueGenericSend+0x34>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <xQueueGenericSend+0x3c>
 800208e:	b672      	cpsid	i
 8002090:	e7fe      	b.n	8002090 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d103      	bne.n	80020a0 <xQueueGenericSend+0x4a>
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <xQueueGenericSend+0x4e>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <xQueueGenericSend+0x50>
 80020a4:	2300      	movs	r3, #0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <xQueueGenericSend+0x58>
 80020aa:	b672      	cpsid	i
 80020ac:	e7fe      	b.n	80020ac <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ae:	f001 f8dd 	bl	800326c <xTaskGetSchedulerState>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d102      	bne.n	80020bc <xQueueGenericSend+0x66>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <xQueueGenericSend+0x6a>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <xQueueGenericSend+0x6c>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <xQueueGenericSend+0x74>
 80020c6:	b672      	cpsid	i
 80020c8:	e7fe      	b.n	80020c8 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020ca:	f001 fd09 	bl	8003ae0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d302      	bcc.n	80020e0 <xQueueGenericSend+0x8a>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d11e      	bne.n	800211e <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	6a3b      	ldr	r3, [r7, #32]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f99f 	bl	800242a <prvCopyDataToQueue>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	3324      	adds	r3, #36	; 0x24
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 ff17 	bl	8002f30 <xTaskRemoveFromEventList>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d007      	beq.n	8002116 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002106:	f001 fcdb 	bl	8003ac0 <vPortYield>
 800210a:	e004      	b.n	8002116 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002112:	f001 fcd5 	bl	8003ac0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002116:	f001 fcf5 	bl	8003b04 <vPortExitCritical>
				return pdPASS;
 800211a:	2301      	movs	r3, #1
 800211c:	e05b      	b.n	80021d6 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002124:	f001 fcee 	bl	8003b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002128:	2300      	movs	r3, #0
 800212a:	e054      	b.n	80021d6 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002132:	2314      	movs	r3, #20
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	0018      	movs	r0, r3
 8002138:	f000 ff56 	bl	8002fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800213c:	2301      	movs	r3, #1
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002140:	f001 fce0 	bl	8003b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002144:	f000 fcfc 	bl	8002b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002148:	f001 fcca 	bl	8003ae0 <vPortEnterCritical>
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	2244      	movs	r2, #68	; 0x44
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	3301      	adds	r3, #1
 8002156:	d103      	bne.n	8002160 <xQueueGenericSend+0x10a>
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2244      	movs	r2, #68	; 0x44
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2245      	movs	r2, #69	; 0x45
 8002164:	5c9b      	ldrb	r3, [r3, r2]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	d103      	bne.n	8002174 <xQueueGenericSend+0x11e>
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2245      	movs	r2, #69	; 0x45
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]
 8002174:	f001 fcc6 	bl	8003b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002178:	1d3a      	adds	r2, r7, #4
 800217a:	2314      	movs	r3, #20
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	0011      	movs	r1, r2
 8002180:	0018      	movs	r0, r3
 8002182:	f000 ff45 	bl	8003010 <xTaskCheckForTimeOut>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d11e      	bne.n	80021c8 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	0018      	movs	r0, r3
 800218e:	f000 fa51 	bl	8002634 <prvIsQueueFull>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d011      	beq.n	80021ba <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	3310      	adds	r3, #16
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fe82 	bl	8002ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f9d0 	bl	800254c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021ac:	f000 fcd4 	bl	8002b58 <xTaskResumeAll>
 80021b0:	1e03      	subs	r3, r0, #0
 80021b2:	d18a      	bne.n	80020ca <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80021b4:	f001 fc84 	bl	8003ac0 <vPortYield>
 80021b8:	e787      	b.n	80020ca <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f9c5 	bl	800254c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021c2:	f000 fcc9 	bl	8002b58 <xTaskResumeAll>
 80021c6:	e780      	b.n	80020ca <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f000 f9be 	bl	800254c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021d0:	f000 fcc2 	bl	8002b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021d4:	2300      	movs	r3, #0
		}
	}
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b00a      	add	sp, #40	; 0x28
 80021dc:	bd80      	pop	{r7, pc}

080021de <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b089      	sub	sp, #36	; 0x24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <xQueueGenericSendFromISR+0x1c>
 80021f6:	b672      	cpsid	i
 80021f8:	e7fe      	b.n	80021f8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d103      	bne.n	8002208 <xQueueGenericSendFromISR+0x2a>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <xQueueGenericSendFromISR+0x2e>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <xQueueGenericSendFromISR+0x30>
 800220c:	2300      	movs	r3, #0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <xQueueGenericSendFromISR+0x38>
 8002212:	b672      	cpsid	i
 8002214:	e7fe      	b.n	8002214 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d103      	bne.n	8002224 <xQueueGenericSendFromISR+0x46>
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <xQueueGenericSendFromISR+0x4a>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <xQueueGenericSendFromISR+0x4c>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <xQueueGenericSendFromISR+0x54>
 800222e:	b672      	cpsid	i
 8002230:	e7fe      	b.n	8002230 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002232:	f001 fc7f 	bl	8003b34 <ulSetInterruptMaskFromISR>
 8002236:	0003      	movs	r3, r0
 8002238:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <xQueueGenericSendFromISR+0x6e>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d12e      	bne.n	80022aa <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800224c:	2413      	movs	r4, #19
 800224e:	193b      	adds	r3, r7, r4
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	2145      	movs	r1, #69	; 0x45
 8002254:	5c52      	ldrb	r2, [r2, r1]
 8002256:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f8e3 	bl	800242a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002264:	193b      	adds	r3, r7, r4
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	d111      	bne.n	8002292 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	3324      	adds	r3, #36	; 0x24
 800227a:	0018      	movs	r0, r3
 800227c:	f000 fe58 	bl	8002f30 <xTaskRemoveFromEventList>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d00f      	beq.n	80022a4 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e008      	b.n	80022a4 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002292:	2313      	movs	r3, #19
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b259      	sxtb	r1, r3
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2245      	movs	r2, #69	; 0x45
 80022a2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
		{
 80022a8:	e001      	b.n	80022ae <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f001 fc45 	bl	8003b40 <vClearInterruptMaskFromISR>

	return xReturn;
 80022b6:	69fb      	ldr	r3, [r7, #28]
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b009      	add	sp, #36	; 0x24
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <xQueueReceive+0x1e>
 80022da:	b672      	cpsid	i
 80022dc:	e7fe      	b.n	80022dc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <xQueueReceive+0x2c>
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <xQueueReceive+0x30>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <xQueueReceive+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <xQueueReceive+0x3a>
 80022f6:	b672      	cpsid	i
 80022f8:	e7fe      	b.n	80022f8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022fa:	f000 ffb7 	bl	800326c <xTaskGetSchedulerState>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d102      	bne.n	8002308 <xQueueReceive+0x48>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <xQueueReceive+0x4c>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <xQueueReceive+0x4e>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <xQueueReceive+0x56>
 8002312:	b672      	cpsid	i
 8002314:	e7fe      	b.n	8002314 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002316:	f001 fbe3 	bl	8003ae0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01a      	beq.n	800235c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f000 f8e7 	bl	8002500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	1e5a      	subs	r2, r3, #1
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d008      	beq.n	8002354 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	3310      	adds	r3, #16
 8002346:	0018      	movs	r0, r3
 8002348:	f000 fdf2 	bl	8002f30 <xTaskRemoveFromEventList>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002350:	f001 fbb6 	bl	8003ac0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002354:	f001 fbd6 	bl	8003b04 <vPortExitCritical>
				return pdPASS;
 8002358:	2301      	movs	r3, #1
 800235a:	e062      	b.n	8002422 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002362:	f001 fbcf 	bl	8003b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002366:	2300      	movs	r3, #0
 8002368:	e05b      	b.n	8002422 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002370:	2314      	movs	r3, #20
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fe37 	bl	8002fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800237e:	f001 fbc1 	bl	8003b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002382:	f000 fbdd 	bl	8002b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002386:	f001 fbab 	bl	8003ae0 <vPortEnterCritical>
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	2244      	movs	r2, #68	; 0x44
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b25b      	sxtb	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	d103      	bne.n	800239e <xQueueReceive+0xde>
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2244      	movs	r2, #68	; 0x44
 800239a:	2100      	movs	r1, #0
 800239c:	5499      	strb	r1, [r3, r2]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2245      	movs	r2, #69	; 0x45
 80023a2:	5c9b      	ldrb	r3, [r3, r2]
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	d103      	bne.n	80023b2 <xQueueReceive+0xf2>
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2245      	movs	r2, #69	; 0x45
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	f001 fba7 	bl	8003b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023b6:	1d3a      	adds	r2, r7, #4
 80023b8:	2314      	movs	r3, #20
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f000 fe26 	bl	8003010 <xTaskCheckForTimeOut>
 80023c4:	1e03      	subs	r3, r0, #0
 80023c6:	d11e      	bne.n	8002406 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 f91c 	bl	8002608 <prvIsQueueEmpty>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d011      	beq.n	80023f8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	3324      	adds	r3, #36	; 0x24
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	0011      	movs	r1, r2
 80023dc:	0018      	movs	r0, r3
 80023de:	f000 fd63 	bl	8002ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 f8b1 	bl	800254c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023ea:	f000 fbb5 	bl	8002b58 <xTaskResumeAll>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d191      	bne.n	8002316 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80023f2:	f001 fb65 	bl	8003ac0 <vPortYield>
 80023f6:	e78e      	b.n	8002316 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 f8a6 	bl	800254c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002400:	f000 fbaa 	bl	8002b58 <xTaskResumeAll>
 8002404:	e787      	b.n	8002316 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 f89f 	bl	800254c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800240e:	f000 fba3 	bl	8002b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f8f7 	bl	8002608 <prvIsQueueEmpty>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d100      	bne.n	8002420 <xQueueReceive+0x160>
 800241e:	e77a      	b.n	8002316 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002420:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b00a      	add	sp, #40	; 0x28
 8002428:	bd80      	pop	{r7, pc}

0800242a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10e      	bne.n	8002466 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d14e      	bne.n	80024ee <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 ff25 	bl	80032a4 <xTaskPriorityDisinherit>
 800245a:	0003      	movs	r3, r0
 800245c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	e043      	b.n	80024ee <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d119      	bne.n	80024a0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6898      	ldr	r0, [r3, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0019      	movs	r1, r3
 8002478:	f001 fd96 	bl	8003fa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	18d2      	adds	r2, r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d32b      	bcc.n	80024ee <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	e026      	b.n	80024ee <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68d8      	ldr	r0, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	0019      	movs	r1, r3
 80024ac:	f001 fd7c 	bl	8003fa8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	425b      	negs	r3, r3
 80024ba:	18d2      	adds	r2, r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d207      	bcs.n	80024dc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	425b      	negs	r3, r3
 80024d6:	18d2      	adds	r2, r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d105      	bne.n	80024ee <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024f6:	697b      	ldr	r3, [r7, #20]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b006      	add	sp, #24
 80024fe:	bd80      	pop	{r7, pc}

08002500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d018      	beq.n	8002544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	18d2      	adds	r2, r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d303      	bcc.n	8002534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	0018      	movs	r0, r3
 8002540:	f001 fd32 	bl	8003fa8 <memcpy>
	}
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002554:	f001 fac4 	bl	8003ae0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	2145      	movs	r1, #69	; 0x45
 8002560:	5c52      	ldrb	r2, [r2, r1]
 8002562:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002564:	e013      	b.n	800258e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3324      	adds	r3, #36	; 0x24
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fcdc 	bl	8002f30 <xTaskRemoveFromEventList>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800257c:	f000 fd98 	bl	80030b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002580:	210f      	movs	r1, #15
 8002582:	187b      	adds	r3, r7, r1
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	3b01      	subs	r3, #1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	187b      	adds	r3, r7, r1
 800258c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800258e:	230f      	movs	r3, #15
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b25b      	sxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	dce5      	bgt.n	8002566 <prvUnlockQueue+0x1a>
 800259a:	e000      	b.n	800259e <prvUnlockQueue+0x52>
					break;
 800259c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2245      	movs	r2, #69	; 0x45
 80025a2:	21ff      	movs	r1, #255	; 0xff
 80025a4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80025a6:	f001 faad 	bl	8003b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025aa:	f001 fa99 	bl	8003ae0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025ae:	230e      	movs	r3, #14
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	2144      	movs	r1, #68	; 0x44
 80025b6:	5c52      	ldrb	r2, [r2, r1]
 80025b8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ba:	e013      	b.n	80025e4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d016      	beq.n	80025f2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3310      	adds	r3, #16
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fcb1 	bl	8002f30 <xTaskRemoveFromEventList>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d001      	beq.n	80025d6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80025d2:	f000 fd6d 	bl	80030b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025d6:	210e      	movs	r1, #14
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025e4:	230e      	movs	r3, #14
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dce5      	bgt.n	80025bc <prvUnlockQueue+0x70>
 80025f0:	e000      	b.n	80025f4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80025f2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2244      	movs	r2, #68	; 0x44
 80025f8:	21ff      	movs	r1, #255	; 0xff
 80025fa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80025fc:	f001 fa82 	bl	8003b04 <vPortExitCritical>
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bd80      	pop	{r7, pc}

08002608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002610:	f001 fa66 	bl	8003ae0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800261c:	2301      	movs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	e001      	b.n	8002626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002626:	f001 fa6d 	bl	8003b04 <vPortExitCritical>

	return xReturn;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}

08002634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800263c:	f001 fa50 	bl	8003ae0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	429a      	cmp	r2, r3
 800264a:	d102      	bne.n	8002652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e001      	b.n	8002656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002656:	f001 fa55 	bl	8003b04 <vPortExitCritical>

	return xReturn;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}

08002664 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e015      	b.n	80026a0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <vQueueAddToRegistry+0x4c>)
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	00d2      	lsls	r2, r2, #3
 800267a:	58d3      	ldr	r3, [r2, r3]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10c      	bne.n	800269a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <vQueueAddToRegistry+0x4c>)
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	00d2      	lsls	r2, r2, #3
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <vQueueAddToRegistry+0x4c>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	18d3      	adds	r3, r2, r3
 8002692:	3304      	adds	r3, #4
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002698:	e006      	b.n	80026a8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d9e6      	bls.n	8002674 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b004      	add	sp, #16
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000898 	.word	0x20000898

080026b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026c4:	f001 fa0c 	bl	8003ae0 <vPortEnterCritical>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2244      	movs	r2, #68	; 0x44
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	d103      	bne.n	80026dc <vQueueWaitForMessageRestricted+0x28>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2244      	movs	r2, #68	; 0x44
 80026d8:	2100      	movs	r1, #0
 80026da:	5499      	strb	r1, [r3, r2]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2245      	movs	r2, #69	; 0x45
 80026e0:	5c9b      	ldrb	r3, [r3, r2]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	d103      	bne.n	80026f0 <vQueueWaitForMessageRestricted+0x3c>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2245      	movs	r2, #69	; 0x45
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]
 80026f0:	f001 fa08 	bl	8003b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d106      	bne.n	800270a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3324      	adds	r3, #36	; 0x24
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	0018      	movs	r0, r3
 8002706:	f000 fbed 	bl	8002ee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ff1d 	bl	800254c <prvUnlockQueue>
	}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b006      	add	sp, #24
 8002718:	bd80      	pop	{r7, pc}

0800271a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800271a:	b590      	push	{r4, r7, lr}
 800271c:	b08d      	sub	sp, #52	; 0x34
 800271e:	af04      	add	r7, sp, #16
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <xTaskCreateStatic+0x18>
 800272e:	b672      	cpsid	i
 8002730:	e7fe      	b.n	8002730 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <xTaskCreateStatic+0x22>
 8002738:	b672      	cpsid	i
 800273a:	e7fe      	b.n	800273a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800273c:	23bc      	movs	r3, #188	; 0xbc
 800273e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bbc      	cmp	r3, #188	; 0xbc
 8002744:	d001      	beq.n	800274a <xTaskCreateStatic+0x30>
 8002746:	b672      	cpsid	i
 8002748:	e7fe      	b.n	8002748 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <xTaskCreateStatic+0x78>
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01d      	beq.n	8002792 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	22b9      	movs	r2, #185	; 0xb9
 8002764:	2102      	movs	r1, #2
 8002766:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002768:	683c      	ldr	r4, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	2300      	movs	r3, #0
 8002772:	9303      	str	r3, [sp, #12]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	2318      	movs	r3, #24
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	0023      	movs	r3, r4
 8002784:	f000 f858 	bl	8002838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f8ec 	bl	8002968 <prvAddNewTaskToReadyList>
 8002790:	e001      	b.n	8002796 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002796:	69bb      	ldr	r3, [r7, #24]
	}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b009      	add	sp, #36	; 0x24
 800279e:	bd90      	pop	{r4, r7, pc}

080027a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b08d      	sub	sp, #52	; 0x34
 80027a4:	af04      	add	r7, sp, #16
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b0:	1dbb      	adds	r3, r7, #6
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f001 fa2a 	bl	8003c10 <pvPortMalloc>
 80027bc:	0003      	movs	r3, r0
 80027be:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027c6:	20bc      	movs	r0, #188	; 0xbc
 80027c8:	f001 fa22 	bl	8003c10 <pvPortMalloc>
 80027cc:	0003      	movs	r3, r0
 80027ce:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
 80027dc:	e006      	b.n	80027ec <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f001 fabb 	bl	8003d5c <vPortFree>
 80027e6:	e001      	b.n	80027ec <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01a      	beq.n	8002828 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	22b9      	movs	r2, #185	; 0xb9
 80027f6:	2100      	movs	r1, #0
 80027f8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027fa:	1dbb      	adds	r3, r7, #6
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	683c      	ldr	r4, [r7, #0]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	2300      	movs	r3, #0
 8002806:	9303      	str	r3, [sp, #12]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	0023      	movs	r3, r4
 8002816:	f000 f80f 	bl	8002838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	0018      	movs	r0, r3
 800281e:	f000 f8a3 	bl	8002968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e002      	b.n	800282e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002828:	2301      	movs	r3, #1
 800282a:	425b      	negs	r3, r3
 800282c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800282e:	69bb      	ldr	r3, [r7, #24]
	}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b009      	add	sp, #36	; 0x24
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	001a      	movs	r2, r3
 8002850:	21a5      	movs	r1, #165	; 0xa5
 8002852:	f001 fbb2 	bl	8003fba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	493e      	ldr	r1, [pc, #248]	; (8002958 <prvInitialiseNewTask+0x120>)
 800285e:	468c      	mov	ip, r1
 8002860:	4463      	add	r3, ip
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	18d3      	adds	r3, r2, r3
 8002866:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2207      	movs	r2, #7
 800286c:	4393      	bics	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2207      	movs	r2, #7
 8002874:	4013      	ands	r3, r2
 8002876:	d001      	beq.n	800287c <prvInitialiseNewTask+0x44>
 8002878:	b672      	cpsid	i
 800287a:	e7fe      	b.n	800287a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	e013      	b.n	80028aa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	18d3      	adds	r3, r2, r3
 8002888:	7818      	ldrb	r0, [r3, #0]
 800288a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800288c:	2134      	movs	r1, #52	; 0x34
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	185b      	adds	r3, r3, r1
 8002894:	1c02      	adds	r2, r0, #0
 8002896:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d9e8      	bls.n	8002882 <prvInitialiseNewTask+0x4a>
 80028b0:	e000      	b.n	80028b4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80028b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2243      	movs	r2, #67	; 0x43
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b37      	cmp	r3, #55	; 0x37
 80028c0:	d901      	bls.n	80028c6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028c2:	2337      	movs	r3, #55	; 0x37
 80028c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c8:	6a3a      	ldr	r2, [r7, #32]
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	2200      	movs	r2, #0
 80028d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	3304      	adds	r3, #4
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff fa69 	bl	8001db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	3318      	adds	r3, #24
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff fa64 	bl	8001db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	2238      	movs	r2, #56	; 0x38
 80028f6:	1ad2      	subs	r2, r2, r3
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	22b4      	movs	r2, #180	; 0xb4
 8002906:	2100      	movs	r1, #0
 8002908:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	22b8      	movs	r2, #184	; 0xb8
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	3354      	adds	r3, #84	; 0x54
 8002916:	2260      	movs	r2, #96	; 0x60
 8002918:	2100      	movs	r1, #0
 800291a:	0018      	movs	r0, r3
 800291c:	f001 fb4d 	bl	8003fba <memset>
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <prvInitialiseNewTask+0x124>)
 8002924:	659a      	str	r2, [r3, #88]	; 0x58
 8002926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <prvInitialiseNewTask+0x128>)
 800292a:	65da      	str	r2, [r3, #92]	; 0x5c
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <prvInitialiseNewTask+0x12c>)
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	0018      	movs	r0, r3
 800293a:	f001 f833 	bl	80039a4 <pxPortInitialiseStack>
 800293e:	0002      	movs	r2, r0
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800294e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b006      	add	sp, #24
 8002956:	bd80      	pop	{r7, pc}
 8002958:	3fffffff 	.word	0x3fffffff
 800295c:	08004244 	.word	0x08004244
 8002960:	08004264 	.word	0x08004264
 8002964:	08004224 	.word	0x08004224

08002968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002970:	f001 f8b6 	bl	8003ae0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <prvAddNewTaskToReadyList+0xb8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <prvAddNewTaskToReadyList+0xb8>)
 800297c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <prvAddNewTaskToReadyList+0xbc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <prvAddNewTaskToReadyList+0xbc>)
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <prvAddNewTaskToReadyList+0xb8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d110      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002994:	f000 fba6 	bl	80030e4 <prvInitialiseTaskLists>
 8002998:	e00d      	b.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <prvAddNewTaskToReadyList+0xc0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <prvAddNewTaskToReadyList+0xbc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d802      	bhi.n	80029b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <prvAddNewTaskToReadyList+0xbc>)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 80029be:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <prvAddNewTaskToReadyList+0xc4>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d903      	bls.n	80029dc <prvAddNewTaskToReadyList+0x74>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <prvAddNewTaskToReadyList+0xc8>)
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e0:	0013      	movs	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	189b      	adds	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <prvAddNewTaskToReadyList+0xcc>)
 80029ea:	189a      	adds	r2, r3, r2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f7ff f9e9 	bl	8001dca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029f8:	f001 f884 	bl	8003b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <prvAddNewTaskToReadyList+0xc0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <prvAddNewTaskToReadyList+0xbc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d201      	bcs.n	8002a16 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a12:	f001 f855 	bl	8003ac0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b002      	add	sp, #8
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	20000dac 	.word	0x20000dac
 8002a24:	200008d8 	.word	0x200008d8
 8002a28:	20000db8 	.word	0x20000db8
 8002a2c:	20000dc8 	.word	0x20000dc8
 8002a30:	20000db4 	.word	0x20000db4
 8002a34:	200008dc 	.word	0x200008dc

08002a38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d010      	beq.n	8002a6c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <vTaskDelay+0x48>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <vTaskDelay+0x1e>
 8002a52:	b672      	cpsid	i
 8002a54:	e7fe      	b.n	8002a54 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002a56:	f000 f873 	bl	8002b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fc7c 	bl	800335c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a64:	f000 f878 	bl	8002b58 <xTaskResumeAll>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002a72:	f001 f825 	bl	8003ac0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000dd4 	.word	0x20000dd4

08002a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002a92:	003a      	movs	r2, r7
 8002a94:	1d39      	adds	r1, r7, #4
 8002a96:	2308      	movs	r3, #8
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff f93c 	bl	8001d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002aa0:	683c      	ldr	r4, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	491e      	ldr	r1, [pc, #120]	; (8002b20 <vTaskStartScheduler+0x9c>)
 8002aa8:	481e      	ldr	r0, [pc, #120]	; (8002b24 <vTaskStartScheduler+0xa0>)
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	0022      	movs	r2, r4
 8002ab6:	f7ff fe30 	bl	800271a <xTaskCreateStatic>
 8002aba:	0002      	movs	r2, r0
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <vTaskStartScheduler+0xa4>)
 8002abe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <vTaskStartScheduler+0xa4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e001      	b.n	8002ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d103      	bne.n	8002ae0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8002ad8:	f000 fc94 	bl	8003404 <xTimerCreateTimerTask>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d113      	bne.n	8002b0e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002ae6:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <vTaskStartScheduler+0xa8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3354      	adds	r3, #84	; 0x54
 8002aee:	001a      	movs	r2, r3
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <vTaskStartScheduler+0xac>)
 8002af2:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <vTaskStartScheduler+0xb0>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	4252      	negs	r2, r2
 8002afa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <vTaskStartScheduler+0xb4>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <vTaskStartScheduler+0xb8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b08:	f000 ffb6 	bl	8003a78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b0c:	e004      	b.n	8002b18 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	d101      	bne.n	8002b18 <vTaskStartScheduler+0x94>
 8002b14:	b672      	cpsid	i
 8002b16:	e7fe      	b.n	8002b16 <vTaskStartScheduler+0x92>
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b005      	add	sp, #20
 8002b1e:	bd90      	pop	{r4, r7, pc}
 8002b20:	080041a8 	.word	0x080041a8
 8002b24:	080030c5 	.word	0x080030c5
 8002b28:	20000dd0 	.word	0x20000dd0
 8002b2c:	200008d8 	.word	0x200008d8
 8002b30:	20000010 	.word	0x20000010
 8002b34:	20000dcc 	.word	0x20000dcc
 8002b38:	20000db8 	.word	0x20000db8
 8002b3c:	20000db0 	.word	0x20000db0

08002b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <vTaskSuspendAll+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <vTaskSuspendAll+0x14>)
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000dd4 	.word	0x20000dd4

08002b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <xTaskResumeAll+0xf8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <xTaskResumeAll+0x1a>
 8002b6e:	b672      	cpsid	i
 8002b70:	e7fe      	b.n	8002b70 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b72:	f000 ffb5 	bl	8003ae0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <xTaskResumeAll+0xf8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <xTaskResumeAll+0xf8>)
 8002b7e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <xTaskResumeAll+0xf8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d15b      	bne.n	8002c40 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <xTaskResumeAll+0xfc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d057      	beq.n	8002c40 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b90:	e02f      	b.n	8002bf2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <xTaskResumeAll+0x100>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff f96b 	bl	8001e7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff f966 	bl	8001e7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	; (8002c5c <xTaskResumeAll+0x104>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d903      	bls.n	8002bc2 <xTaskResumeAll+0x6a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <xTaskResumeAll+0x104>)
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	189b      	adds	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4a24      	ldr	r2, [pc, #144]	; (8002c60 <xTaskResumeAll+0x108>)
 8002bd0:	189a      	adds	r2, r3, r2
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f7ff f8f6 	bl	8001dca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <xTaskResumeAll+0x10c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <xTaskResumeAll+0x110>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <xTaskResumeAll+0x100>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1cb      	bne.n	8002b92 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c00:	f000 fb10 	bl	8003224 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <xTaskResumeAll+0x114>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c10:	f000 f83c 	bl	8002c8c <xTaskIncrementTick>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d002      	beq.n	8002c1e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <xTaskResumeAll+0x110>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f2      	bne.n	8002c10 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <xTaskResumeAll+0x114>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <xTaskResumeAll+0x110>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c3c:	f000 ff40 	bl	8003ac0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c40:	f000 ff60 	bl	8003b04 <vPortExitCritical>

	return xAlreadyYielded;
 8002c44:	68bb      	ldr	r3, [r7, #8]
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000dd4 	.word	0x20000dd4
 8002c54:	20000dac 	.word	0x20000dac
 8002c58:	20000d6c 	.word	0x20000d6c
 8002c5c:	20000db4 	.word	0x20000db4
 8002c60:	200008dc 	.word	0x200008dc
 8002c64:	200008d8 	.word	0x200008d8
 8002c68:	20000dc0 	.word	0x20000dc0
 8002c6c:	20000dbc 	.word	0x20000dbc

08002c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002c76:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <xTaskGetTickCount+0x18>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	20000db0 	.word	0x20000db0

08002c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c96:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <xTaskIncrementTick+0x13c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d000      	beq.n	8002ca0 <xTaskIncrementTick+0x14>
 8002c9e:	e083      	b.n	8002da8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <xTaskIncrementTick+0x140>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ca8:	4b48      	ldr	r3, [pc, #288]	; (8002dcc <xTaskIncrementTick+0x140>)
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d117      	bne.n	8002ce4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cb4:	4b46      	ldr	r3, [pc, #280]	; (8002dd0 <xTaskIncrementTick+0x144>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <xTaskIncrementTick+0x36>
 8002cbe:	b672      	cpsid	i
 8002cc0:	e7fe      	b.n	8002cc0 <xTaskIncrementTick+0x34>
 8002cc2:	4b43      	ldr	r3, [pc, #268]	; (8002dd0 <xTaskIncrementTick+0x144>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <xTaskIncrementTick+0x148>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b40      	ldr	r3, [pc, #256]	; (8002dd0 <xTaskIncrementTick+0x144>)
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <xTaskIncrementTick+0x148>)
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <xTaskIncrementTick+0x14c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <xTaskIncrementTick+0x14c>)
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	f000 faa0 	bl	8003224 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <xTaskIncrementTick+0x150>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d34e      	bcc.n	8002d8c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <xTaskIncrementTick+0x144>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <xTaskIncrementTick+0x70>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <xTaskIncrementTick+0x72>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <xTaskIncrementTick+0x150>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	4252      	negs	r2, r2
 8002d08:	601a      	str	r2, [r3, #0]
					break;
 8002d0a:	e03f      	b.n	8002d8c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <xTaskIncrementTick+0x144>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d203      	bcs.n	8002d2c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <xTaskIncrementTick+0x150>)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
						break;
 8002d2a:	e02f      	b.n	8002d8c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff f8a2 	bl	8001e7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3318      	adds	r3, #24
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff f899 	bl	8001e7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <xTaskIncrementTick+0x154>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d903      	bls.n	8002d5c <xTaskIncrementTick+0xd0>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <xTaskIncrementTick+0x154>)
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	0013      	movs	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4a1e      	ldr	r2, [pc, #120]	; (8002de4 <xTaskIncrementTick+0x158>)
 8002d6a:	189a      	adds	r2, r3, r2
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	0019      	movs	r1, r3
 8002d72:	0010      	movs	r0, r2
 8002d74:	f7ff f829 	bl	8001dca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <xTaskIncrementTick+0x15c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d3b3      	bcc.n	8002cee <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8a:	e7b0      	b.n	8002cee <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <xTaskIncrementTick+0x15c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	4914      	ldr	r1, [pc, #80]	; (8002de4 <xTaskIncrementTick+0x158>)
 8002d94:	0013      	movs	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	585b      	ldr	r3, [r3, r1]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d907      	bls.n	8002db2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e004      	b.n	8002db2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <xTaskIncrementTick+0x160>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <xTaskIncrementTick+0x160>)
 8002db0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <xTaskIncrementTick+0x164>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dbe:	697b      	ldr	r3, [r7, #20]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b006      	add	sp, #24
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000dd4 	.word	0x20000dd4
 8002dcc:	20000db0 	.word	0x20000db0
 8002dd0:	20000d64 	.word	0x20000d64
 8002dd4:	20000d68 	.word	0x20000d68
 8002dd8:	20000dc4 	.word	0x20000dc4
 8002ddc:	20000dcc 	.word	0x20000dcc
 8002de0:	20000db4 	.word	0x20000db4
 8002de4:	200008dc 	.word	0x200008dc
 8002de8:	200008d8 	.word	0x200008d8
 8002dec:	20000dbc 	.word	0x20000dbc
 8002df0:	20000dc0 	.word	0x20000dc0

08002df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dfa:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <vTaskSwitchContext+0x9c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <vTaskSwitchContext+0xa0>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e08:	e03d      	b.n	8002e86 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <vTaskSwitchContext+0xa0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <vTaskSwitchContext+0xa4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	e007      	b.n	8002e28 <vTaskSwitchContext+0x34>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <vTaskSwitchContext+0x2e>
 8002e1e:	b672      	cpsid	i
 8002e20:	e7fe      	b.n	8002e20 <vTaskSwitchContext+0x2c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	491c      	ldr	r1, [pc, #112]	; (8002e9c <vTaskSwitchContext+0xa8>)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	189b      	adds	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	585b      	ldr	r3, [r3, r1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ee      	beq.n	8002e18 <vTaskSwitchContext+0x24>
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	0013      	movs	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <vTaskSwitchContext+0xa8>)
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d104      	bne.n	8002e6a <vTaskSwitchContext+0x76>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <vTaskSwitchContext+0xac>)
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <vTaskSwitchContext+0xa4>)
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <vTaskSwitchContext+0xac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3354      	adds	r3, #84	; 0x54
 8002e80:	001a      	movs	r2, r3
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <vTaskSwitchContext+0xb0>)
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000dd4 	.word	0x20000dd4
 8002e94:	20000dc0 	.word	0x20000dc0
 8002e98:	20000db4 	.word	0x20000db4
 8002e9c:	200008dc 	.word	0x200008dc
 8002ea0:	200008d8 	.word	0x200008d8
 8002ea4:	20000010 	.word	0x20000010

08002ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <vTaskPlaceOnEventList+0x14>
 8002eb8:	b672      	cpsid	i
 8002eba:	e7fe      	b.n	8002eba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ebc:	4b08      	ldr	r3, [pc, #32]	; (8002ee0 <vTaskPlaceOnEventList+0x38>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7fe ffa0 	bl	8001e0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 fa42 	bl	800335c <prvAddCurrentTaskToDelayedList>
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200008d8 	.word	0x200008d8

08002ee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <vTaskPlaceOnEventListRestricted+0x16>
 8002ef6:	b672      	cpsid	i
 8002ef8:	e7fe      	b.n	8002ef8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <vTaskPlaceOnEventListRestricted+0x48>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3318      	adds	r3, #24
 8002f00:	001a      	movs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fe ff5f 	bl	8001dca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8002f12:	2301      	movs	r3, #1
 8002f14:	425b      	negs	r3, r3
 8002f16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0011      	movs	r1, r2
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fa1c 	bl	800335c <prvAddCurrentTaskToDelayedList>
	}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200008d8 	.word	0x200008d8

08002f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <xTaskRemoveFromEventList+0x1a>
 8002f46:	b672      	cpsid	i
 8002f48:	e7fe      	b.n	8002f48 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7fe ff93 	bl	8001e7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <xTaskRemoveFromEventList+0xa0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11d      	bne.n	8002f98 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7fe ff8a 	bl	8001e7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <xTaskRemoveFromEventList+0xa4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d903      	bls.n	8002f7a <xTaskRemoveFromEventList+0x4a>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <xTaskRemoveFromEventList+0xa4>)
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	0013      	movs	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <xTaskRemoveFromEventList+0xa8>)
 8002f88:	189a      	adds	r2, r3, r2
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f7fe ff1a 	bl	8001dca <vListInsertEnd>
 8002f96:	e007      	b.n	8002fa8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <xTaskRemoveFromEventList+0xac>)
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7fe ff11 	bl	8001dca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <xTaskRemoveFromEventList+0xb0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d905      	bls.n	8002fc2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <xTaskRemoveFromEventList+0xb4>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e001      	b.n	8002fc6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000dd4 	.word	0x20000dd4
 8002fd4:	20000db4 	.word	0x20000db4
 8002fd8:	200008dc 	.word	0x200008dc
 8002fdc:	20000d6c 	.word	0x20000d6c
 8002fe0:	200008d8 	.word	0x200008d8
 8002fe4:	20000dc0 	.word	0x20000dc0

08002fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <vTaskInternalSetTimeOutState+0x20>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <vTaskInternalSetTimeOutState+0x24>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000dc4 	.word	0x20000dc4
 800300c:	20000db0 	.word	0x20000db0

08003010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <xTaskCheckForTimeOut+0x14>
 8003020:	b672      	cpsid	i
 8003022:	e7fe      	b.n	8003022 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xTaskCheckForTimeOut+0x1e>
 800302a:	b672      	cpsid	i
 800302c:	e7fe      	b.n	800302c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800302e:	f000 fd57 	bl	8003ae0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <xTaskCheckForTimeOut+0x98>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	d102      	bne.n	8003050 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	e024      	b.n	800309a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <xTaskCheckForTimeOut+0x9c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d007      	beq.n	800306c <xTaskCheckForTimeOut+0x5c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e016      	b.n	800309a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20c      	bcs.n	8003090 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad2      	subs	r2, r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff ffaf 	bl	8002fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e004      	b.n	800309a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003096:	2301      	movs	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800309a:	f000 fd33 	bl	8003b04 <vPortExitCritical>

	return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b006      	add	sp, #24
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000db0 	.word	0x20000db0
 80030ac:	20000dc4 	.word	0x20000dc4

080030b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80030b4:	4b02      	ldr	r3, [pc, #8]	; (80030c0 <vTaskMissedYield+0x10>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000dc0 	.word	0x20000dc0

080030c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030cc:	f000 f84e 	bl	800316c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <prvIdleTask+0x1c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d9f9      	bls.n	80030cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80030d8:	f000 fcf2 	bl	8003ac0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80030dc:	e7f6      	b.n	80030cc <prvIdleTask+0x8>
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	200008dc 	.word	0x200008dc

080030e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e00c      	b.n	800310a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	0013      	movs	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <prvInitialiseTaskLists+0x68>)
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	0018      	movs	r0, r3
 8003100:	f7fe fe3a 	bl	8001d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b37      	cmp	r3, #55	; 0x37
 800310e:	d9ef      	bls.n	80030f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <prvInitialiseTaskLists+0x6c>)
 8003112:	0018      	movs	r0, r3
 8003114:	f7fe fe30 	bl	8001d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <prvInitialiseTaskLists+0x70>)
 800311a:	0018      	movs	r0, r3
 800311c:	f7fe fe2c 	bl	8001d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <prvInitialiseTaskLists+0x74>)
 8003122:	0018      	movs	r0, r3
 8003124:	f7fe fe28 	bl	8001d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <prvInitialiseTaskLists+0x78>)
 800312a:	0018      	movs	r0, r3
 800312c:	f7fe fe24 	bl	8001d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <prvInitialiseTaskLists+0x7c>)
 8003132:	0018      	movs	r0, r3
 8003134:	f7fe fe20 	bl	8001d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvInitialiseTaskLists+0x80>)
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <prvInitialiseTaskLists+0x6c>)
 800313c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <prvInitialiseTaskLists+0x84>)
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <prvInitialiseTaskLists+0x70>)
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200008dc 	.word	0x200008dc
 8003150:	20000d3c 	.word	0x20000d3c
 8003154:	20000d50 	.word	0x20000d50
 8003158:	20000d6c 	.word	0x20000d6c
 800315c:	20000d80 	.word	0x20000d80
 8003160:	20000d98 	.word	0x20000d98
 8003164:	20000d64 	.word	0x20000d64
 8003168:	20000d68 	.word	0x20000d68

0800316c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003172:	e01a      	b.n	80031aa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003174:	f000 fcb4 	bl	8003ae0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <prvCheckTasksWaitingTermination+0x50>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	0018      	movs	r0, r3
 8003186:	f7fe fe78 	bl	8001e7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <prvCheckTasksWaitingTermination+0x54>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <prvCheckTasksWaitingTermination+0x54>)
 8003192:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <prvCheckTasksWaitingTermination+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <prvCheckTasksWaitingTermination+0x58>)
 800319c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800319e:	f000 fcb1 	bl	8003b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f80f 	bl	80031c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <prvCheckTasksWaitingTermination+0x58>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e0      	bne.n	8003174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000d80 	.word	0x20000d80
 80031c0:	20000dac 	.word	0x20000dac
 80031c4:	20000d94 	.word	0x20000d94

080031c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3354      	adds	r3, #84	; 0x54
 80031d4:	0018      	movs	r0, r3
 80031d6:	f000 ff05 	bl	8003fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	22b9      	movs	r2, #185	; 0xb9
 80031de:	5c9b      	ldrb	r3, [r3, r2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fdb7 	bl	8003d5c <vPortFree>
				vPortFree( pxTCB );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 fdb3 	bl	8003d5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031f6:	e010      	b.n	800321a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	22b9      	movs	r2, #185	; 0xb9
 80031fc:	5c9b      	ldrb	r3, [r3, r2]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d104      	bne.n	800320c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 fda9 	bl	8003d5c <vPortFree>
	}
 800320a:	e006      	b.n	800321a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	22b9      	movs	r2, #185	; 0xb9
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d001      	beq.n	800321a <prvDeleteTCB+0x52>
 8003216:	b672      	cpsid	i
 8003218:	e7fe      	b.n	8003218 <prvDeleteTCB+0x50>
	}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <prvResetNextTaskUnblockTime+0x40>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <prvResetNextTaskUnblockTime+0x14>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <prvResetNextTaskUnblockTime+0x16>
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d004      	beq.n	8003248 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvResetNextTaskUnblockTime+0x44>)
 8003240:	2201      	movs	r2, #1
 8003242:	4252      	negs	r2, r2
 8003244:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003246:	e008      	b.n	800325a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <prvResetNextTaskUnblockTime+0x40>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <prvResetNextTaskUnblockTime+0x44>)
 8003258:	601a      	str	r2, [r3, #0]
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b002      	add	sp, #8
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000d64 	.word	0x20000d64
 8003268:	20000dcc 	.word	0x20000dcc

0800326c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <xTaskGetSchedulerState+0x30>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800327a:	2301      	movs	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	e008      	b.n	8003292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <xTaskGetSchedulerState+0x34>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003288:	2302      	movs	r3, #2
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e001      	b.n	8003292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003292:	687b      	ldr	r3, [r7, #4]
	}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000db8 	.word	0x20000db8
 80032a0:	20000dd4 	.word	0x20000dd4

080032a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <xTaskPriorityDisinherit+0xac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <xTaskPriorityDisinherit+0x24>
 80032c4:	b672      	cpsid	i
 80032c6:	e7fe      	b.n	80032c6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <xTaskPriorityDisinherit+0x30>
 80032d0:	b672      	cpsid	i
 80032d2:	e7fe      	b.n	80032d2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	1e5a      	subs	r2, r3, #1
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d02c      	beq.n	8003344 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d128      	bne.n	8003344 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3304      	adds	r3, #4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f7fe fdbf 	bl	8001e7a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	2238      	movs	r2, #56	; 0x38
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <xTaskPriorityDisinherit+0xb0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d903      	bls.n	8003324 <xTaskPriorityDisinherit+0x80>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <xTaskPriorityDisinherit+0xb0>)
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	0013      	movs	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	189b      	adds	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4a09      	ldr	r2, [pc, #36]	; (8003358 <xTaskPriorityDisinherit+0xb4>)
 8003332:	189a      	adds	r2, r3, r2
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3304      	adds	r3, #4
 8003338:	0019      	movs	r1, r3
 800333a:	0010      	movs	r0, r2
 800333c:	f7fe fd45 	bl	8001dca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003344:	68fb      	ldr	r3, [r7, #12]
	}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b004      	add	sp, #16
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	200008d8 	.word	0x200008d8
 8003354:	20000db4 	.word	0x20000db4
 8003358:	200008dc 	.word	0x200008dc

0800335c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003366:	4b21      	ldr	r3, [pc, #132]	; (80033ec <prvAddCurrentTaskToDelayedList+0x90>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	0018      	movs	r0, r3
 8003374:	f7fe fd81 	bl	8001e7a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3301      	adds	r3, #1
 800337c:	d10b      	bne.n	8003396 <prvAddCurrentTaskToDelayedList+0x3a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1d1a      	adds	r2, r3, #4
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f7fe fd1b 	bl	8001dca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003394:	e026      	b.n	80033e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	18d3      	adds	r3, r2, r3
 800339c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d209      	bcs.n	80033c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3304      	adds	r3, #4
 80033b8:	0019      	movs	r1, r3
 80033ba:	0010      	movs	r0, r2
 80033bc:	f7fe fd27 	bl	8001e0e <vListInsert>
}
 80033c0:	e010      	b.n	80033e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3304      	adds	r3, #4
 80033cc:	0019      	movs	r1, r3
 80033ce:	0010      	movs	r0, r2
 80033d0:	f7fe fd1d 	bl	8001e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d202      	bcs.n	80033e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b004      	add	sp, #16
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000db0 	.word	0x20000db0
 80033f0:	200008d8 	.word	0x200008d8
 80033f4:	20000d98 	.word	0x20000d98
 80033f8:	20000d68 	.word	0x20000d68
 80033fc:	20000d64 	.word	0x20000d64
 8003400:	20000dcc 	.word	0x20000dcc

08003404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800340e:	f000 fa87 	bl	8003920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <xTimerCreateTimerTask+0x6c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003422:	003a      	movs	r2, r7
 8003424:	1d39      	adds	r1, r7, #4
 8003426:	2308      	movs	r3, #8
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	0018      	movs	r0, r3
 800342c:	f7fe fc8c 	bl	8001d48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003430:	683c      	ldr	r4, [r7, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	490f      	ldr	r1, [pc, #60]	; (8003474 <xTimerCreateTimerTask+0x70>)
 8003438:	480f      	ldr	r0, [pc, #60]	; (8003478 <xTimerCreateTimerTask+0x74>)
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2302      	movs	r3, #2
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	0022      	movs	r2, r4
 8003446:	f7ff f968 	bl	800271a <xTaskCreateStatic>
 800344a:	0002      	movs	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <xTimerCreateTimerTask+0x78>)
 800344e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <xTimerCreateTimerTask+0x78>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8003458:	2301      	movs	r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <xTimerCreateTimerTask+0x62>
 8003462:	b672      	cpsid	i
 8003464:	e7fe      	b.n	8003464 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b005      	add	sp, #20
 800346e:	bd90      	pop	{r4, r7, pc}
 8003470:	20000e08 	.word	0x20000e08
 8003474:	080041b0 	.word	0x080041b0
 8003478:	08003585 	.word	0x08003585
 800347c:	20000e0c 	.word	0x20000e0c

08003480 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <xTimerGenericCommand+0x1c>
 8003498:	b672      	cpsid	i
 800349a:	e7fe      	b.n	800349a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800349c:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <xTimerGenericCommand+0x90>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d030      	beq.n	8003506 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034a4:	2414      	movs	r4, #20
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	dc19      	bgt.n	80034f2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034be:	f7ff fed5 	bl	800326c <xTaskGetSchedulerState>
 80034c2:	0003      	movs	r3, r0
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d109      	bne.n	80034dc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <xTimerGenericCommand+0x90>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ce:	1939      	adds	r1, r7, r4
 80034d0:	2300      	movs	r3, #0
 80034d2:	f7fe fdc0 	bl	8002056 <xQueueGenericSend>
 80034d6:	0003      	movs	r3, r0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	e014      	b.n	8003506 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <xTimerGenericCommand+0x90>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	2314      	movs	r3, #20
 80034e2:	18f9      	adds	r1, r7, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	f7fe fdb5 	bl	8002056 <xQueueGenericSend>
 80034ec:	0003      	movs	r3, r0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e009      	b.n	8003506 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034f2:	4b07      	ldr	r3, [pc, #28]	; (8003510 <xTimerGenericCommand+0x90>)
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	2314      	movs	r3, #20
 80034fa:	18f9      	adds	r1, r7, r3
 80034fc:	2300      	movs	r3, #0
 80034fe:	f7fe fe6e 	bl	80021de <xQueueGenericSendFromISR>
 8003502:	0003      	movs	r3, r0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b00b      	add	sp, #44	; 0x2c
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	20000e08 	.word	0x20000e08

08003514 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <prvProcessExpiredTimer+0x6c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3304      	adds	r3, #4
 800352c:	0018      	movs	r0, r3
 800352e:	f7fe fca4 	bl	8001e7a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d119      	bne.n	800356e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	18d1      	adds	r1, r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f8b6 	bl	80036b8 <prvInsertTimerInActiveList>
 800354c:	1e03      	subs	r3, r0, #0
 800354e:	d00e      	beq.n	800356e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	2100      	movs	r1, #0
 800355c:	f7ff ff90 	bl	8003480 <xTimerGenericCommand>
 8003560:	0003      	movs	r3, r0
 8003562:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <prvProcessExpiredTimer+0x5a>
 800356a:	b672      	cpsid	i
 800356c:	e7fe      	b.n	800356c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	0010      	movs	r0, r2
 8003576:	4798      	blx	r3
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b004      	add	sp, #16
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000e00 	.word	0x20000e00

08003584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800358c:	2308      	movs	r3, #8
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f851 	bl	8003638 <prvGetNextExpireTime>
 8003596:	0003      	movs	r3, r0
 8003598:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f803 	bl	80035ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035a6:	f000 f8c9 	bl	800373c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035aa:	e7ef      	b.n	800358c <prvTimerTask+0x8>

080035ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035b6:	f7ff fac3 	bl	8002b40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035ba:	2308      	movs	r3, #8
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f85a 	bl	8003678 <prvSampleTimeNow>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d129      	bne.n	8003622 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <prvProcessTimerOrBlockTask+0x42>
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d808      	bhi.n	80035ee <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80035dc:	f7ff fabc 	bl	8002b58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ff94 	bl	8003514 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80035ec:	e01b      	b.n	8003626 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d006      	beq.n	8003602 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <prvProcessTimerOrBlockTask+0x84>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	425a      	negs	r2, r3
 80035fc:	4153      	adcs	r3, r2
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <prvProcessTimerOrBlockTask+0x88>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	0019      	movs	r1, r3
 8003610:	f7ff f850 	bl	80026b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003614:	f7ff faa0 	bl	8002b58 <xTaskResumeAll>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d104      	bne.n	8003626 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800361c:	f000 fa50 	bl	8003ac0 <vPortYield>
}
 8003620:	e001      	b.n	8003626 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8003622:	f7ff fa99 	bl	8002b58 <xTaskResumeAll>
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	20000e04 	.word	0x20000e04
 8003634:	20000e08 	.word	0x20000e08

08003638 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <prvGetNextExpireTime+0x3c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	425a      	negs	r2, r3
 8003648:	4153      	adcs	r3, r2
 800364a:	b2db      	uxtb	r3, r3
 800364c:	001a      	movs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <prvGetNextExpireTime+0x3c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e001      	b.n	800366a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000e00 	.word	0x20000e00

08003678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003680:	f7ff faf6 	bl	8002c70 <xTaskGetTickCount>
 8003684:	0003      	movs	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <prvSampleTimeNow+0x3c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	429a      	cmp	r2, r3
 8003690:	d205      	bcs.n	800369e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8003692:	f000 f8eb 	bl	800386c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e002      	b.n	80036a4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <prvSampleTimeNow+0x3c>)
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b004      	add	sp, #16
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000e10 	.word	0x20000e10

080036b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d812      	bhi.n	8003704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d302      	bcc.n	80036f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e01b      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <prvInsertTimerInActiveList+0x7c>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	0019      	movs	r1, r3
 80036fc:	0010      	movs	r0, r2
 80036fe:	f7fe fb86 	bl	8001e0e <vListInsert>
 8003702:	e012      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d206      	bcs.n	800371a <prvInsertTimerInActiveList+0x62>
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e007      	b.n	800372a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <prvInsertTimerInActiveList+0x80>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3304      	adds	r3, #4
 8003722:	0019      	movs	r1, r3
 8003724:	0010      	movs	r0, r2
 8003726:	f7fe fb72 	bl	8001e0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800372a:	697b      	ldr	r3, [r7, #20]
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b006      	add	sp, #24
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000e04 	.word	0x20000e04
 8003738:	20000e00 	.word	0x20000e00

0800373c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b08d      	sub	sp, #52	; 0x34
 8003740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003742:	e07f      	b.n	8003844 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003744:	2208      	movs	r2, #8
 8003746:	18bb      	adds	r3, r7, r2
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da0f      	bge.n	800376e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800374e:	18bb      	adds	r3, r7, r2
 8003750:	3304      	adds	r3, #4
 8003752:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <prvProcessReceivedCommands+0x22>
 800375a:	b672      	cpsid	i
 800375c:	e7fe      	b.n	800375c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	6858      	ldr	r0, [r3, #4]
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0019      	movs	r1, r3
 800376c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800376e:	2208      	movs	r2, #8
 8003770:	18bb      	adds	r3, r7, r2
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db64      	blt.n	8003842 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003778:	18bb      	adds	r3, r7, r2
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	3304      	adds	r3, #4
 800378a:	0018      	movs	r0, r3
 800378c:	f7fe fb75 	bl	8001e7a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff ff70 	bl	8003678 <prvSampleTimeNow>
 8003798:	0003      	movs	r3, r0
 800379a:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800379c:	2308      	movs	r3, #8
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	d84e      	bhi.n	8003844 <prvProcessReceivedCommands+0x108>
 80037a6:	009a      	lsls	r2, r3, #2
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <prvProcessReceivedCommands+0x128>)
 80037aa:	18d3      	adds	r3, r2, r3
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037b0:	2408      	movs	r4, #8
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	18d1      	adds	r1, r2, r3
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	6a38      	ldr	r0, [r7, #32]
 80037c4:	f7ff ff78 	bl	80036b8 <prvInsertTimerInActiveList>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d03b      	beq.n	8003844 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	0010      	movs	r0, r2
 80037d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d132      	bne.n	8003844 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	18d2      	adds	r2, r2, r3
 80037e8:	6a38      	ldr	r0, [r7, #32]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2300      	movs	r3, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	f7ff fe45 	bl	8003480 <xTimerGenericCommand>
 80037f6:	0003      	movs	r3, r0
 80037f8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d121      	bne.n	8003844 <prvProcessReceivedCommands+0x108>
 8003800:	b672      	cpsid	i
 8003802:	e7fe      	b.n	8003802 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003804:	2308      	movs	r3, #8
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <prvProcessReceivedCommands+0xde>
 8003816:	b672      	cpsid	i
 8003818:	e7fe      	b.n	8003818 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	6a38      	ldr	r0, [r7, #32]
 8003828:	f7ff ff46 	bl	80036b8 <prvInsertTimerInActiveList>
					break;
 800382c:	e00a      	b.n	8003844 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	222c      	movs	r2, #44	; 0x2c
 8003832:	5c9b      	ldrb	r3, [r3, r2]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fa8e 	bl	8003d5c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003840:	e000      	b.n	8003844 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003842:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003844:	4b08      	ldr	r3, [pc, #32]	; (8003868 <prvProcessReceivedCommands+0x12c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2208      	movs	r2, #8
 800384a:	18b9      	adds	r1, r7, r2
 800384c:	2200      	movs	r2, #0
 800384e:	0018      	movs	r0, r3
 8003850:	f7fe fd36 	bl	80022c0 <xQueueReceive>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d000      	beq.n	800385a <prvProcessReceivedCommands+0x11e>
 8003858:	e774      	b.n	8003744 <prvProcessReceivedCommands+0x8>
	}
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b00b      	add	sp, #44	; 0x2c
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	080041fc 	.word	0x080041fc
 8003868:	20000e08 	.word	0x20000e08

0800386c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003872:	e03e      	b.n	80038f2 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <prvSwitchTimerLists+0xac>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <prvSwitchTimerLists+0xac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3304      	adds	r3, #4
 800388c:	0018      	movs	r0, r3
 800388e:	f7fe faf4 	bl	8001e7a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	0010      	movs	r0, r2
 800389a:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d126      	bne.n	80038f2 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d90e      	bls.n	80038d4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <prvSwitchTimerLists+0xac>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3304      	adds	r3, #4
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f7fe fa9e 	bl	8001e0e <vListInsert>
 80038d2:	e00e      	b.n	80038f2 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	2300      	movs	r3, #0
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2300      	movs	r3, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	f7ff fdce 	bl	8003480 <xTimerGenericCommand>
 80038e4:	0003      	movs	r3, r0
 80038e6:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <prvSwitchTimerLists+0x86>
 80038ee:	b672      	cpsid	i
 80038f0:	e7fe      	b.n	80038f0 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038f2:	4b09      	ldr	r3, [pc, #36]	; (8003918 <prvSwitchTimerLists+0xac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1bb      	bne.n	8003874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvSwitchTimerLists+0xac>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <prvSwitchTimerLists+0xb0>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <prvSwitchTimerLists+0xac>)
 8003908:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <prvSwitchTimerLists+0xb0>)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b006      	add	sp, #24
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000e00 	.word	0x20000e00
 800391c:	20000e04 	.word	0x20000e04

08003920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003926:	f000 f8db 	bl	8003ae0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <prvCheckForValidListAndQueue+0x64>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d123      	bne.n	800397a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <prvCheckForValidListAndQueue+0x68>)
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe fa1f 	bl	8001d78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <prvCheckForValidListAndQueue+0x6c>)
 800393c:	0018      	movs	r0, r3
 800393e:	f7fe fa1b 	bl	8001d78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <prvCheckForValidListAndQueue+0x70>)
 8003944:	4a10      	ldr	r2, [pc, #64]	; (8003988 <prvCheckForValidListAndQueue+0x68>)
 8003946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <prvCheckForValidListAndQueue+0x74>)
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <prvCheckForValidListAndQueue+0x6c>)
 800394c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <prvCheckForValidListAndQueue+0x78>)
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <prvCheckForValidListAndQueue+0x7c>)
 8003952:	2100      	movs	r1, #0
 8003954:	9100      	str	r1, [sp, #0]
 8003956:	2110      	movs	r1, #16
 8003958:	200a      	movs	r0, #10
 800395a:	f7fe fb0a 	bl	8001f72 <xQueueGenericCreateStatic>
 800395e:	0002      	movs	r2, r0
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <prvCheckForValidListAndQueue+0x64>)
 8003962:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <prvCheckForValidListAndQueue+0x64>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <prvCheckForValidListAndQueue+0x64>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <prvCheckForValidListAndQueue+0x80>)
 8003972:	0011      	movs	r1, r2
 8003974:	0018      	movs	r0, r3
 8003976:	f7fe fe75 	bl	8002664 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397a:	f000 f8c3 	bl	8003b04 <vPortExitCritical>
}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000e08 	.word	0x20000e08
 8003988:	20000dd8 	.word	0x20000dd8
 800398c:	20000dec 	.word	0x20000dec
 8003990:	20000e00 	.word	0x20000e00
 8003994:	20000e04 	.word	0x20000e04
 8003998:	20000eb4 	.word	0x20000eb4
 800399c:	20000e14 	.word	0x20000e14
 80039a0:	080041b8 	.word	0x080041b8

080039a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b04      	subs	r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	0452      	lsls	r2, r2, #17
 80039bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3b04      	subs	r3, #4
 80039c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	3b04      	subs	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <pxPortInitialiseStack+0x50>)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3b14      	subs	r3, #20
 80039da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b20      	subs	r3, #32
 80039e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039e8:	68fb      	ldr	r3, [r7, #12]
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b004      	add	sp, #16
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	080039f9 	.word	0x080039f9

080039f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <prvTaskExitError+0x2c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	d001      	beq.n	8003a0e <prvTaskExitError+0x16>
 8003a0a:	b672      	cpsid	i
 8003a0c:	e7fe      	b.n	8003a0c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003a0e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0fc      	beq.n	8003a12 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	2000000c 	.word	0x2000000c

08003a28 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <pxCurrentTCBConst2>)
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	3020      	adds	r0, #32
 8003a48:	f380 8809 	msr	PSP, r0
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f380 8814 	msr	CONTROL, r0
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003a58:	46ae      	mov	lr, r5
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	bc04      	pop	{r2}
 8003a5e:	b662      	cpsie	i
 8003a60:	4718      	bx	r3
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46c0      	nop			; (mov r8, r8)

08003a70 <pxCurrentTCBConst2>:
 8003a70:	200008d8 	.word	0x200008d8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46c0      	nop			; (mov r8, r8)

08003a78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <xPortStartScheduler+0x40>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <xPortStartScheduler+0x40>)
 8003a82:	21ff      	movs	r1, #255	; 0xff
 8003a84:	0409      	lsls	r1, r1, #16
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <xPortStartScheduler+0x40>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <xPortStartScheduler+0x40>)
 8003a90:	21ff      	movs	r1, #255	; 0xff
 8003a92:	0609      	lsls	r1, r1, #24
 8003a94:	430a      	orrs	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003a98:	f000 f898 	bl	8003bcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <xPortStartScheduler+0x44>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003aa2:	f7ff ffcd 	bl	8003a40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003aa6:	f7ff f9a5 	bl	8002df4 <vTaskSwitchContext>
	prvTaskExitError();
 8003aaa:	f7ff ffa5 	bl	80039f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	e000ed20 	.word	0xe000ed20
 8003abc:	2000000c 	.word	0x2000000c

08003ac0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <vPortYield+0x1c>)
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	0552      	lsls	r2, r2, #21
 8003aca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003acc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003ad0:	f3bf 8f6f 	isb	sy
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003ae4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <vPortEnterCritical+0x20>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <vPortEnterCritical+0x20>)
 8003aee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003af0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003af4:	f3bf 8f6f 	isb	sy
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <vPortExitCritical+0x2c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <vPortExitCritical+0x10>
 8003b10:	b672      	cpsid	i
 8003b12:	e7fe      	b.n	8003b12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <vPortExitCritical+0x2c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <vPortExitCritical+0x2c>)
 8003b1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <vPortExitCritical+0x2c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d100      	bne.n	8003b28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003b26:	b662      	cpsie	i
    }
}
 8003b28:	46c0      	nop			; (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	2000000c 	.word	0x2000000c

08003b34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003b34:	f3ef 8010 	mrs	r0, PRIMASK
 8003b38:	b672      	cpsid	i
 8003b3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	0018      	movs	r0, r3

08003b40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003b40:	f380 8810 	msr	PRIMASK, r0
 8003b44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003b46:	46c0      	nop			; (mov r8, r8)
	...

08003b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b50:	f3ef 8009 	mrs	r0, PSP
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <pxCurrentTCBConst>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	3820      	subs	r0, #32
 8003b5a:	6010      	str	r0, [r2, #0]
 8003b5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003b5e:	4644      	mov	r4, r8
 8003b60:	464d      	mov	r5, r9
 8003b62:	4656      	mov	r6, sl
 8003b64:	465f      	mov	r7, fp
 8003b66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003b68:	b508      	push	{r3, lr}
 8003b6a:	b672      	cpsid	i
 8003b6c:	f7ff f942 	bl	8002df4 <vTaskSwitchContext>
 8003b70:	b662      	cpsie	i
 8003b72:	bc0c      	pop	{r2, r3}
 8003b74:	6811      	ldr	r1, [r2, #0]
 8003b76:	6808      	ldr	r0, [r1, #0]
 8003b78:	3010      	adds	r0, #16
 8003b7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003b7c:	46a0      	mov	r8, r4
 8003b7e:	46a9      	mov	r9, r5
 8003b80:	46b2      	mov	sl, r6
 8003b82:	46bb      	mov	fp, r7
 8003b84:	f380 8809 	msr	PSP, r0
 8003b88:	3820      	subs	r0, #32
 8003b8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003b8c:	4718      	bx	r3
 8003b8e:	46c0      	nop			; (mov r8, r8)

08003b90 <pxCurrentTCBConst>:
 8003b90:	200008d8 	.word	0x200008d8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46c0      	nop			; (mov r8, r8)

08003b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b9e:	f7ff ffc9 	bl	8003b34 <ulSetInterruptMaskFromISR>
 8003ba2:	0003      	movs	r3, r0
 8003ba4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ba6:	f7ff f871 	bl	8002c8c <xTaskIncrementTick>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d003      	beq.n	8003bb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <xPortSysTickHandler+0x30>)
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	0552      	lsls	r2, r2, #21
 8003bb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7ff ffc1 	bl	8003b40 <vClearInterruptMaskFromISR>
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvSetupTimerInterrupt+0x34>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <prvSetupTimerInterrupt+0x38>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <prvSetupTimerInterrupt+0x3c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	22fa      	movs	r2, #250	; 0xfa
 8003be2:	0091      	lsls	r1, r2, #2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc fa8f 	bl	8000108 <__udivsi3>
 8003bea:	0003      	movs	r3, r0
 8003bec:	001a      	movs	r2, r3
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <prvSetupTimerInterrupt+0x40>)
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003bf4:	4b02      	ldr	r3, [pc, #8]	; (8003c00 <prvSetupTimerInterrupt+0x34>)
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	e000e010 	.word	0xe000e010
 8003c04:	e000e018 	.word	0xe000e018
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	e000e014 	.word	0xe000e014

08003c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003c1c:	f7fe ff90 	bl	8002b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c20:	4b49      	ldr	r3, [pc, #292]	; (8003d48 <pvPortMalloc+0x138>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c28:	f000 f8e0 	bl	8003dec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c2c:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <pvPortMalloc+0x13c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4013      	ands	r3, r2
 8003c34:	d000      	beq.n	8003c38 <pvPortMalloc+0x28>
 8003c36:	e079      	b.n	8003d2c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d012      	beq.n	8003c64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003c3e:	2208      	movs	r2, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2207      	movs	r2, #7
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d00a      	beq.n	8003c64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2207      	movs	r2, #7
 8003c52:	4393      	bics	r3, r2
 8003c54:	3308      	adds	r3, #8
 8003c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d001      	beq.n	8003c64 <pvPortMalloc+0x54>
 8003c60:	b672      	cpsid	i
 8003c62:	e7fe      	b.n	8003c62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d060      	beq.n	8003d2c <pvPortMalloc+0x11c>
 8003c6a:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <pvPortMalloc+0x140>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d85b      	bhi.n	8003d2c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <pvPortMalloc+0x144>)
 8003c76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <pvPortMalloc+0x144>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c7e:	e004      	b.n	8003c8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d903      	bls.n	8003c9c <pvPortMalloc+0x8c>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f1      	bne.n	8003c80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c9c:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <pvPortMalloc+0x138>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d042      	beq.n	8003d2c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2208      	movs	r2, #8
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d916      	bls.n	8003cf6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d001      	beq.n	8003cdc <pvPortMalloc+0xcc>
 8003cd8:	b672      	cpsid	i
 8003cda:	e7fe      	b.n	8003cda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f000 f8db 	bl	8003eac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	; (8003d50 <pvPortMalloc+0x140>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <pvPortMalloc+0x140>)
 8003d02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <pvPortMalloc+0x140>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b13      	ldr	r3, [pc, #76]	; (8003d58 <pvPortMalloc+0x148>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d203      	bcs.n	8003d18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <pvPortMalloc+0x140>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <pvPortMalloc+0x148>)
 8003d16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <pvPortMalloc+0x13c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d2c:	f7fe ff14 	bl	8002b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2207      	movs	r2, #7
 8003d34:	4013      	ands	r3, r2
 8003d36:	d001      	beq.n	8003d3c <pvPortMalloc+0x12c>
 8003d38:	b672      	cpsid	i
 8003d3a:	e7fe      	b.n	8003d3a <pvPortMalloc+0x12a>
	return pvReturn;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20001b0c 	.word	0x20001b0c
 8003d4c:	20001b18 	.word	0x20001b18
 8003d50:	20001b10 	.word	0x20001b10
 8003d54:	20001b04 	.word	0x20001b04
 8003d58:	20001b14 	.word	0x20001b14

08003d5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d035      	beq.n	8003dda <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d6e:	2308      	movs	r3, #8
 8003d70:	425b      	negs	r3, r3
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <vPortFree+0x88>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4013      	ands	r3, r2
 8003d86:	d101      	bne.n	8003d8c <vPortFree+0x30>
 8003d88:	b672      	cpsid	i
 8003d8a:	e7fe      	b.n	8003d8a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <vPortFree+0x3c>
 8003d94:	b672      	cpsid	i
 8003d96:	e7fe      	b.n	8003d96 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <vPortFree+0x88>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4013      	ands	r3, r2
 8003da2:	d01a      	beq.n	8003dda <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d116      	bne.n	8003dda <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <vPortFree+0x88>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	401a      	ands	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dbc:	f7fe fec0 	bl	8002b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <vPortFree+0x8c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	18d2      	adds	r2, r2, r3
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <vPortFree+0x8c>)
 8003dcc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 f86b 	bl	8003eac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003dd6:	f7fe febf 	bl	8002b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	20001b18 	.word	0x20001b18
 8003de8:	20001b10 	.word	0x20001b10

08003dec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003df2:	23c0      	movs	r3, #192	; 0xc0
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <prvHeapInit+0xa8>)
 8003dfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	d00c      	beq.n	8003e1e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3307      	adds	r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	4393      	bics	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <prvHeapInit+0xa8>)
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e22:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <prvHeapInit+0xac>)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <prvHeapInit+0xac>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e36:	2208      	movs	r2, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2207      	movs	r2, #7
 8003e42:	4393      	bics	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <prvHeapInit+0xb0>)
 8003e4a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <prvHeapInit+0xb0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2200      	movs	r2, #0
 8003e52:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <prvHeapInit+0xb0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	1ad2      	subs	r2, r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <prvHeapInit+0xb0>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvHeapInit+0xb4>)
 8003e78:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <prvHeapInit+0xb8>)
 8003e80:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <prvHeapInit+0xbc>)
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	0612      	lsls	r2, r2, #24
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	20000f04 	.word	0x20000f04
 8003e98:	20001b04 	.word	0x20001b04
 8003e9c:	20001b0c 	.word	0x20001b0c
 8003ea0:	20001b14 	.word	0x20001b14
 8003ea4:	20001b10 	.word	0x20001b10
 8003ea8:	20001b18 	.word	0x20001b18

08003eac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <prvInsertBlockIntoFreeList+0xa8>)
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e002      	b.n	8003ec0 <prvInsertBlockIntoFreeList+0x14>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d8f7      	bhi.n	8003eba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d108      	bne.n	8003eee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	18d2      	adds	r2, r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	18d2      	adds	r2, r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d118      	bne.n	8003f34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <prvInsertBlockIntoFreeList+0xac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d00d      	beq.n	8003f2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	18d2      	adds	r2, r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e008      	b.n	8003f3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <prvInsertBlockIntoFreeList+0xac>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e003      	b.n	8003f3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d002      	beq.n	8003f4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	20001b04 	.word	0x20001b04
 8003f58:	20001b0c 	.word	0x20001b0c

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	2600      	movs	r6, #0
 8003f60:	4d0c      	ldr	r5, [pc, #48]	; (8003f94 <__libc_init_array+0x38>)
 8003f62:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f64:	1b64      	subs	r4, r4, r5
 8003f66:	10a4      	asrs	r4, r4, #2
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	2600      	movs	r6, #0
 8003f6e:	f000 f8f9 	bl	8004164 <_init>
 8003f72:	4d0a      	ldr	r5, [pc, #40]	; (8003f9c <__libc_init_array+0x40>)
 8003f74:	4c0a      	ldr	r4, [pc, #40]	; (8003fa0 <__libc_init_array+0x44>)
 8003f76:	1b64      	subs	r4, r4, r5
 8003f78:	10a4      	asrs	r4, r4, #2
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	00b3      	lsls	r3, r6, #2
 8003f82:	58eb      	ldr	r3, [r5, r3]
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	00b3      	lsls	r3, r6, #2
 8003f8c:	58eb      	ldr	r3, [r5, r3]
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	08004284 	.word	0x08004284
 8003f98:	08004284 	.word	0x08004284
 8003f9c:	08004284 	.word	0x08004284
 8003fa0:	08004288 	.word	0x08004288

08003fa4 <__retarget_lock_acquire_recursive>:
 8003fa4:	4770      	bx	lr

08003fa6 <__retarget_lock_release_recursive>:
 8003fa6:	4770      	bx	lr

08003fa8 <memcpy>:
 8003fa8:	2300      	movs	r3, #0
 8003faa:	b510      	push	{r4, lr}
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d100      	bne.n	8003fb2 <memcpy+0xa>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	5ccc      	ldrb	r4, [r1, r3]
 8003fb4:	54c4      	strb	r4, [r0, r3]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	e7f8      	b.n	8003fac <memcpy+0x4>

08003fba <memset>:
 8003fba:	0003      	movs	r3, r0
 8003fbc:	1882      	adds	r2, r0, r2
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d100      	bne.n	8003fc4 <memset+0xa>
 8003fc2:	4770      	bx	lr
 8003fc4:	7019      	strb	r1, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	e7f9      	b.n	8003fbe <memset+0x4>

08003fca <cleanup_glue>:
 8003fca:	b570      	push	{r4, r5, r6, lr}
 8003fcc:	000d      	movs	r5, r1
 8003fce:	6809      	ldr	r1, [r1, #0]
 8003fd0:	0004      	movs	r4, r0
 8003fd2:	2900      	cmp	r1, #0
 8003fd4:	d001      	beq.n	8003fda <cleanup_glue+0x10>
 8003fd6:	f7ff fff8 	bl	8003fca <cleanup_glue>
 8003fda:	0029      	movs	r1, r5
 8003fdc:	0020      	movs	r0, r4
 8003fde:	f000 f877 	bl	80040d0 <_free_r>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}

08003fe4 <_reclaim_reent>:
 8003fe4:	4b31      	ldr	r3, [pc, #196]	; (80040ac <_reclaim_reent+0xc8>)
 8003fe6:	b570      	push	{r4, r5, r6, lr}
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0004      	movs	r4, r0
 8003fec:	4283      	cmp	r3, r0
 8003fee:	d049      	beq.n	8004084 <_reclaim_reent+0xa0>
 8003ff0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <_reclaim_reent+0x28>
 8003ff6:	2500      	movs	r5, #0
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	42ab      	cmp	r3, r5
 8003ffc:	d147      	bne.n	800408e <_reclaim_reent+0xaa>
 8003ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	2900      	cmp	r1, #0
 8004004:	d002      	beq.n	800400c <_reclaim_reent+0x28>
 8004006:	0020      	movs	r0, r4
 8004008:	f000 f862 	bl	80040d0 <_free_r>
 800400c:	6961      	ldr	r1, [r4, #20]
 800400e:	2900      	cmp	r1, #0
 8004010:	d002      	beq.n	8004018 <_reclaim_reent+0x34>
 8004012:	0020      	movs	r0, r4
 8004014:	f000 f85c 	bl	80040d0 <_free_r>
 8004018:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800401a:	2900      	cmp	r1, #0
 800401c:	d002      	beq.n	8004024 <_reclaim_reent+0x40>
 800401e:	0020      	movs	r0, r4
 8004020:	f000 f856 	bl	80040d0 <_free_r>
 8004024:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004026:	2900      	cmp	r1, #0
 8004028:	d002      	beq.n	8004030 <_reclaim_reent+0x4c>
 800402a:	0020      	movs	r0, r4
 800402c:	f000 f850 	bl	80040d0 <_free_r>
 8004030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004032:	2900      	cmp	r1, #0
 8004034:	d002      	beq.n	800403c <_reclaim_reent+0x58>
 8004036:	0020      	movs	r0, r4
 8004038:	f000 f84a 	bl	80040d0 <_free_r>
 800403c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800403e:	2900      	cmp	r1, #0
 8004040:	d002      	beq.n	8004048 <_reclaim_reent+0x64>
 8004042:	0020      	movs	r0, r4
 8004044:	f000 f844 	bl	80040d0 <_free_r>
 8004048:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800404a:	2900      	cmp	r1, #0
 800404c:	d002      	beq.n	8004054 <_reclaim_reent+0x70>
 800404e:	0020      	movs	r0, r4
 8004050:	f000 f83e 	bl	80040d0 <_free_r>
 8004054:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004056:	2900      	cmp	r1, #0
 8004058:	d002      	beq.n	8004060 <_reclaim_reent+0x7c>
 800405a:	0020      	movs	r0, r4
 800405c:	f000 f838 	bl	80040d0 <_free_r>
 8004060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004062:	2900      	cmp	r1, #0
 8004064:	d002      	beq.n	800406c <_reclaim_reent+0x88>
 8004066:	0020      	movs	r0, r4
 8004068:	f000 f832 	bl	80040d0 <_free_r>
 800406c:	69a3      	ldr	r3, [r4, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <_reclaim_reent+0xa0>
 8004072:	0020      	movs	r0, r4
 8004074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004076:	4798      	blx	r3
 8004078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800407a:	2900      	cmp	r1, #0
 800407c:	d002      	beq.n	8004084 <_reclaim_reent+0xa0>
 800407e:	0020      	movs	r0, r4
 8004080:	f7ff ffa3 	bl	8003fca <cleanup_glue>
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	5949      	ldr	r1, [r1, r5]
 8004088:	2900      	cmp	r1, #0
 800408a:	d108      	bne.n	800409e <_reclaim_reent+0xba>
 800408c:	3504      	adds	r5, #4
 800408e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	2d80      	cmp	r5, #128	; 0x80
 8004094:	d1f7      	bne.n	8004086 <_reclaim_reent+0xa2>
 8004096:	0020      	movs	r0, r4
 8004098:	f000 f81a 	bl	80040d0 <_free_r>
 800409c:	e7af      	b.n	8003ffe <_reclaim_reent+0x1a>
 800409e:	680e      	ldr	r6, [r1, #0]
 80040a0:	0020      	movs	r0, r4
 80040a2:	f000 f815 	bl	80040d0 <_free_r>
 80040a6:	0031      	movs	r1, r6
 80040a8:	e7ee      	b.n	8004088 <_reclaim_reent+0xa4>
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000010 	.word	0x20000010

080040b0 <__malloc_lock>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4802      	ldr	r0, [pc, #8]	; (80040bc <__malloc_lock+0xc>)
 80040b4:	f7ff ff76 	bl	8003fa4 <__retarget_lock_acquire_recursive>
 80040b8:	bd10      	pop	{r4, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	20001b1c 	.word	0x20001b1c

080040c0 <__malloc_unlock>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4802      	ldr	r0, [pc, #8]	; (80040cc <__malloc_unlock+0xc>)
 80040c4:	f7ff ff6f 	bl	8003fa6 <__retarget_lock_release_recursive>
 80040c8:	bd10      	pop	{r4, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	20001b1c 	.word	0x20001b1c

080040d0 <_free_r>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	0005      	movs	r5, r0
 80040d4:	2900      	cmp	r1, #0
 80040d6:	d010      	beq.n	80040fa <_free_r+0x2a>
 80040d8:	1f0c      	subs	r4, r1, #4
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	da00      	bge.n	80040e2 <_free_r+0x12>
 80040e0:	18e4      	adds	r4, r4, r3
 80040e2:	0028      	movs	r0, r5
 80040e4:	f7ff ffe4 	bl	80040b0 <__malloc_lock>
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <_free_r+0x90>)
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <_free_r+0x2c>
 80040f0:	6063      	str	r3, [r4, #4]
 80040f2:	6014      	str	r4, [r2, #0]
 80040f4:	0028      	movs	r0, r5
 80040f6:	f7ff ffe3 	bl	80040c0 <__malloc_unlock>
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x42>
 8004100:	6821      	ldr	r1, [r4, #0]
 8004102:	1860      	adds	r0, r4, r1
 8004104:	4283      	cmp	r3, r0
 8004106:	d1f3      	bne.n	80040f0 <_free_r+0x20>
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	1841      	adds	r1, r0, r1
 800410e:	6021      	str	r1, [r4, #0]
 8004110:	e7ee      	b.n	80040f0 <_free_r+0x20>
 8004112:	001a      	movs	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <_free_r+0x4e>
 800411a:	42a3      	cmp	r3, r4
 800411c:	d9f9      	bls.n	8004112 <_free_r+0x42>
 800411e:	6811      	ldr	r1, [r2, #0]
 8004120:	1850      	adds	r0, r2, r1
 8004122:	42a0      	cmp	r0, r4
 8004124:	d10b      	bne.n	800413e <_free_r+0x6e>
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	1809      	adds	r1, r1, r0
 800412a:	1850      	adds	r0, r2, r1
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	4283      	cmp	r3, r0
 8004130:	d1e0      	bne.n	80040f4 <_free_r+0x24>
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	1841      	adds	r1, r0, r1
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	6053      	str	r3, [r2, #4]
 800413c:	e7da      	b.n	80040f4 <_free_r+0x24>
 800413e:	42a0      	cmp	r0, r4
 8004140:	d902      	bls.n	8004148 <_free_r+0x78>
 8004142:	230c      	movs	r3, #12
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	e7d5      	b.n	80040f4 <_free_r+0x24>
 8004148:	6821      	ldr	r1, [r4, #0]
 800414a:	1860      	adds	r0, r4, r1
 800414c:	4283      	cmp	r3, r0
 800414e:	d103      	bne.n	8004158 <_free_r+0x88>
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	1841      	adds	r1, r0, r1
 8004156:	6021      	str	r1, [r4, #0]
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	6054      	str	r4, [r2, #4]
 800415c:	e7ca      	b.n	80040f4 <_free_r+0x24>
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20001b20 	.word	0x20001b20

08004164 <_init>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr

08004170 <_fini>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr
