
S2-MARTINEZMORA-CARLOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005bf8  08005bf8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bf8  08005bf8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00015bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  20000078  08005c78  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  08005c78  00021bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016868  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d14  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00039620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002992  00000000  00000000  0003ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f2a  00000000  00000000  0003e3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071907  00000000  00000000  000522f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004670  00000000  00000000  000c3c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ab4 	.word	0x08005ab4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005ab4 	.word	0x08005ab4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd62 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82a 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f95a 	bl	80004e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f928 	bl	8000484 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000234:	f000 f870 	bl	8000318 <MX_TIM1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000238:	f003 f8ec 	bl	8003414 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LED */
  LEDHandle = osThreadNew(blink, NULL, &LED_attributes);
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <main+0x48>)
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0x4c>)
 8000240:	2100      	movs	r1, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f003 f940 	bl	80034c8 <osThreadNew>
 8000248:	0002      	movs	r2, r0
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <main+0x50>)
 800024c:	601a      	str	r2, [r3, #0]

  /* creation of BUTTON */
  BUTTONHandle = osThreadNew(check_status, NULL, &BUTTON_attributes);
 800024e:	4a09      	ldr	r2, [pc, #36]	; (8000274 <main+0x54>)
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x58>)
 8000252:	2100      	movs	r1, #0
 8000254:	0018      	movs	r0, r3
 8000256:	f003 f937 	bl	80034c8 <osThreadNew>
 800025a:	0002      	movs	r2, r0
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <main+0x5c>)
 800025e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f003 f904 	bl	800346c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x44>
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	08005b10 	.word	0x08005b10
 800026c:	08000659 	.word	0x08000659
 8000270:	20000160 	.word	0x20000160
 8000274:	08005b34 	.word	0x08005b34
 8000278:	08000921 	.word	0x08000921
 800027c:	20000164 	.word	0x20000164

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b091      	sub	sp, #68	; 0x44
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	2410      	movs	r4, #16
 8000288:	193b      	adds	r3, r7, r4
 800028a:	0018      	movs	r0, r3
 800028c:	2330      	movs	r3, #48	; 0x30
 800028e:	001a      	movs	r2, r3
 8000290:	2100      	movs	r1, #0
 8000292:	f005 fb3a 	bl	800590a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000296:	003b      	movs	r3, r7
 8000298:	0018      	movs	r0, r3
 800029a:	2310      	movs	r3, #16
 800029c:	001a      	movs	r2, r3
 800029e:	2100      	movs	r1, #0
 80002a0:	f005 fb33 	bl	800590a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	0021      	movs	r1, r4
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2201      	movs	r2, #1
 80002b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2210      	movs	r2, #16
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2202      	movs	r2, #2
 80002bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0212      	lsls	r2, r2, #8
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2280      	movs	r2, #128	; 0x80
 80002ca:	0352      	lsls	r2, r2, #13
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 ffac 	bl	8001234 <HAL_RCC_OscConfig>
 80002dc:	1e03      	subs	r3, r0, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002e0:	f000 fb62 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	003b      	movs	r3, r7
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2202      	movs	r2, #2
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	003b      	movs	r3, r7
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 fab5 	bl	8001870 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800030a:	f000 fb4d 	bl	80009a8 <Error_Handler>
  }
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	b011      	add	sp, #68	; 0x44
 8000314:	bd90      	pop	{r4, r7, pc}
	...

08000318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b096      	sub	sp, #88	; 0x58
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	2348      	movs	r3, #72	; 0x48
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	0018      	movs	r0, r3
 8000324:	2310      	movs	r3, #16
 8000326:	001a      	movs	r2, r3
 8000328:	2100      	movs	r1, #0
 800032a:	f005 faee 	bl	800590a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032e:	2340      	movs	r3, #64	; 0x40
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	0018      	movs	r0, r3
 8000334:	2308      	movs	r3, #8
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f005 fae6 	bl	800590a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	2324      	movs	r3, #36	; 0x24
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	0018      	movs	r0, r3
 8000344:	231c      	movs	r3, #28
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f005 fade 	bl	800590a <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	0018      	movs	r0, r3
 8000352:	2320      	movs	r3, #32
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f005 fad7 	bl	800590a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035c:	4b47      	ldr	r3, [pc, #284]	; (800047c <MX_TIM1_Init+0x164>)
 800035e:	4a48      	ldr	r2, [pc, #288]	; (8000480 <MX_TIM1_Init+0x168>)
 8000360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 480;
 8000362:	4b46      	ldr	r3, [pc, #280]	; (800047c <MX_TIM1_Init+0x164>)
 8000364:	22f0      	movs	r2, #240	; 0xf0
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b44      	ldr	r3, [pc, #272]	; (800047c <MX_TIM1_Init+0x164>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000370:	4b42      	ldr	r3, [pc, #264]	; (800047c <MX_TIM1_Init+0x164>)
 8000372:	22fa      	movs	r2, #250	; 0xfa
 8000374:	00d2      	lsls	r2, r2, #3
 8000376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b40      	ldr	r3, [pc, #256]	; (800047c <MX_TIM1_Init+0x164>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800037e:	4b3f      	ldr	r3, [pc, #252]	; (800047c <MX_TIM1_Init+0x164>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <MX_TIM1_Init+0x164>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038a:	4b3c      	ldr	r3, [pc, #240]	; (800047c <MX_TIM1_Init+0x164>)
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fbed 	bl	8001b6c <HAL_TIM_Base_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000396:	f000 fb07 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	2148      	movs	r1, #72	; 0x48
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	0152      	lsls	r2, r2, #5
 80003a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a4:	187a      	adds	r2, r7, r1
 80003a6:	4b35      	ldr	r3, [pc, #212]	; (800047c <MX_TIM1_Init+0x164>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 ffdc 	bl	8002368 <HAL_TIM_ConfigClockSource>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80003b4:	f000 faf8 	bl	80009a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b8:	4b30      	ldr	r3, [pc, #192]	; (800047c <MX_TIM1_Init+0x164>)
 80003ba:	0018      	movs	r0, r3
 80003bc:	f001 fc72 	bl	8001ca4 <HAL_TIM_PWM_Init>
 80003c0:	1e03      	subs	r3, r0, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80003c4:	f000 faf0 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d6:	187a      	adds	r2, r7, r1
 80003d8:	4b28      	ldr	r3, [pc, #160]	; (800047c <MX_TIM1_Init+0x164>)
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f002 fbe7 	bl	8002bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80003e6:	f000 fadf 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ea:	2124      	movs	r1, #36	; 0x24
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2260      	movs	r2, #96	; 0x60
 80003f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000416:	1879      	adds	r1, r7, r1
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_TIM1_Init+0x164>)
 800041a:	2200      	movs	r2, #0
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fedd 	bl	80021dc <HAL_TIM_PWM_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000426:	f000 fabf 	bl	80009a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	0192      	lsls	r2, r2, #6
 800044e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000456:	1d3a      	adds	r2, r7, #4
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_TIM1_Init+0x164>)
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f002 fbff 	bl	8002c60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 8000466:	f000 fa9f 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <MX_TIM1_Init+0x164>)
 800046c:	0018      	movs	r0, r3
 800046e:	f000 faeb 	bl	8000a48 <HAL_TIM_MspPostInit>

}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b016      	add	sp, #88	; 0x58
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000094 	.word	0x20000094
 8000480:	40012c00 	.word	0x40012c00

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <MX_USART2_UART_Init+0x58>)
 800048a:	4a15      	ldr	r2, [pc, #84]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800048e:	4b13      	ldr	r3, [pc, #76]	; (80004dc <MX_USART2_UART_Init+0x58>)
 8000490:	2296      	movs	r2, #150	; 0x96
 8000492:	0212      	lsls	r2, r2, #8
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_USART2_UART_Init+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MX_USART2_UART_Init+0x58>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 fc37 	bl	8002d3c <HAL_UART_Init>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004d2:	f000 fa69 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000dc 	.word	0x200000dc
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	240c      	movs	r4, #12
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f005 fa08 	bl	800590a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <MX_GPIO_Init+0xcc>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0309      	lsls	r1, r1, #12
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MX_GPIO_Init+0xcc>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	031b      	lsls	r3, r3, #12
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <MX_GPIO_Init+0xcc>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	03c9      	lsls	r1, r1, #15
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fe33 	bl	80011c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0192      	lsls	r2, r2, #6
 8000562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2284      	movs	r2, #132	; 0x84
 8000568:	0392      	lsls	r2, r2, #14
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	193b      	adds	r3, r7, r4
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <MX_GPIO_Init+0xd0>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fc95 	bl	8000ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2220      	movs	r2, #32
 8000584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000598:	187a      	adds	r2, r7, r1
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fc81 	bl	8000ea8 <HAL_GPIO_Init>

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b009      	add	sp, #36	; 0x24
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000800 	.word	0x48000800

080005b8 <PA8_Init>:

/* USER CODE BEGIN 4 */

/*Configure GPIO pins : LD2_Pin PA8 */
static void PA8_Init() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f005 f99f 	bl	800590a <memset>

	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2290      	movs	r2, #144	; 0x90
 80005d0:	0052      	lsls	r2, r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2201      	movs	r2, #1
 80005d8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	2390      	movs	r3, #144	; 0x90
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fc5a 	bl	8000ea8 <HAL_GPIO_Init>
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b006      	add	sp, #24
 80005fa:	bd80      	pop	{r7, pc}

080005fc <debounce>:

static int debounce(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	000a      	movs	r2, r1
 8000606:	1cbb      	adds	r3, r7, #2
 8000608:	801a      	strh	r2, [r3, #0]
	static uint16_t rebote = 0;

	rebote = (rebote << 1) | HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) | 0xfe00;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <debounce+0x50>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b21c      	sxth	r4, r3
 8000612:	1cbb      	adds	r3, r7, #2
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fdb4 	bl	8001188 <HAL_GPIO_ReadPin>
 8000620:	0003      	movs	r3, r0
 8000622:	b21b      	sxth	r3, r3
 8000624:	4323      	orrs	r3, r4
 8000626:	b21b      	sxth	r3, r3
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <debounce+0x54>)
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <debounce+0x50>)
 8000632:	801a      	strh	r2, [r3, #0]
	return (rebote <= 0xfff0);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <debounce+0x50>)
 8000636:	881a      	ldrh	r2, [r3, #0]
 8000638:	4906      	ldr	r1, [pc, #24]	; (8000654 <debounce+0x58>)
 800063a:	2300      	movs	r3, #0
 800063c:	4291      	cmp	r1, r2
 800063e:	415b      	adcs	r3, r3
 8000640:	b2db      	uxtb	r3, r3
}
 8000642:	0018      	movs	r0, r3
 8000644:	46bd      	mov	sp, r7
 8000646:	b003      	add	sp, #12
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000174 	.word	0x20000174
 8000650:	fffffe00 	.word	0xfffffe00
 8000654:	0000fff0 	.word	0x0000fff0

08000658 <blink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blink */
void blink(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	patron_activo = patron_1;
 8000660:	4ba6      	ldr	r3, [pc, #664]	; (80008fc <blink+0x2a4>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	static int j = 0;

	/* Infinite loop */
	for(;;)
	{
		if (patron_activo != patron_2 && PWM_On) {
 8000666:	4ba5      	ldr	r3, [pc, #660]	; (80008fc <blink+0x2a4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d00d      	beq.n	800068a <blink+0x32>
 800066e:	4ba4      	ldr	r3, [pc, #656]	; (8000900 <blink+0x2a8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d009      	beq.n	800068a <blink+0x32>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000676:	4ba3      	ldr	r3, [pc, #652]	; (8000904 <blink+0x2ac>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fc1c 	bl	8001eb8 <HAL_TIM_PWM_Stop>
			PA8_Init();
 8000680:	f7ff ff9a 	bl	80005b8 <PA8_Init>
			PWM_On = false;
 8000684:	4b9e      	ldr	r3, [pc, #632]	; (8000900 <blink+0x2a8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
		}
		switch (patron_activo) {
 800068a:	4b9c      	ldr	r3, [pc, #624]	; (80008fc <blink+0x2a4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d100      	bne.n	8000694 <blink+0x3c>
 8000692:	e0b9      	b.n	8000808 <blink+0x1b0>
 8000694:	dd00      	ble.n	8000698 <blink+0x40>
 8000696:	e12c      	b.n	80008f2 <blink+0x29a>
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <blink+0x4a>
 800069c:	2b01      	cmp	r3, #1
 800069e:	d056      	beq.n	800074e <blink+0xf6>
			break;

		}
		default: {

			break;
 80006a0:	e127      	b.n	80008f2 <blink+0x29a>
			if (primera_vez) {
 80006a2:	4b99      	ldr	r3, [pc, #612]	; (8000908 <blink+0x2b0>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d016      	beq.n	80006d8 <blink+0x80>
				primera_vez = false;
 80006aa:	4b97      	ldr	r3, [pc, #604]	; (8000908 <blink+0x2b0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fd82 	bl	80011c2 <HAL_GPIO_WritePin>
				osDelay(250);
 80006be:	20fa      	movs	r0, #250	; 0xfa
 80006c0:	f002 ffaa 	bl	8003618 <osDelay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);\
 80006c4:	2390      	movs	r3, #144	; 0x90
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fd78 	bl	80011c2 <HAL_GPIO_WritePin>
				osDelay(250);
 80006d2:	20fa      	movs	r0, #250	; 0xfa
 80006d4:	f002 ffa0 	bl	8003618 <osDelay>
			if (i < 6 && j == 0) {
 80006d8:	4b8c      	ldr	r3, [pc, #560]	; (800090c <blink+0x2b4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	dc14      	bgt.n	800070a <blink+0xb2>
 80006e0:	4b8b      	ldr	r3, [pc, #556]	; (8000910 <blink+0x2b8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d110      	bne.n	800070a <blink+0xb2>
				i++;
 80006e8:	4b88      	ldr	r3, [pc, #544]	; (800090c <blink+0x2b4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	4b87      	ldr	r3, [pc, #540]	; (800090c <blink+0x2b4>)
 80006f0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	005a      	lsls	r2, r3, #1
 80006f6:	2390      	movs	r3, #144	; 0x90
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fd7d 	bl	80011fc <HAL_GPIO_TogglePin>
				osDelay(250);
 8000702:	20fa      	movs	r0, #250	; 0xfa
 8000704:	f002 ff88 	bl	8003618 <osDelay>
 8000708:	e002      	b.n	8000710 <blink+0xb8>
				i = 0;
 800070a:	4b80      	ldr	r3, [pc, #512]	; (800090c <blink+0x2b4>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
			if (j < 4 && i == 0) {
 8000710:	4b7f      	ldr	r3, [pc, #508]	; (8000910 <blink+0x2b8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b03      	cmp	r3, #3
 8000716:	dc16      	bgt.n	8000746 <blink+0xee>
 8000718:	4b7c      	ldr	r3, [pc, #496]	; (800090c <blink+0x2b4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d112      	bne.n	8000746 <blink+0xee>
				j++;
 8000720:	4b7b      	ldr	r3, [pc, #492]	; (8000910 <blink+0x2b8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	4b7a      	ldr	r3, [pc, #488]	; (8000910 <blink+0x2b8>)
 8000728:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	005a      	lsls	r2, r3, #1
 800072e:	2390      	movs	r3, #144	; 0x90
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd61 	bl	80011fc <HAL_GPIO_TogglePin>
				osDelay(500);
 800073a:	23fa      	movs	r3, #250	; 0xfa
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	0018      	movs	r0, r3
 8000740:	f002 ff6a 	bl	8003618 <osDelay>
			break;
 8000744:	e0d6      	b.n	80008f4 <blink+0x29c>
				j = 0;
 8000746:	4b72      	ldr	r3, [pc, #456]	; (8000910 <blink+0x2b8>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
			break;
 800074c:	e0d2      	b.n	80008f4 <blink+0x29c>
			if (primera_vez) {
 800074e:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <blink+0x2b0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d01e      	beq.n	8000794 <blink+0x13c>
				primera_vez = false;
 8000756:	4b6c      	ldr	r3, [pc, #432]	; (8000908 <blink+0x2b0>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e00b      	b.n	800077a <blink+0x122>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2120      	movs	r1, #32
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fd47 	bl	80011fc <HAL_GPIO_TogglePin>
					osDelay(250);
 800076e:	20fa      	movs	r0, #250	; 0xfa
 8000770:	f002 ff52 	bl	8003618 <osDelay>
				for (int i = 0; i < 4; i++) {
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b03      	cmp	r3, #3
 800077e:	ddf0      	ble.n	8000762 <blink+0x10a>
				MX_TIM1_Init();
 8000780:	f7ff fdca 	bl	8000318 <MX_TIM1_Init>
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000784:	4b5f      	ldr	r3, [pc, #380]	; (8000904 <blink+0x2ac>)
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fae3 	bl	8001d54 <HAL_TIM_PWM_Start>
				PWM_On = true;
 800078e:	4b5c      	ldr	r3, [pc, #368]	; (8000900 <blink+0x2a8>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
			if (Duty_Cycle < 2000 && up == true) {
 8000794:	4b5f      	ldr	r3, [pc, #380]	; (8000914 <blink+0x2bc>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	23fa      	movs	r3, #250	; 0xfa
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	429a      	cmp	r2, r3
 800079e:	da12      	bge.n	80007c6 <blink+0x16e>
 80007a0:	4b5d      	ldr	r3, [pc, #372]	; (8000918 <blink+0x2c0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <blink+0x16e>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_Cycle);
 80007a8:	4b5a      	ldr	r3, [pc, #360]	; (8000914 <blink+0x2bc>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b55      	ldr	r3, [pc, #340]	; (8000904 <blink+0x2ac>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
				Duty_Cycle += 10;
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <blink+0x2bc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	330a      	adds	r3, #10
 80007b8:	001a      	movs	r2, r3
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <blink+0x2bc>)
 80007bc:	601a      	str	r2, [r3, #0]
				osDelay(3);
 80007be:	2003      	movs	r0, #3
 80007c0:	f002 ff2a 	bl	8003618 <osDelay>
 80007c4:	e002      	b.n	80007cc <blink+0x174>
				up = false;
 80007c6:	4b54      	ldr	r3, [pc, #336]	; (8000918 <blink+0x2c0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
			if (Duty_Cycle > 0 && up == false) {
 80007cc:	4b51      	ldr	r3, [pc, #324]	; (8000914 <blink+0x2bc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dd15      	ble.n	8000800 <blink+0x1a8>
 80007d4:	4b50      	ldr	r3, [pc, #320]	; (8000918 <blink+0x2c0>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2201      	movs	r2, #1
 80007da:	4053      	eors	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00e      	beq.n	8000800 <blink+0x1a8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Duty_Cycle);
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <blink+0x2bc>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b47      	ldr	r3, [pc, #284]	; (8000904 <blink+0x2ac>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
				Duty_Cycle -= 10;
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <blink+0x2bc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3b0a      	subs	r3, #10
 80007f2:	001a      	movs	r2, r3
 80007f4:	4b47      	ldr	r3, [pc, #284]	; (8000914 <blink+0x2bc>)
 80007f6:	601a      	str	r2, [r3, #0]
				osDelay(3);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f002 ff0d 	bl	8003618 <osDelay>
			break;
 80007fe:	e079      	b.n	80008f4 <blink+0x29c>
				up = true;
 8000800:	4b45      	ldr	r3, [pc, #276]	; (8000918 <blink+0x2c0>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
			break;
 8000806:	e075      	b.n	80008f4 <blink+0x29c>
			if (primera_vez) {
 8000808:	4b3f      	ldr	r3, [pc, #252]	; (8000908 <blink+0x2b0>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d014      	beq.n	800083a <blink+0x1e2>
				primera_vez = false;
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <blink+0x2b0>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 6; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	e00b      	b.n	8000834 <blink+0x1dc>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800081c:	2390      	movs	r3, #144	; 0x90
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	2120      	movs	r1, #32
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fcea 	bl	80011fc <HAL_GPIO_TogglePin>
					osDelay(250);
 8000828:	20fa      	movs	r0, #250	; 0xfa
 800082a:	f002 fef5 	bl	8003618 <osDelay>
				for (int i = 0; i < 6; i++) {
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	3301      	adds	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b05      	cmp	r3, #5
 8000838:	ddf0      	ble.n	800081c <blink+0x1c4>
			if (parpadeo < 250 && up == true) {
 800083a:	4b38      	ldr	r3, [pc, #224]	; (800091c <blink+0x2c4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2bf9      	cmp	r3, #249	; 0xf9
 8000840:	dc24      	bgt.n	800088c <blink+0x234>
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <blink+0x2c0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d020      	beq.n	800088c <blink+0x234>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	005a      	lsls	r2, r3, #1
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fcd1 	bl	80011fc <HAL_GPIO_TogglePin>
				parpadeo += 10;
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <blink+0x2c4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	330a      	adds	r3, #10
 8000860:	001a      	movs	r2, r3
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <blink+0x2c4>)
 8000864:	601a      	str	r2, [r3, #0]
				osDelay(parpadeo);
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <blink+0x2c4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	0018      	movs	r0, r3
 800086c:	f002 fed4 	bl	8003618 <osDelay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	005a      	lsls	r2, r3, #1
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fcbe 	bl	80011fc <HAL_GPIO_TogglePin>
				osDelay(parpadeo);
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <blink+0x2c4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fec7 	bl	8003618 <osDelay>
 800088a:	e002      	b.n	8000892 <blink+0x23a>
				up = false;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <blink+0x2c0>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
			if (parpadeo > 0 && up == false) {
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <blink+0x2c4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dd27      	ble.n	80008ea <blink+0x292>
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <blink+0x2c0>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2201      	movs	r2, #1
 80008a0:	4053      	eors	r3, r2
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d020      	beq.n	80008ea <blink+0x292>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	005a      	lsls	r2, r3, #1
 80008ac:	2390      	movs	r3, #144	; 0x90
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fca2 	bl	80011fc <HAL_GPIO_TogglePin>
				parpadeo -= 10;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <blink+0x2c4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3b0a      	subs	r3, #10
 80008be:	001a      	movs	r2, r3
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <blink+0x2c4>)
 80008c2:	601a      	str	r2, [r3, #0]
				osDelay(parpadeo);
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <blink+0x2c4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fea5 	bl	8003618 <osDelay>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	005a      	lsls	r2, r3, #1
 80008d2:	2390      	movs	r3, #144	; 0x90
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 fc8f 	bl	80011fc <HAL_GPIO_TogglePin>
				osDelay(parpadeo);
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <blink+0x2c4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fe98 	bl	8003618 <osDelay>
			break;
 80008e8:	e004      	b.n	80008f4 <blink+0x29c>
				up = true;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <blink+0x2c0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
			break;
 80008f0:	e000      	b.n	80008f4 <blink+0x29c>
			break;
 80008f2:	46c0      	nop			; (mov r8, r8)

		}
		}
		osDelay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f002 fe8f 	bl	8003618 <osDelay>
		if (patron_activo != patron_2 && PWM_On) {
 80008fa:	e6b4      	b.n	8000666 <blink+0xe>
 80008fc:	20000168 	.word	0x20000168
 8000900:	20000002 	.word	0x20000002
 8000904:	20000094 	.word	0x20000094
 8000908:	20000000 	.word	0x20000000
 800090c:	20000178 	.word	0x20000178
 8000910:	2000017c 	.word	0x2000017c
 8000914:	2000016c 	.word	0x2000016c
 8000918:	20000001 	.word	0x20000001
 800091c:	20000170 	.word	0x20000170

08000920 <check_status>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_check_status */
void check_status(void *argument)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_status */
	/* Infinite loop */
	for(;;)
	{
		if(debounce(GPIOC, GPIO_PIN_13))
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	019b      	lsls	r3, r3, #6
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <check_status+0x58>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f7ff fe63 	bl	80005fc <debounce>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d01a      	beq.n	8000970 <check_status+0x50>
		{
			while(debounce(GPIOC, GPIO_PIN_13));
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	019b      	lsls	r3, r3, #6
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <check_status+0x58>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f7ff fe59 	bl	80005fc <debounce>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d1f6      	bne.n	800093c <check_status+0x1c>
			if (patron_activo == patron_3)
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <check_status+0x5c>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d103      	bne.n	800095e <check_status+0x3e>
			{
				patron_activo = patron_1;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <check_status+0x5c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e005      	b.n	800096a <check_status+0x4a>
			}
			else
			{
				patron_activo = (patron_activo + 1);
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <check_status+0x5c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <check_status+0x5c>)
 8000968:	701a      	strb	r2, [r3, #0]
			}

			primera_vez = true;
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <check_status+0x60>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
		}
		osDelay(20);
 8000970:	2014      	movs	r0, #20
 8000972:	f002 fe51 	bl	8003618 <osDelay>
		if(debounce(GPIOC, GPIO_PIN_13))
 8000976:	e7d7      	b.n	8000928 <check_status+0x8>
 8000978:	48000800 	.word	0x48000800
 800097c:	20000168 	.word	0x20000168
 8000980:	20000000 	.word	0x20000000

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 f9bd 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b002      	add	sp, #8
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40001000 	.word	0x40001000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x50>)
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_MspInit+0x50>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	619a      	str	r2, [r3, #24]
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x50>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x50>)
 80009d4:	69da      	ldr	r2, [r3, #28]
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_MspInit+0x50>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0549      	lsls	r1, r1, #21
 80009dc:	430a      	orrs	r2, r1
 80009de:	61da      	str	r2, [r3, #28]
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_MspInit+0x50>)
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	4013      	ands	r3, r2
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80009ee:	2302      	movs	r3, #2
 80009f0:	425b      	negs	r3, r3
 80009f2:	2200      	movs	r2, #0
 80009f4:	2103      	movs	r1, #3
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fa30 	bl	8000e5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x38>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10d      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0109      	lsls	r1, r1, #4
 8000a24:	430a      	orrs	r2, r1
 8000a26:	619a      	str	r2, [r3, #24]
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_TIM_Base_MspInit+0x3c>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40012c00 	.word	0x40012c00
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	240c      	movs	r4, #12
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f004 ff55 	bl	800590a <memset>
  if(htim->Instance==TIM1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <HAL_TIM_MspPostInit+0x78>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d125      	bne.n	8000ab6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_TIM_MspPostInit+0x7c>)
 8000a6c:	695a      	ldr	r2, [r3, #20]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_TIM_MspPostInit+0x7c>)
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	0289      	lsls	r1, r1, #10
 8000a74:	430a      	orrs	r2, r1
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_TIM_MspPostInit+0x7c>)
 8000a7a:	695a      	ldr	r2, [r3, #20]
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	029b      	lsls	r3, r3, #10
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	0021      	movs	r1, r4
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2202      	movs	r2, #2
 8000a94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	2390      	movs	r3, #144	; 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 f9f9 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b009      	add	sp, #36	; 0x24
 8000abc:	bd90      	pop	{r4, r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b08b      	sub	sp, #44	; 0x2c
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	2414      	movs	r4, #20
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	2314      	movs	r3, #20
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2100      	movs	r1, #0
 8000adc:	f004 ff15 	bl	800590a <memset>
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0x90>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d132      	bne.n	8000b50 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	0289      	lsls	r1, r1, #10
 8000af4:	430a      	orrs	r2, r1
 8000af6:	61da      	str	r2, [r3, #28]
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	029b      	lsls	r3, r3, #10
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0289      	lsls	r1, r1, #10
 8000b10:	430a      	orrs	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_UART_MspInit+0x94>)
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	029b      	lsls	r3, r3, #10
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b22:	0021      	movs	r1, r4
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	220c      	movs	r2, #12
 8000b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2201      	movs	r2, #1
 8000b40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	187a      	adds	r2, r7, r1
 8000b44:	2390      	movs	r3, #144	; 0x90
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f9ac 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b00b      	add	sp, #44	; 0x2c
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <HAL_InitTick+0xf0>)
 8000b72:	69da      	ldr	r2, [r3, #28]
 8000b74:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <HAL_InitTick+0xf0>)
 8000b76:	2110      	movs	r1, #16
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	61da      	str	r2, [r3, #28]
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <HAL_InitTick+0xf0>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	2210      	movs	r2, #16
 8000b82:	4013      	ands	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	230c      	movs	r3, #12
 8000b8a:	18fa      	adds	r2, r7, r3
 8000b8c:	2410      	movs	r4, #16
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 ffc0 	bl	8001b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba4:	f000 ffa2 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8000ba8:	0003      	movs	r3, r0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bae:	f000 ff9d 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	4926      	ldr	r1, [pc, #152]	; (8000c54 <HAL_InitTick+0xf4>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff faa3 	bl	8000108 <__udivsi3>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_InitTick+0xf8>)
 8000bca:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <HAL_InitTick+0xfc>)
 8000bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_InitTick+0xf8>)
 8000bd0:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_InitTick+0x100>)
 8000bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_InitTick+0xf8>)
 8000bd6:	6a3a      	ldr	r2, [r7, #32]
 8000bd8:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_InitTick+0xf8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_InitTick+0xf8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_InitTick+0xf8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bec:	252b      	movs	r5, #43	; 0x2b
 8000bee:	197c      	adds	r4, r7, r5
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_InitTick+0xf8>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 ffba 	bl	8001b6c <HAL_TIM_Base_Init>
 8000bf8:	0003      	movs	r3, r0
 8000bfa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000bfc:	197b      	adds	r3, r7, r5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d11e      	bne.n	8000c42 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c04:	197c      	adds	r4, r7, r5
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_InitTick+0xf8>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 ffff 	bl	8001c0c <HAL_TIM_Base_Start_IT>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000c12:	197b      	adds	r3, r7, r5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d113      	bne.n	8000c42 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000c1a:	2011      	movs	r0, #17
 8000c1c:	f000 f933 	bl	8000e86 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d809      	bhi.n	8000c3a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	2011      	movs	r0, #17
 8000c2e:	f000 f915 	bl	8000e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_InitTick+0x104>)
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	e003      	b.n	8000c42 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000c3a:	232b      	movs	r3, #43	; 0x2b
 8000c3c:	18fb      	adds	r3, r7, r3
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000c42:	232b      	movs	r3, #43	; 0x2b
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b00c      	add	sp, #48	; 0x30
 8000c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	000f4240 	.word	0x000f4240
 8000c58:	20000180 	.word	0x20000180
 8000c5c:	40001000 	.word	0x40001000
 8000c60:	000003e7 	.word	0x000003e7
 8000c64:	20000008 	.word	0x20000008

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <TIM6_IRQHandler+0x14>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 f998 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000180 	.word	0x20000180

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc2:	f7ff ffe3 	bl	8000c8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cc6:	f004 fdf1 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff faa9 	bl	8000220 <main>

08000cce <LoopForever>:

LoopForever:
    b LoopForever
 8000cce:	e7fe      	b.n	8000cce <LoopForever>
  ldr   r0, =_estack
 8000cd0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cdc:	08005c00 	.word	0x08005c00
  ldr r2, =_sbss
 8000ce0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ce4:	20001bd4 	.word	0x20001bd4

08000ce8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC1_IRQHandler>
	...

08000cec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_Init+0x24>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_Init+0x24>)
 8000cf6:	2110      	movs	r1, #16
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f7ff ff2f 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d02:	f7ff fe57 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	18d2      	adds	r2, r2, r3
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_IncTick+0x20>)
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	2000000c 	.word	0x2000000c
 8000d34:	200001c8 	.word	0x200001c8

08000d38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	200001c8 	.word	0x200001c8

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	1dfb      	adds	r3, r7, #7
 8000d56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d5e:	d809      	bhi.n	8000d74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	001a      	movs	r2, r3
 8000d66:	231f      	movs	r3, #31
 8000d68:	401a      	ands	r2, r3
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_EnableIRQ+0x30>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4091      	lsls	r1, r2
 8000d70:	000a      	movs	r2, r1
 8000d72:	601a      	str	r2, [r3, #0]
  }
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b7f      	cmp	r3, #127	; 0x7f
 8000d94:	d828      	bhi.n	8000de8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d96:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	33c0      	adds	r3, #192	; 0xc0
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	589b      	ldr	r3, [r3, r2]
 8000da6:	1dfa      	adds	r2, r7, #7
 8000da8:	7812      	ldrb	r2, [r2, #0]
 8000daa:	0011      	movs	r1, r2
 8000dac:	2203      	movs	r2, #3
 8000dae:	400a      	ands	r2, r1
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	21ff      	movs	r1, #255	; 0xff
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	43d2      	mvns	r2, r2
 8000dba:	401a      	ands	r2, r3
 8000dbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	019b      	lsls	r3, r3, #6
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	2303      	movs	r3, #3
 8000dce:	4003      	ands	r3, r0
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	481f      	ldr	r0, [pc, #124]	; (8000e54 <__NVIC_SetPriority+0xd4>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	430a      	orrs	r2, r1
 8000de0:	33c0      	adds	r3, #192	; 0xc0
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000de6:	e031      	b.n	8000e4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0019      	movs	r1, r3
 8000df0:	230f      	movs	r3, #15
 8000df2:	400b      	ands	r3, r1
 8000df4:	3b08      	subs	r3, #8
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3306      	adds	r3, #6
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	18d3      	adds	r3, r2, r3
 8000dfe:	3304      	adds	r3, #4
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	4809      	ldr	r0, [pc, #36]	; (8000e58 <__NVIC_SetPriority+0xd8>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	001c      	movs	r4, r3
 8000e38:	230f      	movs	r3, #15
 8000e3a:	4023      	ands	r3, r4
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	3306      	adds	r3, #6
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	18c3      	adds	r3, r0, r3
 8000e48:	3304      	adds	r3, #4
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b003      	add	sp, #12
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f7ff ff81 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f7ff ff57 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e14f      	b.n	8001158 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d100      	bne.n	8000ed0 <HAL_GPIO_Init+0x28>
 8000ece:	e140      	b.n	8001152 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	2201      	movs	r2, #1
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	409a      	lsls	r2, r3
 8000f64:	0013      	movs	r3, r2
 8000f66:	43da      	mvns	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	58d3      	ldr	r3, [r2, r3]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	029b      	lsls	r3, r3, #10
 8001016:	4013      	ands	r3, r2
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x174>
 800101a:	e09a      	b.n	8001152 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b54      	ldr	r3, [pc, #336]	; (8001170 <HAL_GPIO_Init+0x2c8>)
 800101e:	699a      	ldr	r2, [r3, #24]
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_GPIO_Init+0x2c8>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_GPIO_Init+0x2c8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <HAL_GPIO_Init+0x2cc>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	589b      	ldr	r3, [r3, r2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2203      	movs	r2, #3
 8001046:	4013      	ands	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	409a      	lsls	r2, r3
 800104e:	0013      	movs	r3, r2
 8001050:	43da      	mvns	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	2390      	movs	r3, #144	; 0x90
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	429a      	cmp	r2, r3
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x1e2>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x1de>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a43      	ldr	r2, [pc, #268]	; (800117c <HAL_GPIO_Init+0x2d4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x1da>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a42      	ldr	r2, [pc, #264]	; (8001180 <HAL_GPIO_Init+0x2d8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x1d6>
 800107a:	2303      	movs	r3, #3
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x1e4>
 800107e:	2305      	movs	r3, #5
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x1e4>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x1e4>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x1e4>
 800108a:	2300      	movs	r3, #0
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	2103      	movs	r1, #3
 8001090:	400a      	ands	r2, r1
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x2cc>)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	4013      	ands	r3, r2
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	029b      	lsls	r3, r3, #10
 80010ec:	4013      	ands	r3, r2
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_GPIO_Init+0x2dc>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	40da      	lsrs	r2, r3
 8001160:	1e13      	subs	r3, r2, #0
 8001162:	d000      	beq.n	8001166 <HAL_GPIO_Init+0x2be>
 8001164:	e6a8      	b.n	8000eb8 <HAL_GPIO_Init+0x10>
  } 
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b006      	add	sp, #24
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000
 8001178:	48000400 	.word	0x48000400
 800117c:	48000800 	.word	0x48000800
 8001180:	48000c00 	.word	0x48000c00
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	000a      	movs	r2, r1
 8001192:	1cbb      	adds	r3, r7, #2
 8001194:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	1cba      	adds	r2, r7, #2
 800119c:	8812      	ldrh	r2, [r2, #0]
 800119e:	4013      	ands	r3, r2
 80011a0:	d004      	beq.n	80011ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011a2:	230f      	movs	r3, #15
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e003      	b.n	80011b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
  }
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b004      	add	sp, #16
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	0008      	movs	r0, r1
 80011cc:	0011      	movs	r1, r2
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	1c02      	adds	r2, r0, #0
 80011d2:	801a      	strh	r2, [r3, #0]
 80011d4:	1c7b      	adds	r3, r7, #1
 80011d6:	1c0a      	adds	r2, r1, #0
 80011d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011da:	1c7b      	adds	r3, r7, #1
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d004      	beq.n	80011ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ea:	e003      	b.n	80011f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ec:	1cbb      	adds	r3, r7, #2
 80011ee:	881a      	ldrh	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f4:	46c0      	nop			; (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b002      	add	sp, #8
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	000a      	movs	r2, r1
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001210:	1cbb      	adds	r3, r7, #2
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43db      	mvns	r3, r3
 800121e:	1cb9      	adds	r1, r7, #2
 8001220:	8809      	ldrh	r1, [r1, #0]
 8001222:	400b      	ands	r3, r1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e305      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x1e>
 8001250:	e08d      	b.n	800136e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001252:	4bc5      	ldr	r3, [pc, #788]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	220c      	movs	r2, #12
 8001258:	4013      	ands	r3, r2
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00e      	beq.n	800127c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125e:	4bc2      	ldr	r3, [pc, #776]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	220c      	movs	r2, #12
 8001264:	4013      	ands	r3, r2
 8001266:	2b08      	cmp	r3, #8
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x64>
 800126a:	4bbf      	ldr	r3, [pc, #764]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	23c0      	movs	r3, #192	; 0xc0
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	401a      	ands	r2, r3
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	429a      	cmp	r2, r3
 800127a:	d10d      	bne.n	8001298 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4bba      	ldr	r3, [pc, #744]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x56>
 8001288:	e070      	b.n	800136c <HAL_RCC_OscConfig+0x138>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d000      	beq.n	8001294 <HAL_RCC_OscConfig+0x60>
 8001292:	e06b      	b.n	800136c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e2dc      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d107      	bne.n	80012b0 <HAL_RCC_OscConfig+0x7c>
 80012a0:	4bb1      	ldr	r3, [pc, #708]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4bb0      	ldr	r3, [pc, #704]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e02f      	b.n	8001310 <HAL_RCC_OscConfig+0xdc>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x9e>
 80012b8:	4bab      	ldr	r3, [pc, #684]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4baa      	ldr	r3, [pc, #680]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012be:	49ab      	ldr	r1, [pc, #684]	; (800156c <HAL_RCC_OscConfig+0x338>)
 80012c0:	400a      	ands	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	4ba8      	ldr	r3, [pc, #672]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4ba7      	ldr	r3, [pc, #668]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012ca:	49a9      	ldr	r1, [pc, #676]	; (8001570 <HAL_RCC_OscConfig+0x33c>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e01e      	b.n	8001310 <HAL_RCC_OscConfig+0xdc>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d10e      	bne.n	80012f8 <HAL_RCC_OscConfig+0xc4>
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba2      	ldr	r3, [pc, #648]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	02c9      	lsls	r1, r1, #11
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	4b9f      	ldr	r3, [pc, #636]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b9e      	ldr	r3, [pc, #632]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	0249      	lsls	r1, r1, #9
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xdc>
 80012f8:	4b9b      	ldr	r3, [pc, #620]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b9a      	ldr	r3, [pc, #616]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80012fe:	499b      	ldr	r1, [pc, #620]	; (800156c <HAL_RCC_OscConfig+0x338>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	4b98      	ldr	r3, [pc, #608]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b97      	ldr	r3, [pc, #604]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800130a:	4999      	ldr	r1, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x33c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d014      	beq.n	8001342 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fd0e 	bl	8000d38 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001322:	f7ff fd09 	bl	8000d38 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e28e      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001334:	4b8c      	ldr	r3, [pc, #560]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	029b      	lsls	r3, r3, #10
 800133c:	4013      	ands	r3, r2
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0xee>
 8001340:	e015      	b.n	800136e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001342:	f7ff fcf9 	bl	8000d38 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fcf4 	bl	8000d38 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e279      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b82      	ldr	r3, [pc, #520]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	029b      	lsls	r3, r3, #10
 8001366:	4013      	ands	r3, r2
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x118>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x146>
 8001378:	e06c      	b.n	8001454 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800137a:	4b7b      	ldr	r3, [pc, #492]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	220c      	movs	r2, #12
 8001380:	4013      	ands	r3, r2
 8001382:	d00e      	beq.n	80013a2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001384:	4b78      	ldr	r3, [pc, #480]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	220c      	movs	r2, #12
 800138a:	4013      	ands	r3, r2
 800138c:	2b08      	cmp	r3, #8
 800138e:	d11f      	bne.n	80013d0 <HAL_RCC_OscConfig+0x19c>
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	23c0      	movs	r3, #192	; 0xc0
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	401a      	ands	r2, r3
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	429a      	cmp	r2, r3
 80013a0:	d116      	bne.n	80013d0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	4b71      	ldr	r3, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x184>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e24c      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	22f8      	movs	r2, #248	; 0xf8
 80013be:	4393      	bics	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	00da      	lsls	r2, r3, #3
 80013c8:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ce:	e041      	b.n	8001454 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d024      	beq.n	8001422 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b62      	ldr	r3, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fca8 	bl	8000d38 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fca3 	bl	8000d38 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e228      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d0f1      	beq.n	80013ee <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	22f8      	movs	r2, #248	; 0xf8
 8001410:	4393      	bics	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	00da      	lsls	r2, r3, #3
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e018      	b.n	8001454 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b50      	ldr	r3, [pc, #320]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001428:	2101      	movs	r1, #1
 800142a:	438a      	bics	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142e:	f7ff fc83 	bl	8000d38 <HAL_GetTick>
 8001432:	0003      	movs	r3, r0
 8001434:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001438:	f7ff fc7e 	bl	8000d38 <HAL_GetTick>
 800143c:	0002      	movs	r2, r0
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e203      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d1f1      	bne.n	8001438 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2208      	movs	r2, #8
 800145a:	4013      	ands	r3, r2
 800145c:	d036      	beq.n	80014cc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800146c:	2101      	movs	r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc61 	bl	8000d38 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fc5c 	bl	8000d38 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1e1      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	2202      	movs	r2, #2
 8001494:	4013      	ands	r3, r2
 8001496:	d0f1      	beq.n	800147c <HAL_RCC_OscConfig+0x248>
 8001498:	e018      	b.n	80014cc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800149c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	438a      	bics	r2, r1
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc47 	bl	8000d38 <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff fc42 	bl	8000d38 <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1c7      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d1f1      	bne.n	80014b0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	4013      	ands	r3, r2
 80014d4:	d100      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2a4>
 80014d6:	e0b5      	b.n	8001644 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d8:	201f      	movs	r0, #31
 80014da:	183b      	adds	r3, r7, r0
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	055b      	lsls	r3, r3, #21
 80014e8:	4013      	ands	r3, r2
 80014ea:	d110      	bne.n	800150e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0549      	lsls	r1, r1, #21
 80014f6:	430a      	orrs	r2, r1
 80014f8:	61da      	str	r2, [r3, #28]
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 80014fc:	69da      	ldr	r2, [r3, #28]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	055b      	lsls	r3, r3, #21
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001508:	183b      	adds	r3, r7, r0
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_RCC_OscConfig+0x340>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4013      	ands	r3, r2
 8001518:	d11a      	bne.n	8001550 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_RCC_OscConfig+0x340>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_RCC_OscConfig+0x340>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	0049      	lsls	r1, r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001528:	f7ff fc06 	bl	8000d38 <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff fc01 	bl	8000d38 <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b64      	cmp	r3, #100	; 0x64
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e186      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x340>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4013      	ands	r3, r2
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10f      	bne.n	8001578 <HAL_RCC_OscConfig+0x344>
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800155a:	6a1a      	ldr	r2, [r3, #32]
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <HAL_RCC_OscConfig+0x334>)
 800155e:	2101      	movs	r1, #1
 8001560:	430a      	orrs	r2, r1
 8001562:	621a      	str	r2, [r3, #32]
 8001564:	e036      	b.n	80015d4 <HAL_RCC_OscConfig+0x3a0>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40021000 	.word	0x40021000
 800156c:	fffeffff 	.word	0xfffeffff
 8001570:	fffbffff 	.word	0xfffbffff
 8001574:	40007000 	.word	0x40007000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10c      	bne.n	800159a <HAL_RCC_OscConfig+0x366>
 8001580:	4bb6      	ldr	r3, [pc, #728]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	4bb5      	ldr	r3, [pc, #724]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	621a      	str	r2, [r3, #32]
 800158c:	4bb3      	ldr	r3, [pc, #716]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	4bb2      	ldr	r3, [pc, #712]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001592:	2104      	movs	r1, #4
 8001594:	438a      	bics	r2, r1
 8001596:	621a      	str	r2, [r3, #32]
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x3a0>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x388>
 80015a2:	4bae      	ldr	r3, [pc, #696]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015a4:	6a1a      	ldr	r2, [r3, #32]
 80015a6:	4bad      	ldr	r3, [pc, #692]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015a8:	2104      	movs	r1, #4
 80015aa:	430a      	orrs	r2, r1
 80015ac:	621a      	str	r2, [r3, #32]
 80015ae:	4bab      	ldr	r3, [pc, #684]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	4baa      	ldr	r3, [pc, #680]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	621a      	str	r2, [r3, #32]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0x3a0>
 80015bc:	4ba7      	ldr	r3, [pc, #668]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	4ba6      	ldr	r3, [pc, #664]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	438a      	bics	r2, r1
 80015c6:	621a      	str	r2, [r3, #32]
 80015c8:	4ba4      	ldr	r3, [pc, #656]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015ca:	6a1a      	ldr	r2, [r3, #32]
 80015cc:	4ba3      	ldr	r3, [pc, #652]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015ce:	2104      	movs	r1, #4
 80015d0:	438a      	bics	r2, r1
 80015d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d014      	beq.n	8001606 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fbac 	bl	8000d38 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	e009      	b.n	80015fa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fba7 	bl	8000d38 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	4a9b      	ldr	r2, [pc, #620]	; (8001860 <HAL_RCC_OscConfig+0x62c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e12b      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	4b98      	ldr	r3, [pc, #608]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x3b2>
 8001604:	e013      	b.n	800162e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb97 	bl	8000d38 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160e:	e009      	b.n	8001624 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001610:	f7ff fb92 	bl	8000d38 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4a91      	ldr	r2, [pc, #580]	; (8001860 <HAL_RCC_OscConfig+0x62c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e116      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001624:	4b8d      	ldr	r3, [pc, #564]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	2202      	movs	r2, #2
 800162a:	4013      	ands	r3, r2
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800162e:	231f      	movs	r3, #31
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001638:	4b88      	ldr	r3, [pc, #544]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	4b87      	ldr	r3, [pc, #540]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800163e:	4989      	ldr	r1, [pc, #548]	; (8001864 <HAL_RCC_OscConfig+0x630>)
 8001640:	400a      	ands	r2, r1
 8001642:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2210      	movs	r2, #16
 800164a:	4013      	ands	r3, r2
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d12a      	bne.n	80016ac <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001656:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165a:	4b80      	ldr	r3, [pc, #512]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800165c:	2104      	movs	r1, #4
 800165e:	430a      	orrs	r2, r1
 8001660:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001662:	4b7e      	ldr	r3, [pc, #504]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001666:	4b7d      	ldr	r3, [pc, #500]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb63 	bl	8000d38 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001678:	f7ff fb5e 	bl	8000d38 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0e3      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800168a:	4b74      	ldr	r3, [pc, #464]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001698:	22f8      	movs	r2, #248	; 0xf8
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	00da      	lsls	r2, r3, #3
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
 80016aa:	e034      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	3305      	adds	r3, #5
 80016b2:	d111      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	438a      	bics	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016c0:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	22f8      	movs	r2, #248	; 0xf8
 80016c6:	4393      	bics	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	00da      	lsls	r2, r3, #3
 80016d0:	4b62      	ldr	r3, [pc, #392]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	; 0x34
 80016d6:	e01e      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016d8:	4b60      	ldr	r3, [pc, #384]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016de:	2104      	movs	r1, #4
 80016e0:	430a      	orrs	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80016ea:	2101      	movs	r1, #1
 80016ec:	438a      	bics	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fb22 	bl	8000d38 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016fa:	f7ff fb1d 	bl	8000d38 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0a2      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f1      	bne.n	80016fa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d100      	bne.n	8001720 <HAL_RCC_OscConfig+0x4ec>
 800171e:	e097      	b.n	8001850 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b4e      	ldr	r3, [pc, #312]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	220c      	movs	r2, #12
 8001726:	4013      	ands	r3, r2
 8001728:	2b08      	cmp	r3, #8
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x4fa>
 800172c:	e06b      	b.n	8001806 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d14c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800173c:	494a      	ldr	r1, [pc, #296]	; (8001868 <HAL_RCC_OscConfig+0x634>)
 800173e:	400a      	ands	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff faf9 	bl	8000d38 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff faf4 	bl	8000d38 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e079      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800175e:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	049b      	lsls	r3, r3, #18
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	220f      	movs	r2, #15
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800177a:	430a      	orrs	r2, r1
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a3a      	ldr	r2, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x638>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	431a      	orrs	r2, r3
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001794:	430a      	orrs	r2, r1
 8001796:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001798:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	0449      	lsls	r1, r1, #17
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff fac7 	bl	8000d38 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff fac2 	bl	8000d38 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e047      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	049b      	lsls	r3, r3, #18
 80017ca:	4013      	ands	r3, r2
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x57c>
 80017ce:	e03f      	b.n	8001850 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80017d6:	4924      	ldr	r1, [pc, #144]	; (8001868 <HAL_RCC_OscConfig+0x634>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff faac 	bl	8000d38 <HAL_GetTick>
 80017e0:	0003      	movs	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff faa7 	bl	8000d38 <HAL_GetTick>
 80017ea:	0002      	movs	r2, r0
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e02c      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_RCC_OscConfig+0x628>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	049b      	lsls	r3, r3, #18
 8001800:	4013      	ands	r3, r2
 8001802:	d1f0      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5b2>
 8001804:	e024      	b.n	8001850 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e01f      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_OscConfig+0x628>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_RCC_OscConfig+0x628>)
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	23c0      	movs	r3, #192	; 0xc0
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	401a      	ands	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	429a      	cmp	r2, r3
 800182c:	d10e      	bne.n	800184c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	220f      	movs	r2, #15
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	23f0      	movs	r3, #240	; 0xf0
 8001840:	039b      	lsls	r3, r3, #14
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	0018      	movs	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	b008      	add	sp, #32
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	00001388 	.word	0x00001388
 8001864:	efffffff 	.word	0xefffffff
 8001868:	feffffff 	.word	0xfeffffff
 800186c:	ffc27fff 	.word	0xffc27fff

08001870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b3      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d911      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4393      	bics	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a4:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e09a      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d015      	beq.n	80018ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2204      	movs	r2, #4
 80018c6:	4013      	ands	r3, r2
 80018c8:	d006      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018ca:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80018d0:	21e0      	movs	r1, #224	; 0xe0
 80018d2:	00c9      	lsls	r1, r1, #3
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d8:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	22f0      	movs	r2, #240	; 0xf0
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	4013      	ands	r3, r2
 8001908:	d114      	bne.n	8001934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06e      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	049b      	lsls	r3, r3, #18
 800191e:	4013      	ands	r3, r2
 8001920:	d108      	bne.n	8001934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e062      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	4013      	ands	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e05b      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	4393      	bics	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001944:	430a      	orrs	r2, r1
 8001946:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001948:	f7ff f9f6 	bl	8000d38 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001950:	e009      	b.n	8001966 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7ff f9f1 	bl	8000d38 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a27      	ldr	r2, [pc, #156]	; (80019fc <HAL_RCC_ClockConfig+0x18c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e042      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	220c      	movs	r2, #12
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	429a      	cmp	r2, r3
 8001976:	d1ec      	bne.n	8001952 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d211      	bcs.n	80019aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2201      	movs	r2, #1
 800198c:	4393      	bics	r3, r2
 800198e:	0019      	movs	r1, r3
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_RCC_ClockConfig+0x184>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e020      	b.n	80019ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d009      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_RCC_ClockConfig+0x190>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019c8:	f000 f820 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019cc:	0001      	movs	r1, r0
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_RCC_ClockConfig+0x188>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	220f      	movs	r2, #15
 80019d6:	4013      	ands	r3, r2
 80019d8:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_RCC_ClockConfig+0x194>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	000a      	movs	r2, r1
 80019de:	40da      	lsrs	r2, r3
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x198>)
 80019e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f7ff f8bb 	bl	8000b60 <HAL_InitTick>
  
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b004      	add	sp, #16
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	00001388 	.word	0x00001388
 8001a00:	fffff8ff 	.word	0xfffff8ff
 8001a04:	08005b58 	.word	0x08005b58
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b08f      	sub	sp, #60	; 0x3c
 8001a10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a12:	2314      	movs	r3, #20
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	4a2c      	ldr	r2, [pc, #176]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a26:	c313      	stmia	r3!, {r0, r1, r4}
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a40:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d002      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x4a>
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x50>
 8001a54:	e02f      	b.n	8001ab6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a5a:	e02f      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	0c9b      	lsrs	r3, r3, #18
 8001a60:	220f      	movs	r2, #15
 8001a62:	4013      	ands	r3, r2
 8001a64:	2214      	movs	r2, #20
 8001a66:	18ba      	adds	r2, r7, r2
 8001a68:	5cd3      	ldrb	r3, [r2, r3]
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	220f      	movs	r2, #15
 8001a72:	4013      	ands	r3, r2
 8001a74:	1d3a      	adds	r2, r7, #4
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7c:	23c0      	movs	r3, #192	; 0xc0
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	401a      	ands	r2, r3
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	025b      	lsls	r3, r3, #9
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a8c:	4811      	ldr	r0, [pc, #68]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a8e:	f7fe fb3b 	bl	8000108 <__udivsi3>
 8001a92:	0003      	movs	r3, r0
 8001a94:	001a      	movs	r2, r3
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	4353      	muls	r3, r2
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001aa2:	f7fe fb31 	bl	8000108 <__udivsi3>
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	4353      	muls	r3, r2
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ab4:	e002      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001abe:	0018      	movs	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b00f      	add	sp, #60	; 0x3c
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	08005ad8 	.word	0x08005ad8
 8001acc:	08005ae8 	.word	0x08005ae8
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	007a1200 	.word	0x007a1200

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	20000004 	.word	0x20000004

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001af0:	f7ff fff2 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af4:	0001      	movs	r1, r0
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	2207      	movs	r2, #7
 8001afe:	4013      	ands	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	40d9      	lsrs	r1, r3
 8001b06:	000b      	movs	r3, r1
}    
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08005b68 	.word	0x08005b68

08001b18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_RCC_GetClockConfig+0x4c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_GetClockConfig+0x4c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	22f0      	movs	r2, #240	; 0xf0
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RCC_GetClockConfig+0x4c>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	23e0      	movs	r3, #224	; 0xe0
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	401a      	ands	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_GetClockConfig+0x50>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	401a      	ands	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b002      	add	sp, #8
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e042      	b.n	8001c04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223d      	movs	r2, #61	; 0x3d
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223c      	movs	r2, #60	; 0x3c
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7fe ff37 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	223d      	movs	r2, #61	; 0x3d
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	0019      	movs	r1, r3
 8001bac:	0010      	movs	r0, r2
 8001bae:	f000 fccf 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2246      	movs	r2, #70	; 0x46
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	223e      	movs	r2, #62	; 0x3e
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	5499      	strb	r1, [r3, r2]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223f      	movs	r2, #63	; 0x3f
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	5499      	strb	r1, [r3, r2]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2240      	movs	r2, #64	; 0x40
 8001bce:	2101      	movs	r1, #1
 8001bd0:	5499      	strb	r1, [r3, r2]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2241      	movs	r2, #65	; 0x41
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2242      	movs	r2, #66	; 0x42
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2243      	movs	r2, #67	; 0x43
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2244      	movs	r2, #68	; 0x44
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2245      	movs	r2, #69	; 0x45
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223d      	movs	r2, #61	; 0x3d
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	223d      	movs	r2, #61	; 0x3d
 8001c18:	5c9b      	ldrb	r3, [r3, r2]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d001      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e035      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	223d      	movs	r2, #61	; 0x3d
 8001c28:	2102      	movs	r1, #2
 8001c2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2101      	movs	r1, #1
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_TIM_Base_Start_IT+0x8c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_TIM_Base_Start_IT+0x4e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_TIM_Base_Start_IT+0x90>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d004      	beq.n	8001c5a <HAL_TIM_Base_Start_IT+0x4e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_TIM_Base_Start_IT+0x94>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d111      	bne.n	8001c7e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2207      	movs	r2, #7
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2b06      	cmp	r3, #6
 8001c6a:	d010      	beq.n	8001c8e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7c:	e007      	b.n	8001c8e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40014000 	.word	0x40014000

08001ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e042      	b.n	8001d3c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223d      	movs	r2, #61	; 0x3d
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	223c      	movs	r2, #60	; 0x3c
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f839 	bl	8001d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	223d      	movs	r2, #61	; 0x3d
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	0010      	movs	r0, r2
 8001ce6:	f000 fc33 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2246      	movs	r2, #70	; 0x46
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	223e      	movs	r2, #62	; 0x3e
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	5499      	strb	r1, [r3, r2]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	2101      	movs	r1, #1
 8001d00:	5499      	strb	r1, [r3, r2]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2241      	movs	r2, #65	; 0x41
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2242      	movs	r2, #66	; 0x42
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2243      	movs	r2, #67	; 0x43
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2244      	movs	r2, #68	; 0x44
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2245      	movs	r2, #69	; 0x45
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	; 0x3d
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d108      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x22>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	223e      	movs	r2, #62	; 0x3e
 8001d68:	5c9b      	ldrb	r3, [r3, r2]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	4193      	sbcs	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e01f      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d108      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x3a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	223f      	movs	r2, #63	; 0x3f
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	1e5a      	subs	r2, r3, #1
 8001d88:	4193      	sbcs	r3, r2
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e013      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d108      	bne.n	8001da6 <HAL_TIM_PWM_Start+0x52>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	4193      	sbcs	r3, r2
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	e007      	b.n	8001db6 <HAL_TIM_PWM_Start+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2241      	movs	r2, #65	; 0x41
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	4193      	sbcs	r3, r2
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e06e      	b.n	8001e9c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <HAL_TIM_PWM_Start+0x7a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	223e      	movs	r2, #62	; 0x3e
 8001dc8:	2102      	movs	r1, #2
 8001dca:	5499      	strb	r1, [r3, r2]
 8001dcc:	e013      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d104      	bne.n	8001dde <HAL_TIM_PWM_Start+0x8a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	223f      	movs	r2, #63	; 0x3f
 8001dd8:	2102      	movs	r1, #2
 8001dda:	5499      	strb	r1, [r3, r2]
 8001ddc:	e00b      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0x9a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2240      	movs	r2, #64	; 0x40
 8001de8:	2102      	movs	r1, #2
 8001dea:	5499      	strb	r1, [r3, r2]
 8001dec:	e003      	b.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2241      	movs	r2, #65	; 0x41
 8001df2:	2102      	movs	r1, #2
 8001df4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 feb2 	bl	8002b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_TIM_PWM_Start+0x150>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_TIM_PWM_Start+0xd8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <HAL_TIM_PWM_Start+0x154>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_TIM_PWM_Start+0xd8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <HAL_TIM_PWM_Start+0x158>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_TIM_PWM_Start+0xd8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_TIM_PWM_Start+0x15c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_TIM_PWM_Start+0xdc>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_TIM_PWM_Start+0xde>
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0209      	lsls	r1, r1, #8
 8001e44:	430a      	orrs	r2, r1
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a15      	ldr	r2, [pc, #84]	; (8001ea4 <HAL_TIM_PWM_Start+0x150>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x112>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_TIM_PWM_Start+0x160>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d004      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x112>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a11      	ldr	r2, [pc, #68]	; (8001ea8 <HAL_TIM_PWM_Start+0x154>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d111      	bne.n	8001e8a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d010      	beq.n	8001e9a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e88:	e007      	b.n	8001e9a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2101      	movs	r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f000 fe4c 	bl	8002b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <HAL_TIM_PWM_Stop+0xdc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_TIM_PWM_Stop+0x40>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_TIM_PWM_Stop+0xe0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d009      	beq.n	8001ef8 <HAL_TIM_PWM_Stop+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <HAL_TIM_PWM_Stop+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_PWM_Stop+0x40>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <HAL_TIM_PWM_Stop+0xe8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_PWM_Stop+0x44>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_TIM_PWM_Stop+0x46>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d013      	beq.n	8001f2a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_TIM_PWM_Stop+0xec>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d10d      	bne.n	8001f2a <HAL_TIM_PWM_Stop+0x72>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_TIM_PWM_Stop+0xf0>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	d107      	bne.n	8001f2a <HAL_TIM_PWM_Stop+0x72>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4921      	ldr	r1, [pc, #132]	; (8001fac <HAL_TIM_PWM_Stop+0xf4>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_TIM_PWM_Stop+0xec>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	d10d      	bne.n	8001f52 <HAL_TIM_PWM_Stop+0x9a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	4a1a      	ldr	r2, [pc, #104]	; (8001fa8 <HAL_TIM_PWM_Stop+0xf0>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_PWM_Stop+0x9a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	438a      	bics	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d104      	bne.n	8001f62 <HAL_TIM_PWM_Stop+0xaa>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	223e      	movs	r2, #62	; 0x3e
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	5499      	strb	r1, [r3, r2]
 8001f60:	e013      	b.n	8001f8a <HAL_TIM_PWM_Stop+0xd2>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d104      	bne.n	8001f72 <HAL_TIM_PWM_Stop+0xba>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	223f      	movs	r2, #63	; 0x3f
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	5499      	strb	r1, [r3, r2]
 8001f70:	e00b      	b.n	8001f8a <HAL_TIM_PWM_Stop+0xd2>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d104      	bne.n	8001f82 <HAL_TIM_PWM_Stop+0xca>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2240      	movs	r2, #64	; 0x40
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	5499      	strb	r1, [r3, r2]
 8001f80:	e003      	b.n	8001f8a <HAL_TIM_PWM_Stop+0xd2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2241      	movs	r2, #65	; 0x41
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	00001111 	.word	0x00001111
 8001fa8:	00000444 	.word	0x00000444
 8001fac:	ffff7fff 	.word	0xffff7fff

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d124      	bne.n	8002010 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11d      	bne.n	8002010 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	4252      	negs	r2, r2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	2203      	movs	r2, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fa94 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e007      	b.n	800200a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fa87 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	0018      	movs	r0, r3
 8002006:	f000 fa93 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2204      	movs	r2, #4
 8002018:	4013      	ands	r3, r2
 800201a:	2b04      	cmp	r3, #4
 800201c:	d125      	bne.n	800206a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11e      	bne.n	800206a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2205      	movs	r2, #5
 8002032:	4252      	negs	r2, r2
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	23c0      	movs	r3, #192	; 0xc0
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 fa67 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8002052:	e007      	b.n	8002064 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fa5a 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fa66 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2208      	movs	r2, #8
 8002072:	4013      	ands	r3, r2
 8002074:	2b08      	cmp	r3, #8
 8002076:	d124      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2208      	movs	r2, #8
 8002080:	4013      	ands	r3, r2
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11d      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2209      	movs	r2, #9
 800208c:	4252      	negs	r2, r2
 800208e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2204      	movs	r2, #4
 8002094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2203      	movs	r2, #3
 800209e:	4013      	ands	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f000 fa3b 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 80020aa:	e007      	b.n	80020bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f000 fa2e 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 fa3a 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2210      	movs	r2, #16
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d125      	bne.n	800211c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2210      	movs	r2, #16
 80020d8:	4013      	ands	r3, r2
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d11e      	bne.n	800211c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2211      	movs	r2, #17
 80020e4:	4252      	negs	r2, r2
 80020e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2208      	movs	r2, #8
 80020ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69da      	ldr	r2, [r3, #28]
 80020f4:	23c0      	movs	r3, #192	; 0xc0
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 fa0e 	bl	8002520 <HAL_TIM_IC_CaptureCallback>
 8002104:	e007      	b.n	8002116 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 fa01 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 fa0d 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10f      	bne.n	800214a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	4013      	ands	r3, r2
 8002134:	2b01      	cmp	r3, #1
 8002136:	d108      	bne.n	800214a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	4252      	negs	r2, r2
 8002140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	0018      	movs	r0, r3
 8002146:	f7fe fc1d 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	4013      	ands	r3, r2
 8002154:	2b80      	cmp	r3, #128	; 0x80
 8002156:	d10f      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	4013      	ands	r3, r2
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d108      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2281      	movs	r2, #129	; 0x81
 800216c:	4252      	negs	r2, r2
 800216e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 fdda 	bl	8002d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2240      	movs	r2, #64	; 0x40
 8002180:	4013      	ands	r3, r2
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d10f      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	4013      	ands	r3, r2
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d108      	bne.n	80021a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2241      	movs	r2, #65	; 0x41
 800219a:	4252      	negs	r2, r2
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f9cd 	bl	8002540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2220      	movs	r2, #32
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d10f      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	4013      	ands	r3, r2
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d108      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2221      	movs	r2, #33	; 0x21
 80021c8:	4252      	negs	r2, r2
 80021ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f000 fda4 	bl	8002d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2317      	movs	r3, #23
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	223c      	movs	r2, #60	; 0x3c
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0ad      	b.n	800235a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	223c      	movs	r2, #60	; 0x3c
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d100      	bne.n	800220e <HAL_TIM_PWM_ConfigChannel+0x32>
 800220c:	e076      	b.n	80022fc <HAL_TIM_PWM_ConfigChannel+0x120>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d900      	bls.n	8002216 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002214:	e095      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d04e      	beq.n	80022ba <HAL_TIM_PWM_ConfigChannel+0xde>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b08      	cmp	r3, #8
 8002220:	d900      	bls.n	8002224 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002222:	e08e      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_PWM_ConfigChannel+0x56>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d021      	beq.n	8002274 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002230:	e087      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f9fe 	bl	800263c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2108      	movs	r1, #8
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2104      	movs	r1, #4
 800225c:	438a      	bics	r2, r1
 800225e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6999      	ldr	r1, [r3, #24]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	619a      	str	r2, [r3, #24]
      break;
 8002272:	e06b      	b.n	800234c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f000 fa65 	bl	800274c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2180      	movs	r1, #128	; 0x80
 800228e:	0109      	lsls	r1, r1, #4
 8002290:	430a      	orrs	r2, r1
 8002292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4931      	ldr	r1, [pc, #196]	; (8002364 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80022a0:	400a      	ands	r2, r1
 80022a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6999      	ldr	r1, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	021a      	lsls	r2, r3, #8
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	619a      	str	r2, [r3, #24]
      break;
 80022b8:	e048      	b.n	800234c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	0011      	movs	r1, r2
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fac6 	bl	8002854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2108      	movs	r1, #8
 80022d4:	430a      	orrs	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69da      	ldr	r2, [r3, #28]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2104      	movs	r1, #4
 80022e4:	438a      	bics	r2, r1
 80022e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69d9      	ldr	r1, [r3, #28]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	61da      	str	r2, [r3, #28]
      break;
 80022fa:	e027      	b.n	800234c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	0011      	movs	r1, r2
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fb2b 	bl	8002960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2180      	movs	r1, #128	; 0x80
 8002316:	0109      	lsls	r1, r1, #4
 8002318:	430a      	orrs	r2, r1
 800231a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	490f      	ldr	r1, [pc, #60]	; (8002364 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002328:	400a      	ands	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69d9      	ldr	r1, [r3, #28]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	61da      	str	r2, [r3, #28]
      break;
 8002340:	e004      	b.n	800234c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002342:	2317      	movs	r3, #23
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
      break;
 800234a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	223c      	movs	r2, #60	; 0x3c
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]

  return status;
 8002354:	2317      	movs	r3, #23
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	781b      	ldrb	r3, [r3, #0]
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	fffffbff 	.word	0xfffffbff

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223c      	movs	r2, #60	; 0x3c
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIM_ConfigClockSource+0x20>
 8002384:	2302      	movs	r3, #2
 8002386:	e0bc      	b.n	8002502 <HAL_TIM_ConfigClockSource+0x19a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	223c      	movs	r2, #60	; 0x3c
 800238c:	2101      	movs	r1, #1
 800238e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	223d      	movs	r2, #61	; 0x3d
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2277      	movs	r2, #119	; 0x77
 80023a4:	4393      	bics	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	0192      	lsls	r2, r2, #6
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d040      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xde>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0192      	lsls	r2, r2, #6
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d900      	bls.n	80023ce <HAL_TIM_ConfigClockSource+0x66>
 80023cc:	e088      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	0152      	lsls	r2, r2, #5
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_TIM_ConfigClockSource+0x70>
 80023d6:	e088      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x182>
 80023d8:	2280      	movs	r2, #128	; 0x80
 80023da:	0152      	lsls	r2, r2, #5
 80023dc:	4293      	cmp	r3, r2
 80023de:	d900      	bls.n	80023e2 <HAL_TIM_ConfigClockSource+0x7a>
 80023e0:	e07e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023e2:	2b70      	cmp	r3, #112	; 0x70
 80023e4:	d018      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xb0>
 80023e6:	d900      	bls.n	80023ea <HAL_TIM_ConfigClockSource+0x82>
 80023e8:	e07a      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023ea:	2b60      	cmp	r3, #96	; 0x60
 80023ec:	d04f      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x126>
 80023ee:	d900      	bls.n	80023f2 <HAL_TIM_ConfigClockSource+0x8a>
 80023f0:	e076      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023f2:	2b50      	cmp	r3, #80	; 0x50
 80023f4:	d03b      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x106>
 80023f6:	d900      	bls.n	80023fa <HAL_TIM_ConfigClockSource+0x92>
 80023f8:	e072      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d057      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x146>
 80023fe:	d900      	bls.n	8002402 <HAL_TIM_ConfigClockSource+0x9a>
 8002400:	e06e      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002402:	2b30      	cmp	r3, #48	; 0x30
 8002404:	d063      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002406:	d86b      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d060      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 800240c:	d868      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d05d      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d05b      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x166>
 8002416:	e063      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f000 fb7e 	bl	8002b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2277      	movs	r2, #119	; 0x77
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	609a      	str	r2, [r3, #8]
      break;
 8002444:	e052      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f000 fb67 	bl	8002b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	01c9      	lsls	r1, r1, #7
 8002468:	430a      	orrs	r2, r1
 800246a:	609a      	str	r2, [r3, #8]
      break;
 800246c:	e03e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	001a      	movs	r2, r3
 800247c:	f000 fada 	bl	8002a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2150      	movs	r1, #80	; 0x50
 8002486:	0018      	movs	r0, r3
 8002488:	f000 fb34 	bl	8002af4 <TIM_ITRx_SetConfig>
      break;
 800248c:	e02e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	001a      	movs	r2, r3
 800249c:	f000 faf8 	bl	8002a90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2160      	movs	r1, #96	; 0x60
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fb24 	bl	8002af4 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e01e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	001a      	movs	r2, r3
 80024bc:	f000 faba 	bl	8002a34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 fb14 	bl	8002af4 <TIM_ITRx_SetConfig>
      break;
 80024cc:	e00e      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0019      	movs	r1, r3
 80024d8:	0010      	movs	r0, r2
 80024da:	f000 fb0b 	bl	8002af4 <TIM_ITRx_SetConfig>
      break;
 80024de:	e005      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024e0:	230f      	movs	r3, #15
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	223d      	movs	r2, #61	; 0x3d
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	223c      	movs	r2, #60	; 0x3c
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]

  return status;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	ffff00ff 	.word	0xffff00ff

08002510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002518:	46c0      	nop			; (mov r8, r8)
 800251a:	46bd      	mov	sp, r7
 800251c:	b002      	add	sp, #8
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <TIM_Base_SetConfig+0xd0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d003      	beq.n	8002570 <TIM_Base_SetConfig+0x20>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <TIM_Base_SetConfig+0xd4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d108      	bne.n	8002582 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2270      	movs	r2, #112	; 0x70
 8002574:	4393      	bics	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <TIM_Base_SetConfig+0xd0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <TIM_Base_SetConfig+0xd4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00f      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <TIM_Base_SetConfig+0xd8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00b      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <TIM_Base_SetConfig+0xdc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <TIM_Base_SetConfig+0xe0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <TIM_Base_SetConfig+0x62>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a21      	ldr	r2, [pc, #132]	; (8002634 <TIM_Base_SetConfig+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d108      	bne.n	80025c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <TIM_Base_SetConfig+0xe8>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	4393      	bics	r3, r2
 80025ca:	001a      	movs	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <TIM_Base_SetConfig+0xd0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <TIM_Base_SetConfig+0xdc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <TIM_Base_SetConfig+0xe0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0xba>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <TIM_Base_SetConfig+0xe4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d103      	bne.n	8002612 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	615a      	str	r2, [r3, #20]
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40012c00 	.word	0x40012c00
 8002624:	40000400 	.word	0x40000400
 8002628:	40002000 	.word	0x40002000
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800
 8002638:	fffffcff 	.word	0xfffffcff

0800263c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	2201      	movs	r2, #1
 800264c:	4393      	bics	r3, r2
 800264e:	001a      	movs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2270      	movs	r2, #112	; 0x70
 800266a:	4393      	bics	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2203      	movs	r2, #3
 8002672:	4393      	bics	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2202      	movs	r2, #2
 8002684:	4393      	bics	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <TIM_OC1_SetConfig+0xf8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_OC1_SetConfig+0x76>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <TIM_OC1_SetConfig+0xfc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_OC1_SetConfig+0x76>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a25      	ldr	r2, [pc, #148]	; (800273c <TIM_OC1_SetConfig+0x100>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_OC1_SetConfig+0x76>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <TIM_OC1_SetConfig+0x104>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10c      	bne.n	80026cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2208      	movs	r2, #8
 80026b6:	4393      	bics	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2204      	movs	r2, #4
 80026c8:	4393      	bics	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <TIM_OC1_SetConfig+0xf8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00b      	beq.n	80026ec <TIM_OC1_SetConfig+0xb0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <TIM_OC1_SetConfig+0xfc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_OC1_SetConfig+0xb0>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <TIM_OC1_SetConfig+0x100>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_OC1_SetConfig+0xb0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a16      	ldr	r2, [pc, #88]	; (8002740 <TIM_OC1_SetConfig+0x104>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d111      	bne.n	8002710 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <TIM_OC1_SetConfig+0x108>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <TIM_OC1_SetConfig+0x10c>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40014000 	.word	0x40014000
 800273c:	40014400 	.word	0x40014400
 8002740:	40014800 	.word	0x40014800
 8002744:	fffffeff 	.word	0xfffffeff
 8002748:	fffffdff 	.word	0xfffffdff

0800274c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	2210      	movs	r2, #16
 800275c:	4393      	bics	r3, r2
 800275e:	001a      	movs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <TIM_OC2_SetConfig+0xe8>)
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <TIM_OC2_SetConfig+0xec>)
 8002782:	4013      	ands	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2220      	movs	r2, #32
 8002796:	4393      	bics	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a24      	ldr	r2, [pc, #144]	; (800283c <TIM_OC2_SetConfig+0xf0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	4393      	bics	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	4393      	bics	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <TIM_OC2_SetConfig+0xf0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_OC2_SetConfig+0x9e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a1a      	ldr	r2, [pc, #104]	; (8002840 <TIM_OC2_SetConfig+0xf4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_OC2_SetConfig+0x9e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <TIM_OC2_SetConfig+0xf8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_OC2_SetConfig+0x9e>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <TIM_OC2_SetConfig+0xfc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d113      	bne.n	8002812 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <TIM_OC2_SetConfig+0x100>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <TIM_OC2_SetConfig+0x104>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	621a      	str	r2, [r3, #32]
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b006      	add	sp, #24
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffff8fff 	.word	0xffff8fff
 8002838:	fffffcff 	.word	0xfffffcff
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40014000 	.word	0x40014000
 8002844:	40014400 	.word	0x40014400
 8002848:	40014800 	.word	0x40014800
 800284c:	fffffbff 	.word	0xfffffbff
 8002850:	fffff7ff 	.word	0xfffff7ff

08002854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a35      	ldr	r2, [pc, #212]	; (8002938 <TIM_OC3_SetConfig+0xe4>)
 8002864:	401a      	ands	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2270      	movs	r2, #112	; 0x70
 8002880:	4393      	bics	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2203      	movs	r2, #3
 8002888:	4393      	bics	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a28      	ldr	r2, [pc, #160]	; (800293c <TIM_OC3_SetConfig+0xe8>)
 800289a:	4013      	ands	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <TIM_OC3_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10d      	bne.n	80028ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <TIM_OC3_SetConfig+0xf0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <TIM_OC3_SetConfig+0xf4>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <TIM_OC3_SetConfig+0xec>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <TIM_OC3_SetConfig+0x9a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <TIM_OC3_SetConfig+0xf8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_OC3_SetConfig+0x9a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <TIM_OC3_SetConfig+0xfc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <TIM_OC3_SetConfig+0x9a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <TIM_OC3_SetConfig+0x100>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d113      	bne.n	8002916 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <TIM_OC3_SetConfig+0x104>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <TIM_OC3_SetConfig+0x108>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	621a      	str	r2, [r3, #32]
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b006      	add	sp, #24
 8002936:	bd80      	pop	{r7, pc}
 8002938:	fffffeff 	.word	0xfffffeff
 800293c:	fffffdff 	.word	0xfffffdff
 8002940:	40012c00 	.word	0x40012c00
 8002944:	fffff7ff 	.word	0xfffff7ff
 8002948:	fffffbff 	.word	0xfffffbff
 800294c:	40014000 	.word	0x40014000
 8002950:	40014400 	.word	0x40014400
 8002954:	40014800 	.word	0x40014800
 8002958:	ffffefff 	.word	0xffffefff
 800295c:	ffffdfff 	.word	0xffffdfff

08002960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <TIM_OC4_SetConfig+0xb0>)
 8002970:	401a      	ands	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <TIM_OC4_SetConfig+0xb4>)
 800298c:	4013      	ands	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_OC4_SetConfig+0xb8>)
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	021b      	lsls	r3, r3, #8
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <TIM_OC4_SetConfig+0xbc>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	031b      	lsls	r3, r3, #12
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <TIM_OC4_SetConfig+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <TIM_OC4_SetConfig+0x78>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <TIM_OC4_SetConfig+0xc4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <TIM_OC4_SetConfig+0x78>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <TIM_OC4_SetConfig+0xc8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_OC4_SetConfig+0x78>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <TIM_OC4_SetConfig+0xcc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d109      	bne.n	80029ec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <TIM_OC4_SetConfig+0xd0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b006      	add	sp, #24
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	ffffefff 	.word	0xffffefff
 8002a14:	ffff8fff 	.word	0xffff8fff
 8002a18:	fffffcff 	.word	0xfffffcff
 8002a1c:	ffffdfff 	.word	0xffffdfff
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40014000 	.word	0x40014000
 8002a28:	40014400 	.word	0x40014400
 8002a2c:	40014800 	.word	0x40014800
 8002a30:	ffffbfff 	.word	0xffffbfff

08002a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	001a      	movs	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	22f0      	movs	r2, #240	; 0xf0
 8002a5e:	4393      	bics	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	220a      	movs	r2, #10
 8002a70:	4393      	bics	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b006      	add	sp, #24
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <TIM_TI2_ConfigInputStage+0x60>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	22a0      	movs	r2, #160	; 0xa0
 8002acc:	4393      	bics	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	621a      	str	r2, [r3, #32]
}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b006      	add	sp, #24
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	ffff0fff 	.word	0xffff0fff

08002af4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2270      	movs	r2, #112	; 0x70
 8002b08:	4393      	bics	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	2207      	movs	r2, #7
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	609a      	str	r2, [r3, #8]
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <TIM_ETR_SetConfig+0x3c>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	609a      	str	r2, [r3, #8]
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b006      	add	sp, #24
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	ffff00ff 	.word	0xffff00ff

08002b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	221f      	movs	r2, #31
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	43d2      	mvns	r2, r2
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	211f      	movs	r1, #31
 8002b98:	400b      	ands	r3, r1
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4099      	lsls	r1, r3
 8002b9e:	000b      	movs	r3, r1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223c      	movs	r2, #60	; 0x3c
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e041      	b.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	223c      	movs	r2, #60	; 0x3c
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223d      	movs	r2, #61	; 0x3d
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2270      	movs	r2, #112	; 0x70
 8002bec:	4393      	bics	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10c      	bne.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	4393      	bics	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223d      	movs	r2, #61	; 0x3d
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223c      	movs	r2, #60	; 0x3c
 8002c46:	2100      	movs	r1, #0
 8002c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40014000 	.word	0x40014000

08002c60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	5c9b      	ldrb	r3, [r3, r2]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e03e      	b.n	8002cfa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	223c      	movs	r2, #60	; 0x3c
 8002c80:	2101      	movs	r1, #1
 8002c82:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	4393      	bics	r3, r2
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002c98:	401a      	ands	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002cde:	401a      	ands	r2, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	223c      	movs	r2, #60	; 0x3c
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	fffffcff 	.word	0xfffffcff
 8002d08:	fffffbff 	.word	0xfffffbff
 8002d0c:	fffff7ff 	.word	0xfffff7ff
 8002d10:	ffffefff 	.word	0xffffefff
 8002d14:	ffffdfff 	.word	0xffffdfff
 8002d18:	ffffbfff 	.word	0xffffbfff

08002d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e044      	b.n	8002dd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2274      	movs	r2, #116	; 0x74
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f7fd feb1 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2224      	movs	r2, #36	; 0x24
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 f830 	bl	8002de4 <UART_SetConfig>
 8002d84:	0003      	movs	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e024      	b.n	8002dd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f97b 	bl	8003094 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	490d      	ldr	r1, [pc, #52]	; (8002de0 <HAL_UART_Init+0xa4>)
 8002daa:	400a      	ands	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2108      	movs	r1, #8
 8002dba:	438a      	bics	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 fa13 	bl	80031fc <UART_CheckIdleState>
 8002dd6:	0003      	movs	r3, r0
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b002      	add	sp, #8
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	fffff7ff 	.word	0xfffff7ff

08002de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dec:	231e      	movs	r3, #30
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a97      	ldr	r2, [pc, #604]	; (8003070 <UART_SetConfig+0x28c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a92      	ldr	r2, [pc, #584]	; (8003074 <UART_SetConfig+0x290>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a89      	ldr	r2, [pc, #548]	; (8003078 <UART_SetConfig+0x294>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a85      	ldr	r2, [pc, #532]	; (800307c <UART_SetConfig+0x298>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d127      	bne.n	8002eba <UART_SetConfig+0xd6>
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <UART_SetConfig+0x29c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d00d      	beq.n	8002e92 <UART_SetConfig+0xae>
 8002e76:	d81b      	bhi.n	8002eb0 <UART_SetConfig+0xcc>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d014      	beq.n	8002ea6 <UART_SetConfig+0xc2>
 8002e7c:	d818      	bhi.n	8002eb0 <UART_SetConfig+0xcc>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <UART_SetConfig+0xa4>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d00a      	beq.n	8002e9c <UART_SetConfig+0xb8>
 8002e86:	e013      	b.n	8002eb0 <UART_SetConfig+0xcc>
 8002e88:	231f      	movs	r3, #31
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e035      	b.n	8002efe <UART_SetConfig+0x11a>
 8002e92:	231f      	movs	r3, #31
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e030      	b.n	8002efe <UART_SetConfig+0x11a>
 8002e9c:	231f      	movs	r3, #31
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e02b      	b.n	8002efe <UART_SetConfig+0x11a>
 8002ea6:	231f      	movs	r3, #31
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e026      	b.n	8002efe <UART_SetConfig+0x11a>
 8002eb0:	231f      	movs	r3, #31
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e021      	b.n	8002efe <UART_SetConfig+0x11a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a71      	ldr	r2, [pc, #452]	; (8003084 <UART_SetConfig+0x2a0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d104      	bne.n	8002ece <UART_SetConfig+0xea>
 8002ec4:	231f      	movs	r3, #31
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	e017      	b.n	8002efe <UART_SetConfig+0x11a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6d      	ldr	r2, [pc, #436]	; (8003088 <UART_SetConfig+0x2a4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d104      	bne.n	8002ee2 <UART_SetConfig+0xfe>
 8002ed8:	231f      	movs	r3, #31
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e00d      	b.n	8002efe <UART_SetConfig+0x11a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a69      	ldr	r2, [pc, #420]	; (800308c <UART_SetConfig+0x2a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d104      	bne.n	8002ef6 <UART_SetConfig+0x112>
 8002eec:	231f      	movs	r3, #31
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e003      	b.n	8002efe <UART_SetConfig+0x11a>
 8002ef6:	231f      	movs	r3, #31
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2210      	movs	r2, #16
 8002efc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d15d      	bne.n	8002fc6 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8002f0a:	231f      	movs	r3, #31
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d015      	beq.n	8002f40 <UART_SetConfig+0x15c>
 8002f14:	dc18      	bgt.n	8002f48 <UART_SetConfig+0x164>
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d00d      	beq.n	8002f36 <UART_SetConfig+0x152>
 8002f1a:	dc15      	bgt.n	8002f48 <UART_SetConfig+0x164>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <UART_SetConfig+0x142>
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0x14c>
 8002f24:	e010      	b.n	8002f48 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f26:	f7fe fde1 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	61bb      	str	r3, [r7, #24]
        break;
 8002f2e:	e012      	b.n	8002f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f30:	4b57      	ldr	r3, [pc, #348]	; (8003090 <UART_SetConfig+0x2ac>)
 8002f32:	61bb      	str	r3, [r7, #24]
        break;
 8002f34:	e00f      	b.n	8002f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f36:	f7fe fd69 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	61bb      	str	r3, [r7, #24]
        break;
 8002f3e:	e00a      	b.n	8002f56 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	61bb      	str	r3, [r7, #24]
        break;
 8002f46:	e006      	b.n	8002f56 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f4c:	231e      	movs	r3, #30
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
        break;
 8002f54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d100      	bne.n	8002f5e <UART_SetConfig+0x17a>
 8002f5c:	e07b      	b.n	8003056 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	005a      	lsls	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	18d2      	adds	r2, r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	0010      	movs	r0, r2
 8002f72:	f7fd f8c9 	bl	8000108 <__udivsi3>
 8002f76:	0003      	movs	r3, r0
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d91c      	bls.n	8002fbc <UART_SetConfig+0x1d8>
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d217      	bcs.n	8002fbc <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	200e      	movs	r0, #14
 8002f92:	183b      	adds	r3, r7, r0
 8002f94:	210f      	movs	r1, #15
 8002f96:	438a      	bics	r2, r1
 8002f98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b299      	uxth	r1, r3
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	183a      	adds	r2, r7, r0
 8002faa:	8812      	ldrh	r2, [r2, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	183a      	adds	r2, r7, r0
 8002fb6:	8812      	ldrh	r2, [r2, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e04c      	b.n	8003056 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8002fbc:	231e      	movs	r3, #30
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e047      	b.n	8003056 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d015      	beq.n	8002ffc <UART_SetConfig+0x218>
 8002fd0:	dc18      	bgt.n	8003004 <UART_SetConfig+0x220>
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00d      	beq.n	8002ff2 <UART_SetConfig+0x20e>
 8002fd6:	dc15      	bgt.n	8003004 <UART_SetConfig+0x220>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <UART_SetConfig+0x1fe>
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x208>
 8002fe0:	e010      	b.n	8003004 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7fe fd83 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	61bb      	str	r3, [r7, #24]
        break;
 8002fea:	e012      	b.n	8003012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <UART_SetConfig+0x2ac>)
 8002fee:	61bb      	str	r3, [r7, #24]
        break;
 8002ff0:	e00f      	b.n	8003012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7fe fd0b 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	61bb      	str	r3, [r7, #24]
        break;
 8002ffa:	e00a      	b.n	8003012 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	61bb      	str	r3, [r7, #24]
        break;
 8003002:	e006      	b.n	8003012 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003008:	231e      	movs	r3, #30
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
        break;
 8003010:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01e      	beq.n	8003056 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	085a      	lsrs	r2, r3, #1
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	18d2      	adds	r2, r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0019      	movs	r1, r3
 8003028:	0010      	movs	r0, r2
 800302a:	f7fd f86d 	bl	8000108 <__udivsi3>
 800302e:	0003      	movs	r3, r0
 8003030:	b29b      	uxth	r3, r3
 8003032:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d909      	bls.n	800304e <UART_SetConfig+0x26a>
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	025b      	lsls	r3, r3, #9
 8003040:	429a      	cmp	r2, r3
 8003042:	d204      	bcs.n	800304e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	60da      	str	r2, [r3, #12]
 800304c:	e003      	b.n	8003056 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800304e:	231e      	movs	r3, #30
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003062:	231e      	movs	r3, #30
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b008      	add	sp, #32
 800306e:	bd80      	pop	{r7, pc}
 8003070:	efff69f3 	.word	0xefff69f3
 8003074:	ffffcfff 	.word	0xffffcfff
 8003078:	fffff4ff 	.word	0xfffff4ff
 800307c:	40013800 	.word	0x40013800
 8003080:	40021000 	.word	0x40021000
 8003084:	40004400 	.word	0x40004400
 8003088:	40004800 	.word	0x40004800
 800308c:	40004c00 	.word	0x40004c00
 8003090:	007a1200 	.word	0x007a1200

08003094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	2201      	movs	r2, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	d00b      	beq.n	80030be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a4a      	ldr	r2, [pc, #296]	; (80031d8 <UART_AdvFeatureConfig+0x144>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d00b      	beq.n	80030e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a43      	ldr	r2, [pc, #268]	; (80031dc <UART_AdvFeatureConfig+0x148>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2204      	movs	r2, #4
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00b      	beq.n	8003102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a3b      	ldr	r2, [pc, #236]	; (80031e0 <UART_AdvFeatureConfig+0x14c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2208      	movs	r2, #8
 8003108:	4013      	ands	r3, r2
 800310a:	d00b      	beq.n	8003124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4a34      	ldr	r2, [pc, #208]	; (80031e4 <UART_AdvFeatureConfig+0x150>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2210      	movs	r2, #16
 800312a:	4013      	ands	r3, r2
 800312c:	d00b      	beq.n	8003146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <UART_AdvFeatureConfig+0x154>)
 8003136:	4013      	ands	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2220      	movs	r2, #32
 800314c:	4013      	ands	r3, r2
 800314e:	d00b      	beq.n	8003168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4a25      	ldr	r2, [pc, #148]	; (80031ec <UART_AdvFeatureConfig+0x158>)
 8003158:	4013      	ands	r3, r2
 800315a:	0019      	movs	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2240      	movs	r2, #64	; 0x40
 800316e:	4013      	ands	r3, r2
 8003170:	d01d      	beq.n	80031ae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <UART_AdvFeatureConfig+0x15c>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	035b      	lsls	r3, r3, #13
 8003192:	429a      	cmp	r2, r3
 8003194:	d10b      	bne.n	80031ae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <UART_AdvFeatureConfig+0x160>)
 800319e:	4013      	ands	r3, r2
 80031a0:	0019      	movs	r1, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	4013      	ands	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <UART_AdvFeatureConfig+0x164>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
  }
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	fffdffff 	.word	0xfffdffff
 80031dc:	fffeffff 	.word	0xfffeffff
 80031e0:	fffbffff 	.word	0xfffbffff
 80031e4:	ffff7fff 	.word	0xffff7fff
 80031e8:	ffffefff 	.word	0xffffefff
 80031ec:	ffffdfff 	.word	0xffffdfff
 80031f0:	ffefffff 	.word	0xffefffff
 80031f4:	ff9fffff 	.word	0xff9fffff
 80031f8:	fff7ffff 	.word	0xfff7ffff

080031fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	2100      	movs	r1, #0
 800320a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800320c:	f7fd fd94 	bl	8000d38 <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2208      	movs	r2, #8
 800321c:	4013      	ands	r3, r2
 800321e:	2b08      	cmp	r3, #8
 8003220:	d10c      	bne.n	800323c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0391      	lsls	r1, r2, #14
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4a17      	ldr	r2, [pc, #92]	; (8003288 <UART_CheckIdleState+0x8c>)
 800322c:	9200      	str	r2, [sp, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	f000 f82c 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d001      	beq.n	800323c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e021      	b.n	8003280 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2204      	movs	r2, #4
 8003244:	4013      	ands	r3, r2
 8003246:	2b04      	cmp	r3, #4
 8003248:	d10c      	bne.n	8003264 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	03d1      	lsls	r1, r2, #15
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <UART_CheckIdleState+0x8c>)
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	f000 f818 	bl	800328c <UART_WaitOnFlagUntilTimeout>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e00d      	b.n	8003280 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2274      	movs	r2, #116	; 0x74
 800327a:	2100      	movs	r1, #0
 800327c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b004      	add	sp, #16
 8003286:	bd80      	pop	{r7, pc}
 8003288:	01ffffff 	.word	0x01ffffff

0800328c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b094      	sub	sp, #80	; 0x50
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800329c:	e0a3      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a0:	3301      	adds	r3, #1
 80032a2:	d100      	bne.n	80032a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80032a4:	e09f      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fd fd47 	bl	8000d38 <HAL_GetTick>
 80032aa:	0002      	movs	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <UART_WaitOnFlagUntilTimeout+0x30>
 80032b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d13d      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032c4:	647b      	str	r3, [r7, #68]	; 0x44
 80032c6:	2301      	movs	r3, #1
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	494c      	ldr	r1, [pc, #304]	; (8003410 <UART_WaitOnFlagUntilTimeout+0x184>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ee:	f3ef 8310 	mrs	r3, PRIMASK
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80032f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	643b      	str	r3, [r7, #64]	; 0x40
 80032f8:	2301      	movs	r3, #1
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	438a      	bics	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2274      	movs	r2, #116	; 0x74
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e067      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2204      	movs	r2, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d050      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	401a      	ands	r2, r3
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	429a      	cmp	r2, r3
 8003356:	d146      	bne.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003362:	f3ef 8310 	mrs	r3, PRIMASK
 8003366:	613b      	str	r3, [r7, #16]
  return(result);
 8003368:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4923      	ldr	r1, [pc, #140]	; (8003410 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003384:	400a      	ands	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800338a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003394:	f3ef 8310 	mrs	r3, PRIMASK
 8003398:	61fb      	str	r3, [r7, #28]
  return(result);
 800339a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
 800339e:	2301      	movs	r3, #1
 80033a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	438a      	bics	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	2120      	movs	r1, #32
 80033d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2274      	movs	r2, #116	; 0x74
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e010      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	425a      	negs	r2, r3
 80033f6:	4153      	adcs	r3, r2
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	001a      	movs	r2, r3
 80033fc:	1dfb      	adds	r3, r7, #7
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d100      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003404:	e74b      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b014      	add	sp, #80	; 0x50
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fffffe5f 	.word	0xfffffe5f

08003414 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341a:	f3ef 8305 	mrs	r3, IPSR
 800341e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003420:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003426:	f3ef 8310 	mrs	r3, PRIMASK
 800342a:	607b      	str	r3, [r7, #4]
  return(result);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <osKernelInitialize+0x2e>
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <osKernelInitialize+0x54>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d103      	bne.n	8003442 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800343a:	2306      	movs	r3, #6
 800343c:	425b      	negs	r3, r3
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e00c      	b.n	800345c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <osKernelInitialize+0x54>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <osKernelInitialize+0x54>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e002      	b.n	800345c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003456:	2301      	movs	r3, #1
 8003458:	425b      	negs	r3, r3
 800345a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800345c:	68fb      	ldr	r3, [r7, #12]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	200001cc 	.word	0x200001cc

0800346c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003472:	f3ef 8305 	mrs	r3, IPSR
 8003476:	60bb      	str	r3, [r7, #8]
  return(result);
 8003478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800347e:	f3ef 8310 	mrs	r3, PRIMASK
 8003482:	607b      	str	r3, [r7, #4]
  return(result);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <osKernelStart+0x2e>
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <osKernelStart+0x58>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d103      	bne.n	800349a <osKernelStart+0x2e>
    stat = osErrorISR;
 8003492:	2306      	movs	r3, #6
 8003494:	425b      	negs	r3, r3
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e00e      	b.n	80034b8 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <osKernelStart+0x58>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d107      	bne.n	80034b2 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80034a2:	4b08      	ldr	r3, [pc, #32]	; (80034c4 <osKernelStart+0x58>)
 80034a4:	2202      	movs	r2, #2
 80034a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034a8:	f000 ff94 	bl	80043d4 <vTaskStartScheduler>
      stat = osOK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e002      	b.n	80034b8 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80034b2:	2301      	movs	r3, #1
 80034b4:	425b      	negs	r3, r3
 80034b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b004      	add	sp, #16
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	200001cc 	.word	0x200001cc

080034c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b090      	sub	sp, #64	; 0x40
 80034cc:	af04      	add	r7, sp, #16
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034d8:	f3ef 8305 	mrs	r3, IPSR
 80034dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80034de:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d000      	beq.n	80034e6 <osThreadNew+0x1e>
 80034e4:	e090      	b.n	8003608 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <osThreadNew+0x34>
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <osThreadNew+0x14c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d100      	bne.n	80034fc <osThreadNew+0x34>
 80034fa:	e085      	b.n	8003608 <osThreadNew+0x140>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d100      	bne.n	8003504 <osThreadNew+0x3c>
 8003502:	e081      	b.n	8003608 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003508:	2318      	movs	r3, #24
 800350a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 800350c:	2117      	movs	r1, #23
 800350e:	187b      	adds	r3, r7, r1
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8003514:	187b      	adds	r3, r7, r1
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003518:	2301      	movs	r3, #1
 800351a:	425b      	negs	r3, r3
 800351c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d044      	beq.n	80035ae <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <osThreadNew+0x6a>
        name = attr->name;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <osThreadNew+0x8e>
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2b38      	cmp	r3, #56	; 0x38
 800354a:	d804      	bhi.n	8003556 <osThreadNew+0x8e>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d001      	beq.n	800355a <osThreadNew+0x92>
        return (NULL);
 8003556:	2300      	movs	r3, #0
 8003558:	e057      	b.n	800360a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <osThreadNew+0xc8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2bbb      	cmp	r3, #187	; 0xbb
 8003578:	d90a      	bls.n	8003590 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <osThreadNew+0xc8>
        mem = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	e010      	b.n	80035b2 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10c      	bne.n	80035b2 <osThreadNew+0xea>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <osThreadNew+0xea>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <osThreadNew+0xea>
          mem = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	e001      	b.n	80035b2 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d112      	bne.n	80035de <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c0:	68bd      	ldr	r5, [r7, #8]
 80035c2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80035c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	9201      	str	r2, [sp, #4]
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	002b      	movs	r3, r5
 80035d2:	0022      	movs	r2, r4
 80035d4:	f000 fd49 	bl	800406a <xTaskCreateStatic>
 80035d8:	0003      	movs	r3, r0
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	e014      	b.n	8003608 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68bc      	ldr	r4, [r7, #8]
 80035ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	2310      	movs	r3, #16
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	0023      	movs	r3, r4
 80035fa:	f000 fd79 	bl	80040f0 <xTaskCreate>
 80035fe:	0003      	movs	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <osThreadNew+0x140>
          hTask = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003608:	693b      	ldr	r3, [r7, #16]
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	b00c      	add	sp, #48	; 0x30
 8003610:	bdb0      	pop	{r4, r5, r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	200001cc 	.word	0x200001cc

08003618 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003620:	f3ef 8305 	mrs	r3, IPSR
 8003624:	613b      	str	r3, [r7, #16]
  return(result);
 8003626:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362c:	f3ef 8310 	mrs	r3, PRIMASK
 8003630:	60fb      	str	r3, [r7, #12]
  return(result);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <osDelay+0x30>
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <osDelay+0x4c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d103      	bne.n	8003648 <osDelay+0x30>
    stat = osErrorISR;
 8003640:	2306      	movs	r3, #6
 8003642:	425b      	negs	r3, r3
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e008      	b.n	800365a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <osDelay+0x42>
      vTaskDelay(ticks);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 fe97 	bl	8004388 <vTaskDelay>
    }
  }

  return (stat);
 800365a:	697b      	ldr	r3, [r7, #20]
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b006      	add	sp, #24
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200001cc 	.word	0x200001cc

08003668 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <vApplicationGetIdleTaskMemory+0x28>)
 8003678:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a05      	ldr	r2, [pc, #20]	; (8003694 <vApplicationGetIdleTaskMemory+0x2c>)
 800367e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b004      	add	sp, #16
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	200001d0 	.word	0x200001d0
 8003694:	2000028c 	.word	0x2000028c

08003698 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <vApplicationGetTimerTaskMemory+0x28>)
 80036a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80036ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0052      	lsls	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b004      	add	sp, #16
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000048c 	.word	0x2000048c
 80036c4:	20000548 	.word	0x20000548

080036c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3308      	adds	r3, #8
 80036d4:	001a      	movs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	4252      	negs	r2, r2
 80036e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3308      	adds	r3, #8
 80036e6:	001a      	movs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3308      	adds	r3, #8
 80036f0:	001a      	movs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}

0800371a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}

0800375e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3301      	adds	r3, #1
 8003772:	d103      	bne.n	800377c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e00c      	b.n	8003796 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3308      	adds	r3, #8
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e002      	b.n	800378a <vListInsert+0x2c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d2f6      	bcs.n	8003784 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b004      	add	sp, #16
 80037c8:	bd80      	pop	{r7, pc}

080037ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6892      	ldr	r2, [r2, #8]
 80037e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6852      	ldr	r2, [r2, #4]
 80037ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d103      	bne.n	80037fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}

0800381a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <xQueueGenericReset+0x18>
 800382e:	b672      	cpsid	i
 8003830:	e7fe      	b.n	8003830 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003832:	f001 fdfd 	bl	8005430 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	434b      	muls	r3, r1
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	1e59      	subs	r1, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	434b      	muls	r3, r1
 8003868:	18d2      	adds	r2, r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2244      	movs	r2, #68	; 0x44
 8003872:	21ff      	movs	r1, #255	; 0xff
 8003874:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2245      	movs	r2, #69	; 0x45
 800387a:	21ff      	movs	r1, #255	; 0xff
 800387c:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10d      	bne.n	80038a0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3310      	adds	r3, #16
 8003890:	0018      	movs	r0, r3
 8003892:	f000 fff5 	bl	8004880 <xTaskRemoveFromEventList>
 8003896:	1e03      	subs	r3, r0, #0
 8003898:	d00c      	beq.n	80038b4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800389a:	f001 fdb9 	bl	8005410 <vPortYield>
 800389e:	e009      	b.n	80038b4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3310      	adds	r3, #16
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff ff0f 	bl	80036c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3324      	adds	r3, #36	; 0x24
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7ff ff0a 	bl	80036c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038b4:	f001 fdce 	bl	8005454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038b8:	2301      	movs	r3, #1
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038c2:	b590      	push	{r4, r7, lr}
 80038c4:	b089      	sub	sp, #36	; 0x24
 80038c6:	af02      	add	r7, sp, #8
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <xQueueGenericCreateStatic+0x18>
 80038d6:	b672      	cpsid	i
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <xQueueGenericCreateStatic+0x22>
 80038e0:	b672      	cpsid	i
 80038e2:	e7fe      	b.n	80038e2 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <xQueueGenericCreateStatic+0x2e>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <xQueueGenericCreateStatic+0x32>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <xQueueGenericCreateStatic+0x34>
 80038f4:	2300      	movs	r3, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <xQueueGenericCreateStatic+0x3c>
 80038fa:	b672      	cpsid	i
 80038fc:	e7fe      	b.n	80038fc <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xQueueGenericCreateStatic+0x48>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <xQueueGenericCreateStatic+0x4c>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <xQueueGenericCreateStatic+0x4e>
 800390e:	2300      	movs	r3, #0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <xQueueGenericCreateStatic+0x56>
 8003914:	b672      	cpsid	i
 8003916:	e7fe      	b.n	8003916 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003918:	2350      	movs	r3, #80	; 0x50
 800391a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b50      	cmp	r3, #80	; 0x50
 8003920:	d001      	beq.n	8003926 <xQueueGenericCreateStatic+0x64>
 8003922:	b672      	cpsid	i
 8003924:	e7fe      	b.n	8003924 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2246      	movs	r2, #70	; 0x46
 8003934:	2101      	movs	r1, #1
 8003936:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003938:	2328      	movs	r3, #40	; 0x28
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781c      	ldrb	r4, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	0023      	movs	r3, r4
 800394a:	f000 f805 	bl	8003958 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800394e:	697b      	ldr	r3, [r7, #20]
	}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b007      	add	sp, #28
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	001a      	movs	r2, r3
 8003966:	1cfb      	adds	r3, r7, #3
 8003968:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2101      	movs	r1, #1
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff43 	bl	800381a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1cfa      	adds	r2, r7, #3
 8003998:	214c      	movs	r1, #76	; 0x4c
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08a      	sub	sp, #40	; 0x28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039b4:	2300      	movs	r3, #0
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <xQueueGenericSend+0x20>
 80039c2:	b672      	cpsid	i
 80039c4:	e7fe      	b.n	80039c4 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <xQueueGenericSend+0x2e>
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <xQueueGenericSend+0x32>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <xQueueGenericSend+0x34>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueGenericSend+0x3c>
 80039de:	b672      	cpsid	i
 80039e0:	e7fe      	b.n	80039e0 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d103      	bne.n	80039f0 <xQueueGenericSend+0x4a>
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <xQueueGenericSend+0x4e>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <xQueueGenericSend+0x50>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueGenericSend+0x58>
 80039fa:	b672      	cpsid	i
 80039fc:	e7fe      	b.n	80039fc <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fe:	f001 f8dd 	bl	8004bbc <xTaskGetSchedulerState>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d102      	bne.n	8003a0c <xQueueGenericSend+0x66>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <xQueueGenericSend+0x6a>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <xQueueGenericSend+0x6c>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0x74>
 8003a16:	b672      	cpsid	i
 8003a18:	e7fe      	b.n	8003a18 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a1a:	f001 fd09 	bl	8005430 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d302      	bcc.n	8003a30 <xQueueGenericSend+0x8a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d11e      	bne.n	8003a6e <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f99f 	bl	8003d7a <prvCopyDataToQueue>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	3324      	adds	r3, #36	; 0x24
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 ff17 	bl	8004880 <xTaskRemoveFromEventList>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d007      	beq.n	8003a66 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a56:	f001 fcdb 	bl	8005410 <vPortYield>
 8003a5a:	e004      	b.n	8003a66 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a62:	f001 fcd5 	bl	8005410 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a66:	f001 fcf5 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e05b      	b.n	8003b26 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a74:	f001 fcee 	bl	8005454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e054      	b.n	8003b26 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a82:	2314      	movs	r3, #20
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 ff56 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a90:	f001 fce0 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a94:	f000 fcfc 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a98:	f001 fcca 	bl	8005430 <vPortEnterCritical>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2244      	movs	r2, #68	; 0x44
 8003aa0:	5c9b      	ldrb	r3, [r3, r2]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	d103      	bne.n	8003ab0 <xQueueGenericSend+0x10a>
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	2244      	movs	r2, #68	; 0x44
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	2245      	movs	r2, #69	; 0x45
 8003ab4:	5c9b      	ldrb	r3, [r3, r2]
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	d103      	bne.n	8003ac4 <xQueueGenericSend+0x11e>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2245      	movs	r2, #69	; 0x45
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]
 8003ac4:	f001 fcc6 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac8:	1d3a      	adds	r2, r7, #4
 8003aca:	2314      	movs	r3, #20
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 ff45 	bl	8004960 <xTaskCheckForTimeOut>
 8003ad6:	1e03      	subs	r3, r0, #0
 8003ad8:	d11e      	bne.n	8003b18 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 fa51 	bl	8003f84 <prvIsQueueFull>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d011      	beq.n	8003b0a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	3310      	adds	r3, #16
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	0011      	movs	r1, r2
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 fe82 	bl	80047f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f9d0 	bl	8003e9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003afc:	f000 fcd4 	bl	80044a8 <xTaskResumeAll>
 8003b00:	1e03      	subs	r3, r0, #0
 8003b02:	d18a      	bne.n	8003a1a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003b04:	f001 fc84 	bl	8005410 <vPortYield>
 8003b08:	e787      	b.n	8003a1a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f9c5 	bl	8003e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b12:	f000 fcc9 	bl	80044a8 <xTaskResumeAll>
 8003b16:	e780      	b.n	8003a1a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f9be 	bl	8003e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b20:	f000 fcc2 	bl	80044a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b24:	2300      	movs	r3, #0
		}
	}
}
 8003b26:	0018      	movs	r0, r3
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b00a      	add	sp, #40	; 0x28
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b2e:	b590      	push	{r4, r7, lr}
 8003b30:	b089      	sub	sp, #36	; 0x24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <xQueueGenericSendFromISR+0x1c>
 8003b46:	b672      	cpsid	i
 8003b48:	e7fe      	b.n	8003b48 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <xQueueGenericSendFromISR+0x2a>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <xQueueGenericSendFromISR+0x2e>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <xQueueGenericSendFromISR+0x30>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <xQueueGenericSendFromISR+0x38>
 8003b62:	b672      	cpsid	i
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d103      	bne.n	8003b74 <xQueueGenericSendFromISR+0x46>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <xQueueGenericSendFromISR+0x4a>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <xQueueGenericSendFromISR+0x4c>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <xQueueGenericSendFromISR+0x54>
 8003b7e:	b672      	cpsid	i
 8003b80:	e7fe      	b.n	8003b80 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b82:	f001 fc7f 	bl	8005484 <ulSetInterruptMaskFromISR>
 8003b86:	0003      	movs	r3, r0
 8003b88:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <xQueueGenericSendFromISR+0x6e>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d12e      	bne.n	8003bfa <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b9c:	2413      	movs	r4, #19
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	2145      	movs	r1, #69	; 0x45
 8003ba4:	5c52      	ldrb	r2, [r2, r1]
 8003ba6:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 f8e3 	bl	8003d7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b25b      	sxtb	r3, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	d111      	bne.n	8003be2 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3324      	adds	r3, #36	; 0x24
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fe58 	bl	8004880 <xTaskRemoveFromEventList>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d00f      	beq.n	8003bf4 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	e008      	b.n	8003bf4 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003be2:	2313      	movs	r3, #19
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	b259      	sxtb	r1, r3
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2245      	movs	r2, #69	; 0x45
 8003bf2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	61fb      	str	r3, [r7, #28]
		{
 8003bf8:	e001      	b.n	8003bfe <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f001 fc45 	bl	8005490 <vClearInterruptMaskFromISR>

	return xReturn;
 8003c06:	69fb      	ldr	r3, [r7, #28]
}
 8003c08:	0018      	movs	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b009      	add	sp, #36	; 0x24
 8003c0e:	bd90      	pop	{r4, r7, pc}

08003c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	; 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <xQueueReceive+0x1e>
 8003c2a:	b672      	cpsid	i
 8003c2c:	e7fe      	b.n	8003c2c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <xQueueReceive+0x2c>
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <xQueueReceive+0x30>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <xQueueReceive+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <xQueueReceive+0x3a>
 8003c46:	b672      	cpsid	i
 8003c48:	e7fe      	b.n	8003c48 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c4a:	f000 ffb7 	bl	8004bbc <xTaskGetSchedulerState>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d102      	bne.n	8003c58 <xQueueReceive+0x48>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueReceive+0x4c>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueReceive+0x4e>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <xQueueReceive+0x56>
 8003c62:	b672      	cpsid	i
 8003c64:	e7fe      	b.n	8003c64 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c66:	f001 fbe3 	bl	8005430 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01a      	beq.n	8003cac <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 f8e7 	bl	8003e50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	3310      	adds	r3, #16
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fdf2 	bl	8004880 <xTaskRemoveFromEventList>
 8003c9c:	1e03      	subs	r3, r0, #0
 8003c9e:	d001      	beq.n	8003ca4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ca0:	f001 fbb6 	bl	8005410 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ca4:	f001 fbd6 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e062      	b.n	8003d72 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb2:	f001 fbcf 	bl	8005454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e05b      	b.n	8003d72 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc0:	2314      	movs	r3, #20
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 fe37 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cce:	f001 fbc1 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd2:	f000 fbdd 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cd6:	f001 fbab 	bl	8005430 <vPortEnterCritical>
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2244      	movs	r2, #68	; 0x44
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d103      	bne.n	8003cee <xQueueReceive+0xde>
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2244      	movs	r2, #68	; 0x44
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2245      	movs	r2, #69	; 0x45
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	d103      	bne.n	8003d02 <xQueueReceive+0xf2>
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2245      	movs	r2, #69	; 0x45
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	f001 fba7 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d06:	1d3a      	adds	r2, r7, #4
 8003d08:	2314      	movs	r3, #20
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	0011      	movs	r1, r2
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 fe26 	bl	8004960 <xTaskCheckForTimeOut>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d11e      	bne.n	8003d56 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 f91c 	bl	8003f58 <prvIsQueueEmpty>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d011      	beq.n	8003d48 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f000 fd63 	bl	80047f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 f8b1 	bl	8003e9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d3a:	f000 fbb5 	bl	80044a8 <xTaskResumeAll>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d191      	bne.n	8003c66 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003d42:	f001 fb65 	bl	8005410 <vPortYield>
 8003d46:	e78e      	b.n	8003c66 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 f8a6 	bl	8003e9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d50:	f000 fbaa 	bl	80044a8 <xTaskResumeAll>
 8003d54:	e787      	b.n	8003c66 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 f89f 	bl	8003e9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d5e:	f000 fba3 	bl	80044a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 f8f7 	bl	8003f58 <prvIsQueueEmpty>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d100      	bne.n	8003d70 <xQueueReceive+0x160>
 8003d6e:	e77a      	b.n	8003c66 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b00a      	add	sp, #40	; 0x28
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10e      	bne.n	8003db6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d14e      	bne.n	8003e3e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 ff25 	bl	8004bf4 <xTaskPriorityDisinherit>
 8003daa:	0003      	movs	r3, r0
 8003dac:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	e043      	b.n	8003e3e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d119      	bne.n	8003df0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6898      	ldr	r0, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	f001 fd96 	bl	80058f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	18d2      	adds	r2, r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d32b      	bcc.n	8003e3e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	e026      	b.n	8003e3e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68d8      	ldr	r0, [r3, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	f001 fd7c 	bl	80058f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	425b      	negs	r3, r3
 8003e0a:	18d2      	adds	r2, r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d207      	bcs.n	8003e2c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	425b      	negs	r3, r3
 8003e26:	18d2      	adds	r2, r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d105      	bne.n	8003e3e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e46:	697b      	ldr	r3, [r7, #20]
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b006      	add	sp, #24
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d018      	beq.n	8003e94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	18d2      	adds	r2, r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d303      	bcc.n	8003e84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68d9      	ldr	r1, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f001 fd32 	bl	80058f8 <memcpy>
	}
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b002      	add	sp, #8
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ea4:	f001 fac4 	bl	8005430 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	2145      	movs	r1, #69	; 0x45
 8003eb0:	5c52      	ldrb	r2, [r2, r1]
 8003eb2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb4:	e013      	b.n	8003ede <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 fcdc 	bl	8004880 <xTaskRemoveFromEventList>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d001      	beq.n	8003ed0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ecc:	f000 fd98 	bl	8004a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ed0:	210f      	movs	r1, #15
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	187b      	adds	r3, r7, r1
 8003edc:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ede:	230f      	movs	r3, #15
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	dce5      	bgt.n	8003eb6 <prvUnlockQueue+0x1a>
 8003eea:	e000      	b.n	8003eee <prvUnlockQueue+0x52>
					break;
 8003eec:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2245      	movs	r2, #69	; 0x45
 8003ef2:	21ff      	movs	r1, #255	; 0xff
 8003ef4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 faad 	bl	8005454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003efa:	f001 fa99 	bl	8005430 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003efe:	230e      	movs	r3, #14
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	2144      	movs	r1, #68	; 0x44
 8003f06:	5c52      	ldrb	r2, [r2, r1]
 8003f08:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	e013      	b.n	8003f34 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3310      	adds	r3, #16
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 fcb1 	bl	8004880 <xTaskRemoveFromEventList>
 8003f1e:	1e03      	subs	r3, r0, #0
 8003f20:	d001      	beq.n	8003f26 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8003f22:	f000 fd6d 	bl	8004a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f26:	210e      	movs	r1, #14
 8003f28:	187b      	adds	r3, r7, r1
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f34:	230e      	movs	r3, #14
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	b25b      	sxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dce5      	bgt.n	8003f0c <prvUnlockQueue+0x70>
 8003f40:	e000      	b.n	8003f44 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8003f42:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2244      	movs	r2, #68	; 0x44
 8003f48:	21ff      	movs	r1, #255	; 0xff
 8003f4a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8003f4c:	f001 fa82 	bl	8005454 <vPortExitCritical>
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b004      	add	sp, #16
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f60:	f001 fa66 	bl	8005430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e001      	b.n	8003f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f76:	f001 fa6d 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b004      	add	sp, #16
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f8c:	f001 fa50 	bl	8005430 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d102      	bne.n	8003fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e001      	b.n	8003fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fa6:	f001 fa55 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e015      	b.n	8003ff0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <vQueueAddToRegistry+0x4c>)
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	00d2      	lsls	r2, r2, #3
 8003fca:	58d3      	ldr	r3, [r2, r3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10c      	bne.n	8003fea <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <vQueueAddToRegistry+0x4c>)
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	00d2      	lsls	r2, r2, #3
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <vQueueAddToRegistry+0x4c>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fe8:	e006      	b.n	8003ff8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3301      	adds	r3, #1
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	d9e6      	bls.n	8003fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b004      	add	sp, #16
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000948 	.word	0x20000948

08004004 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004014:	f001 fa0c 	bl	8005430 <vPortEnterCritical>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2244      	movs	r2, #68	; 0x44
 800401c:	5c9b      	ldrb	r3, [r3, r2]
 800401e:	b25b      	sxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	d103      	bne.n	800402c <vQueueWaitForMessageRestricted+0x28>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2244      	movs	r2, #68	; 0x44
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2245      	movs	r2, #69	; 0x45
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	b25b      	sxtb	r3, r3
 8004034:	3301      	adds	r3, #1
 8004036:	d103      	bne.n	8004040 <vQueueWaitForMessageRestricted+0x3c>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2245      	movs	r2, #69	; 0x45
 800403c:	2100      	movs	r1, #0
 800403e:	5499      	strb	r1, [r3, r2]
 8004040:	f001 fa08 	bl	8005454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3324      	adds	r3, #36	; 0x24
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	0018      	movs	r0, r3
 8004056:	f000 fbed 	bl	8004834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff ff1d 	bl	8003e9c <prvUnlockQueue>
	}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b006      	add	sp, #24
 8004068:	bd80      	pop	{r7, pc}

0800406a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800406a:	b590      	push	{r4, r7, lr}
 800406c:	b08d      	sub	sp, #52	; 0x34
 800406e:	af04      	add	r7, sp, #16
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <xTaskCreateStatic+0x18>
 800407e:	b672      	cpsid	i
 8004080:	e7fe      	b.n	8004080 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <xTaskCreateStatic+0x22>
 8004088:	b672      	cpsid	i
 800408a:	e7fe      	b.n	800408a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800408c:	23bc      	movs	r3, #188	; 0xbc
 800408e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2bbc      	cmp	r3, #188	; 0xbc
 8004094:	d001      	beq.n	800409a <xTaskCreateStatic+0x30>
 8004096:	b672      	cpsid	i
 8004098:	e7fe      	b.n	8004098 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <xTaskCreateStatic+0x78>
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01d      	beq.n	80040e2 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	22b9      	movs	r2, #185	; 0xb9
 80040b4:	2102      	movs	r1, #2
 80040b6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040b8:	683c      	ldr	r4, [r7, #0]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	2318      	movs	r3, #24
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	0023      	movs	r3, r4
 80040d4:	f000 f858 	bl	8004188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f8ec 	bl	80042b8 <prvAddNewTaskToReadyList>
 80040e0:	e001      	b.n	80040e6 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040e6:	69bb      	ldr	r3, [r7, #24]
	}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b009      	add	sp, #36	; 0x24
 80040ee:	bd90      	pop	{r4, r7, pc}

080040f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b08d      	sub	sp, #52	; 0x34
 80040f4:	af04      	add	r7, sp, #16
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	1dbb      	adds	r3, r7, #6
 80040fe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004100:	1dbb      	adds	r3, r7, #6
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	0018      	movs	r0, r3
 8004108:	f001 fa2a 	bl	8005560 <pvPortMalloc>
 800410c:	0003      	movs	r3, r0
 800410e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d010      	beq.n	8004138 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004116:	20bc      	movs	r0, #188	; 0xbc
 8004118:	f001 fa22 	bl	8005560 <pvPortMalloc>
 800411c:	0003      	movs	r3, r0
 800411e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
 800412c:	e006      	b.n	800413c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	0018      	movs	r0, r3
 8004132:	f001 fabb 	bl	80056ac <vPortFree>
 8004136:	e001      	b.n	800413c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01a      	beq.n	8004178 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	22b9      	movs	r2, #185	; 0xb9
 8004146:	2100      	movs	r1, #0
 8004148:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800414a:	1dbb      	adds	r3, r7, #6
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	683c      	ldr	r4, [r7, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	2300      	movs	r3, #0
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	9302      	str	r3, [sp, #8]
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	0023      	movs	r3, r4
 8004166:	f000 f80f 	bl	8004188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	0018      	movs	r0, r3
 800416e:	f000 f8a3 	bl	80042b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e002      	b.n	800417e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004178:	2301      	movs	r3, #1
 800417a:	425b      	negs	r3, r3
 800417c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800417e:	69bb      	ldr	r3, [r7, #24]
	}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b009      	add	sp, #36	; 0x24
 8004186:	bd90      	pop	{r4, r7, pc}

08004188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	001a      	movs	r2, r3
 80041a0:	21a5      	movs	r1, #165	; 0xa5
 80041a2:	f001 fbb2 	bl	800590a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	493e      	ldr	r1, [pc, #248]	; (80042a8 <prvInitialiseNewTask+0x120>)
 80041ae:	468c      	mov	ip, r1
 80041b0:	4463      	add	r3, ip
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	18d3      	adds	r3, r2, r3
 80041b6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2207      	movs	r2, #7
 80041bc:	4393      	bics	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2207      	movs	r2, #7
 80041c4:	4013      	ands	r3, r2
 80041c6:	d001      	beq.n	80041cc <prvInitialiseNewTask+0x44>
 80041c8:	b672      	cpsid	i
 80041ca:	e7fe      	b.n	80041ca <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e013      	b.n	80041fa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	7818      	ldrb	r0, [r3, #0]
 80041da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041dc:	2134      	movs	r1, #52	; 0x34
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	18d3      	adds	r3, r2, r3
 80041e2:	185b      	adds	r3, r3, r1
 80041e4:	1c02      	adds	r2, r0, #0
 80041e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d006      	beq.n	8004202 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b0f      	cmp	r3, #15
 80041fe:	d9e8      	bls.n	80041d2 <prvInitialiseNewTask+0x4a>
 8004200:	e000      	b.n	8004204 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004202:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2243      	movs	r2, #67	; 0x43
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	2b37      	cmp	r3, #55	; 0x37
 8004210:	d901      	bls.n	8004216 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004212:	2337      	movs	r3, #55	; 0x37
 8004214:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	6a3a      	ldr	r2, [r7, #32]
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	2200      	movs	r2, #0
 8004226:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	3304      	adds	r3, #4
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff fa69 	bl	8003704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	3318      	adds	r3, #24
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fa64 	bl	8003704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004240:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	2238      	movs	r2, #56	; 0x38
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	22b4      	movs	r2, #180	; 0xb4
 8004256:	2100      	movs	r1, #0
 8004258:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	22b8      	movs	r2, #184	; 0xb8
 800425e:	2100      	movs	r1, #0
 8004260:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	3354      	adds	r3, #84	; 0x54
 8004266:	2260      	movs	r2, #96	; 0x60
 8004268:	2100      	movs	r1, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f001 fb4d 	bl	800590a <memset>
 8004270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004272:	4a0e      	ldr	r2, [pc, #56]	; (80042ac <prvInitialiseNewTask+0x124>)
 8004274:	659a      	str	r2, [r3, #88]	; 0x58
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	4a0d      	ldr	r2, [pc, #52]	; (80042b0 <prvInitialiseNewTask+0x128>)
 800427a:	65da      	str	r2, [r3, #92]	; 0x5c
 800427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <prvInitialiseNewTask+0x12c>)
 8004280:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	0018      	movs	r0, r3
 800428a:	f001 f833 	bl	80052f4 <pxPortInitialiseStack>
 800428e:	0002      	movs	r2, r0
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	3fffffff 	.word	0x3fffffff
 80042ac:	08005bb8 	.word	0x08005bb8
 80042b0:	08005bd8 	.word	0x08005bd8
 80042b4:	08005b98 	.word	0x08005b98

080042b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042c0:	f001 f8b6 	bl	8005430 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042c4:	4b2a      	ldr	r3, [pc, #168]	; (8004370 <prvAddNewTaskToReadyList+0xb8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	4b29      	ldr	r3, [pc, #164]	; (8004370 <prvAddNewTaskToReadyList+0xb8>)
 80042cc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <prvAddNewTaskToReadyList+0xbc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <prvAddNewTaskToReadyList+0xbc>)
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <prvAddNewTaskToReadyList+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d110      	bne.n	8004306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042e4:	f000 fba6 	bl	8004a34 <prvInitialiseTaskLists>
 80042e8:	e00d      	b.n	8004306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <prvAddNewTaskToReadyList+0xc0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042f2:	4b20      	ldr	r3, [pc, #128]	; (8004374 <prvAddNewTaskToReadyList+0xbc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d802      	bhi.n	8004306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004300:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <prvAddNewTaskToReadyList+0xbc>)
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004306:	4b1d      	ldr	r3, [pc, #116]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 800430e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <prvAddNewTaskToReadyList+0xc4>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d903      	bls.n	800432c <prvAddNewTaskToReadyList+0x74>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <prvAddNewTaskToReadyList+0xc8>)
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	0013      	movs	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	189b      	adds	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a12      	ldr	r2, [pc, #72]	; (8004384 <prvAddNewTaskToReadyList+0xcc>)
 800433a:	189a      	adds	r2, r3, r2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	0019      	movs	r1, r3
 8004342:	0010      	movs	r0, r2
 8004344:	f7ff f9e9 	bl	800371a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004348:	f001 f884 	bl	8005454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <prvAddNewTaskToReadyList+0xc0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <prvAddNewTaskToReadyList+0xbc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d201      	bcs.n	8004366 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004362:	f001 f855 	bl	8005410 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	20000e5c 	.word	0x20000e5c
 8004374:	20000988 	.word	0x20000988
 8004378:	20000e68 	.word	0x20000e68
 800437c:	20000e78 	.word	0x20000e78
 8004380:	20000e64 	.word	0x20000e64
 8004384:	2000098c 	.word	0x2000098c

08004388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <vTaskDelay+0x48>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <vTaskDelay+0x1e>
 80043a2:	b672      	cpsid	i
 80043a4:	e7fe      	b.n	80043a4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80043a6:	f000 f873 	bl	8004490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 fc7c 	bl	8004cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043b4:	f000 f878 	bl	80044a8 <xTaskResumeAll>
 80043b8:	0003      	movs	r3, r0
 80043ba:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80043c2:	f001 f825 	bl	8005410 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b004      	add	sp, #16
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	20000e84 	.word	0x20000e84

080043d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b089      	sub	sp, #36	; 0x24
 80043d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043e2:	003a      	movs	r2, r7
 80043e4:	1d39      	adds	r1, r7, #4
 80043e6:	2308      	movs	r3, #8
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7ff f93c 	bl	8003668 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043f0:	683c      	ldr	r4, [r7, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	491e      	ldr	r1, [pc, #120]	; (8004470 <vTaskStartScheduler+0x9c>)
 80043f8:	481e      	ldr	r0, [pc, #120]	; (8004474 <vTaskStartScheduler+0xa0>)
 80043fa:	9202      	str	r2, [sp, #8]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	2300      	movs	r3, #0
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2300      	movs	r3, #0
 8004404:	0022      	movs	r2, r4
 8004406:	f7ff fe30 	bl	800406a <xTaskCreateStatic>
 800440a:	0002      	movs	r2, r0
 800440c:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <vTaskStartScheduler+0xa4>)
 800440e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <vTaskStartScheduler+0xa4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004418:	2301      	movs	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	e001      	b.n	8004422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d103      	bne.n	8004430 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004428:	f000 fc94 	bl	8004d54 <xTimerCreateTimerTask>
 800442c:	0003      	movs	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d113      	bne.n	800445e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004436:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <vTaskStartScheduler+0xa8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3354      	adds	r3, #84	; 0x54
 800443e:	001a      	movs	r2, r3
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <vTaskStartScheduler+0xac>)
 8004442:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <vTaskStartScheduler+0xb0>)
 8004446:	2201      	movs	r2, #1
 8004448:	4252      	negs	r2, r2
 800444a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <vTaskStartScheduler+0xb4>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004452:	4b0e      	ldr	r3, [pc, #56]	; (800448c <vTaskStartScheduler+0xb8>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004458:	f000 ffb6 	bl	80053c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800445c:	e004      	b.n	8004468 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	d101      	bne.n	8004468 <vTaskStartScheduler+0x94>
 8004464:	b672      	cpsid	i
 8004466:	e7fe      	b.n	8004466 <vTaskStartScheduler+0x92>
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	46bd      	mov	sp, r7
 800446c:	b005      	add	sp, #20
 800446e:	bd90      	pop	{r4, r7, pc}
 8004470:	08005af8 	.word	0x08005af8
 8004474:	08004a15 	.word	0x08004a15
 8004478:	20000e80 	.word	0x20000e80
 800447c:	20000988 	.word	0x20000988
 8004480:	20000014 	.word	0x20000014
 8004484:	20000e7c 	.word	0x20000e7c
 8004488:	20000e68 	.word	0x20000e68
 800448c:	20000e60 	.word	0x20000e60

08004490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <vTaskSuspendAll+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	4b02      	ldr	r3, [pc, #8]	; (80044a4 <vTaskSuspendAll+0x14>)
 800449c:	601a      	str	r2, [r3, #0]
}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20000e84 	.word	0x20000e84

080044a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044b6:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <xTaskResumeAll+0xf8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <xTaskResumeAll+0x1a>
 80044be:	b672      	cpsid	i
 80044c0:	e7fe      	b.n	80044c0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044c2:	f000 ffb5 	bl	8005430 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044c6:	4b36      	ldr	r3, [pc, #216]	; (80045a0 <xTaskResumeAll+0xf8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	1e5a      	subs	r2, r3, #1
 80044cc:	4b34      	ldr	r3, [pc, #208]	; (80045a0 <xTaskResumeAll+0xf8>)
 80044ce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <xTaskResumeAll+0xf8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d15b      	bne.n	8004590 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044d8:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <xTaskResumeAll+0xfc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d057      	beq.n	8004590 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044e0:	e02f      	b.n	8004542 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <xTaskResumeAll+0x100>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3318      	adds	r3, #24
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7ff f96b 	bl	80037ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3304      	adds	r3, #4
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7ff f966 	bl	80037ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <xTaskResumeAll+0x104>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d903      	bls.n	8004512 <xTaskResumeAll+0x6a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <xTaskResumeAll+0x104>)
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004516:	0013      	movs	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	189b      	adds	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <xTaskResumeAll+0x108>)
 8004520:	189a      	adds	r2, r3, r2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3304      	adds	r3, #4
 8004526:	0019      	movs	r1, r3
 8004528:	0010      	movs	r0, r2
 800452a:	f7ff f8f6 	bl	800371a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <xTaskResumeAll+0x10c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <xTaskResumeAll+0x110>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004542:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <xTaskResumeAll+0x100>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1cb      	bne.n	80044e2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004550:	f000 fb10 	bl	8004b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <xTaskResumeAll+0x114>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00f      	beq.n	8004580 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004560:	f000 f83c 	bl	80045dc <xTaskIncrementTick>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d002      	beq.n	800456e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004568:	4b13      	ldr	r3, [pc, #76]	; (80045b8 <xTaskResumeAll+0x110>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3b01      	subs	r3, #1
 8004572:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f2      	bne.n	8004560 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <xTaskResumeAll+0x114>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004580:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <xTaskResumeAll+0x110>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004588:	2301      	movs	r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800458c:	f000 ff40 	bl	8005410 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004590:	f000 ff60 	bl	8005454 <vPortExitCritical>

	return xAlreadyYielded;
 8004594:	68bb      	ldr	r3, [r7, #8]
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	20000e84 	.word	0x20000e84
 80045a4:	20000e5c 	.word	0x20000e5c
 80045a8:	20000e1c 	.word	0x20000e1c
 80045ac:	20000e64 	.word	0x20000e64
 80045b0:	2000098c 	.word	0x2000098c
 80045b4:	20000988 	.word	0x20000988
 80045b8:	20000e70 	.word	0x20000e70
 80045bc:	20000e6c 	.word	0x20000e6c

080045c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <xTaskGetTickCount+0x18>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	20000e60 	.word	0x20000e60

080045dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e6:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <xTaskIncrementTick+0x13c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d000      	beq.n	80045f0 <xTaskIncrementTick+0x14>
 80045ee:	e083      	b.n	80046f8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045f0:	4b4a      	ldr	r3, [pc, #296]	; (800471c <xTaskIncrementTick+0x140>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <xTaskIncrementTick+0x140>)
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d117      	bne.n	8004634 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <xTaskIncrementTick+0x144>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <xTaskIncrementTick+0x36>
 800460e:	b672      	cpsid	i
 8004610:	e7fe      	b.n	8004610 <xTaskIncrementTick+0x34>
 8004612:	4b43      	ldr	r3, [pc, #268]	; (8004720 <xTaskIncrementTick+0x144>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <xTaskIncrementTick+0x148>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <xTaskIncrementTick+0x144>)
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	4b40      	ldr	r3, [pc, #256]	; (8004724 <xTaskIncrementTick+0x148>)
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	4b40      	ldr	r3, [pc, #256]	; (8004728 <xTaskIncrementTick+0x14c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	4b3e      	ldr	r3, [pc, #248]	; (8004728 <xTaskIncrementTick+0x14c>)
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f000 faa0 	bl	8004b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004634:	4b3d      	ldr	r3, [pc, #244]	; (800472c <xTaskIncrementTick+0x150>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	d34e      	bcc.n	80046dc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <xTaskIncrementTick+0x144>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <xTaskIncrementTick+0x70>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <xTaskIncrementTick+0x72>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <xTaskIncrementTick+0x150>)
 8004654:	2201      	movs	r2, #1
 8004656:	4252      	negs	r2, r2
 8004658:	601a      	str	r2, [r3, #0]
					break;
 800465a:	e03f      	b.n	80046dc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <xTaskIncrementTick+0x144>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d203      	bcs.n	800467c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <xTaskIncrementTick+0x150>)
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
						break;
 800467a:	e02f      	b.n	80046dc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3304      	adds	r3, #4
 8004680:	0018      	movs	r0, r3
 8004682:	f7ff f8a2 	bl	80037ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	3318      	adds	r3, #24
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff f899 	bl	80037ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <xTaskIncrementTick+0x154>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <xTaskIncrementTick+0xd0>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <xTaskIncrementTick+0x154>)
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	0013      	movs	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <xTaskIncrementTick+0x158>)
 80046ba:	189a      	adds	r2, r3, r2
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3304      	adds	r3, #4
 80046c0:	0019      	movs	r1, r3
 80046c2:	0010      	movs	r0, r2
 80046c4:	f7ff f829 	bl	800371a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <xTaskIncrementTick+0x15c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3b3      	bcc.n	800463e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80046d6:	2301      	movs	r3, #1
 80046d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046da:	e7b0      	b.n	800463e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <xTaskIncrementTick+0x15c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e2:	4914      	ldr	r1, [pc, #80]	; (8004734 <xTaskIncrementTick+0x158>)
 80046e4:	0013      	movs	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	585b      	ldr	r3, [r3, r1]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d907      	bls.n	8004702 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e004      	b.n	8004702 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046f8:	4b10      	ldr	r3, [pc, #64]	; (800473c <xTaskIncrementTick+0x160>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <xTaskIncrementTick+0x160>)
 8004700:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <xTaskIncrementTick+0x164>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800470e:	697b      	ldr	r3, [r7, #20]
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b006      	add	sp, #24
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000e84 	.word	0x20000e84
 800471c:	20000e60 	.word	0x20000e60
 8004720:	20000e14 	.word	0x20000e14
 8004724:	20000e18 	.word	0x20000e18
 8004728:	20000e74 	.word	0x20000e74
 800472c:	20000e7c 	.word	0x20000e7c
 8004730:	20000e64 	.word	0x20000e64
 8004734:	2000098c 	.word	0x2000098c
 8004738:	20000988 	.word	0x20000988
 800473c:	20000e6c 	.word	0x20000e6c
 8004740:	20000e70 	.word	0x20000e70

08004744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800474a:	4b25      	ldr	r3, [pc, #148]	; (80047e0 <vTaskSwitchContext+0x9c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <vTaskSwitchContext+0xa0>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004758:	e03d      	b.n	80047d6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <vTaskSwitchContext+0xa0>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <vTaskSwitchContext+0xa4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	607b      	str	r3, [r7, #4]
 8004766:	e007      	b.n	8004778 <vTaskSwitchContext+0x34>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <vTaskSwitchContext+0x2e>
 800476e:	b672      	cpsid	i
 8004770:	e7fe      	b.n	8004770 <vTaskSwitchContext+0x2c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	491c      	ldr	r1, [pc, #112]	; (80047ec <vTaskSwitchContext+0xa8>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	0013      	movs	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	189b      	adds	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	585b      	ldr	r3, [r3, r1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ee      	beq.n	8004768 <vTaskSwitchContext+0x24>
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	0013      	movs	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	189b      	adds	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <vTaskSwitchContext+0xa8>)
 8004796:	189b      	adds	r3, r3, r2
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d104      	bne.n	80047ba <vTaskSwitchContext+0x76>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <vTaskSwitchContext+0xac>)
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <vTaskSwitchContext+0xa4>)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <vTaskSwitchContext+0xac>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3354      	adds	r3, #84	; 0x54
 80047d0:	001a      	movs	r2, r3
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <vTaskSwitchContext+0xb0>)
 80047d4:	601a      	str	r2, [r3, #0]
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b002      	add	sp, #8
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	20000e84 	.word	0x20000e84
 80047e4:	20000e70 	.word	0x20000e70
 80047e8:	20000e64 	.word	0x20000e64
 80047ec:	2000098c 	.word	0x2000098c
 80047f0:	20000988 	.word	0x20000988
 80047f4:	20000014 	.word	0x20000014

080047f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <vTaskPlaceOnEventList+0x14>
 8004808:	b672      	cpsid	i
 800480a:	e7fe      	b.n	800480a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <vTaskPlaceOnEventList+0x38>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3318      	adds	r3, #24
 8004812:	001a      	movs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0011      	movs	r1, r2
 8004818:	0018      	movs	r0, r3
 800481a:	f7fe ffa0 	bl	800375e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2101      	movs	r1, #1
 8004822:	0018      	movs	r0, r3
 8004824:	f000 fa42 	bl	8004cac <prvAddCurrentTaskToDelayedList>
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000988 	.word	0x20000988

08004834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <vTaskPlaceOnEventListRestricted+0x16>
 8004846:	b672      	cpsid	i
 8004848:	e7fe      	b.n	8004848 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <vTaskPlaceOnEventListRestricted+0x48>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3318      	adds	r3, #24
 8004850:	001a      	movs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	0011      	movs	r1, r2
 8004856:	0018      	movs	r0, r3
 8004858:	f7fe ff5f 	bl	800371a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004862:	2301      	movs	r3, #1
 8004864:	425b      	negs	r3, r3
 8004866:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f000 fa1c 	bl	8004cac <prvAddCurrentTaskToDelayedList>
	}
 8004874:	46c0      	nop			; (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b004      	add	sp, #16
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000988 	.word	0x20000988

08004880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xTaskRemoveFromEventList+0x1a>
 8004896:	b672      	cpsid	i
 8004898:	e7fe      	b.n	8004898 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3318      	adds	r3, #24
 800489e:	0018      	movs	r0, r3
 80048a0:	f7fe ff93 	bl	80037ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <xTaskRemoveFromEventList+0xa0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11d      	bne.n	80048e8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3304      	adds	r3, #4
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fe ff8a 	bl	80037ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <xTaskRemoveFromEventList+0xa4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d903      	bls.n	80048ca <xTaskRemoveFromEventList+0x4a>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	4b17      	ldr	r3, [pc, #92]	; (8004924 <xTaskRemoveFromEventList+0xa4>)
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	0013      	movs	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	189b      	adds	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <xTaskRemoveFromEventList+0xa8>)
 80048d8:	189a      	adds	r2, r3, r2
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3304      	adds	r3, #4
 80048de:	0019      	movs	r1, r3
 80048e0:	0010      	movs	r0, r2
 80048e2:	f7fe ff1a 	bl	800371a <vListInsertEnd>
 80048e6:	e007      	b.n	80048f8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3318      	adds	r3, #24
 80048ec:	001a      	movs	r2, r3
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <xTaskRemoveFromEventList+0xac>)
 80048f0:	0011      	movs	r1, r2
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7fe ff11 	bl	800371a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <xTaskRemoveFromEventList+0xb0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d905      	bls.n	8004912 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <xTaskRemoveFromEventList+0xb4>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e001      	b.n	8004916 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000e84 	.word	0x20000e84
 8004924:	20000e64 	.word	0x20000e64
 8004928:	2000098c 	.word	0x2000098c
 800492c:	20000e1c 	.word	0x20000e1c
 8004930:	20000988 	.word	0x20000988
 8004934:	20000e70 	.word	0x20000e70

08004938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <vTaskInternalSetTimeOutState+0x20>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <vTaskInternalSetTimeOutState+0x24>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000e74 	.word	0x20000e74
 800495c:	20000e60 	.word	0x20000e60

08004960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <xTaskCheckForTimeOut+0x14>
 8004970:	b672      	cpsid	i
 8004972:	e7fe      	b.n	8004972 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <xTaskCheckForTimeOut+0x1e>
 800497a:	b672      	cpsid	i
 800497c:	e7fe      	b.n	800497c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800497e:	f000 fd57 	bl	8005430 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <xTaskCheckForTimeOut+0x98>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	d102      	bne.n	80049a0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e024      	b.n	80049ea <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <xTaskCheckForTimeOut+0x9c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d007      	beq.n	80049bc <xTaskCheckForTimeOut+0x5c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e016      	b.n	80049ea <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad2      	subs	r2, r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff ffaf 	bl	8004938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	e004      	b.n	80049ea <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80049ea:	f000 fd33 	bl	8005454 <vPortExitCritical>

	return xReturn;
 80049ee:	697b      	ldr	r3, [r7, #20]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b006      	add	sp, #24
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000e60 	.word	0x20000e60
 80049fc:	20000e74 	.word	0x20000e74

08004a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a04:	4b02      	ldr	r3, [pc, #8]	; (8004a10 <vTaskMissedYield+0x10>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000e70 	.word	0x20000e70

08004a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a1c:	f000 f84e 	bl	8004abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <prvIdleTask+0x1c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d9f9      	bls.n	8004a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a28:	f000 fcf2 	bl	8005410 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a2c:	e7f6      	b.n	8004a1c <prvIdleTask+0x8>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	2000098c 	.word	0x2000098c

08004a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	e00c      	b.n	8004a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	0013      	movs	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <prvInitialiseTaskLists+0x68>)
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f7fe fe3a 	bl	80036c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b37      	cmp	r3, #55	; 0x37
 8004a5e:	d9ef      	bls.n	8004a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe fe30 	bl	80036c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fe fe2c 	bl	80036c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <prvInitialiseTaskLists+0x74>)
 8004a72:	0018      	movs	r0, r3
 8004a74:	f7fe fe28 	bl	80036c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a78:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <prvInitialiseTaskLists+0x78>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fe fe24 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <prvInitialiseTaskLists+0x7c>)
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fe fe20 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <prvInitialiseTaskLists+0x80>)
 8004a8a:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <prvInitialiseTaskLists+0x6c>)
 8004a8c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <prvInitialiseTaskLists+0x84>)
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvInitialiseTaskLists+0x70>)
 8004a92:	601a      	str	r2, [r3, #0]
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000098c 	.word	0x2000098c
 8004aa0:	20000dec 	.word	0x20000dec
 8004aa4:	20000e00 	.word	0x20000e00
 8004aa8:	20000e1c 	.word	0x20000e1c
 8004aac:	20000e30 	.word	0x20000e30
 8004ab0:	20000e48 	.word	0x20000e48
 8004ab4:	20000e14 	.word	0x20000e14
 8004ab8:	20000e18 	.word	0x20000e18

08004abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac2:	e01a      	b.n	8004afa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004ac4:	f000 fcb4 	bl	8005430 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <prvCheckTasksWaitingTermination+0x50>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fe fe78 	bl	80037ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004ae2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	1e5a      	subs	r2, r3, #1
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004aec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004aee:	f000 fcb1 	bl	8005454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 f80f 	bl	8004b18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <prvCheckTasksWaitingTermination+0x58>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e0      	bne.n	8004ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b002      	add	sp, #8
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000e30 	.word	0x20000e30
 8004b10:	20000e5c 	.word	0x20000e5c
 8004b14:	20000e44 	.word	0x20000e44

08004b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3354      	adds	r3, #84	; 0x54
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 ff05 	bl	8005934 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	22b9      	movs	r2, #185	; 0xb9
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 fdb7 	bl	80056ac <vPortFree>
				vPortFree( pxTCB );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 fdb3 	bl	80056ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b46:	e010      	b.n	8004b6a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	22b9      	movs	r2, #185	; 0xb9
 8004b4c:	5c9b      	ldrb	r3, [r3, r2]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d104      	bne.n	8004b5c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 fda9 	bl	80056ac <vPortFree>
	}
 8004b5a:	e006      	b.n	8004b6a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	22b9      	movs	r2, #185	; 0xb9
 8004b60:	5c9b      	ldrb	r3, [r3, r2]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d001      	beq.n	8004b6a <prvDeleteTCB+0x52>
 8004b66:	b672      	cpsid	i
 8004b68:	e7fe      	b.n	8004b68 <prvDeleteTCB+0x50>
	}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b002      	add	sp, #8
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <prvResetNextTaskUnblockTime+0x40>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <prvResetNextTaskUnblockTime+0x14>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <prvResetNextTaskUnblockTime+0x16>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d004      	beq.n	8004b98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvResetNextTaskUnblockTime+0x44>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	4252      	negs	r2, r2
 8004b94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b96:	e008      	b.n	8004baa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <prvResetNextTaskUnblockTime+0x40>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <prvResetNextTaskUnblockTime+0x44>)
 8004ba8:	601a      	str	r2, [r3, #0]
}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b002      	add	sp, #8
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			; (mov r8, r8)
 8004bb4:	20000e14 	.word	0x20000e14
 8004bb8:	20000e7c 	.word	0x20000e7c

08004bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <xTaskGetSchedulerState+0x30>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	e008      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <xTaskGetSchedulerState+0x34>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e001      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004be2:	687b      	ldr	r3, [r7, #4]
	}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000e68 	.word	0x20000e68
 8004bf0:	20000e84 	.word	0x20000e84

08004bf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d044      	beq.n	8004c94 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c0a:	4b25      	ldr	r3, [pc, #148]	; (8004ca0 <xTaskPriorityDisinherit+0xac>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <xTaskPriorityDisinherit+0x24>
 8004c14:	b672      	cpsid	i
 8004c16:	e7fe      	b.n	8004c16 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <xTaskPriorityDisinherit+0x30>
 8004c20:	b672      	cpsid	i
 8004c22:	e7fe      	b.n	8004c22 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	1e5a      	subs	r2, r3, #1
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d02c      	beq.n	8004c94 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d128      	bne.n	8004c94 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3304      	adds	r3, #4
 8004c46:	0018      	movs	r0, r3
 8004c48:	f7fe fdbf 	bl	80037ca <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	2238      	movs	r2, #56	; 0x38
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <xTaskPriorityDisinherit+0xb0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d903      	bls.n	8004c74 <xTaskPriorityDisinherit+0x80>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <xTaskPriorityDisinherit+0xb0>)
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	0013      	movs	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <xTaskPriorityDisinherit+0xb4>)
 8004c82:	189a      	adds	r2, r3, r2
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3304      	adds	r3, #4
 8004c88:	0019      	movs	r1, r3
 8004c8a:	0010      	movs	r0, r2
 8004c8c:	f7fe fd45 	bl	800371a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c94:	68fb      	ldr	r3, [r7, #12]
	}
 8004c96:	0018      	movs	r0, r3
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	20000988 	.word	0x20000988
 8004ca4:	20000e64 	.word	0x20000e64
 8004ca8:	2000098c 	.word	0x2000098c

08004cac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cbc:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f7fe fd81 	bl	80037ca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	d10b      	bne.n	8004ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cdc:	0011      	movs	r1, r2
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7fe fd1b 	bl	800371a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ce4:	e026      	b.n	8004d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d209      	bcs.n	8004d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3304      	adds	r3, #4
 8004d08:	0019      	movs	r1, r3
 8004d0a:	0010      	movs	r0, r2
 8004d0c:	f7fe fd27 	bl	800375e <vListInsert>
}
 8004d10:	e010      	b.n	8004d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d12:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b0a      	ldr	r3, [pc, #40]	; (8004d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	0010      	movs	r0, r2
 8004d20:	f7fe fd1d 	bl	800375e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d202      	bcs.n	8004d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d2e:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b004      	add	sp, #16
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000e60 	.word	0x20000e60
 8004d40:	20000988 	.word	0x20000988
 8004d44:	20000e48 	.word	0x20000e48
 8004d48:	20000e18 	.word	0x20000e18
 8004d4c:	20000e14 	.word	0x20000e14
 8004d50:	20000e7c 	.word	0x20000e7c

08004d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d54:	b590      	push	{r4, r7, lr}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d5e:	f000 fa87 	bl	8005270 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <xTimerCreateTimerTask+0x6c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d72:	003a      	movs	r2, r7
 8004d74:	1d39      	adds	r1, r7, #4
 8004d76:	2308      	movs	r3, #8
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fe fc8c 	bl	8003698 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d80:	683c      	ldr	r4, [r7, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	490f      	ldr	r1, [pc, #60]	; (8004dc4 <xTimerCreateTimerTask+0x70>)
 8004d88:	480f      	ldr	r0, [pc, #60]	; (8004dc8 <xTimerCreateTimerTask+0x74>)
 8004d8a:	9202      	str	r2, [sp, #8]
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	2302      	movs	r3, #2
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	0022      	movs	r2, r4
 8004d96:	f7ff f968 	bl	800406a <xTaskCreateStatic>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <xTimerCreateTimerTask+0x78>)
 8004d9e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <xTimerCreateTimerTask+0x78>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <xTimerCreateTimerTask+0x62>
 8004db2:	b672      	cpsid	i
 8004db4:	e7fe      	b.n	8004db4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b005      	add	sp, #20
 8004dbe:	bd90      	pop	{r4, r7, pc}
 8004dc0:	20000eb8 	.word	0x20000eb8
 8004dc4:	08005b00 	.word	0x08005b00
 8004dc8:	08004ed5 	.word	0x08004ed5
 8004dcc:	20000ebc 	.word	0x20000ebc

08004dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b08b      	sub	sp, #44	; 0x2c
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <xTimerGenericCommand+0x1c>
 8004de8:	b672      	cpsid	i
 8004dea:	e7fe      	b.n	8004dea <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dec:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <xTimerGenericCommand+0x90>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d030      	beq.n	8004e56 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004df4:	2414      	movs	r4, #20
 8004df6:	193b      	adds	r3, r7, r4
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dfc:	193b      	adds	r3, r7, r4
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e02:	193b      	adds	r3, r7, r4
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	dc19      	bgt.n	8004e42 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e0e:	f7ff fed5 	bl	8004bbc <xTaskGetSchedulerState>
 8004e12:	0003      	movs	r3, r0
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d109      	bne.n	8004e2c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <xTimerGenericCommand+0x90>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1e:	1939      	adds	r1, r7, r4
 8004e20:	2300      	movs	r3, #0
 8004e22:	f7fe fdc0 	bl	80039a6 <xQueueGenericSend>
 8004e26:	0003      	movs	r3, r0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2a:	e014      	b.n	8004e56 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e2c:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <xTimerGenericCommand+0x90>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	2314      	movs	r3, #20
 8004e32:	18f9      	adds	r1, r7, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	2200      	movs	r2, #0
 8004e38:	f7fe fdb5 	bl	80039a6 <xQueueGenericSend>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e40:	e009      	b.n	8004e56 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <xTimerGenericCommand+0x90>)
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	2314      	movs	r3, #20
 8004e4a:	18f9      	adds	r1, r7, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f7fe fe6e 	bl	8003b2e <xQueueGenericSendFromISR>
 8004e52:	0003      	movs	r3, r0
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b00b      	add	sp, #44	; 0x2c
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	20000eb8 	.word	0x20000eb8

08004e64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e6e:	4b18      	ldr	r3, [pc, #96]	; (8004ed0 <prvProcessExpiredTimer+0x6c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fe fca4 	bl	80037ca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d119      	bne.n	8004ebe <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	18d1      	adds	r1, r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f8b6 	bl	8005008 <prvInsertTimerInActiveList>
 8004e9c:	1e03      	subs	r3, r0, #0
 8004e9e:	d00e      	beq.n	8004ebe <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f7ff ff90 	bl	8004dd0 <xTimerGenericCommand>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <prvProcessExpiredTimer+0x5a>
 8004eba:	b672      	cpsid	i
 8004ebc:	e7fe      	b.n	8004ebc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	0010      	movs	r0, r2
 8004ec6:	4798      	blx	r3
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b004      	add	sp, #16
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000eb0 	.word	0x20000eb0

08004ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004edc:	2308      	movs	r3, #8
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 f851 	bl	8004f88 <prvGetNextExpireTime>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	0011      	movs	r1, r2
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	f000 f803 	bl	8004efc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ef6:	f000 f8c9 	bl	800508c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004efa:	e7ef      	b.n	8004edc <prvTimerTask+0x8>

08004efc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f06:	f7ff fac3 	bl	8004490 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f000 f85a 	bl	8004fc8 <prvSampleTimeNow>
 8004f14:	0003      	movs	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d129      	bne.n	8004f72 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <prvProcessTimerOrBlockTask+0x42>
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d808      	bhi.n	8004f3e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8004f2c:	f7ff fabc 	bl	80044a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	0011      	movs	r1, r2
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7ff ff94 	bl	8004e64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f3c:	e01b      	b.n	8004f76 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f44:	4b0e      	ldr	r3, [pc, #56]	; (8004f80 <prvProcessTimerOrBlockTask+0x84>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	425a      	negs	r2, r3
 8004f4c:	4153      	adcs	r3, r2
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <prvProcessTimerOrBlockTask+0x88>)
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	0019      	movs	r1, r3
 8004f60:	f7ff f850 	bl	8004004 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f64:	f7ff faa0 	bl	80044a8 <xTaskResumeAll>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d104      	bne.n	8004f76 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8004f6c:	f000 fa50 	bl	8005410 <vPortYield>
}
 8004f70:	e001      	b.n	8004f76 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8004f72:	f7ff fa99 	bl	80044a8 <xTaskResumeAll>
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000eb4 	.word	0x20000eb4
 8004f84:	20000eb8 	.word	0x20000eb8

08004f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <prvGetNextExpireTime+0x3c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	425a      	negs	r2, r3
 8004f98:	4153      	adcs	r3, r2
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvGetNextExpireTime+0x3c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e001      	b.n	8004fba <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b004      	add	sp, #16
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000eb0 	.word	0x20000eb0

08004fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fd0:	f7ff faf6 	bl	80045c0 <xTaskGetTickCount>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <prvSampleTimeNow+0x3c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d205      	bcs.n	8004fee <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8004fe2:	f000 f8eb 	bl	80051bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <prvSampleTimeNow+0x3c>)
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b004      	add	sp, #16
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000ec0 	.word	0x20000ec0

08005008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d812      	bhi.n	8005054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	429a      	cmp	r2, r3
 800503a:	d302      	bcc.n	8005042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e01b      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <prvInsertTimerInActiveList+0x7c>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	0019      	movs	r1, r3
 800504c:	0010      	movs	r0, r2
 800504e:	f7fe fb86 	bl	800375e <vListInsert>
 8005052:	e012      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d206      	bcs.n	800506a <prvInsertTimerInActiveList+0x62>
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d302      	bcc.n	800506a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005064:	2301      	movs	r3, #1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	e007      	b.n	800507a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800506a:	4b07      	ldr	r3, [pc, #28]	; (8005088 <prvInsertTimerInActiveList+0x80>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3304      	adds	r3, #4
 8005072:	0019      	movs	r1, r3
 8005074:	0010      	movs	r0, r2
 8005076:	f7fe fb72 	bl	800375e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800507a:	697b      	ldr	r3, [r7, #20]
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b006      	add	sp, #24
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000eb4 	.word	0x20000eb4
 8005088:	20000eb0 	.word	0x20000eb0

0800508c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b08d      	sub	sp, #52	; 0x34
 8005090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005092:	e07f      	b.n	8005194 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005094:	2208      	movs	r2, #8
 8005096:	18bb      	adds	r3, r7, r2
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	da0f      	bge.n	80050be <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800509e:	18bb      	adds	r3, r7, r2
 80050a0:	3304      	adds	r3, #4
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <prvProcessReceivedCommands+0x22>
 80050aa:	b672      	cpsid	i
 80050ac:	e7fe      	b.n	80050ac <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	6858      	ldr	r0, [r3, #4]
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	0019      	movs	r1, r3
 80050bc:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050be:	2208      	movs	r2, #8
 80050c0:	18bb      	adds	r3, r7, r2
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	db64      	blt.n	8005192 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050c8:	18bb      	adds	r3, r7, r2
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	3304      	adds	r3, #4
 80050da:	0018      	movs	r0, r3
 80050dc:	f7fe fb75 	bl	80037ca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	0018      	movs	r0, r3
 80050e4:	f7ff ff70 	bl	8004fc8 <prvSampleTimeNow>
 80050e8:	0003      	movs	r3, r0
 80050ea:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80050ec:	2308      	movs	r3, #8
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b09      	cmp	r3, #9
 80050f4:	d84e      	bhi.n	8005194 <prvProcessReceivedCommands+0x108>
 80050f6:	009a      	lsls	r2, r3, #2
 80050f8:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <prvProcessReceivedCommands+0x128>)
 80050fa:	18d3      	adds	r3, r2, r3
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005100:	2408      	movs	r4, #8
 8005102:	193b      	adds	r3, r7, r4
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	18d1      	adds	r1, r2, r3
 800510c:	193b      	adds	r3, r7, r4
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	6a38      	ldr	r0, [r7, #32]
 8005114:	f7ff ff78 	bl	8005008 <prvInsertTimerInActiveList>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d03b      	beq.n	8005194 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	0010      	movs	r0, r2
 8005124:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d132      	bne.n	8005194 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800512e:	193b      	adds	r3, r7, r4
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	18d2      	adds	r2, r2, r3
 8005138:	6a38      	ldr	r0, [r7, #32]
 800513a:	2300      	movs	r3, #0
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	2300      	movs	r3, #0
 8005140:	2100      	movs	r1, #0
 8005142:	f7ff fe45 	bl	8004dd0 <xTimerGenericCommand>
 8005146:	0003      	movs	r3, r0
 8005148:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d121      	bne.n	8005194 <prvProcessReceivedCommands+0x108>
 8005150:	b672      	cpsid	i
 8005152:	e7fe      	b.n	8005152 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005154:	2308      	movs	r3, #8
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <prvProcessReceivedCommands+0xde>
 8005166:	b672      	cpsid	i
 8005168:	e7fe      	b.n	8005168 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	18d1      	adds	r1, r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	6a38      	ldr	r0, [r7, #32]
 8005178:	f7ff ff46 	bl	8005008 <prvInsertTimerInActiveList>
					break;
 800517c:	e00a      	b.n	8005194 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	222c      	movs	r2, #44	; 0x2c
 8005182:	5c9b      	ldrb	r3, [r3, r2]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d105      	bne.n	8005194 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 fa8e 	bl	80056ac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005190:	e000      	b.n	8005194 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005192:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005194:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <prvProcessReceivedCommands+0x12c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2208      	movs	r2, #8
 800519a:	18b9      	adds	r1, r7, r2
 800519c:	2200      	movs	r2, #0
 800519e:	0018      	movs	r0, r3
 80051a0:	f7fe fd36 	bl	8003c10 <xQueueReceive>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d000      	beq.n	80051aa <prvProcessReceivedCommands+0x11e>
 80051a8:	e774      	b.n	8005094 <prvProcessReceivedCommands+0x8>
	}
}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b00b      	add	sp, #44	; 0x2c
 80051b2:	bd90      	pop	{r4, r7, pc}
 80051b4:	08005b70 	.word	0x08005b70
 80051b8:	20000eb8 	.word	0x20000eb8

080051bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051c2:	e03e      	b.n	8005242 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051c4:	4b28      	ldr	r3, [pc, #160]	; (8005268 <prvSwitchTimerLists+0xac>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ce:	4b26      	ldr	r3, [pc, #152]	; (8005268 <prvSwitchTimerLists+0xac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3304      	adds	r3, #4
 80051dc:	0018      	movs	r0, r3
 80051de:	f7fe faf4 	bl	80037ca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	0010      	movs	r0, r2
 80051ea:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d126      	bne.n	8005242 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	18d3      	adds	r3, r2, r3
 80051fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	d90e      	bls.n	8005224 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <prvSwitchTimerLists+0xac>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3304      	adds	r3, #4
 800521a:	0019      	movs	r1, r3
 800521c:	0010      	movs	r0, r2
 800521e:	f7fe fa9e 	bl	800375e <vListInsert>
 8005222:	e00e      	b.n	8005242 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	2300      	movs	r3, #0
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	2100      	movs	r1, #0
 8005230:	f7ff fdce 	bl	8004dd0 <xTimerGenericCommand>
 8005234:	0003      	movs	r3, r0
 8005236:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <prvSwitchTimerLists+0x86>
 800523e:	b672      	cpsid	i
 8005240:	e7fe      	b.n	8005240 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <prvSwitchTimerLists+0xac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1bb      	bne.n	80051c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <prvSwitchTimerLists+0xac>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <prvSwitchTimerLists+0xb0>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <prvSwitchTimerLists+0xac>)
 8005258:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <prvSwitchTimerLists+0xb0>)
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b006      	add	sp, #24
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000eb0 	.word	0x20000eb0
 800526c:	20000eb4 	.word	0x20000eb4

08005270 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005276:	f000 f8db 	bl	8005430 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <prvCheckForValidListAndQueue+0x64>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d123      	bne.n	80052ca <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <prvCheckForValidListAndQueue+0x68>)
 8005284:	0018      	movs	r0, r3
 8005286:	f7fe fa1f 	bl	80036c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <prvCheckForValidListAndQueue+0x6c>)
 800528c:	0018      	movs	r0, r3
 800528e:	f7fe fa1b 	bl	80036c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <prvCheckForValidListAndQueue+0x70>)
 8005294:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <prvCheckForValidListAndQueue+0x68>)
 8005296:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <prvCheckForValidListAndQueue+0x74>)
 800529a:	4a10      	ldr	r2, [pc, #64]	; (80052dc <prvCheckForValidListAndQueue+0x6c>)
 800529c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <prvCheckForValidListAndQueue+0x78>)
 80052a0:	4a12      	ldr	r2, [pc, #72]	; (80052ec <prvCheckForValidListAndQueue+0x7c>)
 80052a2:	2100      	movs	r1, #0
 80052a4:	9100      	str	r1, [sp, #0]
 80052a6:	2110      	movs	r1, #16
 80052a8:	200a      	movs	r0, #10
 80052aa:	f7fe fb0a 	bl	80038c2 <xQueueGenericCreateStatic>
 80052ae:	0002      	movs	r2, r0
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <prvCheckForValidListAndQueue+0x64>)
 80052b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <prvCheckForValidListAndQueue+0x64>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <prvCheckForValidListAndQueue+0x64>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <prvCheckForValidListAndQueue+0x80>)
 80052c2:	0011      	movs	r1, r2
 80052c4:	0018      	movs	r0, r3
 80052c6:	f7fe fe75 	bl	8003fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ca:	f000 f8c3 	bl	8005454 <vPortExitCritical>
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000eb8 	.word	0x20000eb8
 80052d8:	20000e88 	.word	0x20000e88
 80052dc:	20000e9c 	.word	0x20000e9c
 80052e0:	20000eb0 	.word	0x20000eb0
 80052e4:	20000eb4 	.word	0x20000eb4
 80052e8:	20000f64 	.word	0x20000f64
 80052ec:	20000ec4 	.word	0x20000ec4
 80052f0:	08005b08 	.word	0x08005b08

080052f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b04      	subs	r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2280      	movs	r2, #128	; 0x80
 800530a:	0452      	lsls	r2, r2, #17
 800530c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3b04      	subs	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3b04      	subs	r3, #4
 800531e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <pxPortInitialiseStack+0x50>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b14      	subs	r3, #20
 800532a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b20      	subs	r3, #32
 8005336:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b004      	add	sp, #16
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	08005349 	.word	0x08005349

08005348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <prvTaskExitError+0x2c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	d001      	beq.n	800535e <prvTaskExitError+0x16>
 800535a:	b672      	cpsid	i
 800535c:	e7fe      	b.n	800535c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800535e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0fc      	beq.n	8005362 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b002      	add	sp, #8
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	20000010 	.word	0x20000010

08005378 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005390 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005390:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <pxCurrentTCBConst2>)
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	3020      	adds	r0, #32
 8005398:	f380 8809 	msr	PSP, r0
 800539c:	2002      	movs	r0, #2
 800539e:	f380 8814 	msr	CONTROL, r0
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80053a8:	46ae      	mov	lr, r5
 80053aa:	bc08      	pop	{r3}
 80053ac:	bc04      	pop	{r2}
 80053ae:	b662      	cpsie	i
 80053b0:	4718      	bx	r3
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46c0      	nop			; (mov r8, r8)
 80053bc:	46c0      	nop			; (mov r8, r8)
 80053be:	46c0      	nop			; (mov r8, r8)

080053c0 <pxCurrentTCBConst2>:
 80053c0:	20000988 	.word	0x20000988
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80053c4:	46c0      	nop			; (mov r8, r8)
 80053c6:	46c0      	nop			; (mov r8, r8)

080053c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80053cc:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <xPortStartScheduler+0x40>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <xPortStartScheduler+0x40>)
 80053d2:	21ff      	movs	r1, #255	; 0xff
 80053d4:	0409      	lsls	r1, r1, #16
 80053d6:	430a      	orrs	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <xPortStartScheduler+0x40>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <xPortStartScheduler+0x40>)
 80053e0:	21ff      	movs	r1, #255	; 0xff
 80053e2:	0609      	lsls	r1, r1, #24
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80053e8:	f000 f898 	bl	800551c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <xPortStartScheduler+0x44>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80053f2:	f7ff ffcd 	bl	8005390 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053f6:	f7ff f9a5 	bl	8004744 <vTaskSwitchContext>
	prvTaskExitError();
 80053fa:	f7ff ffa5 	bl	8005348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	e000ed20 	.word	0xe000ed20
 800540c:	20000010 	.word	0x20000010

08005410 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <vPortYield+0x1c>)
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	0552      	lsls	r2, r2, #21
 800541a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800541c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005420:	f3bf 8f6f 	isb	sy
}
 8005424:	46c0      	nop			; (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005434:	b672      	cpsid	i
    uxCriticalNesting++;
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <vPortEnterCritical+0x20>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <vPortEnterCritical+0x20>)
 800543e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005440:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005444:	f3bf 8f6f 	isb	sy
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	20000010 	.word	0x20000010

08005454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <vPortExitCritical+0x2c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <vPortExitCritical+0x10>
 8005460:	b672      	cpsid	i
 8005462:	e7fe      	b.n	8005462 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <vPortExitCritical+0x2c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1e5a      	subs	r2, r3, #1
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <vPortExitCritical+0x2c>)
 800546c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <vPortExitCritical+0x2c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d100      	bne.n	8005478 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005476:	b662      	cpsie	i
    }
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	20000010 	.word	0x20000010

08005484 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005484:	f3ef 8010 	mrs	r0, PRIMASK
 8005488:	b672      	cpsid	i
 800548a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800548c:	46c0      	nop			; (mov r8, r8)
 800548e:	0018      	movs	r0, r3

08005490 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005490:	f380 8810 	msr	PRIMASK, r0
 8005494:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005496:	46c0      	nop			; (mov r8, r8)
	...

080054a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054a0:	f3ef 8009 	mrs	r0, PSP
 80054a4:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <pxCurrentTCBConst>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	3820      	subs	r0, #32
 80054aa:	6010      	str	r0, [r2, #0]
 80054ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054ae:	4644      	mov	r4, r8
 80054b0:	464d      	mov	r5, r9
 80054b2:	4656      	mov	r6, sl
 80054b4:	465f      	mov	r7, fp
 80054b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80054b8:	b508      	push	{r3, lr}
 80054ba:	b672      	cpsid	i
 80054bc:	f7ff f942 	bl	8004744 <vTaskSwitchContext>
 80054c0:	b662      	cpsie	i
 80054c2:	bc0c      	pop	{r2, r3}
 80054c4:	6811      	ldr	r1, [r2, #0]
 80054c6:	6808      	ldr	r0, [r1, #0]
 80054c8:	3010      	adds	r0, #16
 80054ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054cc:	46a0      	mov	r8, r4
 80054ce:	46a9      	mov	r9, r5
 80054d0:	46b2      	mov	sl, r6
 80054d2:	46bb      	mov	fp, r7
 80054d4:	f380 8809 	msr	PSP, r0
 80054d8:	3820      	subs	r0, #32
 80054da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80054dc:	4718      	bx	r3
 80054de:	46c0      	nop			; (mov r8, r8)

080054e0 <pxCurrentTCBConst>:
 80054e0:	20000988 	.word	0x20000988
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46c0      	nop			; (mov r8, r8)

080054e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80054ee:	f7ff ffc9 	bl	8005484 <ulSetInterruptMaskFromISR>
 80054f2:	0003      	movs	r3, r0
 80054f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054f6:	f7ff f871 	bl	80045dc <xTaskIncrementTick>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d003      	beq.n	8005506 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <SysTick_Handler+0x30>)
 8005500:	2280      	movs	r2, #128	; 0x80
 8005502:	0552      	lsls	r2, r2, #21
 8005504:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7ff ffc1 	bl	8005490 <vClearInterruptMaskFromISR>
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b002      	add	sp, #8
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <prvSetupTimerInterrupt+0x34>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005526:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <prvSetupTimerInterrupt+0x38>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <prvSetupTimerInterrupt+0x3c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	22fa      	movs	r2, #250	; 0xfa
 8005532:	0091      	lsls	r1, r2, #2
 8005534:	0018      	movs	r0, r3
 8005536:	f7fa fde7 	bl	8000108 <__udivsi3>
 800553a:	0003      	movs	r3, r0
 800553c:	001a      	movs	r2, r3
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <prvSetupTimerInterrupt+0x40>)
 8005540:	3a01      	subs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005544:	4b02      	ldr	r3, [pc, #8]	; (8005550 <prvSetupTimerInterrupt+0x34>)
 8005546:	2207      	movs	r2, #7
 8005548:	601a      	str	r2, [r3, #0]
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	e000e010 	.word	0xe000e010
 8005554:	e000e018 	.word	0xe000e018
 8005558:	20000004 	.word	0x20000004
 800555c:	e000e014 	.word	0xe000e014

08005560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800556c:	f7fe ff90 	bl	8004490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005570:	4b49      	ldr	r3, [pc, #292]	; (8005698 <pvPortMalloc+0x138>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005578:	f000 f8e0 	bl	800573c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800557c:	4b47      	ldr	r3, [pc, #284]	; (800569c <pvPortMalloc+0x13c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4013      	ands	r3, r2
 8005584:	d000      	beq.n	8005588 <pvPortMalloc+0x28>
 8005586:	e079      	b.n	800567c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d012      	beq.n	80055b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800558e:	2208      	movs	r2, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	189b      	adds	r3, r3, r2
 8005594:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2207      	movs	r2, #7
 800559a:	4013      	ands	r3, r2
 800559c:	d00a      	beq.n	80055b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2207      	movs	r2, #7
 80055a2:	4393      	bics	r3, r2
 80055a4:	3308      	adds	r3, #8
 80055a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2207      	movs	r2, #7
 80055ac:	4013      	ands	r3, r2
 80055ae:	d001      	beq.n	80055b4 <pvPortMalloc+0x54>
 80055b0:	b672      	cpsid	i
 80055b2:	e7fe      	b.n	80055b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d060      	beq.n	800567c <pvPortMalloc+0x11c>
 80055ba:	4b39      	ldr	r3, [pc, #228]	; (80056a0 <pvPortMalloc+0x140>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d85b      	bhi.n	800567c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055c4:	4b37      	ldr	r3, [pc, #220]	; (80056a4 <pvPortMalloc+0x144>)
 80055c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80055c8:	4b36      	ldr	r3, [pc, #216]	; (80056a4 <pvPortMalloc+0x144>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ce:	e004      	b.n	80055da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d903      	bls.n	80055ec <pvPortMalloc+0x8c>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f1      	bne.n	80055d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <pvPortMalloc+0x138>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d042      	beq.n	800567c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2208      	movs	r2, #8
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	2308      	movs	r3, #8
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	429a      	cmp	r2, r3
 8005616:	d916      	bls.n	8005646 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	18d3      	adds	r3, r2, r3
 800561e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2207      	movs	r2, #7
 8005624:	4013      	ands	r3, r2
 8005626:	d001      	beq.n	800562c <pvPortMalloc+0xcc>
 8005628:	b672      	cpsid	i
 800562a:	e7fe      	b.n	800562a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad2      	subs	r2, r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	0018      	movs	r0, r3
 8005642:	f000 f8db 	bl	80057fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005646:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <pvPortMalloc+0x140>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <pvPortMalloc+0x140>)
 8005652:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <pvPortMalloc+0x140>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <pvPortMalloc+0x148>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d203      	bcs.n	8005668 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005660:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <pvPortMalloc+0x140>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <pvPortMalloc+0x148>)
 8005666:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <pvPortMalloc+0x13c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	431a      	orrs	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800567c:	f7fe ff14 	bl	80044a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2207      	movs	r2, #7
 8005684:	4013      	ands	r3, r2
 8005686:	d001      	beq.n	800568c <pvPortMalloc+0x12c>
 8005688:	b672      	cpsid	i
 800568a:	e7fe      	b.n	800568a <pvPortMalloc+0x12a>
	return pvReturn;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b006      	add	sp, #24
 8005694:	bd80      	pop	{r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	20001bbc 	.word	0x20001bbc
 800569c:	20001bc8 	.word	0x20001bc8
 80056a0:	20001bc0 	.word	0x20001bc0
 80056a4:	20001bb4 	.word	0x20001bb4
 80056a8:	20001bc4 	.word	0x20001bc4

080056ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d035      	beq.n	800572a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056be:	2308      	movs	r3, #8
 80056c0:	425b      	negs	r3, r3
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	4b18      	ldr	r3, [pc, #96]	; (8005734 <vPortFree+0x88>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4013      	ands	r3, r2
 80056d6:	d101      	bne.n	80056dc <vPortFree+0x30>
 80056d8:	b672      	cpsid	i
 80056da:	e7fe      	b.n	80056da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <vPortFree+0x3c>
 80056e4:	b672      	cpsid	i
 80056e6:	e7fe      	b.n	80056e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <vPortFree+0x88>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4013      	ands	r3, r2
 80056f2:	d01a      	beq.n	800572a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <vPortFree+0x88>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800570c:	f7fe fec0 	bl	8004490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b08      	ldr	r3, [pc, #32]	; (8005738 <vPortFree+0x8c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	18d2      	adds	r2, r2, r3
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <vPortFree+0x8c>)
 800571c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 f86b 	bl	80057fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005726:	f7fe febf 	bl	80044a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b004      	add	sp, #16
 8005730:	bd80      	pop	{r7, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	20001bc8 	.word	0x20001bc8
 8005738:	20001bc0 	.word	0x20001bc0

0800573c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005742:	23c0      	movs	r3, #192	; 0xc0
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005748:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <prvHeapInit+0xa8>)
 800574a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2207      	movs	r2, #7
 8005750:	4013      	ands	r3, r2
 8005752:	d00c      	beq.n	800576e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3307      	adds	r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2207      	movs	r2, #7
 800575e:	4393      	bics	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1ad2      	subs	r2, r2, r3
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <prvHeapInit+0xa8>)
 800576a:	18d3      	adds	r3, r2, r3
 800576c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <prvHeapInit+0xac>)
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <prvHeapInit+0xac>)
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	18d3      	adds	r3, r2, r3
 8005784:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005786:	2208      	movs	r2, #8
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2207      	movs	r2, #7
 8005792:	4393      	bics	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4b14      	ldr	r3, [pc, #80]	; (80057ec <prvHeapInit+0xb0>)
 800579a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800579c:	4b13      	ldr	r3, [pc, #76]	; (80057ec <prvHeapInit+0xb0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2200      	movs	r2, #0
 80057a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <prvHeapInit+0xb0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	1ad2      	subs	r2, r2, r3
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057ba:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <prvHeapInit+0xb0>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <prvHeapInit+0xb4>)
 80057c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <prvHeapInit+0xb8>)
 80057d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <prvHeapInit+0xbc>)
 80057d4:	2280      	movs	r2, #128	; 0x80
 80057d6:	0612      	lsls	r2, r2, #24
 80057d8:	601a      	str	r2, [r3, #0]
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b004      	add	sp, #16
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	20000fb4 	.word	0x20000fb4
 80057e8:	20001bb4 	.word	0x20001bb4
 80057ec:	20001bbc 	.word	0x20001bbc
 80057f0:	20001bc4 	.word	0x20001bc4
 80057f4:	20001bc0 	.word	0x20001bc0
 80057f8:	20001bc8 	.word	0x20001bc8

080057fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005804:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e002      	b.n	8005810 <prvInsertBlockIntoFreeList+0x14>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d8f7      	bhi.n	800580a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	18d3      	adds	r3, r2, r3
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d108      	bne.n	800583e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	18d2      	adds	r2, r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	18d2      	adds	r2, r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d118      	bne.n	8005884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <prvInsertBlockIntoFreeList+0xac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d00d      	beq.n	800587a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	18d2      	adds	r2, r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	e008      	b.n	800588c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800587a:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <prvInsertBlockIntoFreeList+0xac>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e003      	b.n	800588c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d002      	beq.n	800589a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	46bd      	mov	sp, r7
 800589e:	b004      	add	sp, #16
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	20001bb4 	.word	0x20001bb4
 80058a8:	20001bbc 	.word	0x20001bbc

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	2600      	movs	r6, #0
 80058b0:	4d0c      	ldr	r5, [pc, #48]	; (80058e4 <__libc_init_array+0x38>)
 80058b2:	4c0d      	ldr	r4, [pc, #52]	; (80058e8 <__libc_init_array+0x3c>)
 80058b4:	1b64      	subs	r4, r4, r5
 80058b6:	10a4      	asrs	r4, r4, #2
 80058b8:	42a6      	cmp	r6, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	2600      	movs	r6, #0
 80058be:	f000 f8f9 	bl	8005ab4 <_init>
 80058c2:	4d0a      	ldr	r5, [pc, #40]	; (80058ec <__libc_init_array+0x40>)
 80058c4:	4c0a      	ldr	r4, [pc, #40]	; (80058f0 <__libc_init_array+0x44>)
 80058c6:	1b64      	subs	r4, r4, r5
 80058c8:	10a4      	asrs	r4, r4, #2
 80058ca:	42a6      	cmp	r6, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	00b3      	lsls	r3, r6, #2
 80058d2:	58eb      	ldr	r3, [r5, r3]
 80058d4:	4798      	blx	r3
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	00b3      	lsls	r3, r6, #2
 80058dc:	58eb      	ldr	r3, [r5, r3]
 80058de:	4798      	blx	r3
 80058e0:	3601      	adds	r6, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	08005bf8 	.word	0x08005bf8
 80058e8:	08005bf8 	.word	0x08005bf8
 80058ec:	08005bf8 	.word	0x08005bf8
 80058f0:	08005bfc 	.word	0x08005bfc

080058f4 <__retarget_lock_acquire_recursive>:
 80058f4:	4770      	bx	lr

080058f6 <__retarget_lock_release_recursive>:
 80058f6:	4770      	bx	lr

080058f8 <memcpy>:
 80058f8:	2300      	movs	r3, #0
 80058fa:	b510      	push	{r4, lr}
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d100      	bne.n	8005902 <memcpy+0xa>
 8005900:	bd10      	pop	{r4, pc}
 8005902:	5ccc      	ldrb	r4, [r1, r3]
 8005904:	54c4      	strb	r4, [r0, r3]
 8005906:	3301      	adds	r3, #1
 8005908:	e7f8      	b.n	80058fc <memcpy+0x4>

0800590a <memset>:
 800590a:	0003      	movs	r3, r0
 800590c:	1882      	adds	r2, r0, r2
 800590e:	4293      	cmp	r3, r2
 8005910:	d100      	bne.n	8005914 <memset+0xa>
 8005912:	4770      	bx	lr
 8005914:	7019      	strb	r1, [r3, #0]
 8005916:	3301      	adds	r3, #1
 8005918:	e7f9      	b.n	800590e <memset+0x4>

0800591a <cleanup_glue>:
 800591a:	b570      	push	{r4, r5, r6, lr}
 800591c:	000d      	movs	r5, r1
 800591e:	6809      	ldr	r1, [r1, #0]
 8005920:	0004      	movs	r4, r0
 8005922:	2900      	cmp	r1, #0
 8005924:	d001      	beq.n	800592a <cleanup_glue+0x10>
 8005926:	f7ff fff8 	bl	800591a <cleanup_glue>
 800592a:	0029      	movs	r1, r5
 800592c:	0020      	movs	r0, r4
 800592e:	f000 f877 	bl	8005a20 <_free_r>
 8005932:	bd70      	pop	{r4, r5, r6, pc}

08005934 <_reclaim_reent>:
 8005934:	4b31      	ldr	r3, [pc, #196]	; (80059fc <_reclaim_reent+0xc8>)
 8005936:	b570      	push	{r4, r5, r6, lr}
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	0004      	movs	r4, r0
 800593c:	4283      	cmp	r3, r0
 800593e:	d049      	beq.n	80059d4 <_reclaim_reent+0xa0>
 8005940:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <_reclaim_reent+0x28>
 8005946:	2500      	movs	r5, #0
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	42ab      	cmp	r3, r5
 800594c:	d147      	bne.n	80059de <_reclaim_reent+0xaa>
 800594e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	2900      	cmp	r1, #0
 8005954:	d002      	beq.n	800595c <_reclaim_reent+0x28>
 8005956:	0020      	movs	r0, r4
 8005958:	f000 f862 	bl	8005a20 <_free_r>
 800595c:	6961      	ldr	r1, [r4, #20]
 800595e:	2900      	cmp	r1, #0
 8005960:	d002      	beq.n	8005968 <_reclaim_reent+0x34>
 8005962:	0020      	movs	r0, r4
 8005964:	f000 f85c 	bl	8005a20 <_free_r>
 8005968:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800596a:	2900      	cmp	r1, #0
 800596c:	d002      	beq.n	8005974 <_reclaim_reent+0x40>
 800596e:	0020      	movs	r0, r4
 8005970:	f000 f856 	bl	8005a20 <_free_r>
 8005974:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005976:	2900      	cmp	r1, #0
 8005978:	d002      	beq.n	8005980 <_reclaim_reent+0x4c>
 800597a:	0020      	movs	r0, r4
 800597c:	f000 f850 	bl	8005a20 <_free_r>
 8005980:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005982:	2900      	cmp	r1, #0
 8005984:	d002      	beq.n	800598c <_reclaim_reent+0x58>
 8005986:	0020      	movs	r0, r4
 8005988:	f000 f84a 	bl	8005a20 <_free_r>
 800598c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800598e:	2900      	cmp	r1, #0
 8005990:	d002      	beq.n	8005998 <_reclaim_reent+0x64>
 8005992:	0020      	movs	r0, r4
 8005994:	f000 f844 	bl	8005a20 <_free_r>
 8005998:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800599a:	2900      	cmp	r1, #0
 800599c:	d002      	beq.n	80059a4 <_reclaim_reent+0x70>
 800599e:	0020      	movs	r0, r4
 80059a0:	f000 f83e 	bl	8005a20 <_free_r>
 80059a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80059a6:	2900      	cmp	r1, #0
 80059a8:	d002      	beq.n	80059b0 <_reclaim_reent+0x7c>
 80059aa:	0020      	movs	r0, r4
 80059ac:	f000 f838 	bl	8005a20 <_free_r>
 80059b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d002      	beq.n	80059bc <_reclaim_reent+0x88>
 80059b6:	0020      	movs	r0, r4
 80059b8:	f000 f832 	bl	8005a20 <_free_r>
 80059bc:	69a3      	ldr	r3, [r4, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <_reclaim_reent+0xa0>
 80059c2:	0020      	movs	r0, r4
 80059c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059c6:	4798      	blx	r3
 80059c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80059ca:	2900      	cmp	r1, #0
 80059cc:	d002      	beq.n	80059d4 <_reclaim_reent+0xa0>
 80059ce:	0020      	movs	r0, r4
 80059d0:	f7ff ffa3 	bl	800591a <cleanup_glue>
 80059d4:	bd70      	pop	{r4, r5, r6, pc}
 80059d6:	5949      	ldr	r1, [r1, r5]
 80059d8:	2900      	cmp	r1, #0
 80059da:	d108      	bne.n	80059ee <_reclaim_reent+0xba>
 80059dc:	3504      	adds	r5, #4
 80059de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e0:	68d9      	ldr	r1, [r3, #12]
 80059e2:	2d80      	cmp	r5, #128	; 0x80
 80059e4:	d1f7      	bne.n	80059d6 <_reclaim_reent+0xa2>
 80059e6:	0020      	movs	r0, r4
 80059e8:	f000 f81a 	bl	8005a20 <_free_r>
 80059ec:	e7af      	b.n	800594e <_reclaim_reent+0x1a>
 80059ee:	680e      	ldr	r6, [r1, #0]
 80059f0:	0020      	movs	r0, r4
 80059f2:	f000 f815 	bl	8005a20 <_free_r>
 80059f6:	0031      	movs	r1, r6
 80059f8:	e7ee      	b.n	80059d8 <_reclaim_reent+0xa4>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	20000014 	.word	0x20000014

08005a00 <__malloc_lock>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4802      	ldr	r0, [pc, #8]	; (8005a0c <__malloc_lock+0xc>)
 8005a04:	f7ff ff76 	bl	80058f4 <__retarget_lock_acquire_recursive>
 8005a08:	bd10      	pop	{r4, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	20001bcc 	.word	0x20001bcc

08005a10 <__malloc_unlock>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	4802      	ldr	r0, [pc, #8]	; (8005a1c <__malloc_unlock+0xc>)
 8005a14:	f7ff ff6f 	bl	80058f6 <__retarget_lock_release_recursive>
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	20001bcc 	.word	0x20001bcc

08005a20 <_free_r>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	0005      	movs	r5, r0
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d010      	beq.n	8005a4a <_free_r+0x2a>
 8005a28:	1f0c      	subs	r4, r1, #4
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	da00      	bge.n	8005a32 <_free_r+0x12>
 8005a30:	18e4      	adds	r4, r4, r3
 8005a32:	0028      	movs	r0, r5
 8005a34:	f7ff ffe4 	bl	8005a00 <__malloc_lock>
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <_free_r+0x90>)
 8005a3a:	6813      	ldr	r3, [r2, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <_free_r+0x2c>
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6014      	str	r4, [r2, #0]
 8005a44:	0028      	movs	r0, r5
 8005a46:	f7ff ffe3 	bl	8005a10 <__malloc_unlock>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	d908      	bls.n	8005a62 <_free_r+0x42>
 8005a50:	6821      	ldr	r1, [r4, #0]
 8005a52:	1860      	adds	r0, r4, r1
 8005a54:	4283      	cmp	r3, r0
 8005a56:	d1f3      	bne.n	8005a40 <_free_r+0x20>
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	1841      	adds	r1, r0, r1
 8005a5e:	6021      	str	r1, [r4, #0]
 8005a60:	e7ee      	b.n	8005a40 <_free_r+0x20>
 8005a62:	001a      	movs	r2, r3
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <_free_r+0x4e>
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	d9f9      	bls.n	8005a62 <_free_r+0x42>
 8005a6e:	6811      	ldr	r1, [r2, #0]
 8005a70:	1850      	adds	r0, r2, r1
 8005a72:	42a0      	cmp	r0, r4
 8005a74:	d10b      	bne.n	8005a8e <_free_r+0x6e>
 8005a76:	6820      	ldr	r0, [r4, #0]
 8005a78:	1809      	adds	r1, r1, r0
 8005a7a:	1850      	adds	r0, r2, r1
 8005a7c:	6011      	str	r1, [r2, #0]
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	d1e0      	bne.n	8005a44 <_free_r+0x24>
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	1841      	adds	r1, r0, r1
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	6053      	str	r3, [r2, #4]
 8005a8c:	e7da      	b.n	8005a44 <_free_r+0x24>
 8005a8e:	42a0      	cmp	r0, r4
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x78>
 8005a92:	230c      	movs	r3, #12
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	e7d5      	b.n	8005a44 <_free_r+0x24>
 8005a98:	6821      	ldr	r1, [r4, #0]
 8005a9a:	1860      	adds	r0, r4, r1
 8005a9c:	4283      	cmp	r3, r0
 8005a9e:	d103      	bne.n	8005aa8 <_free_r+0x88>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	1841      	adds	r1, r0, r1
 8005aa6:	6021      	str	r1, [r4, #0]
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	6054      	str	r4, [r2, #4]
 8005aac:	e7ca      	b.n	8005a44 <_free_r+0x24>
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20001bd0 	.word	0x20001bd0

08005ab4 <_init>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr

08005ac0 <_fini>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr
