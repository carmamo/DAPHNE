
F070RB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008444  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087bc  080087bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080087bc  080087bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087bc  080087bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087bc  080087bc  000187bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080087c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000074  08008838  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c7c  08008838  00021c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad37  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003693  00000000  00000000  0003add3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0003e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001345d  00000000  00000000  00040fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188f9  00000000  00000000  0005442d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075fa0  00000000  00000000  0006cd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2cc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  000e2d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080084ec 	.word	0x080084ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080084ec 	.word	0x080084ec

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <CANSPI_EN_Int>:

/** CAN SPI APIs */ 

/* Enable Interrupt */
void CANSPI_EN_Int(SPI_HandleTypeDef *SPI_CAN)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	22ff      	movs	r2, #255	; 0xff
 8000242:	212c      	movs	r1, #44	; 0x2c
 8000244:	f000 fcf8 	bl	8000c38 <MCP2515_BitModify>

  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTE, 0xff, 0xff);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	23ff      	movs	r3, #255	; 0xff
 800024c:	22ff      	movs	r2, #255	; 0xff
 800024e:	212b      	movs	r1, #43	; 0x2b
 8000250:	f000 fcf2 	bl	8000c38 <MCP2515_BitModify>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <CANSPI_CL_Flag_Int>:

void CANSPI_CL_Flag_Int(SPI_HandleTypeDef *SPI_CAN)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	2300      	movs	r3, #0
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	212c      	movs	r1, #44	; 0x2c
 800026c:	f000 fce4 	bl	8000c38 <MCP2515_BitModify>
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <CANSPI_Initialize>:
  MCP2515_SetSleepMode(SPI_CAN);
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000280:	210c      	movs	r1, #12
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
  RXM0reg.RXM0SIDL = 0x00;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2200      	movs	r2, #0
 800028c:	705a      	strb	r2, [r3, #1]
  RXM0reg.RXM0EID8 = 0x00;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2200      	movs	r2, #0
 8000292:	709a      	strb	r2, [r3, #2]
  RXM0reg.RXM0EID0 = 0x00;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	70da      	strb	r2, [r3, #3]
  
  RXM1reg.RXM1SIDH = 0x00;
 800029a:	2108      	movs	r1, #8
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	705a      	strb	r2, [r3, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	709a      	strb	r2, [r3, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	70da      	strb	r2, [r3, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 80002b4:	2124      	movs	r1, #36	; 0x24
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	705a      	strb	r2, [r3, #1]
  RXF0reg.RXF0EID8 = 0x00;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	709a      	strb	r2, [r3, #2]
  RXF0reg.RXF0EID0 = 0x00;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	70da      	strb	r2, [r3, #3]
  
  RXF1reg.RXF1SIDH = 0x00;
 80002ce:	2120      	movs	r1, #32
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2208      	movs	r2, #8
 80002da:	705a      	strb	r2, [r3, #1]
  RXF1reg.RXF1EID8 = 0x00;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	709a      	strb	r2, [r3, #2]
  RXF1reg.RXF1EID0 = 0x00;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	70da      	strb	r2, [r3, #3]
  
  RXF2reg.RXF2SIDH = 0x00;
 80002e8:	211c      	movs	r1, #28
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
  RXF2reg.RXF2SIDL = 0x00;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	705a      	strb	r2, [r3, #1]
  RXF2reg.RXF2EID8 = 0x00;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	709a      	strb	r2, [r3, #2]
  RXF2reg.RXF2EID0 = 0x00;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	70da      	strb	r2, [r3, #3]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000302:	2118      	movs	r1, #24
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  RXF3reg.RXF3SIDL = 0x00;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	705a      	strb	r2, [r3, #1]
  RXF3reg.RXF3EID8 = 0x00;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	709a      	strb	r2, [r3, #2]
  RXF3reg.RXF3EID0 = 0x00;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	70da      	strb	r2, [r3, #3]
  
  RXF4reg.RXF4SIDH = 0x00;
 800031c:	2114      	movs	r1, #20
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
  RXF4reg.RXF4SIDL = 0x00;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	705a      	strb	r2, [r3, #1]
  RXF4reg.RXF4EID8 = 0x00;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	709a      	strb	r2, [r3, #2]
  RXF4reg.RXF4EID0 = 0x00;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	70da      	strb	r2, [r3, #3]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000336:	2110      	movs	r1, #16
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
  RXF5reg.RXF5SIDL = 0x08;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2208      	movs	r2, #8
 8000342:	705a      	strb	r2, [r3, #1]
  RXF5reg.RXF5EID8 = 0x00;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
  RXF5reg.RXF5EID0 = 0x00;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	70da      	strb	r2, [r3, #3]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize(SPI_CAN))
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	0018      	movs	r0, r3
 8000354:	f000 faba 	bl	80008cc <MCP2515_Initialize>
 8000358:	0003      	movs	r3, r0
 800035a:	001a      	movs	r2, r3
 800035c:	2301      	movs	r3, #1
 800035e:	4053      	eors	r3, r2
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <CANSPI_Initialize+0xf2>
    return false;
 8000366:	2300      	movs	r3, #0
 8000368:	e074      	b.n	8000454 <CANSPI_Initialize+0x1dc>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode(SPI_CAN))
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fad1 	bl	8000914 <MCP2515_SetConfigMode>
 8000372:	0003      	movs	r3, r0
 8000374:	001a      	movs	r2, r3
 8000376:	2301      	movs	r3, #1
 8000378:	4053      	eors	r3, r2
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <CANSPI_Initialize+0x10c>
    return false;
 8000380:	2300      	movs	r3, #0
 8000382:	e067      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000384:	230c      	movs	r3, #12
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	2223      	movs	r2, #35	; 0x23
 800038c:	2120      	movs	r1, #32
 800038e:	f000 fb91 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000392:	2308      	movs	r3, #8
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2227      	movs	r2, #39	; 0x27
 800039a:	2124      	movs	r1, #36	; 0x24
 800039c:	f000 fb8a 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80003a0:	2324      	movs	r3, #36	; 0x24
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	2203      	movs	r2, #3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f000 fb83 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80003ae:	2320      	movs	r3, #32
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	2207      	movs	r2, #7
 80003b6:	2104      	movs	r1, #4
 80003b8:	f000 fb7c 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80003bc:	231c      	movs	r3, #28
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	220b      	movs	r2, #11
 80003c4:	2108      	movs	r1, #8
 80003c6:	f000 fb75 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80003ca:	2318      	movs	r3, #24
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	2213      	movs	r2, #19
 80003d2:	2110      	movs	r1, #16
 80003d4:	f000 fb6e 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80003d8:	2314      	movs	r3, #20
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	2217      	movs	r2, #23
 80003e0:	2114      	movs	r1, #20
 80003e2:	f000 fb67 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80003e6:	2310      	movs	r3, #16
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	221b      	movs	r2, #27
 80003ee:	2118      	movs	r1, #24
 80003f0:	f000 fb60 	bl	8000ab4 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2204      	movs	r2, #4
 80003f8:	2160      	movs	r1, #96	; 0x60
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fb2f 	bl	8000a5e <MCP2515_WriteByte>
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	2170      	movs	r1, #112	; 0x70
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fb29 	bl	8000a5e <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF1, 0x00);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	212a      	movs	r1, #42	; 0x2a
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb23 	bl	8000a5e <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF2, 0xE5);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	22e5      	movs	r2, #229	; 0xe5
 800041c:	2129      	movs	r1, #41	; 0x29
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb1d 	bl	8000a5e <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF3, 0x83);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2283      	movs	r2, #131	; 0x83
 8000428:	2128      	movs	r1, #40	; 0x28
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fb17 	bl	8000a5e <MCP2515_WriteByte>
  
  CANSPI_EN_Int(SPI_CAN);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fefe 	bl	8000234 <CANSPI_EN_Int>
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode(SPI_CAN))
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fa94 	bl	8000968 <MCP2515_SetNormalMode>
 8000440:	0003      	movs	r3, r0
 8000442:	001a      	movs	r2, r3
 8000444:	2301      	movs	r3, #1
 8000446:	4053      	eors	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <CANSPI_Initialize+0x1da>
    return false;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  return true;
 8000452:	2301      	movs	r3, #1
}
 8000454:	0018      	movs	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	b00a      	add	sp, #40	; 0x28
 800045a:	bd80      	pop	{r7, pc}

0800045c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 8000466:	240f      	movs	r4, #15
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
  
  idReg.tempSIDH = 0;
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000474:	4b40      	ldr	r3, [pc, #256]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000476:	2200      	movs	r2, #0
 8000478:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800047a:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <CANSPI_Transmit+0x11c>)
 800047c:	2200      	movs	r2, #0
 800047e:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000482:	2200      	movs	r2, #0
 8000484:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus(SPI_CAN);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fb97 	bl	8000bbc <MCP2515_ReadStatus>
 800048e:	0003      	movs	r3, r0
 8000490:	001a      	movs	r2, r3
 8000492:	4b3a      	ldr	r3, [pc, #232]	; (800057c <CANSPI_Transmit+0x120>)
 8000494:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000496:	4b39      	ldr	r3, [pc, #228]	; (800057c <CANSPI_Transmit+0x120>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2204      	movs	r2, #4
 800049c:	4013      	ands	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d11b      	bne.n	80004dc <CANSPI_Transmit+0x80>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6858      	ldr	r0, [r3, #4]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4a32      	ldr	r2, [pc, #200]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	f000 f970 	bl	8000794 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	7a19      	ldrb	r1, [r3, #8]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	3309      	adds	r3, #9
 80004bc:	4a2e      	ldr	r2, [pc, #184]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	000b      	movs	r3, r1
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	f000 fb29 	bl	8000b1c <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX0);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2181      	movs	r1, #129	; 0x81
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fb5a 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e046      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <CANSPI_Transmit+0x120>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2210      	movs	r2, #16
 80004e2:	4013      	ands	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d11c      	bne.n	8000524 <CANSPI_Transmit+0xc8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6858      	ldr	r0, [r3, #4]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4a21      	ldr	r2, [pc, #132]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	f000 f94d 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	7a19      	ldrb	r1, [r3, #8]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	3309      	adds	r3, #9
 8000502:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	000b      	movs	r3, r1
 800050a:	2142      	movs	r1, #66	; 0x42
 800050c:	f000 fb06 	bl	8000b1c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX1);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2182      	movs	r1, #130	; 0x82
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fb37 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e022      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <CANSPI_Transmit+0x120>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	4013      	ands	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d11b      	bne.n	800056a <CANSPI_Transmit+0x10e>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6858      	ldr	r0, [r3, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <CANSPI_Transmit+0x11c>)
 800053c:	0019      	movs	r1, r3
 800053e:	f000 f929 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	7a19      	ldrb	r1, [r3, #8]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	3309      	adds	r3, #9
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <CANSPI_Transmit+0x11c>)
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	000b      	movs	r3, r1
 8000552:	2144      	movs	r1, #68	; 0x44
 8000554:	f000 fae2 	bl	8000b1c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX2);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2184      	movs	r1, #132	; 0x84
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb13 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000562:	230f      	movs	r3, #15
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 800056a:	230f      	movs	r3, #15
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b005      	add	sp, #20
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	20000094 	.word	0x20000094
 800057c:	20000090 	.word	0x20000090

08000580 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800058a:	231f      	movs	r3, #31
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus(SPI_CAN);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fb30 	bl	8000bfa <MCP2515_GetRxStatus>
 800059a:	0003      	movs	r3, r0
 800059c:	001a      	movs	r2, r3
 800059e:	210c      	movs	r1, #12
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	701a      	strb	r2, [r3, #0]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	223f      	movs	r2, #63	; 0x3f
 80005aa:	4393      	bics	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <CANSPI_Receive+0x34>
 80005b2:	e07e      	b.n	80006b2 <CANSPI_Receive+0x132>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	223f      	movs	r2, #63	; 0x3f
 80005ba:	4393      	bics	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3b40      	subs	r3, #64	; 0x40
 80005c0:	425a      	negs	r2, r3
 80005c2:	4153      	adcs	r3, r2
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	213f      	movs	r1, #63	; 0x3f
 80005cc:	438b      	bics	r3, r1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3bc0      	subs	r3, #192	; 0xc0
 80005d2:	4259      	negs	r1, r3
 80005d4:	414b      	adcs	r3, r1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <CANSPI_Receive+0x70>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80005e0:	2310      	movs	r3, #16
 80005e2:	18fa      	adds	r2, r7, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	230d      	movs	r3, #13
 80005e8:	2190      	movs	r1, #144	; 0x90
 80005ea:	f000 fa0f 	bl	8000a0c <MCP2515_ReadRxSequence>
 80005ee:	e00e      	b.n	800060e <CANSPI_Receive+0x8e>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	223f      	movs	r2, #63	; 0x3f
 80005f8:	4393      	bics	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b80      	cmp	r3, #128	; 0x80
 80005fe:	d106      	bne.n	800060e <CANSPI_Receive+0x8e>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000600:	2310      	movs	r3, #16
 8000602:	18fa      	adds	r2, r7, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	230d      	movs	r3, #13
 8000608:	2194      	movs	r1, #148	; 0x94
 800060a:	f000 f9ff 	bl	8000a0c <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800060e:	230c      	movs	r3, #12
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2218      	movs	r2, #24
 8000616:	4013      	ands	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b10      	cmp	r3, #16
 800061c:	d111      	bne.n	8000642 <CANSPI_Receive+0xc2>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000624:	2410      	movs	r4, #16
 8000626:	193b      	adds	r3, r7, r4
 8000628:	7898      	ldrb	r0, [r3, #2]
 800062a:	193b      	adds	r3, r7, r4
 800062c:	78d9      	ldrb	r1, [r3, #3]
 800062e:	193b      	adds	r3, r7, r4
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	193b      	adds	r3, r7, r4
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	f000 f843 	bl	80006c0 <convertReg2ExtendedCANid>
 800063a:	0002      	movs	r2, r0
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	e00e      	b.n	8000660 <CANSPI_Receive+0xe0>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000648:	2110      	movs	r1, #16
 800064a:	187b      	adds	r3, r7, r1
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	187b      	adds	r3, r7, r1
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 f87f 	bl	8000758 <convertReg2StandardCANid>
 800065a:	0002      	movs	r2, r0
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000660:	2110      	movs	r1, #16
 8000662:	187b      	adds	r3, r7, r1
 8000664:	791a      	ldrb	r2, [r3, #4]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	795a      	ldrb	r2, [r3, #5]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	799a      	ldrb	r2, [r3, #6]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	79da      	ldrb	r2, [r3, #7]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	7a1a      	ldrb	r2, [r3, #8]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	7a5a      	ldrb	r2, [r3, #9]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	7a9a      	ldrb	r2, [r3, #10]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	7ada      	ldrb	r2, [r3, #11]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	7b1a      	ldrb	r2, [r3, #12]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80006aa:	231f      	movs	r3, #31
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 80006b2:	231f      	movs	r3, #31
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0005      	movs	r5, r0
 80006c8:	000c      	movs	r4, r1
 80006ca:	0010      	movs	r0, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	1c2a      	adds	r2, r5, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	1c22      	adds	r2, r4, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	1d7b      	adds	r3, r7, #5
 80006dc:	1c02      	adds	r2, r0, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	1c0a      	adds	r2, r1, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80006ee:	200f      	movs	r0, #15
 80006f0:	183b      	adds	r3, r7, r0
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	2103      	movs	r1, #3
 80006f8:	400a      	ands	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80006fc:	210e      	movs	r1, #14
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	0952      	lsrs	r2, r2, #5
 8000706:	701a      	strb	r2, [r3, #0]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000708:	1d7b      	adds	r3, r7, #5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	18d3      	adds	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800074e:	697b      	ldr	r3, [r7, #20]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bdb0      	pop	{r4, r5, r7, pc}

08000758 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	1c0a      	adds	r2, r1, #0
 8000768:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b2db      	uxtb	r3, r3
 800077e:	001a      	movs	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	189b      	adds	r3, r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}

08000794 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	200b      	movs	r0, #11
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	1c0a      	adds	r2, r1, #0
 80007a4:	701a      	strb	r2, [r3, #0]
  uint8_t wipSIDL = 0;
 80007a6:	2117      	movs	r1, #23
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80007ae:	183b      	adds	r3, r7, r0
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d136      	bne.n	8000824 <convertCANid2Reg+0x90>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	0008      	movs	r0, r1
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2103      	movs	r1, #3
 80007dc:	400a      	ands	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 3;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	221f      	movs	r2, #31
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	188a      	adds	r2, r1, r2
 80007f8:	701a      	strb	r2, [r3, #0]
    wipSIDL = wipSIDL + 0x08;
 80007fa:	183b      	adds	r3, r7, r0
 80007fc:	0001      	movs	r1, r0
 80007fe:	183a      	adds	r2, r7, r0
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	3208      	adds	r2, #8
 8000804:	701a      	strb	r2, [r3, #0]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2214      	movs	r2, #20
 800080c:	4393      	bics	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000822:	e013      	b.n	800084c <convertCANid2Reg+0xb8>
    passedIdReg->tempEID8 = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b006      	add	sp, #24
 8000852:	bd80      	pop	{r7, pc}

08000854 <MCP2515_CS_HIGH>:
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET)

void MCP2515_CS_HIGH(SPI_HandleTypeDef *SPI_CAN)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MCP2515_CS_HIGH+0x34>)
 8000860:	429a      	cmp	r2, r3
 8000862:	d106      	bne.n	8000872 <MCP2515_CS_HIGH+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_SET);
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MCP2515_CS_HIGH+0x38>)
 8000866:	2201      	movs	r2, #1
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fbc6 	bl	8001ffc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
}
 8000870:	e006      	b.n	8000880 <MCP2515_CS_HIGH+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	015b      	lsls	r3, r3, #5
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MCP2515_CS_HIGH+0x38>)
 8000878:	2201      	movs	r2, #1
 800087a:	0019      	movs	r1, r3
 800087c:	f001 fbbe 	bl	8001ffc <HAL_GPIO_WritePin>
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098
 800088c:	48000400 	.word	0x48000400

08000890 <MCP2515_CS_LOW>:
void MCP2515_CS_LOW(SPI_HandleTypeDef *SPI_CAN)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MCP2515_CS_LOW+0x34>)
 800089c:	429a      	cmp	r2, r3
 800089e:	d106      	bne.n	80008ae <MCP2515_CS_LOW+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MCP2515_CS_LOW+0x38>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fba8 	bl	8001ffc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
}
 80008ac:	e006      	b.n	80008bc <MCP2515_CS_LOW+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MCP2515_CS_LOW+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	0019      	movs	r1, r3
 80008b8:	f001 fba0 	bl	8001ffc <HAL_GPIO_WritePin>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000098 	.word	0x20000098
 80008c8:	48000400 	.word	0x48000400

080008cc <MCP2515_Initialize>:
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN);
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  MCP2515_CS_HIGH(SPI_CAN);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ffbc 	bl	8000854 <MCP2515_CS_HIGH>
  
  uint8_t loop = 10;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	220a      	movs	r2, #10
 80008e2:	701a      	strb	r2, [r3, #0]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fd8c 	bl	8003404 <HAL_SPI_GetState>
 80008ec:	0003      	movs	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d101      	bne.n	80008f6 <MCP2515_Initialize+0x2a>
      return true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00a      	b.n	800090c <MCP2515_Initialize+0x40>
    
    loop--;
 80008f6:	210f      	movs	r1, #15
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	3a01      	subs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ec      	bne.n	80008e4 <MCP2515_Initialize+0x18>
      
  return false;
 800090a:	2300      	movs	r3, #0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b004      	add	sp, #16
 8000912:	bd80      	pop	{r7, pc}

08000914 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(SPI_HandleTypeDef *SPI_CAN)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x80);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	210f      	movs	r1, #15
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f89b 	bl	8000a5e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	210e      	movs	r1, #14
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f840 	bl	80009ba <MCP2515_ReadByte>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	4013      	ands	r3, r2
 8000942:	2b80      	cmp	r3, #128	; 0x80
 8000944:	d101      	bne.n	800094a <MCP2515_SetConfigMode+0x36>
      return true;
 8000946:	2301      	movs	r3, #1
 8000948:	e00a      	b.n	8000960 <MCP2515_SetConfigMode+0x4c>
    
    loop--;
 800094a:	210f      	movs	r1, #15
 800094c:	187b      	adds	r3, r7, r1
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	3a01      	subs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 8000956:	187b      	adds	r3, r7, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e8      	bne.n	8000930 <MCP2515_SetConfigMode+0x1c>
  
  return false;
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}

08000968 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(SPI_HandleTypeDef *SPI_CAN)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x00);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	210f      	movs	r1, #15
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f871 	bl	8000a5e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800097c:	230f      	movs	r3, #15
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	220a      	movs	r2, #10
 8000982:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	210e      	movs	r1, #14
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f816 	bl	80009ba <MCP2515_ReadByte>
 800098e:	0003      	movs	r3, r0
 8000990:	001a      	movs	r2, r3
 8000992:	23e0      	movs	r3, #224	; 0xe0
 8000994:	4013      	ands	r3, r2
 8000996:	d101      	bne.n	800099c <MCP2515_SetNormalMode+0x34>
      return true;
 8000998:	2301      	movs	r3, #1
 800099a:	e00a      	b.n	80009b2 <MCP2515_SetNormalMode+0x4a>
    
    loop--;
 800099c:	210f      	movs	r1, #15
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	3a01      	subs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
  } while(loop > 0);
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e9      	bne.n	8000984 <MCP2515_SetNormalMode+0x1c>
  
  return false;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <MCP2515_ReadByte>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (SPI_HandleTypeDef *SPI_CAN, uint8_t address)
{
 80009ba:	b5b0      	push	{r4, r5, r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	000a      	movs	r2, r1
 80009c4:	1cfb      	adds	r3, r7, #3
 80009c6:	701a      	strb	r2, [r3, #0]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ff60 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2103      	movs	r1, #3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 f965 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 80009da:	1cfb      	adds	r3, r7, #3
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f95e 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80009e8:	250f      	movs	r5, #15
 80009ea:	197c      	adds	r4, r7, r5
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f97c 	bl	8000cec <SPI_Rx>
 80009f4:	0003      	movs	r3, r0
 80009f6:	7023      	strb	r3, [r4, #0]
      
  MCP2515_CS_HIGH(SPI_CAN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff ff2a 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000a00:	197b      	adds	r3, r7, r5
 8000a02:	781b      	ldrb	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}

08000a0c <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	0008      	movs	r0, r1
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	0019      	movs	r1, r3
 8000a1a:	240b      	movs	r4, #11
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	1c02      	adds	r2, r0, #0
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	250a      	movs	r5, #10
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	1c0a      	adds	r2, r1, #0
 8000a28:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff2f 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f932 	bl	8000ca4 <SPI_Tx>
  SPI_RxBuffer(SPI_CAN, data, length);
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f960 	bl	8000d0e <SPI_RxBuffer>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff feff 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}

08000a5e <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t data)
{    
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	0008      	movs	r0, r1
 8000a68:	0011      	movs	r1, r2
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	1c02      	adds	r2, r0, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1cbb      	adds	r3, r7, #2
 8000a72:	1c0a      	adds	r2, r1, #0
 8000a74:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff09 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2102      	movs	r1, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f90e 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000a88:	1cfb      	adds	r3, r7, #3
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f907 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000a96:	1cbb      	adds	r3, r7, #2
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f900 	bl	8000ca4 <SPI_Tx>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fed4 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	0008      	movs	r0, r1
 8000abe:	0011      	movs	r1, r2
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	240b      	movs	r4, #11
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	250a      	movs	r5, #10
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	1c0a      	adds	r2, r1, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fedb 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2102      	movs	r1, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f8e0 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, startAddress);
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 f8d9 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, (endAddress - startAddress + 1));
 8000af2:	197a      	adds	r2, r7, r5
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f8dd 	bl	8000cc6 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH(SPI_CAN);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fea0 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b004      	add	sp, #16
 8000b1a:	bdb0      	pop	{r4, r5, r7, pc}

08000b1c <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	0008      	movs	r0, r1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	250b      	movs	r5, #11
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	240a      	movs	r4, #10
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	1c0a      	adds	r2, r1, #0
 8000b38:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fea7 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000b42:	197b      	adds	r3, r7, r5
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f8aa 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, idReg, 4);
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2204      	movs	r2, #4
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f8b5 	bl	8000cc6 <SPI_TxBuffer>
  SPI_Tx(SPI_CAN, dlc);
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 f89d 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, dlc);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	6a39      	ldr	r1, [r7, #32]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f8a7 	bl	8000cc6 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH(SPI_CAN);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fe6a 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bdb0      	pop	{r4, r5, r7, pc}

08000b88 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	000a      	movs	r2, r1
 8000b92:	1cfb      	adds	r3, r7, #3
 8000b94:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fe79 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000b9e:	1cfb      	adds	r3, r7, #3
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f87c 	bl	8000ca4 <SPI_Tx>
      
  MCP2515_CS_HIGH(SPI_CAN);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe50 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fe62 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ_STATUS);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	21a0      	movs	r1, #160	; 0xa0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 f867 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000bd6:	250f      	movs	r5, #15
 8000bd8:	197c      	adds	r4, r7, r5
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 f885 	bl	8000cec <SPI_Rx>
 8000be2:	0003      	movs	r3, r0
 8000be4:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fe33 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bdb0      	pop	{r4, r5, r7, pc}

08000bfa <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000bfa:	b5b0      	push	{r4, r5, r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fe43 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_RX_STATUS);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	21b0      	movs	r1, #176	; 0xb0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f848 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000c14:	250f      	movs	r5, #15
 8000c16:	197c      	adds	r4, r7, r5
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f866 	bl	8000cec <SPI_Rx>
 8000c20:	0003      	movs	r3, r0
 8000c22:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fe14 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000c2c:	197b      	adds	r3, r7, r5
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}

08000c38 <MCP2515_BitModify>:

/* 레지스터 값 변경 */
void MCP2515_BitModify(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t mask, uint8_t data)
{    
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	000c      	movs	r4, r1
 8000c42:	0010      	movs	r0, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	1c22      	adds	r2, r4, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	1c02      	adds	r2, r0, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1c7b      	adds	r3, r7, #1
 8000c54:	1c0a      	adds	r2, r1, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fe18 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_BIT_MOD);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2105      	movs	r1, #5
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 f81d 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000c6a:	1cfb      	adds	r3, r7, #3
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f816 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, mask);
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 f80f 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000c86:	1c7b      	adds	r3, r7, #1
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f808 	bl	8000ca4 <SPI_Tx>
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fddc 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(SPI_HandleTypeDef *SPI_CAN, uint8_t data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	000a      	movs	r2, r1
 8000cae:	1cfb      	adds	r3, r7, #3
 8000cb0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000cb2:	1cf9      	adds	r1, r7, #3
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f001 ff2d 	bl	8002b18 <HAL_SPI_Transmit>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	230a      	movs	r3, #10
 8000ce0:	f001 ff1a 	bl	8002b18 <HAL_SPI_Transmit>
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}

08000cec <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cf4:	240f      	movs	r4, #15
 8000cf6:	1939      	adds	r1, r7, r4
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f002 f863 	bl	8002dc8 <HAL_SPI_Receive>
  return retVal;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd90      	pop	{r4, r7, pc}

08000d0e <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	230a      	movs	r3, #10
 8000d28:	f002 f84e 	bl	8002dc8 <HAL_SPI_Receive>
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 fe95 	bl	8001a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f845 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f000 f93b 	bl	8000fbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 f909 	bl	8000f5c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d4a:	f000 f88b 	bl	8000e64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d4e:	f000 f8c7 	bl	8000ee0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d52:	f003 ffb3 	bl	8004cbc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_sem */
  CAN_semHandle = osSemaphoreNew(1, 1, &CAN_sem_attributes);
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <main+0x70>)
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f004 f8d7 	bl	8004f10 <osSemaphoreNew>
 8000d62:	0002      	movs	r2, r0
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <main+0x74>)
 8000d66:	601a      	str	r2, [r3, #0]

  /* creation of uart_tx_sem */
  uart_tx_semHandle = osSemaphoreNew(1, 1, &uart_tx_sem_attributes);
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <main+0x78>)
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f004 f8ce 	bl	8004f10 <osSemaphoreNew>
 8000d74:	0002      	movs	r2, r0
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <main+0x7c>)
 8000d78:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <main+0x80>)
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0x84>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	0018      	movs	r0, r3
 8000d82:	f003 fff5 	bl	8004d70 <osThreadNew>
 8000d86:	0002      	movs	r2, r0
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <main+0x88>)
 8000d8a:	601a      	str	r2, [r3, #0]

  /* creation of CAN */
  CANHandle = osThreadNew(can_task, NULL, &CAN_attributes);
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <main+0x8c>)
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <main+0x90>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f003 ffec 	bl	8004d70 <osThreadNew>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <main+0x94>)
 8000d9c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d9e:	f003 ffb9 	bl	8004d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <main+0x6e>
 8000da4:	080086c8 	.word	0x080086c8
 8000da8:	200001ec 	.word	0x200001ec
 8000dac:	080086d8 	.word	0x080086d8
 8000db0:	200001f0 	.word	0x200001f0
 8000db4:	08008680 	.word	0x08008680
 8000db8:	08001141 	.word	0x08001141
 8000dbc:	200001e4 	.word	0x200001e4
 8000dc0:	080086a4 	.word	0x080086a4
 8000dc4:	08001151 	.word	0x08001151
 8000dc8:	200001e8 	.word	0x200001e8

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b091      	sub	sp, #68	; 0x44
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	2410      	movs	r4, #16
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2330      	movs	r3, #48	; 0x30
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f006 feaa 	bl	8007b36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	003b      	movs	r3, r7
 8000de4:	0018      	movs	r0, r3
 8000de6:	2310      	movs	r3, #16
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f006 fea3 	bl	8007b36 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	0021      	movs	r1, r4
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2202      	movs	r2, #2
 8000df6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2210      	movs	r2, #16
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2202      	movs	r2, #2
 8000e08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0212      	lsls	r2, r2, #8
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0352      	lsls	r2, r2, #13
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 f924 	bl	8002070 <HAL_RCC_OscConfig>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e2c:	f000 fbf2 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	003b      	movs	r3, r7
 8000e32:	2207      	movs	r2, #7
 8000e34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fc2d 	bl	80026ac <HAL_RCC_ClockConfig>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e56:	f000 fbdd 	bl	8001614 <Error_Handler>
  }
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b011      	add	sp, #68	; 0x44
 8000e60:	bd90      	pop	{r4, r7, pc}
	...

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_SPI1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e70:	2282      	movs	r2, #130	; 0x82
 8000e72:	0052      	lsls	r2, r2, #1
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e7e:	22e0      	movs	r2, #224	; 0xe0
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fd6f 	bl	80029a8 <HAL_SPI_Init>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fba1 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000098 	.word	0x20000098
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <MX_SPI2_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000eec:	2282      	movs	r2, #130	; 0x82
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000efa:	22e0      	movs	r2, #224	; 0xe0
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f16:	2220      	movs	r2, #32
 8000f18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f2e:	2207      	movs	r2, #7
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fd31 	bl	80029a8 <HAL_SPI_Init>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 fb63 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000fc 	.word	0x200000fc
 8000f58:	40003800 	.word	0x40003800

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART2_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f68:	2296      	movs	r2, #150	; 0x96
 8000f6a:	0212      	lsls	r2, r2, #8
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fe6f 	bl	8003c84 <HAL_UART_Init>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 fb33 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000160 	.word	0x20000160
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	2414      	movs	r4, #20
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2314      	movs	r3, #20
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f006 fdb2 	bl	8007b36 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0309      	lsls	r1, r1, #12
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	031b      	lsls	r3, r3, #12
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	03c9      	lsls	r1, r1, #15
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	03db      	lsls	r3, r3, #15
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0289      	lsls	r1, r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	02c9      	lsls	r1, r1, #11
 8001030:	430a      	orrs	r2, r1
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	02db      	lsls	r3, r3, #11
 800103c:	4013      	ands	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8001042:	2382      	movs	r3, #130	; 0x82
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	4825      	ldr	r0, [pc, #148]	; (80010dc <MX_GPIO_Init+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	0019      	movs	r1, r3
 800104c:	f000 ffd6 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_GPIO_Init+0x124>)
 8001054:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2284      	movs	r2, #132	; 0x84
 800105a:	0392      	lsls	r2, r2, #14
 800105c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	193b      	adds	r3, r7, r4
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_GPIO_Init+0x128>)
 8001068:	0019      	movs	r1, r3
 800106a:	0010      	movs	r0, r2
 800106c:	f000 fe56 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001070:	0021      	movs	r1, r4
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2282      	movs	r2, #130	; 0x82
 8001076:	0152      	lsls	r2, r2, #5
 8001078:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	000c      	movs	r4, r1
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	193b      	adds	r3, r7, r4
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_GPIO_Init+0x120>)
 8001092:	0019      	movs	r1, r3
 8001094:	0010      	movs	r0, r2
 8001096:	f000 fe41 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109a:	0021      	movs	r1, r4
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2284      	movs	r2, #132	; 0x84
 80010a8:	0392      	lsls	r2, r2, #14
 80010aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	187a      	adds	r2, r7, r1
 80010b4:	2390      	movs	r3, #144	; 0x90
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fe2e 	bl	8001d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2103      	movs	r1, #3
 80010c4:	2007      	movs	r0, #7
 80010c6:	f000 fd87 	bl	8001bd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010ca:	2007      	movs	r0, #7
 80010cc:	f000 fd99 	bl	8001c02 <HAL_NVIC_EnableIRQ>

}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b00b      	add	sp, #44	; 0x2c
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	00002010 	.word	0x00002010
 80010e4:	48000800 	.word	0x48000800

080010e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	1dbb      	adds	r3, r7, #6
 80010f2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == Ican1_Pin || GPIO_Pin==Ican2_Pin) {
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_EXTI_Callback+0x20>
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b10      	cmp	r3, #16
 8001106:	d104      	bne.n	8001112 <HAL_GPIO_EXTI_Callback+0x2a>
		osSemaphoreRelease(CAN_semHandle); //, &priority);
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_GPIO_EXTI_Callback+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0018      	movs	r0, r3
 800110e:	f003 ffff 	bl	8005110 <osSemaphoreRelease>
	}
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	200001ec 	.word	0x200001ec

08001120 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(uart_tx_semHandle); //, &priority);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_UART_TxCpltCallback+0x1c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	0018      	movs	r0, r3
 800112e:	f003 ffef 	bl	8005110 <osSemaphoreRelease>
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200001f0 	.word	0x200001f0

08001140 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f003 feb9 	bl	8004ec0 <osDelay>
 800114e:	e7fb      	b.n	8001148 <StartDefaultTask+0x8>

08001150 <can_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_task */
void can_task(void *argument)
{
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	46de      	mov	lr, fp
 8001154:	4657      	mov	r7, sl
 8001156:	464e      	mov	r6, r9
 8001158:	4645      	mov	r5, r8
 800115a:	b5e0      	push	{r5, r6, r7, lr}
 800115c:	b099      	sub	sp, #100	; 0x64
 800115e:	af08      	add	r7, sp, #32
 8001160:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_task */
	uint8_t tx_buffer[49], i=0;
 8001162:	233f      	movs	r3, #63	; 0x3f
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]

	if( CANSPI_Initialize(CAN1)) {
 800116a:	4bbb      	ldr	r3, [pc, #748]	; (8001458 <can_task+0x308>)
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff f883 	bl	8000278 <CANSPI_Initialize>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d04d      	beq.n	8001212 <can_task+0xc2>
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001176:	4bb9      	ldr	r3, [pc, #740]	; (800145c <can_task+0x30c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	4252      	negs	r2, r2
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f003 ff67 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "CAN1 initialized OK\n\r");
 8001186:	4ab6      	ldr	r2, [pc, #728]	; (8001460 <can_task+0x310>)
 8001188:	240c      	movs	r4, #12
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f006 fdf8 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001194:	1939      	adds	r1, r7, r4
 8001196:	4bb3      	ldr	r3, [pc, #716]	; (8001464 <can_task+0x314>)
 8001198:	2231      	movs	r2, #49	; 0x31
 800119a:	0018      	movs	r0, r3
 800119c:	f002 fdc6 	bl	8003d2c <HAL_UART_Transmit_IT>
		dSTANDARD_CAN_MSG_ID_2_0B;
		txMessage.frame.id = 15;
 80011a0:	4bb1      	ldr	r3, [pc, #708]	; (8001468 <can_task+0x318>)
 80011a2:	220f      	movs	r2, #15
 80011a4:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 80011a6:	4bb0      	ldr	r3, [pc, #704]	; (8001468 <can_task+0x318>)
 80011a8:	2208      	movs	r2, #8
 80011aa:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 1;
 80011ac:	4bae      	ldr	r3, [pc, #696]	; (8001468 <can_task+0x318>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 2;
 80011b2:	4bad      	ldr	r3, [pc, #692]	; (8001468 <can_task+0x318>)
 80011b4:	2202      	movs	r2, #2
 80011b6:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 3;
 80011b8:	4bab      	ldr	r3, [pc, #684]	; (8001468 <can_task+0x318>)
 80011ba:	2203      	movs	r2, #3
 80011bc:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 4;
 80011be:	4baa      	ldr	r3, [pc, #680]	; (8001468 <can_task+0x318>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 5;
 80011c4:	4ba8      	ldr	r3, [pc, #672]	; (8001468 <can_task+0x318>)
 80011c6:	2205      	movs	r2, #5
 80011c8:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 6;
 80011ca:	4ba7      	ldr	r3, [pc, #668]	; (8001468 <can_task+0x318>)
 80011cc:	2206      	movs	r2, #6
 80011ce:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 7;
 80011d0:	4ba5      	ldr	r3, [pc, #660]	; (8001468 <can_task+0x318>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 8;
 80011d6:	4ba4      	ldr	r3, [pc, #656]	; (8001468 <can_task+0x318>)
 80011d8:	2208      	movs	r2, #8
 80011da:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(CAN1, &txMessage);
 80011dc:	4aa2      	ldr	r2, [pc, #648]	; (8001468 <can_task+0x318>)
 80011de:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <can_task+0x308>)
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff f93a 	bl	800045c <CANSPI_Transmit>
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80011e8:	4b9c      	ldr	r3, [pc, #624]	; (800145c <can_task+0x30c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4252      	negs	r2, r2
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f003 ff2e 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 80011f8:	4a9c      	ldr	r2, [pc, #624]	; (800146c <can_task+0x31c>)
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f006 fdc0 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001204:	1939      	adds	r1, r7, r4
 8001206:	4b97      	ldr	r3, [pc, #604]	; (8001464 <can_task+0x314>)
 8001208:	2231      	movs	r2, #49	; 0x31
 800120a:	0018      	movs	r0, r3
 800120c:	f002 fd8e 	bl	8003d2c <HAL_UART_Transmit_IT>
 8001210:	e014      	b.n	800123c <can_task+0xec>
	}
	else
	{
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001212:	4b92      	ldr	r3, [pc, #584]	; (800145c <can_task+0x30c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	4252      	negs	r2, r2
 800121a:	0011      	movs	r1, r2
 800121c:	0018      	movs	r0, r3
 800121e:	f003 ff19 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "Error CAN1 initiali\n\r");
 8001222:	4a93      	ldr	r2, [pc, #588]	; (8001470 <can_task+0x320>)
 8001224:	240c      	movs	r4, #12
 8001226:	193b      	adds	r3, r7, r4
 8001228:	0011      	movs	r1, r2
 800122a:	0018      	movs	r0, r3
 800122c:	f006 fdaa 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001230:	1939      	adds	r1, r7, r4
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <can_task+0x314>)
 8001234:	2231      	movs	r2, #49	; 0x31
 8001236:	0018      	movs	r0, r3
 8001238:	f002 fd78 	bl	8003d2c <HAL_UART_Transmit_IT>
	}
	if (CANSPI_Initialize(CAN2)) {
 800123c:	4b8d      	ldr	r3, [pc, #564]	; (8001474 <can_task+0x324>)
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff f81a 	bl	8000278 <CANSPI_Initialize>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d04d      	beq.n	80012e4 <can_task+0x194>
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001248:	4b84      	ldr	r3, [pc, #528]	; (800145c <can_task+0x30c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2201      	movs	r2, #1
 800124e:	4252      	negs	r2, r2
 8001250:	0011      	movs	r1, r2
 8001252:	0018      	movs	r0, r3
 8001254:	f003 fefe 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "CAN2 initialized OK\n\r");
 8001258:	4a87      	ldr	r2, [pc, #540]	; (8001478 <can_task+0x328>)
 800125a:	240c      	movs	r4, #12
 800125c:	193b      	adds	r3, r7, r4
 800125e:	0011      	movs	r1, r2
 8001260:	0018      	movs	r0, r3
 8001262:	f006 fd8f 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001266:	1939      	adds	r1, r7, r4
 8001268:	4b7e      	ldr	r3, [pc, #504]	; (8001464 <can_task+0x314>)
 800126a:	2231      	movs	r2, #49	; 0x31
 800126c:	0018      	movs	r0, r3
 800126e:	f002 fd5d 	bl	8003d2c <HAL_UART_Transmit_IT>
		dSTANDARD_CAN_MSG_ID_2_0B;
		txMessage.frame.id = 25;
 8001272:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <can_task+0x318>)
 8001274:	2219      	movs	r2, #25
 8001276:	605a      	str	r2, [r3, #4]
		txMessage.frame.dlc = 8;
 8001278:	4b7b      	ldr	r3, [pc, #492]	; (8001468 <can_task+0x318>)
 800127a:	2208      	movs	r2, #8
 800127c:	721a      	strb	r2, [r3, #8]
		txMessage.frame.data0 = 8;
 800127e:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <can_task+0x318>)
 8001280:	2208      	movs	r2, #8
 8001282:	725a      	strb	r2, [r3, #9]
		txMessage.frame.data1 = 7;
 8001284:	4b78      	ldr	r3, [pc, #480]	; (8001468 <can_task+0x318>)
 8001286:	2207      	movs	r2, #7
 8001288:	729a      	strb	r2, [r3, #10]
		txMessage.frame.data2 = 6;
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <can_task+0x318>)
 800128c:	2206      	movs	r2, #6
 800128e:	72da      	strb	r2, [r3, #11]
		txMessage.frame.data3 = 5;
 8001290:	4b75      	ldr	r3, [pc, #468]	; (8001468 <can_task+0x318>)
 8001292:	2205      	movs	r2, #5
 8001294:	731a      	strb	r2, [r3, #12]
		txMessage.frame.data4 = 4;
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <can_task+0x318>)
 8001298:	2204      	movs	r2, #4
 800129a:	735a      	strb	r2, [r3, #13]
		txMessage.frame.data5 = 3;
 800129c:	4b72      	ldr	r3, [pc, #456]	; (8001468 <can_task+0x318>)
 800129e:	2203      	movs	r2, #3
 80012a0:	739a      	strb	r2, [r3, #14]
		txMessage.frame.data6 = 2;
 80012a2:	4b71      	ldr	r3, [pc, #452]	; (8001468 <can_task+0x318>)
 80012a4:	2202      	movs	r2, #2
 80012a6:	73da      	strb	r2, [r3, #15]
		txMessage.frame.data7 = 1;
 80012a8:	4b6f      	ldr	r3, [pc, #444]	; (8001468 <can_task+0x318>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	741a      	strb	r2, [r3, #16]
		CANSPI_Transmit(CAN2, &txMessage);
 80012ae:	4a6e      	ldr	r2, [pc, #440]	; (8001468 <can_task+0x318>)
 80012b0:	4b70      	ldr	r3, [pc, #448]	; (8001474 <can_task+0x324>)
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff f8d1 	bl	800045c <CANSPI_Transmit>
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80012ba:	4b68      	ldr	r3, [pc, #416]	; (800145c <can_task+0x30c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	4252      	negs	r2, r2
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f003 fec5 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 80012ca:	4a6c      	ldr	r2, [pc, #432]	; (800147c <can_task+0x32c>)
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f006 fd57 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80012d6:	1939      	adds	r1, r7, r4
 80012d8:	4b62      	ldr	r3, [pc, #392]	; (8001464 <can_task+0x314>)
 80012da:	2231      	movs	r2, #49	; 0x31
 80012dc:	0018      	movs	r0, r3
 80012de:	f002 fd25 	bl	8003d2c <HAL_UART_Transmit_IT>
 80012e2:	e014      	b.n	800130e <can_task+0x1be>
	}
	else
	{
		osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80012e4:	4b5d      	ldr	r3, [pc, #372]	; (800145c <can_task+0x30c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4252      	negs	r2, r2
 80012ec:	0011      	movs	r1, r2
 80012ee:	0018      	movs	r0, r3
 80012f0:	f003 feb0 	bl	8005054 <osSemaphoreAcquire>
		sprintf(tx_buffer, "Error CAN2 initiali\n\r");
 80012f4:	4a62      	ldr	r2, [pc, #392]	; (8001480 <can_task+0x330>)
 80012f6:	240c      	movs	r4, #12
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	0011      	movs	r1, r2
 80012fc:	0018      	movs	r0, r3
 80012fe:	f006 fd41 	bl	8007d84 <siprintf>
		HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001302:	1939      	adds	r1, r7, r4
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <can_task+0x314>)
 8001306:	2231      	movs	r2, #49	; 0x31
 8001308:	0018      	movs	r0, r3
 800130a:	f002 fd0f 	bl	8003d2c <HAL_UART_Transmit_IT>

	}
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 800130e:	4b5d      	ldr	r3, [pc, #372]	; (8001484 <can_task+0x334>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2201      	movs	r2, #1
 8001314:	4252      	negs	r2, r2
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f003 fe9b 	bl	8005054 <osSemaphoreAcquire>
		if(CANSPI_Receive(CAN1, &rxMessage))
 800131e:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <can_task+0x338>)
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <can_task+0x308>)
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f7ff f92b 	bl	8000580 <CANSPI_Receive>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d100      	bne.n	8001330 <can_task+0x1e0>
 800132e:	e0af      	b.n	8001490 <can_task+0x340>
		{
			// Coger el semáforo de envío de trama por la UART
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <can_task+0x30c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	4252      	negs	r2, r2
 8001338:	0011      	movs	r1, r2
 800133a:	0018      	movs	r0, r3
 800133c:	f003 fe8a 	bl	8005054 <osSemaphoreAcquire>
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001340:	4b51      	ldr	r3, [pc, #324]	; (8001488 <can_task+0x338>)
 8001342:	685a      	ldr	r2, [r3, #4]
					rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <can_task+0x338>)
 8001346:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001348:	469b      	mov	fp, r3
					rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <can_task+0x338>)
 800134c:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800134e:	001c      	movs	r4, r3
					rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001350:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <can_task+0x338>)
 8001352:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001354:	001d      	movs	r5, r3
					rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001356:	4b4c      	ldr	r3, [pc, #304]	; (8001488 <can_task+0x338>)
 8001358:	7adb      	ldrb	r3, [r3, #11]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800135a:	001e      	movs	r6, r3
					rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 800135c:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <can_task+0x338>)
 800135e:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001360:	469c      	mov	ip, r3
					rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <can_task+0x338>)
 8001364:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001366:	4698      	mov	r8, r3
					rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <can_task+0x338>)
 800136a:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800136c:	4699      	mov	r9, r3
					rxMessage.frame.data6,rxMessage.frame.data7);
 800136e:	4b46      	ldr	r3, [pc, #280]	; (8001488 <can_task+0x338>)
 8001370:	7bdb      	ldrb	r3, [r3, #15]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001372:	469a      	mov	sl, r3
					rxMessage.frame.data6,rxMessage.frame.data7);
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <can_task+0x338>)
 8001376:	7c1b      	ldrb	r3, [r3, #16]
			sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001378:	4944      	ldr	r1, [pc, #272]	; (800148c <can_task+0x33c>)
 800137a:	200c      	movs	r0, #12
 800137c:	1838      	adds	r0, r7, r0
 800137e:	9307      	str	r3, [sp, #28]
 8001380:	4653      	mov	r3, sl
 8001382:	9306      	str	r3, [sp, #24]
 8001384:	464b      	mov	r3, r9
 8001386:	9305      	str	r3, [sp, #20]
 8001388:	4643      	mov	r3, r8
 800138a:	9304      	str	r3, [sp, #16]
 800138c:	4663      	mov	r3, ip
 800138e:	9303      	str	r3, [sp, #12]
 8001390:	9602      	str	r6, [sp, #8]
 8001392:	9501      	str	r5, [sp, #4]
 8001394:	9400      	str	r4, [sp, #0]
 8001396:	465b      	mov	r3, fp
 8001398:	f006 fcf4 	bl	8007d84 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800139c:	200c      	movs	r0, #12
 800139e:	1839      	adds	r1, r7, r0
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <can_task+0x314>)
 80013a2:	2231      	movs	r2, #49	; 0x31
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 fcc1 	bl	8003d2c <HAL_UART_Transmit_IT>
			CANSPI_CL_Flag_Int(CAN1);
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <can_task+0x308>)
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7fe ff55 	bl	800025c <CANSPI_CL_Flag_Int>
			txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <can_task+0x318>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
			txMessage.frame.id = 15;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <can_task+0x318>)
 80013ba:	220f      	movs	r2, #15
 80013bc:	605a      	str	r2, [r3, #4]
			txMessage.frame.dlc = 8;
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <can_task+0x318>)
 80013c0:	2208      	movs	r2, #8
 80013c2:	721a      	strb	r2, [r3, #8]
			txMessage.frame.data0 = 1;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <can_task+0x318>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	725a      	strb	r2, [r3, #9]
			txMessage.frame.data1 = 2;
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <can_task+0x318>)
 80013cc:	2202      	movs	r2, #2
 80013ce:	729a      	strb	r2, [r3, #10]
			txMessage.frame.data2 = 3;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <can_task+0x318>)
 80013d2:	2203      	movs	r2, #3
 80013d4:	72da      	strb	r2, [r3, #11]
			txMessage.frame.data3 = 4;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <can_task+0x318>)
 80013d8:	2204      	movs	r2, #4
 80013da:	731a      	strb	r2, [r3, #12]
			txMessage.frame.data4 = 5;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <can_task+0x318>)
 80013de:	2205      	movs	r2, #5
 80013e0:	735a      	strb	r2, [r3, #13]
			txMessage.frame.data5 = 6;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <can_task+0x318>)
 80013e4:	2206      	movs	r2, #6
 80013e6:	739a      	strb	r2, [r3, #14]
			txMessage.frame.data6 = 7;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <can_task+0x318>)
 80013ea:	2207      	movs	r2, #7
 80013ec:	73da      	strb	r2, [r3, #15]
			txMessage.frame.data7 = 8;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <can_task+0x318>)
 80013f0:	2208      	movs	r2, #8
 80013f2:	741a      	strb	r2, [r3, #16]
			CANSPI_Transmit(CAN1, &txMessage);
 80013f4:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <can_task+0x318>)
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <can_task+0x308>)
 80013f8:	0011      	movs	r1, r2
 80013fa:	0018      	movs	r0, r3
 80013fc:	f7ff f82e 	bl	800045c <CANSPI_Transmit>
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <can_task+0x30c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2201      	movs	r2, #1
 8001406:	4252      	negs	r2, r2
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f003 fe22 	bl	8005054 <osSemaphoreAcquire>
			for (i=0; i<49; i++) tx_buffer[i]=0;
 8001410:	233f      	movs	r3, #63	; 0x3f
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e00b      	b.n	8001432 <can_task+0x2e2>
 800141a:	203f      	movs	r0, #63	; 0x3f
 800141c:	183b      	adds	r3, r7, r0
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	220c      	movs	r2, #12
 8001422:	18ba      	adds	r2, r7, r2
 8001424:	2100      	movs	r1, #0
 8001426:	54d1      	strb	r1, [r2, r3]
 8001428:	183b      	adds	r3, r7, r0
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	183b      	adds	r3, r7, r0
 800142e:	3201      	adds	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
 8001432:	233f      	movs	r3, #63	; 0x3f
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b30      	cmp	r3, #48	; 0x30
 800143a:	d9ee      	bls.n	800141a <can_task+0x2ca>
			sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <can_task+0x31c>)
 800143e:	240c      	movs	r4, #12
 8001440:	193b      	adds	r3, r7, r4
 8001442:	0011      	movs	r1, r2
 8001444:	0018      	movs	r0, r3
 8001446:	f006 fc9d 	bl	8007d84 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800144a:	1939      	adds	r1, r7, r4
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <can_task+0x314>)
 800144e:	2231      	movs	r2, #49	; 0x31
 8001450:	0018      	movs	r0, r3
 8001452:	f002 fc6b 	bl	8003d2c <HAL_UART_Transmit_IT>
 8001456:	e0b7      	b.n	80015c8 <can_task+0x478>
 8001458:	20000098 	.word	0x20000098
 800145c:	200001f0 	.word	0x200001f0
 8001460:	08008528 	.word	0x08008528
 8001464:	20000160 	.word	0x20000160
 8001468:	200001f4 	.word	0x200001f4
 800146c:	08008540 	.word	0x08008540
 8001470:	08008558 	.word	0x08008558
 8001474:	200000fc 	.word	0x200000fc
 8001478:	08008570 	.word	0x08008570
 800147c:	08008588 	.word	0x08008588
 8001480:	080085a0 	.word	0x080085a0
 8001484:	200001ec 	.word	0x200001ec
 8001488:	20000208 	.word	0x20000208
 800148c:	080085b8 	.word	0x080085b8
		} else
			if(CANSPI_Receive(CAN2, &rxMessage))
 8001490:	4a50      	ldr	r2, [pc, #320]	; (80015d4 <can_task+0x484>)
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <can_task+0x488>)
 8001494:	0011      	movs	r1, r2
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff f872 	bl	8000580 <CANSPI_Receive>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d100      	bne.n	80014a2 <can_task+0x352>
 80014a0:	e092      	b.n	80015c8 <can_task+0x478>
			{
				// Coger el semáforo de envío de trama por la UART
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80014a2:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <can_task+0x48c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2201      	movs	r2, #1
 80014a8:	4252      	negs	r2, r2
 80014aa:	0011      	movs	r1, r2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f003 fdd1 	bl	8005054 <osSemaphoreAcquire>
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014b2:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <can_task+0x484>)
 80014b4:	685a      	ldr	r2, [r3, #4]
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80014b6:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <can_task+0x484>)
 80014b8:	7a1b      	ldrb	r3, [r3, #8]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014ba:	469b      	mov	fp, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80014bc:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <can_task+0x484>)
 80014be:	7a5b      	ldrb	r3, [r3, #9]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014c0:	001c      	movs	r4, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <can_task+0x484>)
 80014c4:	7a9b      	ldrb	r3, [r3, #10]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014c6:	001d      	movs	r5, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80014c8:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <can_task+0x484>)
 80014ca:	7adb      	ldrb	r3, [r3, #11]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014cc:	001e      	movs	r6, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80014ce:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <can_task+0x484>)
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014d2:	469c      	mov	ip, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <can_task+0x484>)
 80014d6:	7b5b      	ldrb	r3, [r3, #13]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014d8:	4698      	mov	r8, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80014da:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <can_task+0x484>)
 80014dc:	7b9b      	ldrb	r3, [r3, #14]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014de:	4699      	mov	r9, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <can_task+0x484>)
 80014e2:	7bdb      	ldrb	r3, [r3, #15]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014e4:	469a      	mov	sl, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <can_task+0x484>)
 80014e8:	7c1b      	ldrb	r3, [r3, #16]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80014ea:	493d      	ldr	r1, [pc, #244]	; (80015e0 <can_task+0x490>)
 80014ec:	200c      	movs	r0, #12
 80014ee:	1838      	adds	r0, r7, r0
 80014f0:	9307      	str	r3, [sp, #28]
 80014f2:	4653      	mov	r3, sl
 80014f4:	9306      	str	r3, [sp, #24]
 80014f6:	464b      	mov	r3, r9
 80014f8:	9305      	str	r3, [sp, #20]
 80014fa:	4643      	mov	r3, r8
 80014fc:	9304      	str	r3, [sp, #16]
 80014fe:	4663      	mov	r3, ip
 8001500:	9303      	str	r3, [sp, #12]
 8001502:	9602      	str	r6, [sp, #8]
 8001504:	9501      	str	r5, [sp, #4]
 8001506:	9400      	str	r4, [sp, #0]
 8001508:	465b      	mov	r3, fp
 800150a:	f006 fc3b 	bl	8007d84 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800150e:	200c      	movs	r0, #12
 8001510:	1839      	adds	r1, r7, r0
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <can_task+0x494>)
 8001514:	2231      	movs	r2, #49	; 0x31
 8001516:	0018      	movs	r0, r3
 8001518:	f002 fc08 	bl	8003d2c <HAL_UART_Transmit_IT>
				CANSPI_CL_Flag_Int(CAN2);
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <can_task+0x488>)
 800151e:	0018      	movs	r0, r3
 8001520:	f7fe fe9c 	bl	800025c <CANSPI_CL_Flag_Int>
				txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001524:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <can_task+0x498>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
				txMessage.frame.id = 25;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <can_task+0x498>)
 800152c:	2219      	movs	r2, #25
 800152e:	605a      	str	r2, [r3, #4]
				txMessage.frame.dlc = 8;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <can_task+0x498>)
 8001532:	2208      	movs	r2, #8
 8001534:	721a      	strb	r2, [r3, #8]
				txMessage.frame.data0 = 8;
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <can_task+0x498>)
 8001538:	2208      	movs	r2, #8
 800153a:	725a      	strb	r2, [r3, #9]
				txMessage.frame.data1 = 7;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <can_task+0x498>)
 800153e:	2207      	movs	r2, #7
 8001540:	729a      	strb	r2, [r3, #10]
				txMessage.frame.data2 = 6;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <can_task+0x498>)
 8001544:	2206      	movs	r2, #6
 8001546:	72da      	strb	r2, [r3, #11]
				txMessage.frame.data3 = 5;
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <can_task+0x498>)
 800154a:	2205      	movs	r2, #5
 800154c:	731a      	strb	r2, [r3, #12]
				txMessage.frame.data4 = 4;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <can_task+0x498>)
 8001550:	2204      	movs	r2, #4
 8001552:	735a      	strb	r2, [r3, #13]
				txMessage.frame.data5 = 3;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <can_task+0x498>)
 8001556:	2203      	movs	r2, #3
 8001558:	739a      	strb	r2, [r3, #14]
				txMessage.frame.data6 = 2;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <can_task+0x498>)
 800155c:	2202      	movs	r2, #2
 800155e:	73da      	strb	r2, [r3, #15]
				txMessage.frame.data7 = 1;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <can_task+0x498>)
 8001562:	2201      	movs	r2, #1
 8001564:	741a      	strb	r2, [r3, #16]
				CANSPI_Transmit(CAN2, &txMessage);
 8001566:	4a20      	ldr	r2, [pc, #128]	; (80015e8 <can_task+0x498>)
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <can_task+0x488>)
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f7fe ff75 	bl	800045c <CANSPI_Transmit>
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <can_task+0x48c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	4252      	negs	r2, r2
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f003 fd69 	bl	8005054 <osSemaphoreAcquire>
				for (i=0; i<49; i++) tx_buffer[i]=0;
 8001582:	233f      	movs	r3, #63	; 0x3f
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	e00b      	b.n	80015a4 <can_task+0x454>
 800158c:	203f      	movs	r0, #63	; 0x3f
 800158e:	183b      	adds	r3, r7, r0
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	220c      	movs	r2, #12
 8001594:	18ba      	adds	r2, r7, r2
 8001596:	2100      	movs	r1, #0
 8001598:	54d1      	strb	r1, [r2, r3]
 800159a:	183b      	adds	r3, r7, r0
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	183b      	adds	r3, r7, r0
 80015a0:	3201      	adds	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	233f      	movs	r3, #63	; 0x3f
 80015a6:	18fb      	adds	r3, r7, r3
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b30      	cmp	r3, #48	; 0x30
 80015ac:	d9ee      	bls.n	800158c <can_task+0x43c>
				sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <can_task+0x49c>)
 80015b0:	240c      	movs	r4, #12
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	0011      	movs	r1, r2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f006 fbe4 	bl	8007d84 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80015bc:	1939      	adds	r1, r7, r4
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <can_task+0x494>)
 80015c0:	2231      	movs	r2, #49	; 0x31
 80015c2:	0018      	movs	r0, r3
 80015c4:	f002 fbb2 	bl	8003d2c <HAL_UART_Transmit_IT>
			}
		osDelay(1000);
 80015c8:	23fa      	movs	r3, #250	; 0xfa
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	0018      	movs	r0, r3
 80015ce:	f003 fc77 	bl	8004ec0 <osDelay>
		osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 80015d2:	e69c      	b.n	800130e <can_task+0x1be>
 80015d4:	20000208 	.word	0x20000208
 80015d8:	200000fc 	.word	0x200000fc
 80015dc:	200001f0 	.word	0x200001f0
 80015e0:	08008600 	.word	0x08008600
 80015e4:	20000160 	.word	0x20000160
 80015e8:	200001f4 	.word	0x200001f4
 80015ec:	08008588 	.word	0x08008588

080015f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001602:	f000 fa45 	bl	8001a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40012c00 	.word	0x40012c00

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	e7fe      	b.n	800161c <Error_Handler+0x8>
	...

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_MspInit+0x50>)
 8001628:	699a      	ldr	r2, [r3, #24]
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_MspInit+0x50>)
 800162c:	2101      	movs	r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	619a      	str	r2, [r3, #24]
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <HAL_MspInit+0x50>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_MspInit+0x50>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_MspInit+0x50>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0549      	lsls	r1, r1, #21
 8001648:	430a      	orrs	r2, r1
 800164a:	61da      	str	r2, [r3, #28]
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_MspInit+0x50>)
 800164e:	69da      	ldr	r2, [r3, #28]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	055b      	lsls	r3, r3, #21
 8001654:	4013      	ands	r3, r2
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800165a:	2302      	movs	r3, #2
 800165c:	425b      	negs	r3, r3
 800165e:	2200      	movs	r2, #0
 8001660:	2103      	movs	r1, #3
 8001662:	0018      	movs	r0, r3
 8001664:	f000 fab8 	bl	8001bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08d      	sub	sp, #52	; 0x34
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	241c      	movs	r4, #28
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	2314      	movs	r3, #20
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f006 fa55 	bl	8007b36 <memset>
  if(hspi->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a39      	ldr	r2, [pc, #228]	; (8001778 <HAL_SPI_MspInit+0x104>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d133      	bne.n	80016fe <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_SPI_MspInit+0x108>)
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	4b38      	ldr	r3, [pc, #224]	; (800177c <HAL_SPI_MspInit+0x108>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0149      	lsls	r1, r1, #5
 80016a0:	430a      	orrs	r2, r1
 80016a2:	619a      	str	r2, [r3, #24]
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_SPI_MspInit+0x108>)
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_SPI_MspInit+0x108>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_SPI_MspInit+0x108>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0289      	lsls	r1, r1, #10
 80016bc:	430a      	orrs	r2, r1
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <HAL_SPI_MspInit+0x108>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016ce:	0021      	movs	r1, r4
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	22e0      	movs	r2, #224	; 0xe0
 80016d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2202      	movs	r2, #2
 80016da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2203      	movs	r2, #3
 80016e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	187a      	adds	r2, r7, r1
 80016f0:	2390      	movs	r3, #144	; 0x90
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	0011      	movs	r1, r2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fb10 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80016fc:	e037      	b.n	800176e <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_SPI_MspInit+0x10c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d132      	bne.n	800176e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_SPI_MspInit+0x108>)
 800170a:	69da      	ldr	r2, [r3, #28]
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_SPI_MspInit+0x108>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	01c9      	lsls	r1, r1, #7
 8001712:	430a      	orrs	r2, r1
 8001714:	61da      	str	r2, [r3, #28]
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_SPI_MspInit+0x108>)
 8001718:	69da      	ldr	r2, [r3, #28]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	01db      	lsls	r3, r3, #7
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0x108>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_SPI_MspInit+0x108>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	02c9      	lsls	r1, r1, #11
 800172e:	430a      	orrs	r2, r1
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_SPI_MspInit+0x108>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	02db      	lsls	r3, r3, #11
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001740:	211c      	movs	r1, #28
 8001742:	187b      	adds	r3, r7, r1
 8001744:	22e0      	movs	r2, #224	; 0xe0
 8001746:	0212      	lsls	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2202      	movs	r2, #2
 800174e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	187b      	adds	r3, r7, r1
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2203      	movs	r2, #3
 800175a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	187b      	adds	r3, r7, r1
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_SPI_MspInit+0x110>)
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f000 fad7 	bl	8001d1c <HAL_GPIO_Init>
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b00d      	add	sp, #52	; 0x34
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40013000 	.word	0x40013000
 800177c:	40021000 	.word	0x40021000
 8001780:	40003800 	.word	0x40003800
 8001784:	48000400 	.word	0x48000400

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	2414      	movs	r4, #20
 8001792:	193b      	adds	r3, r7, r4
 8001794:	0018      	movs	r0, r3
 8001796:	2314      	movs	r3, #20
 8001798:	001a      	movs	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	f006 f9cb 	bl	8007b36 <memset>
  if(huart->Instance==USART2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <HAL_UART_MspInit+0xa0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d13a      	bne.n	8001820 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	0289      	lsls	r1, r1, #10
 80017b4:	430a      	orrs	r2, r1
 80017b6:	61da      	str	r2, [r3, #28]
 80017b8:	4b1c      	ldr	r3, [pc, #112]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0289      	lsls	r1, r1, #10
 80017d0:	430a      	orrs	r2, r1
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_UART_MspInit+0xa4>)
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	029b      	lsls	r3, r3, #10
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017e2:	0021      	movs	r1, r4
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2202      	movs	r2, #2
 80017ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2203      	movs	r2, #3
 80017fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2201      	movs	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	187a      	adds	r2, r7, r1
 8001804:	2390      	movs	r3, #144	; 0x90
 8001806:	05db      	lsls	r3, r3, #23
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 fa86 	bl	8001d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2103      	movs	r1, #3
 8001814:	201c      	movs	r0, #28
 8001816:	f000 f9df 	bl	8001bd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800181a:	201c      	movs	r0, #28
 800181c:	f000 f9f1 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b00b      	add	sp, #44	; 0x2c
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	40004400 	.word	0x40004400
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_InitTick+0xf4>)
 8001842:	699a      	ldr	r2, [r3, #24]
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <HAL_InitTick+0xf4>)
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0109      	lsls	r1, r1, #4
 800184a:	430a      	orrs	r2, r1
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_InitTick+0xf4>)
 8001850:	699a      	ldr	r2, [r3, #24]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	4013      	ands	r3, r2
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185c:	230c      	movs	r3, #12
 800185e:	18fa      	adds	r2, r7, r3
 8001860:	2410      	movs	r4, #16
 8001862:	193b      	adds	r3, r7, r4
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f001 f874 	bl	8002954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800186c:	193b      	adds	r3, r7, r4
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	d104      	bne.n	8001882 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001878:	f001 f856 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800187c:	0003      	movs	r3, r0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001880:	e004      	b.n	800188c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001882:	f001 f851 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8001886:	0003      	movs	r3, r0
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	4926      	ldr	r1, [pc, #152]	; (8001928 <HAL_InitTick+0xf8>)
 8001890:	0018      	movs	r0, r3
 8001892:	f7fe fc43 	bl	800011c <__udivsi3>
 8001896:	0003      	movs	r3, r0
 8001898:	3b01      	subs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <HAL_InitTick+0xfc>)
 800189e:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_InitTick+0x100>)
 80018a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_InitTick+0xfc>)
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_InitTick+0x104>)
 80018a6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_InitTick+0xfc>)
 80018aa:	6a3a      	ldr	r2, [r7, #32]
 80018ac:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_InitTick+0xfc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_InitTick+0xfc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_InitTick+0xfc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018c0:	252b      	movs	r5, #43	; 0x2b
 80018c2:	197c      	adds	r4, r7, r5
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_InitTick+0xfc>)
 80018c6:	0018      	movs	r0, r3
 80018c8:	f001 ff7c 	bl	80037c4 <HAL_TIM_Base_Init>
 80018cc:	0003      	movs	r3, r0
 80018ce:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d11e      	bne.n	8001916 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018d8:	197c      	adds	r4, r7, r5
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_InitTick+0xfc>)
 80018dc:	0018      	movs	r0, r3
 80018de:	f001 ffc9 	bl	8003874 <HAL_TIM_Base_Start_IT>
 80018e2:	0003      	movs	r3, r0
 80018e4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d113      	bne.n	8001916 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80018ee:	200d      	movs	r0, #13
 80018f0:	f000 f987 	bl	8001c02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d809      	bhi.n	800190e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	0019      	movs	r1, r3
 8001900:	200d      	movs	r0, #13
 8001902:	f000 f969 	bl	8001bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_InitTick+0x108>)
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e003      	b.n	8001916 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800190e:	232b      	movs	r3, #43	; 0x2b
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001916:	232b      	movs	r3, #43	; 0x2b
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b00c      	add	sp, #48	; 0x30
 8001922:	bdb0      	pop	{r4, r5, r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	000f4240 	.word	0x000f4240
 800192c:	2000021c 	.word	0x2000021c
 8001930:	40012c00 	.word	0x40012c00
 8001934:	000003e7 	.word	0x000003e7
 8001938:	20000004 	.word	0x20000004

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ican2_Pin);
 800194c:	2010      	movs	r0, #16
 800194e:	f000 fb73 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ican1_Pin);
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fb6e 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	0018      	movs	r0, r3
 8001962:	f000 fb69 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001972:	0018      	movs	r0, r3
 8001974:	f001 ffca 	bl	800390c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	2000021c 	.word	0x2000021c

08001984 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <USART2_IRQHandler+0x14>)
 800198a:	0018      	movs	r0, r3
 800198c:	f002 fa4e 	bl	8003e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	20000160 	.word	0x20000160

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f006 f87e 	bl	8007acc <__errno>
 80019d0:	0003      	movs	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	425b      	negs	r3, r3
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	18d2      	adds	r2, r2, r3
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20004000 	.word	0x20004000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	20000264 	.word	0x20000264
 8001a04:	20001c80 	.word	0x20001c80

08001a08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480d      	ldr	r0, [pc, #52]	; (8001a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1a:	490e      	ldr	r1, [pc, #56]	; (8001a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <LoopForever+0xe>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a30:	4c0b      	ldr	r4, [pc, #44]	; (8001a60 <LoopForever+0x16>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a3e:	f7ff ffe3 	bl	8001a08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a42:	f006 f849 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a46:	f7ff f975 	bl	8000d34 <main>

08001a4a <LoopForever>:

LoopForever:
    b LoopForever
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
  ldr   r0, =_estack
 8001a4c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a58:	080087c4 	.word	0x080087c4
  ldr r2, =_sbss
 8001a5c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a60:	20001c7c 	.word	0x20001c7c

08001a64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_IRQHandler>
	...

08001a68 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_Init+0x24>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_Init+0x24>)
 8001a72:	2110      	movs	r1, #16
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a78:	2003      	movs	r0, #3
 8001a7a:	f7ff fed9 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7e:	f7ff fdcf 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	18d2      	adds	r2, r2, r3
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000268 	.word	0x20000268

08001ab4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	20000268 	.word	0x20000268

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8001ada:	d809      	bhi.n	8001af0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_EnableIRQ+0x30>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4091      	lsls	r1, r2
 8001aec:	000a      	movs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
  }
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b002      	add	sp, #8
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	e000e100 	.word	0xe000e100

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	1dfb      	adds	r3, r7, #7
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001b10:	d828      	bhi.n	8001b64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	33c0      	adds	r3, #192	; 0xc0
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	589b      	ldr	r3, [r3, r2]
 8001b22:	1dfa      	adds	r2, r7, #7
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	0011      	movs	r1, r2
 8001b28:	2203      	movs	r2, #3
 8001b2a:	400a      	ands	r2, r1
 8001b2c:	00d2      	lsls	r2, r2, #3
 8001b2e:	21ff      	movs	r1, #255	; 0xff
 8001b30:	4091      	lsls	r1, r2
 8001b32:	000a      	movs	r2, r1
 8001b34:	43d2      	mvns	r2, r2
 8001b36:	401a      	ands	r2, r3
 8001b38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	22ff      	movs	r2, #255	; 0xff
 8001b40:	401a      	ands	r2, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	0018      	movs	r0, r3
 8001b48:	2303      	movs	r3, #3
 8001b4a:	4003      	ands	r3, r0
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	481f      	ldr	r0, [pc, #124]	; (8001bd0 <__NVIC_SetPriority+0xd4>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	33c0      	adds	r3, #192	; 0xc0
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b62:	e031      	b.n	8001bc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	400b      	ands	r3, r1
 8001b70:	3b08      	subs	r3, #8
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3306      	adds	r3, #6
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1dfa      	adds	r2, r7, #7
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	0011      	movs	r1, r2
 8001b84:	2203      	movs	r2, #3
 8001b86:	400a      	ands	r2, r1
 8001b88:	00d2      	lsls	r2, r2, #3
 8001b8a:	21ff      	movs	r1, #255	; 0xff
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	43d2      	mvns	r2, r2
 8001b92:	401a      	ands	r2, r3
 8001b94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	22ff      	movs	r2, #255	; 0xff
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	4003      	ands	r3, r0
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <__NVIC_SetPriority+0xd8>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	001c      	movs	r4, r3
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	4023      	ands	r3, r4
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	3306      	adds	r3, #6
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	18c3      	adds	r3, r0, r3
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	601a      	str	r2, [r3, #0]
}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b003      	add	sp, #12
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	210f      	movs	r1, #15
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	0011      	movs	r1, r2
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff81 	bl	8001afc <__NVIC_SetPriority>
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b004      	add	sp, #16
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	0002      	movs	r2, r0
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ff57 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2221      	movs	r2, #33	; 0x21
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d008      	beq.n	8001c48 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e020      	b.n	8001c8a <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	210e      	movs	r1, #14
 8001c54:	438a      	bics	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2101      	movs	r1, #1
 8001c64:	438a      	bics	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	2101      	movs	r1, #1
 8001c72:	4091      	lsls	r1, r2
 8001c74:	000a      	movs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2221      	movs	r2, #33	; 0x21
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2221      	movs	r2, #33	; 0x21
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d006      	beq.n	8001cbc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e028      	b.n	8001d0e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	210e      	movs	r1, #14
 8001cc8:	438a      	bics	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	438a      	bics	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4091      	lsls	r1, r2
 8001ce8:	000a      	movs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2221      	movs	r2, #33	; 0x21
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d004      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	4798      	blx	r3
    } 
  }
  return status;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e14f      	b.n	8001fcc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4091      	lsls	r1, r2
 8001d36:	000a      	movs	r2, r1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <HAL_GPIO_Init+0x28>
 8001d42:	e140      	b.n	8001fc6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	0013      	movs	r3, r2
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	0013      	movs	r3, r2
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	2201      	movs	r2, #1
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d017      	beq.n	8001dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d123      	bne.n	8001e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	58d3      	ldr	r3, [r2, r3]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2207      	movs	r2, #7
 8001e18:	4013      	ands	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2107      	movs	r1, #7
 8001e32:	400b      	ands	r3, r1
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	6939      	ldr	r1, [r7, #16]
 8001e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	23c0      	movs	r3, #192	; 0xc0
 8001e88:	029b      	lsls	r3, r3, #10
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d100      	bne.n	8001e90 <HAL_GPIO_Init+0x174>
 8001e8e:	e09a      	b.n	8001fc6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e90:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001e92:	699a      	ldr	r2, [r3, #24]
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]
 8001e9c:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x2c8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	589b      	ldr	r3, [r3, r2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2203      	movs	r2, #3
 8001eba:	4013      	ands	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	43da      	mvns	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	2390      	movs	r3, #144	; 0x90
 8001ed0:	05db      	lsls	r3, r3, #23
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x1e2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a44      	ldr	r2, [pc, #272]	; (8001fec <HAL_GPIO_Init+0x2d0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x1de>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a43      	ldr	r2, [pc, #268]	; (8001ff0 <HAL_GPIO_Init+0x2d4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x1da>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a42      	ldr	r2, [pc, #264]	; (8001ff4 <HAL_GPIO_Init+0x2d8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x1d6>
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e004      	b.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e002      	b.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x1e4>
 8001efe:	2300      	movs	r3, #0
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	2103      	movs	r1, #3
 8001f04:	400a      	ands	r2, r1
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	4093      	lsls	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f10:	4935      	ldr	r1, [pc, #212]	; (8001fe8 <HAL_GPIO_Init+0x2cc>)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	43da      	mvns	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	025b      	lsls	r3, r3, #9
 8001f36:	4013      	ands	r3, r2
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43da      	mvns	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	035b      	lsls	r3, r3, #13
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	039b      	lsls	r3, r3, #14
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_GPIO_Init+0x2dc>)
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	40da      	lsrs	r2, r3
 8001fd4:	1e13      	subs	r3, r2, #0
 8001fd6:	d000      	beq.n	8001fda <HAL_GPIO_Init+0x2be>
 8001fd8:	e6a8      	b.n	8001d2c <HAL_GPIO_Init+0x10>
  } 
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	40010400 	.word	0x40010400

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	0008      	movs	r0, r1
 8002006:	0011      	movs	r1, r2
 8002008:	1cbb      	adds	r3, r7, #2
 800200a:	1c02      	adds	r2, r0, #0
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	1c7b      	adds	r3, r7, #1
 8002010:	1c0a      	adds	r2, r1, #0
 8002012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002014:	1c7b      	adds	r3, r7, #1
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201c:	1cbb      	adds	r3, r7, #2
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002024:	e003      	b.n	800202e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002026:	1cbb      	adds	r3, r7, #2
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	1dba      	adds	r2, r7, #6
 800204a:	8812      	ldrh	r2, [r2, #0]
 800204c:	4013      	ands	r3, r2
 800204e:	d008      	beq.n	8002062 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002052:	1dba      	adds	r2, r7, #6
 8002054:	8812      	ldrh	r2, [r2, #0]
 8002056:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff f843 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e305      	b.n	800268e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d100      	bne.n	800208e <HAL_RCC_OscConfig+0x1e>
 800208c:	e08d      	b.n	80021aa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800208e:	4bc5      	ldr	r3, [pc, #788]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	220c      	movs	r2, #12
 8002094:	4013      	ands	r3, r2
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00e      	beq.n	80020b8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209a:	4bc2      	ldr	r3, [pc, #776]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	220c      	movs	r2, #12
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x64>
 80020a6:	4bbf      	ldr	r3, [pc, #764]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	025b      	lsls	r3, r3, #9
 80020ae:	401a      	ands	r2, r3
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	4bba      	ldr	r3, [pc, #744]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x56>
 80020c4:	e070      	b.n	80021a8 <HAL_RCC_OscConfig+0x138>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d000      	beq.n	80020d0 <HAL_RCC_OscConfig+0x60>
 80020ce:	e06b      	b.n	80021a8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e2dc      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x7c>
 80020dc:	4bb1      	ldr	r3, [pc, #708]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4bb0      	ldr	r3, [pc, #704]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	0249      	lsls	r1, r1, #9
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e02f      	b.n	800214c <HAL_RCC_OscConfig+0xdc>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x9e>
 80020f4:	4bab      	ldr	r3, [pc, #684]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4baa      	ldr	r3, [pc, #680]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80020fa:	49ab      	ldr	r1, [pc, #684]	; (80023a8 <HAL_RCC_OscConfig+0x338>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4ba8      	ldr	r3, [pc, #672]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4ba7      	ldr	r3, [pc, #668]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002106:	49a9      	ldr	r1, [pc, #676]	; (80023ac <HAL_RCC_OscConfig+0x33c>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	e01e      	b.n	800214c <HAL_RCC_OscConfig+0xdc>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10e      	bne.n	8002134 <HAL_RCC_OscConfig+0xc4>
 8002116:	4ba3      	ldr	r3, [pc, #652]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4ba2      	ldr	r3, [pc, #648]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	02c9      	lsls	r1, r1, #11
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	4b9f      	ldr	r3, [pc, #636]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b9e      	ldr	r3, [pc, #632]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	0249      	lsls	r1, r1, #9
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xdc>
 8002134:	4b9b      	ldr	r3, [pc, #620]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b9a      	ldr	r3, [pc, #616]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800213a:	499b      	ldr	r1, [pc, #620]	; (80023a8 <HAL_RCC_OscConfig+0x338>)
 800213c:	400a      	ands	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	4b98      	ldr	r3, [pc, #608]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b97      	ldr	r3, [pc, #604]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002146:	4999      	ldr	r1, [pc, #612]	; (80023ac <HAL_RCC_OscConfig+0x33c>)
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d014      	beq.n	800217e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fcae 	bl	8001ab4 <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215e:	f7ff fca9 	bl	8001ab4 <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e28e      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002170:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	029b      	lsls	r3, r3, #10
 8002178:	4013      	ands	r3, r2
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0xee>
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff fc99 	bl	8001ab4 <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fc94 	bl	8001ab4 <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e279      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	4013      	ands	r3, r2
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x118>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2202      	movs	r2, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x146>
 80021b4:	e06c      	b.n	8002290 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021b6:	4b7b      	ldr	r3, [pc, #492]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	220c      	movs	r2, #12
 80021bc:	4013      	ands	r3, r2
 80021be:	d00e      	beq.n	80021de <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	220c      	movs	r2, #12
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d11f      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
 80021cc:	4b75      	ldr	r3, [pc, #468]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	23c0      	movs	r3, #192	; 0xc0
 80021d2:	025b      	lsls	r3, r3, #9
 80021d4:	401a      	ands	r2, r3
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	429a      	cmp	r2, r3
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b71      	ldr	r3, [pc, #452]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x184>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e24c      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f4:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	22f8      	movs	r2, #248	; 0xf8
 80021fa:	4393      	bics	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00da      	lsls	r2, r3, #3
 8002204:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e041      	b.n	8002290 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d024      	beq.n	800225e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800221a:	2101      	movs	r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fc48 	bl	8001ab4 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fc43 	bl	8001ab4 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e228      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2202      	movs	r2, #2
 8002242:	4013      	ands	r3, r2
 8002244:	d0f1      	beq.n	800222a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b57      	ldr	r3, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	22f8      	movs	r2, #248	; 0xf8
 800224c:	4393      	bics	r3, r2
 800224e:	0019      	movs	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00da      	lsls	r2, r3, #3
 8002256:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e018      	b.n	8002290 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b51      	ldr	r3, [pc, #324]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002264:	2101      	movs	r1, #1
 8002266:	438a      	bics	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fc23 	bl	8001ab4 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002274:	f7ff fc1e 	bl	8001ab4 <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e203      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	4013      	ands	r3, r2
 800228e:	d1f1      	bne.n	8002274 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2208      	movs	r2, #8
 8002296:	4013      	ands	r3, r2
 8002298:	d036      	beq.n	8002308 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fc01 	bl	8001ab4 <HAL_GetTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fbfc 	bl	8001ab4 <HAL_GetTick>
 80022bc:	0002      	movs	r2, r0
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1e1      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2202      	movs	r2, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d0f1      	beq.n	80022b8 <HAL_RCC_OscConfig+0x248>
 80022d4:	e018      	b.n	8002308 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80022d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022da:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 80022dc:	2101      	movs	r1, #1
 80022de:	438a      	bics	r2, r1
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fbe7 	bl	8001ab4 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ec:	f7ff fbe2 	bl	8001ab4 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1c7      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	d1f1      	bne.n	80022ec <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2204      	movs	r2, #4
 800230e:	4013      	ands	r3, r2
 8002310:	d100      	bne.n	8002314 <HAL_RCC_OscConfig+0x2a4>
 8002312:	e0b5      	b.n	8002480 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002314:	201f      	movs	r0, #31
 8002316:	183b      	adds	r3, r7, r0
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	4013      	ands	r3, r2
 8002326:	d110      	bne.n	800234a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800232a:	69da      	ldr	r2, [r3, #28]
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0549      	lsls	r1, r1, #21
 8002332:	430a      	orrs	r2, r1
 8002334:	61da      	str	r2, [r3, #28]
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002338:	69da      	ldr	r2, [r3, #28]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	055b      	lsls	r3, r3, #21
 800233e:	4013      	ands	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002344:	183b      	adds	r3, r7, r0
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d11a      	bne.n	800238c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0049      	lsls	r1, r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002364:	f7ff fba6 	bl	8001ab4 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236e:	f7ff fba1 	bl	8001ab4 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	; 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e186      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x340>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x344>
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 8002396:	6a1a      	ldr	r2, [r3, #32]
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <HAL_RCC_OscConfig+0x334>)
 800239a:	2101      	movs	r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	621a      	str	r2, [r3, #32]
 80023a0:	e036      	b.n	8002410 <HAL_RCC_OscConfig+0x3a0>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	40021000 	.word	0x40021000
 80023a8:	fffeffff 	.word	0xfffeffff
 80023ac:	fffbffff 	.word	0xfffbffff
 80023b0:	40007000 	.word	0x40007000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x366>
 80023bc:	4bb6      	ldr	r3, [pc, #728]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	4bb5      	ldr	r3, [pc, #724]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	438a      	bics	r2, r1
 80023c6:	621a      	str	r2, [r3, #32]
 80023c8:	4bb3      	ldr	r3, [pc, #716]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	4bb2      	ldr	r3, [pc, #712]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023ce:	2104      	movs	r1, #4
 80023d0:	438a      	bics	r2, r1
 80023d2:	621a      	str	r2, [r3, #32]
 80023d4:	e01c      	b.n	8002410 <HAL_RCC_OscConfig+0x3a0>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x388>
 80023de:	4bae      	ldr	r3, [pc, #696]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	4bad      	ldr	r3, [pc, #692]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023e4:	2104      	movs	r1, #4
 80023e6:	430a      	orrs	r2, r1
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	4bab      	ldr	r3, [pc, #684]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4baa      	ldr	r3, [pc, #680]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0x3a0>
 80023f8:	4ba7      	ldr	r3, [pc, #668]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	4ba6      	ldr	r3, [pc, #664]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80023fe:	2101      	movs	r1, #1
 8002400:	438a      	bics	r2, r1
 8002402:	621a      	str	r2, [r3, #32]
 8002404:	4ba4      	ldr	r3, [pc, #656]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	4ba3      	ldr	r3, [pc, #652]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800240a:	2104      	movs	r1, #4
 800240c:	438a      	bics	r2, r1
 800240e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d014      	beq.n	8002442 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7ff fb4c 	bl	8001ab4 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e009      	b.n	8002436 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7ff fb47 	bl	8001ab4 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	4a9b      	ldr	r2, [pc, #620]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e12b      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002436:	4b98      	ldr	r3, [pc, #608]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	2202      	movs	r2, #2
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x3b2>
 8002440:	e013      	b.n	800246a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7ff fb37 	bl	8001ab4 <HAL_GetTick>
 8002446:	0003      	movs	r3, r0
 8002448:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244a:	e009      	b.n	8002460 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff fb32 	bl	8001ab4 <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	4a91      	ldr	r2, [pc, #580]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e116      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	2202      	movs	r2, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246a:	231f      	movs	r3, #31
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002474:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	4b87      	ldr	r3, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800247a:	4989      	ldr	r1, [pc, #548]	; (80026a0 <HAL_RCC_OscConfig+0x630>)
 800247c:	400a      	ands	r2, r1
 800247e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2210      	movs	r2, #16
 8002486:	4013      	ands	r3, r2
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d12a      	bne.n	80024e8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002492:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002496:	4b80      	ldr	r3, [pc, #512]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002498:	2104      	movs	r1, #4
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800249e:	4b7e      	ldr	r3, [pc, #504]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a2:	4b7d      	ldr	r3, [pc, #500]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb03 	bl	8001ab4 <HAL_GetTick>
 80024ae:	0003      	movs	r3, r0
 80024b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024b4:	f7ff fafe 	bl	8001ab4 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0e3      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024c6:	4b74      	ldr	r3, [pc, #464]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2202      	movs	r2, #2
 80024cc:	4013      	ands	r3, r2
 80024ce:	d0f1      	beq.n	80024b4 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024d0:	4b71      	ldr	r3, [pc, #452]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	22f8      	movs	r2, #248	; 0xf8
 80024d6:	4393      	bics	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	00da      	lsls	r2, r3, #3
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	635a      	str	r2, [r3, #52]	; 0x34
 80024e6:	e034      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	3305      	adds	r3, #5
 80024ee:	d111      	bne.n	8002514 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024f0:	4b69      	ldr	r3, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024f6:	2104      	movs	r1, #4
 80024f8:	438a      	bics	r2, r1
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024fc:	4b66      	ldr	r3, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80024fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002500:	22f8      	movs	r2, #248	; 0xf8
 8002502:	4393      	bics	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	00da      	lsls	r2, r3, #3
 800250c:	4b62      	ldr	r3, [pc, #392]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800250e:	430a      	orrs	r2, r1
 8002510:	635a      	str	r2, [r3, #52]	; 0x34
 8002512:	e01e      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002518:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800251a:	2104      	movs	r1, #4
 800251c:	430a      	orrs	r2, r1
 800251e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002520:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002524:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002526:	2101      	movs	r1, #1
 8002528:	438a      	bics	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7ff fac2 	bl	8001ab4 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002536:	f7ff fabd 	bl	8001ab4 <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0a2      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002548:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	2202      	movs	r2, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d1f1      	bne.n	8002536 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <HAL_RCC_OscConfig+0x4ec>
 800255a:	e097      	b.n	800268c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255c:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	220c      	movs	r2, #12
 8002562:	4013      	ands	r3, r2
 8002564:	2b08      	cmp	r3, #8
 8002566:	d100      	bne.n	800256a <HAL_RCC_OscConfig+0x4fa>
 8002568:	e06b      	b.n	8002642 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d14c      	bne.n	800260c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b49      	ldr	r3, [pc, #292]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002578:	494a      	ldr	r1, [pc, #296]	; (80026a4 <HAL_RCC_OscConfig+0x634>)
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fa99 	bl	8001ab4 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff fa94 	bl	8001ab4 <HAL_GetTick>
 800258c:	0002      	movs	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e079      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	049b      	lsls	r3, r3, #18
 80025a2:	4013      	ands	r3, r2
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	220f      	movs	r2, #15
 80025ac:	4393      	bics	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b4:	4b38      	ldr	r3, [pc, #224]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_RCC_OscConfig+0x638>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	431a      	orrs	r2, r3
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b2f      	ldr	r3, [pc, #188]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0449      	lsls	r1, r1, #17
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa67 	bl	8001ab4 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff fa62 	bl	8001ab4 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e047      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x57c>
 800260a:	e03f      	b.n	800268c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002612:	4924      	ldr	r1, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x634>)
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fa4c 	bl	8001ab4 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fa47 	bl	8001ab4 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e02c      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	049b      	lsls	r3, r3, #18
 800263c:	4013      	ands	r3, r2
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x5b2>
 8002640:	e024      	b.n	800268c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01f      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_OscConfig+0x628>)
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	23c0      	movs	r3, #192	; 0xc0
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	429a      	cmp	r2, r3
 8002668:	d10e      	bne.n	8002688 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	220f      	movs	r2, #15
 800266e:	401a      	ands	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002674:	429a      	cmp	r2, r3
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	23f0      	movs	r3, #240	; 0xf0
 800267c:	039b      	lsls	r3, r3, #14
 800267e:	401a      	ands	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b008      	add	sp, #32
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	00001388 	.word	0x00001388
 80026a0:	efffffff 	.word	0xefffffff
 80026a4:	feffffff 	.word	0xfeffffff
 80026a8:	ffc27fff 	.word	0xffc27fff

080026ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b3      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d911      	bls.n	80026f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	4393      	bics	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	4b55      	ldr	r3, [pc, #340]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e09a      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2202      	movs	r2, #2
 80026f8:	4013      	ands	r3, r2
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2204      	movs	r2, #4
 8002702:	4013      	ands	r3, r2
 8002704:	d006      	beq.n	8002714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 800270c:	21e0      	movs	r1, #224	; 0xe0
 800270e:	00c9      	lsls	r1, r1, #3
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	22f0      	movs	r2, #240	; 0xf0
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b44      	ldr	r3, [pc, #272]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2201      	movs	r2, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d040      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	4013      	ands	r3, r2
 8002744:	d114      	bne.n	8002770 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06e      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	049b      	lsls	r3, r3, #18
 800275a:	4013      	ands	r3, r2
 800275c:	d108      	bne.n	8002770 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e062      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2202      	movs	r2, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e05b      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2203      	movs	r2, #3
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002780:	430a      	orrs	r2, r1
 8002782:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7ff f996 	bl	8001ab4 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278c:	e009      	b.n	80027a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7ff f991 	bl	8001ab4 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4a27      	ldr	r2, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x18c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e042      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	220c      	movs	r2, #12
 80027a8:	401a      	ands	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1ec      	bne.n	800278e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d211      	bcs.n	80027e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4393      	bics	r3, r2
 80027ca:	0019      	movs	r1, r3
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x184>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e020      	b.n	8002828 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2204      	movs	r2, #4
 80027ec:	4013      	ands	r3, r2
 80027ee:	d009      	beq.n	8002804 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_RCC_ClockConfig+0x190>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	0019      	movs	r1, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002804:	f000 f820 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002808:	0001      	movs	r1, r0
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x188>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	220f      	movs	r2, #15
 8002812:	4013      	ands	r3, r2
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_RCC_ClockConfig+0x194>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	000a      	movs	r2, r1
 800281a:	40da      	lsrs	r2, r3
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RCC_ClockConfig+0x198>)
 800281e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002820:	2003      	movs	r0, #3
 8002822:	f7ff f805 	bl	8001830 <HAL_InitTick>
  
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40022000 	.word	0x40022000
 8002834:	40021000 	.word	0x40021000
 8002838:	00001388 	.word	0x00001388
 800283c:	fffff8ff 	.word	0xfffff8ff
 8002840:	080086e8 	.word	0x080086e8
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b08f      	sub	sp, #60	; 0x3c
 800284c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800284e:	2314      	movs	r3, #20
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002854:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002856:	c313      	stmia	r3!, {r0, r1, r4}
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002860:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002862:	c313      	stmia	r3!, {r0, r1, r4}
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286c:	2300      	movs	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002870:	2300      	movs	r3, #0
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCC_GetSysClockFreq+0xc4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	220c      	movs	r2, #12
 8002886:	4013      	ands	r3, r2
 8002888:	2b04      	cmp	r3, #4
 800288a:	d002      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x4a>
 800288c:	2b08      	cmp	r3, #8
 800288e:	d003      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x50>
 8002890:	e02f      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002892:	4b1f      	ldr	r3, [pc, #124]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002896:	e02f      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	0c9b      	lsrs	r3, r3, #18
 800289c:	220f      	movs	r2, #15
 800289e:	4013      	ands	r3, r2
 80028a0:	2214      	movs	r2, #20
 80028a2:	18ba      	adds	r2, r7, r2
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_RCC_GetSysClockFreq+0xc4>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	220f      	movs	r2, #15
 80028ae:	4013      	ands	r3, r2
 80028b0:	1d3a      	adds	r2, r7, #4
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b8:	23c0      	movs	r3, #192	; 0xc0
 80028ba:	025b      	lsls	r3, r3, #9
 80028bc:	401a      	ands	r2, r3
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d109      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c8:	4811      	ldr	r0, [pc, #68]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ca:	f7fd fc27 	bl	800011c <__udivsi3>
 80028ce:	0003      	movs	r3, r0
 80028d0:	001a      	movs	r2, r3
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	4353      	muls	r3, r2
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	e008      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028de:	f7fd fc1d 	bl	800011c <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	001a      	movs	r2, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	4353      	muls	r3, r2
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80028ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b00f      	add	sp, #60	; 0x3c
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	08008648 	.word	0x08008648
 8002908:	08008658 	.word	0x08008658
 800290c:	40021000 	.word	0x40021000
 8002910:	007a1200 	.word	0x007a1200

08002914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_RCC_GetHCLKFreq+0x10>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000000 	.word	0x20000000

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800292c:	f7ff fff2 	bl	8002914 <HAL_RCC_GetHCLKFreq>
 8002930:	0001      	movs	r1, r0
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	2207      	movs	r2, #7
 800293a:	4013      	ands	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	40d9      	lsrs	r1, r3
 8002942:	000b      	movs	r3, r1
}    
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	40021000 	.word	0x40021000
 8002950:	080086f8 	.word	0x080086f8

08002954 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_RCC_GetClockConfig+0x4c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetClockConfig+0x4c>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	22f0      	movs	r2, #240	; 0xf0
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_GetClockConfig+0x4c>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	23e0      	movs	r3, #224	; 0xe0
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	401a      	ands	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetClockConfig+0x50>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	401a      	ands	r2, r3
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b002      	add	sp, #8
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40022000 	.word	0x40022000

080029a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0a8      	b.n	8002b0c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2382      	movs	r3, #130	; 0x82
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d009      	beq.n	80029e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
 80029d4:	e005      	b.n	80029e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	225d      	movs	r2, #93	; 0x5d
 80029ec:	5c9b      	ldrb	r3, [r3, r2]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	225c      	movs	r2, #92	; 0x5c
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fe fe38 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	225d      	movs	r2, #93	; 0x5d
 8002a08:	2102      	movs	r1, #2
 8002a0a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2140      	movs	r1, #64	; 0x40
 8002a18:	438a      	bics	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	23e0      	movs	r3, #224	; 0xe0
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d902      	bls.n	8002a2e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	015b      	lsls	r3, r3, #5
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	23f0      	movs	r3, #240	; 0xf0
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d008      	beq.n	8002a52 <HAL_SPI_Init+0xaa>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	23e0      	movs	r3, #224	; 0xe0
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d002      	beq.n	8002a52 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	2382      	movs	r3, #130	; 0x82
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	2384      	movs	r3, #132	; 0x84
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	400b      	ands	r3, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	400b      	ands	r3, r1
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2101      	movs	r1, #1
 8002a78:	400b      	ands	r3, r1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6999      	ldr	r1, [r3, #24]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	400b      	ands	r3, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2138      	movs	r1, #56	; 0x38
 8002a8e:	400b      	ands	r3, r1
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	400b      	ands	r3, r1
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	401a      	ands	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2110      	movs	r1, #16
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac8:	2108      	movs	r1, #8
 8002aca:	400b      	ands	r3, r1
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	23f0      	movs	r3, #240	; 0xf0
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	0011      	movs	r1, r2
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	015b      	lsls	r3, r3, #5
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4907      	ldr	r1, [pc, #28]	; (8002b14 <HAL_SPI_Init+0x16c>)
 8002af8:	400a      	ands	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	225d      	movs	r2, #93	; 0x5d
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	fffff7ff 	.word	0xfffff7ff

08002b18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	1dbb      	adds	r3, r7, #6
 8002b26:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b28:	231f      	movs	r3, #31
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	225c      	movs	r2, #92	; 0x5c
 8002b34:	5c9b      	ldrb	r3, [r3, r2]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_SPI_Transmit+0x26>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e140      	b.n	8002dc0 <HAL_SPI_Transmit+0x2a8>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	225c      	movs	r2, #92	; 0x5c
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b46:	f7fe ffb5 	bl	8001ab4 <HAL_GetTick>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b4e:	2316      	movs	r3, #22
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	1dba      	adds	r2, r7, #6
 8002b54:	8812      	ldrh	r2, [r2, #0]
 8002b56:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	225d      	movs	r2, #93	; 0x5d
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d004      	beq.n	8002b6e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002b64:	231f      	movs	r3, #31
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b6c:	e11d      	b.n	8002daa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_SPI_Transmit+0x64>
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002b7c:	231f      	movs	r3, #31
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
    goto error;
 8002b84:	e111      	b.n	8002daa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	225d      	movs	r2, #93	; 0x5d
 8002b8a:	2103      	movs	r1, #3
 8002b8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1dba      	adds	r2, r7, #6
 8002b9e:	8812      	ldrh	r2, [r2, #0]
 8002ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1dba      	adds	r2, r7, #6
 8002ba6:	8812      	ldrh	r2, [r2, #0]
 8002ba8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2244      	movs	r2, #68	; 0x44
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2246      	movs	r2, #70	; 0x46
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d110      	bne.n	8002bfa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2140      	movs	r1, #64	; 0x40
 8002be4:	438a      	bics	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	01c9      	lsls	r1, r1, #7
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b40      	cmp	r3, #64	; 0x40
 8002c06:	d007      	beq.n	8002c18 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2140      	movs	r1, #64	; 0x40
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	23e0      	movs	r3, #224	; 0xe0
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d94e      	bls.n	8002cc2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d004      	beq.n	8002c36 <HAL_SPI_Transmit+0x11e>
 8002c2c:	2316      	movs	r3, #22
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d13f      	bne.n	8002cb6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	881a      	ldrh	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	1c9a      	adds	r2, r3, #2
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c5a:	e02c      	b.n	8002cb6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d112      	bne.n	8002c90 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	1c9a      	adds	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c8e:	e012      	b.n	8002cb6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c90:	f7fe ff10 	bl	8001ab4 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d802      	bhi.n	8002ca6 <HAL_SPI_Transmit+0x18e>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	d102      	bne.n	8002cac <HAL_SPI_Transmit+0x194>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002cac:	231f      	movs	r3, #31
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	701a      	strb	r2, [r3, #0]
          goto error;
 8002cb4:	e079      	b.n	8002daa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1cd      	bne.n	8002c5c <HAL_SPI_Transmit+0x144>
 8002cc0:	e04f      	b.n	8002d62 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_SPI_Transmit+0x1bc>
 8002cca:	2316      	movs	r3, #22
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d141      	bne.n	8002d58 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	7812      	ldrb	r2, [r2, #0]
 8002ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002cfa:	e02d      	b.n	8002d58 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d113      	bne.n	8002d32 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d30:	e012      	b.n	8002d58 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d32:	f7fe febf 	bl	8001ab4 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d802      	bhi.n	8002d48 <HAL_SPI_Transmit+0x230>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x236>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002d4e:	231f      	movs	r3, #31
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2203      	movs	r2, #3
 8002d54:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d56:	e028      	b.n	8002daa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cc      	bne.n	8002cfc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 fce5 	bl	8003738 <SPI_EndRxTxTransaction>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002d9e:	231f      	movs	r3, #31
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e000      	b.n	8002daa <HAL_SPI_Transmit+0x292>
  }

error:
 8002da8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	225d      	movs	r2, #93	; 0x5d
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	225c      	movs	r2, #92	; 0x5c
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dba:	231f      	movs	r3, #31
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	781b      	ldrb	r3, [r3, #0]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b008      	add	sp, #32
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	1dbb      	adds	r3, r7, #6
 8002dd6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dd8:	2317      	movs	r3, #23
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	2382      	movs	r3, #130	; 0x82
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d113      	bne.n	8002e14 <HAL_SPI_Receive+0x4c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10f      	bne.n	8002e14 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	225d      	movs	r2, #93	; 0x5d
 8002df8:	2104      	movs	r1, #4
 8002dfa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dfc:	1dbb      	adds	r3, r7, #6
 8002dfe:	881c      	ldrh	r4, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	0023      	movs	r3, r4
 8002e0c:	f000 f928 	bl	8003060 <HAL_SPI_TransmitReceive>
 8002e10:	0003      	movs	r3, r0
 8002e12:	e11c      	b.n	800304e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	225c      	movs	r2, #92	; 0x5c
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_SPI_Receive+0x5a>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e115      	b.n	800304e <HAL_SPI_Receive+0x286>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	225c      	movs	r2, #92	; 0x5c
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fe fe43 	bl	8001ab4 <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	225d      	movs	r2, #93	; 0x5d
 8002e36:	5c9b      	ldrb	r3, [r3, r2]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d004      	beq.n	8002e48 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002e3e:	2317      	movs	r3, #23
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e46:	e0f7      	b.n	8003038 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_SPI_Receive+0x8e>
 8002e4e:	1dbb      	adds	r3, r7, #6
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002e56:	2317      	movs	r3, #23
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e5e:	e0eb      	b.n	8003038 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	225d      	movs	r2, #93	; 0x5d
 8002e64:	2104      	movs	r1, #4
 8002e66:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1dba      	adds	r2, r7, #6
 8002e78:	2144      	movs	r1, #68	; 0x44
 8002e7a:	8812      	ldrh	r2, [r2, #0]
 8002e7c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1dba      	adds	r2, r7, #6
 8002e82:	2146      	movs	r1, #70	; 0x46
 8002e84:	8812      	ldrh	r2, [r2, #0]
 8002e86:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	23e0      	movs	r3, #224	; 0xe0
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d908      	bls.n	8002ec4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4966      	ldr	r1, [pc, #408]	; (8003058 <HAL_SPI_Receive+0x290>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	e008      	b.n	8002ed6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0149      	lsls	r1, r1, #5
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10f      	bne.n	8002f02 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	438a      	bics	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4957      	ldr	r1, [pc, #348]	; (800305c <HAL_SPI_Receive+0x294>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2240      	movs	r2, #64	; 0x40
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d007      	beq.n	8002f20 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2140      	movs	r1, #64	; 0x40
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	23e0      	movs	r3, #224	; 0xe0
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d900      	bls.n	8002f2e <HAL_SPI_Receive+0x166>
 8002f2c:	e069      	b.n	8003002 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f2e:	e031      	b.n	8002f94 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2201      	movs	r2, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d117      	bne.n	8002f6e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	001a      	movs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	7812      	ldrb	r2, [r2, #0]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2246      	movs	r2, #70	; 0x46
 8002f5e:	5a9b      	ldrh	r3, [r3, r2]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b299      	uxth	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2246      	movs	r2, #70	; 0x46
 8002f6a:	5299      	strh	r1, [r3, r2]
 8002f6c:	e012      	b.n	8002f94 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6e:	f7fe fda1 	bl	8001ab4 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d802      	bhi.n	8002f84 <HAL_SPI_Receive+0x1bc>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_SPI_Receive+0x1c2>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002f8a:	2317      	movs	r3, #23
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2203      	movs	r2, #3
 8002f90:	701a      	strb	r2, [r3, #0]
          goto error;
 8002f92:	e051      	b.n	8003038 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2246      	movs	r2, #70	; 0x46
 8002f98:	5a9b      	ldrh	r3, [r3, r2]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1c7      	bne.n	8002f30 <HAL_SPI_Receive+0x168>
 8002fa0:	e035      	b.n	800300e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d115      	bne.n	8002fdc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	b292      	uxth	r2, r2
 8002fbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	1c9a      	adds	r2, r3, #2
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2246      	movs	r2, #70	; 0x46
 8002fcc:	5a9b      	ldrh	r3, [r3, r2]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b299      	uxth	r1, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2246      	movs	r2, #70	; 0x46
 8002fd8:	5299      	strh	r1, [r3, r2]
 8002fda:	e012      	b.n	8003002 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fdc:	f7fe fd6a 	bl	8001ab4 <HAL_GetTick>
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d802      	bhi.n	8002ff2 <HAL_SPI_Receive+0x22a>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_SPI_Receive+0x230>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002ff8:	2317      	movs	r3, #23
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	701a      	strb	r2, [r3, #0]
          goto error;
 8003000:	e01a      	b.n	8003038 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2246      	movs	r2, #70	; 0x46
 8003006:	5a9b      	ldrh	r3, [r3, r2]
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1c9      	bne.n	8002fa2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	6839      	ldr	r1, [r7, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fb31 	bl	800367c <SPI_EndRxTransaction>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800302c:	2317      	movs	r3, #23
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e000      	b.n	8003038 <HAL_SPI_Receive+0x270>
  }

error :
 8003036:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	225d      	movs	r2, #93	; 0x5d
 800303c:	2101      	movs	r1, #1
 800303e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	225c      	movs	r2, #92	; 0x5c
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003048:	2317      	movs	r3, #23
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b007      	add	sp, #28
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	ffffefff 	.word	0xffffefff
 800305c:	ffffbfff 	.word	0xffffbfff

08003060 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	001a      	movs	r2, r3
 800306e:	1cbb      	adds	r3, r7, #2
 8003070:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003072:	2301      	movs	r3, #1
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003076:	2323      	movs	r3, #35	; 0x23
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	225c      	movs	r2, #92	; 0x5c
 8003082:	5c9b      	ldrb	r3, [r3, r2]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_TransmitReceive+0x2c>
 8003088:	2302      	movs	r3, #2
 800308a:	e1b5      	b.n	80033f8 <HAL_SPI_TransmitReceive+0x398>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	225c      	movs	r2, #92	; 0x5c
 8003090:	2101      	movs	r1, #1
 8003092:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe fd0e 	bl	8001ab4 <HAL_GetTick>
 8003098:	0003      	movs	r3, r0
 800309a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800309c:	201b      	movs	r0, #27
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	215d      	movs	r1, #93	; 0x5d
 80030a4:	5c52      	ldrb	r2, [r2, r1]
 80030a6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030ae:	2312      	movs	r3, #18
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	1cba      	adds	r2, r7, #2
 80030b4:	8812      	ldrh	r2, [r2, #0]
 80030b6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030b8:	183b      	adds	r3, r7, r0
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d011      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x84>
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	2382      	movs	r3, #130	; 0x82
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d107      	bne.n	80030da <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_SPI_TransmitReceive+0x7a>
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d004      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80030da:	2323      	movs	r3, #35	; 0x23
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80030e2:	e17e      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x98>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_SPI_TransmitReceive+0x98>
 80030f0:	1cbb      	adds	r3, r7, #2
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80030f8:	2323      	movs	r3, #35	; 0x23
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003100:	e16f      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	225d      	movs	r2, #93	; 0x5d
 8003106:	5c9b      	ldrb	r3, [r3, r2]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b04      	cmp	r3, #4
 800310c:	d003      	beq.n	8003116 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	225d      	movs	r2, #93	; 0x5d
 8003112:	2105      	movs	r1, #5
 8003114:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1cba      	adds	r2, r7, #2
 8003126:	2146      	movs	r1, #70	; 0x46
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1cba      	adds	r2, r7, #2
 8003130:	2144      	movs	r1, #68	; 0x44
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1cba      	adds	r2, r7, #2
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1cba      	adds	r2, r7, #2
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	23e0      	movs	r3, #224	; 0xe0
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	429a      	cmp	r2, r3
 8003162:	d908      	bls.n	8003176 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	49a4      	ldr	r1, [pc, #656]	; (8003400 <HAL_SPI_TransmitReceive+0x3a0>)
 8003170:	400a      	ands	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e008      	b.n	8003188 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	0149      	lsls	r1, r1, #5
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2240      	movs	r2, #64	; 0x40
 8003190:	4013      	ands	r3, r2
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d007      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	23e0      	movs	r3, #224	; 0xe0
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d800      	bhi.n	80031b4 <HAL_SPI_TransmitReceive+0x154>
 80031b2:	e07f      	b.n	80032b4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x168>
 80031bc:	2312      	movs	r3, #18
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d000      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x168>
 80031c6:	e069      	b.n	800329c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	1c9a      	adds	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ec:	e056      	b.n	800329c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2202      	movs	r2, #2
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d11b      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x1d4>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x1d4>
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b01      	cmp	r3, #1
 800320a:	d113      	bne.n	8003234 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	2b01      	cmp	r3, #1
 8003240:	d11c      	bne.n	800327c <HAL_SPI_TransmitReceive+0x21c>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2246      	movs	r2, #70	; 0x46
 8003246:	5a9b      	ldrh	r3, [r3, r2]
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	b292      	uxth	r2, r2
 800325a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2246      	movs	r2, #70	; 0x46
 800326a:	5a9b      	ldrh	r3, [r3, r2]
 800326c:	b29b      	uxth	r3, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	b299      	uxth	r1, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2246      	movs	r2, #70	; 0x46
 8003276:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800327c:	f7fe fc1a 	bl	8001ab4 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003288:	429a      	cmp	r2, r3
 800328a:	d807      	bhi.n	800329c <HAL_SPI_TransmitReceive+0x23c>
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3301      	adds	r3, #1
 8003290:	d004      	beq.n	800329c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8003292:	2323      	movs	r3, #35	; 0x23
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	2203      	movs	r2, #3
 8003298:	701a      	strb	r2, [r3, #0]
        goto error;
 800329a:	e0a2      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1a3      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x18e>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2246      	movs	r2, #70	; 0x46
 80032aa:	5a9b      	ldrh	r3, [r3, r2]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d19d      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x18e>
 80032b2:	e085      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x268>
 80032bc:	2312      	movs	r3, #18
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d000      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x268>
 80032c6:	e070      	b.n	80033aa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	7812      	ldrb	r2, [r2, #0]
 80032d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ee:	e05c      	b.n	80033aa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d11c      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x2d8>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d017      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x2d8>
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	2b01      	cmp	r3, #1
 800330c:	d114      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2201      	movs	r2, #1
 8003340:	4013      	ands	r3, r2
 8003342:	2b01      	cmp	r3, #1
 8003344:	d11e      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x324>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2246      	movs	r2, #70	; 0x46
 800334a:	5a9b      	ldrh	r3, [r3, r2]
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	001a      	movs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2246      	movs	r2, #70	; 0x46
 8003372:	5a9b      	ldrh	r3, [r3, r2]
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b299      	uxth	r1, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2246      	movs	r2, #70	; 0x46
 800337e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003380:	2301      	movs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003384:	f7fe fb96 	bl	8001ab4 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	429a      	cmp	r2, r3
 8003392:	d802      	bhi.n	800339a <HAL_SPI_TransmitReceive+0x33a>
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	3301      	adds	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x340>
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80033a0:	2323      	movs	r3, #35	; 0x23
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2203      	movs	r2, #3
 80033a6:	701a      	strb	r2, [r3, #0]
        goto error;
 80033a8:	e01b      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d19d      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x290>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2246      	movs	r2, #70	; 0x46
 80033b8:	5a9b      	ldrh	r3, [r3, r2]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d197      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f9b6 	bl	8003738 <SPI_EndRxTxTransaction>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80033d0:	2323      	movs	r3, #35	; 0x23
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	661a      	str	r2, [r3, #96]	; 0x60
 80033de:	e000      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80033e0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	225d      	movs	r2, #93	; 0x5d
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	225c      	movs	r2, #92	; 0x5c
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80033f2:	2323      	movs	r3, #35	; 0x23
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	781b      	ldrb	r3, [r3, #0]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b00a      	add	sp, #40	; 0x28
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	ffffefff 	.word	0xffffefff

08003404 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	225d      	movs	r2, #93	; 0x5d
 8003410:	5c9b      	ldrb	r3, [r3, r2]
 8003412:	b2db      	uxtb	r3, r3
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b002      	add	sp, #8
 800341a:	bd80      	pop	{r7, pc}

0800341c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800342c:	f7fe fb42 	bl	8001ab4 <HAL_GetTick>
 8003430:	0002      	movs	r2, r0
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	18d3      	adds	r3, r2, r3
 800343a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800343c:	f7fe fb3a 	bl	8001ab4 <HAL_GetTick>
 8003440:	0003      	movs	r3, r0
 8003442:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	015b      	lsls	r3, r3, #5
 800344a:	0d1b      	lsrs	r3, r3, #20
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	4353      	muls	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003452:	e058      	b.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	d055      	beq.n	8003506 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800345a:	f7fe fb2b 	bl	8001ab4 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	429a      	cmp	r2, r3
 8003468:	d902      	bls.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x54>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d142      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	21e0      	movs	r1, #224	; 0xe0
 800347c:	438a      	bics	r2, r1
 800347e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	2382      	movs	r3, #130	; 0x82
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	429a      	cmp	r2, r3
 800348a:	d113      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2140      	movs	r1, #64	; 0x40
 80034b0:	438a      	bics	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	019b      	lsls	r3, r3, #6
 80034bc:	429a      	cmp	r2, r3
 80034be:	d110      	bne.n	80034e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	491a      	ldr	r1, [pc, #104]	; (8003534 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80034cc:	400a      	ands	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	0189      	lsls	r1, r1, #6
 80034de:	430a      	orrs	r2, r1
 80034e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	225d      	movs	r2, #93	; 0x5d
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	225c      	movs	r2, #92	; 0x5c
 80034ee:	2100      	movs	r1, #0
 80034f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e017      	b.n	8003526 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3b01      	subs	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	4013      	ands	r3, r2
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	425a      	negs	r2, r3
 8003516:	4153      	adcs	r3, r2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	001a      	movs	r2, r3
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d197      	bne.n	8003454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b008      	add	sp, #32
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000000 	.word	0x20000000
 8003534:	ffffdfff 	.word	0xffffdfff

08003538 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003546:	2317      	movs	r3, #23
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800354e:	f7fe fab1 	bl	8001ab4 <HAL_GetTick>
 8003552:	0002      	movs	r2, r0
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800355e:	f7fe faa9 	bl	8001ab4 <HAL_GetTick>
 8003562:	0003      	movs	r3, r0
 8003564:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	0013      	movs	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	189b      	adds	r3, r3, r2
 8003578:	00da      	lsls	r2, r3, #3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	0d1b      	lsrs	r3, r3, #20
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	4353      	muls	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003584:	e068      	b.n	8003658 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	23c0      	movs	r3, #192	; 0xc0
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	429a      	cmp	r2, r3
 800358e:	d10a      	bne.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	2117      	movs	r1, #23
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	d055      	beq.n	8003658 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ac:	f7fe fa82 	bl	8001ab4 <HAL_GetTick>
 80035b0:	0002      	movs	r2, r0
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d902      	bls.n	80035c2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d142      	bne.n	8003648 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	21e0      	movs	r1, #224	; 0xe0
 80035ce:	438a      	bics	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	2382      	movs	r3, #130	; 0x82
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	429a      	cmp	r2, r3
 80035dc:	d113      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0xce>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d005      	beq.n	80035f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d107      	bne.n	8003606 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	438a      	bics	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	019b      	lsls	r3, r3, #6
 800360e:	429a      	cmp	r2, r3
 8003610:	d110      	bne.n	8003634 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4916      	ldr	r1, [pc, #88]	; (8003678 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800361e:	400a      	ands	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0189      	lsls	r1, r1, #6
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	225d      	movs	r2, #93	; 0x5d
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	225c      	movs	r2, #92	; 0x5c
 8003640:	2100      	movs	r1, #0
 8003642:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e010      	b.n	800366a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3b01      	subs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d18e      	bne.n	8003586 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b00a      	add	sp, #40	; 0x28
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000000 	.word	0x20000000
 8003678:	ffffdfff 	.word	0xffffdfff

0800367c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	2382      	movs	r3, #130	; 0x82
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	429a      	cmp	r2, r3
 8003692:	d113      	bne.n	80036bc <SPI_EndRxTransaction+0x40>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	429a      	cmp	r2, r3
 800369e:	d005      	beq.n	80036ac <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	2380      	movs	r3, #128	; 0x80
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2140      	movs	r1, #64	; 0x40
 80036b8:	438a      	bics	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0013      	movs	r3, r2
 80036c6:	2200      	movs	r2, #0
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	f7ff fea7 	bl	800341c <SPI_WaitFlagStateUntilTimeout>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d007      	beq.n	80036e2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	2220      	movs	r2, #32
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e026      	b.n	8003730 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	2382      	movs	r3, #130	; 0x82
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11f      	bne.n	800372e <SPI_EndRxTransaction+0xb2>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d005      	beq.n	8003706 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	429a      	cmp	r2, r3
 8003704:	d113      	bne.n	800372e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	23c0      	movs	r3, #192	; 0xc0
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	0013      	movs	r3, r2
 8003714:	2200      	movs	r2, #0
 8003716:	f7ff ff0f 	bl	8003538 <SPI_WaitFifoStateUntilTimeout>
 800371a:	1e03      	subs	r3, r0, #0
 800371c:	d007      	beq.n	800372e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	2220      	movs	r2, #32
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e000      	b.n	8003730 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	0159      	lsls	r1, r3, #5
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0013      	movs	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	f7ff fef0 	bl	8003538 <SPI_WaitFifoStateUntilTimeout>
 8003758:	1e03      	subs	r3, r0, #0
 800375a:	d007      	beq.n	800376c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	2220      	movs	r2, #32
 8003762:	431a      	orrs	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e027      	b.n	80037bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	0013      	movs	r3, r2
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	f7ff fe4f 	bl	800341c <SPI_WaitFlagStateUntilTimeout>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d007      	beq.n	8003792 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	2220      	movs	r2, #32
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e014      	b.n	80037bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	00d9      	lsls	r1, r3, #3
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	0013      	movs	r3, r2
 80037a0:	2200      	movs	r2, #0
 80037a2:	f7ff fec9 	bl	8003538 <SPI_WaitFifoStateUntilTimeout>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d007      	beq.n	80037ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	2220      	movs	r2, #32
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e000      	b.n	80037bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e042      	b.n	800385c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	223d      	movs	r2, #61	; 0x3d
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	223c      	movs	r2, #60	; 0x3c
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f839 	bl	8003864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	223d      	movs	r2, #61	; 0x3d
 80037f6:	2102      	movs	r1, #2
 80037f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f000 f9b7 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2246      	movs	r2, #70	; 0x46
 800380e:	2101      	movs	r1, #1
 8003810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	223e      	movs	r2, #62	; 0x3e
 8003816:	2101      	movs	r1, #1
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	223f      	movs	r2, #63	; 0x3f
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2240      	movs	r2, #64	; 0x40
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2241      	movs	r2, #65	; 0x41
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2242      	movs	r2, #66	; 0x42
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2243      	movs	r2, #67	; 0x43
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2244      	movs	r2, #68	; 0x44
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2245      	movs	r2, #69	; 0x45
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	223d      	movs	r2, #61	; 0x3d
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223d      	movs	r2, #61	; 0x3d
 8003880:	5c9b      	ldrb	r3, [r3, r2]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e035      	b.n	80038f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	223d      	movs	r2, #61	; 0x3d
 8003890:	2102      	movs	r1, #2
 8003892:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a15      	ldr	r2, [pc, #84]	; (8003900 <HAL_TIM_Base_Start_IT+0x8c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x4e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a14      	ldr	r2, [pc, #80]	; (8003904 <HAL_TIM_Base_Start_IT+0x90>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_Base_Start_IT+0x4e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <HAL_TIM_Base_Start_IT+0x94>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2207      	movs	r2, #7
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d010      	beq.n	80038f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	e007      	b.n	80038f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40014000 	.word	0x40014000

0800390c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d124      	bne.n	800396c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2202      	movs	r2, #2
 800392a:	4013      	ands	r3, r2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11d      	bne.n	800396c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2203      	movs	r2, #3
 8003936:	4252      	negs	r2, r2
 8003938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2203      	movs	r2, #3
 8003948:	4013      	ands	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f8fa 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003954:	e007      	b.n	8003966 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f8ed 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 f8f9 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2204      	movs	r2, #4
 8003974:	4013      	ands	r3, r2
 8003976:	2b04      	cmp	r3, #4
 8003978:	d125      	bne.n	80039c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2204      	movs	r2, #4
 8003982:	4013      	ands	r3, r2
 8003984:	2b04      	cmp	r3, #4
 8003986:	d11e      	bne.n	80039c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2205      	movs	r2, #5
 800398e:	4252      	negs	r2, r2
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2202      	movs	r2, #2
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	23c0      	movs	r3, #192	; 0xc0
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4013      	ands	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 f8cd 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 80039ae:	e007      	b.n	80039c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f8c0 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f8cc 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d124      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2208      	movs	r2, #8
 80039dc:	4013      	ands	r3, r2
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d11d      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2209      	movs	r2, #9
 80039e8:	4252      	negs	r2, r2
 80039ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	d004      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f8a1 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003a06:	e007      	b.n	8003a18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f894 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 f8a0 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2210      	movs	r2, #16
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d125      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d11e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2211      	movs	r2, #17
 8003a40:	4252      	negs	r2, r2
 8003a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2208      	movs	r2, #8
 8003a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	23c0      	movs	r3, #192	; 0xc0
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4013      	ands	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f874 	bl	8003b48 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e007      	b.n	8003a72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f867 	bl	8003b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 f873 	bl	8003b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d10f      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d108      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7fd fda5 	bl	80015f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b80      	cmp	r3, #128	; 0x80
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2280      	movs	r2, #128	; 0x80
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b80      	cmp	r3, #128	; 0x80
 8003ac0:	d108      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2281      	movs	r2, #129	; 0x81
 8003ac8:	4252      	negs	r2, r2
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 f8d0 	bl	8003c74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d10f      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2240      	movs	r2, #64	; 0x40
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d108      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2241      	movs	r2, #65	; 0x41
 8003af6:	4252      	negs	r2, r2
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f833 	bl	8003b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d10f      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d108      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2221      	movs	r2, #33	; 0x21
 8003b24:	4252      	negs	r2, r2
 8003b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f89a 	bl	8003c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b60:	46c0      	nop			; (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0x20>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2e      	ldr	r2, [pc, #184]	; (8003c4c <TIM_Base_SetConfig+0xd4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d108      	bne.n	8003baa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2270      	movs	r2, #112	; 0x70
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <TIM_Base_SetConfig+0xd4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00f      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a24      	ldr	r2, [pc, #144]	; (8003c50 <TIM_Base_SetConfig+0xd8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a23      	ldr	r2, [pc, #140]	; (8003c54 <TIM_Base_SetConfig+0xdc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a22      	ldr	r2, [pc, #136]	; (8003c58 <TIM_Base_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_Base_SetConfig+0x62>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	; (8003c5c <TIM_Base_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <TIM_Base_SetConfig+0xe8>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <TIM_Base_SetConfig+0xd0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_Base_SetConfig+0xba>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <TIM_Base_SetConfig+0xdc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_Base_SetConfig+0xba>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a0c      	ldr	r2, [pc, #48]	; (8003c58 <TIM_Base_SetConfig+0xe0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_Base_SetConfig+0xba>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <TIM_Base_SetConfig+0xe4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d103      	bne.n	8003c3a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	615a      	str	r2, [r3, #20]
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40002000 	.word	0x40002000
 8003c54:	40014000 	.word	0x40014000
 8003c58:	40014400 	.word	0x40014400
 8003c5c:	40014800 	.word	0x40014800
 8003c60:	fffffcff 	.word	0xfffffcff

08003c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b002      	add	sp, #8
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e044      	b.n	8003d20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d107      	bne.n	8003cae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2274      	movs	r2, #116	; 0x74
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fd fd6d 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fb84 	bl	80043d4 <UART_SetConfig>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e024      	b.n	8003d20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f000 fccf 	bl	8004684 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490d      	ldr	r1, [pc, #52]	; (8003d28 <HAL_UART_Init+0xa4>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2108      	movs	r1, #8
 8003d02:	438a      	bics	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f000 fd67 	bl	80047ec <UART_CheckIdleState>
 8003d1e:	0003      	movs	r3, r0
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	fffff7ff 	.word	0xfffff7ff

08003d2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	1dbb      	adds	r3, r7, #6
 8003d38:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d000      	beq.n	8003d44 <HAL_UART_Transmit_IT+0x18>
 8003d42:	e06a      	b.n	8003e1a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_Transmit_IT+0x26>
 8003d4a:	1dbb      	adds	r3, r7, #6
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e062      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	015b      	lsls	r3, r3, #5
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d109      	bne.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d001      	beq.n	8003d76 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e052      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2274      	movs	r2, #116	; 0x74
 8003d7a:	5c9b      	ldrb	r3, [r3, r2]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit_IT+0x58>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e04b      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2274      	movs	r2, #116	; 0x74
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1dba      	adds	r2, r7, #6
 8003d96:	2150      	movs	r1, #80	; 0x50
 8003d98:	8812      	ldrh	r2, [r2, #0]
 8003d9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1dba      	adds	r2, r7, #6
 8003da0:	2152      	movs	r1, #82	; 0x52
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	2100      	movs	r1, #0
 8003db2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d107      	bne.n	8003dd6 <HAL_UART_Transmit_IT+0xaa>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_UART_Transmit_IT+0xf8>)
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68
 8003dd4:	e002      	b.n	8003ddc <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_UART_Transmit_IT+0xfc>)
 8003dda:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2274      	movs	r2, #116	; 0x74
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de4:	f3ef 8310 	mrs	r3, PRIMASK
 8003de8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dea:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	2301      	movs	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e000      	b.n	8003e1c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
  }
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b008      	add	sp, #32
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08004bab 	.word	0x08004bab
 8003e28:	08004af7 	.word	0x08004af7

08003e2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b0ab      	sub	sp, #172	; 0xac
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	22a4      	movs	r2, #164	; 0xa4
 8003e3c:	18b9      	adds	r1, r7, r2
 8003e3e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	20a0      	movs	r0, #160	; 0xa0
 8003e48:	1839      	adds	r1, r7, r0
 8003e4a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	219c      	movs	r1, #156	; 0x9c
 8003e54:	1879      	adds	r1, r7, r1
 8003e56:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e58:	0011      	movs	r1, r2
 8003e5a:	18bb      	adds	r3, r7, r2
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a99      	ldr	r2, [pc, #612]	; (80040c4 <HAL_UART_IRQHandler+0x298>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	2298      	movs	r2, #152	; 0x98
 8003e64:	18bc      	adds	r4, r7, r2
 8003e66:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003e68:	18bb      	adds	r3, r7, r2
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d114      	bne.n	8003e9a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e70:	187b      	adds	r3, r7, r1
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2220      	movs	r2, #32
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00f      	beq.n	8003e9a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00a      	beq.n	8003e9a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <HAL_UART_IRQHandler+0x62>
 8003e8c:	e27e      	b.n	800438c <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3
      }
      return;
 8003e98:	e278      	b.n	800438c <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e9a:	2398      	movs	r3, #152	; 0x98
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d100      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x7a>
 8003ea4:	e114      	b.n	80040d0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ea6:	239c      	movs	r3, #156	; 0x9c
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003eb2:	23a0      	movs	r3, #160	; 0xa0
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a83      	ldr	r2, [pc, #524]	; (80040c8 <HAL_UART_IRQHandler+0x29c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d100      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x94>
 8003ebe:	e107      	b.n	80040d0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ec0:	23a4      	movs	r3, #164	; 0xa4
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d012      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xc6>
 8003ecc:	23a0      	movs	r3, #160	; 0xa0
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	; 0x80
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	589b      	ldr	r3, [r3, r2]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef2:	23a4      	movs	r3, #164	; 0xa4
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d011      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
 8003efe:	239c      	movs	r3, #156	; 0x9c
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	589b      	ldr	r3, [r3, r2]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f22:	23a4      	movs	r3, #164	; 0xa4
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
 8003f2e:	239c      	movs	r3, #156	; 0x9c
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4013      	ands	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	589b      	ldr	r3, [r3, r2]
 8003f48:	2202      	movs	r2, #2
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f52:	23a4      	movs	r3, #164	; 0xa4
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f5e:	23a0      	movs	r3, #160	; 0xa0
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	d105      	bne.n	8003f76 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f6a:	239c      	movs	r3, #156	; 0x9c
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	589b      	ldr	r3, [r3, r2]
 8003f84:	2208      	movs	r2, #8
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f8e:	23a4      	movs	r3, #164	; 0xa4
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x198>
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	04db      	lsls	r3, r3, #19
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	0112      	lsls	r2, r2, #4
 8003fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	589b      	ldr	r3, [r3, r2]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2280      	movs	r2, #128	; 0x80
 8003fc8:	589b      	ldr	r3, [r3, r2]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d100      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x1a4>
 8003fce:	e1df      	b.n	8004390 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fd0:	23a4      	movs	r3, #164	; 0xa4
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d00e      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	18fb      	adds	r3, r7, r3
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	589b      	ldr	r3, [r3, r2]
 8004000:	2194      	movs	r1, #148	; 0x94
 8004002:	187a      	adds	r2, r7, r1
 8004004:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2240      	movs	r2, #64	; 0x40
 800400e:	4013      	ands	r3, r2
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d004      	beq.n	800401e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004014:	187b      	adds	r3, r7, r1
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2228      	movs	r2, #40	; 0x28
 800401a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800401c:	d047      	beq.n	80040ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 fcef 	bl	8004a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	4013      	ands	r3, r2
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d137      	bne.n	80040a4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800403a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	2090      	movs	r0, #144	; 0x90
 800403e:	183a      	adds	r2, r7, r0
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	2301      	movs	r3, #1
 8004044:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004048:	f383 8810 	msr	PRIMASK, r3
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	438a      	bics	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	183b      	adds	r3, r7, r0
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004066:	f383 8810 	msr	PRIMASK, r3
}
 800406a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_UART_IRQHandler+0x2a0>)
 800407a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	0018      	movs	r0, r3
 8004082:	f7fd fe06 	bl	8001c92 <HAL_DMA_Abort_IT>
 8004086:	1e03      	subs	r3, r0, #0
 8004088:	d01a      	beq.n	80040c0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	0018      	movs	r0, r3
 8004096:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e012      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f985 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a2:	e00d      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f980 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e008      	b.n	80040c0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f97b 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	2100      	movs	r1, #0
 80040bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80040be:	e167      	b.n	8004390 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	46c0      	nop			; (mov r8, r8)
    return;
 80040c2:	e165      	b.n	8004390 <HAL_UART_IRQHandler+0x564>
 80040c4:	0000080f 	.word	0x0000080f
 80040c8:	04000120 	.word	0x04000120
 80040cc:	08004ac9 	.word	0x08004ac9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d000      	beq.n	80040da <HAL_UART_IRQHandler+0x2ae>
 80040d8:	e131      	b.n	800433e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040da:	23a4      	movs	r3, #164	; 0xa4
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	d100      	bne.n	80040e8 <HAL_UART_IRQHandler+0x2bc>
 80040e6:	e12a      	b.n	800433e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040e8:	23a0      	movs	r3, #160	; 0xa0
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2210      	movs	r2, #16
 80040f0:	4013      	ands	r3, r2
 80040f2:	d100      	bne.n	80040f6 <HAL_UART_IRQHandler+0x2ca>
 80040f4:	e123      	b.n	800433e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	4013      	ands	r3, r2
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d000      	beq.n	800410e <HAL_UART_IRQHandler+0x2e2>
 800410c:	e09b      	b.n	8004246 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	217e      	movs	r1, #126	; 0x7e
 8004118:	187b      	adds	r3, r7, r1
 800411a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800411c:	187b      	adds	r3, r7, r1
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d100      	bne.n	8004126 <HAL_UART_IRQHandler+0x2fa>
 8004124:	e136      	b.n	8004394 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2258      	movs	r2, #88	; 0x58
 800412a:	5a9b      	ldrh	r3, [r3, r2]
 800412c:	187a      	adds	r2, r7, r1
 800412e:	8812      	ldrh	r2, [r2, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d300      	bcc.n	8004136 <HAL_UART_IRQHandler+0x30a>
 8004134:	e12e      	b.n	8004394 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	187a      	adds	r2, r7, r1
 800413a:	215a      	movs	r1, #90	; 0x5a
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b20      	cmp	r3, #32
 8004148:	d06e      	beq.n	8004228 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
 8004154:	2301      	movs	r3, #1
 8004156:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	498e      	ldr	r1, [pc, #568]	; (80043a4 <HAL_UART_IRQHandler+0x578>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	677b      	str	r3, [r7, #116]	; 0x74
 8004186:	2301      	movs	r3, #1
 8004188:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2101      	movs	r1, #1
 800419e:	438a      	bics	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80041b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041b6:	673b      	str	r3, [r7, #112]	; 0x70
 80041b8:	2301      	movs	r3, #1
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2140      	movs	r1, #64	; 0x40
 80041d0:	438a      	bics	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041f6:	2301      	movs	r3, #1
 80041f8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2110      	movs	r1, #16
 800420e:	438a      	bics	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004218:	f383 8810 	msr	PRIMASK, r3
}
 800421c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	0018      	movs	r0, r3
 8004224:	f7fd fcfd 	bl	8001c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2258      	movs	r2, #88	; 0x58
 800422c:	5a9a      	ldrh	r2, [r3, r2]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	215a      	movs	r1, #90	; 0x5a
 8004232:	5a5b      	ldrh	r3, [r3, r1]
 8004234:	b29b      	uxth	r3, r3
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	0011      	movs	r1, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f000 f8bc 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004244:	e0a6      	b.n	8004394 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2258      	movs	r2, #88	; 0x58
 800424a:	5a99      	ldrh	r1, [r3, r2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	225a      	movs	r2, #90	; 0x5a
 8004250:	5a9b      	ldrh	r3, [r3, r2]
 8004252:	b29a      	uxth	r2, r3
 8004254:	208e      	movs	r0, #142	; 0x8e
 8004256:	183b      	adds	r3, r7, r0
 8004258:	1a8a      	subs	r2, r1, r2
 800425a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	225a      	movs	r2, #90	; 0x5a
 8004260:	5a9b      	ldrh	r3, [r3, r2]
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d100      	bne.n	800426a <HAL_UART_IRQHandler+0x43e>
 8004268:	e096      	b.n	8004398 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800426a:	183b      	adds	r3, r7, r0
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d100      	bne.n	8004274 <HAL_UART_IRQHandler+0x448>
 8004272:	e091      	b.n	8004398 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	60fb      	str	r3, [r7, #12]
  return(result);
 800427a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427c:	2488      	movs	r4, #136	; 0x88
 800427e:	193a      	adds	r2, r7, r4
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4943      	ldr	r1, [pc, #268]	; (80043a8 <HAL_UART_IRQHandler+0x57c>)
 800429a:	400a      	ands	r2, r1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	193b      	adds	r3, r7, r4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f383 8810 	msr	PRIMASK, r3
}
 80042aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ac:	f3ef 8310 	mrs	r3, PRIMASK
 80042b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80042b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	2484      	movs	r4, #132	; 0x84
 80042b6:	193a      	adds	r2, r7, r4
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	438a      	bics	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	193b      	adds	r3, r7, r4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f383 8810 	msr	PRIMASK, r3
}
 80042e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f6:	f3ef 8310 	mrs	r3, PRIMASK
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fe:	2480      	movs	r4, #128	; 0x80
 8004300:	193a      	adds	r2, r7, r4
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2110      	movs	r1, #16
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	193b      	adds	r3, r7, r4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	f383 8810 	msr	PRIMASK, r3
}
 800432c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800432e:	183b      	adds	r3, r7, r0
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f000 f840 	bl	80043bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800433c:	e02c      	b.n	8004398 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800433e:	23a4      	movs	r3, #164	; 0xa4
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2280      	movs	r2, #128	; 0x80
 8004346:	4013      	ands	r3, r2
 8004348:	d00f      	beq.n	800436a <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800434a:	23a0      	movs	r3, #160	; 0xa0
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	4013      	ands	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01e      	beq.n	800439c <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	0010      	movs	r0, r2
 8004366:	4798      	blx	r3
    }
    return;
 8004368:	e018      	b.n	800439c <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800436a:	23a4      	movs	r3, #164	; 0xa4
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	4013      	ands	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_UART_IRQHandler+0x572>
 8004376:	23a0      	movs	r3, #160	; 0xa0
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2240      	movs	r2, #64	; 0x40
 800437e:	4013      	ands	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 fc6e 	bl	8004c66 <UART_EndTransmit_IT>
    return;
 800438a:	e008      	b.n	800439e <HAL_UART_IRQHandler+0x572>
      return;
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	e006      	b.n	800439e <HAL_UART_IRQHandler+0x572>
    return;
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	e004      	b.n	800439e <HAL_UART_IRQHandler+0x572>
      return;
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	e002      	b.n	800439e <HAL_UART_IRQHandler+0x572>
      return;
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	e000      	b.n	800439e <HAL_UART_IRQHandler+0x572>
    return;
 800439c:	46c0      	nop			; (mov r8, r8)
  }

}
 800439e:	46bd      	mov	sp, r7
 80043a0:	b02b      	add	sp, #172	; 0xac
 80043a2:	bd90      	pop	{r4, r7, pc}
 80043a4:	fffffeff 	.word	0xfffffeff
 80043a8:	fffffedf 	.word	0xfffffedf

080043ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	000a      	movs	r2, r1
 80043c6:	1cbb      	adds	r3, r7, #2
 80043c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043dc:	231e      	movs	r3, #30
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a97      	ldr	r2, [pc, #604]	; (8004660 <UART_SetConfig+0x28c>)
 8004404:	4013      	ands	r3, r2
 8004406:	0019      	movs	r1, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a92      	ldr	r2, [pc, #584]	; (8004664 <UART_SetConfig+0x290>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a89      	ldr	r2, [pc, #548]	; (8004668 <UART_SetConfig+0x294>)
 8004442:	4013      	ands	r3, r2
 8004444:	0019      	movs	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a85      	ldr	r2, [pc, #532]	; (800466c <UART_SetConfig+0x298>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d127      	bne.n	80044aa <UART_SetConfig+0xd6>
 800445a:	4b85      	ldr	r3, [pc, #532]	; (8004670 <UART_SetConfig+0x29c>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	2203      	movs	r2, #3
 8004460:	4013      	ands	r3, r2
 8004462:	2b03      	cmp	r3, #3
 8004464:	d00d      	beq.n	8004482 <UART_SetConfig+0xae>
 8004466:	d81b      	bhi.n	80044a0 <UART_SetConfig+0xcc>
 8004468:	2b02      	cmp	r3, #2
 800446a:	d014      	beq.n	8004496 <UART_SetConfig+0xc2>
 800446c:	d818      	bhi.n	80044a0 <UART_SetConfig+0xcc>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <UART_SetConfig+0xa4>
 8004472:	2b01      	cmp	r3, #1
 8004474:	d00a      	beq.n	800448c <UART_SetConfig+0xb8>
 8004476:	e013      	b.n	80044a0 <UART_SetConfig+0xcc>
 8004478:	231f      	movs	r3, #31
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e035      	b.n	80044ee <UART_SetConfig+0x11a>
 8004482:	231f      	movs	r3, #31
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2202      	movs	r2, #2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e030      	b.n	80044ee <UART_SetConfig+0x11a>
 800448c:	231f      	movs	r3, #31
 800448e:	18fb      	adds	r3, r7, r3
 8004490:	2204      	movs	r2, #4
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e02b      	b.n	80044ee <UART_SetConfig+0x11a>
 8004496:	231f      	movs	r3, #31
 8004498:	18fb      	adds	r3, r7, r3
 800449a:	2208      	movs	r2, #8
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e026      	b.n	80044ee <UART_SetConfig+0x11a>
 80044a0:	231f      	movs	r3, #31
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2210      	movs	r2, #16
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e021      	b.n	80044ee <UART_SetConfig+0x11a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a71      	ldr	r2, [pc, #452]	; (8004674 <UART_SetConfig+0x2a0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d104      	bne.n	80044be <UART_SetConfig+0xea>
 80044b4:	231f      	movs	r3, #31
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e017      	b.n	80044ee <UART_SetConfig+0x11a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6d      	ldr	r2, [pc, #436]	; (8004678 <UART_SetConfig+0x2a4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d104      	bne.n	80044d2 <UART_SetConfig+0xfe>
 80044c8:	231f      	movs	r3, #31
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x11a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a69      	ldr	r2, [pc, #420]	; (800467c <UART_SetConfig+0x2a8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d104      	bne.n	80044e6 <UART_SetConfig+0x112>
 80044dc:	231f      	movs	r3, #31
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e003      	b.n	80044ee <UART_SetConfig+0x11a>
 80044e6:	231f      	movs	r3, #31
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2210      	movs	r2, #16
 80044ec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69da      	ldr	r2, [r3, #28]
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d15d      	bne.n	80045b6 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80044fa:	231f      	movs	r3, #31
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d015      	beq.n	8004530 <UART_SetConfig+0x15c>
 8004504:	dc18      	bgt.n	8004538 <UART_SetConfig+0x164>
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00d      	beq.n	8004526 <UART_SetConfig+0x152>
 800450a:	dc15      	bgt.n	8004538 <UART_SetConfig+0x164>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <UART_SetConfig+0x142>
 8004510:	2b02      	cmp	r3, #2
 8004512:	d005      	beq.n	8004520 <UART_SetConfig+0x14c>
 8004514:	e010      	b.n	8004538 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004516:	f7fe fa07 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800451a:	0003      	movs	r3, r0
 800451c:	61bb      	str	r3, [r7, #24]
        break;
 800451e:	e012      	b.n	8004546 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b57      	ldr	r3, [pc, #348]	; (8004680 <UART_SetConfig+0x2ac>)
 8004522:	61bb      	str	r3, [r7, #24]
        break;
 8004524:	e00f      	b.n	8004546 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fe f98f 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800452a:	0003      	movs	r3, r0
 800452c:	61bb      	str	r3, [r7, #24]
        break;
 800452e:	e00a      	b.n	8004546 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	61bb      	str	r3, [r7, #24]
        break;
 8004536:	e006      	b.n	8004546 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800453c:	231e      	movs	r3, #30
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
        break;
 8004544:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d100      	bne.n	800454e <UART_SetConfig+0x17a>
 800454c:	e07b      	b.n	8004646 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	005a      	lsls	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	18d2      	adds	r2, r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	0019      	movs	r1, r3
 8004560:	0010      	movs	r0, r2
 8004562:	f7fb fddb 	bl	800011c <__udivsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	b29b      	uxth	r3, r3
 800456a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b0f      	cmp	r3, #15
 8004570:	d91c      	bls.n	80045ac <UART_SetConfig+0x1d8>
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	025b      	lsls	r3, r3, #9
 8004578:	429a      	cmp	r2, r3
 800457a:	d217      	bcs.n	80045ac <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	b29a      	uxth	r2, r3
 8004580:	200e      	movs	r0, #14
 8004582:	183b      	adds	r3, r7, r0
 8004584:	210f      	movs	r1, #15
 8004586:	438a      	bics	r2, r1
 8004588:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	b29b      	uxth	r3, r3
 8004590:	2207      	movs	r2, #7
 8004592:	4013      	ands	r3, r2
 8004594:	b299      	uxth	r1, r3
 8004596:	183b      	adds	r3, r7, r0
 8004598:	183a      	adds	r2, r7, r0
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	183a      	adds	r2, r7, r0
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e04c      	b.n	8004646 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80045ac:	231e      	movs	r3, #30
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e047      	b.n	8004646 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b6:	231f      	movs	r3, #31
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d015      	beq.n	80045ec <UART_SetConfig+0x218>
 80045c0:	dc18      	bgt.n	80045f4 <UART_SetConfig+0x220>
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d00d      	beq.n	80045e2 <UART_SetConfig+0x20e>
 80045c6:	dc15      	bgt.n	80045f4 <UART_SetConfig+0x220>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <UART_SetConfig+0x1fe>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d005      	beq.n	80045dc <UART_SetConfig+0x208>
 80045d0:	e010      	b.n	80045f4 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d2:	f7fe f9a9 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 80045d6:	0003      	movs	r3, r0
 80045d8:	61bb      	str	r3, [r7, #24]
        break;
 80045da:	e012      	b.n	8004602 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045dc:	4b28      	ldr	r3, [pc, #160]	; (8004680 <UART_SetConfig+0x2ac>)
 80045de:	61bb      	str	r3, [r7, #24]
        break;
 80045e0:	e00f      	b.n	8004602 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e2:	f7fe f931 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80045e6:	0003      	movs	r3, r0
 80045e8:	61bb      	str	r3, [r7, #24]
        break;
 80045ea:	e00a      	b.n	8004602 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	61bb      	str	r3, [r7, #24]
        break;
 80045f2:	e006      	b.n	8004602 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045f8:	231e      	movs	r3, #30
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
        break;
 8004600:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01e      	beq.n	8004646 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	085a      	lsrs	r2, r3, #1
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	18d2      	adds	r2, r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	0019      	movs	r1, r3
 8004618:	0010      	movs	r0, r2
 800461a:	f7fb fd7f 	bl	800011c <__udivsi3>
 800461e:	0003      	movs	r3, r0
 8004620:	b29b      	uxth	r3, r3
 8004622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d909      	bls.n	800463e <UART_SetConfig+0x26a>
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	025b      	lsls	r3, r3, #9
 8004630:	429a      	cmp	r2, r3
 8004632:	d204      	bcs.n	800463e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	60da      	str	r2, [r3, #12]
 800463c:	e003      	b.n	8004646 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800463e:	231e      	movs	r3, #30
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004652:	231e      	movs	r3, #30
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
}
 8004658:	0018      	movs	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	b008      	add	sp, #32
 800465e:	bd80      	pop	{r7, pc}
 8004660:	efff69f3 	.word	0xefff69f3
 8004664:	ffffcfff 	.word	0xffffcfff
 8004668:	fffff4ff 	.word	0xfffff4ff
 800466c:	40013800 	.word	0x40013800
 8004670:	40021000 	.word	0x40021000
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00
 8004680:	007a1200 	.word	0x007a1200

08004684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2201      	movs	r2, #1
 8004692:	4013      	ands	r3, r2
 8004694:	d00b      	beq.n	80046ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a4a      	ldr	r2, [pc, #296]	; (80047c8 <UART_AdvFeatureConfig+0x144>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d00b      	beq.n	80046d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a43      	ldr	r2, [pc, #268]	; (80047cc <UART_AdvFeatureConfig+0x148>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2204      	movs	r2, #4
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a3b      	ldr	r2, [pc, #236]	; (80047d0 <UART_AdvFeatureConfig+0x14c>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2208      	movs	r2, #8
 80046f8:	4013      	ands	r3, r2
 80046fa:	d00b      	beq.n	8004714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <UART_AdvFeatureConfig+0x150>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2210      	movs	r2, #16
 800471a:	4013      	ands	r3, r2
 800471c:	d00b      	beq.n	8004736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <UART_AdvFeatureConfig+0x154>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	2220      	movs	r2, #32
 800473c:	4013      	ands	r3, r2
 800473e:	d00b      	beq.n	8004758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <UART_AdvFeatureConfig+0x158>)
 8004748:	4013      	ands	r3, r2
 800474a:	0019      	movs	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	4013      	ands	r3, r2
 8004760:	d01d      	beq.n	800479e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a1d      	ldr	r2, [pc, #116]	; (80047e0 <UART_AdvFeatureConfig+0x15c>)
 800476a:	4013      	ands	r3, r2
 800476c:	0019      	movs	r1, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	035b      	lsls	r3, r3, #13
 8004782:	429a      	cmp	r2, r3
 8004784:	d10b      	bne.n	800479e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <UART_AdvFeatureConfig+0x160>)
 800478e:	4013      	ands	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	4013      	ands	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <UART_AdvFeatureConfig+0x164>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	0019      	movs	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b002      	add	sp, #8
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	fffdffff 	.word	0xfffdffff
 80047cc:	fffeffff 	.word	0xfffeffff
 80047d0:	fffbffff 	.word	0xfffbffff
 80047d4:	ffff7fff 	.word	0xffff7fff
 80047d8:	ffffefff 	.word	0xffffefff
 80047dc:	ffffdfff 	.word	0xffffdfff
 80047e0:	ffefffff 	.word	0xffefffff
 80047e4:	ff9fffff 	.word	0xff9fffff
 80047e8:	fff7ffff 	.word	0xfff7ffff

080047ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	2100      	movs	r1, #0
 80047fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047fc:	f7fd f95a 	bl	8001ab4 <HAL_GetTick>
 8004800:	0003      	movs	r3, r0
 8004802:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2208      	movs	r2, #8
 800480c:	4013      	ands	r3, r2
 800480e:	2b08      	cmp	r3, #8
 8004810:	d10c      	bne.n	800482c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2280      	movs	r2, #128	; 0x80
 8004816:	0391      	lsls	r1, r2, #14
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <UART_CheckIdleState+0x8c>)
 800481c:	9200      	str	r2, [sp, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	f000 f82c 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d001      	beq.n	800482c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e021      	b.n	8004870 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2204      	movs	r2, #4
 8004834:	4013      	ands	r3, r2
 8004836:	2b04      	cmp	r3, #4
 8004838:	d10c      	bne.n	8004854 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	03d1      	lsls	r1, r2, #15
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <UART_CheckIdleState+0x8c>)
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	f000 f818 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e00d      	b.n	8004870 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2274      	movs	r2, #116	; 0x74
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}
 8004878:	01ffffff 	.word	0x01ffffff

0800487c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b094      	sub	sp, #80	; 0x50
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	1dfb      	adds	r3, r7, #7
 800488a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488c:	e0a3      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004890:	3301      	adds	r3, #1
 8004892:	d100      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004894:	e09f      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fd f90d 	bl	8001ab4 <HAL_GetTick>
 800489a:	0002      	movs	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <UART_WaitOnFlagUntilTimeout+0x30>
 80048a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13d      	bne.n	8004928 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ac:	f3ef 8310 	mrs	r3, PRIMASK
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
 80048b6:	2301      	movs	r3, #1
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	494c      	ldr	r1, [pc, #304]	; (8004a00 <UART_WaitOnFlagUntilTimeout+0x184>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	f383 8810 	msr	PRIMASK, r3
}
 80048dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048de:	f3ef 8310 	mrs	r3, PRIMASK
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	643b      	str	r3, [r7, #64]	; 0x40
 80048e8:	2301      	movs	r3, #1
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2101      	movs	r1, #1
 8004900:	438a      	bics	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2274      	movs	r2, #116	; 0x74
 8004920:	2100      	movs	r1, #0
 8004922:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e067      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2204      	movs	r2, #4
 8004930:	4013      	ands	r3, r2
 8004932:	d050      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	401a      	ands	r2, r3
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	429a      	cmp	r2, r3
 8004946:	d146      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	0112      	lsls	r2, r2, #4
 8004950:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004952:	f3ef 8310 	mrs	r3, PRIMASK
 8004956:	613b      	str	r3, [r7, #16]
  return(result);
 8004958:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f383 8810 	msr	PRIMASK, r3
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4923      	ldr	r1, [pc, #140]	; (8004a00 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004974:	400a      	ands	r2, r1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004984:	f3ef 8310 	mrs	r3, PRIMASK
 8004988:	61fb      	str	r3, [r7, #28]
  return(result);
 800498a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
 800498e:	2301      	movs	r3, #1
 8004990:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	f383 8810 	msr	PRIMASK, r3
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	438a      	bics	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f383 8810 	msr	PRIMASK, r3
}
 80049b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2280      	movs	r2, #128	; 0x80
 80049c6:	2120      	movs	r1, #32
 80049c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2274      	movs	r2, #116	; 0x74
 80049ce:	2100      	movs	r1, #0
 80049d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e010      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	425a      	negs	r2, r3
 80049e6:	4153      	adcs	r3, r2
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	001a      	movs	r2, r3
 80049ec:	1dfb      	adds	r3, r7, #7
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d100      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80049f4:	e74b      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b014      	add	sp, #80	; 0x50
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	fffffe5f 	.word	0xfffffe5f

08004a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	; 0x38
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	617b      	str	r3, [r7, #20]
  return(result);
 8004a12:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	f383 8810 	msr	PRIMASK, r3
}
 8004a20:	46c0      	nop			; (mov r8, r8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4925      	ldr	r1, [pc, #148]	; (8004ac4 <UART_EndRxTransfer+0xc0>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f383 8810 	msr	PRIMASK, r3
}
 8004a3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a42:	623b      	str	r3, [r7, #32]
  return(result);
 8004a44:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
 8004a48:	2301      	movs	r3, #1
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	438a      	bics	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d118      	bne.n	8004aaa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a78:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a82:	2301      	movs	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2110      	movs	r1, #16
 8004a9a:	438a      	bics	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f383 8810 	msr	PRIMASK, r3
}
 8004aa8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004abc:	46c0      	nop			; (mov r8, r8)
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b00e      	add	sp, #56	; 0x38
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	fffffedf 	.word	0xfffffedf

08004ac8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	225a      	movs	r2, #90	; 0x5a
 8004ada:	2100      	movs	r1, #0
 8004adc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2252      	movs	r2, #82	; 0x52
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff fc5f 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b004      	add	sp, #16
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08a      	sub	sp, #40	; 0x28
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d14d      	bne.n	8004ba2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2252      	movs	r2, #82	; 0x52
 8004b0a:	5a9b      	ldrh	r3, [r3, r2]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d132      	bne.n	8004b78 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b12:	f3ef 8310 	mrs	r3, PRIMASK
 8004b16:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f383 8810 	msr	PRIMASK, r3
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	438a      	bics	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f383 8810 	msr	PRIMASK, r3
}
 8004b42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b44:	f3ef 8310 	mrs	r3, PRIMASK
 8004b48:	617b      	str	r3, [r7, #20]
  return(result);
 8004b4a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f383 8810 	msr	PRIMASK, r3
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f383 8810 	msr	PRIMASK, r3
}
 8004b74:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b76:	e014      	b.n	8004ba2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	b292      	uxth	r2, r2
 8004b84:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2252      	movs	r2, #82	; 0x52
 8004b94:	5a9b      	ldrh	r3, [r3, r2]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b299      	uxth	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2252      	movs	r2, #82	; 0x52
 8004ba0:	5299      	strh	r1, [r3, r2]
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b00a      	add	sp, #40	; 0x28
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b08c      	sub	sp, #48	; 0x30
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bb6:	2b21      	cmp	r3, #33	; 0x21
 8004bb8:	d151      	bne.n	8004c5e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2252      	movs	r2, #82	; 0x52
 8004bbe:	5a9b      	ldrh	r3, [r3, r2]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d132      	bne.n	8004c2c <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f383 8810 	msr	PRIMASK, r3
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	438a      	bics	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f383 8810 	msr	PRIMASK, r3
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bfe:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	2301      	movs	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2140      	movs	r1, #64	; 0x40
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c2a:	e018      	b.n	8004c5e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	05d2      	lsls	r2, r2, #23
 8004c3c:	0dd2      	lsrs	r2, r2, #23
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	1c9a      	adds	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2252      	movs	r2, #82	; 0x52
 8004c50:	5a9b      	ldrh	r3, [r3, r2]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b299      	uxth	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2252      	movs	r2, #82	; 0x52
 8004c5c:	5299      	strh	r1, [r3, r2]
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b00c      	add	sp, #48	; 0x30
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b086      	sub	sp, #24
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c74:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2140      	movs	r1, #64	; 0x40
 8004c90:	438a      	bics	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f7fc fa36 	bl	8001120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc2:	f3ef 8305 	mrs	r3, IPSR
 8004cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <osKernelInitialize+0x2e>
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <osKernelInitialize+0x54>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d103      	bne.n	8004cea <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004ce2:	2306      	movs	r3, #6
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e00c      	b.n	8004d04 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <osKernelInitialize+0x54>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <osKernelInitialize+0x54>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	e002      	b.n	8004d04 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	425b      	negs	r3, r3
 8004d02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b004      	add	sp, #16
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	2000026c 	.word	0x2000026c

08004d14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1a:	f3ef 8305 	mrs	r3, IPSR
 8004d1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d26:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2a:	607b      	str	r3, [r7, #4]
  return(result);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <osKernelStart+0x2e>
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <osKernelStart+0x58>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d103      	bne.n	8004d42 <osKernelStart+0x2e>
    stat = osErrorISR;
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e00e      	b.n	8004d60 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <osKernelStart+0x58>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d107      	bne.n	8004d5a <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <osKernelStart+0x58>)
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004d50:	f001 fb60 	bl	8006414 <vTaskStartScheduler>
      stat = osOK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e002      	b.n	8004d60 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	425b      	negs	r3, r3
 8004d5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d60:	68fb      	ldr	r3, [r7, #12]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	2000026c 	.word	0x2000026c

08004d70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b090      	sub	sp, #64	; 0x40
 8004d74:	af04      	add	r7, sp, #16
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d80:	f3ef 8305 	mrs	r3, IPSR
 8004d84:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d000      	beq.n	8004d8e <osThreadNew+0x1e>
 8004d8c:	e090      	b.n	8004eb0 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d92:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <osThreadNew+0x34>
 8004d9a:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <osThreadNew+0x14c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d100      	bne.n	8004da4 <osThreadNew+0x34>
 8004da2:	e085      	b.n	8004eb0 <osThreadNew+0x140>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d100      	bne.n	8004dac <osThreadNew+0x3c>
 8004daa:	e081      	b.n	8004eb0 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004db0:	2318      	movs	r3, #24
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8004db4:	2117      	movs	r1, #23
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	425b      	negs	r3, r3
 8004dc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d044      	beq.n	8004e56 <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <osThreadNew+0x6a>
        name = attr->name;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <osThreadNew+0x8e>
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	2b38      	cmp	r3, #56	; 0x38
 8004df2:	d804      	bhi.n	8004dfe <osThreadNew+0x8e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d001      	beq.n	8004e02 <osThreadNew+0x92>
        return (NULL);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e057      	b.n	8004eb2 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <osThreadNew+0xc8>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2bbb      	cmp	r3, #187	; 0xbb
 8004e20:	d90a      	bls.n	8004e38 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d006      	beq.n	8004e38 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <osThreadNew+0xc8>
        mem = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	e010      	b.n	8004e5a <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10c      	bne.n	8004e5a <osThreadNew+0xea>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <osThreadNew+0xea>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <osThreadNew+0xea>
          mem = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	e001      	b.n	8004e5a <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d112      	bne.n	8004e86 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e68:	68bd      	ldr	r5, [r7, #8]
 8004e6a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004e6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	9302      	str	r3, [sp, #8]
 8004e72:	9201      	str	r2, [sp, #4]
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	002b      	movs	r3, r5
 8004e7a:	0022      	movs	r2, r4
 8004e7c:	f001 f915 	bl	80060aa <xTaskCreateStatic>
 8004e80:	0003      	movs	r3, r0
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e014      	b.n	8004eb0 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d111      	bne.n	8004eb0 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68bc      	ldr	r4, [r7, #8]
 8004e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	2310      	movs	r3, #16
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	0023      	movs	r3, r4
 8004ea2:	f001 f945 	bl	8006130 <xTaskCreate>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <osThreadNew+0x140>
          hTask = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004eb0:	693b      	ldr	r3, [r7, #16]
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b00c      	add	sp, #48	; 0x30
 8004eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	2000026c 	.word	0x2000026c

08004ec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec8:	f3ef 8305 	mrs	r3, IPSR
 8004ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <osDelay+0x30>
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <osDelay+0x4c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d103      	bne.n	8004ef0 <osDelay+0x30>
    stat = osErrorISR;
 8004ee8:	2306      	movs	r3, #6
 8004eea:	425b      	negs	r3, r3
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	e008      	b.n	8004f02 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <osDelay+0x42>
      vTaskDelay(ticks);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f001 fa63 	bl	80063c8 <vTaskDelay>
    }
  }

  return (stat);
 8004f02:	697b      	ldr	r3, [r7, #20]
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b006      	add	sp, #24
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	2000026c 	.word	0x2000026c

08004f10 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08c      	sub	sp, #48	; 0x30
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f20:	f3ef 8305 	mrs	r3, IPSR
 8004f24:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d000      	beq.n	8004f2e <osSemaphoreNew+0x1e>
 8004f2c:	e08a      	b.n	8005044 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f32:	617b      	str	r3, [r7, #20]
  return(result);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <osSemaphoreNew+0x34>
 8004f3a:	4b45      	ldr	r3, [pc, #276]	; (8005050 <osSemaphoreNew+0x140>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d100      	bne.n	8004f44 <osSemaphoreNew+0x34>
 8004f42:	e07f      	b.n	8005044 <osSemaphoreNew+0x134>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d100      	bne.n	8004f4c <osSemaphoreNew+0x3c>
 8004f4a:	e07b      	b.n	8005044 <osSemaphoreNew+0x134>
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d900      	bls.n	8004f56 <osSemaphoreNew+0x46>
 8004f54:	e076      	b.n	8005044 <osSemaphoreNew+0x134>
    mem = -1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	425b      	negs	r3, r3
 8004f5a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d015      	beq.n	8004f8e <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d006      	beq.n	8004f78 <osSemaphoreNew+0x68>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b4f      	cmp	r3, #79	; 0x4f
 8004f70:	d902      	bls.n	8004f78 <osSemaphoreNew+0x68>
        mem = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	e00c      	b.n	8004f92 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <osSemaphoreNew+0x82>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <osSemaphoreNew+0x82>
          mem = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	e001      	b.n	8004f92 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	3301      	adds	r3, #1
 8004f96:	d055      	beq.n	8005044 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d12b      	bne.n	8004ff6 <osSemaphoreNew+0xe6>
        if (mem == 1) {
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10b      	bne.n	8004fbc <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	9200      	str	r2, [sp, #0]
 8004fac:	2200      	movs	r2, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f000 fa28 	bl	8005406 <xQueueGenericCreateStatic>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	e006      	b.n	8004fca <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	f000 fa6b 	bl	800549c <xQueueGenericCreate>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d027      	beq.n	8005020 <osSemaphoreNew+0x110>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d024      	beq.n	8005020 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f000 fb03 	bl	80055e8 <xQueueGenericSend>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d01b      	beq.n	8005020 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 fe88 	bl	8005d00 <vQueueDelete>
            hSemaphore = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	e014      	b.n	8005020 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d109      	bne.n	8005010 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	0018      	movs	r0, r3
 8005006:	f000 faa6 	bl	8005556 <xQueueCreateCountingSemaphoreStatic>
 800500a:	0003      	movs	r3, r0
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
 800500e:	e007      	b.n	8005020 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	0011      	movs	r1, r2
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fac3 	bl	80055a2 <xQueueCreateCountingSemaphore>
 800501c:	0003      	movs	r3, r0
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00e      	beq.n	8005044 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <osSemaphoreNew+0x124>
          name = attr->name;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e001      	b.n	8005038 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f000 ffae 	bl	8005fa0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005046:	0018      	movs	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	b00a      	add	sp, #40	; 0x28
 800504c:	bd80      	pop	{r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	2000026c 	.word	0x2000026c

08005054 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800506c:	2304      	movs	r3, #4
 800506e:	425b      	negs	r3, r3
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	e043      	b.n	80050fc <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005074:	f3ef 8305 	mrs	r3, IPSR
 8005078:	617b      	str	r3, [r7, #20]
  return(result);
 800507a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	613b      	str	r3, [r7, #16]
  return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d022      	beq.n	80050d2 <osSemaphoreAcquire+0x7e>
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <osSemaphoreAcquire+0xb4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d11e      	bne.n	80050d2 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800509a:	2304      	movs	r3, #4
 800509c:	425b      	negs	r3, r3
 800509e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80050a0:	e02b      	b.n	80050fa <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80050a6:	230c      	movs	r3, #12
 80050a8:	18fa      	adds	r2, r7, r3
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2100      	movs	r1, #0
 80050ae:	0018      	movs	r0, r3
 80050b0:	f000 fdc3 	bl	8005c3a <xQueueReceiveFromISR>
 80050b4:	0003      	movs	r3, r0
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d003      	beq.n	80050c2 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 80050ba:	2303      	movs	r3, #3
 80050bc:	425b      	negs	r3, r3
 80050be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80050c0:	e01b      	b.n	80050fa <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d018      	beq.n	80050fa <osSemaphoreAcquire+0xa6>
 80050c8:	4b10      	ldr	r3, [pc, #64]	; (800510c <osSemaphoreAcquire+0xb8>)
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	0552      	lsls	r2, r2, #21
 80050ce:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 80050d0:	e013      	b.n	80050fa <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	0011      	movs	r1, r2
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 fcd4 	bl	8005a86 <xQueueSemaphoreTake>
 80050de:	0003      	movs	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d00b      	beq.n	80050fc <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 80050ea:	2302      	movs	r3, #2
 80050ec:	425b      	negs	r3, r3
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e004      	b.n	80050fc <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 80050f2:	2303      	movs	r3, #3
 80050f4:	425b      	negs	r3, r3
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	e000      	b.n	80050fc <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 80050fa:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 80050fc:	69fb      	ldr	r3, [r7, #28]
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b008      	add	sp, #32
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	2000026c 	.word	0x2000026c
 800510c:	e000ed04 	.word	0xe000ed04

08005110 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800511c:	2300      	movs	r3, #0
 800511e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005126:	2304      	movs	r3, #4
 8005128:	425b      	negs	r3, r3
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e035      	b.n	800519a <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800512e:	f3ef 8305 	mrs	r3, IPSR
 8005132:	617b      	str	r3, [r7, #20]
  return(result);
 8005134:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513a:	f3ef 8310 	mrs	r3, PRIMASK
 800513e:	613b      	str	r3, [r7, #16]
  return(result);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <osSemaphoreRelease+0x6e>
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <osSemaphoreRelease+0x94>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d117      	bne.n	800517e <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005152:	230c      	movs	r3, #12
 8005154:	18fa      	adds	r2, r7, r3
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	0011      	movs	r1, r2
 800515a:	0018      	movs	r0, r3
 800515c:	f000 fb79 	bl	8005852 <xQueueGiveFromISR>
 8005160:	0003      	movs	r3, r0
 8005162:	2b01      	cmp	r3, #1
 8005164:	d003      	beq.n	800516e <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 8005166:	2303      	movs	r3, #3
 8005168:	425b      	negs	r3, r3
 800516a:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800516c:	e014      	b.n	8005198 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d011      	beq.n	8005198 <osSemaphoreRelease+0x88>
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <osSemaphoreRelease+0x98>)
 8005176:	2280      	movs	r2, #128	; 0x80
 8005178:	0552      	lsls	r2, r2, #21
 800517a:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800517c:	e00c      	b.n	8005198 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800517e:	69b8      	ldr	r0, [r7, #24]
 8005180:	2300      	movs	r3, #0
 8005182:	2200      	movs	r2, #0
 8005184:	2100      	movs	r1, #0
 8005186:	f000 fa2f 	bl	80055e8 <xQueueGenericSend>
 800518a:	0003      	movs	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d004      	beq.n	800519a <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 8005190:	2303      	movs	r3, #3
 8005192:	425b      	negs	r3, r3
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e000      	b.n	800519a <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005198:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 800519a:	69fb      	ldr	r3, [r7, #28]
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b008      	add	sp, #32
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	2000026c 	.word	0x2000026c
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <vApplicationGetIdleTaskMemory+0x28>)
 80051bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4a05      	ldr	r2, [pc, #20]	; (80051d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	601a      	str	r2, [r3, #0]
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	20000270 	.word	0x20000270
 80051d8:	2000032c 	.word	0x2000032c

080051dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a06      	ldr	r2, [pc, #24]	; (8005204 <vApplicationGetTimerTaskMemory+0x28>)
 80051ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4a05      	ldr	r2, [pc, #20]	; (8005208 <vApplicationGetTimerTaskMemory+0x2c>)
 80051f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}
 8005204:	2000052c 	.word	0x2000052c
 8005208:	200005e8 	.word	0x200005e8

0800520c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3308      	adds	r3, #8
 8005218:	001a      	movs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	4252      	negs	r2, r2
 8005224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3308      	adds	r3, #8
 800522a:	001a      	movs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3308      	adds	r3, #8
 8005234:	001a      	movs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b002      	add	sp, #8
 8005246:	bd80      	pop	{r7, pc}

08005248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	46bd      	mov	sp, r7
 800525a:	b002      	add	sp, #8
 800525c:	bd80      	pop	{r7, pc}

0800525e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b004      	add	sp, #16
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d103      	bne.n	80052c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e00c      	b.n	80052da <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3308      	adds	r3, #8
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	e002      	b.n	80052ce <vListInsert+0x2c>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d2f6      	bcs.n	80052c8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b004      	add	sp, #16
 800530c:	bd80      	pop	{r7, pc}

0800530e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6852      	ldr	r2, [r2, #4]
 800532e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d103      	bne.n	8005342 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}

0800535e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <xQueueGenericReset+0x18>
 8005372:	b672      	cpsid	i
 8005374:	e7fe      	b.n	8005374 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8005376:	f002 f96b 	bl	8007650 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	434b      	muls	r3, r1
 8005388:	18d2      	adds	r2, r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	1e59      	subs	r1, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	434b      	muls	r3, r1
 80053ac:	18d2      	adds	r2, r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2244      	movs	r2, #68	; 0x44
 80053b6:	21ff      	movs	r1, #255	; 0xff
 80053b8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2245      	movs	r2, #69	; 0x45
 80053be:	21ff      	movs	r1, #255	; 0xff
 80053c0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d013      	beq.n	80053f8 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3310      	adds	r3, #16
 80053d4:	0018      	movs	r0, r3
 80053d6:	f001 fa73 	bl	80068c0 <xTaskRemoveFromEventList>
 80053da:	1e03      	subs	r3, r0, #0
 80053dc:	d00c      	beq.n	80053f8 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053de:	f002 f927 	bl	8007630 <vPortYield>
 80053e2:	e009      	b.n	80053f8 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	3310      	adds	r3, #16
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff ff0f 	bl	800520c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3324      	adds	r3, #36	; 0x24
 80053f2:	0018      	movs	r0, r3
 80053f4:	f7ff ff0a 	bl	800520c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053f8:	f002 f93c 	bl	8007674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053fc:	2301      	movs	r3, #1
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}

08005406 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005406:	b590      	push	{r4, r7, lr}
 8005408:	b089      	sub	sp, #36	; 0x24
 800540a:	af02      	add	r7, sp, #8
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueGenericCreateStatic+0x18>
 800541a:	b672      	cpsid	i
 800541c:	e7fe      	b.n	800541c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <xQueueGenericCreateStatic+0x22>
 8005424:	b672      	cpsid	i
 8005426:	e7fe      	b.n	8005426 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <xQueueGenericCreateStatic+0x2e>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <xQueueGenericCreateStatic+0x32>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <xQueueGenericCreateStatic+0x34>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xQueueGenericCreateStatic+0x3c>
 800543e:	b672      	cpsid	i
 8005440:	e7fe      	b.n	8005440 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <xQueueGenericCreateStatic+0x48>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <xQueueGenericCreateStatic+0x4c>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueGenericCreateStatic+0x4e>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericCreateStatic+0x56>
 8005458:	b672      	cpsid	i
 800545a:	e7fe      	b.n	800545a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800545c:	2350      	movs	r3, #80	; 0x50
 800545e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2b50      	cmp	r3, #80	; 0x50
 8005464:	d001      	beq.n	800546a <xQueueGenericCreateStatic+0x64>
 8005466:	b672      	cpsid	i
 8005468:	e7fe      	b.n	8005468 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00e      	beq.n	8005492 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2246      	movs	r2, #70	; 0x46
 8005478:	2101      	movs	r1, #1
 800547a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800547c:	2328      	movs	r3, #40	; 0x28
 800547e:	18fb      	adds	r3, r7, r3
 8005480:	781c      	ldrb	r4, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	0023      	movs	r3, r4
 800548e:	f000 f83b 	bl	8005508 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005492:	697b      	ldr	r3, [r7, #20]
	}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b007      	add	sp, #28
 800549a:	bd90      	pop	{r4, r7, pc}

0800549c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b08b      	sub	sp, #44	; 0x2c
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <xQueueGenericCreate+0x18>
 80054b0:	b672      	cpsid	i
 80054b2:	e7fe      	b.n	80054b2 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e003      	b.n	80054c8 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4353      	muls	r3, r2
 80054c6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3350      	adds	r3, #80	; 0x50
 80054cc:	0018      	movs	r0, r3
 80054ce:	f002 f957 	bl	8007780 <pvPortMalloc>
 80054d2:	0003      	movs	r3, r0
 80054d4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	3350      	adds	r3, #80	; 0x50
 80054e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	2246      	movs	r2, #70	; 0x46
 80054e6:	2100      	movs	r1, #0
 80054e8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054ea:	1dfb      	adds	r3, r7, #7
 80054ec:	781c      	ldrb	r4, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	0023      	movs	r3, r4
 80054fa:	f000 f805 	bl	8005508 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054fe:	69bb      	ldr	r3, [r7, #24]
	}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b009      	add	sp, #36	; 0x24
 8005506:	bd90      	pop	{r4, r7, pc}

08005508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	001a      	movs	r2, r3
 8005516:	1cfb      	adds	r3, r7, #3
 8005518:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e002      	b.n	800552e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2101      	movs	r1, #1
 800553e:	0018      	movs	r0, r3
 8005540:	f7ff ff0d 	bl	800535e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	1cfa      	adds	r2, r7, #3
 8005548:	214c      	movs	r1, #76	; 0x4c
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b004      	add	sp, #16
 8005554:	bd80      	pop	{r7, pc}

08005556 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005556:	b580      	push	{r7, lr}
 8005558:	b088      	sub	sp, #32
 800555a:	af02      	add	r7, sp, #8
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <xQueueCreateCountingSemaphoreStatic+0x16>
 8005568:	b672      	cpsid	i
 800556a:	e7fe      	b.n	800556a <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	429a      	cmp	r2, r3
 8005572:	d901      	bls.n	8005578 <xQueueCreateCountingSemaphoreStatic+0x22>
 8005574:	b672      	cpsid	i
 8005576:	e7fe      	b.n	8005576 <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	2202      	movs	r2, #2
 800557e:	9200      	str	r2, [sp, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	f7ff ff3f 	bl	8005406 <xQueueGenericCreateStatic>
 8005588:	0003      	movs	r3, r0
 800558a:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005598:	697b      	ldr	r3, [r7, #20]
	}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b006      	add	sp, #24
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <xQueueCreateCountingSemaphore+0x14>
 80055b2:	b672      	cpsid	i
 80055b4:	e7fe      	b.n	80055b4 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d901      	bls.n	80055c2 <xQueueCreateCountingSemaphore+0x20>
 80055be:	b672      	cpsid	i
 80055c0:	e7fe      	b.n	80055c0 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	2100      	movs	r1, #0
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7ff ff67 	bl	800549c <xQueueGenericCreate>
 80055ce:	0003      	movs	r3, r0
 80055d0:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055de:	68fb      	ldr	r3, [r7, #12]
	}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b004      	add	sp, #16
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08a      	sub	sp, #40	; 0x28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueGenericSend+0x20>
 8005604:	b672      	cpsid	i
 8005606:	e7fe      	b.n	8005606 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <xQueueGenericSend+0x2e>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueGenericSend+0x32>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <xQueueGenericSend+0x34>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <xQueueGenericSend+0x3c>
 8005620:	b672      	cpsid	i
 8005622:	e7fe      	b.n	8005622 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d103      	bne.n	8005632 <xQueueGenericSend+0x4a>
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <xQueueGenericSend+0x4e>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericSend+0x50>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <xQueueGenericSend+0x58>
 800563c:	b672      	cpsid	i
 800563e:	e7fe      	b.n	800563e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005640:	f001 fadc 	bl	8006bfc <xTaskGetSchedulerState>
 8005644:	1e03      	subs	r3, r0, #0
 8005646:	d102      	bne.n	800564e <xQueueGenericSend+0x66>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <xQueueGenericSend+0x6a>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <xQueueGenericSend+0x6c>
 8005652:	2300      	movs	r3, #0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <xQueueGenericSend+0x74>
 8005658:	b672      	cpsid	i
 800565a:	e7fe      	b.n	800565a <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800565c:	f001 fff8 	bl	8007650 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <xQueueGenericSend+0x8a>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d11e      	bne.n	80056b0 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	0018      	movs	r0, r3
 800567a:	f000 fb73 	bl	8005d64 <prvCopyDataToQueue>
 800567e:	0003      	movs	r3, r0
 8005680:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d009      	beq.n	800569e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	3324      	adds	r3, #36	; 0x24
 800568e:	0018      	movs	r0, r3
 8005690:	f001 f916 	bl	80068c0 <xTaskRemoveFromEventList>
 8005694:	1e03      	subs	r3, r0, #0
 8005696:	d007      	beq.n	80056a8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005698:	f001 ffca 	bl	8007630 <vPortYield>
 800569c:	e004      	b.n	80056a8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056a4:	f001 ffc4 	bl	8007630 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056a8:	f001 ffe4 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e05b      	b.n	8005768 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b6:	f001 ffdd 	bl	8007674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e054      	b.n	8005768 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d106      	bne.n	80056d2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c4:	2314      	movs	r3, #20
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	0018      	movs	r0, r3
 80056ca:	f001 f955 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d2:	f001 ffcf 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d6:	f000 fefb 	bl	80064d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056da:	f001 ffb9 	bl	8007650 <vPortEnterCritical>
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2244      	movs	r2, #68	; 0x44
 80056e2:	5c9b      	ldrb	r3, [r3, r2]
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	3301      	adds	r3, #1
 80056e8:	d103      	bne.n	80056f2 <xQueueGenericSend+0x10a>
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	2244      	movs	r2, #68	; 0x44
 80056ee:	2100      	movs	r1, #0
 80056f0:	5499      	strb	r1, [r3, r2]
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2245      	movs	r2, #69	; 0x45
 80056f6:	5c9b      	ldrb	r3, [r3, r2]
 80056f8:	b25b      	sxtb	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	d103      	bne.n	8005706 <xQueueGenericSend+0x11e>
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2245      	movs	r2, #69	; 0x45
 8005702:	2100      	movs	r1, #0
 8005704:	5499      	strb	r1, [r3, r2]
 8005706:	f001 ffb5 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800570a:	1d3a      	adds	r2, r7, #4
 800570c:	2314      	movs	r3, #20
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	0011      	movs	r1, r2
 8005712:	0018      	movs	r0, r3
 8005714:	f001 f944 	bl	80069a0 <xTaskCheckForTimeOut>
 8005718:	1e03      	subs	r3, r0, #0
 800571a:	d11e      	bne.n	800575a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	0018      	movs	r0, r3
 8005720:	f000 fc25 	bl	8005f6e <prvIsQueueFull>
 8005724:	1e03      	subs	r3, r0, #0
 8005726:	d011      	beq.n	800574c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	3310      	adds	r3, #16
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	0011      	movs	r1, r2
 8005730:	0018      	movs	r0, r3
 8005732:	f001 f881 	bl	8006838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fba4 	bl	8005e86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800573e:	f000 fed3 	bl	80064e8 <xTaskResumeAll>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d18a      	bne.n	800565c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8005746:	f001 ff73 	bl	8007630 <vPortYield>
 800574a:	e787      	b.n	800565c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fb99 	bl	8005e86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005754:	f000 fec8 	bl	80064e8 <xTaskResumeAll>
 8005758:	e780      	b.n	800565c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	0018      	movs	r0, r3
 800575e:	f000 fb92 	bl	8005e86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005762:	f000 fec1 	bl	80064e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005766:	2300      	movs	r3, #0
		}
	}
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b00a      	add	sp, #40	; 0x28
 800576e:	bd80      	pop	{r7, pc}

08005770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericSendFromISR+0x1c>
 8005788:	b672      	cpsid	i
 800578a:	e7fe      	b.n	800578a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <xQueueGenericSendFromISR+0x2a>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueGenericSendFromISR+0x2e>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueGenericSendFromISR+0x30>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <xQueueGenericSendFromISR+0x38>
 80057a4:	b672      	cpsid	i
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSendFromISR+0x46>
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <xQueueGenericSendFromISR+0x4a>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericSendFromISR+0x4c>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <xQueueGenericSendFromISR+0x54>
 80057c0:	b672      	cpsid	i
 80057c2:	e7fe      	b.n	80057c2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c4:	f001 ff6e 	bl	80076a4 <ulSetInterruptMaskFromISR>
 80057c8:	0003      	movs	r3, r0
 80057ca:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <xQueueGenericSendFromISR+0x6e>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d12e      	bne.n	800583c <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057de:	2413      	movs	r4, #19
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	2145      	movs	r1, #69	; 0x45
 80057e6:	5c52      	ldrb	r2, [r2, r1]
 80057e8:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 fab7 	bl	8005d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057f6:	193b      	adds	r3, r7, r4
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	3301      	adds	r3, #1
 80057fe:	d111      	bne.n	8005824 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	0018      	movs	r0, r3
 800580e:	f001 f857 	bl	80068c0 <xTaskRemoveFromEventList>
 8005812:	1e03      	subs	r3, r0, #0
 8005814:	d00f      	beq.n	8005836 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e008      	b.n	8005836 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005824:	2313      	movs	r3, #19
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	b259      	sxtb	r1, r3
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2245      	movs	r2, #69	; 0x45
 8005834:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005836:	2301      	movs	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
		{
 800583a:	e001      	b.n	8005840 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800583c:	2300      	movs	r3, #0
 800583e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	0018      	movs	r0, r3
 8005844:	f001 ff34 	bl	80076b0 <vClearInterruptMaskFromISR>

	return xReturn;
 8005848:	69fb      	ldr	r3, [r7, #28]
}
 800584a:	0018      	movs	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	b009      	add	sp, #36	; 0x24
 8005850:	bd90      	pop	{r4, r7, pc}

08005852 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <xQueueGiveFromISR+0x18>
 8005866:	b672      	cpsid	i
 8005868:	e7fe      	b.n	8005868 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <xQueueGiveFromISR+0x24>
 8005872:	b672      	cpsid	i
 8005874:	e7fe      	b.n	8005874 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <xQueueGiveFromISR+0x34>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <xQueueGiveFromISR+0x38>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGiveFromISR+0x3a>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueGiveFromISR+0x42>
 8005890:	b672      	cpsid	i
 8005892:	e7fe      	b.n	8005892 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005894:	f001 ff06 	bl	80076a4 <ulSetInterruptMaskFromISR>
 8005898:	0003      	movs	r3, r0
 800589a:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d22c      	bcs.n	8005906 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058ac:	200f      	movs	r0, #15
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	2145      	movs	r1, #69	; 0x45
 80058b4:	5c52      	ldrb	r2, [r2, r1]
 80058b6:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	b25b      	sxtb	r3, r3
 80058c6:	3301      	adds	r3, #1
 80058c8:	d111      	bne.n	80058ee <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	3324      	adds	r3, #36	; 0x24
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 fff2 	bl	80068c0 <xTaskRemoveFromEventList>
 80058dc:	1e03      	subs	r3, r0, #0
 80058de:	d00f      	beq.n	8005900 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2201      	movs	r2, #1
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e008      	b.n	8005900 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058ee:	230f      	movs	r3, #15
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	b259      	sxtb	r1, r3
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2245      	movs	r2, #69	; 0x45
 80058fe:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	e001      	b.n	800590a <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	0018      	movs	r0, r3
 800590e:	f001 fecf 	bl	80076b0 <vClearInterruptMaskFromISR>

	return xReturn;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	0018      	movs	r0, r3
 8005916:	46bd      	mov	sp, r7
 8005918:	b008      	add	sp, #32
 800591a:	bd80      	pop	{r7, pc}

0800591c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <xQueueReceive+0x1e>
 8005936:	b672      	cpsid	i
 8005938:	e7fe      	b.n	8005938 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d103      	bne.n	8005948 <xQueueReceive+0x2c>
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <xQueueReceive+0x30>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <xQueueReceive+0x32>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <xQueueReceive+0x3a>
 8005952:	b672      	cpsid	i
 8005954:	e7fe      	b.n	8005954 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005956:	f001 f951 	bl	8006bfc <xTaskGetSchedulerState>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d102      	bne.n	8005964 <xQueueReceive+0x48>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueReceive+0x4c>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueReceive+0x4e>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <xQueueReceive+0x56>
 800596e:	b672      	cpsid	i
 8005970:	e7fe      	b.n	8005970 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005972:	f001 fe6d 	bl	8007650 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01a      	beq.n	80059b8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f000 fa56 	bl	8005e3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1e5a      	subs	r2, r3, #1
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3310      	adds	r3, #16
 80059a2:	0018      	movs	r0, r3
 80059a4:	f000 ff8c 	bl	80068c0 <xTaskRemoveFromEventList>
 80059a8:	1e03      	subs	r3, r0, #0
 80059aa:	d001      	beq.n	80059b0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059ac:	f001 fe40 	bl	8007630 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059b0:	f001 fe60 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e062      	b.n	8005a7e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059be:	f001 fe59 	bl	8007674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e05b      	b.n	8005a7e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059cc:	2314      	movs	r3, #20
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	0018      	movs	r0, r3
 80059d2:	f000 ffd1 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059da:	f001 fe4b 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059de:	f000 fd77 	bl	80064d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059e2:	f001 fe35 	bl	8007650 <vPortEnterCritical>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2244      	movs	r2, #68	; 0x44
 80059ea:	5c9b      	ldrb	r3, [r3, r2]
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	d103      	bne.n	80059fa <xQueueReceive+0xde>
 80059f2:	6a3b      	ldr	r3, [r7, #32]
 80059f4:	2244      	movs	r2, #68	; 0x44
 80059f6:	2100      	movs	r1, #0
 80059f8:	5499      	strb	r1, [r3, r2]
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	2245      	movs	r2, #69	; 0x45
 80059fe:	5c9b      	ldrb	r3, [r3, r2]
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	d103      	bne.n	8005a0e <xQueueReceive+0xf2>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2245      	movs	r2, #69	; 0x45
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	5499      	strb	r1, [r3, r2]
 8005a0e:	f001 fe31 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a12:	1d3a      	adds	r2, r7, #4
 8005a14:	2314      	movs	r3, #20
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	0011      	movs	r1, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 ffc0 	bl	80069a0 <xTaskCheckForTimeOut>
 8005a20:	1e03      	subs	r3, r0, #0
 8005a22:	d11e      	bne.n	8005a62 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f000 fa8b 	bl	8005f42 <prvIsQueueEmpty>
 8005a2c:	1e03      	subs	r3, r0, #0
 8005a2e:	d011      	beq.n	8005a54 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	3324      	adds	r3, #36	; 0x24
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 fefd 	bl	8006838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 fa20 	bl	8005e86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a46:	f000 fd4f 	bl	80064e8 <xTaskResumeAll>
 8005a4a:	1e03      	subs	r3, r0, #0
 8005a4c:	d191      	bne.n	8005972 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005a4e:	f001 fdef 	bl	8007630 <vPortYield>
 8005a52:	e78e      	b.n	8005972 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 fa15 	bl	8005e86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a5c:	f000 fd44 	bl	80064e8 <xTaskResumeAll>
 8005a60:	e787      	b.n	8005972 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 fa0e 	bl	8005e86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a6a:	f000 fd3d 	bl	80064e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	0018      	movs	r0, r3
 8005a72:	f000 fa66 	bl	8005f42 <prvIsQueueEmpty>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d100      	bne.n	8005a7c <xQueueReceive+0x160>
 8005a7a:	e77a      	b.n	8005972 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a7e:	0018      	movs	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b00a      	add	sp, #40	; 0x28
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08a      	sub	sp, #40	; 0x28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <xQueueSemaphoreTake+0x20>
 8005aa2:	b672      	cpsid	i
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <xQueueSemaphoreTake+0x2c>
 8005aae:	b672      	cpsid	i
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab2:	f001 f8a3 	bl	8006bfc <xTaskGetSchedulerState>
 8005ab6:	1e03      	subs	r3, r0, #0
 8005ab8:	d102      	bne.n	8005ac0 <xQueueSemaphoreTake+0x3a>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <xQueueSemaphoreTake+0x3e>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <xQueueSemaphoreTake+0x40>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <xQueueSemaphoreTake+0x48>
 8005aca:	b672      	cpsid	i
 8005acc:	e7fe      	b.n	8005acc <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ace:	f001 fdbf 	bl	8007650 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01d      	beq.n	8005b1a <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005aee:	f001 f9df 	bl	8006eb0 <pvTaskIncrementMutexHeldCount>
 8005af2:	0002      	movs	r2, r0
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3310      	adds	r3, #16
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fedb 	bl	80068c0 <xTaskRemoveFromEventList>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d001      	beq.n	8005b12 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b0e:	f001 fd8f 	bl	8007630 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b12:	f001 fdaf 	bl	8007674 <vPortExitCritical>
				return pdPASS;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e08b      	b.n	8005c32 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <xQueueSemaphoreTake+0xa4>
 8005b26:	b672      	cpsid	i
 8005b28:	e7fe      	b.n	8005b28 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b2a:	f001 fda3 	bl	8007674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e07f      	b.n	8005c32 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d106      	bne.n	8005b46 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b38:	230c      	movs	r3, #12
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 ff1b 	bl	8006978 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b46:	f001 fd95 	bl	8007674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b4a:	f000 fcc1 	bl	80064d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b4e:	f001 fd7f 	bl	8007650 <vPortEnterCritical>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	2244      	movs	r2, #68	; 0x44
 8005b56:	5c9b      	ldrb	r3, [r3, r2]
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	d103      	bne.n	8005b66 <xQueueSemaphoreTake+0xe0>
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2244      	movs	r2, #68	; 0x44
 8005b62:	2100      	movs	r1, #0
 8005b64:	5499      	strb	r1, [r3, r2]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2245      	movs	r2, #69	; 0x45
 8005b6a:	5c9b      	ldrb	r3, [r3, r2]
 8005b6c:	b25b      	sxtb	r3, r3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	d103      	bne.n	8005b7a <xQueueSemaphoreTake+0xf4>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2245      	movs	r2, #69	; 0x45
 8005b76:	2100      	movs	r1, #0
 8005b78:	5499      	strb	r1, [r3, r2]
 8005b7a:	f001 fd7b 	bl	8007674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b7e:	003a      	movs	r2, r7
 8005b80:	230c      	movs	r3, #12
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	0011      	movs	r1, r2
 8005b86:	0018      	movs	r0, r3
 8005b88:	f000 ff0a 	bl	80069a0 <xTaskCheckForTimeOut>
 8005b8c:	1e03      	subs	r3, r0, #0
 8005b8e:	d12e      	bne.n	8005bee <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	0018      	movs	r0, r3
 8005b94:	f000 f9d5 	bl	8005f42 <prvIsQueueEmpty>
 8005b98:	1e03      	subs	r3, r0, #0
 8005b9a:	d021      	beq.n	8005be0 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005ba4:	f001 fd54 	bl	8007650 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f001 f841 	bl	8006c34 <xTaskPriorityInherit>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005bb6:	f001 fd5d 	bl	8007674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3324      	adds	r3, #36	; 0x24
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	0011      	movs	r1, r2
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 fe38 	bl	8006838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f95b 	bl	8005e86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005bd0:	f000 fc8a 	bl	80064e8 <xTaskResumeAll>
 8005bd4:	1e03      	subs	r3, r0, #0
 8005bd6:	d000      	beq.n	8005bda <xQueueSemaphoreTake+0x154>
 8005bd8:	e779      	b.n	8005ace <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005bda:	f001 fd29 	bl	8007630 <vPortYield>
 8005bde:	e776      	b.n	8005ace <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f000 f94f 	bl	8005e86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005be8:	f000 fc7e 	bl	80064e8 <xTaskResumeAll>
 8005bec:	e76f      	b.n	8005ace <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 f948 	bl	8005e86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bf6:	f000 fc77 	bl	80064e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 f9a0 	bl	8005f42 <prvIsQueueEmpty>
 8005c02:	1e03      	subs	r3, r0, #0
 8005c04:	d100      	bne.n	8005c08 <xQueueSemaphoreTake+0x182>
 8005c06:	e762      	b.n	8005ace <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d010      	beq.n	8005c30 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005c0e:	f001 fd1f 	bl	8007650 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f88f 	bl	8005d38 <prvGetDisinheritPriorityAfterTimeout>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f001 f8ce 	bl	8006dc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c2c:	f001 fd22 	bl	8007674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c32:	0018      	movs	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	b00a      	add	sp, #40	; 0x28
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c3a:	b590      	push	{r4, r7, lr}
 8005c3c:	b08b      	sub	sp, #44	; 0x2c
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <xQueueReceiveFromISR+0x1a>
 8005c50:	b672      	cpsid	i
 8005c52:	e7fe      	b.n	8005c52 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueReceiveFromISR+0x28>
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueReceiveFromISR+0x2c>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueReceiveFromISR+0x2e>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <xQueueReceiveFromISR+0x36>
 8005c6c:	b672      	cpsid	i
 8005c6e:	e7fe      	b.n	8005c6e <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c70:	f001 fd18 	bl	80076a4 <ulSetInterruptMaskFromISR>
 8005c74:	0003      	movs	r3, r0
 8005c76:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d032      	beq.n	8005cea <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c84:	2417      	movs	r4, #23
 8005c86:	193b      	adds	r3, r7, r4
 8005c88:	6a3a      	ldr	r2, [r7, #32]
 8005c8a:	2144      	movs	r1, #68	; 0x44
 8005c8c:	5c52      	ldrb	r2, [r2, r1]
 8005c8e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	0011      	movs	r1, r2
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f8cf 	bl	8005e3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ca4:	193b      	adds	r3, r7, r4
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	3301      	adds	r3, #1
 8005cac:	d111      	bne.n	8005cd2 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	3310      	adds	r3, #16
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 fe00 	bl	80068c0 <xTaskRemoveFromEventList>
 8005cc0:	1e03      	subs	r3, r0, #0
 8005cc2:	d00f      	beq.n	8005ce4 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00c      	beq.n	8005ce4 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e008      	b.n	8005ce4 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005cd2:	2317      	movs	r3, #23
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	b259      	sxtb	r1, r3
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2244      	movs	r2, #68	; 0x44
 8005ce2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce8:	e001      	b.n	8005cee <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f001 fcdd 	bl	80076b0 <vClearInterruptMaskFromISR>

	return xReturn;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b00b      	add	sp, #44	; 0x2c
 8005cfe:	bd90      	pop	{r4, r7, pc}

08005d00 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <vQueueDelete+0x16>
 8005d12:	b672      	cpsid	i
 8005d14:	e7fe      	b.n	8005d14 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 f969 	bl	8005ff0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2246      	movs	r2, #70	; 0x46
 8005d22:	5c9b      	ldrb	r3, [r3, r2]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f001 fdce 	bl	80078cc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d30:	46c0      	nop			; (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b004      	add	sp, #16
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2238      	movs	r2, #56	; 0x38
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e001      	b.n	8005d5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b004      	add	sp, #16
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10e      	bne.n	8005da0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14e      	bne.n	8005e28 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 ffbe 	bl	8006d10 <xTaskPriorityDisinherit>
 8005d94:	0003      	movs	r3, r0
 8005d96:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	e043      	b.n	8005e28 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d119      	bne.n	8005dda <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6898      	ldr	r0, [r3, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0019      	movs	r1, r3
 8005db2:	f001 feb7 	bl	8007b24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	18d2      	adds	r2, r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d32b      	bcc.n	8005e28 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	e026      	b.n	8005e28 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	68d8      	ldr	r0, [r3, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	0019      	movs	r1, r3
 8005de6:	f001 fe9d 	bl	8007b24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	425b      	negs	r3, r3
 8005df4:	18d2      	adds	r2, r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d207      	bcs.n	8005e16 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	425b      	negs	r3, r3
 8005e10:	18d2      	adds	r2, r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d105      	bne.n	8005e28 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e30:	697b      	ldr	r3, [r7, #20]
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b006      	add	sp, #24
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d018      	beq.n	8005e7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	18d2      	adds	r2, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d303      	bcc.n	8005e6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f001 fe53 	bl	8007b24 <memcpy>
	}
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b002      	add	sp, #8
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e8e:	f001 fbdf 	bl	8007650 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e92:	230f      	movs	r3, #15
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	2145      	movs	r1, #69	; 0x45
 8005e9a:	5c52      	ldrb	r2, [r2, r1]
 8005e9c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e9e:	e013      	b.n	8005ec8 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d016      	beq.n	8005ed6 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 fd07 	bl	80068c0 <xTaskRemoveFromEventList>
 8005eb2:	1e03      	subs	r3, r0, #0
 8005eb4:	d001      	beq.n	8005eba <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005eb6:	f000 fdc3 	bl	8006a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005eba:	210f      	movs	r1, #15
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	187b      	adds	r3, r7, r1
 8005ec6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dce5      	bgt.n	8005ea0 <prvUnlockQueue+0x1a>
 8005ed4:	e000      	b.n	8005ed8 <prvUnlockQueue+0x52>
					break;
 8005ed6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2245      	movs	r2, #69	; 0x45
 8005edc:	21ff      	movs	r1, #255	; 0xff
 8005ede:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005ee0:	f001 fbc8 	bl	8007674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ee4:	f001 fbb4 	bl	8007650 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ee8:	230e      	movs	r3, #14
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	2144      	movs	r1, #68	; 0x44
 8005ef0:	5c52      	ldrb	r2, [r2, r1]
 8005ef2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ef4:	e013      	b.n	8005f1e <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3310      	adds	r3, #16
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fcdc 	bl	80068c0 <xTaskRemoveFromEventList>
 8005f08:	1e03      	subs	r3, r0, #0
 8005f0a:	d001      	beq.n	8005f10 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005f0c:	f000 fd98 	bl	8006a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f10:	210e      	movs	r1, #14
 8005f12:	187b      	adds	r3, r7, r1
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f1e:	230e      	movs	r3, #14
 8005f20:	18fb      	adds	r3, r7, r3
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	dce5      	bgt.n	8005ef6 <prvUnlockQueue+0x70>
 8005f2a:	e000      	b.n	8005f2e <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005f2c:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2244      	movs	r2, #68	; 0x44
 8005f32:	21ff      	movs	r1, #255	; 0xff
 8005f34:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005f36:	f001 fb9d 	bl	8007674 <vPortExitCritical>
}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b004      	add	sp, #16
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f4a:	f001 fb81 	bl	8007650 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d102      	bne.n	8005f5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f56:	2301      	movs	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e001      	b.n	8005f60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f60:	f001 fb88 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8005f64:	68fb      	ldr	r3, [r7, #12]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f76:	f001 fb6b 	bl	8007650 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d102      	bne.n	8005f8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f86:	2301      	movs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e001      	b.n	8005f90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f90:	f001 fb70 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	0018      	movs	r0, r3
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b004      	add	sp, #16
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e015      	b.n	8005fdc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fb0:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <vQueueAddToRegistry+0x4c>)
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	00d2      	lsls	r2, r2, #3
 8005fb6:	58d3      	ldr	r3, [r2, r3]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10c      	bne.n	8005fd6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <vQueueAddToRegistry+0x4c>)
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	00d2      	lsls	r2, r2, #3
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <vQueueAddToRegistry+0x4c>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	18d3      	adds	r3, r2, r3
 8005fce:	3304      	adds	r3, #4
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005fd4:	e006      	b.n	8005fe4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	d9e6      	bls.n	8005fb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	46c0      	nop			; (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b004      	add	sp, #16
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200009e8 	.word	0x200009e8

08005ff0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e018      	b.n	8006030 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <vQueueUnregisterQueue+0x50>)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	18d3      	adds	r3, r2, r3
 8006006:	3304      	adds	r3, #4
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d10c      	bne.n	800602a <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <vQueueUnregisterQueue+0x50>)
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	00d2      	lsls	r2, r2, #3
 8006016:	2100      	movs	r1, #0
 8006018:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800601a:	4a09      	ldr	r2, [pc, #36]	; (8006040 <vQueueUnregisterQueue+0x50>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	3304      	adds	r3, #4
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
				break;
 8006028:	e006      	b.n	8006038 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b07      	cmp	r3, #7
 8006034:	d9e3      	bls.n	8005ffe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	46c0      	nop			; (mov r8, r8)
 800603a:	46bd      	mov	sp, r7
 800603c:	b004      	add	sp, #16
 800603e:	bd80      	pop	{r7, pc}
 8006040:	200009e8 	.word	0x200009e8

08006044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006054:	f001 fafc 	bl	8007650 <vPortEnterCritical>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2244      	movs	r2, #68	; 0x44
 800605c:	5c9b      	ldrb	r3, [r3, r2]
 800605e:	b25b      	sxtb	r3, r3
 8006060:	3301      	adds	r3, #1
 8006062:	d103      	bne.n	800606c <vQueueWaitForMessageRestricted+0x28>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2244      	movs	r2, #68	; 0x44
 8006068:	2100      	movs	r1, #0
 800606a:	5499      	strb	r1, [r3, r2]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2245      	movs	r2, #69	; 0x45
 8006070:	5c9b      	ldrb	r3, [r3, r2]
 8006072:	b25b      	sxtb	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	d103      	bne.n	8006080 <vQueueWaitForMessageRestricted+0x3c>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2245      	movs	r2, #69	; 0x45
 800607c:	2100      	movs	r1, #0
 800607e:	5499      	strb	r1, [r3, r2]
 8006080:	f001 faf8 	bl	8007674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	2b00      	cmp	r3, #0
 800608a:	d106      	bne.n	800609a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3324      	adds	r3, #36	; 0x24
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	0018      	movs	r0, r3
 8006096:	f000 fbed 	bl	8006874 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	0018      	movs	r0, r3
 800609e:	f7ff fef2 	bl	8005e86 <prvUnlockQueue>
	}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b006      	add	sp, #24
 80060a8:	bd80      	pop	{r7, pc}

080060aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060aa:	b590      	push	{r4, r7, lr}
 80060ac:	b08d      	sub	sp, #52	; 0x34
 80060ae:	af04      	add	r7, sp, #16
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xTaskCreateStatic+0x18>
 80060be:	b672      	cpsid	i
 80060c0:	e7fe      	b.n	80060c0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <xTaskCreateStatic+0x22>
 80060c8:	b672      	cpsid	i
 80060ca:	e7fe      	b.n	80060ca <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060cc:	23bc      	movs	r3, #188	; 0xbc
 80060ce:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2bbc      	cmp	r3, #188	; 0xbc
 80060d4:	d001      	beq.n	80060da <xTaskCreateStatic+0x30>
 80060d6:	b672      	cpsid	i
 80060d8:	e7fe      	b.n	80060d8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d020      	beq.n	8006122 <xTaskCreateStatic+0x78>
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01d      	beq.n	8006122 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	22b9      	movs	r2, #185	; 0xb9
 80060f4:	2102      	movs	r1, #2
 80060f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f8:	683c      	ldr	r4, [r7, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	2300      	movs	r3, #0
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	9302      	str	r3, [sp, #8]
 8006108:	2318      	movs	r3, #24
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	0023      	movs	r3, r4
 8006114:	f000 f858 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	0018      	movs	r0, r3
 800611c:	f000 f8ec 	bl	80062f8 <prvAddNewTaskToReadyList>
 8006120:	e001      	b.n	8006126 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006126:	69bb      	ldr	r3, [r7, #24]
	}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b009      	add	sp, #36	; 0x24
 800612e:	bd90      	pop	{r4, r7, pc}

08006130 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b08d      	sub	sp, #52	; 0x34
 8006134:	af04      	add	r7, sp, #16
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006140:	1dbb      	adds	r3, r7, #6
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	0018      	movs	r0, r3
 8006148:	f001 fb1a 	bl	8007780 <pvPortMalloc>
 800614c:	0003      	movs	r3, r0
 800614e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d010      	beq.n	8006178 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006156:	20bc      	movs	r0, #188	; 0xbc
 8006158:	f001 fb12 	bl	8007780 <pvPortMalloc>
 800615c:	0003      	movs	r3, r0
 800615e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
 800616c:	e006      	b.n	800617c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	0018      	movs	r0, r3
 8006172:	f001 fbab 	bl	80078cc <vPortFree>
 8006176:	e001      	b.n	800617c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d01a      	beq.n	80061b8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	22b9      	movs	r2, #185	; 0xb9
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800618a:	1dbb      	adds	r3, r7, #6
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	683c      	ldr	r4, [r7, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	2300      	movs	r3, #0
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	9302      	str	r3, [sp, #8]
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	0023      	movs	r3, r4
 80061a6:	f000 f80f 	bl	80061c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 f8a3 	bl	80062f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b2:	2301      	movs	r3, #1
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e002      	b.n	80061be <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b8:	2301      	movs	r3, #1
 80061ba:	425b      	negs	r3, r3
 80061bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061be:	69bb      	ldr	r3, [r7, #24]
	}
 80061c0:	0018      	movs	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b009      	add	sp, #36	; 0x24
 80061c6:	bd90      	pop	{r4, r7, pc}

080061c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	001a      	movs	r2, r3
 80061e0:	21a5      	movs	r1, #165	; 0xa5
 80061e2:	f001 fca8 	bl	8007b36 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	493e      	ldr	r1, [pc, #248]	; (80062e8 <prvInitialiseNewTask+0x120>)
 80061ee:	468c      	mov	ip, r1
 80061f0:	4463      	add	r3, ip
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4393      	bics	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2207      	movs	r2, #7
 8006204:	4013      	ands	r3, r2
 8006206:	d001      	beq.n	800620c <prvInitialiseNewTask+0x44>
 8006208:	b672      	cpsid	i
 800620a:	e7fe      	b.n	800620a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e013      	b.n	800623a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	18d3      	adds	r3, r2, r3
 8006218:	7818      	ldrb	r0, [r3, #0]
 800621a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621c:	2134      	movs	r1, #52	; 0x34
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	18d3      	adds	r3, r2, r3
 8006222:	185b      	adds	r3, r3, r1
 8006224:	1c02      	adds	r2, r0, #0
 8006226:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	18d3      	adds	r3, r2, r3
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d006      	beq.n	8006242 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	3301      	adds	r3, #1
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d9e8      	bls.n	8006212 <prvInitialiseNewTask+0x4a>
 8006240:	e000      	b.n	8006244 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006242:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	2243      	movs	r2, #67	; 0x43
 8006248:	2100      	movs	r1, #0
 800624a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	2b37      	cmp	r3, #55	; 0x37
 8006250:	d901      	bls.n	8006256 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006252:	2337      	movs	r3, #55	; 0x37
 8006254:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	6a3a      	ldr	r2, [r7, #32]
 800625a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	2200      	movs	r2, #0
 8006266:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	3304      	adds	r3, #4
 800626c:	0018      	movs	r0, r3
 800626e:	f7fe ffeb 	bl	8005248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	3318      	adds	r3, #24
 8006276:	0018      	movs	r0, r3
 8006278:	f7fe ffe6 	bl	8005248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006280:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2238      	movs	r2, #56	; 0x38
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	22b4      	movs	r2, #180	; 0xb4
 8006296:	2100      	movs	r1, #0
 8006298:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	22b8      	movs	r2, #184	; 0xb8
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a4:	3354      	adds	r3, #84	; 0x54
 80062a6:	2260      	movs	r2, #96	; 0x60
 80062a8:	2100      	movs	r1, #0
 80062aa:	0018      	movs	r0, r3
 80062ac:	f001 fc43 	bl	8007b36 <memset>
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	4a0e      	ldr	r2, [pc, #56]	; (80062ec <prvInitialiseNewTask+0x124>)
 80062b4:	659a      	str	r2, [r3, #88]	; 0x58
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <prvInitialiseNewTask+0x128>)
 80062ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	4a0d      	ldr	r2, [pc, #52]	; (80062f4 <prvInitialiseNewTask+0x12c>)
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f001 f927 	bl	800751c <pxPortInitialiseStack>
 80062ce:	0002      	movs	r2, r0
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	3fffffff 	.word	0x3fffffff
 80062ec:	08008748 	.word	0x08008748
 80062f0:	08008768 	.word	0x08008768
 80062f4:	08008728 	.word	0x08008728

080062f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006300:	f001 f9a6 	bl	8007650 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006304:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <prvAddNewTaskToReadyList+0xb8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	4b29      	ldr	r3, [pc, #164]	; (80063b0 <prvAddNewTaskToReadyList+0xb8>)
 800630c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800630e:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <prvAddNewTaskToReadyList+0xbc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006316:	4b27      	ldr	r3, [pc, #156]	; (80063b4 <prvAddNewTaskToReadyList+0xbc>)
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800631c:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <prvAddNewTaskToReadyList+0xb8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d110      	bne.n	8006346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006324:	f000 fba6 	bl	8006a74 <prvInitialiseTaskLists>
 8006328:	e00d      	b.n	8006346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800632a:	4b23      	ldr	r3, [pc, #140]	; (80063b8 <prvAddNewTaskToReadyList+0xc0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006332:	4b20      	ldr	r3, [pc, #128]	; (80063b4 <prvAddNewTaskToReadyList+0xbc>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	429a      	cmp	r2, r3
 800633e:	d802      	bhi.n	8006346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006340:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <prvAddNewTaskToReadyList+0xbc>)
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <prvAddNewTaskToReadyList+0xc4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <prvAddNewTaskToReadyList+0xc4>)
 800634e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <prvAddNewTaskToReadyList+0xc4>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <prvAddNewTaskToReadyList+0xc8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <prvAddNewTaskToReadyList+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <prvAddNewTaskToReadyList+0xc8>)
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	0013      	movs	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	189b      	adds	r3, r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <prvAddNewTaskToReadyList+0xcc>)
 800637a:	189a      	adds	r2, r3, r2
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	0019      	movs	r1, r3
 8006382:	0010      	movs	r0, r2
 8006384:	f7fe ff6b 	bl	800525e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006388:	f001 f974 	bl	8007674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvAddNewTaskToReadyList+0xc0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <prvAddNewTaskToReadyList+0xbc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	429a      	cmp	r2, r3
 80063a0:	d201      	bcs.n	80063a6 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063a2:	f001 f945 	bl	8007630 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	46bd      	mov	sp, r7
 80063aa:	b002      	add	sp, #8
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	20000efc 	.word	0x20000efc
 80063b4:	20000a28 	.word	0x20000a28
 80063b8:	20000f08 	.word	0x20000f08
 80063bc:	20000f18 	.word	0x20000f18
 80063c0:	20000f04 	.word	0x20000f04
 80063c4:	20000a2c 	.word	0x20000a2c

080063c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <vTaskDelay+0x48>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <vTaskDelay+0x1e>
 80063e2:	b672      	cpsid	i
 80063e4:	e7fe      	b.n	80063e4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80063e6:	f000 f873 	bl	80064d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2100      	movs	r1, #0
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 fd70 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063f4:	f000 f878 	bl	80064e8 <xTaskResumeAll>
 80063f8:	0003      	movs	r3, r0
 80063fa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006402:	f001 f915 	bl	8007630 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006406:	46c0      	nop			; (mov r8, r8)
 8006408:	46bd      	mov	sp, r7
 800640a:	b004      	add	sp, #16
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	20000f24 	.word	0x20000f24

08006414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b089      	sub	sp, #36	; 0x24
 8006418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006422:	003a      	movs	r2, r7
 8006424:	1d39      	adds	r1, r7, #4
 8006426:	2308      	movs	r3, #8
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	0018      	movs	r0, r3
 800642c:	f7fe febe 	bl	80051ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006430:	683c      	ldr	r4, [r7, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	491e      	ldr	r1, [pc, #120]	; (80064b0 <vTaskStartScheduler+0x9c>)
 8006438:	481e      	ldr	r0, [pc, #120]	; (80064b4 <vTaskStartScheduler+0xa0>)
 800643a:	9202      	str	r2, [sp, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	2300      	movs	r3, #0
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	0022      	movs	r2, r4
 8006446:	f7ff fe30 	bl	80060aa <xTaskCreateStatic>
 800644a:	0002      	movs	r2, r0
 800644c:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <vTaskStartScheduler+0xa4>)
 800644e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <vTaskStartScheduler+0xa4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006458:	2301      	movs	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e001      	b.n	8006462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d103      	bne.n	8006470 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006468:	f000 fd88 	bl	8006f7c <xTimerCreateTimerTask>
 800646c:	0003      	movs	r3, r0
 800646e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d113      	bne.n	800649e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006476:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <vTaskStartScheduler+0xa8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3354      	adds	r3, #84	; 0x54
 800647e:	001a      	movs	r2, r3
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <vTaskStartScheduler+0xac>)
 8006482:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <vTaskStartScheduler+0xb0>)
 8006486:	2201      	movs	r2, #1
 8006488:	4252      	negs	r2, r2
 800648a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800648c:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <vTaskStartScheduler+0xb4>)
 800648e:	2201      	movs	r2, #1
 8006490:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006492:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <vTaskStartScheduler+0xb8>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006498:	f001 f8a6 	bl	80075e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800649c:	e004      	b.n	80064a8 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	d101      	bne.n	80064a8 <vTaskStartScheduler+0x94>
 80064a4:	b672      	cpsid	i
 80064a6:	e7fe      	b.n	80064a6 <vTaskStartScheduler+0x92>
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b005      	add	sp, #20
 80064ae:	bd90      	pop	{r4, r7, pc}
 80064b0:	08008668 	.word	0x08008668
 80064b4:	08006a55 	.word	0x08006a55
 80064b8:	20000f20 	.word	0x20000f20
 80064bc:	20000a28 	.word	0x20000a28
 80064c0:	20000010 	.word	0x20000010
 80064c4:	20000f1c 	.word	0x20000f1c
 80064c8:	20000f08 	.word	0x20000f08
 80064cc:	20000f00 	.word	0x20000f00

080064d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <vTaskSuspendAll+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <vTaskSuspendAll+0x14>)
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000f24 	.word	0x20000f24

080064e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064f6:	4b3a      	ldr	r3, [pc, #232]	; (80065e0 <xTaskResumeAll+0xf8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <xTaskResumeAll+0x1a>
 80064fe:	b672      	cpsid	i
 8006500:	e7fe      	b.n	8006500 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006502:	f001 f8a5 	bl	8007650 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006506:	4b36      	ldr	r3, [pc, #216]	; (80065e0 <xTaskResumeAll+0xf8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	4b34      	ldr	r3, [pc, #208]	; (80065e0 <xTaskResumeAll+0xf8>)
 800650e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006510:	4b33      	ldr	r3, [pc, #204]	; (80065e0 <xTaskResumeAll+0xf8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d15b      	bne.n	80065d0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <xTaskResumeAll+0xfc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d057      	beq.n	80065d0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006520:	e02f      	b.n	8006582 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006522:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <xTaskResumeAll+0x100>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3318      	adds	r3, #24
 800652e:	0018      	movs	r0, r3
 8006530:	f7fe feed 	bl	800530e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3304      	adds	r3, #4
 8006538:	0018      	movs	r0, r3
 800653a:	f7fe fee8 	bl	800530e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <xTaskResumeAll+0x104>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d903      	bls.n	8006552 <xTaskResumeAll+0x6a>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4b27      	ldr	r3, [pc, #156]	; (80065ec <xTaskResumeAll+0x104>)
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	0013      	movs	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	189b      	adds	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <xTaskResumeAll+0x108>)
 8006560:	189a      	adds	r2, r3, r2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	0019      	movs	r1, r3
 8006568:	0010      	movs	r0, r2
 800656a:	f7fe fe78 	bl	800525e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <xTaskResumeAll+0x10c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006578:	429a      	cmp	r2, r3
 800657a:	d302      	bcc.n	8006582 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800657c:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <xTaskResumeAll+0x110>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <xTaskResumeAll+0x100>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1cb      	bne.n	8006522 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006590:	f000 fb10 	bl	8006bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006594:	4b19      	ldr	r3, [pc, #100]	; (80065fc <xTaskResumeAll+0x114>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065a0:	f000 f83c 	bl	800661c <xTaskIncrementTick>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d002      	beq.n	80065ae <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80065a8:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <xTaskResumeAll+0x110>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f2      	bne.n	80065a0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80065ba:	4b10      	ldr	r3, [pc, #64]	; (80065fc <xTaskResumeAll+0x114>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <xTaskResumeAll+0x110>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065cc:	f001 f830 	bl	8007630 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065d0:	f001 f850 	bl	8007674 <vPortExitCritical>

	return xAlreadyYielded;
 80065d4:	68bb      	ldr	r3, [r7, #8]
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b004      	add	sp, #16
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	20000f24 	.word	0x20000f24
 80065e4:	20000efc 	.word	0x20000efc
 80065e8:	20000ebc 	.word	0x20000ebc
 80065ec:	20000f04 	.word	0x20000f04
 80065f0:	20000a2c 	.word	0x20000a2c
 80065f4:	20000a28 	.word	0x20000a28
 80065f8:	20000f10 	.word	0x20000f10
 80065fc:	20000f0c 	.word	0x20000f0c

08006600 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <xTaskGetTickCount+0x18>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800660c:	687b      	ldr	r3, [r7, #4]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	20000f00 	.word	0x20000f00

0800661c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006626:	4b4c      	ldr	r3, [pc, #304]	; (8006758 <xTaskIncrementTick+0x13c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d000      	beq.n	8006630 <xTaskIncrementTick+0x14>
 800662e:	e083      	b.n	8006738 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <xTaskIncrementTick+0x140>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006638:	4b48      	ldr	r3, [pc, #288]	; (800675c <xTaskIncrementTick+0x140>)
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d117      	bne.n	8006674 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006644:	4b46      	ldr	r3, [pc, #280]	; (8006760 <xTaskIncrementTick+0x144>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <xTaskIncrementTick+0x36>
 800664e:	b672      	cpsid	i
 8006650:	e7fe      	b.n	8006650 <xTaskIncrementTick+0x34>
 8006652:	4b43      	ldr	r3, [pc, #268]	; (8006760 <xTaskIncrementTick+0x144>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	4b42      	ldr	r3, [pc, #264]	; (8006764 <xTaskIncrementTick+0x148>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b40      	ldr	r3, [pc, #256]	; (8006760 <xTaskIncrementTick+0x144>)
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	4b40      	ldr	r3, [pc, #256]	; (8006764 <xTaskIncrementTick+0x148>)
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	4b40      	ldr	r3, [pc, #256]	; (8006768 <xTaskIncrementTick+0x14c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	4b3e      	ldr	r3, [pc, #248]	; (8006768 <xTaskIncrementTick+0x14c>)
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	f000 faa0 	bl	8006bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006674:	4b3d      	ldr	r3, [pc, #244]	; (800676c <xTaskIncrementTick+0x150>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	429a      	cmp	r2, r3
 800667c:	d34e      	bcc.n	800671c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800667e:	4b38      	ldr	r3, [pc, #224]	; (8006760 <xTaskIncrementTick+0x144>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <xTaskIncrementTick+0x70>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <xTaskIncrementTick+0x72>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006692:	4b36      	ldr	r3, [pc, #216]	; (800676c <xTaskIncrementTick+0x150>)
 8006694:	2201      	movs	r2, #1
 8006696:	4252      	negs	r2, r2
 8006698:	601a      	str	r2, [r3, #0]
					break;
 800669a:	e03f      	b.n	800671c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800669c:	4b30      	ldr	r3, [pc, #192]	; (8006760 <xTaskIncrementTick+0x144>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d203      	bcs.n	80066bc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <xTaskIncrementTick+0x150>)
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
						break;
 80066ba:	e02f      	b.n	800671c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	3304      	adds	r3, #4
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7fe fe24 	bl	800530e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3318      	adds	r3, #24
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7fe fe1b 	bl	800530e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <xTaskIncrementTick+0x154>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <xTaskIncrementTick+0xd0>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4b21      	ldr	r3, [pc, #132]	; (8006770 <xTaskIncrementTick+0x154>)
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	0013      	movs	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	189b      	adds	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <xTaskIncrementTick+0x158>)
 80066fa:	189a      	adds	r2, r3, r2
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	3304      	adds	r3, #4
 8006700:	0019      	movs	r1, r3
 8006702:	0010      	movs	r0, r2
 8006704:	f7fe fdab 	bl	800525e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <xTaskIncrementTick+0x15c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	429a      	cmp	r2, r3
 8006714:	d3b3      	bcc.n	800667e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8006716:	2301      	movs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800671a:	e7b0      	b.n	800667e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800671c:	4b16      	ldr	r3, [pc, #88]	; (8006778 <xTaskIncrementTick+0x15c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4914      	ldr	r1, [pc, #80]	; (8006774 <xTaskIncrementTick+0x158>)
 8006724:	0013      	movs	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	189b      	adds	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	585b      	ldr	r3, [r3, r1]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d907      	bls.n	8006742 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006732:	2301      	movs	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e004      	b.n	8006742 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <xTaskIncrementTick+0x160>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	4b0f      	ldr	r3, [pc, #60]	; (800677c <xTaskIncrementTick+0x160>)
 8006740:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006742:	4b0f      	ldr	r3, [pc, #60]	; (8006780 <xTaskIncrementTick+0x164>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800674e:	697b      	ldr	r3, [r7, #20]
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b006      	add	sp, #24
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000f24 	.word	0x20000f24
 800675c:	20000f00 	.word	0x20000f00
 8006760:	20000eb4 	.word	0x20000eb4
 8006764:	20000eb8 	.word	0x20000eb8
 8006768:	20000f14 	.word	0x20000f14
 800676c:	20000f1c 	.word	0x20000f1c
 8006770:	20000f04 	.word	0x20000f04
 8006774:	20000a2c 	.word	0x20000a2c
 8006778:	20000a28 	.word	0x20000a28
 800677c:	20000f0c 	.word	0x20000f0c
 8006780:	20000f10 	.word	0x20000f10

08006784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800678a:	4b25      	ldr	r3, [pc, #148]	; (8006820 <vTaskSwitchContext+0x9c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006792:	4b24      	ldr	r3, [pc, #144]	; (8006824 <vTaskSwitchContext+0xa0>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006798:	e03d      	b.n	8006816 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <vTaskSwitchContext+0xa0>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <vTaskSwitchContext+0xa4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	607b      	str	r3, [r7, #4]
 80067a6:	e007      	b.n	80067b8 <vTaskSwitchContext+0x34>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <vTaskSwitchContext+0x2e>
 80067ae:	b672      	cpsid	i
 80067b0:	e7fe      	b.n	80067b0 <vTaskSwitchContext+0x2c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	491c      	ldr	r1, [pc, #112]	; (800682c <vTaskSwitchContext+0xa8>)
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	0013      	movs	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	189b      	adds	r3, r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	585b      	ldr	r3, [r3, r1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ee      	beq.n	80067a8 <vTaskSwitchContext+0x24>
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	0013      	movs	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <vTaskSwitchContext+0xa8>)
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	3308      	adds	r3, #8
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d104      	bne.n	80067fa <vTaskSwitchContext+0x76>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vTaskSwitchContext+0xac>)
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	4b08      	ldr	r3, [pc, #32]	; (8006828 <vTaskSwitchContext+0xa4>)
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <vTaskSwitchContext+0xac>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3354      	adds	r3, #84	; 0x54
 8006810:	001a      	movs	r2, r3
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <vTaskSwitchContext+0xb0>)
 8006814:	601a      	str	r2, [r3, #0]
}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	46bd      	mov	sp, r7
 800681a:	b002      	add	sp, #8
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	20000f24 	.word	0x20000f24
 8006824:	20000f10 	.word	0x20000f10
 8006828:	20000f04 	.word	0x20000f04
 800682c:	20000a2c 	.word	0x20000a2c
 8006830:	20000a28 	.word	0x20000a28
 8006834:	20000010 	.word	0x20000010

08006838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <vTaskPlaceOnEventList+0x14>
 8006848:	b672      	cpsid	i
 800684a:	e7fe      	b.n	800684a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <vTaskPlaceOnEventList+0x38>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3318      	adds	r3, #24
 8006852:	001a      	movs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f7fe fd22 	bl	80052a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2101      	movs	r1, #1
 8006862:	0018      	movs	r0, r3
 8006864:	f000 fb36 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000a28 	.word	0x20000a28

08006874 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <vTaskPlaceOnEventListRestricted+0x16>
 8006886:	b672      	cpsid	i
 8006888:	e7fe      	b.n	8006888 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <vTaskPlaceOnEventListRestricted+0x48>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3318      	adds	r3, #24
 8006890:	001a      	movs	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	0011      	movs	r1, r2
 8006896:	0018      	movs	r0, r3
 8006898:	f7fe fce1 	bl	800525e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 80068a2:	2301      	movs	r3, #1
 80068a4:	425b      	negs	r3, r3
 80068a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	0011      	movs	r1, r2
 80068ae:	0018      	movs	r0, r3
 80068b0:	f000 fb10 	bl	8006ed4 <prvAddCurrentTaskToDelayedList>
	}
 80068b4:	46c0      	nop			; (mov r8, r8)
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b004      	add	sp, #16
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000a28 	.word	0x20000a28

080068c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <xTaskRemoveFromEventList+0x1a>
 80068d6:	b672      	cpsid	i
 80068d8:	e7fe      	b.n	80068d8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3318      	adds	r3, #24
 80068de:	0018      	movs	r0, r3
 80068e0:	f7fe fd15 	bl	800530e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068e4:	4b1e      	ldr	r3, [pc, #120]	; (8006960 <xTaskRemoveFromEventList+0xa0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11d      	bne.n	8006928 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	3304      	adds	r3, #4
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7fe fd0c 	bl	800530e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <xTaskRemoveFromEventList+0xa4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d903      	bls.n	800690a <xTaskRemoveFromEventList+0x4a>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006906:	4b17      	ldr	r3, [pc, #92]	; (8006964 <xTaskRemoveFromEventList+0xa4>)
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	0013      	movs	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	189b      	adds	r3, r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a14      	ldr	r2, [pc, #80]	; (8006968 <xTaskRemoveFromEventList+0xa8>)
 8006918:	189a      	adds	r2, r3, r2
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3304      	adds	r3, #4
 800691e:	0019      	movs	r1, r3
 8006920:	0010      	movs	r0, r2
 8006922:	f7fe fc9c 	bl	800525e <vListInsertEnd>
 8006926:	e007      	b.n	8006938 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3318      	adds	r3, #24
 800692c:	001a      	movs	r2, r3
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <xTaskRemoveFromEventList+0xac>)
 8006930:	0011      	movs	r1, r2
 8006932:	0018      	movs	r0, r3
 8006934:	f7fe fc93 	bl	800525e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <xTaskRemoveFromEventList+0xb0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	429a      	cmp	r2, r3
 8006944:	d905      	bls.n	8006952 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006946:	2301      	movs	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <xTaskRemoveFromEventList+0xb4>)
 800694c:	2201      	movs	r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e001      	b.n	8006956 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b004      	add	sp, #16
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000f24 	.word	0x20000f24
 8006964:	20000f04 	.word	0x20000f04
 8006968:	20000a2c 	.word	0x20000a2c
 800696c:	20000ebc 	.word	0x20000ebc
 8006970:	20000a28 	.word	0x20000a28
 8006974:	20000f10 	.word	0x20000f10

08006978 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <vTaskInternalSetTimeOutState+0x20>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006988:	4b04      	ldr	r3, [pc, #16]	; (800699c <vTaskInternalSetTimeOutState+0x24>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b002      	add	sp, #8
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000f14 	.word	0x20000f14
 800699c:	20000f00 	.word	0x20000f00

080069a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <xTaskCheckForTimeOut+0x14>
 80069b0:	b672      	cpsid	i
 80069b2:	e7fe      	b.n	80069b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <xTaskCheckForTimeOut+0x1e>
 80069ba:	b672      	cpsid	i
 80069bc:	e7fe      	b.n	80069bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80069be:	f000 fe47 	bl	8007650 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069c2:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <xTaskCheckForTimeOut+0x98>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3301      	adds	r3, #1
 80069d8:	d102      	bne.n	80069e0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	e024      	b.n	8006a2a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b15      	ldr	r3, [pc, #84]	; (8006a3c <xTaskCheckForTimeOut+0x9c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d007      	beq.n	80069fc <xTaskCheckForTimeOut+0x5c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	e016      	b.n	8006a2a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d20c      	bcs.n	8006a20 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad2      	subs	r2, r2, r3
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	0018      	movs	r0, r3
 8006a16:	f7ff ffaf 	bl	8006978 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	e004      	b.n	8006a2a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006a2a:	f000 fe23 	bl	8007674 <vPortExitCritical>

	return xReturn;
 8006a2e:	697b      	ldr	r3, [r7, #20]
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b006      	add	sp, #24
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000f00 	.word	0x20000f00
 8006a3c:	20000f14 	.word	0x20000f14

08006a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <vTaskMissedYield+0x10>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000f10 	.word	0x20000f10

08006a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a5c:	f000 f84e 	bl	8006afc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <prvIdleTask+0x1c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d9f9      	bls.n	8006a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a68:	f000 fde2 	bl	8007630 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006a6c:	e7f6      	b.n	8006a5c <prvIdleTask+0x8>
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	20000a2c 	.word	0x20000a2c

08006a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	e00c      	b.n	8006a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	0013      	movs	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	189b      	adds	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a14      	ldr	r2, [pc, #80]	; (8006adc <prvInitialiseTaskLists+0x68>)
 8006a8c:	189b      	adds	r3, r3, r2
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7fe fbbc 	bl	800520c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3301      	adds	r3, #1
 8006a98:	607b      	str	r3, [r7, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b37      	cmp	r3, #55	; 0x37
 8006a9e:	d9ef      	bls.n	8006a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <prvInitialiseTaskLists+0x6c>)
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f7fe fbb2 	bl	800520c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <prvInitialiseTaskLists+0x70>)
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f7fe fbae 	bl	800520c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <prvInitialiseTaskLists+0x74>)
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7fe fbaa 	bl	800520c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <prvInitialiseTaskLists+0x78>)
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fe fba6 	bl	800520c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <prvInitialiseTaskLists+0x7c>)
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7fe fba2 	bl	800520c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ac8:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <prvInitialiseTaskLists+0x80>)
 8006aca:	4a05      	ldr	r2, [pc, #20]	; (8006ae0 <prvInitialiseTaskLists+0x6c>)
 8006acc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <prvInitialiseTaskLists+0x84>)
 8006ad0:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <prvInitialiseTaskLists+0x70>)
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b002      	add	sp, #8
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000a2c 	.word	0x20000a2c
 8006ae0:	20000e8c 	.word	0x20000e8c
 8006ae4:	20000ea0 	.word	0x20000ea0
 8006ae8:	20000ebc 	.word	0x20000ebc
 8006aec:	20000ed0 	.word	0x20000ed0
 8006af0:	20000ee8 	.word	0x20000ee8
 8006af4:	20000eb4 	.word	0x20000eb4
 8006af8:	20000eb8 	.word	0x20000eb8

08006afc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b02:	e01a      	b.n	8006b3a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006b04:	f000 fda4 	bl	8007650 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b08:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <prvCheckTasksWaitingTermination+0x50>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fe fbfa 	bl	800530e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	1e5a      	subs	r2, r3, #1
 8006b20:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <prvCheckTasksWaitingTermination+0x54>)
 8006b22:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b2c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006b2e:	f000 fda1 	bl	8007674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 f80f 	bl	8006b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b3a:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <prvCheckTasksWaitingTermination+0x58>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e0      	bne.n	8006b04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	46c0      	nop			; (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000ed0 	.word	0x20000ed0
 8006b50:	20000efc 	.word	0x20000efc
 8006b54:	20000ee4 	.word	0x20000ee4

08006b58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3354      	adds	r3, #84	; 0x54
 8006b64:	0018      	movs	r0, r3
 8006b66:	f001 f895 	bl	8007c94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	22b9      	movs	r2, #185	; 0xb9
 8006b6e:	5c9b      	ldrb	r3, [r3, r2]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 fea7 	bl	80078cc <vPortFree>
				vPortFree( pxTCB );
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fea3 	bl	80078cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b86:	e010      	b.n	8006baa <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	22b9      	movs	r2, #185	; 0xb9
 8006b8c:	5c9b      	ldrb	r3, [r3, r2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d104      	bne.n	8006b9c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 fe99 	bl	80078cc <vPortFree>
	}
 8006b9a:	e006      	b.n	8006baa <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	22b9      	movs	r2, #185	; 0xb9
 8006ba0:	5c9b      	ldrb	r3, [r3, r2]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d001      	beq.n	8006baa <prvDeleteTCB+0x52>
 8006ba6:	b672      	cpsid	i
 8006ba8:	e7fe      	b.n	8006ba8 <prvDeleteTCB+0x50>
	}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b002      	add	sp, #8
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bba:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <prvResetNextTaskUnblockTime+0x40>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <prvResetNextTaskUnblockTime+0x14>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <prvResetNextTaskUnblockTime+0x16>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bce:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvResetNextTaskUnblockTime+0x44>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4252      	negs	r2, r2
 8006bd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd6:	e008      	b.n	8006bea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd8:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <prvResetNextTaskUnblockTime+0x40>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <prvResetNextTaskUnblockTime+0x44>)
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	46bd      	mov	sp, r7
 8006bee:	b002      	add	sp, #8
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	20000eb4 	.word	0x20000eb4
 8006bf8:	20000f1c 	.word	0x20000f1c

08006bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <xTaskGetSchedulerState+0x30>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	e008      	b.n	8006c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <xTaskGetSchedulerState+0x34>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	e001      	b.n	8006c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c22:	687b      	ldr	r3, [r7, #4]
	}
 8006c24:	0018      	movs	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	b002      	add	sp, #8
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000f08 	.word	0x20000f08
 8006c30:	20000f24 	.word	0x20000f24

08006c34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d056      	beq.n	8006cf8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	4b2d      	ldr	r3, [pc, #180]	; (8006d04 <xTaskPriorityInherit+0xd0>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d246      	bcs.n	8006ce6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	db06      	blt.n	8006c6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <xTaskPriorityInherit+0xd0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	2238      	movs	r2, #56	; 0x38
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6959      	ldr	r1, [r3, #20]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	0013      	movs	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <xTaskPriorityInherit+0xd4>)
 8006c80:	189b      	adds	r3, r3, r2
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d101      	bne.n	8006c8a <xTaskPriorityInherit+0x56>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xTaskPriorityInherit+0x58>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d022      	beq.n	8006cd6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	3304      	adds	r3, #4
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7fe fb3a 	bl	800530e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c9a:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <xTaskPriorityInherit+0xd0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <xTaskPriorityInherit+0xd8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d903      	bls.n	8006cb8 <xTaskPriorityInherit+0x84>
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <xTaskPriorityInherit+0xd8>)
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	0013      	movs	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	189b      	adds	r3, r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4a10      	ldr	r2, [pc, #64]	; (8006d08 <xTaskPriorityInherit+0xd4>)
 8006cc6:	189a      	adds	r2, r3, r2
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	0019      	movs	r1, r3
 8006cce:	0010      	movs	r0, r2
 8006cd0:	f7fe fac5 	bl	800525e <vListInsertEnd>
 8006cd4:	e004      	b.n	8006ce0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <xTaskPriorityInherit+0xd0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e008      	b.n	8006cf8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <xTaskPriorityInherit+0xd0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d201      	bcs.n	8006cf8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
	}
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	b004      	add	sp, #16
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	20000a28 	.word	0x20000a28
 8006d08:	20000a2c 	.word	0x20000a2c
 8006d0c:	20000f04 	.word	0x20000f04

08006d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d044      	beq.n	8006db0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <xTaskPriorityDisinherit+0xac>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d001      	beq.n	8006d34 <xTaskPriorityDisinherit+0x24>
 8006d30:	b672      	cpsid	i
 8006d32:	e7fe      	b.n	8006d32 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <xTaskPriorityDisinherit+0x30>
 8006d3c:	b672      	cpsid	i
 8006d3e:	e7fe      	b.n	8006d3e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	1e5a      	subs	r2, r3, #1
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d02c      	beq.n	8006db0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d128      	bne.n	8006db0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	3304      	adds	r3, #4
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7fe fad3 	bl	800530e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	2238      	movs	r2, #56	; 0x38
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <xTaskPriorityDisinherit+0xb0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d903      	bls.n	8006d90 <xTaskPriorityDisinherit+0x80>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <xTaskPriorityDisinherit+0xb0>)
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	0013      	movs	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	189b      	adds	r3, r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a09      	ldr	r2, [pc, #36]	; (8006dc4 <xTaskPriorityDisinherit+0xb4>)
 8006d9e:	189a      	adds	r2, r3, r2
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	3304      	adds	r3, #4
 8006da4:	0019      	movs	r1, r3
 8006da6:	0010      	movs	r0, r2
 8006da8:	f7fe fa59 	bl	800525e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dac:	2301      	movs	r3, #1
 8006dae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006db0:	68fb      	ldr	r3, [r7, #12]
	}
 8006db2:	0018      	movs	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	b004      	add	sp, #16
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	20000a28 	.word	0x20000a28
 8006dc0:	20000f04 	.word	0x20000f04
 8006dc4:	20000a2c 	.word	0x20000a2c

08006dc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05d      	beq.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <vTaskPriorityDisinheritAfterTimeout+0x24>
 8006de8:	b672      	cpsid	i
 8006dea:	e7fe      	b.n	8006dea <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d902      	bls.n	8006dfc <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e002      	b.n	8006e02 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e00:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d047      	beq.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d142      	bne.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e16:	4b23      	ldr	r3, [pc, #140]	; (8006ea4 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d101      	bne.n	8006e24 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006e20:	b672      	cpsid	i
 8006e22:	e7fe      	b.n	8006e22 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	db04      	blt.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	2238      	movs	r2, #56	; 0x38
 8006e3c:	1ad2      	subs	r2, r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6959      	ldr	r1, [r3, #20]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	0013      	movs	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	189b      	adds	r3, r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	4299      	cmp	r1, r3
 8006e56:	d101      	bne.n	8006e5c <vTaskPriorityDisinheritAfterTimeout+0x94>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e000      	b.n	8006e5e <vTaskPriorityDisinheritAfterTimeout+0x96>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01c      	beq.n	8006e9c <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3304      	adds	r3, #4
 8006e66:	0018      	movs	r0, r3
 8006e68:	f7fe fa51 	bl	800530e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d903      	bls.n	8006e80 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	0013      	movs	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	189b      	adds	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a06      	ldr	r2, [pc, #24]	; (8006ea8 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006e8e:	189a      	adds	r2, r3, r2
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	3304      	adds	r3, #4
 8006e94:	0019      	movs	r1, r3
 8006e96:	0010      	movs	r0, r2
 8006e98:	f7fe f9e1 	bl	800525e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b006      	add	sp, #24
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000a28 	.word	0x20000a28
 8006ea8:	20000a2c 	.word	0x20000a2c
 8006eac:	20000f04 	.word	0x20000f04

08006eb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x20>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x20>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec2:	3201      	adds	r2, #1
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006ec6:	4b02      	ldr	r3, [pc, #8]	; (8006ed0 <pvTaskIncrementMutexHeldCount+0x20>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
	}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000a28 	.word	0x20000a28

08006ed4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ede:	4b21      	ldr	r3, [pc, #132]	; (8006f64 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee4:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	0018      	movs	r0, r3
 8006eec:	f7fe fa0f 	bl	800530e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	d10b      	bne.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efc:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	4b1a      	ldr	r3, [pc, #104]	; (8006f6c <prvAddCurrentTaskToDelayedList+0x98>)
 8006f04:	0011      	movs	r1, r2
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7fe f9a9 	bl	800525e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f0c:	e026      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	18d3      	adds	r3, r2, r3
 8006f14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d209      	bcs.n	8006f3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	0019      	movs	r1, r3
 8006f32:	0010      	movs	r0, r2
 8006f34:	f7fe f9b5 	bl	80052a2 <vListInsert>
}
 8006f38:	e010      	b.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3304      	adds	r3, #4
 8006f44:	0019      	movs	r1, r3
 8006f46:	0010      	movs	r0, r2
 8006f48:	f7fe f9ab 	bl	80052a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d202      	bcs.n	8006f5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	601a      	str	r2, [r3, #0]
}
 8006f5c:	46c0      	nop			; (mov r8, r8)
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	b004      	add	sp, #16
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000f00 	.word	0x20000f00
 8006f68:	20000a28 	.word	0x20000a28
 8006f6c:	20000ee8 	.word	0x20000ee8
 8006f70:	20000eb8 	.word	0x20000eb8
 8006f74:	20000eb4 	.word	0x20000eb4
 8006f78:	20000f1c 	.word	0x20000f1c

08006f7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f86:	f000 fa87 	bl	8007498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <xTimerCreateTimerTask+0x6c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d020      	beq.n	8006fd4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f9a:	003a      	movs	r2, r7
 8006f9c:	1d39      	adds	r1, r7, #4
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7fe f91a 	bl	80051dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fa8:	683c      	ldr	r4, [r7, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	490f      	ldr	r1, [pc, #60]	; (8006fec <xTimerCreateTimerTask+0x70>)
 8006fb0:	480f      	ldr	r0, [pc, #60]	; (8006ff0 <xTimerCreateTimerTask+0x74>)
 8006fb2:	9202      	str	r2, [sp, #8]
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	0022      	movs	r2, r4
 8006fbe:	f7ff f874 	bl	80060aa <xTaskCreateStatic>
 8006fc2:	0002      	movs	r2, r0
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <xTimerCreateTimerTask+0x78>)
 8006fc6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <xTimerCreateTimerTask+0x78>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <xTimerCreateTimerTask+0x62>
 8006fda:	b672      	cpsid	i
 8006fdc:	e7fe      	b.n	8006fdc <xTimerCreateTimerTask+0x60>
	return xReturn;
 8006fde:	68fb      	ldr	r3, [r7, #12]
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b005      	add	sp, #20
 8006fe6:	bd90      	pop	{r4, r7, pc}
 8006fe8:	20000f58 	.word	0x20000f58
 8006fec:	08008670 	.word	0x08008670
 8006ff0:	080070fd 	.word	0x080070fd
 8006ff4:	20000f5c 	.word	0x20000f5c

08006ff8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ff8:	b590      	push	{r4, r7, lr}
 8006ffa:	b08b      	sub	sp, #44	; 0x2c
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007006:	2300      	movs	r3, #0
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <xTimerGenericCommand+0x1c>
 8007010:	b672      	cpsid	i
 8007012:	e7fe      	b.n	8007012 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007014:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <xTimerGenericCommand+0x90>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d030      	beq.n	800707e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800701c:	2414      	movs	r4, #20
 800701e:	193b      	adds	r3, r7, r4
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007024:	193b      	adds	r3, r7, r4
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800702a:	193b      	adds	r3, r7, r4
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b05      	cmp	r3, #5
 8007034:	dc19      	bgt.n	800706a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007036:	f7ff fde1 	bl	8006bfc <xTaskGetSchedulerState>
 800703a:	0003      	movs	r3, r0
 800703c:	2b02      	cmp	r3, #2
 800703e:	d109      	bne.n	8007054 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007040:	4b11      	ldr	r3, [pc, #68]	; (8007088 <xTimerGenericCommand+0x90>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007046:	1939      	adds	r1, r7, r4
 8007048:	2300      	movs	r3, #0
 800704a:	f7fe facd 	bl	80055e8 <xQueueGenericSend>
 800704e:	0003      	movs	r3, r0
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
 8007052:	e014      	b.n	800707e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <xTimerGenericCommand+0x90>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	2314      	movs	r3, #20
 800705a:	18f9      	adds	r1, r7, r3
 800705c:	2300      	movs	r3, #0
 800705e:	2200      	movs	r2, #0
 8007060:	f7fe fac2 	bl	80055e8 <xQueueGenericSend>
 8007064:	0003      	movs	r3, r0
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
 8007068:	e009      	b.n	800707e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <xTimerGenericCommand+0x90>)
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	2314      	movs	r3, #20
 8007072:	18f9      	adds	r1, r7, r3
 8007074:	2300      	movs	r3, #0
 8007076:	f7fe fb7b 	bl	8005770 <xQueueGenericSendFromISR>
 800707a:	0003      	movs	r3, r0
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007080:	0018      	movs	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	b00b      	add	sp, #44	; 0x2c
 8007086:	bd90      	pop	{r4, r7, pc}
 8007088:	20000f58 	.word	0x20000f58

0800708c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <prvProcessExpiredTimer+0x6c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3304      	adds	r3, #4
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7fe f932 	bl	800530e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d119      	bne.n	80070e6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	18d1      	adds	r1, r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f8b6 	bl	8007230 <prvInsertTimerInActiveList>
 80070c4:	1e03      	subs	r3, r0, #0
 80070c6:	d00e      	beq.n	80070e6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	f7ff ff90 	bl	8006ff8 <xTimerGenericCommand>
 80070d8:	0003      	movs	r3, r0
 80070da:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <prvProcessExpiredTimer+0x5a>
 80070e2:	b672      	cpsid	i
 80070e4:	e7fe      	b.n	80070e4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	0010      	movs	r0, r2
 80070ee:	4798      	blx	r3
}
 80070f0:	46c0      	nop			; (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b004      	add	sp, #16
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	20000f50 	.word	0x20000f50

080070fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007104:	2308      	movs	r3, #8
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	0018      	movs	r0, r3
 800710a:	f000 f851 	bl	80071b0 <prvGetNextExpireTime>
 800710e:	0003      	movs	r3, r0
 8007110:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f000 f803 	bl	8007124 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800711e:	f000 f8c9 	bl	80072b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007122:	e7ef      	b.n	8007104 <prvTimerTask+0x8>

08007124 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800712e:	f7ff f9cf 	bl	80064d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007132:	2308      	movs	r3, #8
 8007134:	18fb      	adds	r3, r7, r3
 8007136:	0018      	movs	r0, r3
 8007138:	f000 f85a 	bl	80071f0 <prvSampleTimeNow>
 800713c:	0003      	movs	r3, r0
 800713e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d129      	bne.n	800719a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10c      	bne.n	8007166 <prvProcessTimerOrBlockTask+0x42>
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	429a      	cmp	r2, r3
 8007152:	d808      	bhi.n	8007166 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007154:	f7ff f9c8 	bl	80064e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	0011      	movs	r1, r2
 800715e:	0018      	movs	r0, r3
 8007160:	f7ff ff94 	bl	800708c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007164:	e01b      	b.n	800719e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800716c:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <prvProcessTimerOrBlockTask+0x84>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	425a      	negs	r2, r3
 8007174:	4153      	adcs	r3, r2
 8007176:	b2db      	uxtb	r3, r3
 8007178:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800717a:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <prvProcessTimerOrBlockTask+0x88>)
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	0019      	movs	r1, r3
 8007188:	f7fe ff5c 	bl	8006044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800718c:	f7ff f9ac 	bl	80064e8 <xTaskResumeAll>
 8007190:	1e03      	subs	r3, r0, #0
 8007192:	d104      	bne.n	800719e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007194:	f000 fa4c 	bl	8007630 <vPortYield>
}
 8007198:	e001      	b.n	800719e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800719a:	f7ff f9a5 	bl	80064e8 <xTaskResumeAll>
}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b004      	add	sp, #16
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	20000f54 	.word	0x20000f54
 80071ac:	20000f58 	.word	0x20000f58

080071b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <prvGetNextExpireTime+0x3c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	425a      	negs	r2, r3
 80071c0:	4153      	adcs	r3, r2
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	001a      	movs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d105      	bne.n	80071de <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <prvGetNextExpireTime+0x3c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e001      	b.n	80071e2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071e2:	68fb      	ldr	r3, [r7, #12]
}
 80071e4:	0018      	movs	r0, r3
 80071e6:	46bd      	mov	sp, r7
 80071e8:	b004      	add	sp, #16
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000f50 	.word	0x20000f50

080071f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071f8:	f7ff fa02 	bl	8006600 <xTaskGetTickCount>
 80071fc:	0003      	movs	r3, r0
 80071fe:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007200:	4b0a      	ldr	r3, [pc, #40]	; (800722c <prvSampleTimeNow+0x3c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	429a      	cmp	r2, r3
 8007208:	d205      	bcs.n	8007216 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800720a:	f000 f8eb 	bl	80073e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e002      	b.n	800721c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <prvSampleTimeNow+0x3c>)
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	0018      	movs	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	b004      	add	sp, #16
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000f60 	.word	0x20000f60

08007230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d812      	bhi.n	800727c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	e01b      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800726a:	4b10      	ldr	r3, [pc, #64]	; (80072ac <prvInsertTimerInActiveList+0x7c>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3304      	adds	r3, #4
 8007272:	0019      	movs	r1, r3
 8007274:	0010      	movs	r0, r2
 8007276:	f7fe f814 	bl	80052a2 <vListInsert>
 800727a:	e012      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d206      	bcs.n	8007292 <prvInsertTimerInActiveList+0x62>
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e007      	b.n	80072a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <prvInsertTimerInActiveList+0x80>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	0019      	movs	r1, r3
 800729c:	0010      	movs	r0, r2
 800729e:	f7fe f800 	bl	80052a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072a2:	697b      	ldr	r3, [r7, #20]
}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b006      	add	sp, #24
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000f54 	.word	0x20000f54
 80072b0:	20000f50 	.word	0x20000f50

080072b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072b4:	b590      	push	{r4, r7, lr}
 80072b6:	b08d      	sub	sp, #52	; 0x34
 80072b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072ba:	e07f      	b.n	80073bc <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072bc:	2208      	movs	r2, #8
 80072be:	18bb      	adds	r3, r7, r2
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	da0f      	bge.n	80072e6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072c6:	18bb      	adds	r3, r7, r2
 80072c8:	3304      	adds	r3, #4
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <prvProcessReceivedCommands+0x22>
 80072d2:	b672      	cpsid	i
 80072d4:	e7fe      	b.n	80072d4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	6858      	ldr	r0, [r3, #4]
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	0019      	movs	r1, r3
 80072e4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072e6:	2208      	movs	r2, #8
 80072e8:	18bb      	adds	r3, r7, r2
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db64      	blt.n	80073ba <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072f0:	18bb      	adds	r3, r7, r2
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	3304      	adds	r3, #4
 8007302:	0018      	movs	r0, r3
 8007304:	f7fe f803 	bl	800530e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007308:	1d3b      	adds	r3, r7, #4
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff ff70 	bl	80071f0 <prvSampleTimeNow>
 8007310:	0003      	movs	r3, r0
 8007312:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007314:	2308      	movs	r3, #8
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b09      	cmp	r3, #9
 800731c:	d84e      	bhi.n	80073bc <prvProcessReceivedCommands+0x108>
 800731e:	009a      	lsls	r2, r3, #2
 8007320:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <prvProcessReceivedCommands+0x128>)
 8007322:	18d3      	adds	r3, r2, r3
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007328:	2408      	movs	r4, #8
 800732a:	193b      	adds	r3, r7, r4
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	18d1      	adds	r1, r2, r3
 8007334:	193b      	adds	r3, r7, r4
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	6a38      	ldr	r0, [r7, #32]
 800733c:	f7ff ff78 	bl	8007230 <prvInsertTimerInActiveList>
 8007340:	1e03      	subs	r3, r0, #0
 8007342:	d03b      	beq.n	80073bc <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	6a3a      	ldr	r2, [r7, #32]
 800734a:	0010      	movs	r0, r2
 800734c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d132      	bne.n	80073bc <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007356:	193b      	adds	r3, r7, r4
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	18d2      	adds	r2, r2, r3
 8007360:	6a38      	ldr	r0, [r7, #32]
 8007362:	2300      	movs	r3, #0
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	2300      	movs	r3, #0
 8007368:	2100      	movs	r1, #0
 800736a:	f7ff fe45 	bl	8006ff8 <xTimerGenericCommand>
 800736e:	0003      	movs	r3, r0
 8007370:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d121      	bne.n	80073bc <prvProcessReceivedCommands+0x108>
 8007378:	b672      	cpsid	i
 800737a:	e7fe      	b.n	800737a <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800737c:	2308      	movs	r3, #8
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <prvProcessReceivedCommands+0xde>
 800738e:	b672      	cpsid	i
 8007390:	e7fe      	b.n	8007390 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	699a      	ldr	r2, [r3, #24]
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	18d1      	adds	r1, r2, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	6a38      	ldr	r0, [r7, #32]
 80073a0:	f7ff ff46 	bl	8007230 <prvInsertTimerInActiveList>
					break;
 80073a4:	e00a      	b.n	80073bc <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	222c      	movs	r2, #44	; 0x2c
 80073aa:	5c9b      	ldrb	r3, [r3, r2]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f000 fa8a 	bl	80078cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073b8:	e000      	b.n	80073bc <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073ba:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <prvProcessReceivedCommands+0x12c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2208      	movs	r2, #8
 80073c2:	18b9      	adds	r1, r7, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7fe faa8 	bl	800591c <xQueueReceive>
 80073cc:	1e03      	subs	r3, r0, #0
 80073ce:	d000      	beq.n	80073d2 <prvProcessReceivedCommands+0x11e>
 80073d0:	e774      	b.n	80072bc <prvProcessReceivedCommands+0x8>
	}
}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	46c0      	nop			; (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b00b      	add	sp, #44	; 0x2c
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	08008700 	.word	0x08008700
 80073e0:	20000f58 	.word	0x20000f58

080073e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ea:	e03e      	b.n	800746a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ec:	4b28      	ldr	r3, [pc, #160]	; (8007490 <prvSwitchTimerLists+0xac>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073f6:	4b26      	ldr	r3, [pc, #152]	; (8007490 <prvSwitchTimerLists+0xac>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3304      	adds	r3, #4
 8007404:	0018      	movs	r0, r3
 8007406:	f7fd ff82 	bl	800530e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	0010      	movs	r0, r2
 8007412:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d126      	bne.n	800746a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	18d3      	adds	r3, r2, r3
 8007424:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	429a      	cmp	r2, r3
 800742c:	d90e      	bls.n	800744c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <prvSwitchTimerLists+0xac>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3304      	adds	r3, #4
 8007442:	0019      	movs	r1, r3
 8007444:	0010      	movs	r0, r2
 8007446:	f7fd ff2c 	bl	80052a2 <vListInsert>
 800744a:	e00e      	b.n	800746a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	2100      	movs	r1, #0
 8007458:	f7ff fdce 	bl	8006ff8 <xTimerGenericCommand>
 800745c:	0003      	movs	r3, r0
 800745e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <prvSwitchTimerLists+0x86>
 8007466:	b672      	cpsid	i
 8007468:	e7fe      	b.n	8007468 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <prvSwitchTimerLists+0xac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1bb      	bne.n	80073ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <prvSwitchTimerLists+0xac>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <prvSwitchTimerLists+0xb0>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4b04      	ldr	r3, [pc, #16]	; (8007490 <prvSwitchTimerLists+0xac>)
 8007480:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <prvSwitchTimerLists+0xb0>)
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	601a      	str	r2, [r3, #0]
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	b006      	add	sp, #24
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000f50 	.word	0x20000f50
 8007494:	20000f54 	.word	0x20000f54

08007498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800749e:	f000 f8d7 	bl	8007650 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074a2:	4b16      	ldr	r3, [pc, #88]	; (80074fc <prvCheckForValidListAndQueue+0x64>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d123      	bne.n	80074f2 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 80074aa:	4b15      	ldr	r3, [pc, #84]	; (8007500 <prvCheckForValidListAndQueue+0x68>)
 80074ac:	0018      	movs	r0, r3
 80074ae:	f7fd fead 	bl	800520c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <prvCheckForValidListAndQueue+0x6c>)
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7fd fea9 	bl	800520c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074ba:	4b13      	ldr	r3, [pc, #76]	; (8007508 <prvCheckForValidListAndQueue+0x70>)
 80074bc:	4a10      	ldr	r2, [pc, #64]	; (8007500 <prvCheckForValidListAndQueue+0x68>)
 80074be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074c0:	4b12      	ldr	r3, [pc, #72]	; (800750c <prvCheckForValidListAndQueue+0x74>)
 80074c2:	4a10      	ldr	r2, [pc, #64]	; (8007504 <prvCheckForValidListAndQueue+0x6c>)
 80074c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074c6:	4b12      	ldr	r3, [pc, #72]	; (8007510 <prvCheckForValidListAndQueue+0x78>)
 80074c8:	4a12      	ldr	r2, [pc, #72]	; (8007514 <prvCheckForValidListAndQueue+0x7c>)
 80074ca:	2100      	movs	r1, #0
 80074cc:	9100      	str	r1, [sp, #0]
 80074ce:	2110      	movs	r1, #16
 80074d0:	200a      	movs	r0, #10
 80074d2:	f7fd ff98 	bl	8005406 <xQueueGenericCreateStatic>
 80074d6:	0002      	movs	r2, r0
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <prvCheckForValidListAndQueue+0x64>)
 80074da:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <prvCheckForValidListAndQueue+0x64>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <prvCheckForValidListAndQueue+0x64>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0b      	ldr	r2, [pc, #44]	; (8007518 <prvCheckForValidListAndQueue+0x80>)
 80074ea:	0011      	movs	r1, r2
 80074ec:	0018      	movs	r0, r3
 80074ee:	f7fe fd57 	bl	8005fa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074f2:	f000 f8bf 	bl	8007674 <vPortExitCritical>
}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000f58 	.word	0x20000f58
 8007500:	20000f28 	.word	0x20000f28
 8007504:	20000f3c 	.word	0x20000f3c
 8007508:	20000f50 	.word	0x20000f50
 800750c:	20000f54 	.word	0x20000f54
 8007510:	20001004 	.word	0x20001004
 8007514:	20000f64 	.word	0x20000f64
 8007518:	08008678 	.word	0x08008678

0800751c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3b04      	subs	r3, #4
 800752c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2280      	movs	r2, #128	; 0x80
 8007532:	0452      	lsls	r2, r2, #17
 8007534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b04      	subs	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b04      	subs	r3, #4
 8007546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007548:	4a08      	ldr	r2, [pc, #32]	; (800756c <pxPortInitialiseStack+0x50>)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3b14      	subs	r3, #20
 8007552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3b20      	subs	r3, #32
 800755e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007560:	68fb      	ldr	r3, [r7, #12]
}
 8007562:	0018      	movs	r0, r3
 8007564:	46bd      	mov	sp, r7
 8007566:	b004      	add	sp, #16
 8007568:	bd80      	pop	{r7, pc}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	08007571 	.word	0x08007571

08007570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007576:	2300      	movs	r3, #0
 8007578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800757a:	4b08      	ldr	r3, [pc, #32]	; (800759c <prvTaskExitError+0x2c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3301      	adds	r3, #1
 8007580:	d001      	beq.n	8007586 <prvTaskExitError+0x16>
 8007582:	b672      	cpsid	i
 8007584:	e7fe      	b.n	8007584 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007586:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0fc      	beq.n	800758a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	46bd      	mov	sp, r7
 8007596:	b002      	add	sp, #8
 8007598:	bd80      	pop	{r7, pc}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	2000000c 	.word	0x2000000c

080075a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	0000      	movs	r0, r0
 80075ac:	0000      	movs	r0, r0
	...

080075b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <pxCurrentTCBConst2>)
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	3020      	adds	r0, #32
 80075b8:	f380 8809 	msr	PSP, r0
 80075bc:	2002      	movs	r0, #2
 80075be:	f380 8814 	msr	CONTROL, r0
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80075c8:	46ae      	mov	lr, r5
 80075ca:	bc08      	pop	{r3}
 80075cc:	bc04      	pop	{r2}
 80075ce:	b662      	cpsie	i
 80075d0:	4718      	bx	r3
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	46c0      	nop			; (mov r8, r8)
 80075de:	46c0      	nop			; (mov r8, r8)

080075e0 <pxCurrentTCBConst2>:
 80075e0:	20000a28 	.word	0x20000a28
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	46c0      	nop			; (mov r8, r8)

080075e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80075ec:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <xPortStartScheduler+0x40>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <xPortStartScheduler+0x40>)
 80075f2:	21ff      	movs	r1, #255	; 0xff
 80075f4:	0409      	lsls	r1, r1, #16
 80075f6:	430a      	orrs	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <xPortStartScheduler+0x40>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <xPortStartScheduler+0x40>)
 8007600:	21ff      	movs	r1, #255	; 0xff
 8007602:	0609      	lsls	r1, r1, #24
 8007604:	430a      	orrs	r2, r1
 8007606:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007608:	f000 f898 	bl	800773c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <xPortStartScheduler+0x44>)
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007612:	f7ff ffcd 	bl	80075b0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007616:	f7ff f8b5 	bl	8006784 <vTaskSwitchContext>
	prvTaskExitError();
 800761a:	f7ff ffa9 	bl	8007570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	e000ed20 	.word	0xe000ed20
 800762c:	2000000c 	.word	0x2000000c

08007630 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <vPortYield+0x1c>)
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	0552      	lsls	r2, r2, #21
 800763a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800763c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007640:	f3bf 8f6f 	isb	sy
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007654:	b672      	cpsid	i
    uxCriticalNesting++;
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <vPortEnterCritical+0x20>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <vPortEnterCritical+0x20>)
 800765e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007660:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007664:	f3bf 8f6f 	isb	sy
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	2000000c 	.word	0x2000000c

08007674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <vPortExitCritical+0x2c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <vPortExitCritical+0x10>
 8007680:	b672      	cpsid	i
 8007682:	e7fe      	b.n	8007682 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007684:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <vPortExitCritical+0x2c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	1e5a      	subs	r2, r3, #1
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <vPortExitCritical+0x2c>)
 800768c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800768e:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <vPortExitCritical+0x2c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d100      	bne.n	8007698 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007696:	b662      	cpsie	i
    }
}
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	2000000c 	.word	0x2000000c

080076a4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80076a4:	f3ef 8010 	mrs	r0, PRIMASK
 80076a8:	b672      	cpsid	i
 80076aa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80076ac:	46c0      	nop			; (mov r8, r8)
 80076ae:	0018      	movs	r0, r3

080076b0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80076b0:	f380 8810 	msr	PRIMASK, r0
 80076b4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80076b6:	46c0      	nop			; (mov r8, r8)
	...

080076c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076c0:	f3ef 8009 	mrs	r0, PSP
 80076c4:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <pxCurrentTCBConst>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	3820      	subs	r0, #32
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80076ce:	4644      	mov	r4, r8
 80076d0:	464d      	mov	r5, r9
 80076d2:	4656      	mov	r6, sl
 80076d4:	465f      	mov	r7, fp
 80076d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80076d8:	b508      	push	{r3, lr}
 80076da:	b672      	cpsid	i
 80076dc:	f7ff f852 	bl	8006784 <vTaskSwitchContext>
 80076e0:	b662      	cpsie	i
 80076e2:	bc0c      	pop	{r2, r3}
 80076e4:	6811      	ldr	r1, [r2, #0]
 80076e6:	6808      	ldr	r0, [r1, #0]
 80076e8:	3010      	adds	r0, #16
 80076ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80076ec:	46a0      	mov	r8, r4
 80076ee:	46a9      	mov	r9, r5
 80076f0:	46b2      	mov	sl, r6
 80076f2:	46bb      	mov	fp, r7
 80076f4:	f380 8809 	msr	PSP, r0
 80076f8:	3820      	subs	r0, #32
 80076fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80076fc:	4718      	bx	r3
 80076fe:	46c0      	nop			; (mov r8, r8)

08007700 <pxCurrentTCBConst>:
 8007700:	20000a28 	.word	0x20000a28
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007704:	46c0      	nop			; (mov r8, r8)
 8007706:	46c0      	nop			; (mov r8, r8)

08007708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800770e:	f7ff ffc9 	bl	80076a4 <ulSetInterruptMaskFromISR>
 8007712:	0003      	movs	r3, r0
 8007714:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007716:	f7fe ff81 	bl	800661c <xTaskIncrementTick>
 800771a:	1e03      	subs	r3, r0, #0
 800771c:	d003      	beq.n	8007726 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <SysTick_Handler+0x30>)
 8007720:	2280      	movs	r2, #128	; 0x80
 8007722:	0552      	lsls	r2, r2, #21
 8007724:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0018      	movs	r0, r3
 800772a:	f7ff ffc1 	bl	80076b0 <vClearInterruptMaskFromISR>
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b002      	add	sp, #8
 8007734:	bd80      	pop	{r7, pc}
 8007736:	46c0      	nop			; (mov r8, r8)
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <prvSetupTimerInterrupt+0x34>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <prvSetupTimerInterrupt+0x38>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <prvSetupTimerInterrupt+0x3c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	22fa      	movs	r2, #250	; 0xfa
 8007752:	0091      	lsls	r1, r2, #2
 8007754:	0018      	movs	r0, r3
 8007756:	f7f8 fce1 	bl	800011c <__udivsi3>
 800775a:	0003      	movs	r3, r0
 800775c:	001a      	movs	r2, r3
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <prvSetupTimerInterrupt+0x40>)
 8007760:	3a01      	subs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <prvSetupTimerInterrupt+0x34>)
 8007766:	2207      	movs	r2, #7
 8007768:	601a      	str	r2, [r3, #0]
}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	e000e010 	.word	0xe000e010
 8007774:	e000e018 	.word	0xe000e018
 8007778:	20000000 	.word	0x20000000
 800777c:	e000e014 	.word	0xe000e014

08007780 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800778c:	f7fe fea0 	bl	80064d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007790:	4b49      	ldr	r3, [pc, #292]	; (80078b8 <pvPortMalloc+0x138>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007798:	f000 f8e0 	bl	800795c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800779c:	4b47      	ldr	r3, [pc, #284]	; (80078bc <pvPortMalloc+0x13c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	4013      	ands	r3, r2
 80077a4:	d000      	beq.n	80077a8 <pvPortMalloc+0x28>
 80077a6:	e079      	b.n	800789c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d012      	beq.n	80077d4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80077ae:	2208      	movs	r2, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	189b      	adds	r3, r3, r2
 80077b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2207      	movs	r2, #7
 80077ba:	4013      	ands	r3, r2
 80077bc:	d00a      	beq.n	80077d4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2207      	movs	r2, #7
 80077c2:	4393      	bics	r3, r2
 80077c4:	3308      	adds	r3, #8
 80077c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2207      	movs	r2, #7
 80077cc:	4013      	ands	r3, r2
 80077ce:	d001      	beq.n	80077d4 <pvPortMalloc+0x54>
 80077d0:	b672      	cpsid	i
 80077d2:	e7fe      	b.n	80077d2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d060      	beq.n	800789c <pvPortMalloc+0x11c>
 80077da:	4b39      	ldr	r3, [pc, #228]	; (80078c0 <pvPortMalloc+0x140>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d85b      	bhi.n	800789c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077e4:	4b37      	ldr	r3, [pc, #220]	; (80078c4 <pvPortMalloc+0x144>)
 80077e6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80077e8:	4b36      	ldr	r3, [pc, #216]	; (80078c4 <pvPortMalloc+0x144>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ee:	e004      	b.n	80077fa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	d903      	bls.n	800780c <pvPortMalloc+0x8c>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1f1      	bne.n	80077f0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800780c:	4b2a      	ldr	r3, [pc, #168]	; (80078b8 <pvPortMalloc+0x138>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	429a      	cmp	r2, r3
 8007814:	d042      	beq.n	800789c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2208      	movs	r2, #8
 800781c:	189b      	adds	r3, r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	2308      	movs	r3, #8
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	429a      	cmp	r2, r3
 8007836:	d916      	bls.n	8007866 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	18d3      	adds	r3, r2, r3
 800783e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2207      	movs	r2, #7
 8007844:	4013      	ands	r3, r2
 8007846:	d001      	beq.n	800784c <pvPortMalloc+0xcc>
 8007848:	b672      	cpsid	i
 800784a:	e7fe      	b.n	800784a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f8db 	bl	8007a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <pvPortMalloc+0x140>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <pvPortMalloc+0x140>)
 8007872:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <pvPortMalloc+0x140>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	4b13      	ldr	r3, [pc, #76]	; (80078c8 <pvPortMalloc+0x148>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d203      	bcs.n	8007888 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <pvPortMalloc+0x140>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <pvPortMalloc+0x148>)
 8007886:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <pvPortMalloc+0x13c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	431a      	orrs	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800789c:	f7fe fe24 	bl	80064e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2207      	movs	r2, #7
 80078a4:	4013      	ands	r3, r2
 80078a6:	d001      	beq.n	80078ac <pvPortMalloc+0x12c>
 80078a8:	b672      	cpsid	i
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0x12a>
	return pvReturn;
 80078ac:	68fb      	ldr	r3, [r7, #12]
}
 80078ae:	0018      	movs	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	b006      	add	sp, #24
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	46c0      	nop			; (mov r8, r8)
 80078b8:	20001c5c 	.word	0x20001c5c
 80078bc:	20001c68 	.word	0x20001c68
 80078c0:	20001c60 	.word	0x20001c60
 80078c4:	20001c54 	.word	0x20001c54
 80078c8:	20001c64 	.word	0x20001c64

080078cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d035      	beq.n	800794a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078de:	2308      	movs	r3, #8
 80078e0:	425b      	negs	r3, r3
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	18d3      	adds	r3, r2, r3
 80078e6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	4b18      	ldr	r3, [pc, #96]	; (8007954 <vPortFree+0x88>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4013      	ands	r3, r2
 80078f6:	d101      	bne.n	80078fc <vPortFree+0x30>
 80078f8:	b672      	cpsid	i
 80078fa:	e7fe      	b.n	80078fa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <vPortFree+0x3c>
 8007904:	b672      	cpsid	i
 8007906:	e7fe      	b.n	8007906 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	4b11      	ldr	r3, [pc, #68]	; (8007954 <vPortFree+0x88>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4013      	ands	r3, r2
 8007912:	d01a      	beq.n	800794a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d116      	bne.n	800794a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <vPortFree+0x88>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	43db      	mvns	r3, r3
 8007926:	401a      	ands	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800792c:	f7fe fdd0 	bl	80064d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	4b08      	ldr	r3, [pc, #32]	; (8007958 <vPortFree+0x8c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	18d2      	adds	r2, r2, r3
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <vPortFree+0x8c>)
 800793c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	0018      	movs	r0, r3
 8007942:	f000 f86b 	bl	8007a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007946:	f7fe fdcf 	bl	80064e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	46bd      	mov	sp, r7
 800794e:	b004      	add	sp, #16
 8007950:	bd80      	pop	{r7, pc}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	20001c68 	.word	0x20001c68
 8007958:	20001c60 	.word	0x20001c60

0800795c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007962:	23c0      	movs	r3, #192	; 0xc0
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007968:	4b26      	ldr	r3, [pc, #152]	; (8007a04 <prvHeapInit+0xa8>)
 800796a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2207      	movs	r2, #7
 8007970:	4013      	ands	r3, r2
 8007972:	d00c      	beq.n	800798e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3307      	adds	r3, #7
 8007978:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2207      	movs	r2, #7
 800797e:	4393      	bics	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <prvHeapInit+0xa8>)
 800798a:	18d3      	adds	r3, r2, r3
 800798c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007992:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <prvHeapInit+0xac>)
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <prvHeapInit+0xac>)
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	18d3      	adds	r3, r2, r3
 80079a4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079a6:	2208      	movs	r2, #8
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2207      	movs	r2, #7
 80079b2:	4393      	bics	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <prvHeapInit+0xb0>)
 80079ba:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <prvHeapInit+0xb0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079c4:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <prvHeapInit+0xb0>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80079da:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <prvHeapInit+0xb0>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <prvHeapInit+0xb4>)
 80079e8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <prvHeapInit+0xb8>)
 80079f0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80079f2:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <prvHeapInit+0xbc>)
 80079f4:	2280      	movs	r2, #128	; 0x80
 80079f6:	0612      	lsls	r2, r2, #24
 80079f8:	601a      	str	r2, [r3, #0]
}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b004      	add	sp, #16
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	20001054 	.word	0x20001054
 8007a08:	20001c54 	.word	0x20001c54
 8007a0c:	20001c5c 	.word	0x20001c5c
 8007a10:	20001c64 	.word	0x20001c64
 8007a14:	20001c60 	.word	0x20001c60
 8007a18:	20001c68 	.word	0x20001c68

08007a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a24:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	e002      	b.n	8007a30 <prvInsertBlockIntoFreeList+0x14>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d8f7      	bhi.n	8007a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	18d3      	adds	r3, r2, r3
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d108      	bne.n	8007a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	18d2      	adds	r2, r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	18d2      	adds	r2, r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d118      	bne.n	8007aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <prvInsertBlockIntoFreeList+0xac>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d00d      	beq.n	8007a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	18d2      	adds	r2, r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e008      	b.n	8007aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <prvInsertBlockIntoFreeList+0xac>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	e003      	b.n	8007aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d002      	beq.n	8007aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aba:	46c0      	nop			; (mov r8, r8)
 8007abc:	46bd      	mov	sp, r7
 8007abe:	b004      	add	sp, #16
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	20001c54 	.word	0x20001c54
 8007ac8:	20001c5c 	.word	0x20001c5c

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	; (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	20000010 	.word	0x20000010

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	2600      	movs	r6, #0
 8007adc:	4d0c      	ldr	r5, [pc, #48]	; (8007b10 <__libc_init_array+0x38>)
 8007ade:	4c0d      	ldr	r4, [pc, #52]	; (8007b14 <__libc_init_array+0x3c>)
 8007ae0:	1b64      	subs	r4, r4, r5
 8007ae2:	10a4      	asrs	r4, r4, #2
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	2600      	movs	r6, #0
 8007aea:	f000 fcff 	bl	80084ec <_init>
 8007aee:	4d0a      	ldr	r5, [pc, #40]	; (8007b18 <__libc_init_array+0x40>)
 8007af0:	4c0a      	ldr	r4, [pc, #40]	; (8007b1c <__libc_init_array+0x44>)
 8007af2:	1b64      	subs	r4, r4, r5
 8007af4:	10a4      	asrs	r4, r4, #2
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	00b3      	lsls	r3, r6, #2
 8007afe:	58eb      	ldr	r3, [r5, r3]
 8007b00:	4798      	blx	r3
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	00b3      	lsls	r3, r6, #2
 8007b08:	58eb      	ldr	r3, [r5, r3]
 8007b0a:	4798      	blx	r3
 8007b0c:	3601      	adds	r6, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	080087bc 	.word	0x080087bc
 8007b14:	080087bc 	.word	0x080087bc
 8007b18:	080087bc 	.word	0x080087bc
 8007b1c:	080087c0 	.word	0x080087c0

08007b20 <__retarget_lock_acquire_recursive>:
 8007b20:	4770      	bx	lr

08007b22 <__retarget_lock_release_recursive>:
 8007b22:	4770      	bx	lr

08007b24 <memcpy>:
 8007b24:	2300      	movs	r3, #0
 8007b26:	b510      	push	{r4, lr}
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d100      	bne.n	8007b2e <memcpy+0xa>
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	5ccc      	ldrb	r4, [r1, r3]
 8007b30:	54c4      	strb	r4, [r0, r3]
 8007b32:	3301      	adds	r3, #1
 8007b34:	e7f8      	b.n	8007b28 <memcpy+0x4>

08007b36 <memset>:
 8007b36:	0003      	movs	r3, r0
 8007b38:	1882      	adds	r2, r0, r2
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d100      	bne.n	8007b40 <memset+0xa>
 8007b3e:	4770      	bx	lr
 8007b40:	7019      	strb	r1, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	e7f9      	b.n	8007b3a <memset+0x4>
	...

08007b48 <sbrk_aligned>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4e0f      	ldr	r6, [pc, #60]	; (8007b88 <sbrk_aligned+0x40>)
 8007b4c:	000d      	movs	r5, r1
 8007b4e:	6831      	ldr	r1, [r6, #0]
 8007b50:	0004      	movs	r4, r0
 8007b52:	2900      	cmp	r1, #0
 8007b54:	d102      	bne.n	8007b5c <sbrk_aligned+0x14>
 8007b56:	f000 f903 	bl	8007d60 <_sbrk_r>
 8007b5a:	6030      	str	r0, [r6, #0]
 8007b5c:	0029      	movs	r1, r5
 8007b5e:	0020      	movs	r0, r4
 8007b60:	f000 f8fe 	bl	8007d60 <_sbrk_r>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d00a      	beq.n	8007b7e <sbrk_aligned+0x36>
 8007b68:	2303      	movs	r3, #3
 8007b6a:	1cc5      	adds	r5, r0, #3
 8007b6c:	439d      	bics	r5, r3
 8007b6e:	42a8      	cmp	r0, r5
 8007b70:	d007      	beq.n	8007b82 <sbrk_aligned+0x3a>
 8007b72:	1a29      	subs	r1, r5, r0
 8007b74:	0020      	movs	r0, r4
 8007b76:	f000 f8f3 	bl	8007d60 <_sbrk_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	d101      	bne.n	8007b82 <sbrk_aligned+0x3a>
 8007b7e:	2501      	movs	r5, #1
 8007b80:	426d      	negs	r5, r5
 8007b82:	0028      	movs	r0, r5
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	20001c74 	.word	0x20001c74

08007b8c <_malloc_r>:
 8007b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b8e:	2203      	movs	r2, #3
 8007b90:	1ccb      	adds	r3, r1, #3
 8007b92:	4393      	bics	r3, r2
 8007b94:	3308      	adds	r3, #8
 8007b96:	0006      	movs	r6, r0
 8007b98:	001f      	movs	r7, r3
 8007b9a:	2b0c      	cmp	r3, #12
 8007b9c:	d232      	bcs.n	8007c04 <_malloc_r+0x78>
 8007b9e:	270c      	movs	r7, #12
 8007ba0:	42b9      	cmp	r1, r7
 8007ba2:	d831      	bhi.n	8007c08 <_malloc_r+0x7c>
 8007ba4:	0030      	movs	r0, r6
 8007ba6:	f000 f90d 	bl	8007dc4 <__malloc_lock>
 8007baa:	4d32      	ldr	r5, [pc, #200]	; (8007c74 <_malloc_r+0xe8>)
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	001c      	movs	r4, r3
 8007bb0:	2c00      	cmp	r4, #0
 8007bb2:	d12e      	bne.n	8007c12 <_malloc_r+0x86>
 8007bb4:	0039      	movs	r1, r7
 8007bb6:	0030      	movs	r0, r6
 8007bb8:	f7ff ffc6 	bl	8007b48 <sbrk_aligned>
 8007bbc:	0004      	movs	r4, r0
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d11e      	bne.n	8007c00 <_malloc_r+0x74>
 8007bc2:	682c      	ldr	r4, [r5, #0]
 8007bc4:	0025      	movs	r5, r4
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d14a      	bne.n	8007c60 <_malloc_r+0xd4>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	0029      	movs	r1, r5
 8007bce:	18e3      	adds	r3, r4, r3
 8007bd0:	0030      	movs	r0, r6
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	f000 f8c4 	bl	8007d60 <_sbrk_r>
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	4283      	cmp	r3, r0
 8007bdc:	d143      	bne.n	8007c66 <_malloc_r+0xda>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	3703      	adds	r7, #3
 8007be2:	1aff      	subs	r7, r7, r3
 8007be4:	2303      	movs	r3, #3
 8007be6:	439f      	bics	r7, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	2f0c      	cmp	r7, #12
 8007bec:	d200      	bcs.n	8007bf0 <_malloc_r+0x64>
 8007bee:	270c      	movs	r7, #12
 8007bf0:	0039      	movs	r1, r7
 8007bf2:	0030      	movs	r0, r6
 8007bf4:	f7ff ffa8 	bl	8007b48 <sbrk_aligned>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d034      	beq.n	8007c66 <_malloc_r+0xda>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	19df      	adds	r7, r3, r7
 8007c00:	6027      	str	r7, [r4, #0]
 8007c02:	e013      	b.n	8007c2c <_malloc_r+0xa0>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dacb      	bge.n	8007ba0 <_malloc_r+0x14>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	6033      	str	r3, [r6, #0]
 8007c0e:	0028      	movs	r0, r5
 8007c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	1bd1      	subs	r1, r2, r7
 8007c16:	d420      	bmi.n	8007c5a <_malloc_r+0xce>
 8007c18:	290b      	cmp	r1, #11
 8007c1a:	d917      	bls.n	8007c4c <_malloc_r+0xc0>
 8007c1c:	19e2      	adds	r2, r4, r7
 8007c1e:	6027      	str	r7, [r4, #0]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	d111      	bne.n	8007c48 <_malloc_r+0xbc>
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	6053      	str	r3, [r2, #4]
 8007c2c:	0030      	movs	r0, r6
 8007c2e:	0025      	movs	r5, r4
 8007c30:	f000 f8d0 	bl	8007dd4 <__malloc_unlock>
 8007c34:	2207      	movs	r2, #7
 8007c36:	350b      	adds	r5, #11
 8007c38:	1d23      	adds	r3, r4, #4
 8007c3a:	4395      	bics	r5, r2
 8007c3c:	1aea      	subs	r2, r5, r3
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	d0e5      	beq.n	8007c0e <_malloc_r+0x82>
 8007c42:	1b5b      	subs	r3, r3, r5
 8007c44:	50a3      	str	r3, [r4, r2]
 8007c46:	e7e2      	b.n	8007c0e <_malloc_r+0x82>
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e7ec      	b.n	8007c26 <_malloc_r+0x9a>
 8007c4c:	6862      	ldr	r2, [r4, #4]
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	d101      	bne.n	8007c56 <_malloc_r+0xca>
 8007c52:	602a      	str	r2, [r5, #0]
 8007c54:	e7ea      	b.n	8007c2c <_malloc_r+0xa0>
 8007c56:	605a      	str	r2, [r3, #4]
 8007c58:	e7e8      	b.n	8007c2c <_malloc_r+0xa0>
 8007c5a:	0023      	movs	r3, r4
 8007c5c:	6864      	ldr	r4, [r4, #4]
 8007c5e:	e7a7      	b.n	8007bb0 <_malloc_r+0x24>
 8007c60:	002c      	movs	r4, r5
 8007c62:	686d      	ldr	r5, [r5, #4]
 8007c64:	e7af      	b.n	8007bc6 <_malloc_r+0x3a>
 8007c66:	230c      	movs	r3, #12
 8007c68:	0030      	movs	r0, r6
 8007c6a:	6033      	str	r3, [r6, #0]
 8007c6c:	f000 f8b2 	bl	8007dd4 <__malloc_unlock>
 8007c70:	e7cd      	b.n	8007c0e <_malloc_r+0x82>
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	20001c70 	.word	0x20001c70

08007c78 <cleanup_glue>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	000d      	movs	r5, r1
 8007c7c:	6809      	ldr	r1, [r1, #0]
 8007c7e:	0004      	movs	r4, r0
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d001      	beq.n	8007c88 <cleanup_glue+0x10>
 8007c84:	f7ff fff8 	bl	8007c78 <cleanup_glue>
 8007c88:	0029      	movs	r1, r5
 8007c8a:	0020      	movs	r0, r4
 8007c8c:	f000 f8aa 	bl	8007de4 <_free_r>
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c94 <_reclaim_reent>:
 8007c94:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <_reclaim_reent+0xc8>)
 8007c96:	b570      	push	{r4, r5, r6, lr}
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	0004      	movs	r4, r0
 8007c9c:	4283      	cmp	r3, r0
 8007c9e:	d049      	beq.n	8007d34 <_reclaim_reent+0xa0>
 8007ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <_reclaim_reent+0x28>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	42ab      	cmp	r3, r5
 8007cac:	d147      	bne.n	8007d3e <_reclaim_reent+0xaa>
 8007cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	d002      	beq.n	8007cbc <_reclaim_reent+0x28>
 8007cb6:	0020      	movs	r0, r4
 8007cb8:	f000 f894 	bl	8007de4 <_free_r>
 8007cbc:	6961      	ldr	r1, [r4, #20]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d002      	beq.n	8007cc8 <_reclaim_reent+0x34>
 8007cc2:	0020      	movs	r0, r4
 8007cc4:	f000 f88e 	bl	8007de4 <_free_r>
 8007cc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	d002      	beq.n	8007cd4 <_reclaim_reent+0x40>
 8007cce:	0020      	movs	r0, r4
 8007cd0:	f000 f888 	bl	8007de4 <_free_r>
 8007cd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d002      	beq.n	8007ce0 <_reclaim_reent+0x4c>
 8007cda:	0020      	movs	r0, r4
 8007cdc:	f000 f882 	bl	8007de4 <_free_r>
 8007ce0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	d002      	beq.n	8007cec <_reclaim_reent+0x58>
 8007ce6:	0020      	movs	r0, r4
 8007ce8:	f000 f87c 	bl	8007de4 <_free_r>
 8007cec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cee:	2900      	cmp	r1, #0
 8007cf0:	d002      	beq.n	8007cf8 <_reclaim_reent+0x64>
 8007cf2:	0020      	movs	r0, r4
 8007cf4:	f000 f876 	bl	8007de4 <_free_r>
 8007cf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cfa:	2900      	cmp	r1, #0
 8007cfc:	d002      	beq.n	8007d04 <_reclaim_reent+0x70>
 8007cfe:	0020      	movs	r0, r4
 8007d00:	f000 f870 	bl	8007de4 <_free_r>
 8007d04:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d06:	2900      	cmp	r1, #0
 8007d08:	d002      	beq.n	8007d10 <_reclaim_reent+0x7c>
 8007d0a:	0020      	movs	r0, r4
 8007d0c:	f000 f86a 	bl	8007de4 <_free_r>
 8007d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d12:	2900      	cmp	r1, #0
 8007d14:	d002      	beq.n	8007d1c <_reclaim_reent+0x88>
 8007d16:	0020      	movs	r0, r4
 8007d18:	f000 f864 	bl	8007de4 <_free_r>
 8007d1c:	69a3      	ldr	r3, [r4, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <_reclaim_reent+0xa0>
 8007d22:	0020      	movs	r0, r4
 8007d24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d26:	4798      	blx	r3
 8007d28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d002      	beq.n	8007d34 <_reclaim_reent+0xa0>
 8007d2e:	0020      	movs	r0, r4
 8007d30:	f7ff ffa2 	bl	8007c78 <cleanup_glue>
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	5949      	ldr	r1, [r1, r5]
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	d108      	bne.n	8007d4e <_reclaim_reent+0xba>
 8007d3c:	3504      	adds	r5, #4
 8007d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d40:	68d9      	ldr	r1, [r3, #12]
 8007d42:	2d80      	cmp	r5, #128	; 0x80
 8007d44:	d1f7      	bne.n	8007d36 <_reclaim_reent+0xa2>
 8007d46:	0020      	movs	r0, r4
 8007d48:	f000 f84c 	bl	8007de4 <_free_r>
 8007d4c:	e7af      	b.n	8007cae <_reclaim_reent+0x1a>
 8007d4e:	680e      	ldr	r6, [r1, #0]
 8007d50:	0020      	movs	r0, r4
 8007d52:	f000 f847 	bl	8007de4 <_free_r>
 8007d56:	0031      	movs	r1, r6
 8007d58:	e7ee      	b.n	8007d38 <_reclaim_reent+0xa4>
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	20000010 	.word	0x20000010

08007d60 <_sbrk_r>:
 8007d60:	2300      	movs	r3, #0
 8007d62:	b570      	push	{r4, r5, r6, lr}
 8007d64:	4d06      	ldr	r5, [pc, #24]	; (8007d80 <_sbrk_r+0x20>)
 8007d66:	0004      	movs	r4, r0
 8007d68:	0008      	movs	r0, r1
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	f7f9 fe16 	bl	800199c <_sbrk>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d103      	bne.n	8007d7c <_sbrk_r+0x1c>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d000      	beq.n	8007d7c <_sbrk_r+0x1c>
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	20001c78 	.word	0x20001c78

08007d84 <siprintf>:
 8007d84:	b40e      	push	{r1, r2, r3}
 8007d86:	b500      	push	{lr}
 8007d88:	490b      	ldr	r1, [pc, #44]	; (8007db8 <siprintf+0x34>)
 8007d8a:	b09c      	sub	sp, #112	; 0x70
 8007d8c:	ab1d      	add	r3, sp, #116	; 0x74
 8007d8e:	9002      	str	r0, [sp, #8]
 8007d90:	9006      	str	r0, [sp, #24]
 8007d92:	9107      	str	r1, [sp, #28]
 8007d94:	9104      	str	r1, [sp, #16]
 8007d96:	4809      	ldr	r0, [pc, #36]	; (8007dbc <siprintf+0x38>)
 8007d98:	4909      	ldr	r1, [pc, #36]	; (8007dc0 <siprintf+0x3c>)
 8007d9a:	cb04      	ldmia	r3!, {r2}
 8007d9c:	9105      	str	r1, [sp, #20]
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	a902      	add	r1, sp, #8
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	f000 f8ca 	bl	8007f3c <_svfiprintf_r>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9a02      	ldr	r2, [sp, #8]
 8007dac:	7013      	strb	r3, [r2, #0]
 8007dae:	b01c      	add	sp, #112	; 0x70
 8007db0:	bc08      	pop	{r3}
 8007db2:	b003      	add	sp, #12
 8007db4:	4718      	bx	r3
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	7fffffff 	.word	0x7fffffff
 8007dbc:	20000010 	.word	0x20000010
 8007dc0:	ffff0208 	.word	0xffff0208

08007dc4 <__malloc_lock>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4802      	ldr	r0, [pc, #8]	; (8007dd0 <__malloc_lock+0xc>)
 8007dc8:	f7ff feaa 	bl	8007b20 <__retarget_lock_acquire_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	20001c6c 	.word	0x20001c6c

08007dd4 <__malloc_unlock>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4802      	ldr	r0, [pc, #8]	; (8007de0 <__malloc_unlock+0xc>)
 8007dd8:	f7ff fea3 	bl	8007b22 <__retarget_lock_release_recursive>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	20001c6c 	.word	0x20001c6c

08007de4 <_free_r>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	0005      	movs	r5, r0
 8007de8:	2900      	cmp	r1, #0
 8007dea:	d010      	beq.n	8007e0e <_free_r+0x2a>
 8007dec:	1f0c      	subs	r4, r1, #4
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	da00      	bge.n	8007df6 <_free_r+0x12>
 8007df4:	18e4      	adds	r4, r4, r3
 8007df6:	0028      	movs	r0, r5
 8007df8:	f7ff ffe4 	bl	8007dc4 <__malloc_lock>
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <_free_r+0x90>)
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <_free_r+0x2c>
 8007e04:	6063      	str	r3, [r4, #4]
 8007e06:	6014      	str	r4, [r2, #0]
 8007e08:	0028      	movs	r0, r5
 8007e0a:	f7ff ffe3 	bl	8007dd4 <__malloc_unlock>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	d908      	bls.n	8007e26 <_free_r+0x42>
 8007e14:	6821      	ldr	r1, [r4, #0]
 8007e16:	1860      	adds	r0, r4, r1
 8007e18:	4283      	cmp	r3, r0
 8007e1a:	d1f3      	bne.n	8007e04 <_free_r+0x20>
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	1841      	adds	r1, r0, r1
 8007e22:	6021      	str	r1, [r4, #0]
 8007e24:	e7ee      	b.n	8007e04 <_free_r+0x20>
 8007e26:	001a      	movs	r2, r3
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <_free_r+0x4e>
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	d9f9      	bls.n	8007e26 <_free_r+0x42>
 8007e32:	6811      	ldr	r1, [r2, #0]
 8007e34:	1850      	adds	r0, r2, r1
 8007e36:	42a0      	cmp	r0, r4
 8007e38:	d10b      	bne.n	8007e52 <_free_r+0x6e>
 8007e3a:	6820      	ldr	r0, [r4, #0]
 8007e3c:	1809      	adds	r1, r1, r0
 8007e3e:	1850      	adds	r0, r2, r1
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	4283      	cmp	r3, r0
 8007e44:	d1e0      	bne.n	8007e08 <_free_r+0x24>
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	1841      	adds	r1, r0, r1
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	6053      	str	r3, [r2, #4]
 8007e50:	e7da      	b.n	8007e08 <_free_r+0x24>
 8007e52:	42a0      	cmp	r0, r4
 8007e54:	d902      	bls.n	8007e5c <_free_r+0x78>
 8007e56:	230c      	movs	r3, #12
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	e7d5      	b.n	8007e08 <_free_r+0x24>
 8007e5c:	6821      	ldr	r1, [r4, #0]
 8007e5e:	1860      	adds	r0, r4, r1
 8007e60:	4283      	cmp	r3, r0
 8007e62:	d103      	bne.n	8007e6c <_free_r+0x88>
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	1841      	adds	r1, r0, r1
 8007e6a:	6021      	str	r1, [r4, #0]
 8007e6c:	6063      	str	r3, [r4, #4]
 8007e6e:	6054      	str	r4, [r2, #4]
 8007e70:	e7ca      	b.n	8007e08 <_free_r+0x24>
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	20001c70 	.word	0x20001c70

08007e78 <__ssputs_r>:
 8007e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7a:	688e      	ldr	r6, [r1, #8]
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	0007      	movs	r7, r0
 8007e80:	000c      	movs	r4, r1
 8007e82:	9203      	str	r2, [sp, #12]
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	429e      	cmp	r6, r3
 8007e88:	d83c      	bhi.n	8007f04 <__ssputs_r+0x8c>
 8007e8a:	2390      	movs	r3, #144	; 0x90
 8007e8c:	898a      	ldrh	r2, [r1, #12]
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	421a      	tst	r2, r3
 8007e92:	d034      	beq.n	8007efe <__ssputs_r+0x86>
 8007e94:	6909      	ldr	r1, [r1, #16]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	6960      	ldr	r0, [r4, #20]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	4343      	muls	r3, r0
 8007ea2:	0fdd      	lsrs	r5, r3, #31
 8007ea4:	18ed      	adds	r5, r5, r3
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	9802      	ldr	r0, [sp, #8]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	181b      	adds	r3, r3, r0
 8007eae:	106d      	asrs	r5, r5, #1
 8007eb0:	42ab      	cmp	r3, r5
 8007eb2:	d900      	bls.n	8007eb6 <__ssputs_r+0x3e>
 8007eb4:	001d      	movs	r5, r3
 8007eb6:	0553      	lsls	r3, r2, #21
 8007eb8:	d532      	bpl.n	8007f20 <__ssputs_r+0xa8>
 8007eba:	0029      	movs	r1, r5
 8007ebc:	0038      	movs	r0, r7
 8007ebe:	f7ff fe65 	bl	8007b8c <_malloc_r>
 8007ec2:	1e06      	subs	r6, r0, #0
 8007ec4:	d109      	bne.n	8007eda <__ssputs_r+0x62>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	2340      	movs	r3, #64	; 0x40
 8007ecc:	2001      	movs	r0, #1
 8007ece:	89a2      	ldrh	r2, [r4, #12]
 8007ed0:	4240      	negs	r0, r0
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	b005      	add	sp, #20
 8007ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eda:	9a02      	ldr	r2, [sp, #8]
 8007edc:	6921      	ldr	r1, [r4, #16]
 8007ede:	f7ff fe21 	bl	8007b24 <memcpy>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	4a14      	ldr	r2, [pc, #80]	; (8007f38 <__ssputs_r+0xc0>)
 8007ee6:	401a      	ands	r2, r3
 8007ee8:	2380      	movs	r3, #128	; 0x80
 8007eea:	4313      	orrs	r3, r2
 8007eec:	81a3      	strh	r3, [r4, #12]
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	6126      	str	r6, [r4, #16]
 8007ef2:	18f6      	adds	r6, r6, r3
 8007ef4:	6026      	str	r6, [r4, #0]
 8007ef6:	6165      	str	r5, [r4, #20]
 8007ef8:	9e01      	ldr	r6, [sp, #4]
 8007efa:	1aed      	subs	r5, r5, r3
 8007efc:	60a5      	str	r5, [r4, #8]
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	429e      	cmp	r6, r3
 8007f02:	d900      	bls.n	8007f06 <__ssputs_r+0x8e>
 8007f04:	9e01      	ldr	r6, [sp, #4]
 8007f06:	0032      	movs	r2, r6
 8007f08:	9903      	ldr	r1, [sp, #12]
 8007f0a:	6820      	ldr	r0, [r4, #0]
 8007f0c:	f000 faa3 	bl	8008456 <memmove>
 8007f10:	68a3      	ldr	r3, [r4, #8]
 8007f12:	2000      	movs	r0, #0
 8007f14:	1b9b      	subs	r3, r3, r6
 8007f16:	60a3      	str	r3, [r4, #8]
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	199e      	adds	r6, r3, r6
 8007f1c:	6026      	str	r6, [r4, #0]
 8007f1e:	e7da      	b.n	8007ed6 <__ssputs_r+0x5e>
 8007f20:	002a      	movs	r2, r5
 8007f22:	0038      	movs	r0, r7
 8007f24:	f000 faaa 	bl	800847c <_realloc_r>
 8007f28:	1e06      	subs	r6, r0, #0
 8007f2a:	d1e0      	bne.n	8007eee <__ssputs_r+0x76>
 8007f2c:	0038      	movs	r0, r7
 8007f2e:	6921      	ldr	r1, [r4, #16]
 8007f30:	f7ff ff58 	bl	8007de4 <_free_r>
 8007f34:	e7c7      	b.n	8007ec6 <__ssputs_r+0x4e>
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	fffffb7f 	.word	0xfffffb7f

08007f3c <_svfiprintf_r>:
 8007f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3e:	b0a1      	sub	sp, #132	; 0x84
 8007f40:	9003      	str	r0, [sp, #12]
 8007f42:	001d      	movs	r5, r3
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	000f      	movs	r7, r1
 8007f48:	0016      	movs	r6, r2
 8007f4a:	061b      	lsls	r3, r3, #24
 8007f4c:	d511      	bpl.n	8007f72 <_svfiprintf_r+0x36>
 8007f4e:	690b      	ldr	r3, [r1, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10e      	bne.n	8007f72 <_svfiprintf_r+0x36>
 8007f54:	2140      	movs	r1, #64	; 0x40
 8007f56:	f7ff fe19 	bl	8007b8c <_malloc_r>
 8007f5a:	6038      	str	r0, [r7, #0]
 8007f5c:	6138      	str	r0, [r7, #16]
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d105      	bne.n	8007f6e <_svfiprintf_r+0x32>
 8007f62:	230c      	movs	r3, #12
 8007f64:	9a03      	ldr	r2, [sp, #12]
 8007f66:	3801      	subs	r0, #1
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	b021      	add	sp, #132	; 0x84
 8007f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	2300      	movs	r3, #0
 8007f74:	ac08      	add	r4, sp, #32
 8007f76:	6163      	str	r3, [r4, #20]
 8007f78:	3320      	adds	r3, #32
 8007f7a:	7663      	strb	r3, [r4, #25]
 8007f7c:	3310      	adds	r3, #16
 8007f7e:	76a3      	strb	r3, [r4, #26]
 8007f80:	9507      	str	r5, [sp, #28]
 8007f82:	0035      	movs	r5, r6
 8007f84:	782b      	ldrb	r3, [r5, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <_svfiprintf_r+0x52>
 8007f8a:	2b25      	cmp	r3, #37	; 0x25
 8007f8c:	d147      	bne.n	800801e <_svfiprintf_r+0xe2>
 8007f8e:	1bab      	subs	r3, r5, r6
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	42b5      	cmp	r5, r6
 8007f94:	d00c      	beq.n	8007fb0 <_svfiprintf_r+0x74>
 8007f96:	0032      	movs	r2, r6
 8007f98:	0039      	movs	r1, r7
 8007f9a:	9803      	ldr	r0, [sp, #12]
 8007f9c:	f7ff ff6c 	bl	8007e78 <__ssputs_r>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d100      	bne.n	8007fa6 <_svfiprintf_r+0x6a>
 8007fa4:	e0ae      	b.n	8008104 <_svfiprintf_r+0x1c8>
 8007fa6:	6962      	ldr	r2, [r4, #20]
 8007fa8:	9b05      	ldr	r3, [sp, #20]
 8007faa:	4694      	mov	ip, r2
 8007fac:	4463      	add	r3, ip
 8007fae:	6163      	str	r3, [r4, #20]
 8007fb0:	782b      	ldrb	r3, [r5, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d100      	bne.n	8007fb8 <_svfiprintf_r+0x7c>
 8007fb6:	e0a5      	b.n	8008104 <_svfiprintf_r+0x1c8>
 8007fb8:	2201      	movs	r2, #1
 8007fba:	2300      	movs	r3, #0
 8007fbc:	4252      	negs	r2, r2
 8007fbe:	6062      	str	r2, [r4, #4]
 8007fc0:	a904      	add	r1, sp, #16
 8007fc2:	3254      	adds	r2, #84	; 0x54
 8007fc4:	1852      	adds	r2, r2, r1
 8007fc6:	1c6e      	adds	r6, r5, #1
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	60e3      	str	r3, [r4, #12]
 8007fcc:	60a3      	str	r3, [r4, #8]
 8007fce:	7013      	strb	r3, [r2, #0]
 8007fd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	7831      	ldrb	r1, [r6, #0]
 8007fd6:	4854      	ldr	r0, [pc, #336]	; (8008128 <_svfiprintf_r+0x1ec>)
 8007fd8:	f000 fa32 	bl	8008440 <memchr>
 8007fdc:	1c75      	adds	r5, r6, #1
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d11f      	bne.n	8008022 <_svfiprintf_r+0xe6>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	06d3      	lsls	r3, r2, #27
 8007fe6:	d504      	bpl.n	8007ff2 <_svfiprintf_r+0xb6>
 8007fe8:	2353      	movs	r3, #83	; 0x53
 8007fea:	a904      	add	r1, sp, #16
 8007fec:	185b      	adds	r3, r3, r1
 8007fee:	2120      	movs	r1, #32
 8007ff0:	7019      	strb	r1, [r3, #0]
 8007ff2:	0713      	lsls	r3, r2, #28
 8007ff4:	d504      	bpl.n	8008000 <_svfiprintf_r+0xc4>
 8007ff6:	2353      	movs	r3, #83	; 0x53
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	185b      	adds	r3, r3, r1
 8007ffc:	212b      	movs	r1, #43	; 0x2b
 8007ffe:	7019      	strb	r1, [r3, #0]
 8008000:	7833      	ldrb	r3, [r6, #0]
 8008002:	2b2a      	cmp	r3, #42	; 0x2a
 8008004:	d016      	beq.n	8008034 <_svfiprintf_r+0xf8>
 8008006:	0035      	movs	r5, r6
 8008008:	2100      	movs	r1, #0
 800800a:	200a      	movs	r0, #10
 800800c:	68e3      	ldr	r3, [r4, #12]
 800800e:	782a      	ldrb	r2, [r5, #0]
 8008010:	1c6e      	adds	r6, r5, #1
 8008012:	3a30      	subs	r2, #48	; 0x30
 8008014:	2a09      	cmp	r2, #9
 8008016:	d94e      	bls.n	80080b6 <_svfiprintf_r+0x17a>
 8008018:	2900      	cmp	r1, #0
 800801a:	d111      	bne.n	8008040 <_svfiprintf_r+0x104>
 800801c:	e017      	b.n	800804e <_svfiprintf_r+0x112>
 800801e:	3501      	adds	r5, #1
 8008020:	e7b0      	b.n	8007f84 <_svfiprintf_r+0x48>
 8008022:	4b41      	ldr	r3, [pc, #260]	; (8008128 <_svfiprintf_r+0x1ec>)
 8008024:	6822      	ldr	r2, [r4, #0]
 8008026:	1ac0      	subs	r0, r0, r3
 8008028:	2301      	movs	r3, #1
 800802a:	4083      	lsls	r3, r0
 800802c:	4313      	orrs	r3, r2
 800802e:	002e      	movs	r6, r5
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	e7ce      	b.n	8007fd2 <_svfiprintf_r+0x96>
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	1d19      	adds	r1, r3, #4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	9107      	str	r1, [sp, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	db01      	blt.n	8008044 <_svfiprintf_r+0x108>
 8008040:	930b      	str	r3, [sp, #44]	; 0x2c
 8008042:	e004      	b.n	800804e <_svfiprintf_r+0x112>
 8008044:	425b      	negs	r3, r3
 8008046:	60e3      	str	r3, [r4, #12]
 8008048:	2302      	movs	r3, #2
 800804a:	4313      	orrs	r3, r2
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	782b      	ldrb	r3, [r5, #0]
 8008050:	2b2e      	cmp	r3, #46	; 0x2e
 8008052:	d10a      	bne.n	800806a <_svfiprintf_r+0x12e>
 8008054:	786b      	ldrb	r3, [r5, #1]
 8008056:	2b2a      	cmp	r3, #42	; 0x2a
 8008058:	d135      	bne.n	80080c6 <_svfiprintf_r+0x18a>
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	3502      	adds	r5, #2
 800805e:	1d1a      	adds	r2, r3, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	9207      	str	r2, [sp, #28]
 8008064:	2b00      	cmp	r3, #0
 8008066:	db2b      	blt.n	80080c0 <_svfiprintf_r+0x184>
 8008068:	9309      	str	r3, [sp, #36]	; 0x24
 800806a:	4e30      	ldr	r6, [pc, #192]	; (800812c <_svfiprintf_r+0x1f0>)
 800806c:	2203      	movs	r2, #3
 800806e:	0030      	movs	r0, r6
 8008070:	7829      	ldrb	r1, [r5, #0]
 8008072:	f000 f9e5 	bl	8008440 <memchr>
 8008076:	2800      	cmp	r0, #0
 8008078:	d006      	beq.n	8008088 <_svfiprintf_r+0x14c>
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	1b80      	subs	r0, r0, r6
 800807e:	4083      	lsls	r3, r0
 8008080:	6822      	ldr	r2, [r4, #0]
 8008082:	3501      	adds	r5, #1
 8008084:	4313      	orrs	r3, r2
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	7829      	ldrb	r1, [r5, #0]
 800808a:	2206      	movs	r2, #6
 800808c:	4828      	ldr	r0, [pc, #160]	; (8008130 <_svfiprintf_r+0x1f4>)
 800808e:	1c6e      	adds	r6, r5, #1
 8008090:	7621      	strb	r1, [r4, #24]
 8008092:	f000 f9d5 	bl	8008440 <memchr>
 8008096:	2800      	cmp	r0, #0
 8008098:	d03c      	beq.n	8008114 <_svfiprintf_r+0x1d8>
 800809a:	4b26      	ldr	r3, [pc, #152]	; (8008134 <_svfiprintf_r+0x1f8>)
 800809c:	2b00      	cmp	r3, #0
 800809e:	d125      	bne.n	80080ec <_svfiprintf_r+0x1b0>
 80080a0:	2207      	movs	r2, #7
 80080a2:	9b07      	ldr	r3, [sp, #28]
 80080a4:	3307      	adds	r3, #7
 80080a6:	4393      	bics	r3, r2
 80080a8:	3308      	adds	r3, #8
 80080aa:	9307      	str	r3, [sp, #28]
 80080ac:	6963      	ldr	r3, [r4, #20]
 80080ae:	9a04      	ldr	r2, [sp, #16]
 80080b0:	189b      	adds	r3, r3, r2
 80080b2:	6163      	str	r3, [r4, #20]
 80080b4:	e765      	b.n	8007f82 <_svfiprintf_r+0x46>
 80080b6:	4343      	muls	r3, r0
 80080b8:	0035      	movs	r5, r6
 80080ba:	2101      	movs	r1, #1
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	e7a6      	b.n	800800e <_svfiprintf_r+0xd2>
 80080c0:	2301      	movs	r3, #1
 80080c2:	425b      	negs	r3, r3
 80080c4:	e7d0      	b.n	8008068 <_svfiprintf_r+0x12c>
 80080c6:	2300      	movs	r3, #0
 80080c8:	200a      	movs	r0, #10
 80080ca:	001a      	movs	r2, r3
 80080cc:	3501      	adds	r5, #1
 80080ce:	6063      	str	r3, [r4, #4]
 80080d0:	7829      	ldrb	r1, [r5, #0]
 80080d2:	1c6e      	adds	r6, r5, #1
 80080d4:	3930      	subs	r1, #48	; 0x30
 80080d6:	2909      	cmp	r1, #9
 80080d8:	d903      	bls.n	80080e2 <_svfiprintf_r+0x1a6>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0c5      	beq.n	800806a <_svfiprintf_r+0x12e>
 80080de:	9209      	str	r2, [sp, #36]	; 0x24
 80080e0:	e7c3      	b.n	800806a <_svfiprintf_r+0x12e>
 80080e2:	4342      	muls	r2, r0
 80080e4:	0035      	movs	r5, r6
 80080e6:	2301      	movs	r3, #1
 80080e8:	1852      	adds	r2, r2, r1
 80080ea:	e7f1      	b.n	80080d0 <_svfiprintf_r+0x194>
 80080ec:	ab07      	add	r3, sp, #28
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	003a      	movs	r2, r7
 80080f2:	0021      	movs	r1, r4
 80080f4:	4b10      	ldr	r3, [pc, #64]	; (8008138 <_svfiprintf_r+0x1fc>)
 80080f6:	9803      	ldr	r0, [sp, #12]
 80080f8:	e000      	b.n	80080fc <_svfiprintf_r+0x1c0>
 80080fa:	bf00      	nop
 80080fc:	9004      	str	r0, [sp, #16]
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	3301      	adds	r3, #1
 8008102:	d1d3      	bne.n	80080ac <_svfiprintf_r+0x170>
 8008104:	89bb      	ldrh	r3, [r7, #12]
 8008106:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008108:	065b      	lsls	r3, r3, #25
 800810a:	d400      	bmi.n	800810e <_svfiprintf_r+0x1d2>
 800810c:	e72d      	b.n	8007f6a <_svfiprintf_r+0x2e>
 800810e:	2001      	movs	r0, #1
 8008110:	4240      	negs	r0, r0
 8008112:	e72a      	b.n	8007f6a <_svfiprintf_r+0x2e>
 8008114:	ab07      	add	r3, sp, #28
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	003a      	movs	r2, r7
 800811a:	0021      	movs	r1, r4
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <_svfiprintf_r+0x1fc>)
 800811e:	9803      	ldr	r0, [sp, #12]
 8008120:	f000 f87c 	bl	800821c <_printf_i>
 8008124:	e7ea      	b.n	80080fc <_svfiprintf_r+0x1c0>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	08008788 	.word	0x08008788
 800812c:	0800878e 	.word	0x0800878e
 8008130:	08008792 	.word	0x08008792
 8008134:	00000000 	.word	0x00000000
 8008138:	08007e79 	.word	0x08007e79

0800813c <_printf_common>:
 800813c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800813e:	0015      	movs	r5, r2
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	688a      	ldr	r2, [r1, #8]
 8008144:	690b      	ldr	r3, [r1, #16]
 8008146:	000c      	movs	r4, r1
 8008148:	9000      	str	r0, [sp, #0]
 800814a:	4293      	cmp	r3, r2
 800814c:	da00      	bge.n	8008150 <_printf_common+0x14>
 800814e:	0013      	movs	r3, r2
 8008150:	0022      	movs	r2, r4
 8008152:	602b      	str	r3, [r5, #0]
 8008154:	3243      	adds	r2, #67	; 0x43
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	2a00      	cmp	r2, #0
 800815a:	d001      	beq.n	8008160 <_printf_common+0x24>
 800815c:	3301      	adds	r3, #1
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	069b      	lsls	r3, r3, #26
 8008164:	d502      	bpl.n	800816c <_printf_common+0x30>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	3302      	adds	r3, #2
 800816a:	602b      	str	r3, [r5, #0]
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	2306      	movs	r3, #6
 8008170:	0017      	movs	r7, r2
 8008172:	401f      	ands	r7, r3
 8008174:	421a      	tst	r2, r3
 8008176:	d027      	beq.n	80081c8 <_printf_common+0x8c>
 8008178:	0023      	movs	r3, r4
 800817a:	3343      	adds	r3, #67	; 0x43
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	1e5a      	subs	r2, r3, #1
 8008180:	4193      	sbcs	r3, r2
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	0692      	lsls	r2, r2, #26
 8008186:	d430      	bmi.n	80081ea <_printf_common+0xae>
 8008188:	0022      	movs	r2, r4
 800818a:	9901      	ldr	r1, [sp, #4]
 800818c:	9800      	ldr	r0, [sp, #0]
 800818e:	9e08      	ldr	r6, [sp, #32]
 8008190:	3243      	adds	r2, #67	; 0x43
 8008192:	47b0      	blx	r6
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d025      	beq.n	80081e4 <_printf_common+0xa8>
 8008198:	2306      	movs	r3, #6
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	682a      	ldr	r2, [r5, #0]
 800819e:	68e1      	ldr	r1, [r4, #12]
 80081a0:	2500      	movs	r5, #0
 80081a2:	4003      	ands	r3, r0
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d103      	bne.n	80081b0 <_printf_common+0x74>
 80081a8:	1a8d      	subs	r5, r1, r2
 80081aa:	43eb      	mvns	r3, r5
 80081ac:	17db      	asrs	r3, r3, #31
 80081ae:	401d      	ands	r5, r3
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	6922      	ldr	r2, [r4, #16]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	dd01      	ble.n	80081bc <_printf_common+0x80>
 80081b8:	1a9b      	subs	r3, r3, r2
 80081ba:	18ed      	adds	r5, r5, r3
 80081bc:	2700      	movs	r7, #0
 80081be:	42bd      	cmp	r5, r7
 80081c0:	d120      	bne.n	8008204 <_printf_common+0xc8>
 80081c2:	2000      	movs	r0, #0
 80081c4:	e010      	b.n	80081e8 <_printf_common+0xac>
 80081c6:	3701      	adds	r7, #1
 80081c8:	68e3      	ldr	r3, [r4, #12]
 80081ca:	682a      	ldr	r2, [r5, #0]
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	42bb      	cmp	r3, r7
 80081d0:	ddd2      	ble.n	8008178 <_printf_common+0x3c>
 80081d2:	0022      	movs	r2, r4
 80081d4:	2301      	movs	r3, #1
 80081d6:	9901      	ldr	r1, [sp, #4]
 80081d8:	9800      	ldr	r0, [sp, #0]
 80081da:	9e08      	ldr	r6, [sp, #32]
 80081dc:	3219      	adds	r2, #25
 80081de:	47b0      	blx	r6
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d1f0      	bne.n	80081c6 <_printf_common+0x8a>
 80081e4:	2001      	movs	r0, #1
 80081e6:	4240      	negs	r0, r0
 80081e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081ea:	2030      	movs	r0, #48	; 0x30
 80081ec:	18e1      	adds	r1, r4, r3
 80081ee:	3143      	adds	r1, #67	; 0x43
 80081f0:	7008      	strb	r0, [r1, #0]
 80081f2:	0021      	movs	r1, r4
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	3145      	adds	r1, #69	; 0x45
 80081f8:	7809      	ldrb	r1, [r1, #0]
 80081fa:	18a2      	adds	r2, r4, r2
 80081fc:	3243      	adds	r2, #67	; 0x43
 80081fe:	3302      	adds	r3, #2
 8008200:	7011      	strb	r1, [r2, #0]
 8008202:	e7c1      	b.n	8008188 <_printf_common+0x4c>
 8008204:	0022      	movs	r2, r4
 8008206:	2301      	movs	r3, #1
 8008208:	9901      	ldr	r1, [sp, #4]
 800820a:	9800      	ldr	r0, [sp, #0]
 800820c:	9e08      	ldr	r6, [sp, #32]
 800820e:	321a      	adds	r2, #26
 8008210:	47b0      	blx	r6
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d0e6      	beq.n	80081e4 <_printf_common+0xa8>
 8008216:	3701      	adds	r7, #1
 8008218:	e7d1      	b.n	80081be <_printf_common+0x82>
	...

0800821c <_printf_i>:
 800821c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821e:	b08b      	sub	sp, #44	; 0x2c
 8008220:	9206      	str	r2, [sp, #24]
 8008222:	000a      	movs	r2, r1
 8008224:	3243      	adds	r2, #67	; 0x43
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	9005      	str	r0, [sp, #20]
 800822a:	9204      	str	r2, [sp, #16]
 800822c:	7e0a      	ldrb	r2, [r1, #24]
 800822e:	000c      	movs	r4, r1
 8008230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008232:	2a78      	cmp	r2, #120	; 0x78
 8008234:	d807      	bhi.n	8008246 <_printf_i+0x2a>
 8008236:	2a62      	cmp	r2, #98	; 0x62
 8008238:	d809      	bhi.n	800824e <_printf_i+0x32>
 800823a:	2a00      	cmp	r2, #0
 800823c:	d100      	bne.n	8008240 <_printf_i+0x24>
 800823e:	e0c1      	b.n	80083c4 <_printf_i+0x1a8>
 8008240:	2a58      	cmp	r2, #88	; 0x58
 8008242:	d100      	bne.n	8008246 <_printf_i+0x2a>
 8008244:	e08c      	b.n	8008360 <_printf_i+0x144>
 8008246:	0026      	movs	r6, r4
 8008248:	3642      	adds	r6, #66	; 0x42
 800824a:	7032      	strb	r2, [r6, #0]
 800824c:	e022      	b.n	8008294 <_printf_i+0x78>
 800824e:	0010      	movs	r0, r2
 8008250:	3863      	subs	r0, #99	; 0x63
 8008252:	2815      	cmp	r0, #21
 8008254:	d8f7      	bhi.n	8008246 <_printf_i+0x2a>
 8008256:	f7f7 ff57 	bl	8000108 <__gnu_thumb1_case_shi>
 800825a:	0016      	.short	0x0016
 800825c:	fff6001f 	.word	0xfff6001f
 8008260:	fff6fff6 	.word	0xfff6fff6
 8008264:	001ffff6 	.word	0x001ffff6
 8008268:	fff6fff6 	.word	0xfff6fff6
 800826c:	fff6fff6 	.word	0xfff6fff6
 8008270:	003600a8 	.word	0x003600a8
 8008274:	fff6009a 	.word	0xfff6009a
 8008278:	00b9fff6 	.word	0x00b9fff6
 800827c:	0036fff6 	.word	0x0036fff6
 8008280:	fff6fff6 	.word	0xfff6fff6
 8008284:	009e      	.short	0x009e
 8008286:	0026      	movs	r6, r4
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	3642      	adds	r6, #66	; 0x42
 800828c:	1d11      	adds	r1, r2, #4
 800828e:	6019      	str	r1, [r3, #0]
 8008290:	6813      	ldr	r3, [r2, #0]
 8008292:	7033      	strb	r3, [r6, #0]
 8008294:	2301      	movs	r3, #1
 8008296:	e0a7      	b.n	80083e8 <_printf_i+0x1cc>
 8008298:	6808      	ldr	r0, [r1, #0]
 800829a:	6819      	ldr	r1, [r3, #0]
 800829c:	1d0a      	adds	r2, r1, #4
 800829e:	0605      	lsls	r5, r0, #24
 80082a0:	d50b      	bpl.n	80082ba <_printf_i+0x9e>
 80082a2:	680d      	ldr	r5, [r1, #0]
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	da03      	bge.n	80082b2 <_printf_i+0x96>
 80082aa:	232d      	movs	r3, #45	; 0x2d
 80082ac:	9a04      	ldr	r2, [sp, #16]
 80082ae:	426d      	negs	r5, r5
 80082b0:	7013      	strb	r3, [r2, #0]
 80082b2:	4b61      	ldr	r3, [pc, #388]	; (8008438 <_printf_i+0x21c>)
 80082b4:	270a      	movs	r7, #10
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	e01b      	b.n	80082f2 <_printf_i+0xd6>
 80082ba:	680d      	ldr	r5, [r1, #0]
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	0641      	lsls	r1, r0, #25
 80082c0:	d5f1      	bpl.n	80082a6 <_printf_i+0x8a>
 80082c2:	b22d      	sxth	r5, r5
 80082c4:	e7ef      	b.n	80082a6 <_printf_i+0x8a>
 80082c6:	680d      	ldr	r5, [r1, #0]
 80082c8:	6819      	ldr	r1, [r3, #0]
 80082ca:	1d08      	adds	r0, r1, #4
 80082cc:	6018      	str	r0, [r3, #0]
 80082ce:	062e      	lsls	r6, r5, #24
 80082d0:	d501      	bpl.n	80082d6 <_printf_i+0xba>
 80082d2:	680d      	ldr	r5, [r1, #0]
 80082d4:	e003      	b.n	80082de <_printf_i+0xc2>
 80082d6:	066d      	lsls	r5, r5, #25
 80082d8:	d5fb      	bpl.n	80082d2 <_printf_i+0xb6>
 80082da:	680d      	ldr	r5, [r1, #0]
 80082dc:	b2ad      	uxth	r5, r5
 80082de:	4b56      	ldr	r3, [pc, #344]	; (8008438 <_printf_i+0x21c>)
 80082e0:	2708      	movs	r7, #8
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	2a6f      	cmp	r2, #111	; 0x6f
 80082e6:	d000      	beq.n	80082ea <_printf_i+0xce>
 80082e8:	3702      	adds	r7, #2
 80082ea:	0023      	movs	r3, r4
 80082ec:	2200      	movs	r2, #0
 80082ee:	3343      	adds	r3, #67	; 0x43
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	db03      	blt.n	8008302 <_printf_i+0xe6>
 80082fa:	2204      	movs	r2, #4
 80082fc:	6821      	ldr	r1, [r4, #0]
 80082fe:	4391      	bics	r1, r2
 8008300:	6021      	str	r1, [r4, #0]
 8008302:	2d00      	cmp	r5, #0
 8008304:	d102      	bne.n	800830c <_printf_i+0xf0>
 8008306:	9e04      	ldr	r6, [sp, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <_printf_i+0x10a>
 800830c:	9e04      	ldr	r6, [sp, #16]
 800830e:	0028      	movs	r0, r5
 8008310:	0039      	movs	r1, r7
 8008312:	f7f7 ff89 	bl	8000228 <__aeabi_uidivmod>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	3e01      	subs	r6, #1
 800831a:	5c5b      	ldrb	r3, [r3, r1]
 800831c:	7033      	strb	r3, [r6, #0]
 800831e:	002b      	movs	r3, r5
 8008320:	0005      	movs	r5, r0
 8008322:	429f      	cmp	r7, r3
 8008324:	d9f3      	bls.n	800830e <_printf_i+0xf2>
 8008326:	2f08      	cmp	r7, #8
 8008328:	d109      	bne.n	800833e <_printf_i+0x122>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	07db      	lsls	r3, r3, #31
 800832e:	d506      	bpl.n	800833e <_printf_i+0x122>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	6922      	ldr	r2, [r4, #16]
 8008334:	4293      	cmp	r3, r2
 8008336:	dc02      	bgt.n	800833e <_printf_i+0x122>
 8008338:	2330      	movs	r3, #48	; 0x30
 800833a:	3e01      	subs	r6, #1
 800833c:	7033      	strb	r3, [r6, #0]
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	1b9b      	subs	r3, r3, r6
 8008342:	6123      	str	r3, [r4, #16]
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	0021      	movs	r1, r4
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	9805      	ldr	r0, [sp, #20]
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	aa09      	add	r2, sp, #36	; 0x24
 8008350:	f7ff fef4 	bl	800813c <_printf_common>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d14c      	bne.n	80083f2 <_printf_i+0x1d6>
 8008358:	2001      	movs	r0, #1
 800835a:	4240      	negs	r0, r0
 800835c:	b00b      	add	sp, #44	; 0x2c
 800835e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008360:	3145      	adds	r1, #69	; 0x45
 8008362:	700a      	strb	r2, [r1, #0]
 8008364:	4a34      	ldr	r2, [pc, #208]	; (8008438 <_printf_i+0x21c>)
 8008366:	9203      	str	r2, [sp, #12]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	6821      	ldr	r1, [r4, #0]
 800836c:	ca20      	ldmia	r2!, {r5}
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	0608      	lsls	r0, r1, #24
 8008372:	d516      	bpl.n	80083a2 <_printf_i+0x186>
 8008374:	07cb      	lsls	r3, r1, #31
 8008376:	d502      	bpl.n	800837e <_printf_i+0x162>
 8008378:	2320      	movs	r3, #32
 800837a:	4319      	orrs	r1, r3
 800837c:	6021      	str	r1, [r4, #0]
 800837e:	2710      	movs	r7, #16
 8008380:	2d00      	cmp	r5, #0
 8008382:	d1b2      	bne.n	80082ea <_printf_i+0xce>
 8008384:	2320      	movs	r3, #32
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	439a      	bics	r2, r3
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	e7ad      	b.n	80082ea <_printf_i+0xce>
 800838e:	2220      	movs	r2, #32
 8008390:	6809      	ldr	r1, [r1, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	6022      	str	r2, [r4, #0]
 8008396:	0022      	movs	r2, r4
 8008398:	2178      	movs	r1, #120	; 0x78
 800839a:	3245      	adds	r2, #69	; 0x45
 800839c:	7011      	strb	r1, [r2, #0]
 800839e:	4a27      	ldr	r2, [pc, #156]	; (800843c <_printf_i+0x220>)
 80083a0:	e7e1      	b.n	8008366 <_printf_i+0x14a>
 80083a2:	0648      	lsls	r0, r1, #25
 80083a4:	d5e6      	bpl.n	8008374 <_printf_i+0x158>
 80083a6:	b2ad      	uxth	r5, r5
 80083a8:	e7e4      	b.n	8008374 <_printf_i+0x158>
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	680d      	ldr	r5, [r1, #0]
 80083ae:	1d10      	adds	r0, r2, #4
 80083b0:	6949      	ldr	r1, [r1, #20]
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	6813      	ldr	r3, [r2, #0]
 80083b6:	062e      	lsls	r6, r5, #24
 80083b8:	d501      	bpl.n	80083be <_printf_i+0x1a2>
 80083ba:	6019      	str	r1, [r3, #0]
 80083bc:	e002      	b.n	80083c4 <_printf_i+0x1a8>
 80083be:	066d      	lsls	r5, r5, #25
 80083c0:	d5fb      	bpl.n	80083ba <_printf_i+0x19e>
 80083c2:	8019      	strh	r1, [r3, #0]
 80083c4:	2300      	movs	r3, #0
 80083c6:	9e04      	ldr	r6, [sp, #16]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	e7bb      	b.n	8008344 <_printf_i+0x128>
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	1d11      	adds	r1, r2, #4
 80083d0:	6019      	str	r1, [r3, #0]
 80083d2:	6816      	ldr	r6, [r2, #0]
 80083d4:	2100      	movs	r1, #0
 80083d6:	0030      	movs	r0, r6
 80083d8:	6862      	ldr	r2, [r4, #4]
 80083da:	f000 f831 	bl	8008440 <memchr>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d001      	beq.n	80083e6 <_printf_i+0x1ca>
 80083e2:	1b80      	subs	r0, r0, r6
 80083e4:	6060      	str	r0, [r4, #4]
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	6123      	str	r3, [r4, #16]
 80083ea:	2300      	movs	r3, #0
 80083ec:	9a04      	ldr	r2, [sp, #16]
 80083ee:	7013      	strb	r3, [r2, #0]
 80083f0:	e7a8      	b.n	8008344 <_printf_i+0x128>
 80083f2:	6923      	ldr	r3, [r4, #16]
 80083f4:	0032      	movs	r2, r6
 80083f6:	9906      	ldr	r1, [sp, #24]
 80083f8:	9805      	ldr	r0, [sp, #20]
 80083fa:	9d07      	ldr	r5, [sp, #28]
 80083fc:	47a8      	blx	r5
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d0aa      	beq.n	8008358 <_printf_i+0x13c>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	079b      	lsls	r3, r3, #30
 8008406:	d415      	bmi.n	8008434 <_printf_i+0x218>
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	68e0      	ldr	r0, [r4, #12]
 800840c:	4298      	cmp	r0, r3
 800840e:	daa5      	bge.n	800835c <_printf_i+0x140>
 8008410:	0018      	movs	r0, r3
 8008412:	e7a3      	b.n	800835c <_printf_i+0x140>
 8008414:	0022      	movs	r2, r4
 8008416:	2301      	movs	r3, #1
 8008418:	9906      	ldr	r1, [sp, #24]
 800841a:	9805      	ldr	r0, [sp, #20]
 800841c:	9e07      	ldr	r6, [sp, #28]
 800841e:	3219      	adds	r2, #25
 8008420:	47b0      	blx	r6
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	d098      	beq.n	8008358 <_printf_i+0x13c>
 8008426:	3501      	adds	r5, #1
 8008428:	68e3      	ldr	r3, [r4, #12]
 800842a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800842c:	1a9b      	subs	r3, r3, r2
 800842e:	42ab      	cmp	r3, r5
 8008430:	dcf0      	bgt.n	8008414 <_printf_i+0x1f8>
 8008432:	e7e9      	b.n	8008408 <_printf_i+0x1ec>
 8008434:	2500      	movs	r5, #0
 8008436:	e7f7      	b.n	8008428 <_printf_i+0x20c>
 8008438:	08008799 	.word	0x08008799
 800843c:	080087aa 	.word	0x080087aa

08008440 <memchr>:
 8008440:	b2c9      	uxtb	r1, r1
 8008442:	1882      	adds	r2, r0, r2
 8008444:	4290      	cmp	r0, r2
 8008446:	d101      	bne.n	800844c <memchr+0xc>
 8008448:	2000      	movs	r0, #0
 800844a:	4770      	bx	lr
 800844c:	7803      	ldrb	r3, [r0, #0]
 800844e:	428b      	cmp	r3, r1
 8008450:	d0fb      	beq.n	800844a <memchr+0xa>
 8008452:	3001      	adds	r0, #1
 8008454:	e7f6      	b.n	8008444 <memchr+0x4>

08008456 <memmove>:
 8008456:	b510      	push	{r4, lr}
 8008458:	4288      	cmp	r0, r1
 800845a:	d902      	bls.n	8008462 <memmove+0xc>
 800845c:	188b      	adds	r3, r1, r2
 800845e:	4298      	cmp	r0, r3
 8008460:	d303      	bcc.n	800846a <memmove+0x14>
 8008462:	2300      	movs	r3, #0
 8008464:	e007      	b.n	8008476 <memmove+0x20>
 8008466:	5c8b      	ldrb	r3, [r1, r2]
 8008468:	5483      	strb	r3, [r0, r2]
 800846a:	3a01      	subs	r2, #1
 800846c:	d2fb      	bcs.n	8008466 <memmove+0x10>
 800846e:	bd10      	pop	{r4, pc}
 8008470:	5ccc      	ldrb	r4, [r1, r3]
 8008472:	54c4      	strb	r4, [r0, r3]
 8008474:	3301      	adds	r3, #1
 8008476:	429a      	cmp	r2, r3
 8008478:	d1fa      	bne.n	8008470 <memmove+0x1a>
 800847a:	e7f8      	b.n	800846e <memmove+0x18>

0800847c <_realloc_r>:
 800847c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800847e:	0007      	movs	r7, r0
 8008480:	000e      	movs	r6, r1
 8008482:	0014      	movs	r4, r2
 8008484:	2900      	cmp	r1, #0
 8008486:	d105      	bne.n	8008494 <_realloc_r+0x18>
 8008488:	0011      	movs	r1, r2
 800848a:	f7ff fb7f 	bl	8007b8c <_malloc_r>
 800848e:	0005      	movs	r5, r0
 8008490:	0028      	movs	r0, r5
 8008492:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008494:	2a00      	cmp	r2, #0
 8008496:	d103      	bne.n	80084a0 <_realloc_r+0x24>
 8008498:	f7ff fca4 	bl	8007de4 <_free_r>
 800849c:	0025      	movs	r5, r4
 800849e:	e7f7      	b.n	8008490 <_realloc_r+0x14>
 80084a0:	f000 f81b 	bl	80084da <_malloc_usable_size_r>
 80084a4:	9001      	str	r0, [sp, #4]
 80084a6:	4284      	cmp	r4, r0
 80084a8:	d803      	bhi.n	80084b2 <_realloc_r+0x36>
 80084aa:	0035      	movs	r5, r6
 80084ac:	0843      	lsrs	r3, r0, #1
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	d3ee      	bcc.n	8008490 <_realloc_r+0x14>
 80084b2:	0021      	movs	r1, r4
 80084b4:	0038      	movs	r0, r7
 80084b6:	f7ff fb69 	bl	8007b8c <_malloc_r>
 80084ba:	1e05      	subs	r5, r0, #0
 80084bc:	d0e8      	beq.n	8008490 <_realloc_r+0x14>
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	0022      	movs	r2, r4
 80084c2:	429c      	cmp	r4, r3
 80084c4:	d900      	bls.n	80084c8 <_realloc_r+0x4c>
 80084c6:	001a      	movs	r2, r3
 80084c8:	0031      	movs	r1, r6
 80084ca:	0028      	movs	r0, r5
 80084cc:	f7ff fb2a 	bl	8007b24 <memcpy>
 80084d0:	0031      	movs	r1, r6
 80084d2:	0038      	movs	r0, r7
 80084d4:	f7ff fc86 	bl	8007de4 <_free_r>
 80084d8:	e7da      	b.n	8008490 <_realloc_r+0x14>

080084da <_malloc_usable_size_r>:
 80084da:	1f0b      	subs	r3, r1, #4
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	1f18      	subs	r0, r3, #4
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	da01      	bge.n	80084e8 <_malloc_usable_size_r+0xe>
 80084e4:	580b      	ldr	r3, [r1, r0]
 80084e6:	18c0      	adds	r0, r0, r3
 80084e8:	4770      	bx	lr
	...

080084ec <_init>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr

080084f8 <_fini>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr
