
F070RB_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800881c  0800881c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800881c  0800881c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800881c  0800881c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800881c  0800881c  0001881c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c08  20000074  08008898  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c7c  08008898  00021c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad52  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003693  00000000  00000000  0003adee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0003e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001508  00000000  00000000  0003fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013650  00000000  00000000  00040ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018973  00000000  00000000  00054640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075fa0  00000000  00000000  0006cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005638  00000000  00000000  000e2fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800854c 	.word	0x0800854c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800854c 	.word	0x0800854c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <CANSPI_EN_Int>:

/** CAN SPI APIs */ 

/* Enable Interrupt */
void CANSPI_EN_Int(SPI_HandleTypeDef *SPI_CAN)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	22ff      	movs	r2, #255	; 0xff
 8000242:	212c      	movs	r1, #44	; 0x2c
 8000244:	f000 fcf8 	bl	8000c38 <MCP2515_BitModify>

  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTE, 0xff, 0xff);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	23ff      	movs	r3, #255	; 0xff
 800024c:	22ff      	movs	r2, #255	; 0xff
 800024e:	212b      	movs	r1, #43	; 0x2b
 8000250:	f000 fcf2 	bl	8000c38 <MCP2515_BitModify>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <CANSPI_CL_Flag_Int>:

void CANSPI_CL_Flag_Int(SPI_HandleTypeDef *SPI_CAN)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	2300      	movs	r3, #0
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	212c      	movs	r1, #44	; 0x2c
 800026c:	f000 fce4 	bl	8000c38 <MCP2515_BitModify>
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <CANSPI_Initialize>:
  MCP2515_SetSleepMode(SPI_CAN);
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000280:	210c      	movs	r1, #12
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
  RXM0reg.RXM0SIDL = 0x00;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2200      	movs	r2, #0
 800028c:	705a      	strb	r2, [r3, #1]
  RXM0reg.RXM0EID8 = 0x00;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2200      	movs	r2, #0
 8000292:	709a      	strb	r2, [r3, #2]
  RXM0reg.RXM0EID0 = 0x00;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	70da      	strb	r2, [r3, #3]
  
  RXM1reg.RXM1SIDH = 0x00;
 800029a:	2108      	movs	r1, #8
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	705a      	strb	r2, [r3, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	709a      	strb	r2, [r3, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	70da      	strb	r2, [r3, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 80002b4:	2124      	movs	r1, #36	; 0x24
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	705a      	strb	r2, [r3, #1]
  RXF0reg.RXF0EID8 = 0x00;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	709a      	strb	r2, [r3, #2]
  RXF0reg.RXF0EID0 = 0x00;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	70da      	strb	r2, [r3, #3]
  
  RXF1reg.RXF1SIDH = 0x00;
 80002ce:	2120      	movs	r1, #32
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2208      	movs	r2, #8
 80002da:	705a      	strb	r2, [r3, #1]
  RXF1reg.RXF1EID8 = 0x00;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	709a      	strb	r2, [r3, #2]
  RXF1reg.RXF1EID0 = 0x00;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	70da      	strb	r2, [r3, #3]
  
  RXF2reg.RXF2SIDH = 0x00;
 80002e8:	211c      	movs	r1, #28
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
  RXF2reg.RXF2SIDL = 0x00;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	705a      	strb	r2, [r3, #1]
  RXF2reg.RXF2EID8 = 0x00;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	709a      	strb	r2, [r3, #2]
  RXF2reg.RXF2EID0 = 0x00;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	70da      	strb	r2, [r3, #3]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000302:	2118      	movs	r1, #24
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  RXF3reg.RXF3SIDL = 0x00;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	705a      	strb	r2, [r3, #1]
  RXF3reg.RXF3EID8 = 0x00;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	709a      	strb	r2, [r3, #2]
  RXF3reg.RXF3EID0 = 0x00;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	70da      	strb	r2, [r3, #3]
  
  RXF4reg.RXF4SIDH = 0x00;
 800031c:	2114      	movs	r1, #20
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
  RXF4reg.RXF4SIDL = 0x00;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	705a      	strb	r2, [r3, #1]
  RXF4reg.RXF4EID8 = 0x00;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	709a      	strb	r2, [r3, #2]
  RXF4reg.RXF4EID0 = 0x00;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	70da      	strb	r2, [r3, #3]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000336:	2110      	movs	r1, #16
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
  RXF5reg.RXF5SIDL = 0x08;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2208      	movs	r2, #8
 8000342:	705a      	strb	r2, [r3, #1]
  RXF5reg.RXF5EID8 = 0x00;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
  RXF5reg.RXF5EID0 = 0x00;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	70da      	strb	r2, [r3, #3]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize(SPI_CAN))
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	0018      	movs	r0, r3
 8000354:	f000 faba 	bl	80008cc <MCP2515_Initialize>
 8000358:	0003      	movs	r3, r0
 800035a:	001a      	movs	r2, r3
 800035c:	2301      	movs	r3, #1
 800035e:	4053      	eors	r3, r2
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <CANSPI_Initialize+0xf2>
    return false;
 8000366:	2300      	movs	r3, #0
 8000368:	e074      	b.n	8000454 <CANSPI_Initialize+0x1dc>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode(SPI_CAN))
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fad1 	bl	8000914 <MCP2515_SetConfigMode>
 8000372:	0003      	movs	r3, r0
 8000374:	001a      	movs	r2, r3
 8000376:	2301      	movs	r3, #1
 8000378:	4053      	eors	r3, r2
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <CANSPI_Initialize+0x10c>
    return false;
 8000380:	2300      	movs	r3, #0
 8000382:	e067      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000384:	230c      	movs	r3, #12
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	2223      	movs	r2, #35	; 0x23
 800038c:	2120      	movs	r1, #32
 800038e:	f000 fb91 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000392:	2308      	movs	r3, #8
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2227      	movs	r2, #39	; 0x27
 800039a:	2124      	movs	r1, #36	; 0x24
 800039c:	f000 fb8a 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80003a0:	2324      	movs	r3, #36	; 0x24
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	2203      	movs	r2, #3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f000 fb83 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80003ae:	2320      	movs	r3, #32
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	2207      	movs	r2, #7
 80003b6:	2104      	movs	r1, #4
 80003b8:	f000 fb7c 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80003bc:	231c      	movs	r3, #28
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	220b      	movs	r2, #11
 80003c4:	2108      	movs	r1, #8
 80003c6:	f000 fb75 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80003ca:	2318      	movs	r3, #24
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	2213      	movs	r2, #19
 80003d2:	2110      	movs	r1, #16
 80003d4:	f000 fb6e 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80003d8:	2314      	movs	r3, #20
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	2217      	movs	r2, #23
 80003e0:	2114      	movs	r1, #20
 80003e2:	f000 fb67 	bl	8000ab4 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80003e6:	2310      	movs	r3, #16
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	221b      	movs	r2, #27
 80003ee:	2118      	movs	r1, #24
 80003f0:	f000 fb60 	bl	8000ab4 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2204      	movs	r2, #4
 80003f8:	2160      	movs	r1, #96	; 0x60
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fb2f 	bl	8000a5e <MCP2515_WriteByte>
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	2170      	movs	r1, #112	; 0x70
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fb29 	bl	8000a5e <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF1, 0x00);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	212a      	movs	r1, #42	; 0x2a
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb23 	bl	8000a5e <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF2, 0xE5);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	22e5      	movs	r2, #229	; 0xe5
 800041c:	2129      	movs	r1, #41	; 0x29
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb1d 	bl	8000a5e <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF3, 0x83);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2283      	movs	r2, #131	; 0x83
 8000428:	2128      	movs	r1, #40	; 0x28
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fb17 	bl	8000a5e <MCP2515_WriteByte>
  
  CANSPI_EN_Int(SPI_CAN);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fefe 	bl	8000234 <CANSPI_EN_Int>
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode(SPI_CAN))
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fa94 	bl	8000968 <MCP2515_SetNormalMode>
 8000440:	0003      	movs	r3, r0
 8000442:	001a      	movs	r2, r3
 8000444:	2301      	movs	r3, #1
 8000446:	4053      	eors	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <CANSPI_Initialize+0x1da>
    return false;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  return true;
 8000452:	2301      	movs	r3, #1
}
 8000454:	0018      	movs	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	b00a      	add	sp, #40	; 0x28
 800045a:	bd80      	pop	{r7, pc}

0800045c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 8000466:	240f      	movs	r4, #15
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
  
  idReg.tempSIDH = 0;
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000474:	4b40      	ldr	r3, [pc, #256]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000476:	2200      	movs	r2, #0
 8000478:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800047a:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <CANSPI_Transmit+0x11c>)
 800047c:	2200      	movs	r2, #0
 800047e:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000482:	2200      	movs	r2, #0
 8000484:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus(SPI_CAN);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fb97 	bl	8000bbc <MCP2515_ReadStatus>
 800048e:	0003      	movs	r3, r0
 8000490:	001a      	movs	r2, r3
 8000492:	4b3a      	ldr	r3, [pc, #232]	; (800057c <CANSPI_Transmit+0x120>)
 8000494:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000496:	4b39      	ldr	r3, [pc, #228]	; (800057c <CANSPI_Transmit+0x120>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2204      	movs	r2, #4
 800049c:	4013      	ands	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d11b      	bne.n	80004dc <CANSPI_Transmit+0x80>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6858      	ldr	r0, [r3, #4]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4a32      	ldr	r2, [pc, #200]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	f000 f970 	bl	8000794 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	7a19      	ldrb	r1, [r3, #8]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	3309      	adds	r3, #9
 80004bc:	4a2e      	ldr	r2, [pc, #184]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	000b      	movs	r3, r1
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	f000 fb29 	bl	8000b1c <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX0);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2181      	movs	r1, #129	; 0x81
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fb5a 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e046      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <CANSPI_Transmit+0x120>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2210      	movs	r2, #16
 80004e2:	4013      	ands	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d11c      	bne.n	8000524 <CANSPI_Transmit+0xc8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6858      	ldr	r0, [r3, #4]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4a21      	ldr	r2, [pc, #132]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	f000 f94d 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	7a19      	ldrb	r1, [r3, #8]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	3309      	adds	r3, #9
 8000502:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	000b      	movs	r3, r1
 800050a:	2142      	movs	r1, #66	; 0x42
 800050c:	f000 fb06 	bl	8000b1c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX1);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2182      	movs	r1, #130	; 0x82
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fb37 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e022      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <CANSPI_Transmit+0x120>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	4013      	ands	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d11b      	bne.n	800056a <CANSPI_Transmit+0x10e>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6858      	ldr	r0, [r3, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <CANSPI_Transmit+0x11c>)
 800053c:	0019      	movs	r1, r3
 800053e:	f000 f929 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	7a19      	ldrb	r1, [r3, #8]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	3309      	adds	r3, #9
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <CANSPI_Transmit+0x11c>)
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	000b      	movs	r3, r1
 8000552:	2144      	movs	r1, #68	; 0x44
 8000554:	f000 fae2 	bl	8000b1c <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX2);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2184      	movs	r1, #132	; 0x84
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb13 	bl	8000b88 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000562:	230f      	movs	r3, #15
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 800056a:	230f      	movs	r3, #15
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b005      	add	sp, #20
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	20000094 	.word	0x20000094
 800057c:	20000090 	.word	0x20000090

08000580 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800058a:	231f      	movs	r3, #31
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus(SPI_CAN);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fb30 	bl	8000bfa <MCP2515_GetRxStatus>
 800059a:	0003      	movs	r3, r0
 800059c:	001a      	movs	r2, r3
 800059e:	210c      	movs	r1, #12
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	701a      	strb	r2, [r3, #0]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	223f      	movs	r2, #63	; 0x3f
 80005aa:	4393      	bics	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <CANSPI_Receive+0x34>
 80005b2:	e07e      	b.n	80006b2 <CANSPI_Receive+0x132>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	223f      	movs	r2, #63	; 0x3f
 80005ba:	4393      	bics	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3b40      	subs	r3, #64	; 0x40
 80005c0:	425a      	negs	r2, r3
 80005c2:	4153      	adcs	r3, r2
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	213f      	movs	r1, #63	; 0x3f
 80005cc:	438b      	bics	r3, r1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3bc0      	subs	r3, #192	; 0xc0
 80005d2:	4259      	negs	r1, r3
 80005d4:	414b      	adcs	r3, r1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <CANSPI_Receive+0x70>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80005e0:	2310      	movs	r3, #16
 80005e2:	18fa      	adds	r2, r7, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	230d      	movs	r3, #13
 80005e8:	2190      	movs	r1, #144	; 0x90
 80005ea:	f000 fa0f 	bl	8000a0c <MCP2515_ReadRxSequence>
 80005ee:	e00e      	b.n	800060e <CANSPI_Receive+0x8e>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	223f      	movs	r2, #63	; 0x3f
 80005f8:	4393      	bics	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b80      	cmp	r3, #128	; 0x80
 80005fe:	d106      	bne.n	800060e <CANSPI_Receive+0x8e>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000600:	2310      	movs	r3, #16
 8000602:	18fa      	adds	r2, r7, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	230d      	movs	r3, #13
 8000608:	2194      	movs	r1, #148	; 0x94
 800060a:	f000 f9ff 	bl	8000a0c <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800060e:	230c      	movs	r3, #12
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2218      	movs	r2, #24
 8000616:	4013      	ands	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b10      	cmp	r3, #16
 800061c:	d111      	bne.n	8000642 <CANSPI_Receive+0xc2>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000624:	2410      	movs	r4, #16
 8000626:	193b      	adds	r3, r7, r4
 8000628:	7898      	ldrb	r0, [r3, #2]
 800062a:	193b      	adds	r3, r7, r4
 800062c:	78d9      	ldrb	r1, [r3, #3]
 800062e:	193b      	adds	r3, r7, r4
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	193b      	adds	r3, r7, r4
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	f000 f843 	bl	80006c0 <convertReg2ExtendedCANid>
 800063a:	0002      	movs	r2, r0
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	e00e      	b.n	8000660 <CANSPI_Receive+0xe0>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000648:	2110      	movs	r1, #16
 800064a:	187b      	adds	r3, r7, r1
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	187b      	adds	r3, r7, r1
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 f87f 	bl	8000758 <convertReg2StandardCANid>
 800065a:	0002      	movs	r2, r0
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000660:	2110      	movs	r1, #16
 8000662:	187b      	adds	r3, r7, r1
 8000664:	791a      	ldrb	r2, [r3, #4]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	795a      	ldrb	r2, [r3, #5]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	799a      	ldrb	r2, [r3, #6]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	79da      	ldrb	r2, [r3, #7]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	7a1a      	ldrb	r2, [r3, #8]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	7a5a      	ldrb	r2, [r3, #9]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	7a9a      	ldrb	r2, [r3, #10]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	7ada      	ldrb	r2, [r3, #11]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	7b1a      	ldrb	r2, [r3, #12]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80006aa:	231f      	movs	r3, #31
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 80006b2:	231f      	movs	r3, #31
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0005      	movs	r5, r0
 80006c8:	000c      	movs	r4, r1
 80006ca:	0010      	movs	r0, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	1c2a      	adds	r2, r5, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	1c22      	adds	r2, r4, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	1d7b      	adds	r3, r7, #5
 80006dc:	1c02      	adds	r2, r0, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	1c0a      	adds	r2, r1, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80006ee:	200f      	movs	r0, #15
 80006f0:	183b      	adds	r3, r7, r0
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	2103      	movs	r1, #3
 80006f8:	400a      	ands	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80006fc:	210e      	movs	r1, #14
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	0952      	lsrs	r2, r2, #5
 8000706:	701a      	strb	r2, [r3, #0]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000708:	1d7b      	adds	r3, r7, #5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	18d3      	adds	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800074e:	697b      	ldr	r3, [r7, #20]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bdb0      	pop	{r4, r5, r7, pc}

08000758 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	1c0a      	adds	r2, r1, #0
 8000768:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b2db      	uxtb	r3, r3
 800077e:	001a      	movs	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	189b      	adds	r3, r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}

08000794 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	200b      	movs	r0, #11
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	1c0a      	adds	r2, r1, #0
 80007a4:	701a      	strb	r2, [r3, #0]
  uint8_t wipSIDL = 0;
 80007a6:	2117      	movs	r1, #23
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80007ae:	183b      	adds	r3, r7, r0
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d136      	bne.n	8000824 <convertCANid2Reg+0x90>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	0008      	movs	r0, r1
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2103      	movs	r1, #3
 80007dc:	400a      	ands	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 3;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	221f      	movs	r2, #31
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	188a      	adds	r2, r1, r2
 80007f8:	701a      	strb	r2, [r3, #0]
    wipSIDL = wipSIDL + 0x08;
 80007fa:	183b      	adds	r3, r7, r0
 80007fc:	0001      	movs	r1, r0
 80007fe:	183a      	adds	r2, r7, r0
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	3208      	adds	r2, #8
 8000804:	701a      	strb	r2, [r3, #0]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2214      	movs	r2, #20
 800080c:	4393      	bics	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000822:	e013      	b.n	800084c <convertCANid2Reg+0xb8>
    passedIdReg->tempEID8 = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b006      	add	sp, #24
 8000852:	bd80      	pop	{r7, pc}

08000854 <MCP2515_CS_HIGH>:
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET)

void MCP2515_CS_HIGH(SPI_HandleTypeDef *SPI_CAN)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MCP2515_CS_HIGH+0x34>)
 8000860:	429a      	cmp	r2, r3
 8000862:	d106      	bne.n	8000872 <MCP2515_CS_HIGH+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_SET);
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MCP2515_CS_HIGH+0x38>)
 8000866:	2201      	movs	r2, #1
 8000868:	2140      	movs	r1, #64	; 0x40
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fbf8 	bl	8002060 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
}
 8000870:	e006      	b.n	8000880 <MCP2515_CS_HIGH+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	015b      	lsls	r3, r3, #5
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MCP2515_CS_HIGH+0x38>)
 8000878:	2201      	movs	r2, #1
 800087a:	0019      	movs	r1, r3
 800087c:	f001 fbf0 	bl	8002060 <HAL_GPIO_WritePin>
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098
 800088c:	48000400 	.word	0x48000400

08000890 <MCP2515_CS_LOW>:
void MCP2515_CS_LOW(SPI_HandleTypeDef *SPI_CAN)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MCP2515_CS_LOW+0x34>)
 800089c:	429a      	cmp	r2, r3
 800089e:	d106      	bne.n	80008ae <MCP2515_CS_LOW+0x1e>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MCP2515_CS_LOW+0x38>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fbda 	bl	8002060 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
}
 80008ac:	e006      	b.n	80008bc <MCP2515_CS_LOW+0x2c>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	015b      	lsls	r3, r3, #5
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MCP2515_CS_LOW+0x38>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	0019      	movs	r1, r3
 80008b8:	f001 fbd2 	bl	8002060 <HAL_GPIO_WritePin>
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000098 	.word	0x20000098
 80008c8:	48000400 	.word	0x48000400

080008cc <MCP2515_Initialize>:
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN);
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  MCP2515_CS_HIGH(SPI_CAN);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	0018      	movs	r0, r3
 80008d8:	f7ff ffbc 	bl	8000854 <MCP2515_CS_HIGH>
  
  uint8_t loop = 10;
 80008dc:	230f      	movs	r3, #15
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	220a      	movs	r2, #10
 80008e2:	701a      	strb	r2, [r3, #0]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 fdbe 	bl	8003468 <HAL_SPI_GetState>
 80008ec:	0003      	movs	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d101      	bne.n	80008f6 <MCP2515_Initialize+0x2a>
      return true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00a      	b.n	800090c <MCP2515_Initialize+0x40>
    
    loop--;
 80008f6:	210f      	movs	r1, #15
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	3a01      	subs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ec      	bne.n	80008e4 <MCP2515_Initialize+0x18>
      
  return false;
 800090a:	2300      	movs	r3, #0
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b004      	add	sp, #16
 8000912:	bd80      	pop	{r7, pc}

08000914 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(SPI_HandleTypeDef *SPI_CAN)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x80);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	210f      	movs	r1, #15
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f89b 	bl	8000a5e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	220a      	movs	r2, #10
 800092e:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	210e      	movs	r1, #14
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f840 	bl	80009ba <MCP2515_ReadByte>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	23e0      	movs	r3, #224	; 0xe0
 8000940:	4013      	ands	r3, r2
 8000942:	2b80      	cmp	r3, #128	; 0x80
 8000944:	d101      	bne.n	800094a <MCP2515_SetConfigMode+0x36>
      return true;
 8000946:	2301      	movs	r3, #1
 8000948:	e00a      	b.n	8000960 <MCP2515_SetConfigMode+0x4c>
    
    loop--;
 800094a:	210f      	movs	r1, #15
 800094c:	187b      	adds	r3, r7, r1
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	187b      	adds	r3, r7, r1
 8000952:	3a01      	subs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 8000956:	187b      	adds	r3, r7, r1
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e8      	bne.n	8000930 <MCP2515_SetConfigMode+0x1c>
  
  return false;
 800095e:	2300      	movs	r3, #0
}
 8000960:	0018      	movs	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}

08000968 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(SPI_HandleTypeDef *SPI_CAN)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x00);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	210f      	movs	r1, #15
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f871 	bl	8000a5e <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800097c:	230f      	movs	r3, #15
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	220a      	movs	r2, #10
 8000982:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	210e      	movs	r1, #14
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f816 	bl	80009ba <MCP2515_ReadByte>
 800098e:	0003      	movs	r3, r0
 8000990:	001a      	movs	r2, r3
 8000992:	23e0      	movs	r3, #224	; 0xe0
 8000994:	4013      	ands	r3, r2
 8000996:	d101      	bne.n	800099c <MCP2515_SetNormalMode+0x34>
      return true;
 8000998:	2301      	movs	r3, #1
 800099a:	e00a      	b.n	80009b2 <MCP2515_SetNormalMode+0x4a>
    
    loop--;
 800099c:	210f      	movs	r1, #15
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	3a01      	subs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
  } while(loop > 0);
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e9      	bne.n	8000984 <MCP2515_SetNormalMode+0x1c>
  
  return false;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b004      	add	sp, #16
 80009b8:	bd80      	pop	{r7, pc}

080009ba <MCP2515_ReadByte>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (SPI_HandleTypeDef *SPI_CAN, uint8_t address)
{
 80009ba:	b5b0      	push	{r4, r5, r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	000a      	movs	r2, r1
 80009c4:	1cfb      	adds	r3, r7, #3
 80009c6:	701a      	strb	r2, [r3, #0]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ff60 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2103      	movs	r1, #3
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 f965 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 80009da:	1cfb      	adds	r3, r7, #3
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f95e 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80009e8:	250f      	movs	r5, #15
 80009ea:	197c      	adds	r4, r7, r5
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f97c 	bl	8000cec <SPI_Rx>
 80009f4:	0003      	movs	r3, r0
 80009f6:	7023      	strb	r3, [r4, #0]
      
  MCP2515_CS_HIGH(SPI_CAN);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff ff2a 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000a00:	197b      	adds	r3, r7, r5
 8000a02:	781b      	ldrb	r3, [r3, #0]
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b004      	add	sp, #16
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}

08000a0c <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	0008      	movs	r0, r1
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	0019      	movs	r1, r3
 8000a1a:	240b      	movs	r4, #11
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	1c02      	adds	r2, r0, #0
 8000a20:	701a      	strb	r2, [r3, #0]
 8000a22:	250a      	movs	r5, #10
 8000a24:	197b      	adds	r3, r7, r5
 8000a26:	1c0a      	adds	r2, r1, #0
 8000a28:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff2f 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f932 	bl	8000ca4 <SPI_Tx>
  SPI_RxBuffer(SPI_CAN, data, length);
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 f960 	bl	8000d0e <SPI_RxBuffer>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff feff 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}

08000a5e <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t data)
{    
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	0008      	movs	r0, r1
 8000a68:	0011      	movs	r1, r2
 8000a6a:	1cfb      	adds	r3, r7, #3
 8000a6c:	1c02      	adds	r2, r0, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1cbb      	adds	r3, r7, #2
 8000a72:	1c0a      	adds	r2, r1, #0
 8000a74:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff ff09 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2102      	movs	r1, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 f90e 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000a88:	1cfb      	adds	r3, r7, #3
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f907 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000a96:	1cbb      	adds	r3, r7, #2
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f900 	bl	8000ca4 <SPI_Tx>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f7ff fed4 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	0008      	movs	r0, r1
 8000abe:	0011      	movs	r1, r2
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	240b      	movs	r4, #11
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	1c02      	adds	r2, r0, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	250a      	movs	r5, #10
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	1c0a      	adds	r2, r1, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fedb 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2102      	movs	r1, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 f8e0 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, startAddress);
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 f8d9 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, (endAddress - startAddress + 1));
 8000af2:	197a      	adds	r2, r7, r5
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f8dd 	bl	8000cc6 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH(SPI_CAN);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fea0 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b004      	add	sp, #16
 8000b1a:	bdb0      	pop	{r4, r5, r7, pc}

08000b1c <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	0008      	movs	r0, r1
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	0019      	movs	r1, r3
 8000b2a:	250b      	movs	r5, #11
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	240a      	movs	r4, #10
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	1c0a      	adds	r2, r1, #0
 8000b38:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fea7 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000b42:	197b      	adds	r3, r7, r5
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f8aa 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, idReg, 4);
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2204      	movs	r2, #4
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 f8b5 	bl	8000cc6 <SPI_TxBuffer>
  SPI_Tx(SPI_CAN, dlc);
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 f89d 	bl	8000ca4 <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, dlc);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	6a39      	ldr	r1, [r7, #32]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f8a7 	bl	8000cc6 <SPI_TxBuffer>
       
  MCP2515_CS_HIGH(SPI_CAN);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fe6a 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bdb0      	pop	{r4, r5, r7, pc}

08000b88 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	000a      	movs	r2, r1
 8000b92:	1cfb      	adds	r3, r7, #3
 8000b94:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff fe79 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000b9e:	1cfb      	adds	r3, r7, #3
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f87c 	bl	8000ca4 <SPI_Tx>
      
  MCP2515_CS_HIGH(SPI_CAN);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff fe50 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000bbc:	b5b0      	push	{r4, r5, r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fe62 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ_STATUS);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	21a0      	movs	r1, #160	; 0xa0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f000 f867 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000bd6:	250f      	movs	r5, #15
 8000bd8:	197c      	adds	r4, r7, r5
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 f885 	bl	8000cec <SPI_Rx>
 8000be2:	0003      	movs	r3, r0
 8000be4:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff fe33 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
}
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bdb0      	pop	{r4, r5, r7, pc}

08000bfa <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000bfa:	b5b0      	push	{r4, r5, r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fe43 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_RX_STATUS);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	21b0      	movs	r1, #176	; 0xb0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f848 	bl	8000ca4 <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000c14:	250f      	movs	r5, #15
 8000c16:	197c      	adds	r4, r7, r5
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f866 	bl	8000cec <SPI_Rx>
 8000c20:	0003      	movs	r3, r0
 8000c22:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fe14 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000c2c:	197b      	adds	r3, r7, r5
 8000c2e:	781b      	ldrb	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}

08000c38 <MCP2515_BitModify>:

/* 레지스터 값 변경 */
void MCP2515_BitModify(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t mask, uint8_t data)
{    
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	000c      	movs	r4, r1
 8000c42:	0010      	movs	r0, r2
 8000c44:	0019      	movs	r1, r3
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	1c22      	adds	r2, r4, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	1cbb      	adds	r3, r7, #2
 8000c4e:	1c02      	adds	r2, r0, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1c7b      	adds	r3, r7, #1
 8000c54:	1c0a      	adds	r2, r1, #0
 8000c56:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f7ff fe18 	bl	8000890 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_BIT_MOD);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2105      	movs	r1, #5
 8000c64:	0018      	movs	r0, r3
 8000c66:	f000 f81d 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000c6a:	1cfb      	adds	r3, r7, #3
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0011      	movs	r1, r2
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f816 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, mask);
 8000c78:	1cbb      	adds	r3, r7, #2
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 f80f 	bl	8000ca4 <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000c86:	1c7b      	adds	r3, r7, #1
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 f808 	bl	8000ca4 <SPI_Tx>
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fddc 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b003      	add	sp, #12
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(SPI_HandleTypeDef *SPI_CAN, uint8_t data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	000a      	movs	r2, r1
 8000cae:	1cfb      	adds	r3, r7, #3
 8000cb0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000cb2:	1cf9      	adds	r1, r7, #3
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	230a      	movs	r3, #10
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f001 ff5f 	bl	8002b7c <HAL_SPI_Transmit>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	230a      	movs	r3, #10
 8000ce0:	f001 ff4c 	bl	8002b7c <HAL_SPI_Transmit>
}
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b004      	add	sp, #16
 8000cea:	bd80      	pop	{r7, pc}

08000cec <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cf4:	240f      	movs	r4, #15
 8000cf6:	1939      	adds	r1, r7, r4
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f002 f895 	bl	8002e2c <HAL_SPI_Receive>
  return retVal;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	781b      	ldrb	r3, [r3, #0]
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd90      	pop	{r4, r7, pc}

08000d0e <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	68f8      	ldr	r0, [r7, #12]
 8000d26:	230a      	movs	r3, #10
 8000d28:	f002 f880 	bl	8002e2c <HAL_SPI_Receive>
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b004      	add	sp, #16
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 fec7 	bl	8001acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f845 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f000 f93b 	bl	8000fbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d46:	f000 f909 	bl	8000f5c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d4a:	f000 f88b 	bl	8000e64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d4e:	f000 f8c7 	bl	8000ee0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d52:	f003 ffe5 	bl	8004d20 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_sem */
  CAN_semHandle = osSemaphoreNew(1, 1, &CAN_sem_attributes);
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <main+0x70>)
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f004 f909 	bl	8004f74 <osSemaphoreNew>
 8000d62:	0002      	movs	r2, r0
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <main+0x74>)
 8000d66:	601a      	str	r2, [r3, #0]

  /* creation of uart_tx_sem */
  uart_tx_semHandle = osSemaphoreNew(1, 1, &uart_tx_sem_attributes);
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <main+0x78>)
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f004 f900 	bl	8004f74 <osSemaphoreNew>
 8000d74:	0002      	movs	r2, r0
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <main+0x7c>)
 8000d78:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <main+0x80>)
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0x84>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	0018      	movs	r0, r3
 8000d82:	f004 f827 	bl	8004dd4 <osThreadNew>
 8000d86:	0002      	movs	r2, r0
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <main+0x88>)
 8000d8a:	601a      	str	r2, [r3, #0]

  /* creation of CAN */
  CANHandle = osThreadNew(can_task, NULL, &CAN_attributes);
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <main+0x8c>)
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <main+0x90>)
 8000d90:	2100      	movs	r1, #0
 8000d92:	0018      	movs	r0, r3
 8000d94:	f004 f81e 	bl	8004dd4 <osThreadNew>
 8000d98:	0002      	movs	r2, r0
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <main+0x94>)
 8000d9c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d9e:	f003 ffeb 	bl	8004d78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <main+0x6e>
 8000da4:	08008728 	.word	0x08008728
 8000da8:	200001ec 	.word	0x200001ec
 8000dac:	08008738 	.word	0x08008738
 8000db0:	200001f0 	.word	0x200001f0
 8000db4:	080086e0 	.word	0x080086e0
 8000db8:	080011a5 	.word	0x080011a5
 8000dbc:	200001e4 	.word	0x200001e4
 8000dc0:	08008704 	.word	0x08008704
 8000dc4:	080011b5 	.word	0x080011b5
 8000dc8:	200001e8 	.word	0x200001e8

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b091      	sub	sp, #68	; 0x44
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	2410      	movs	r4, #16
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2330      	movs	r3, #48	; 0x30
 8000dda:	001a      	movs	r2, r3
 8000ddc:	2100      	movs	r1, #0
 8000dde:	f006 feda 	bl	8007b96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de2:	003b      	movs	r3, r7
 8000de4:	0018      	movs	r0, r3
 8000de6:	2310      	movs	r3, #16
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f006 fed3 	bl	8007b96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df0:	0021      	movs	r1, r4
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2202      	movs	r2, #2
 8000df6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2210      	movs	r2, #16
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2202      	movs	r2, #2
 8000e08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0212      	lsls	r2, r2, #8
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0352      	lsls	r2, r2, #13
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 f956 	bl	80020d4 <HAL_RCC_OscConfig>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e2c:	f000 fc24 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	003b      	movs	r3, r7
 8000e32:	2207      	movs	r2, #7
 8000e34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 fc5f 	bl	8002710 <HAL_RCC_ClockConfig>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e56:	f000 fc0f 	bl	8001678 <Error_Handler>
  }
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b011      	add	sp, #68	; 0x44
 8000e60:	bd90      	pop	{r4, r7, pc}
	...

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_SPI1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e70:	2282      	movs	r2, #130	; 0x82
 8000e72:	0052      	lsls	r2, r2, #1
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e7e:	22e0      	movs	r2, #224	; 0xe0
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <MX_SPI1_Init+0x74>)
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fda1 	bl	8002a0c <HAL_SPI_Init>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fbd3 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000098 	.word	0x20000098
 8000edc:	40013000 	.word	0x40013000

08000ee0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <MX_SPI2_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000eec:	2282      	movs	r2, #130	; 0x82
 8000eee:	0052      	lsls	r2, r2, #1
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000efa:	22e0      	movs	r2, #224	; 0xe0
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f16:	2220      	movs	r2, #32
 8000f18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f2e:	2207      	movs	r2, #7
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <MX_SPI2_Init+0x74>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fd63 	bl	8002a0c <HAL_SPI_Init>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 fb95 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000fc 	.word	0x200000fc
 8000f58:	40003800 	.word	0x40003800

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART2_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f68:	2296      	movs	r2, #150	; 0x96
 8000f6a:	0212      	lsls	r2, r2, #8
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 fea1 	bl	8003ce8 <HAL_UART_Init>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 fb65 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000160 	.word	0x20000160
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	2414      	movs	r4, #20
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2314      	movs	r3, #20
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f006 fde2 	bl	8007b96 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0309      	lsls	r1, r1, #12
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	031b      	lsls	r3, r3, #12
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	03c9      	lsls	r1, r1, #15
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	03db      	lsls	r3, r3, #15
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800100c:	695a      	ldr	r2, [r3, #20]
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0289      	lsls	r1, r1, #10
 8001014:	430a      	orrs	r2, r1
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <MX_GPIO_Init+0x11c>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	02c9      	lsls	r1, r1, #11
 8001030:	430a      	orrs	r2, r1
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_GPIO_Init+0x11c>)
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	02db      	lsls	r3, r3, #11
 800103c:	4013      	ands	r3, r2
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6, GPIO_PIN_RESET);
 8001042:	2382      	movs	r3, #130	; 0x82
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	4825      	ldr	r0, [pc, #148]	; (80010dc <MX_GPIO_Init+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	0019      	movs	r1, r3
 800104c:	f001 f808 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_GPIO_Init+0x124>)
 8001054:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2284      	movs	r2, #132	; 0x84
 800105a:	0392      	lsls	r2, r2, #14
 800105c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	193b      	adds	r3, r7, r4
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	193b      	adds	r3, r7, r4
 8001066:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <MX_GPIO_Init+0x128>)
 8001068:	0019      	movs	r1, r3
 800106a:	0010      	movs	r0, r2
 800106c:	f000 fe88 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8001070:	0021      	movs	r1, r4
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2282      	movs	r2, #130	; 0x82
 8001076:	0152      	lsls	r2, r2, #5
 8001078:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	000c      	movs	r4, r1
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2201      	movs	r2, #1
 8001080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	193b      	adds	r3, r7, r4
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	193b      	adds	r3, r7, r4
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_GPIO_Init+0x120>)
 8001092:	0019      	movs	r1, r3
 8001094:	0010      	movs	r0, r2
 8001096:	f000 fe73 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109a:	0021      	movs	r1, r4
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2284      	movs	r2, #132	; 0x84
 80010a8:	0392      	lsls	r2, r2, #14
 80010aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	187a      	adds	r2, r7, r1
 80010b4:	2390      	movs	r3, #144	; 0x90
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	0011      	movs	r1, r2
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fe60 	bl	8001d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2103      	movs	r1, #3
 80010c4:	2007      	movs	r0, #7
 80010c6:	f000 fdb9 	bl	8001c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80010ca:	2007      	movs	r0, #7
 80010cc:	f000 fdcb 	bl	8001c66 <HAL_NVIC_EnableIRQ>

}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b00b      	add	sp, #44	; 0x2c
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	00002010 	.word	0x00002010
 80010e4:	48000800 	.word	0x48000800

080010e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	1dbb      	adds	r3, r7, #6
 80010f2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == Ican1_Pin)
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d119      	bne.n	8001134 <HAL_GPIO_EXTI_Callback+0x4c>
	{

		if((MCP2515_ReadByte(CAN1, MCP2515_CANINTF) & 0x1C) != 0)
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_GPIO_EXTI_Callback+0x90>)
 8001102:	212c      	movs	r1, #44	; 0x2c
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fc58 	bl	80009ba <MCP2515_ReadByte>
 800110a:	0003      	movs	r3, r0
 800110c:	001a      	movs	r2, r3
 800110e:	231c      	movs	r3, #28
 8001110:	4013      	ands	r3, r2
 8001112:	d004      	beq.n	800111e <HAL_GPIO_EXTI_Callback+0x36>
		{
			// Poner aqui un punto de ruptura para ver cuando se recibe una interrupcion por
			// transmision en el CAN1
			osSemaphoreRelease(CAN_semHandle);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_EXTI_Callback+0x94>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	0018      	movs	r0, r3
 800111a:	f004 f82b 	bl	8005174 <osSemaphoreRelease>
		}
		if((MCP2515_ReadByte(CAN1, MCP2515_CANINTF) & 0x03) != 0)
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_GPIO_EXTI_Callback+0x90>)
 8001120:	212c      	movs	r1, #44	; 0x2c
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff fc49 	bl	80009ba <MCP2515_ReadByte>
 8001128:	0003      	movs	r3, r0
 800112a:	001a      	movs	r2, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4013      	ands	r3, r2
 8001130:	d000      	beq.n	8001134 <HAL_GPIO_EXTI_Callback+0x4c>
		{
			// Poner aqui un punto de ruptura para ver cuando se recibe una interrupcion por
			// recepcion en el CAN1
			__NOP();
 8001132:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (GPIO_Pin==Ican2_Pin)
 8001134:	1dbb      	adds	r3, r7, #6
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	2b10      	cmp	r3, #16
 800113a:	d119      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x88>
	{

		if((MCP2515_ReadByte(CAN2, MCP2515_CANINTF) & 0x1C) != 0)
 800113c:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_GPIO_EXTI_Callback+0x98>)
 800113e:	212c      	movs	r1, #44	; 0x2c
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fc3a 	bl	80009ba <MCP2515_ReadByte>
 8001146:	0003      	movs	r3, r0
 8001148:	001a      	movs	r2, r3
 800114a:	231c      	movs	r3, #28
 800114c:	4013      	ands	r3, r2
 800114e:	d004      	beq.n	800115a <HAL_GPIO_EXTI_Callback+0x72>
		{
			// Poner aqui un punto de ruptura para ver cuando se recibe una interrupcion por
			// transmision en el CAN2
			osSemaphoreRelease(CAN_semHandle);
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_GPIO_EXTI_Callback+0x94>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0018      	movs	r0, r3
 8001156:	f004 f80d 	bl	8005174 <osSemaphoreRelease>
		}
		if((MCP2515_ReadByte(CAN2, MCP2515_CANINTF) & 0x03) != 0)
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_GPIO_EXTI_Callback+0x98>)
 800115c:	212c      	movs	r1, #44	; 0x2c
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fc2b 	bl	80009ba <MCP2515_ReadByte>
 8001164:	0003      	movs	r3, r0
 8001166:	001a      	movs	r2, r3
 8001168:	2303      	movs	r3, #3
 800116a:	4013      	ands	r3, r2
 800116c:	d000      	beq.n	8001170 <HAL_GPIO_EXTI_Callback+0x88>
		{
			// Poner aqui un punto de ruptura para ver cuando se recibe una interrupcion por
			// recepcion en el CAN2
			__NOP();
 800116e:	46c0      	nop			; (mov r8, r8)
		}
	}

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000098 	.word	0x20000098
 800117c:	200001ec 	.word	0x200001ec
 8001180:	200000fc 	.word	0x200000fc

08001184 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(uart_tx_semHandle);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_UART_TxCpltCallback+0x1c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f003 ffef 	bl	8005174 <osSemaphoreRelease>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200001f0 	.word	0x200001f0

080011a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f003 feb9 	bl	8004f24 <osDelay>
 80011b2:	e7fb      	b.n	80011ac <StartDefaultTask+0x8>

080011b4 <can_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_task */
void can_task(void *argument)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	46de      	mov	lr, fp
 80011b8:	4657      	mov	r7, sl
 80011ba:	464e      	mov	r6, r9
 80011bc:	4645      	mov	r5, r8
 80011be:	b5e0      	push	{r5, r6, r7, lr}
 80011c0:	b099      	sub	sp, #100	; 0x64
 80011c2:	af08      	add	r7, sp, #32
 80011c4:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN can_task */
	uint8_t tx_buffer[49], i=0;
 80011c6:	233f      	movs	r3, #63	; 0x3f
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]

	if( CANSPI_Initialize(CAN1)) {
 80011ce:	4bbb      	ldr	r3, [pc, #748]	; (80014bc <can_task+0x308>)
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff f851 	bl	8000278 <CANSPI_Initialize>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d04d      	beq.n	8001276 <can_task+0xc2>
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80011da:	4bb9      	ldr	r3, [pc, #740]	; (80014c0 <can_task+0x30c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2201      	movs	r2, #1
 80011e0:	4252      	negs	r2, r2
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f003 ff67 	bl	80050b8 <osSemaphoreAcquire>
				sprintf(tx_buffer, "CAN1 initialized OK\n\r");
 80011ea:	4ab6      	ldr	r2, [pc, #728]	; (80014c4 <can_task+0x310>)
 80011ec:	240c      	movs	r4, #12
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f006 fdf6 	bl	8007de4 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80011f8:	1939      	adds	r1, r7, r4
 80011fa:	4bb3      	ldr	r3, [pc, #716]	; (80014c8 <can_task+0x314>)
 80011fc:	2231      	movs	r2, #49	; 0x31
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 fdc6 	bl	8003d90 <HAL_UART_Transmit_IT>
				dSTANDARD_CAN_MSG_ID_2_0B;
						    	txMessage.frame.id = 15;
 8001204:	4bb1      	ldr	r3, [pc, #708]	; (80014cc <can_task+0x318>)
 8001206:	220f      	movs	r2, #15
 8001208:	605a      	str	r2, [r3, #4]
						    	txMessage.frame.dlc = 8;
 800120a:	4bb0      	ldr	r3, [pc, #704]	; (80014cc <can_task+0x318>)
 800120c:	2208      	movs	r2, #8
 800120e:	721a      	strb	r2, [r3, #8]
						    	txMessage.frame.data0 = 1;
 8001210:	4bae      	ldr	r3, [pc, #696]	; (80014cc <can_task+0x318>)
 8001212:	2201      	movs	r2, #1
 8001214:	725a      	strb	r2, [r3, #9]
						    	txMessage.frame.data1 = 2;
 8001216:	4bad      	ldr	r3, [pc, #692]	; (80014cc <can_task+0x318>)
 8001218:	2202      	movs	r2, #2
 800121a:	729a      	strb	r2, [r3, #10]
						    	txMessage.frame.data2 = 3;
 800121c:	4bab      	ldr	r3, [pc, #684]	; (80014cc <can_task+0x318>)
 800121e:	2203      	movs	r2, #3
 8001220:	72da      	strb	r2, [r3, #11]
						    	txMessage.frame.data3 = 4;
 8001222:	4baa      	ldr	r3, [pc, #680]	; (80014cc <can_task+0x318>)
 8001224:	2204      	movs	r2, #4
 8001226:	731a      	strb	r2, [r3, #12]
						    	txMessage.frame.data4 = 5;
 8001228:	4ba8      	ldr	r3, [pc, #672]	; (80014cc <can_task+0x318>)
 800122a:	2205      	movs	r2, #5
 800122c:	735a      	strb	r2, [r3, #13]
						    	txMessage.frame.data5 = 6;
 800122e:	4ba7      	ldr	r3, [pc, #668]	; (80014cc <can_task+0x318>)
 8001230:	2206      	movs	r2, #6
 8001232:	739a      	strb	r2, [r3, #14]
						    	txMessage.frame.data6 = 7;
 8001234:	4ba5      	ldr	r3, [pc, #660]	; (80014cc <can_task+0x318>)
 8001236:	2207      	movs	r2, #7
 8001238:	73da      	strb	r2, [r3, #15]
						    	txMessage.frame.data7 = 8;
 800123a:	4ba4      	ldr	r3, [pc, #656]	; (80014cc <can_task+0x318>)
 800123c:	2208      	movs	r2, #8
 800123e:	741a      	strb	r2, [r3, #16]
						    	CANSPI_Transmit(CAN1, &txMessage);
 8001240:	4aa2      	ldr	r2, [pc, #648]	; (80014cc <can_task+0x318>)
 8001242:	4b9e      	ldr	r3, [pc, #632]	; (80014bc <can_task+0x308>)
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff f908 	bl	800045c <CANSPI_Transmit>
								osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 800124c:	4b9c      	ldr	r3, [pc, #624]	; (80014c0 <can_task+0x30c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	4252      	negs	r2, r2
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f003 ff2e 	bl	80050b8 <osSemaphoreAcquire>
								sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 800125c:	4a9c      	ldr	r2, [pc, #624]	; (80014d0 <can_task+0x31c>)
 800125e:	193b      	adds	r3, r7, r4
 8001260:	0011      	movs	r1, r2
 8001262:	0018      	movs	r0, r3
 8001264:	f006 fdbe 	bl	8007de4 <siprintf>
								HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001268:	1939      	adds	r1, r7, r4
 800126a:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <can_task+0x314>)
 800126c:	2231      	movs	r2, #49	; 0x31
 800126e:	0018      	movs	r0, r3
 8001270:	f002 fd8e 	bl	8003d90 <HAL_UART_Transmit_IT>
 8001274:	e014      	b.n	80012a0 <can_task+0xec>
		  }
		  else
		  {
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001276:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <can_task+0x30c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	4252      	negs	r2, r2
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f003 ff19 	bl	80050b8 <osSemaphoreAcquire>
				sprintf(tx_buffer, "Error CAN1 initiali\n\r");
 8001286:	4a93      	ldr	r2, [pc, #588]	; (80014d4 <can_task+0x320>)
 8001288:	240c      	movs	r4, #12
 800128a:	193b      	adds	r3, r7, r4
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f006 fda8 	bl	8007de4 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001294:	1939      	adds	r1, r7, r4
 8001296:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <can_task+0x314>)
 8001298:	2231      	movs	r2, #49	; 0x31
 800129a:	0018      	movs	r0, r3
 800129c:	f002 fd78 	bl	8003d90 <HAL_UART_Transmit_IT>
		  }
		  if (CANSPI_Initialize(CAN2)) {
 80012a0:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <can_task+0x324>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7fe ffe8 	bl	8000278 <CANSPI_Initialize>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d04d      	beq.n	8001348 <can_task+0x194>
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80012ac:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <can_task+0x30c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	4252      	negs	r2, r2
 80012b4:	0011      	movs	r1, r2
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fefe 	bl	80050b8 <osSemaphoreAcquire>
				sprintf(tx_buffer, "CAN2 initialized OK\n\r");
 80012bc:	4a87      	ldr	r2, [pc, #540]	; (80014dc <can_task+0x328>)
 80012be:	240c      	movs	r4, #12
 80012c0:	193b      	adds	r3, r7, r4
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f006 fd8d 	bl	8007de4 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80012ca:	1939      	adds	r1, r7, r4
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <can_task+0x314>)
 80012ce:	2231      	movs	r2, #49	; 0x31
 80012d0:	0018      	movs	r0, r3
 80012d2:	f002 fd5d 	bl	8003d90 <HAL_UART_Transmit_IT>
				dSTANDARD_CAN_MSG_ID_2_0B;
						    	txMessage.frame.id = 25;
 80012d6:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <can_task+0x318>)
 80012d8:	2219      	movs	r2, #25
 80012da:	605a      	str	r2, [r3, #4]
						    	txMessage.frame.dlc = 8;
 80012dc:	4b7b      	ldr	r3, [pc, #492]	; (80014cc <can_task+0x318>)
 80012de:	2208      	movs	r2, #8
 80012e0:	721a      	strb	r2, [r3, #8]
						    	txMessage.frame.data0 = 8;
 80012e2:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <can_task+0x318>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	725a      	strb	r2, [r3, #9]
						    	txMessage.frame.data1 = 7;
 80012e8:	4b78      	ldr	r3, [pc, #480]	; (80014cc <can_task+0x318>)
 80012ea:	2207      	movs	r2, #7
 80012ec:	729a      	strb	r2, [r3, #10]
						    	txMessage.frame.data2 = 6;
 80012ee:	4b77      	ldr	r3, [pc, #476]	; (80014cc <can_task+0x318>)
 80012f0:	2206      	movs	r2, #6
 80012f2:	72da      	strb	r2, [r3, #11]
						    	txMessage.frame.data3 = 5;
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <can_task+0x318>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	731a      	strb	r2, [r3, #12]
						    	txMessage.frame.data4 = 4;
 80012fa:	4b74      	ldr	r3, [pc, #464]	; (80014cc <can_task+0x318>)
 80012fc:	2204      	movs	r2, #4
 80012fe:	735a      	strb	r2, [r3, #13]
						    	txMessage.frame.data5 = 3;
 8001300:	4b72      	ldr	r3, [pc, #456]	; (80014cc <can_task+0x318>)
 8001302:	2203      	movs	r2, #3
 8001304:	739a      	strb	r2, [r3, #14]
						    	txMessage.frame.data6 = 2;
 8001306:	4b71      	ldr	r3, [pc, #452]	; (80014cc <can_task+0x318>)
 8001308:	2202      	movs	r2, #2
 800130a:	73da      	strb	r2, [r3, #15]
						    	txMessage.frame.data7 = 1;
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <can_task+0x318>)
 800130e:	2201      	movs	r2, #1
 8001310:	741a      	strb	r2, [r3, #16]
						    	CANSPI_Transmit(CAN2, &txMessage);
 8001312:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <can_task+0x318>)
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <can_task+0x324>)
 8001316:	0011      	movs	r1, r2
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff f89f 	bl	800045c <CANSPI_Transmit>
								osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 800131e:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <can_task+0x30c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2201      	movs	r2, #1
 8001324:	4252      	negs	r2, r2
 8001326:	0011      	movs	r1, r2
 8001328:	0018      	movs	r0, r3
 800132a:	f003 fec5 	bl	80050b8 <osSemaphoreAcquire>
								sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 800132e:	4a6c      	ldr	r2, [pc, #432]	; (80014e0 <can_task+0x32c>)
 8001330:	193b      	adds	r3, r7, r4
 8001332:	0011      	movs	r1, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f006 fd55 	bl	8007de4 <siprintf>
								HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800133a:	1939      	adds	r1, r7, r4
 800133c:	4b62      	ldr	r3, [pc, #392]	; (80014c8 <can_task+0x314>)
 800133e:	2231      	movs	r2, #49	; 0x31
 8001340:	0018      	movs	r0, r3
 8001342:	f002 fd25 	bl	8003d90 <HAL_UART_Transmit_IT>
 8001346:	e014      	b.n	8001372 <can_task+0x1be>
		  }
		  else
		  {
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001348:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <can_task+0x30c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	4252      	negs	r2, r2
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f003 feb0 	bl	80050b8 <osSemaphoreAcquire>
				sprintf(tx_buffer, "Error CAN2 initiali\n\r");
 8001358:	4a62      	ldr	r2, [pc, #392]	; (80014e4 <can_task+0x330>)
 800135a:	240c      	movs	r4, #12
 800135c:	193b      	adds	r3, r7, r4
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f006 fd3f 	bl	8007de4 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001366:	1939      	adds	r1, r7, r4
 8001368:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <can_task+0x314>)
 800136a:	2231      	movs	r2, #49	; 0x31
 800136c:	0018      	movs	r0, r3
 800136e:	f002 fd0f 	bl	8003d90 <HAL_UART_Transmit_IT>
		  }

		  /* Infinite loop */
		  for(;;)
		  {
				osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <can_task+0x334>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2201      	movs	r2, #1
 8001378:	4252      	negs	r2, r2
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f003 fe9b 	bl	80050b8 <osSemaphoreAcquire>
			    if(CANSPI_Receive(CAN1, &rxMessage))
 8001382:	4a5a      	ldr	r2, [pc, #360]	; (80014ec <can_task+0x338>)
 8001384:	4b4d      	ldr	r3, [pc, #308]	; (80014bc <can_task+0x308>)
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff f8f9 	bl	8000580 <CANSPI_Receive>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d100      	bne.n	8001394 <can_task+0x1e0>
 8001392:	e0af      	b.n	80014f4 <can_task+0x340>
			    {
					// Coger el semáforo de envío de trama por la UART
					osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <can_task+0x30c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	4252      	negs	r2, r2
 800139c:	0011      	movs	r1, r2
 800139e:	0018      	movs	r0, r3
 80013a0:	f003 fe8a 	bl	80050b8 <osSemaphoreAcquire>
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <can_task+0x338>)
 80013a6:	685a      	ldr	r2, [r3, #4]
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <can_task+0x338>)
 80013aa:	7a1b      	ldrb	r3, [r3, #8]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013ac:	469b      	mov	fp, r3
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80013ae:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <can_task+0x338>)
 80013b0:	7a5b      	ldrb	r3, [r3, #9]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013b2:	001c      	movs	r4, r3
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80013b4:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <can_task+0x338>)
 80013b6:	7a9b      	ldrb	r3, [r3, #10]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013b8:	001d      	movs	r5, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <can_task+0x338>)
 80013bc:	7adb      	ldrb	r3, [r3, #11]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013be:	001e      	movs	r6, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <can_task+0x338>)
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013c4:	469c      	mov	ip, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <can_task+0x338>)
 80013c8:	7b5b      	ldrb	r3, [r3, #13]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013ca:	4698      	mov	r8, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80013cc:	4b47      	ldr	r3, [pc, #284]	; (80014ec <can_task+0x338>)
 80013ce:	7b9b      	ldrb	r3, [r3, #14]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013d0:	4699      	mov	r9, r3
							rxMessage.frame.data6,rxMessage.frame.data7);
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <can_task+0x338>)
 80013d4:	7bdb      	ldrb	r3, [r3, #15]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013d6:	469a      	mov	sl, r3
							rxMessage.frame.data6,rxMessage.frame.data7);
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <can_task+0x338>)
 80013da:	7c1b      	ldrb	r3, [r3, #16]
					sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80013dc:	4944      	ldr	r1, [pc, #272]	; (80014f0 <can_task+0x33c>)
 80013de:	200c      	movs	r0, #12
 80013e0:	1838      	adds	r0, r7, r0
 80013e2:	9307      	str	r3, [sp, #28]
 80013e4:	4653      	mov	r3, sl
 80013e6:	9306      	str	r3, [sp, #24]
 80013e8:	464b      	mov	r3, r9
 80013ea:	9305      	str	r3, [sp, #20]
 80013ec:	4643      	mov	r3, r8
 80013ee:	9304      	str	r3, [sp, #16]
 80013f0:	4663      	mov	r3, ip
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	9602      	str	r6, [sp, #8]
 80013f6:	9501      	str	r5, [sp, #4]
 80013f8:	9400      	str	r4, [sp, #0]
 80013fa:	465b      	mov	r3, fp
 80013fc:	f006 fcf2 	bl	8007de4 <siprintf>
					HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001400:	200c      	movs	r0, #12
 8001402:	1839      	adds	r1, r7, r0
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <can_task+0x314>)
 8001406:	2231      	movs	r2, #49	; 0x31
 8001408:	0018      	movs	r0, r3
 800140a:	f002 fcc1 	bl	8003d90 <HAL_UART_Transmit_IT>
					CANSPI_CL_Flag_Int(CAN1);
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <can_task+0x308>)
 8001410:	0018      	movs	r0, r3
 8001412:	f7fe ff23 	bl	800025c <CANSPI_CL_Flag_Int>
			    	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <can_task+0x318>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
			    	txMessage.frame.id = 15;
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <can_task+0x318>)
 800141e:	220f      	movs	r2, #15
 8001420:	605a      	str	r2, [r3, #4]
			    	txMessage.frame.dlc = 8;
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <can_task+0x318>)
 8001424:	2208      	movs	r2, #8
 8001426:	721a      	strb	r2, [r3, #8]
			    	txMessage.frame.data0 = 1;
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <can_task+0x318>)
 800142a:	2201      	movs	r2, #1
 800142c:	725a      	strb	r2, [r3, #9]
			    	txMessage.frame.data1 = 2;
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <can_task+0x318>)
 8001430:	2202      	movs	r2, #2
 8001432:	729a      	strb	r2, [r3, #10]
			    	txMessage.frame.data2 = 3;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <can_task+0x318>)
 8001436:	2203      	movs	r2, #3
 8001438:	72da      	strb	r2, [r3, #11]
			    	txMessage.frame.data3 = 4;
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <can_task+0x318>)
 800143c:	2204      	movs	r2, #4
 800143e:	731a      	strb	r2, [r3, #12]
			    	txMessage.frame.data4 = 5;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <can_task+0x318>)
 8001442:	2205      	movs	r2, #5
 8001444:	735a      	strb	r2, [r3, #13]
			    	txMessage.frame.data5 = 6;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <can_task+0x318>)
 8001448:	2206      	movs	r2, #6
 800144a:	739a      	strb	r2, [r3, #14]
			    	txMessage.frame.data6 = 7;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <can_task+0x318>)
 800144e:	2207      	movs	r2, #7
 8001450:	73da      	strb	r2, [r3, #15]
			    	txMessage.frame.data7 = 8;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <can_task+0x318>)
 8001454:	2208      	movs	r2, #8
 8001456:	741a      	strb	r2, [r3, #16]
			    	CANSPI_Transmit(CAN1, &txMessage);
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <can_task+0x318>)
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <can_task+0x308>)
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f7fe fffc 	bl	800045c <CANSPI_Transmit>
					osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <can_task+0x30c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2201      	movs	r2, #1
 800146a:	4252      	negs	r2, r2
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f003 fe22 	bl	80050b8 <osSemaphoreAcquire>
			    	for (i=0; i<49; i++) tx_buffer[i]=0;
 8001474:	233f      	movs	r3, #63	; 0x3f
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e00b      	b.n	8001496 <can_task+0x2e2>
 800147e:	203f      	movs	r0, #63	; 0x3f
 8001480:	183b      	adds	r3, r7, r0
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	220c      	movs	r2, #12
 8001486:	18ba      	adds	r2, r7, r2
 8001488:	2100      	movs	r1, #0
 800148a:	54d1      	strb	r1, [r2, r3]
 800148c:	183b      	adds	r3, r7, r0
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	183b      	adds	r3, r7, r0
 8001492:	3201      	adds	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	233f      	movs	r3, #63	; 0x3f
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b30      	cmp	r3, #48	; 0x30
 800149e:	d9ee      	bls.n	800147e <can_task+0x2ca>
					sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <can_task+0x31c>)
 80014a2:	240c      	movs	r4, #12
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f006 fc9b 	bl	8007de4 <siprintf>
					HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80014ae:	1939      	adds	r1, r7, r4
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <can_task+0x314>)
 80014b2:	2231      	movs	r2, #49	; 0x31
 80014b4:	0018      	movs	r0, r3
 80014b6:	f002 fc6b 	bl	8003d90 <HAL_UART_Transmit_IT>
 80014ba:	e0b7      	b.n	800162c <can_task+0x478>
 80014bc:	20000098 	.word	0x20000098
 80014c0:	200001f0 	.word	0x200001f0
 80014c4:	08008588 	.word	0x08008588
 80014c8:	20000160 	.word	0x20000160
 80014cc:	200001f4 	.word	0x200001f4
 80014d0:	080085a0 	.word	0x080085a0
 80014d4:	080085b8 	.word	0x080085b8
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	080085d0 	.word	0x080085d0
 80014e0:	080085e8 	.word	0x080085e8
 80014e4:	08008600 	.word	0x08008600
 80014e8:	200001ec 	.word	0x200001ec
 80014ec:	20000208 	.word	0x20000208
 80014f0:	08008618 	.word	0x08008618
			    } else
			    if(CANSPI_Receive(CAN2, &rxMessage))
 80014f4:	4a50      	ldr	r2, [pc, #320]	; (8001638 <can_task+0x484>)
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <can_task+0x488>)
 80014f8:	0011      	movs	r1, r2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff f840 	bl	8000580 <CANSPI_Receive>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d100      	bne.n	8001506 <can_task+0x352>
 8001504:	e092      	b.n	800162c <can_task+0x478>
			    {
					// Coger el semáforo de envío de trama por la UART
					osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001506:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <can_task+0x48c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2201      	movs	r2, #1
 800150c:	4252      	negs	r2, r2
 800150e:	0011      	movs	r1, r2
 8001510:	0018      	movs	r0, r3
 8001512:	f003 fdd1 	bl	80050b8 <osSemaphoreAcquire>
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001516:	4b48      	ldr	r3, [pc, #288]	; (8001638 <can_task+0x484>)
 8001518:	685a      	ldr	r2, [r3, #4]
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 800151a:	4b47      	ldr	r3, [pc, #284]	; (8001638 <can_task+0x484>)
 800151c:	7a1b      	ldrb	r3, [r3, #8]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800151e:	469b      	mov	fp, r3
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <can_task+0x484>)
 8001522:	7a5b      	ldrb	r3, [r3, #9]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001524:	001c      	movs	r4, r3
							rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <can_task+0x484>)
 8001528:	7a9b      	ldrb	r3, [r3, #10]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800152a:	001d      	movs	r5, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <can_task+0x484>)
 800152e:	7adb      	ldrb	r3, [r3, #11]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001530:	001e      	movs	r6, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <can_task+0x484>)
 8001534:	7b1b      	ldrb	r3, [r3, #12]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001536:	469c      	mov	ip, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <can_task+0x484>)
 800153a:	7b5b      	ldrb	r3, [r3, #13]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800153c:	4698      	mov	r8, r3
							rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <can_task+0x484>)
 8001540:	7b9b      	ldrb	r3, [r3, #14]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001542:	4699      	mov	r9, r3
							rxMessage.frame.data6,rxMessage.frame.data7);
 8001544:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <can_task+0x484>)
 8001546:	7bdb      	ldrb	r3, [r3, #15]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001548:	469a      	mov	sl, r3
							rxMessage.frame.data6,rxMessage.frame.data7);
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <can_task+0x484>)
 800154c:	7c1b      	ldrb	r3, [r3, #16]
					sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800154e:	493d      	ldr	r1, [pc, #244]	; (8001644 <can_task+0x490>)
 8001550:	200c      	movs	r0, #12
 8001552:	1838      	adds	r0, r7, r0
 8001554:	9307      	str	r3, [sp, #28]
 8001556:	4653      	mov	r3, sl
 8001558:	9306      	str	r3, [sp, #24]
 800155a:	464b      	mov	r3, r9
 800155c:	9305      	str	r3, [sp, #20]
 800155e:	4643      	mov	r3, r8
 8001560:	9304      	str	r3, [sp, #16]
 8001562:	4663      	mov	r3, ip
 8001564:	9303      	str	r3, [sp, #12]
 8001566:	9602      	str	r6, [sp, #8]
 8001568:	9501      	str	r5, [sp, #4]
 800156a:	9400      	str	r4, [sp, #0]
 800156c:	465b      	mov	r3, fp
 800156e:	f006 fc39 	bl	8007de4 <siprintf>
					HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001572:	200c      	movs	r0, #12
 8001574:	1839      	adds	r1, r7, r0
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <can_task+0x494>)
 8001578:	2231      	movs	r2, #49	; 0x31
 800157a:	0018      	movs	r0, r3
 800157c:	f002 fc08 	bl	8003d90 <HAL_UART_Transmit_IT>
					CANSPI_CL_Flag_Int(CAN2);
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <can_task+0x488>)
 8001582:	0018      	movs	r0, r3
 8001584:	f7fe fe6a 	bl	800025c <CANSPI_CL_Flag_Int>
			    	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <can_task+0x498>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
			    	txMessage.frame.id = 25;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <can_task+0x498>)
 8001590:	2219      	movs	r2, #25
 8001592:	605a      	str	r2, [r3, #4]
			    	txMessage.frame.dlc = 8;
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <can_task+0x498>)
 8001596:	2208      	movs	r2, #8
 8001598:	721a      	strb	r2, [r3, #8]
			    	txMessage.frame.data0 = 8;
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <can_task+0x498>)
 800159c:	2208      	movs	r2, #8
 800159e:	725a      	strb	r2, [r3, #9]
			    	txMessage.frame.data1 = 7;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <can_task+0x498>)
 80015a2:	2207      	movs	r2, #7
 80015a4:	729a      	strb	r2, [r3, #10]
			    	txMessage.frame.data2 = 6;
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <can_task+0x498>)
 80015a8:	2206      	movs	r2, #6
 80015aa:	72da      	strb	r2, [r3, #11]
			    	txMessage.frame.data3 = 5;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <can_task+0x498>)
 80015ae:	2205      	movs	r2, #5
 80015b0:	731a      	strb	r2, [r3, #12]
			    	txMessage.frame.data4 = 4;
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <can_task+0x498>)
 80015b4:	2204      	movs	r2, #4
 80015b6:	735a      	strb	r2, [r3, #13]
			    	txMessage.frame.data5 = 3;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <can_task+0x498>)
 80015ba:	2203      	movs	r2, #3
 80015bc:	739a      	strb	r2, [r3, #14]
			    	txMessage.frame.data6 = 2;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <can_task+0x498>)
 80015c0:	2202      	movs	r2, #2
 80015c2:	73da      	strb	r2, [r3, #15]
			    	txMessage.frame.data7 = 1;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <can_task+0x498>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	741a      	strb	r2, [r3, #16]
			    	CANSPI_Transmit(CAN2, &txMessage);
 80015ca:	4a20      	ldr	r2, [pc, #128]	; (800164c <can_task+0x498>)
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <can_task+0x488>)
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7fe ff43 	bl	800045c <CANSPI_Transmit>
					osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <can_task+0x48c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4252      	negs	r2, r2
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f003 fd69 	bl	80050b8 <osSemaphoreAcquire>
			    	for (i=0; i<49; i++) tx_buffer[i]=0;
 80015e6:	233f      	movs	r3, #63	; 0x3f
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e00b      	b.n	8001608 <can_task+0x454>
 80015f0:	203f      	movs	r0, #63	; 0x3f
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	220c      	movs	r2, #12
 80015f8:	18ba      	adds	r2, r7, r2
 80015fa:	2100      	movs	r1, #0
 80015fc:	54d1      	strb	r1, [r2, r3]
 80015fe:	183b      	adds	r3, r7, r0
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	183b      	adds	r3, r7, r0
 8001604:	3201      	adds	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	233f      	movs	r3, #63	; 0x3f
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b30      	cmp	r3, #48	; 0x30
 8001610:	d9ee      	bls.n	80015f0 <can_task+0x43c>
					sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <can_task+0x49c>)
 8001614:	240c      	movs	r4, #12
 8001616:	193b      	adds	r3, r7, r4
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f006 fbe2 	bl	8007de4 <siprintf>
					HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001620:	1939      	adds	r1, r7, r4
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <can_task+0x494>)
 8001624:	2231      	movs	r2, #49	; 0x31
 8001626:	0018      	movs	r0, r3
 8001628:	f002 fbb2 	bl	8003d90 <HAL_UART_Transmit_IT>
			    }
			    osDelay(1000);
 800162c:	23fa      	movs	r3, #250	; 0xfa
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	0018      	movs	r0, r3
 8001632:	f003 fc77 	bl	8004f24 <osDelay>
				osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 8001636:	e69c      	b.n	8001372 <can_task+0x1be>
 8001638:	20000208 	.word	0x20000208
 800163c:	200000fc 	.word	0x200000fc
 8001640:	200001f0 	.word	0x200001f0
 8001644:	08008660 	.word	0x08008660
 8001648:	20000160 	.word	0x20000160
 800164c:	200001f4 	.word	0x200001f4
 8001650:	080085e8 	.word	0x080085e8

08001654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001666:	f000 fa45 	bl	8001af4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	40012c00 	.word	0x40012c00

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_MspInit+0x50>)
 800168c:	699a      	ldr	r2, [r3, #24]
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_MspInit+0x50>)
 8001690:	2101      	movs	r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	619a      	str	r2, [r3, #24]
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x50>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x50>)
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_MspInit+0x50>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0549      	lsls	r1, r1, #21
 80016ac:	430a      	orrs	r2, r1
 80016ae:	61da      	str	r2, [r3, #28]
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_MspInit+0x50>)
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	055b      	lsls	r3, r3, #21
 80016b8:	4013      	ands	r3, r2
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80016be:	2302      	movs	r3, #2
 80016c0:	425b      	negs	r3, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	2103      	movs	r1, #3
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fab8 	bl	8001c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08d      	sub	sp, #52	; 0x34
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	241c      	movs	r4, #28
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	0018      	movs	r0, r3
 80016e6:	2314      	movs	r3, #20
 80016e8:	001a      	movs	r2, r3
 80016ea:	2100      	movs	r1, #0
 80016ec:	f006 fa53 	bl	8007b96 <memset>
  if(hspi->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_SPI_MspInit+0x104>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d133      	bne.n	8001762 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0149      	lsls	r1, r1, #5
 8001704:	430a      	orrs	r2, r1
 8001706:	619a      	str	r2, [r3, #24]
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800170a:	699a      	ldr	r2, [r3, #24]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0289      	lsls	r1, r1, #10
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001732:	0021      	movs	r1, r4
 8001734:	187b      	adds	r3, r7, r1
 8001736:	22e0      	movs	r2, #224	; 0xe0
 8001738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2202      	movs	r2, #2
 800173e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2203      	movs	r2, #3
 800174a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	187a      	adds	r2, r7, r1
 8001754:	2390      	movs	r3, #144	; 0x90
 8001756:	05db      	lsls	r3, r3, #23
 8001758:	0011      	movs	r1, r2
 800175a:	0018      	movs	r0, r3
 800175c:	f000 fb10 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001760:	e037      	b.n	80017d2 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_SPI_MspInit+0x10c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d132      	bne.n	80017d2 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	01c9      	lsls	r1, r1, #7
 8001776:	430a      	orrs	r2, r1
 8001778:	61da      	str	r2, [r3, #28]
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	02c9      	lsls	r1, r1, #11
 8001792:	430a      	orrs	r2, r1
 8001794:	615a      	str	r2, [r3, #20]
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_SPI_MspInit+0x108>)
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	02db      	lsls	r3, r3, #11
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017a4:	211c      	movs	r1, #28
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	22e0      	movs	r2, #224	; 0xe0
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2202      	movs	r2, #2
 80017b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2203      	movs	r2, #3
 80017be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_SPI_MspInit+0x110>)
 80017ca:	0019      	movs	r1, r3
 80017cc:	0010      	movs	r0, r2
 80017ce:	f000 fad7 	bl	8001d80 <HAL_GPIO_Init>
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b00d      	add	sp, #52	; 0x34
 80017d8:	bd90      	pop	{r4, r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40013000 	.word	0x40013000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40003800 	.word	0x40003800
 80017e8:	48000400 	.word	0x48000400

080017ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08b      	sub	sp, #44	; 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	2414      	movs	r4, #20
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f006 f9c9 	bl	8007b96 <memset>
  if(huart->Instance==USART2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_UART_MspInit+0xa0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d13a      	bne.n	8001884 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_UART_MspInit+0xa4>)
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_UART_MspInit+0xa4>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0289      	lsls	r1, r1, #10
 8001818:	430a      	orrs	r2, r1
 800181a:	61da      	str	r2, [r3, #28]
 800181c:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_UART_MspInit+0xa4>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_UART_MspInit+0xa4>)
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_UART_MspInit+0xa4>)
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0289      	lsls	r1, r1, #10
 8001834:	430a      	orrs	r2, r1
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_UART_MspInit+0xa4>)
 800183a:	695a      	ldr	r2, [r3, #20]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001846:	0021      	movs	r1, r4
 8001848:	187b      	adds	r3, r7, r1
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2202      	movs	r2, #2
 8001852:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	187b      	adds	r3, r7, r1
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2203      	movs	r2, #3
 800185e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2201      	movs	r2, #1
 8001864:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	187a      	adds	r2, r7, r1
 8001868:	2390      	movs	r3, #144	; 0x90
 800186a:	05db      	lsls	r3, r3, #23
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fa86 	bl	8001d80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2103      	movs	r1, #3
 8001878:	201c      	movs	r0, #28
 800187a:	f000 f9df 	bl	8001c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800187e:	201c      	movs	r0, #28
 8001880:	f000 f9f1 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b00b      	add	sp, #44	; 0x2c
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	40004400 	.word	0x40004400
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_InitTick+0xf4>)
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_InitTick+0xf4>)
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	0109      	lsls	r1, r1, #4
 80018ae:	430a      	orrs	r2, r1
 80018b0:	619a      	str	r2, [r3, #24]
 80018b2:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_InitTick+0xf4>)
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4013      	ands	r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c0:	230c      	movs	r3, #12
 80018c2:	18fa      	adds	r2, r7, r3
 80018c4:	2410      	movs	r4, #16
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f001 f874 	bl	80029b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018d0:	193b      	adds	r3, r7, r4
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018dc:	f001 f856 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80018e0:	0003      	movs	r3, r0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	e004      	b.n	80018f0 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018e6:	f001 f851 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80018ea:	0003      	movs	r3, r0
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	4926      	ldr	r1, [pc, #152]	; (800198c <HAL_InitTick+0xf8>)
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7fe fc11 	bl	800011c <__udivsi3>
 80018fa:	0003      	movs	r3, r0
 80018fc:	3b01      	subs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_InitTick+0xfc>)
 8001902:	4a24      	ldr	r2, [pc, #144]	; (8001994 <HAL_InitTick+0x100>)
 8001904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_InitTick+0xfc>)
 8001908:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_InitTick+0x104>)
 800190a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_InitTick+0xfc>)
 800190e:	6a3a      	ldr	r2, [r7, #32]
 8001910:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <HAL_InitTick+0xfc>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_InitTick+0xfc>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_InitTick+0xfc>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001924:	252b      	movs	r5, #43	; 0x2b
 8001926:	197c      	adds	r4, r7, r5
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_InitTick+0xfc>)
 800192a:	0018      	movs	r0, r3
 800192c:	f001 ff7c 	bl	8003828 <HAL_TIM_Base_Init>
 8001930:	0003      	movs	r3, r0
 8001932:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001934:	197b      	adds	r3, r7, r5
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d11e      	bne.n	800197a <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800193c:	197c      	adds	r4, r7, r5
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_InitTick+0xfc>)
 8001940:	0018      	movs	r0, r3
 8001942:	f001 ffc9 	bl	80038d8 <HAL_TIM_Base_Start_IT>
 8001946:	0003      	movs	r3, r0
 8001948:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800194a:	197b      	adds	r3, r7, r5
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d113      	bne.n	800197a <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001952:	200d      	movs	r0, #13
 8001954:	f000 f987 	bl	8001c66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d809      	bhi.n	8001972 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	0019      	movs	r1, r3
 8001964:	200d      	movs	r0, #13
 8001966:	f000 f969 	bl	8001c3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_InitTick+0x108>)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e003      	b.n	800197a <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001972:	232b      	movs	r3, #43	; 0x2b
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800197a:	232b      	movs	r3, #43	; 0x2b
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	781b      	ldrb	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b00c      	add	sp, #48	; 0x30
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	000f4240 	.word	0x000f4240
 8001990:	2000021c 	.word	0x2000021c
 8001994:	40012c00 	.word	0x40012c00
 8001998:	000003e7 	.word	0x000003e7
 800199c:	20000004 	.word	0x20000004

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <NMI_Handler+0x4>

080019a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019aa:	e7fe      	b.n	80019aa <HardFault_Handler+0x4>

080019ac <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ican2_Pin);
 80019b0:	2010      	movs	r0, #16
 80019b2:	f000 fb73 	bl	800209c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ican1_Pin);
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 fb6e 	bl	800209c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fb69 	bl	800209c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f001 ffca 	bl	8003970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	2000021c 	.word	0x2000021c

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <USART2_IRQHandler+0x14>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 fa4e 	bl	8003e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000160 	.word	0x20000160

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	18d3      	adds	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f006 f87c 	bl	8007b2c <__errno>
 8001a34:	0003      	movs	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	18d2      	adds	r2, r2, r3
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b006      	add	sp, #24
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20004000 	.word	0x20004000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000264 	.word	0x20000264
 8001a68:	20001c80 	.word	0x20001c80

08001a6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a7e:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <LoopForever+0xe>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a84:	e002      	b.n	8001a8c <LoopCopyDataInit>

08001a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8a:	3304      	adds	r3, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a90:	d3f9      	bcc.n	8001a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a94:	4c0b      	ldr	r4, [pc, #44]	; (8001ac4 <LoopForever+0x16>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a98:	e001      	b.n	8001a9e <LoopFillZerobss>

08001a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a9c:	3204      	adds	r2, #4

08001a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa0:	d3fb      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001aa2:	f7ff ffe3 	bl	8001a6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001aa6:	f006 f847 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aaa:	f7ff f943 	bl	8000d34 <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   r0, =_estack
 8001ab0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001abc:	08008824 	.word	0x08008824
  ldr r2, =_sbss
 8001ac0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ac4:	20001c7c 	.word	0x20001c7c

08001ac8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_IRQHandler>
	...

08001acc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_Init+0x24>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_Init+0x24>)
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7ff fed9 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae2:	f7ff fdcf 	bl	8001684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40022000 	.word	0x40022000

08001af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x1c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	001a      	movs	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_IncTick+0x20>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	18d2      	adds	r2, r2, r3
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <HAL_IncTick+0x20>)
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000268 	.word	0x20000268

08001b18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <HAL_GetTick+0x10>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	20000268 	.word	0x20000268

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b3e:	d809      	bhi.n	8001b54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	231f      	movs	r3, #31
 8001b48:	401a      	ands	r2, r3
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_EnableIRQ+0x30>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4091      	lsls	r1, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
  }
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	0002      	movs	r2, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b7f      	cmp	r3, #127	; 0x7f
 8001b74:	d828      	bhi.n	8001bc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b76:	4a2f      	ldr	r2, [pc, #188]	; (8001c34 <__NVIC_SetPriority+0xd4>)
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	33c0      	adds	r3, #192	; 0xc0
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	589b      	ldr	r3, [r3, r2]
 8001b86:	1dfa      	adds	r2, r7, #7
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	400a      	ands	r2, r1
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	21ff      	movs	r1, #255	; 0xff
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	43d2      	mvns	r2, r2
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	22ff      	movs	r2, #255	; 0xff
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	2303      	movs	r3, #3
 8001bae:	4003      	ands	r3, r0
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <__NVIC_SetPriority+0xd4>)
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	33c0      	adds	r3, #192	; 0xc0
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bc6:	e031      	b.n	8001c2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <__NVIC_SetPriority+0xd8>)
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0019      	movs	r1, r3
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	3b08      	subs	r3, #8
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3306      	adds	r3, #6
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	3304      	adds	r3, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1dfa      	adds	r2, r7, #7
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	0011      	movs	r1, r2
 8001be8:	2203      	movs	r2, #3
 8001bea:	400a      	ands	r2, r1
 8001bec:	00d2      	lsls	r2, r2, #3
 8001bee:	21ff      	movs	r1, #255	; 0xff
 8001bf0:	4091      	lsls	r1, r2
 8001bf2:	000a      	movs	r2, r1
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	22ff      	movs	r2, #255	; 0xff
 8001c00:	401a      	ands	r2, r3
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	2303      	movs	r3, #3
 8001c0a:	4003      	ands	r3, r0
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c10:	4809      	ldr	r0, [pc, #36]	; (8001c38 <__NVIC_SetPriority+0xd8>)
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	001c      	movs	r4, r3
 8001c18:	230f      	movs	r3, #15
 8001c1a:	4023      	ands	r3, r4
 8001c1c:	3b08      	subs	r3, #8
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	430a      	orrs	r2, r1
 8001c22:	3306      	adds	r3, #6
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	18c3      	adds	r3, r0, r3
 8001c28:	3304      	adds	r3, #4
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	46c0      	nop			; (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b003      	add	sp, #12
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	210f      	movs	r1, #15
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	1c02      	adds	r2, r0, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b25b      	sxtb	r3, r3
 8001c56:	0011      	movs	r1, r2
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ff81 	bl	8001b60 <__NVIC_SetPriority>
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	1dfb      	adds	r3, r7, #7
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b25b      	sxtb	r3, r3
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f7ff ff57 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b002      	add	sp, #8
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2221      	movs	r2, #33	; 0x21
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d008      	beq.n	8001cac <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e020      	b.n	8001cee <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	210e      	movs	r1, #14
 8001cb8:	438a      	bics	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	438a      	bics	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	4091      	lsls	r1, r2
 8001cd8:	000a      	movs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2221      	movs	r2, #33	; 0x21
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b002      	add	sp, #8
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	210f      	movs	r1, #15
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	5c9b      	ldrb	r3, [r3, r2]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d006      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e028      	b.n	8001d72 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	210e      	movs	r1, #14
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4091      	lsls	r1, r2
 8001d4c:	000a      	movs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2221      	movs	r2, #33	; 0x21
 8001d54:	2101      	movs	r1, #1
 8001d56:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	0010      	movs	r0, r2
 8001d70:	4798      	blx	r3
    } 
  }
  return status;
 8001d72:	230f      	movs	r3, #15
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	781b      	ldrb	r3, [r3, #0]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e14f      	b.n	8002030 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4091      	lsls	r1, r2
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d100      	bne.n	8001da8 <HAL_GPIO_Init+0x28>
 8001da6:	e140      	b.n	800202a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	0013      	movs	r3, r2
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2203      	movs	r2, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	0013      	movs	r3, r2
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	58d3      	ldr	r3, [r2, r3]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2107      	movs	r1, #7
 8001e96:	400b      	ands	r3, r1
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	0092      	lsls	r2, r2, #2
 8001eae:	6939      	ldr	r1, [r7, #16]
 8001eb0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d100      	bne.n	8001ef4 <HAL_GPIO_Init+0x174>
 8001ef2:	e09a      	b.n	800202a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b54      	ldr	r3, [pc, #336]	; (8002048 <HAL_GPIO_Init+0x2c8>)
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_GPIO_Init+0x2c8>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	430a      	orrs	r2, r1
 8001efe:	619a      	str	r2, [r3, #24]
 8001f00:	4b51      	ldr	r3, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x2c8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a4f      	ldr	r2, [pc, #316]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	589b      	ldr	r3, [r3, r2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	409a      	lsls	r2, r3
 8001f26:	0013      	movs	r3, r2
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	2390      	movs	r3, #144	; 0x90
 8001f34:	05db      	lsls	r3, r3, #23
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1e2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a44      	ldr	r2, [pc, #272]	; (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1de>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a43      	ldr	r2, [pc, #268]	; (8002054 <HAL_GPIO_Init+0x2d4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1da>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	; (8002058 <HAL_GPIO_Init+0x2d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1d6>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f56:	2305      	movs	r3, #5
 8001f58:	e004      	b.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e002      	b.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f62:	2300      	movs	r3, #0
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	2103      	movs	r1, #3
 8001f68:	400a      	ands	r2, r1
 8001f6a:	0092      	lsls	r2, r2, #2
 8001f6c:	4093      	lsls	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f74:	4935      	ldr	r1, [pc, #212]	; (800204c <HAL_GPIO_Init+0x2cc>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	025b      	lsls	r3, r3, #9
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	035b      	lsls	r3, r3, #13
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43da      	mvns	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	039b      	lsls	r3, r3, #14
 8002018:	4013      	ands	r3, r2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_GPIO_Init+0x2dc>)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	40da      	lsrs	r2, r3
 8002038:	1e13      	subs	r3, r2, #0
 800203a:	d000      	beq.n	800203e <HAL_GPIO_Init+0x2be>
 800203c:	e6a8      	b.n	8001d90 <HAL_GPIO_Init+0x10>
  } 
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b006      	add	sp, #24
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	48000c00 	.word	0x48000c00
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	0008      	movs	r0, r1
 800206a:	0011      	movs	r1, r2
 800206c:	1cbb      	adds	r3, r7, #2
 800206e:	1c02      	adds	r2, r0, #0
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	1c7b      	adds	r3, r7, #1
 8002074:	1c0a      	adds	r2, r1, #0
 8002076:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002078:	1c7b      	adds	r3, r7, #1
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002080:	1cbb      	adds	r3, r7, #2
 8002082:	881a      	ldrh	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800208a:	1cbb      	adds	r3, r7, #2
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b002      	add	sp, #8
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	0002      	movs	r2, r0
 80020a4:	1dbb      	adds	r3, r7, #6
 80020a6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	1dba      	adds	r2, r7, #6
 80020ae:	8812      	ldrh	r2, [r2, #0]
 80020b0:	4013      	ands	r3, r2
 80020b2:	d008      	beq.n	80020c6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020b6:	1dba      	adds	r2, r7, #6
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7ff f811 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e305      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_OscConfig+0x1e>
 80020f0:	e08d      	b.n	800220e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020f2:	4bc5      	ldr	r3, [pc, #788]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	220c      	movs	r2, #12
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d00e      	beq.n	800211c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fe:	4bc2      	ldr	r3, [pc, #776]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	220c      	movs	r2, #12
 8002104:	4013      	ands	r3, r2
 8002106:	2b08      	cmp	r3, #8
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x64>
 800210a:	4bbf      	ldr	r3, [pc, #764]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	025b      	lsls	r3, r3, #9
 8002112:	401a      	ands	r2, r3
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	025b      	lsls	r3, r3, #9
 8002118:	429a      	cmp	r2, r3
 800211a:	d10d      	bne.n	8002138 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4bba      	ldr	r3, [pc, #744]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x56>
 8002128:	e070      	b.n	800220c <HAL_RCC_OscConfig+0x138>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d000      	beq.n	8002134 <HAL_RCC_OscConfig+0x60>
 8002132:	e06b      	b.n	800220c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e2dc      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x7c>
 8002140:	4bb1      	ldr	r3, [pc, #708]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4bb0      	ldr	r3, [pc, #704]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0249      	lsls	r1, r1, #9
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e02f      	b.n	80021b0 <HAL_RCC_OscConfig+0xdc>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x9e>
 8002158:	4bab      	ldr	r3, [pc, #684]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4baa      	ldr	r3, [pc, #680]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800215e:	49ab      	ldr	r1, [pc, #684]	; (800240c <HAL_RCC_OscConfig+0x338>)
 8002160:	400a      	ands	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	4ba8      	ldr	r3, [pc, #672]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4ba7      	ldr	r3, [pc, #668]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800216a:	49a9      	ldr	r1, [pc, #676]	; (8002410 <HAL_RCC_OscConfig+0x33c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	e01e      	b.n	80021b0 <HAL_RCC_OscConfig+0xdc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10e      	bne.n	8002198 <HAL_RCC_OscConfig+0xc4>
 800217a:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4ba2      	ldr	r3, [pc, #648]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	02c9      	lsls	r1, r1, #11
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b9f      	ldr	r3, [pc, #636]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b9e      	ldr	r3, [pc, #632]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	0249      	lsls	r1, r1, #9
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xdc>
 8002198:	4b9b      	ldr	r3, [pc, #620]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b9a      	ldr	r3, [pc, #616]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800219e:	499b      	ldr	r1, [pc, #620]	; (800240c <HAL_RCC_OscConfig+0x338>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	4b98      	ldr	r3, [pc, #608]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b97      	ldr	r3, [pc, #604]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80021aa:	4999      	ldr	r1, [pc, #612]	; (8002410 <HAL_RCC_OscConfig+0x33c>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d014      	beq.n	80021e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fcae 	bl	8001b18 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c2:	f7ff fca9 	bl	8001b18 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e28e      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d4:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	4013      	ands	r3, r2
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0xee>
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fc99 	bl	8001b18 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fc94 	bl	8001b18 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e279      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b82      	ldr	r3, [pc, #520]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	4013      	ands	r3, r2
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x118>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d100      	bne.n	800221a <HAL_RCC_OscConfig+0x146>
 8002218:	e06c      	b.n	80022f4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800221a:	4b7b      	ldr	r3, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	220c      	movs	r2, #12
 8002220:	4013      	ands	r3, r2
 8002222:	d00e      	beq.n	8002242 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002224:	4b78      	ldr	r3, [pc, #480]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	220c      	movs	r2, #12
 800222a:	4013      	ands	r3, r2
 800222c:	2b08      	cmp	r3, #8
 800222e:	d11f      	bne.n	8002270 <HAL_RCC_OscConfig+0x19c>
 8002230:	4b75      	ldr	r3, [pc, #468]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	23c0      	movs	r3, #192	; 0xc0
 8002236:	025b      	lsls	r3, r3, #9
 8002238:	401a      	ands	r2, r3
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	021b      	lsls	r3, r3, #8
 800223e:	429a      	cmp	r2, r3
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b71      	ldr	r3, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x184>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e24c      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	22f8      	movs	r2, #248	; 0xf8
 800225e:	4393      	bics	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00da      	lsls	r2, r3, #3
 8002268:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e041      	b.n	80022f4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d024      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800227e:	2101      	movs	r1, #1
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fc48 	bl	8001b18 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fc43 	bl	8001b18 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e228      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2202      	movs	r2, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d0f1      	beq.n	800228e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	22f8      	movs	r2, #248	; 0xf8
 80022b0:	4393      	bics	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	00da      	lsls	r2, r3, #3
 80022ba:	4b53      	ldr	r3, [pc, #332]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e018      	b.n	80022f4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	438a      	bics	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7ff fc23 	bl	8001b18 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d8:	f7ff fc1e 	bl	8001b18 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e203      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f1      	bne.n	80022d8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2208      	movs	r2, #8
 80022fa:	4013      	ands	r3, r2
 80022fc:	d036      	beq.n	800236c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d019      	beq.n	800233a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002306:	4b40      	ldr	r3, [pc, #256]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230a:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800230c:	2101      	movs	r1, #1
 800230e:	430a      	orrs	r2, r1
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7ff fc01 	bl	8001b18 <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fbfc 	bl	8001b18 <HAL_GetTick>
 8002320:	0002      	movs	r2, r0
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1e1      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d0f1      	beq.n	800231c <HAL_RCC_OscConfig+0x248>
 8002338:	e018      	b.n	800236c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233a:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800233c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233e:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002340:	2101      	movs	r1, #1
 8002342:	438a      	bics	r2, r1
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7ff fbe7 	bl	8001b18 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fbe2 	bl	8001b18 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1c7      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	2202      	movs	r2, #2
 8002368:	4013      	ands	r3, r2
 800236a:	d1f1      	bne.n	8002350 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2204      	movs	r2, #4
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_RCC_OscConfig+0x2a4>
 8002376:	e0b5      	b.n	80024e4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002378:	201f      	movs	r0, #31
 800237a:	183b      	adds	r3, r7, r0
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	055b      	lsls	r3, r3, #21
 8002388:	4013      	ands	r3, r2
 800238a:	d110      	bne.n	80023ae <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0549      	lsls	r1, r1, #21
 8002396:	430a      	orrs	r2, r1
 8002398:	61da      	str	r2, [r3, #28]
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	055b      	lsls	r3, r3, #21
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_OscConfig+0x340>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d11a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_RCC_OscConfig+0x340>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_OscConfig+0x340>)
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	0049      	lsls	r1, r1, #1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c8:	f7ff fba6 	bl	8001b18 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7ff fba1 	bl	8001b18 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e186      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_OscConfig+0x340>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10f      	bne.n	8002418 <HAL_RCC_OscConfig+0x344>
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <HAL_RCC_OscConfig+0x334>)
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	621a      	str	r2, [r3, #32]
 8002404:	e036      	b.n	8002474 <HAL_RCC_OscConfig+0x3a0>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40021000 	.word	0x40021000
 800240c:	fffeffff 	.word	0xfffeffff
 8002410:	fffbffff 	.word	0xfffbffff
 8002414:	40007000 	.word	0x40007000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x366>
 8002420:	4bb6      	ldr	r3, [pc, #728]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	4bb5      	ldr	r3, [pc, #724]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	621a      	str	r2, [r3, #32]
 800242c:	4bb3      	ldr	r3, [pc, #716]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	4bb2      	ldr	r3, [pc, #712]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002432:	2104      	movs	r1, #4
 8002434:	438a      	bics	r2, r1
 8002436:	621a      	str	r2, [r3, #32]
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x3a0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x388>
 8002442:	4bae      	ldr	r3, [pc, #696]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	4bad      	ldr	r3, [pc, #692]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002448:	2104      	movs	r1, #4
 800244a:	430a      	orrs	r2, r1
 800244c:	621a      	str	r2, [r3, #32]
 800244e:	4bab      	ldr	r3, [pc, #684]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4baa      	ldr	r3, [pc, #680]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002454:	2101      	movs	r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0x3a0>
 800245c:	4ba7      	ldr	r3, [pc, #668]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800245e:	6a1a      	ldr	r2, [r3, #32]
 8002460:	4ba6      	ldr	r3, [pc, #664]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002462:	2101      	movs	r1, #1
 8002464:	438a      	bics	r2, r1
 8002466:	621a      	str	r2, [r3, #32]
 8002468:	4ba4      	ldr	r3, [pc, #656]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800246e:	2104      	movs	r1, #4
 8002470:	438a      	bics	r2, r1
 8002472:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d014      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7ff fb4c 	bl	8001b18 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	e009      	b.n	800249a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7ff fb47 	bl	8001b18 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	4a9b      	ldr	r2, [pc, #620]	; (8002700 <HAL_RCC_OscConfig+0x62c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e12b      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	4b98      	ldr	r3, [pc, #608]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x3b2>
 80024a4:	e013      	b.n	80024ce <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fb37 	bl	8001b18 <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ae:	e009      	b.n	80024c4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff fb32 	bl	8001b18 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	4a91      	ldr	r2, [pc, #580]	; (8002700 <HAL_RCC_OscConfig+0x62c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e116      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024ce:	231f      	movs	r3, #31
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b88      	ldr	r3, [pc, #544]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	4b87      	ldr	r3, [pc, #540]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80024de:	4989      	ldr	r1, [pc, #548]	; (8002704 <HAL_RCC_OscConfig+0x630>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4013      	ands	r3, r2
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d12a      	bne.n	800254c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024f6:	4b81      	ldr	r3, [pc, #516]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80024f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fa:	4b80      	ldr	r3, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80024fc:	2104      	movs	r1, #4
 80024fe:	430a      	orrs	r2, r1
 8002500:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002502:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002506:	4b7d      	ldr	r3, [pc, #500]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7ff fb03 	bl	8001b18 <HAL_GetTick>
 8002512:	0003      	movs	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002518:	f7ff fafe 	bl	8001b18 <HAL_GetTick>
 800251c:	0002      	movs	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0e3      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800252a:	4b74      	ldr	r3, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d0f1      	beq.n	8002518 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002534:	4b71      	ldr	r3, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	22f8      	movs	r2, #248	; 0xf8
 800253a:	4393      	bics	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	00da      	lsls	r2, r3, #3
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002546:	430a      	orrs	r2, r1
 8002548:	635a      	str	r2, [r3, #52]	; 0x34
 800254a:	e034      	b.n	80025b6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	3305      	adds	r3, #5
 8002552:	d111      	bne.n	8002578 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002554:	4b69      	ldr	r3, [pc, #420]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800255a:	2104      	movs	r1, #4
 800255c:	438a      	bics	r2, r1
 800255e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	22f8      	movs	r2, #248	; 0xf8
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	00da      	lsls	r2, r3, #3
 8002570:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002572:	430a      	orrs	r2, r1
 8002574:	635a      	str	r2, [r3, #52]	; 0x34
 8002576:	e01e      	b.n	80025b6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002578:	4b60      	ldr	r3, [pc, #384]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800257a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800257c:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800257e:	2104      	movs	r1, #4
 8002580:	430a      	orrs	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002584:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800258a:	2101      	movs	r1, #1
 800258c:	438a      	bics	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7ff fac2 	bl	8001b18 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800259a:	f7ff fabd 	bl	8001b18 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0a2      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	2202      	movs	r2, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	d1f1      	bne.n	800259a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d100      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4ec>
 80025be:	e097      	b.n	80026f0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	220c      	movs	r2, #12
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d100      	bne.n	80025ce <HAL_RCC_OscConfig+0x4fa>
 80025cc:	e06b      	b.n	80026a6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d14c      	bne.n	8002670 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b48      	ldr	r3, [pc, #288]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80025dc:	494a      	ldr	r1, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x634>)
 80025de:	400a      	ands	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7ff fa99 	bl	8001b18 <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ec:	f7ff fa94 	bl	8001b18 <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e079      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	049b      	lsls	r3, r3, #18
 8002606:	4013      	ands	r3, r2
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260a:	4b3c      	ldr	r3, [pc, #240]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	220f      	movs	r2, #15
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800261a:	430a      	orrs	r2, r1
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_RCC_OscConfig+0x638>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	431a      	orrs	r2, r3
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	0449      	lsls	r1, r1, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fa67 	bl	8001b18 <HAL_GetTick>
 800264a:	0003      	movs	r3, r0
 800264c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff fa62 	bl	8001b18 <HAL_GetTick>
 8002654:	0002      	movs	r2, r0
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e047      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	049b      	lsls	r3, r3, #18
 800266a:	4013      	ands	r3, r2
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x57c>
 800266e:	e03f      	b.n	80026f0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 8002676:	4924      	ldr	r1, [pc, #144]	; (8002708 <HAL_RCC_OscConfig+0x634>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fa4c 	bl	8001b18 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002686:	f7ff fa47 	bl	8001b18 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e02c      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	049b      	lsls	r3, r3, #18
 80026a0:	4013      	ands	r3, r2
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x5b2>
 80026a4:	e024      	b.n	80026f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01f      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_OscConfig+0x628>)
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	23c0      	movs	r3, #192	; 0xc0
 80026c2:	025b      	lsls	r3, r3, #9
 80026c4:	401a      	ands	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10e      	bne.n	80026ec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	220f      	movs	r2, #15
 80026d2:	401a      	ands	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	23f0      	movs	r3, #240	; 0xf0
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b008      	add	sp, #32
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40021000 	.word	0x40021000
 8002700:	00001388 	.word	0x00001388
 8002704:	efffffff 	.word	0xefffffff
 8002708:	feffffff 	.word	0xfeffffff
 800270c:	ffc27fff 	.word	0xffc27fff

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b3      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d911      	bls.n	8002756 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	4393      	bics	r3, r2
 800273a:	0019      	movs	r1, r3
 800273c:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2201      	movs	r2, #1
 800274a:	4013      	ands	r3, r2
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d001      	beq.n	8002756 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e09a      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d015      	beq.n	800278c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2204      	movs	r2, #4
 8002766:	4013      	ands	r3, r2
 8002768:	d006      	beq.n	8002778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002770:	21e0      	movs	r1, #224	; 0xe0
 8002772:	00c9      	lsls	r1, r1, #3
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	22f0      	movs	r2, #240	; 0xf0
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2201      	movs	r2, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d040      	beq.n	8002818 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	029b      	lsls	r3, r3, #10
 80027a6:	4013      	ands	r3, r2
 80027a8:	d114      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06e      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	049b      	lsls	r3, r3, #18
 80027be:	4013      	ands	r3, r2
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e062      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2202      	movs	r2, #2
 80027cc:	4013      	ands	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e05b      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d4:	4b30      	ldr	r3, [pc, #192]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2203      	movs	r2, #3
 80027da:	4393      	bics	r3, r2
 80027dc:	0019      	movs	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff f996 	bl	8001b18 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f0:	e009      	b.n	8002806 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f2:	f7ff f991 	bl	8001b18 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_RCC_ClockConfig+0x18c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e042      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	220c      	movs	r2, #12
 800280c:	401a      	ands	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1ec      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d211      	bcs.n	800284a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e020      	b.n	800288c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_RCC_ClockConfig+0x190>)
 800285a:	4013      	ands	r3, r2
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002868:	f000 f820 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286c:	0001      	movs	r1, r0
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	220f      	movs	r2, #15
 8002876:	4013      	ands	r3, r2
 8002878:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x194>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	000a      	movs	r2, r1
 800287e:	40da      	lsrs	r2, r3
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x198>)
 8002882:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002884:	2003      	movs	r0, #3
 8002886:	f7ff f805 	bl	8001894 <HAL_InitTick>
  
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b004      	add	sp, #16
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	00001388 	.word	0x00001388
 80028a0:	fffff8ff 	.word	0xfffff8ff
 80028a4:	08008748 	.word	0x08008748
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b08f      	sub	sp, #60	; 0x3c
 80028b0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028b2:	2314      	movs	r3, #20
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ba:	c313      	stmia	r3!, {r0, r1, r4}
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028c6:	c313      	stmia	r3!, {r0, r1, r4}
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	220c      	movs	r2, #12
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d002      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x4a>
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x50>
 80028f4:	e02f      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f6:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc8>)
 80028f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028fa:	e02f      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	220f      	movs	r2, #15
 8002902:	4013      	ands	r3, r2
 8002904:	2214      	movs	r2, #20
 8002906:	18ba      	adds	r2, r7, r2
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800290c:	4b18      	ldr	r3, [pc, #96]	; (8002970 <HAL_RCC_GetSysClockFreq+0xc4>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	220f      	movs	r2, #15
 8002912:	4013      	ands	r3, r2
 8002914:	1d3a      	adds	r2, r7, #4
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291c:	23c0      	movs	r3, #192	; 0xc0
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	401a      	ands	r2, r3
 8002922:	2380      	movs	r3, #128	; 0x80
 8002924:	025b      	lsls	r3, r3, #9
 8002926:	429a      	cmp	r2, r3
 8002928:	d109      	bne.n	800293e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800292a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292c:	4811      	ldr	r0, [pc, #68]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc8>)
 800292e:	f7fd fbf5 	bl	800011c <__udivsi3>
 8002932:	0003      	movs	r3, r0
 8002934:	001a      	movs	r2, r3
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	4353      	muls	r3, r2
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	e008      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800293e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002942:	f7fd fbeb 	bl	800011c <__udivsi3>
 8002946:	0003      	movs	r3, r0
 8002948:	001a      	movs	r2, r3
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	4353      	muls	r3, r2
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002954:	e002      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b00f      	add	sp, #60	; 0x3c
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	080086a8 	.word	0x080086a8
 800296c:	080086b8 	.word	0x080086b8
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_RCC_GetHCLKFreq+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002990:	f7ff fff2 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002994:	0001      	movs	r1, r0
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	40d9      	lsrs	r1, r3
 80029a6:	000b      	movs	r3, r1
}    
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08008758 	.word	0x08008758

080029b8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_RCC_GetClockConfig+0x4c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_GetClockConfig+0x4c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	22f0      	movs	r2, #240	; 0xf0
 80029da:	401a      	ands	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_RCC_GetClockConfig+0x4c>)
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	23e0      	movs	r3, #224	; 0xe0
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	401a      	ands	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_GetClockConfig+0x50>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	401a      	ands	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b002      	add	sp, #8
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40022000 	.word	0x40022000

08002a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0a8      	b.n	8002b70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	2382      	movs	r3, #130	; 0x82
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d009      	beq.n	8002a46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	61da      	str	r2, [r3, #28]
 8002a38:	e005      	b.n	8002a46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	225d      	movs	r2, #93	; 0x5d
 8002a50:	5c9b      	ldrb	r3, [r3, r2]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	225c      	movs	r2, #92	; 0x5c
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fe38 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	225d      	movs	r2, #93	; 0x5d
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2140      	movs	r1, #64	; 0x40
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	23e0      	movs	r3, #224	; 0xe0
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d902      	bls.n	8002a92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e002      	b.n	8002a98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	015b      	lsls	r3, r3, #5
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	23f0      	movs	r3, #240	; 0xf0
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d008      	beq.n	8002ab6 <HAL_SPI_Init+0xaa>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	23e0      	movs	r3, #224	; 0xe0
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	2382      	movs	r3, #130	; 0x82
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	2384      	movs	r3, #132	; 0x84
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	400b      	ands	r3, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	2101      	movs	r1, #1
 8002adc:	400b      	ands	r3, r1
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6999      	ldr	r1, [r3, #24]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	400b      	ands	r3, r1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2138      	movs	r1, #56	; 0x38
 8002af2:	400b      	ands	r3, r1
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	400b      	ands	r3, r1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	0011      	movs	r1, r2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2110      	movs	r1, #16
 8002b24:	400b      	ands	r3, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	2108      	movs	r1, #8
 8002b2e:	400b      	ands	r3, r1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68d9      	ldr	r1, [r3, #12]
 8002b36:	23f0      	movs	r3, #240	; 0xf0
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	400b      	ands	r3, r1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	0011      	movs	r1, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	015b      	lsls	r3, r3, #5
 8002b46:	401a      	ands	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4907      	ldr	r1, [pc, #28]	; (8002b78 <HAL_SPI_Init+0x16c>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	225d      	movs	r2, #93	; 0x5d
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	fffff7ff 	.word	0xfffff7ff

08002b7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	1dbb      	adds	r3, r7, #6
 8002b8a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	225c      	movs	r2, #92	; 0x5c
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_SPI_Transmit+0x26>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e140      	b.n	8002e24 <HAL_SPI_Transmit+0x2a8>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	225c      	movs	r2, #92	; 0x5c
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002baa:	f7fe ffb5 	bl	8001b18 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002bb2:	2316      	movs	r3, #22
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	1dba      	adds	r2, r7, #6
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	225d      	movs	r2, #93	; 0x5d
 8002bc0:	5c9b      	ldrb	r3, [r3, r2]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d004      	beq.n	8002bd2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002bc8:	231f      	movs	r3, #31
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bd0:	e11d      	b.n	8002e0e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_SPI_Transmit+0x64>
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002be0:	231f      	movs	r3, #31
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
    goto error;
 8002be8:	e111      	b.n	8002e0e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	225d      	movs	r2, #93	; 0x5d
 8002bee:	2103      	movs	r1, #3
 8002bf0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1dba      	adds	r2, r7, #6
 8002c02:	8812      	ldrh	r2, [r2, #0]
 8002c04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1dba      	adds	r2, r7, #6
 8002c0a:	8812      	ldrh	r2, [r2, #0]
 8002c0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2244      	movs	r2, #68	; 0x44
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2246      	movs	r2, #70	; 0x46
 8002c20:	2100      	movs	r1, #0
 8002c22:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d110      	bne.n	8002c5e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2140      	movs	r1, #64	; 0x40
 8002c48:	438a      	bics	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	01c9      	lsls	r1, r1, #7
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b40      	cmp	r3, #64	; 0x40
 8002c6a:	d007      	beq.n	8002c7c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	23e0      	movs	r3, #224	; 0xe0
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d94e      	bls.n	8002d26 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_SPI_Transmit+0x11e>
 8002c90:	2316      	movs	r3, #22
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d13f      	bne.n	8002d1a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	1c9a      	adds	r2, r3, #2
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cbe:	e02c      	b.n	8002d1a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d112      	bne.n	8002cf4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	881a      	ldrh	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	1c9a      	adds	r2, r3, #2
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cf2:	e012      	b.n	8002d1a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cf4:	f7fe ff10 	bl	8001b18 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d802      	bhi.n	8002d0a <HAL_SPI_Transmit+0x18e>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_Transmit+0x194>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002d10:	231f      	movs	r3, #31
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2203      	movs	r2, #3
 8002d16:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d18:	e079      	b.n	8002e0e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1cd      	bne.n	8002cc0 <HAL_SPI_Transmit+0x144>
 8002d24:	e04f      	b.n	8002dc6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_SPI_Transmit+0x1bc>
 8002d2e:	2316      	movs	r3, #22
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d141      	bne.n	8002dbc <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002d5e:	e02d      	b.n	8002dbc <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d113      	bne.n	8002d96 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	7812      	ldrb	r2, [r2, #0]
 8002d7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d94:	e012      	b.n	8002dbc <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d96:	f7fe febf 	bl	8001b18 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d802      	bhi.n	8002dac <HAL_SPI_Transmit+0x230>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	d102      	bne.n	8002db2 <HAL_SPI_Transmit+0x236>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d104      	bne.n	8002dbc <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002db2:	231f      	movs	r3, #31
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2203      	movs	r2, #3
 8002db8:	701a      	strb	r2, [r3, #0]
          goto error;
 8002dba:	e028      	b.n	8002e0e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cc      	bne.n	8002d60 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	6839      	ldr	r1, [r7, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 fce5 	bl	800379c <SPI_EndRxTxTransaction>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002e02:	231f      	movs	r3, #31
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e000      	b.n	8002e0e <HAL_SPI_Transmit+0x292>
  }

error:
 8002e0c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225d      	movs	r2, #93	; 0x5d
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	225c      	movs	r2, #92	; 0x5c
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e1e:	231f      	movs	r3, #31
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b008      	add	sp, #32
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b089      	sub	sp, #36	; 0x24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	1dbb      	adds	r3, r7, #6
 8002e3a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3c:	2317      	movs	r3, #23
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	2382      	movs	r3, #130	; 0x82
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d113      	bne.n	8002e78 <HAL_SPI_Receive+0x4c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10f      	bne.n	8002e78 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	225d      	movs	r2, #93	; 0x5d
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e60:	1dbb      	adds	r3, r7, #6
 8002e62:	881c      	ldrh	r4, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	0023      	movs	r3, r4
 8002e70:	f000 f928 	bl	80030c4 <HAL_SPI_TransmitReceive>
 8002e74:	0003      	movs	r3, r0
 8002e76:	e11c      	b.n	80030b2 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	225c      	movs	r2, #92	; 0x5c
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_SPI_Receive+0x5a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e115      	b.n	80030b2 <HAL_SPI_Receive+0x286>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	225c      	movs	r2, #92	; 0x5c
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e8e:	f7fe fe43 	bl	8001b18 <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	225d      	movs	r2, #93	; 0x5d
 8002e9a:	5c9b      	ldrb	r3, [r3, r2]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d004      	beq.n	8002eac <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002eaa:	e0f7      	b.n	800309c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_SPI_Receive+0x8e>
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002eba:	2317      	movs	r3, #23
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ec2:	e0eb      	b.n	800309c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	225d      	movs	r2, #93	; 0x5d
 8002ec8:	2104      	movs	r1, #4
 8002eca:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1dba      	adds	r2, r7, #6
 8002edc:	2144      	movs	r1, #68	; 0x44
 8002ede:	8812      	ldrh	r2, [r2, #0]
 8002ee0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1dba      	adds	r2, r7, #6
 8002ee6:	2146      	movs	r1, #70	; 0x46
 8002ee8:	8812      	ldrh	r2, [r2, #0]
 8002eea:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	23e0      	movs	r3, #224	; 0xe0
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d908      	bls.n	8002f28 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4966      	ldr	r1, [pc, #408]	; (80030bc <HAL_SPI_Receive+0x290>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e008      	b.n	8002f3a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	0149      	lsls	r1, r1, #5
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d10f      	bne.n	8002f66 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2140      	movs	r1, #64	; 0x40
 8002f52:	438a      	bics	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4957      	ldr	r1, [pc, #348]	; (80030c0 <HAL_SPI_Receive+0x294>)
 8002f62:	400a      	ands	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2240      	movs	r2, #64	; 0x40
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d007      	beq.n	8002f84 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2140      	movs	r1, #64	; 0x40
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	23e0      	movs	r3, #224	; 0xe0
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d900      	bls.n	8002f92 <HAL_SPI_Receive+0x166>
 8002f90:	e069      	b.n	8003066 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f92:	e031      	b.n	8002ff8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d117      	bne.n	8002fd2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	001a      	movs	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2246      	movs	r2, #70	; 0x46
 8002fc2:	5a9b      	ldrh	r3, [r3, r2]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b299      	uxth	r1, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2246      	movs	r2, #70	; 0x46
 8002fce:	5299      	strh	r1, [r3, r2]
 8002fd0:	e012      	b.n	8002ff8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd2:	f7fe fda1 	bl	8001b18 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_SPI_Receive+0x1bc>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_SPI_Receive+0x1c2>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002fee:	2317      	movs	r3, #23
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	701a      	strb	r2, [r3, #0]
          goto error;
 8002ff6:	e051      	b.n	800309c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2246      	movs	r2, #70	; 0x46
 8002ffc:	5a9b      	ldrh	r3, [r3, r2]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1c7      	bne.n	8002f94 <HAL_SPI_Receive+0x168>
 8003004:	e035      	b.n	8003072 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2201      	movs	r2, #1
 800300e:	4013      	ands	r3, r2
 8003010:	2b01      	cmp	r3, #1
 8003012:	d115      	bne.n	8003040 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	b292      	uxth	r2, r2
 8003020:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2246      	movs	r2, #70	; 0x46
 8003030:	5a9b      	ldrh	r3, [r3, r2]
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b299      	uxth	r1, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2246      	movs	r2, #70	; 0x46
 800303c:	5299      	strh	r1, [r3, r2]
 800303e:	e012      	b.n	8003066 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003040:	f7fe fd6a 	bl	8001b18 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d802      	bhi.n	8003056 <HAL_SPI_Receive+0x22a>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	d102      	bne.n	800305c <HAL_SPI_Receive+0x230>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800305c:	2317      	movs	r3, #23
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2203      	movs	r2, #3
 8003062:	701a      	strb	r2, [r3, #0]
          goto error;
 8003064:	e01a      	b.n	800309c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2246      	movs	r2, #70	; 0x46
 800306a:	5a9b      	ldrh	r3, [r3, r2]
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1c9      	bne.n	8003006 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fb31 	bl	80036e0 <SPI_EndRxTransaction>
 800307e:	1e03      	subs	r3, r0, #0
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003090:	2317      	movs	r3, #23
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e000      	b.n	800309c <HAL_SPI_Receive+0x270>
  }

error :
 800309a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	225d      	movs	r2, #93	; 0x5d
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	225c      	movs	r2, #92	; 0x5c
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80030ac:	2317      	movs	r3, #23
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	781b      	ldrb	r3, [r3, #0]
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b007      	add	sp, #28
 80030b8:	bd90      	pop	{r4, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	ffffefff 	.word	0xffffefff
 80030c0:	ffffbfff 	.word	0xffffbfff

080030c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
 80030d0:	001a      	movs	r2, r3
 80030d2:	1cbb      	adds	r3, r7, #2
 80030d4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030da:	2323      	movs	r3, #35	; 0x23
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	225c      	movs	r2, #92	; 0x5c
 80030e6:	5c9b      	ldrb	r3, [r3, r2]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x2c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e1b5      	b.n	800345c <HAL_SPI_TransmitReceive+0x398>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	225c      	movs	r2, #92	; 0x5c
 80030f4:	2101      	movs	r1, #1
 80030f6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f8:	f7fe fd0e 	bl	8001b18 <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003100:	201b      	movs	r0, #27
 8003102:	183b      	adds	r3, r7, r0
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	215d      	movs	r1, #93	; 0x5d
 8003108:	5c52      	ldrb	r2, [r2, r1]
 800310a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003112:	2312      	movs	r3, #18
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	1cba      	adds	r2, r7, #2
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800311c:	183b      	adds	r3, r7, r0
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d011      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x84>
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	2382      	movs	r3, #130	; 0x82
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	429a      	cmp	r2, r3
 800312c:	d107      	bne.n	800313e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_SPI_TransmitReceive+0x7a>
 8003136:	183b      	adds	r3, r7, r0
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b04      	cmp	r3, #4
 800313c:	d004      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800313e:	2323      	movs	r3, #35	; 0x23
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2202      	movs	r2, #2
 8003144:	701a      	strb	r2, [r3, #0]
    goto error;
 8003146:	e17e      	b.n	8003446 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d006      	beq.n	800315c <HAL_SPI_TransmitReceive+0x98>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_SPI_TransmitReceive+0x98>
 8003154:	1cbb      	adds	r3, r7, #2
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800315c:	2323      	movs	r3, #35	; 0x23
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
    goto error;
 8003164:	e16f      	b.n	8003446 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	225d      	movs	r2, #93	; 0x5d
 800316a:	5c9b      	ldrb	r3, [r3, r2]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b04      	cmp	r3, #4
 8003170:	d003      	beq.n	800317a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	225d      	movs	r2, #93	; 0x5d
 8003176:	2105      	movs	r1, #5
 8003178:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1cba      	adds	r2, r7, #2
 800318a:	2146      	movs	r1, #70	; 0x46
 800318c:	8812      	ldrh	r2, [r2, #0]
 800318e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1cba      	adds	r2, r7, #2
 8003194:	2144      	movs	r1, #68	; 0x44
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1cba      	adds	r2, r7, #2
 80031a4:	8812      	ldrh	r2, [r2, #0]
 80031a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1cba      	adds	r2, r7, #2
 80031ac:	8812      	ldrh	r2, [r2, #0]
 80031ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	23e0      	movs	r3, #224	; 0xe0
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d908      	bls.n	80031da <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	49a4      	ldr	r1, [pc, #656]	; (8003464 <HAL_SPI_TransmitReceive+0x3a0>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e008      	b.n	80031ec <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0149      	lsls	r1, r1, #5
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	4013      	ands	r3, r2
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d007      	beq.n	800320a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	23e0      	movs	r3, #224	; 0xe0
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	429a      	cmp	r2, r3
 8003214:	d800      	bhi.n	8003218 <HAL_SPI_TransmitReceive+0x154>
 8003216:	e07f      	b.n	8003318 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_SPI_TransmitReceive+0x168>
 8003220:	2312      	movs	r3, #18
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d000      	beq.n	800322c <HAL_SPI_TransmitReceive+0x168>
 800322a:	e069      	b.n	8003300 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003250:	e056      	b.n	8003300 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11b      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1d4>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d016      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x1d4>
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	2b01      	cmp	r3, #1
 800326e:	d113      	bne.n	8003298 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	881a      	ldrh	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	1c9a      	adds	r2, r3, #2
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d11c      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x21c>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2246      	movs	r2, #70	; 0x46
 80032aa:	5a9b      	ldrh	r3, [r3, r2]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	b292      	uxth	r2, r2
 80032be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2246      	movs	r2, #70	; 0x46
 80032ce:	5a9b      	ldrh	r3, [r3, r2]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b299      	uxth	r1, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2246      	movs	r2, #70	; 0x46
 80032da:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032dc:	2301      	movs	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032e0:	f7fe fc1a 	bl	8001b18 <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d807      	bhi.n	8003300 <HAL_SPI_TransmitReceive+0x23c>
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	3301      	adds	r3, #1
 80032f4:	d004      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80032f6:	2323      	movs	r3, #35	; 0x23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2203      	movs	r2, #3
 80032fc:	701a      	strb	r2, [r3, #0]
        goto error;
 80032fe:	e0a2      	b.n	8003446 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1a3      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x18e>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2246      	movs	r2, #70	; 0x46
 800330e:	5a9b      	ldrh	r3, [r3, r2]
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d19d      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x18e>
 8003316:	e085      	b.n	8003424 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_SPI_TransmitReceive+0x268>
 8003320:	2312      	movs	r3, #18
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d000      	beq.n	800332c <HAL_SPI_TransmitReceive+0x268>
 800332a:	e070      	b.n	800340e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	330c      	adds	r3, #12
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003352:	e05c      	b.n	800340e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2202      	movs	r2, #2
 800335c:	4013      	ands	r3, r2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d11c      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2d8>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <HAL_SPI_TransmitReceive+0x2d8>
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b01      	cmp	r3, #1
 8003370:	d114      	bne.n	800339c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	7812      	ldrb	r2, [r2, #0]
 800337e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2201      	movs	r2, #1
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d11e      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x324>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2246      	movs	r2, #70	; 0x46
 80033ae:	5a9b      	ldrh	r3, [r3, r2]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d018      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	001a      	movs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2246      	movs	r2, #70	; 0x46
 80033d6:	5a9b      	ldrh	r3, [r3, r2]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b299      	uxth	r1, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2246      	movs	r2, #70	; 0x46
 80033e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033e8:	f7fe fb96 	bl	8001b18 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d802      	bhi.n	80033fe <HAL_SPI_TransmitReceive+0x33a>
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	3301      	adds	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x340>
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8003404:	2323      	movs	r3, #35	; 0x23
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	2203      	movs	r2, #3
 800340a:	701a      	strb	r2, [r3, #0]
        goto error;
 800340c:	e01b      	b.n	8003446 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d19d      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x290>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2246      	movs	r2, #70	; 0x46
 800341c:	5a9b      	ldrh	r3, [r3, r2]
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d197      	bne.n	8003354 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	0018      	movs	r0, r3
 800342c:	f000 f9b6 	bl	800379c <SPI_EndRxTxTransaction>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d007      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8003434:	2323      	movs	r3, #35	; 0x23
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
 8003442:	e000      	b.n	8003446 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8003444:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	225d      	movs	r2, #93	; 0x5d
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	225c      	movs	r2, #92	; 0x5c
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003456:	2323      	movs	r3, #35	; 0x23
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	781b      	ldrb	r3, [r3, #0]
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b00a      	add	sp, #40	; 0x28
 8003462:	bd80      	pop	{r7, pc}
 8003464:	ffffefff 	.word	0xffffefff

08003468 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	225d      	movs	r2, #93	; 0x5d
 8003474:	5c9b      	ldrb	r3, [r3, r2]
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b002      	add	sp, #8
 800347e:	bd80      	pop	{r7, pc}

08003480 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	1dfb      	adds	r3, r7, #7
 800348e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003490:	f7fe fb42 	bl	8001b18 <HAL_GetTick>
 8003494:	0002      	movs	r2, r0
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	18d3      	adds	r3, r2, r3
 800349e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a0:	f7fe fb3a 	bl	8001b18 <HAL_GetTick>
 80034a4:	0003      	movs	r3, r0
 80034a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	015b      	lsls	r3, r3, #5
 80034ae:	0d1b      	lsrs	r3, r3, #20
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	4353      	muls	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034b6:	e058      	b.n	800356a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	d055      	beq.n	800356a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034be:	f7fe fb2b 	bl	8001b18 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d902      	bls.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d142      	bne.n	800355a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	21e0      	movs	r1, #224	; 0xe0
 80034e0:	438a      	bics	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	2382      	movs	r3, #130	; 0x82
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d113      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x98>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d005      	beq.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	429a      	cmp	r2, r3
 8003506:	d107      	bne.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	438a      	bics	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	019b      	lsls	r3, r3, #6
 8003520:	429a      	cmp	r2, r3
 8003522:	d110      	bne.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	491a      	ldr	r1, [pc, #104]	; (8003598 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003530:	400a      	ands	r2, r1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	0189      	lsls	r1, r1, #6
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	225d      	movs	r2, #93	; 0x5d
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	225c      	movs	r2, #92	; 0x5c
 8003552:	2100      	movs	r1, #0
 8003554:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e017      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3b01      	subs	r3, #1
 8003568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	425a      	negs	r2, r3
 800357a:	4153      	adcs	r3, r2
 800357c:	b2db      	uxtb	r3, r3
 800357e:	001a      	movs	r2, r3
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d197      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b008      	add	sp, #32
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	20000000 	.word	0x20000000
 8003598:	ffffdfff 	.word	0xffffdfff

0800359c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035aa:	2317      	movs	r3, #23
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035b2:	f7fe fab1 	bl	8001b18 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035c2:	f7fe faa9 	bl	8001b18 <HAL_GetTick>
 80035c6:	0003      	movs	r3, r0
 80035c8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	0013      	movs	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	189b      	adds	r3, r3, r2
 80035dc:	00da      	lsls	r2, r3, #3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	0d1b      	lsrs	r3, r3, #20
 80035e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e4:	4353      	muls	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035e8:	e068      	b.n	80036bc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	23c0      	movs	r3, #192	; 0xc0
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10a      	bne.n	800360a <SPI_WaitFifoStateUntilTimeout+0x6e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d107      	bne.n	800360a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	2117      	movs	r1, #23
 8003602:	187b      	adds	r3, r7, r1
 8003604:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003606:	187b      	adds	r3, r7, r1
 8003608:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	d055      	beq.n	80036bc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003610:	f7fe fa82 	bl	8001b18 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	429a      	cmp	r2, r3
 800361e:	d902      	bls.n	8003626 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	d142      	bne.n	80036ac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	21e0      	movs	r1, #224	; 0xe0
 8003632:	438a      	bics	r2, r1
 8003634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	2382      	movs	r3, #130	; 0x82
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	429a      	cmp	r2, r3
 8003640:	d113      	bne.n	800366a <SPI_WaitFifoStateUntilTimeout+0xce>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	429a      	cmp	r2, r3
 800364c:	d005      	beq.n	800365a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	429a      	cmp	r2, r3
 8003658:	d107      	bne.n	800366a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	438a      	bics	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	429a      	cmp	r2, r3
 8003674:	d110      	bne.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4916      	ldr	r1, [pc, #88]	; (80036dc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003682:	400a      	ands	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0189      	lsls	r1, r1, #6
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	225d      	movs	r2, #93	; 0x5d
 800369c:	2101      	movs	r1, #1
 800369e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	225c      	movs	r2, #92	; 0x5c
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e010      	b.n	80036ce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d18e      	bne.n	80035ea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00a      	add	sp, #40	; 0x28
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000000 	.word	0x20000000
 80036dc:	ffffdfff 	.word	0xffffdfff

080036e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	2382      	movs	r3, #130	; 0x82
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d113      	bne.n	8003720 <SPI_EndRxTransaction+0x40>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2140      	movs	r1, #64	; 0x40
 800371c:	438a      	bics	r2, r1
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	0013      	movs	r3, r2
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	f7ff fea7 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d007      	beq.n	8003746 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	2220      	movs	r2, #32
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e026      	b.n	8003794 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	2382      	movs	r3, #130	; 0x82
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	429a      	cmp	r2, r3
 8003750:	d11f      	bne.n	8003792 <SPI_EndRxTransaction+0xb2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	429a      	cmp	r2, r3
 800375c:	d005      	beq.n	800376a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	429a      	cmp	r2, r3
 8003768:	d113      	bne.n	8003792 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	23c0      	movs	r3, #192	; 0xc0
 800376e:	00d9      	lsls	r1, r3, #3
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	0013      	movs	r3, r2
 8003778:	2200      	movs	r2, #0
 800377a:	f7ff ff0f 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d007      	beq.n	8003792 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	2220      	movs	r2, #32
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e000      	b.n	8003794 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}

0800379c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	0159      	lsls	r1, r3, #5
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	0013      	movs	r3, r2
 80037b6:	2200      	movs	r2, #0
 80037b8:	f7ff fef0 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d007      	beq.n	80037d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	2220      	movs	r2, #32
 80037c6:	431a      	orrs	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e027      	b.n	8003820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	0013      	movs	r3, r2
 80037da:	2200      	movs	r2, #0
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	f7ff fe4f 	bl	8003480 <SPI_WaitFlagStateUntilTimeout>
 80037e2:	1e03      	subs	r3, r0, #0
 80037e4:	d007      	beq.n	80037f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ea:	2220      	movs	r2, #32
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e014      	b.n	8003820 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	23c0      	movs	r3, #192	; 0xc0
 80037fa:	00d9      	lsls	r1, r3, #3
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	0013      	movs	r3, r2
 8003804:	2200      	movs	r2, #0
 8003806:	f7ff fec9 	bl	800359c <SPI_WaitFifoStateUntilTimeout>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d007      	beq.n	800381e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003812:	2220      	movs	r2, #32
 8003814:	431a      	orrs	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e000      	b.n	8003820 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e042      	b.n	80038c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223d      	movs	r2, #61	; 0x3d
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	223c      	movs	r2, #60	; 0x3c
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 f839 	bl	80038c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223d      	movs	r2, #61	; 0x3d
 800385a:	2102      	movs	r1, #2
 800385c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3304      	adds	r3, #4
 8003866:	0019      	movs	r1, r3
 8003868:	0010      	movs	r0, r2
 800386a:	f000 f9b7 	bl	8003bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2246      	movs	r2, #70	; 0x46
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	223e      	movs	r2, #62	; 0x3e
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223f      	movs	r2, #63	; 0x3f
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2240      	movs	r2, #64	; 0x40
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2241      	movs	r2, #65	; 0x41
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2242      	movs	r2, #66	; 0x42
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2243      	movs	r2, #67	; 0x43
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2244      	movs	r2, #68	; 0x44
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2245      	movs	r2, #69	; 0x45
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223d      	movs	r2, #61	; 0x3d
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	0018      	movs	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223d      	movs	r2, #61	; 0x3d
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d001      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e035      	b.n	800395c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	223d      	movs	r2, #61	; 0x3d
 80038f4:	2102      	movs	r1, #2
 80038f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_TIM_Base_Start_IT+0x8c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <HAL_TIM_Base_Start_IT+0x90>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_TIM_Base_Start_IT+0x94>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d111      	bne.n	800394a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2207      	movs	r2, #7
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d010      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	e007      	b.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2202      	movs	r2, #2
 8003980:	4013      	ands	r3, r2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d124      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2202      	movs	r2, #2
 800398e:	4013      	ands	r3, r2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d11d      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2203      	movs	r2, #3
 800399a:	4252      	negs	r2, r2
 800399c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2203      	movs	r2, #3
 80039ac:	4013      	ands	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f000 f8fa 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 80039b8:	e007      	b.n	80039ca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f8ed 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f000 f8f9 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2204      	movs	r2, #4
 80039d8:	4013      	ands	r3, r2
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d125      	bne.n	8003a2a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d11e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2205      	movs	r2, #5
 80039f2:	4252      	negs	r2, r2
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	23c0      	movs	r3, #192	; 0xc0
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f8cd 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 8003a12:	e007      	b.n	8003a24 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f8c0 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 f8cc 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d124      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d11d      	bne.n	8003a82 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2209      	movs	r2, #9
 8003a4c:	4252      	negs	r2, r2
 8003a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f8a1 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f894 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f8a0 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d125      	bne.n	8003adc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2210      	movs	r2, #16
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d11e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2211      	movs	r2, #17
 8003aa4:	4252      	negs	r2, r2
 8003aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2208      	movs	r2, #8
 8003aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	23c0      	movs	r3, #192	; 0xc0
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 f874 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e007      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f867 	bl	8003b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 f873 	bl	8003bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d10f      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d108      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2202      	movs	r2, #2
 8003afe:	4252      	negs	r2, r2
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fd fda5 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b80      	cmp	r3, #128	; 0x80
 8003b16:	d10f      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d108      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2281      	movs	r2, #129	; 0x81
 8003b2c:	4252      	negs	r2, r2
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f8d0 	bl	8003cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d10f      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d108      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2241      	movs	r2, #65	; 0x41
 8003b5a:	4252      	negs	r2, r2
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f833 	bl	8003bcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d10f      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d108      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2221      	movs	r2, #33	; 0x21
 8003b88:	4252      	negs	r2, r2
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f89a 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_Base_SetConfig+0xd0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0x20>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <TIM_Base_SetConfig+0xd4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2270      	movs	r2, #112	; 0x70
 8003c00:	4393      	bics	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <TIM_Base_SetConfig+0xd0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <TIM_Base_SetConfig+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <TIM_Base_SetConfig+0xd4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00f      	beq.n	8003c3e <TIM_Base_SetConfig+0x62>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <TIM_Base_SetConfig+0xd8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00b      	beq.n	8003c3e <TIM_Base_SetConfig+0x62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a23      	ldr	r2, [pc, #140]	; (8003cb8 <TIM_Base_SetConfig+0xdc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d007      	beq.n	8003c3e <TIM_Base_SetConfig+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <TIM_Base_SetConfig+0xe0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_Base_SetConfig+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <TIM_Base_SetConfig+0xe4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d108      	bne.n	8003c50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a20      	ldr	r2, [pc, #128]	; (8003cc4 <TIM_Base_SetConfig+0xe8>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	4393      	bics	r3, r2
 8003c56:	001a      	movs	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <TIM_Base_SetConfig+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <TIM_Base_SetConfig+0xba>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a0d      	ldr	r2, [pc, #52]	; (8003cb8 <TIM_Base_SetConfig+0xdc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <TIM_Base_SetConfig+0xba>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <TIM_Base_SetConfig+0xe0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d003      	beq.n	8003c96 <TIM_Base_SetConfig+0xba>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <TIM_Base_SetConfig+0xe4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d103      	bne.n	8003c9e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	615a      	str	r2, [r3, #20]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b004      	add	sp, #16
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40002000 	.word	0x40002000
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	fffffcff 	.word	0xfffffcff

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce0:	46c0      	nop			; (mov r8, r8)
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	b002      	add	sp, #8
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e044      	b.n	8003d84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2274      	movs	r2, #116	; 0x74
 8003d06:	2100      	movs	r1, #0
 8003d08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f7fd fd6d 	bl	80017ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2224      	movs	r2, #36	; 0x24
 8003d16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2101      	movs	r1, #1
 8003d24:	438a      	bics	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fb84 	bl	8004438 <UART_SetConfig>
 8003d30:	0003      	movs	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e024      	b.n	8003d84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f000 fccf 	bl	80046e8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	490d      	ldr	r1, [pc, #52]	; (8003d8c <HAL_UART_Init+0xa4>)
 8003d56:	400a      	ands	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2108      	movs	r1, #8
 8003d66:	438a      	bics	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f000 fd67 	bl	8004850 <UART_CheckIdleState>
 8003d82:	0003      	movs	r3, r0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fffff7ff 	.word	0xfffff7ff

08003d90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	1dbb      	adds	r3, r7, #6
 8003d9c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d000      	beq.n	8003da8 <HAL_UART_Transmit_IT+0x18>
 8003da6:	e06a      	b.n	8003e7e <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_Transmit_IT+0x26>
 8003dae:	1dbb      	adds	r3, r7, #6
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e062      	b.n	8003e80 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d109      	bne.n	8003dda <HAL_UART_Transmit_IT+0x4a>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d001      	beq.n	8003dda <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e052      	b.n	8003e80 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2274      	movs	r2, #116	; 0x74
 8003dde:	5c9b      	ldrb	r3, [r3, r2]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Transmit_IT+0x58>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e04b      	b.n	8003e80 <HAL_UART_Transmit_IT+0xf0>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2274      	movs	r2, #116	; 0x74
 8003dec:	2101      	movs	r1, #1
 8003dee:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1dba      	adds	r2, r7, #6
 8003dfa:	2150      	movs	r1, #80	; 0x50
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1dba      	adds	r2, r7, #6
 8003e04:	2152      	movs	r1, #82	; 0x52
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	2100      	movs	r1, #0
 8003e16:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	015b      	lsls	r3, r3, #5
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d107      	bne.n	8003e3a <HAL_UART_Transmit_IT+0xaa>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <HAL_UART_Transmit_IT+0xf8>)
 8003e36:	669a      	str	r2, [r3, #104]	; 0x68
 8003e38:	e002      	b.n	8003e40 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <HAL_UART_Transmit_IT+0xfc>)
 8003e3e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2274      	movs	r2, #116	; 0x74
 8003e44:	2100      	movs	r1, #0
 8003e46:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003e7e:	2302      	movs	r3, #2
  }
}
 8003e80:	0018      	movs	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b008      	add	sp, #32
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08004c0f 	.word	0x08004c0f
 8003e8c:	08004b5b 	.word	0x08004b5b

08003e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e90:	b590      	push	{r4, r7, lr}
 8003e92:	b0ab      	sub	sp, #172	; 0xac
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	22a4      	movs	r2, #164	; 0xa4
 8003ea0:	18b9      	adds	r1, r7, r2
 8003ea2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	20a0      	movs	r0, #160	; 0xa0
 8003eac:	1839      	adds	r1, r7, r0
 8003eae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	219c      	movs	r1, #156	; 0x9c
 8003eb8:	1879      	adds	r1, r7, r1
 8003eba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	18bb      	adds	r3, r7, r2
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a99      	ldr	r2, [pc, #612]	; (8004128 <HAL_UART_IRQHandler+0x298>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2298      	movs	r2, #152	; 0x98
 8003ec8:	18bc      	adds	r4, r7, r2
 8003eca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003ecc:	18bb      	adds	r3, r7, r2
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d114      	bne.n	8003efe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ed4:	187b      	adds	r3, r7, r1
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	4013      	ands	r3, r2
 8003edc:	d00f      	beq.n	8003efe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ede:	183b      	adds	r3, r7, r0
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d00a      	beq.n	8003efe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d100      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x62>
 8003ef0:	e27e      	b.n	80043f0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	0010      	movs	r0, r2
 8003efa:	4798      	blx	r3
      }
      return;
 8003efc:	e278      	b.n	80043f0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003efe:	2398      	movs	r3, #152	; 0x98
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d100      	bne.n	8003f0a <HAL_UART_IRQHandler+0x7a>
 8003f08:	e114      	b.n	8004134 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f0a:	239c      	movs	r3, #156	; 0x9c
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4013      	ands	r3, r2
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f16:	23a0      	movs	r3, #160	; 0xa0
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a83      	ldr	r2, [pc, #524]	; (800412c <HAL_UART_IRQHandler+0x29c>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d100      	bne.n	8003f24 <HAL_UART_IRQHandler+0x94>
 8003f22:	e107      	b.n	8004134 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f24:	23a4      	movs	r3, #164	; 0xa4
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d012      	beq.n	8003f56 <HAL_UART_IRQHandler+0xc6>
 8003f30:	23a0      	movs	r3, #160	; 0xa0
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2201      	movs	r2, #1
 8003f44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	589b      	ldr	r3, [r3, r2]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2180      	movs	r1, #128	; 0x80
 8003f54:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f56:	23a4      	movs	r3, #164	; 0xa4
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d011      	beq.n	8003f86 <HAL_UART_IRQHandler+0xf6>
 8003f62:	239c      	movs	r3, #156	; 0x9c
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d00b      	beq.n	8003f86 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2202      	movs	r2, #2
 8003f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	589b      	ldr	r3, [r3, r2]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f86:	23a4      	movs	r3, #164	; 0xa4
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d011      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x126>
 8003f92:	239c      	movs	r3, #156	; 0x9c
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2280      	movs	r2, #128	; 0x80
 8003faa:	589b      	ldr	r3, [r3, r2]
 8003fac:	2202      	movs	r2, #2
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fb6:	23a4      	movs	r3, #164	; 0xa4
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d017      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fc2:	23a0      	movs	r3, #160	; 0xa0
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d105      	bne.n	8003fda <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fce:	239c      	movs	r3, #156	; 0x9c
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2208      	movs	r2, #8
 8003fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	589b      	ldr	r3, [r3, r2]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ff2:	23a4      	movs	r3, #164	; 0xa4
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d013      	beq.n	8004028 <HAL_UART_IRQHandler+0x198>
 8004000:	23a0      	movs	r3, #160	; 0xa0
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2380      	movs	r3, #128	; 0x80
 8004008:	04db      	lsls	r3, r3, #19
 800400a:	4013      	ands	r3, r2
 800400c:	d00c      	beq.n	8004028 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	0112      	lsls	r2, r2, #4
 8004016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	2220      	movs	r2, #32
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	589b      	ldr	r3, [r3, r2]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d100      	bne.n	8004034 <HAL_UART_IRQHandler+0x1a4>
 8004032:	e1df      	b.n	80043f4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004034:	23a4      	movs	r3, #164	; 0xa4
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004040:	23a0      	movs	r3, #160	; 0xa0
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2220      	movs	r2, #32
 8004048:	4013      	ands	r3, r2
 800404a:	d008      	beq.n	800405e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	0010      	movs	r0, r2
 800405c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	589b      	ldr	r3, [r3, r2]
 8004064:	2194      	movs	r1, #148	; 0x94
 8004066:	187a      	adds	r2, r7, r1
 8004068:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2240      	movs	r2, #64	; 0x40
 8004072:	4013      	ands	r3, r2
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d004      	beq.n	8004082 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004078:	187b      	adds	r3, r7, r1
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2228      	movs	r2, #40	; 0x28
 800407e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004080:	d047      	beq.n	8004112 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 fcef 	bl	8004a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2240      	movs	r2, #64	; 0x40
 8004092:	4013      	ands	r3, r2
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d137      	bne.n	8004108 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004098:	f3ef 8310 	mrs	r3, PRIMASK
 800409c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800409e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a0:	2090      	movs	r0, #144	; 0x90
 80040a2:	183a      	adds	r2, r7, r0
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	2301      	movs	r3, #1
 80040a8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ac:	f383 8810 	msr	PRIMASK, r3
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	438a      	bics	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	183b      	adds	r3, r7, r0
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d012      	beq.n	80040fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a14      	ldr	r2, [pc, #80]	; (8004130 <HAL_UART_IRQHandler+0x2a0>)
 80040de:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7fd fe06 	bl	8001cf6 <HAL_DMA_Abort_IT>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d01a      	beq.n	8004124 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	0018      	movs	r0, r3
 80040fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	e012      	b.n	8004124 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f985 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004106:	e00d      	b.n	8004124 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 f980 	bl	8004410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	e008      	b.n	8004124 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f000 f97b 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2280      	movs	r2, #128	; 0x80
 800411e:	2100      	movs	r1, #0
 8004120:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004122:	e167      	b.n	80043f4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	46c0      	nop			; (mov r8, r8)
    return;
 8004126:	e165      	b.n	80043f4 <HAL_UART_IRQHandler+0x564>
 8004128:	0000080f 	.word	0x0000080f
 800412c:	04000120 	.word	0x04000120
 8004130:	08004b2d 	.word	0x08004b2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004138:	2b01      	cmp	r3, #1
 800413a:	d000      	beq.n	800413e <HAL_UART_IRQHandler+0x2ae>
 800413c:	e131      	b.n	80043a2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800413e:	23a4      	movs	r3, #164	; 0xa4
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2210      	movs	r2, #16
 8004146:	4013      	ands	r3, r2
 8004148:	d100      	bne.n	800414c <HAL_UART_IRQHandler+0x2bc>
 800414a:	e12a      	b.n	80043a2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800414c:	23a0      	movs	r3, #160	; 0xa0
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2210      	movs	r2, #16
 8004154:	4013      	ands	r3, r2
 8004156:	d100      	bne.n	800415a <HAL_UART_IRQHandler+0x2ca>
 8004158:	e123      	b.n	80043a2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2210      	movs	r2, #16
 8004160:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	4013      	ands	r3, r2
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d000      	beq.n	8004172 <HAL_UART_IRQHandler+0x2e2>
 8004170:	e09b      	b.n	80042aa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	217e      	movs	r1, #126	; 0x7e
 800417c:	187b      	adds	r3, r7, r1
 800417e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004180:	187b      	adds	r3, r7, r1
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d100      	bne.n	800418a <HAL_UART_IRQHandler+0x2fa>
 8004188:	e136      	b.n	80043f8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2258      	movs	r2, #88	; 0x58
 800418e:	5a9b      	ldrh	r3, [r3, r2]
 8004190:	187a      	adds	r2, r7, r1
 8004192:	8812      	ldrh	r2, [r2, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d300      	bcc.n	800419a <HAL_UART_IRQHandler+0x30a>
 8004198:	e12e      	b.n	80043f8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	187a      	adds	r2, r7, r1
 800419e:	215a      	movs	r1, #90	; 0x5a
 80041a0:	8812      	ldrh	r2, [r2, #0]
 80041a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d06e      	beq.n	800428c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ae:	f3ef 8310 	mrs	r3, PRIMASK
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b8:	2301      	movs	r3, #1
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	498e      	ldr	r1, [pc, #568]	; (8004408 <HAL_UART_IRQHandler+0x578>)
 80041d0:	400a      	ands	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e0:	f3ef 8310 	mrs	r3, PRIMASK
 80041e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	677b      	str	r3, [r7, #116]	; 0x74
 80041ea:	2301      	movs	r3, #1
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	438a      	bics	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	f383 8810 	msr	PRIMASK, r3
}
 8004210:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004212:	f3ef 8310 	mrs	r3, PRIMASK
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004218:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	673b      	str	r3, [r7, #112]	; 0x70
 800421c:	2301      	movs	r3, #1
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	f383 8810 	msr	PRIMASK, r3
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	438a      	bics	r2, r1
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423e:	f383 8810 	msr	PRIMASK, r3
}
 8004242:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800425a:	2301      	movs	r3, #1
 800425c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2110      	movs	r1, #16
 8004272:	438a      	bics	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fcfd 	bl	8001c86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2258      	movs	r2, #88	; 0x58
 8004290:	5a9a      	ldrh	r2, [r3, r2]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	215a      	movs	r1, #90	; 0x5a
 8004296:	5a5b      	ldrh	r3, [r3, r1]
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29a      	uxth	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0011      	movs	r1, r2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f8bc 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042a8:	e0a6      	b.n	80043f8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2258      	movs	r2, #88	; 0x58
 80042ae:	5a99      	ldrh	r1, [r3, r2]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	225a      	movs	r2, #90	; 0x5a
 80042b4:	5a9b      	ldrh	r3, [r3, r2]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	208e      	movs	r0, #142	; 0x8e
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	1a8a      	subs	r2, r1, r2
 80042be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	225a      	movs	r2, #90	; 0x5a
 80042c4:	5a9b      	ldrh	r3, [r3, r2]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <HAL_UART_IRQHandler+0x43e>
 80042cc:	e096      	b.n	80043fc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d100      	bne.n	80042d8 <HAL_UART_IRQHandler+0x448>
 80042d6:	e091      	b.n	80043fc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80042de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e0:	2488      	movs	r4, #136	; 0x88
 80042e2:	193a      	adds	r2, r7, r4
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	2301      	movs	r3, #1
 80042e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4943      	ldr	r1, [pc, #268]	; (800440c <HAL_UART_IRQHandler+0x57c>)
 80042fe:	400a      	ands	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	193b      	adds	r3, r7, r4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	61bb      	str	r3, [r7, #24]
  return(result);
 8004316:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	2484      	movs	r4, #132	; 0x84
 800431a:	193a      	adds	r2, r7, r4
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	2301      	movs	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f383 8810 	msr	PRIMASK, r3
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	438a      	bics	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	193b      	adds	r3, r7, r4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435a:	f3ef 8310 	mrs	r3, PRIMASK
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004362:	2480      	movs	r4, #128	; 0x80
 8004364:	193a      	adds	r2, r7, r4
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	2301      	movs	r3, #1
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2110      	movs	r1, #16
 8004380:	438a      	bics	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	193b      	adds	r3, r7, r4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004392:	183b      	adds	r3, r7, r0
 8004394:	881a      	ldrh	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f000 f840 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043a0:	e02c      	b.n	80043fc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043a2:	23a4      	movs	r3, #164	; 0xa4
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	4013      	ands	r3, r2
 80043ac:	d00f      	beq.n	80043ce <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80043ae:	23a0      	movs	r3, #160	; 0xa0
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	4013      	ands	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01e      	beq.n	8004400 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	0010      	movs	r0, r2
 80043ca:	4798      	blx	r3
    }
    return;
 80043cc:	e018      	b.n	8004400 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043ce:	23a4      	movs	r3, #164	; 0xa4
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2240      	movs	r2, #64	; 0x40
 80043d6:	4013      	ands	r3, r2
 80043d8:	d013      	beq.n	8004402 <HAL_UART_IRQHandler+0x572>
 80043da:	23a0      	movs	r3, #160	; 0xa0
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	4013      	ands	r3, r2
 80043e4:	d00d      	beq.n	8004402 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 fc6e 	bl	8004cca <UART_EndTransmit_IT>
    return;
 80043ee:	e008      	b.n	8004402 <HAL_UART_IRQHandler+0x572>
      return;
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	e006      	b.n	8004402 <HAL_UART_IRQHandler+0x572>
    return;
 80043f4:	46c0      	nop			; (mov r8, r8)
 80043f6:	e004      	b.n	8004402 <HAL_UART_IRQHandler+0x572>
      return;
 80043f8:	46c0      	nop			; (mov r8, r8)
 80043fa:	e002      	b.n	8004402 <HAL_UART_IRQHandler+0x572>
      return;
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	e000      	b.n	8004402 <HAL_UART_IRQHandler+0x572>
    return;
 8004400:	46c0      	nop			; (mov r8, r8)
  }

}
 8004402:	46bd      	mov	sp, r7
 8004404:	b02b      	add	sp, #172	; 0xac
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	fffffeff 	.word	0xfffffeff
 800440c:	fffffedf 	.word	0xfffffedf

08004410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b002      	add	sp, #8
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	000a      	movs	r2, r1
 800442a:	1cbb      	adds	r3, r7, #2
 800442c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b002      	add	sp, #8
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004440:	231e      	movs	r3, #30
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a97      	ldr	r2, [pc, #604]	; (80046c4 <UART_SetConfig+0x28c>)
 8004468:	4013      	ands	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	430a      	orrs	r2, r1
 8004474:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4a92      	ldr	r2, [pc, #584]	; (80046c8 <UART_SetConfig+0x290>)
 800447e:	4013      	ands	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a89      	ldr	r2, [pc, #548]	; (80046cc <UART_SetConfig+0x294>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	0019      	movs	r1, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a85      	ldr	r2, [pc, #532]	; (80046d0 <UART_SetConfig+0x298>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d127      	bne.n	800450e <UART_SetConfig+0xd6>
 80044be:	4b85      	ldr	r3, [pc, #532]	; (80046d4 <UART_SetConfig+0x29c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	2203      	movs	r2, #3
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d00d      	beq.n	80044e6 <UART_SetConfig+0xae>
 80044ca:	d81b      	bhi.n	8004504 <UART_SetConfig+0xcc>
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d014      	beq.n	80044fa <UART_SetConfig+0xc2>
 80044d0:	d818      	bhi.n	8004504 <UART_SetConfig+0xcc>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <UART_SetConfig+0xa4>
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d00a      	beq.n	80044f0 <UART_SetConfig+0xb8>
 80044da:	e013      	b.n	8004504 <UART_SetConfig+0xcc>
 80044dc:	231f      	movs	r3, #31
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e035      	b.n	8004552 <UART_SetConfig+0x11a>
 80044e6:	231f      	movs	r3, #31
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e030      	b.n	8004552 <UART_SetConfig+0x11a>
 80044f0:	231f      	movs	r3, #31
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2204      	movs	r2, #4
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e02b      	b.n	8004552 <UART_SetConfig+0x11a>
 80044fa:	231f      	movs	r3, #31
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	2208      	movs	r2, #8
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e026      	b.n	8004552 <UART_SetConfig+0x11a>
 8004504:	231f      	movs	r3, #31
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2210      	movs	r2, #16
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e021      	b.n	8004552 <UART_SetConfig+0x11a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <UART_SetConfig+0x2a0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d104      	bne.n	8004522 <UART_SetConfig+0xea>
 8004518:	231f      	movs	r3, #31
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e017      	b.n	8004552 <UART_SetConfig+0x11a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6d      	ldr	r2, [pc, #436]	; (80046dc <UART_SetConfig+0x2a4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d104      	bne.n	8004536 <UART_SetConfig+0xfe>
 800452c:	231f      	movs	r3, #31
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e00d      	b.n	8004552 <UART_SetConfig+0x11a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a69      	ldr	r2, [pc, #420]	; (80046e0 <UART_SetConfig+0x2a8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d104      	bne.n	800454a <UART_SetConfig+0x112>
 8004540:	231f      	movs	r3, #31
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e003      	b.n	8004552 <UART_SetConfig+0x11a>
 800454a:	231f      	movs	r3, #31
 800454c:	18fb      	adds	r3, r7, r3
 800454e:	2210      	movs	r2, #16
 8004550:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	429a      	cmp	r2, r3
 800455c:	d15d      	bne.n	800461a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d015      	beq.n	8004594 <UART_SetConfig+0x15c>
 8004568:	dc18      	bgt.n	800459c <UART_SetConfig+0x164>
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00d      	beq.n	800458a <UART_SetConfig+0x152>
 800456e:	dc15      	bgt.n	800459c <UART_SetConfig+0x164>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <UART_SetConfig+0x142>
 8004574:	2b02      	cmp	r3, #2
 8004576:	d005      	beq.n	8004584 <UART_SetConfig+0x14c>
 8004578:	e010      	b.n	800459c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457a:	f7fe fa07 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800457e:	0003      	movs	r3, r0
 8004580:	61bb      	str	r3, [r7, #24]
        break;
 8004582:	e012      	b.n	80045aa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b57      	ldr	r3, [pc, #348]	; (80046e4 <UART_SetConfig+0x2ac>)
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e00f      	b.n	80045aa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7fe f98f 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800458e:	0003      	movs	r3, r0
 8004590:	61bb      	str	r3, [r7, #24]
        break;
 8004592:	e00a      	b.n	80045aa <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	61bb      	str	r3, [r7, #24]
        break;
 800459a:	e006      	b.n	80045aa <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045a0:	231e      	movs	r3, #30
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
        break;
 80045a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d100      	bne.n	80045b2 <UART_SetConfig+0x17a>
 80045b0:	e07b      	b.n	80046aa <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	005a      	lsls	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	18d2      	adds	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f7fb fda9 	bl	800011c <__udivsi3>
 80045ca:	0003      	movs	r3, r0
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d91c      	bls.n	8004610 <UART_SetConfig+0x1d8>
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	025b      	lsls	r3, r3, #9
 80045dc:	429a      	cmp	r2, r3
 80045de:	d217      	bcs.n	8004610 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	200e      	movs	r0, #14
 80045e6:	183b      	adds	r3, r7, r0
 80045e8:	210f      	movs	r1, #15
 80045ea:	438a      	bics	r2, r1
 80045ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2207      	movs	r2, #7
 80045f6:	4013      	ands	r3, r2
 80045f8:	b299      	uxth	r1, r3
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	183a      	adds	r2, r7, r0
 80045fe:	8812      	ldrh	r2, [r2, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	183a      	adds	r2, r7, r0
 800460a:	8812      	ldrh	r2, [r2, #0]
 800460c:	60da      	str	r2, [r3, #12]
 800460e:	e04c      	b.n	80046aa <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004610:	231e      	movs	r3, #30
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e047      	b.n	80046aa <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800461a:	231f      	movs	r3, #31
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d015      	beq.n	8004650 <UART_SetConfig+0x218>
 8004624:	dc18      	bgt.n	8004658 <UART_SetConfig+0x220>
 8004626:	2b04      	cmp	r3, #4
 8004628:	d00d      	beq.n	8004646 <UART_SetConfig+0x20e>
 800462a:	dc15      	bgt.n	8004658 <UART_SetConfig+0x220>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <UART_SetConfig+0x1fe>
 8004630:	2b02      	cmp	r3, #2
 8004632:	d005      	beq.n	8004640 <UART_SetConfig+0x208>
 8004634:	e010      	b.n	8004658 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004636:	f7fe f9a9 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800463a:	0003      	movs	r3, r0
 800463c:	61bb      	str	r3, [r7, #24]
        break;
 800463e:	e012      	b.n	8004666 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <UART_SetConfig+0x2ac>)
 8004642:	61bb      	str	r3, [r7, #24]
        break;
 8004644:	e00f      	b.n	8004666 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004646:	f7fe f931 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800464a:	0003      	movs	r3, r0
 800464c:	61bb      	str	r3, [r7, #24]
        break;
 800464e:	e00a      	b.n	8004666 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	61bb      	str	r3, [r7, #24]
        break;
 8004656:	e006      	b.n	8004666 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800465c:	231e      	movs	r3, #30
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
        break;
 8004664:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01e      	beq.n	80046aa <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	085a      	lsrs	r2, r3, #1
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	18d2      	adds	r2, r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0019      	movs	r1, r3
 800467c:	0010      	movs	r0, r2
 800467e:	f7fb fd4d 	bl	800011c <__udivsi3>
 8004682:	0003      	movs	r3, r0
 8004684:	b29b      	uxth	r3, r3
 8004686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	d909      	bls.n	80046a2 <UART_SetConfig+0x26a>
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	2380      	movs	r3, #128	; 0x80
 8004692:	025b      	lsls	r3, r3, #9
 8004694:	429a      	cmp	r2, r3
 8004696:	d204      	bcs.n	80046a2 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	60da      	str	r2, [r3, #12]
 80046a0:	e003      	b.n	80046aa <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80046a2:	231e      	movs	r3, #30
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046b6:	231e      	movs	r3, #30
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	781b      	ldrb	r3, [r3, #0]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b008      	add	sp, #32
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	efff69f3 	.word	0xefff69f3
 80046c8:	ffffcfff 	.word	0xffffcfff
 80046cc:	fffff4ff 	.word	0xfffff4ff
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40004400 	.word	0x40004400
 80046dc:	40004800 	.word	0x40004800
 80046e0:	40004c00 	.word	0x40004c00
 80046e4:	007a1200 	.word	0x007a1200

080046e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	d00b      	beq.n	8004712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <UART_AdvFeatureConfig+0x144>)
 8004702:	4013      	ands	r3, r2
 8004704:	0019      	movs	r1, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2202      	movs	r2, #2
 8004718:	4013      	ands	r3, r2
 800471a:	d00b      	beq.n	8004734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a43      	ldr	r2, [pc, #268]	; (8004830 <UART_AdvFeatureConfig+0x148>)
 8004724:	4013      	ands	r3, r2
 8004726:	0019      	movs	r1, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2204      	movs	r2, #4
 800473a:	4013      	ands	r3, r2
 800473c:	d00b      	beq.n	8004756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <UART_AdvFeatureConfig+0x14c>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2208      	movs	r2, #8
 800475c:	4013      	ands	r3, r2
 800475e:	d00b      	beq.n	8004778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a34      	ldr	r2, [pc, #208]	; (8004838 <UART_AdvFeatureConfig+0x150>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2210      	movs	r2, #16
 800477e:	4013      	ands	r3, r2
 8004780:	d00b      	beq.n	800479a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <UART_AdvFeatureConfig+0x154>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2220      	movs	r2, #32
 80047a0:	4013      	ands	r3, r2
 80047a2:	d00b      	beq.n	80047bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	4a25      	ldr	r2, [pc, #148]	; (8004840 <UART_AdvFeatureConfig+0x158>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2240      	movs	r2, #64	; 0x40
 80047c2:	4013      	ands	r3, r2
 80047c4:	d01d      	beq.n	8004802 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <UART_AdvFeatureConfig+0x15c>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	035b      	lsls	r3, r3, #13
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d10b      	bne.n	8004802 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <UART_AdvFeatureConfig+0x160>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	0019      	movs	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2280      	movs	r2, #128	; 0x80
 8004808:	4013      	ands	r3, r2
 800480a:	d00b      	beq.n	8004824 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	4a0e      	ldr	r2, [pc, #56]	; (800484c <UART_AdvFeatureConfig+0x164>)
 8004814:	4013      	ands	r3, r2
 8004816:	0019      	movs	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	605a      	str	r2, [r3, #4]
  }
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	46bd      	mov	sp, r7
 8004828:	b002      	add	sp, #8
 800482a:	bd80      	pop	{r7, pc}
 800482c:	fffdffff 	.word	0xfffdffff
 8004830:	fffeffff 	.word	0xfffeffff
 8004834:	fffbffff 	.word	0xfffbffff
 8004838:	ffff7fff 	.word	0xffff7fff
 800483c:	ffffefff 	.word	0xffffefff
 8004840:	ffffdfff 	.word	0xffffdfff
 8004844:	ffefffff 	.word	0xffefffff
 8004848:	ff9fffff 	.word	0xff9fffff
 800484c:	fff7ffff 	.word	0xfff7ffff

08004850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	2100      	movs	r1, #0
 800485e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004860:	f7fd f95a 	bl	8001b18 <HAL_GetTick>
 8004864:	0003      	movs	r3, r0
 8004866:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2208      	movs	r2, #8
 8004870:	4013      	ands	r3, r2
 8004872:	2b08      	cmp	r3, #8
 8004874:	d10c      	bne.n	8004890 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	0391      	lsls	r1, r2, #14
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	4a17      	ldr	r2, [pc, #92]	; (80048dc <UART_CheckIdleState+0x8c>)
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	f000 f82c 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 8004888:	1e03      	subs	r3, r0, #0
 800488a:	d001      	beq.n	8004890 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e021      	b.n	80048d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	4013      	ands	r3, r2
 800489a:	2b04      	cmp	r3, #4
 800489c:	d10c      	bne.n	80048b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2280      	movs	r2, #128	; 0x80
 80048a2:	03d1      	lsls	r1, r2, #15
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <UART_CheckIdleState+0x8c>)
 80048a8:	9200      	str	r2, [sp, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f000 f818 	bl	80048e0 <UART_WaitOnFlagUntilTimeout>
 80048b0:	1e03      	subs	r3, r0, #0
 80048b2:	d001      	beq.n	80048b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e00d      	b.n	80048d4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2274      	movs	r2, #116	; 0x74
 80048ce:	2100      	movs	r1, #0
 80048d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b004      	add	sp, #16
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	01ffffff 	.word	0x01ffffff

080048e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b094      	sub	sp, #80	; 0x50
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	1dfb      	adds	r3, r7, #7
 80048ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f0:	e0a3      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f4:	3301      	adds	r3, #1
 80048f6:	d100      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x1a>
 80048f8:	e09f      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fd f90d 	bl	8001b18 <HAL_GetTick>
 80048fe:	0002      	movs	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <UART_WaitOnFlagUntilTimeout+0x30>
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	2b00      	cmp	r3, #0
 800490e:	d13d      	bne.n	800498c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
 800491a:	2301      	movs	r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	494c      	ldr	r1, [pc, #304]	; (8004a64 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004932:	400a      	ands	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494a:	643b      	str	r3, [r7, #64]	; 0x40
 800494c:	2301      	movs	r3, #1
 800494e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	438a      	bics	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2274      	movs	r2, #116	; 0x74
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e067      	b.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2204      	movs	r2, #4
 8004994:	4013      	ands	r3, r2
 8004996:	d050      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	2380      	movs	r3, #128	; 0x80
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	401a      	ands	r2, r3
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d146      	bne.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2280      	movs	r2, #128	; 0x80
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	613b      	str	r3, [r7, #16]
  return(result);
 80049bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f383 8810 	msr	PRIMASK, r3
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4923      	ldr	r1, [pc, #140]	; (8004a64 <UART_WaitOnFlagUntilTimeout+0x184>)
 80049d8:	400a      	ands	r2, r1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f383 8810 	msr	PRIMASK, r3
}
 80049e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e8:	f3ef 8310 	mrs	r3, PRIMASK
 80049ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80049ee:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f2:	2301      	movs	r3, #1
 80049f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2101      	movs	r1, #1
 8004a0a:	438a      	bics	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	f383 8810 	msr	PRIMASK, r3
}
 8004a18:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	2120      	movs	r1, #32
 8004a2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2274      	movs	r2, #116	; 0x74
 8004a32:	2100      	movs	r1, #0
 8004a34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e010      	b.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	425a      	negs	r2, r3
 8004a4a:	4153      	adcs	r3, r2
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	001a      	movs	r2, r3
 8004a50:	1dfb      	adds	r3, r7, #7
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d100      	bne.n	8004a5a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004a58:	e74b      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b014      	add	sp, #80	; 0x50
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fffffe5f 	.word	0xfffffe5f

08004a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	; 0x38
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	617b      	str	r3, [r7, #20]
  return(result);
 8004a76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a78:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4925      	ldr	r1, [pc, #148]	; (8004b28 <UART_EndRxTransfer+0xc0>)
 8004a92:	400a      	ands	r2, r1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	623b      	str	r3, [r7, #32]
  return(result);
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004aac:	2301      	movs	r3, #1
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d118      	bne.n	8004b0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004adc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f383 8810 	msr	PRIMASK, r3
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2110      	movs	r1, #16
 8004afe:	438a      	bics	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f383 8810 	msr	PRIMASK, r3
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b00e      	add	sp, #56	; 0x38
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	fffffedf 	.word	0xfffffedf

08004b2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	225a      	movs	r2, #90	; 0x5a
 8004b3e:	2100      	movs	r1, #0
 8004b40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2252      	movs	r2, #82	; 0x52
 8004b46:	2100      	movs	r1, #0
 8004b48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fc5f 	bl	8004410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b004      	add	sp, #16
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08a      	sub	sp, #40	; 0x28
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b66:	2b21      	cmp	r3, #33	; 0x21
 8004b68:	d14d      	bne.n	8004c06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2252      	movs	r2, #82	; 0x52
 8004b6e:	5a9b      	ldrh	r3, [r3, r2]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d132      	bne.n	8004bdc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	2301      	movs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	438a      	bics	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	617b      	str	r3, [r7, #20]
  return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004bda:	e014      	b.n	8004c06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	b292      	uxth	r2, r2
 8004be8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2252      	movs	r2, #82	; 0x52
 8004bf8:	5a9b      	ldrh	r3, [r3, r2]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2252      	movs	r2, #82	; 0x52
 8004c04:	5299      	strh	r1, [r3, r2]
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b00a      	add	sp, #40	; 0x28
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08c      	sub	sp, #48	; 0x30
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1a:	2b21      	cmp	r3, #33	; 0x21
 8004c1c:	d151      	bne.n	8004cc2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2252      	movs	r2, #82	; 0x52
 8004c22:	5a9b      	ldrh	r3, [r3, r2]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d132      	bne.n	8004c90 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c34:	2301      	movs	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f383 8810 	msr	PRIMASK, r3
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f383 8810 	msr	PRIMASK, r3
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c62:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004c8e:	e018      	b.n	8004cc2 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	881a      	ldrh	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	05d2      	lsls	r2, r2, #23
 8004ca0:	0dd2      	lsrs	r2, r2, #23
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2252      	movs	r2, #82	; 0x52
 8004cb4:	5a9b      	ldrh	r3, [r3, r2]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b299      	uxth	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2252      	movs	r2, #82	; 0x52
 8004cc0:	5299      	strh	r1, [r3, r2]
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b00c      	add	sp, #48	; 0x30
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	438a      	bics	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f383 8810 	msr	PRIMASK, r3
}
 8004d02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0018      	movs	r0, r3
 8004d14:	f7fc fa36 	bl	8001184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d18:	46c0      	nop			; (mov r8, r8)
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b006      	add	sp, #24
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d26:	f3ef 8305 	mrs	r3, IPSR
 8004d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d109      	bne.n	8004d46 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	607b      	str	r3, [r7, #4]
  return(result);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <osKernelInitialize+0x2e>
 8004d3e:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <osKernelInitialize+0x54>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d103      	bne.n	8004d4e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8004d46:	2306      	movs	r3, #6
 8004d48:	425b      	negs	r3, r3
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	e00c      	b.n	8004d68 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <osKernelInitialize+0x54>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d105      	bne.n	8004d62 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <osKernelInitialize+0x54>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e002      	b.n	8004d68 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004d62:	2301      	movs	r3, #1
 8004d64:	425b      	negs	r3, r3
 8004d66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d68:	68fb      	ldr	r3, [r7, #12]
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b004      	add	sp, #16
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	2000026c 	.word	0x2000026c

08004d78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d7e:	f3ef 8305 	mrs	r3, IPSR
 8004d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <osKernelStart+0x2e>
 8004d96:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <osKernelStart+0x58>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <osKernelStart+0x2e>
    stat = osErrorISR;
 8004d9e:	2306      	movs	r3, #6
 8004da0:	425b      	negs	r3, r3
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e00e      	b.n	8004dc4 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <osKernelStart+0x58>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004dae:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <osKernelStart+0x58>)
 8004db0:	2202      	movs	r2, #2
 8004db2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004db4:	f001 fb60 	bl	8006478 <vTaskStartScheduler>
      stat = osOK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e002      	b.n	8004dc4 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	425b      	negs	r3, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b004      	add	sp, #16
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			; (mov r8, r8)
 8004dd0:	2000026c 	.word	0x2000026c

08004dd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004dd4:	b5b0      	push	{r4, r5, r7, lr}
 8004dd6:	b090      	sub	sp, #64	; 0x40
 8004dd8:	af04      	add	r7, sp, #16
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de4:	f3ef 8305 	mrs	r3, IPSR
 8004de8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d000      	beq.n	8004df2 <osThreadNew+0x1e>
 8004df0:	e090      	b.n	8004f14 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df2:	f3ef 8310 	mrs	r3, PRIMASK
 8004df6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <osThreadNew+0x34>
 8004dfe:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <osThreadNew+0x14c>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d100      	bne.n	8004e08 <osThreadNew+0x34>
 8004e06:	e085      	b.n	8004f14 <osThreadNew+0x140>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d100      	bne.n	8004e10 <osThreadNew+0x3c>
 8004e0e:	e081      	b.n	8004f14 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004e14:	2318      	movs	r3, #24
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8004e18:	2117      	movs	r1, #23
 8004e1a:	187b      	adds	r3, r7, r1
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8004e20:	187b      	adds	r3, r7, r1
 8004e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8004e24:	2301      	movs	r3, #1
 8004e26:	425b      	negs	r3, r3
 8004e28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d044      	beq.n	8004eba <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <osThreadNew+0x6a>
        name = attr->name;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <osThreadNew+0x8e>
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b38      	cmp	r3, #56	; 0x38
 8004e56:	d804      	bhi.n	8004e62 <osThreadNew+0x8e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d001      	beq.n	8004e66 <osThreadNew+0x92>
        return (NULL);
 8004e62:	2300      	movs	r3, #0
 8004e64:	e057      	b.n	8004f16 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00e      	beq.n	8004e9c <osThreadNew+0xc8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2bbb      	cmp	r3, #187	; 0xbb
 8004e84:	d90a      	bls.n	8004e9c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <osThreadNew+0xc8>
        mem = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e010      	b.n	8004ebe <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10c      	bne.n	8004ebe <osThreadNew+0xea>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d108      	bne.n	8004ebe <osThreadNew+0xea>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d104      	bne.n	8004ebe <osThreadNew+0xea>
          mem = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	e001      	b.n	8004ebe <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d112      	bne.n	8004eea <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ecc:	68bd      	ldr	r5, [r7, #8]
 8004ece:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	9302      	str	r3, [sp, #8]
 8004ed6:	9201      	str	r2, [sp, #4]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	002b      	movs	r3, r5
 8004ede:	0022      	movs	r2, r4
 8004ee0:	f001 f915 	bl	800610e <xTaskCreateStatic>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	e014      	b.n	8004f14 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d111      	bne.n	8004f14 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68bc      	ldr	r4, [r7, #8]
 8004ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	2310      	movs	r3, #16
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	0023      	movs	r3, r4
 8004f06:	f001 f945 	bl	8006194 <xTaskCreate>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <osThreadNew+0x140>
          hTask = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f14:	693b      	ldr	r3, [r7, #16]
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b00c      	add	sp, #48	; 0x30
 8004f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	2000026c 	.word	0x2000026c

08004f24 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f2c:	f3ef 8305 	mrs	r3, IPSR
 8004f30:	613b      	str	r3, [r7, #16]
  return(result);
 8004f32:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <osDelay+0x30>
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <osDelay+0x4c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d103      	bne.n	8004f54 <osDelay+0x30>
    stat = osErrorISR;
 8004f4c:	2306      	movs	r3, #6
 8004f4e:	425b      	negs	r3, r3
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e008      	b.n	8004f66 <osDelay+0x42>
  }
  else {
    stat = osOK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <osDelay+0x42>
      vTaskDelay(ticks);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f001 fa63 	bl	800642c <vTaskDelay>
    }
  }

  return (stat);
 8004f66:	697b      	ldr	r3, [r7, #20]
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b006      	add	sp, #24
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	2000026c 	.word	0x2000026c

08004f74 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08c      	sub	sp, #48	; 0x30
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f84:	f3ef 8305 	mrs	r3, IPSR
 8004f88:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d000      	beq.n	8004f92 <osSemaphoreNew+0x1e>
 8004f90:	e08a      	b.n	80050a8 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f92:	f3ef 8310 	mrs	r3, PRIMASK
 8004f96:	617b      	str	r3, [r7, #20]
  return(result);
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <osSemaphoreNew+0x34>
 8004f9e:	4b45      	ldr	r3, [pc, #276]	; (80050b4 <osSemaphoreNew+0x140>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d100      	bne.n	8004fa8 <osSemaphoreNew+0x34>
 8004fa6:	e07f      	b.n	80050a8 <osSemaphoreNew+0x134>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d100      	bne.n	8004fb0 <osSemaphoreNew+0x3c>
 8004fae:	e07b      	b.n	80050a8 <osSemaphoreNew+0x134>
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d900      	bls.n	8004fba <osSemaphoreNew+0x46>
 8004fb8:	e076      	b.n	80050a8 <osSemaphoreNew+0x134>
    mem = -1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d015      	beq.n	8004ff2 <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <osSemaphoreNew+0x68>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b4f      	cmp	r3, #79	; 0x4f
 8004fd4:	d902      	bls.n	8004fdc <osSemaphoreNew+0x68>
        mem = 1;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	e00c      	b.n	8004ff6 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d108      	bne.n	8004ff6 <osSemaphoreNew+0x82>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <osSemaphoreNew+0x82>
          mem = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	623b      	str	r3, [r7, #32]
 8004ff0:	e001      	b.n	8004ff6 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	d055      	beq.n	80050a8 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d12b      	bne.n	800505a <osSemaphoreNew+0xe6>
        if (mem == 1) {
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10b      	bne.n	8005020 <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2203      	movs	r2, #3
 800500e:	9200      	str	r2, [sp, #0]
 8005010:	2200      	movs	r2, #0
 8005012:	2100      	movs	r1, #0
 8005014:	2001      	movs	r0, #1
 8005016:	f000 fa28 	bl	800546a <xQueueGenericCreateStatic>
 800501a:	0003      	movs	r3, r0
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
 800501e:	e006      	b.n	800502e <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005020:	2203      	movs	r2, #3
 8005022:	2100      	movs	r1, #0
 8005024:	2001      	movs	r0, #1
 8005026:	f000 fa6b 	bl	8005500 <xQueueGenericCreate>
 800502a:	0003      	movs	r3, r0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d027      	beq.n	8005084 <osSemaphoreNew+0x110>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d024      	beq.n	8005084 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800503a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800503c:	2300      	movs	r3, #0
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	f000 fb03 	bl	800564c <xQueueGenericSend>
 8005046:	0003      	movs	r3, r0
 8005048:	2b01      	cmp	r3, #1
 800504a:	d01b      	beq.n	8005084 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	0018      	movs	r0, r3
 8005050:	f000 fe88 	bl	8005d64 <vQueueDelete>
            hSemaphore = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
 8005058:	e014      	b.n	8005084 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d109      	bne.n	8005074 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	0018      	movs	r0, r3
 800506a:	f000 faa6 	bl	80055ba <xQueueCreateCountingSemaphoreStatic>
 800506e:	0003      	movs	r3, r0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	e007      	b.n	8005084 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	0011      	movs	r1, r2
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fac3 	bl	8005606 <xQueueCreateCountingSemaphore>
 8005080:	0003      	movs	r3, r0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00e      	beq.n	80050a8 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osSemaphoreNew+0x124>
          name = attr->name;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	e001      	b.n	800509c <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	0011      	movs	r1, r2
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 ffae 	bl	8006004 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050aa:	0018      	movs	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b00a      	add	sp, #40	; 0x28
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	2000026c 	.word	0x2000026c

080050b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80050d0:	2304      	movs	r3, #4
 80050d2:	425b      	negs	r3, r3
 80050d4:	61fb      	str	r3, [r7, #28]
 80050d6:	e043      	b.n	8005160 <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d8:	f3ef 8305 	mrs	r3, IPSR
 80050dc:	617b      	str	r3, [r7, #20]
  return(result);
 80050de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e4:	f3ef 8310 	mrs	r3, PRIMASK
 80050e8:	613b      	str	r3, [r7, #16]
  return(result);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d022      	beq.n	8005136 <osSemaphoreAcquire+0x7e>
 80050f0:	4b1e      	ldr	r3, [pc, #120]	; (800516c <osSemaphoreAcquire+0xb4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d11e      	bne.n	8005136 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 80050fe:	2304      	movs	r3, #4
 8005100:	425b      	negs	r3, r3
 8005102:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005104:	e02b      	b.n	800515e <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800510a:	230c      	movs	r3, #12
 800510c:	18fa      	adds	r2, r7, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2100      	movs	r1, #0
 8005112:	0018      	movs	r0, r3
 8005114:	f000 fdc3 	bl	8005c9e <xQueueReceiveFromISR>
 8005118:	0003      	movs	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d003      	beq.n	8005126 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 800511e:	2303      	movs	r3, #3
 8005120:	425b      	negs	r3, r3
 8005122:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005124:	e01b      	b.n	800515e <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <osSemaphoreAcquire+0xa6>
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <osSemaphoreAcquire+0xb8>)
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	0552      	lsls	r2, r2, #21
 8005132:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 8005134:	e013      	b.n	800515e <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	0011      	movs	r1, r2
 800513c:	0018      	movs	r0, r3
 800513e:	f000 fcd4 	bl	8005aea <xQueueSemaphoreTake>
 8005142:	0003      	movs	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d00b      	beq.n	8005160 <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 800514e:	2302      	movs	r3, #2
 8005150:	425b      	negs	r3, r3
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e004      	b.n	8005160 <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 8005156:	2303      	movs	r3, #3
 8005158:	425b      	negs	r3, r3
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e000      	b.n	8005160 <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 800515e:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 8005160:	69fb      	ldr	r3, [r7, #28]
}
 8005162:	0018      	movs	r0, r3
 8005164:	46bd      	mov	sp, r7
 8005166:	b008      	add	sp, #32
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	2000026c 	.word	0x2000026c
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800518a:	2304      	movs	r3, #4
 800518c:	425b      	negs	r3, r3
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e035      	b.n	80051fe <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005192:	f3ef 8305 	mrs	r3, IPSR
 8005196:	617b      	str	r3, [r7, #20]
  return(result);
 8005198:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	613b      	str	r3, [r7, #16]
  return(result);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01b      	beq.n	80051e2 <osSemaphoreRelease+0x6e>
 80051aa:	4b17      	ldr	r3, [pc, #92]	; (8005208 <osSemaphoreRelease+0x94>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d117      	bne.n	80051e2 <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051b6:	230c      	movs	r3, #12
 80051b8:	18fa      	adds	r2, r7, r3
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f000 fb79 	bl	80058b6 <xQueueGiveFromISR>
 80051c4:	0003      	movs	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d003      	beq.n	80051d2 <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 80051ca:	2303      	movs	r3, #3
 80051cc:	425b      	negs	r3, r3
 80051ce:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051d0:	e014      	b.n	80051fc <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <osSemaphoreRelease+0x88>
 80051d8:	4b0c      	ldr	r3, [pc, #48]	; (800520c <osSemaphoreRelease+0x98>)
 80051da:	2280      	movs	r2, #128	; 0x80
 80051dc:	0552      	lsls	r2, r2, #21
 80051de:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051e0:	e00c      	b.n	80051fc <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051e2:	69b8      	ldr	r0, [r7, #24]
 80051e4:	2300      	movs	r3, #0
 80051e6:	2200      	movs	r2, #0
 80051e8:	2100      	movs	r1, #0
 80051ea:	f000 fa2f 	bl	800564c <xQueueGenericSend>
 80051ee:	0003      	movs	r3, r0
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d004      	beq.n	80051fe <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 80051f4:	2303      	movs	r3, #3
 80051f6:	425b      	negs	r3, r3
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	e000      	b.n	80051fe <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051fc:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 80051fe:	69fb      	ldr	r3, [r7, #28]
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b008      	add	sp, #32
 8005206:	bd80      	pop	{r7, pc}
 8005208:	2000026c 	.word	0x2000026c
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a06      	ldr	r2, [pc, #24]	; (8005238 <vApplicationGetIdleTaskMemory+0x28>)
 8005220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4a05      	ldr	r2, [pc, #20]	; (800523c <vApplicationGetIdleTaskMemory+0x2c>)
 8005226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2280      	movs	r2, #128	; 0x80
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	46bd      	mov	sp, r7
 8005232:	b004      	add	sp, #16
 8005234:	bd80      	pop	{r7, pc}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	20000270 	.word	0x20000270
 800523c:	2000032c 	.word	0x2000032c

08005240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a06      	ldr	r2, [pc, #24]	; (8005268 <vApplicationGetTimerTaskMemory+0x28>)
 8005250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4a05      	ldr	r2, [pc, #20]	; (800526c <vApplicationGetTimerTaskMemory+0x2c>)
 8005256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2280      	movs	r2, #128	; 0x80
 800525c:	0052      	lsls	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}
 8005268:	2000052c 	.word	0x2000052c
 800526c:	200005e8 	.word	0x200005e8

08005270 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3308      	adds	r3, #8
 800527c:	001a      	movs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	4252      	negs	r2, r2
 8005288:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3308      	adds	r3, #8
 800528e:	001a      	movs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3308      	adds	r3, #8
 8005298:	001a      	movs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}

080052ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b002      	add	sp, #8
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}

08005306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	3301      	adds	r3, #1
 800531a:	d103      	bne.n	8005324 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e00c      	b.n	800533e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3308      	adds	r3, #8
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e002      	b.n	8005332 <vListInsert+0x2c>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d2f6      	bcs.n	800532c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b004      	add	sp, #16
 8005370:	bd80      	pop	{r7, pc}

08005372 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6892      	ldr	r2, [r2, #8]
 8005388:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6852      	ldr	r2, [r2, #4]
 8005392:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d103      	bne.n	80053a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
}
 80053ba:	0018      	movs	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	b004      	add	sp, #16
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xQueueGenericReset+0x18>
 80053d6:	b672      	cpsid	i
 80053d8:	e7fe      	b.n	80053d8 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80053da:	f002 f969 	bl	80076b0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	434b      	muls	r3, r1
 80053ec:	18d2      	adds	r2, r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	1e59      	subs	r1, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	434b      	muls	r3, r1
 8005410:	18d2      	adds	r2, r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2244      	movs	r2, #68	; 0x44
 800541a:	21ff      	movs	r1, #255	; 0xff
 800541c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2245      	movs	r2, #69	; 0x45
 8005422:	21ff      	movs	r1, #255	; 0xff
 8005424:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10d      	bne.n	8005448 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d013      	beq.n	800545c <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3310      	adds	r3, #16
 8005438:	0018      	movs	r0, r3
 800543a:	f001 fa73 	bl	8006924 <xTaskRemoveFromEventList>
 800543e:	1e03      	subs	r3, r0, #0
 8005440:	d00c      	beq.n	800545c <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005442:	f002 f925 	bl	8007690 <vPortYield>
 8005446:	e009      	b.n	800545c <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3310      	adds	r3, #16
 800544c:	0018      	movs	r0, r3
 800544e:	f7ff ff0f 	bl	8005270 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3324      	adds	r3, #36	; 0x24
 8005456:	0018      	movs	r0, r3
 8005458:	f7ff ff0a 	bl	8005270 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800545c:	f002 f93a 	bl	80076d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005460:	2301      	movs	r3, #1
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}

0800546a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800546a:	b590      	push	{r4, r7, lr}
 800546c:	b089      	sub	sp, #36	; 0x24
 800546e:	af02      	add	r7, sp, #8
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <xQueueGenericCreateStatic+0x18>
 800547e:	b672      	cpsid	i
 8005480:	e7fe      	b.n	8005480 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <xQueueGenericCreateStatic+0x22>
 8005488:	b672      	cpsid	i
 800548a:	e7fe      	b.n	800548a <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <xQueueGenericCreateStatic+0x2e>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <xQueueGenericCreateStatic+0x32>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <xQueueGenericCreateStatic+0x34>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <xQueueGenericCreateStatic+0x3c>
 80054a2:	b672      	cpsid	i
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <xQueueGenericCreateStatic+0x48>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <xQueueGenericCreateStatic+0x4c>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <xQueueGenericCreateStatic+0x4e>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <xQueueGenericCreateStatic+0x56>
 80054bc:	b672      	cpsid	i
 80054be:	e7fe      	b.n	80054be <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054c0:	2350      	movs	r3, #80	; 0x50
 80054c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b50      	cmp	r3, #80	; 0x50
 80054c8:	d001      	beq.n	80054ce <xQueueGenericCreateStatic+0x64>
 80054ca:	b672      	cpsid	i
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00e      	beq.n	80054f6 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2246      	movs	r2, #70	; 0x46
 80054dc:	2101      	movs	r1, #1
 80054de:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054e0:	2328      	movs	r3, #40	; 0x28
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	781c      	ldrb	r4, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f000 f83b 	bl	800556c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054f6:	697b      	ldr	r3, [r7, #20]
	}
 80054f8:	0018      	movs	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	b007      	add	sp, #28
 80054fe:	bd90      	pop	{r4, r7, pc}

08005500 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005500:	b590      	push	{r4, r7, lr}
 8005502:	b08b      	sub	sp, #44	; 0x2c
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	1dfb      	adds	r3, r7, #7
 800550c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <xQueueGenericCreate+0x18>
 8005514:	b672      	cpsid	i
 8005516:	e7fe      	b.n	8005516 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e003      	b.n	800552c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4353      	muls	r3, r2
 800552a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	3350      	adds	r3, #80	; 0x50
 8005530:	0018      	movs	r0, r3
 8005532:	f002 f955 	bl	80077e0 <pvPortMalloc>
 8005536:	0003      	movs	r3, r0
 8005538:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	3350      	adds	r3, #80	; 0x50
 8005544:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2246      	movs	r2, #70	; 0x46
 800554a:	2100      	movs	r1, #0
 800554c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800554e:	1dfb      	adds	r3, r7, #7
 8005550:	781c      	ldrb	r4, [r3, #0]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	0023      	movs	r3, r4
 800555e:	f000 f805 	bl	800556c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005562:	69bb      	ldr	r3, [r7, #24]
	}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b009      	add	sp, #36	; 0x24
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	001a      	movs	r2, r3
 800557a:	1cfb      	adds	r3, r7, #3
 800557c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e002      	b.n	8005592 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2101      	movs	r1, #1
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff ff0d 	bl	80053c2 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	1cfa      	adds	r2, r7, #3
 80055ac:	214c      	movs	r1, #76	; 0x4c
 80055ae:	7812      	ldrb	r2, [r2, #0]
 80055b0:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b004      	add	sp, #16
 80055b8:	bd80      	pop	{r7, pc}

080055ba <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b088      	sub	sp, #32
 80055be:	af02      	add	r7, sp, #8
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <xQueueCreateCountingSemaphoreStatic+0x16>
 80055cc:	b672      	cpsid	i
 80055ce:	e7fe      	b.n	80055ce <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d901      	bls.n	80055dc <xQueueCreateCountingSemaphoreStatic+0x22>
 80055d8:	b672      	cpsid	i
 80055da:	e7fe      	b.n	80055da <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	9200      	str	r2, [sp, #0]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	f7ff ff3f 	bl	800546a <xQueueGenericCreateStatic>
 80055ec:	0003      	movs	r3, r0
 80055ee:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80055fc:	697b      	ldr	r3, [r7, #20]
	}
 80055fe:	0018      	movs	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	b006      	add	sp, #24
 8005604:	bd80      	pop	{r7, pc}

08005606 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <xQueueCreateCountingSemaphore+0x14>
 8005616:	b672      	cpsid	i
 8005618:	e7fe      	b.n	8005618 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	429a      	cmp	r2, r3
 8005620:	d901      	bls.n	8005626 <xQueueCreateCountingSemaphore+0x20>
 8005622:	b672      	cpsid	i
 8005624:	e7fe      	b.n	8005624 <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	2100      	movs	r1, #0
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff ff67 	bl	8005500 <xQueueGenericCreate>
 8005632:	0003      	movs	r3, r0
 8005634:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005642:	68fb      	ldr	r3, [r7, #12]
	}
 8005644:	0018      	movs	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}

0800564c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <xQueueGenericSend+0x20>
 8005668:	b672      	cpsid	i
 800566a:	e7fe      	b.n	800566a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <xQueueGenericSend+0x2e>
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueGenericSend+0x32>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueGenericSend+0x34>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <xQueueGenericSend+0x3c>
 8005684:	b672      	cpsid	i
 8005686:	e7fe      	b.n	8005686 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <xQueueGenericSend+0x4a>
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <xQueueGenericSend+0x4e>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSend+0x50>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <xQueueGenericSend+0x58>
 80056a0:	b672      	cpsid	i
 80056a2:	e7fe      	b.n	80056a2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a4:	f001 fadc 	bl	8006c60 <xTaskGetSchedulerState>
 80056a8:	1e03      	subs	r3, r0, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueGenericSend+0x66>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueGenericSend+0x6a>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueGenericSend+0x6c>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0x74>
 80056bc:	b672      	cpsid	i
 80056be:	e7fe      	b.n	80056be <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056c0:	f001 fff6 	bl	80076b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <xQueueGenericSend+0x8a>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d11e      	bne.n	8005714 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 fb73 	bl	8005dc8 <prvCopyDataToQueue>
 80056e2:	0003      	movs	r3, r0
 80056e4:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	3324      	adds	r3, #36	; 0x24
 80056f2:	0018      	movs	r0, r3
 80056f4:	f001 f916 	bl	8006924 <xTaskRemoveFromEventList>
 80056f8:	1e03      	subs	r3, r0, #0
 80056fa:	d007      	beq.n	800570c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056fc:	f001 ffc8 	bl	8007690 <vPortYield>
 8005700:	e004      	b.n	800570c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005708:	f001 ffc2 	bl	8007690 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800570c:	f001 ffe2 	bl	80076d4 <vPortExitCritical>
				return pdPASS;
 8005710:	2301      	movs	r3, #1
 8005712:	e05b      	b.n	80057cc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800571a:	f001 ffdb 	bl	80076d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800571e:	2300      	movs	r3, #0
 8005720:	e054      	b.n	80057cc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005728:	2314      	movs	r3, #20
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	0018      	movs	r0, r3
 800572e:	f001 f955 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005736:	f001 ffcd 	bl	80076d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800573a:	f000 fefb 	bl	8006534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800573e:	f001 ffb7 	bl	80076b0 <vPortEnterCritical>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	2244      	movs	r2, #68	; 0x44
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b25b      	sxtb	r3, r3
 800574a:	3301      	adds	r3, #1
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x10a>
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	2244      	movs	r2, #68	; 0x44
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2245      	movs	r2, #69	; 0x45
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	b25b      	sxtb	r3, r3
 800575e:	3301      	adds	r3, #1
 8005760:	d103      	bne.n	800576a <xQueueGenericSend+0x11e>
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	2245      	movs	r2, #69	; 0x45
 8005766:	2100      	movs	r1, #0
 8005768:	5499      	strb	r1, [r3, r2]
 800576a:	f001 ffb3 	bl	80076d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800576e:	1d3a      	adds	r2, r7, #4
 8005770:	2314      	movs	r3, #20
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	0011      	movs	r1, r2
 8005776:	0018      	movs	r0, r3
 8005778:	f001 f944 	bl	8006a04 <xTaskCheckForTimeOut>
 800577c:	1e03      	subs	r3, r0, #0
 800577e:	d11e      	bne.n	80057be <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	0018      	movs	r0, r3
 8005784:	f000 fc25 	bl	8005fd2 <prvIsQueueFull>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d011      	beq.n	80057b0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	3310      	adds	r3, #16
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	0011      	movs	r1, r2
 8005794:	0018      	movs	r0, r3
 8005796:	f001 f881 	bl	800689c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	0018      	movs	r0, r3
 800579e:	f000 fba4 	bl	8005eea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057a2:	f000 fed3 	bl	800654c <xTaskResumeAll>
 80057a6:	1e03      	subs	r3, r0, #0
 80057a8:	d18a      	bne.n	80056c0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80057aa:	f001 ff71 	bl	8007690 <vPortYield>
 80057ae:	e787      	b.n	80056c0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 fb99 	bl	8005eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057b8:	f000 fec8 	bl	800654c <xTaskResumeAll>
 80057bc:	e780      	b.n	80056c0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f000 fb92 	bl	8005eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c6:	f000 fec1 	bl	800654c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057ca:	2300      	movs	r3, #0
		}
	}
}
 80057cc:	0018      	movs	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b00a      	add	sp, #40	; 0x28
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057d4:	b590      	push	{r4, r7, lr}
 80057d6:	b089      	sub	sp, #36	; 0x24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <xQueueGenericSendFromISR+0x1c>
 80057ec:	b672      	cpsid	i
 80057ee:	e7fe      	b.n	80057ee <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <xQueueGenericSendFromISR+0x2a>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <xQueueGenericSendFromISR+0x2e>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <xQueueGenericSendFromISR+0x30>
 8005802:	2300      	movs	r3, #0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <xQueueGenericSendFromISR+0x38>
 8005808:	b672      	cpsid	i
 800580a:	e7fe      	b.n	800580a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d103      	bne.n	800581a <xQueueGenericSendFromISR+0x46>
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <xQueueGenericSendFromISR+0x4a>
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <xQueueGenericSendFromISR+0x4c>
 800581e:	2300      	movs	r3, #0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <xQueueGenericSendFromISR+0x54>
 8005824:	b672      	cpsid	i
 8005826:	e7fe      	b.n	8005826 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005828:	f001 ff6c 	bl	8007704 <ulSetInterruptMaskFromISR>
 800582c:	0003      	movs	r3, r0
 800582e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <xQueueGenericSendFromISR+0x6e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d12e      	bne.n	80058a0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005842:	2413      	movs	r4, #19
 8005844:	193b      	adds	r3, r7, r4
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	2145      	movs	r1, #69	; 0x45
 800584a:	5c52      	ldrb	r2, [r2, r1]
 800584c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	0018      	movs	r0, r3
 8005856:	f000 fab7 	bl	8005dc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800585a:	193b      	adds	r3, r7, r4
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b25b      	sxtb	r3, r3
 8005860:	3301      	adds	r3, #1
 8005862:	d111      	bne.n	8005888 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d016      	beq.n	800589a <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	3324      	adds	r3, #36	; 0x24
 8005870:	0018      	movs	r0, r3
 8005872:	f001 f857 	bl	8006924 <xTaskRemoveFromEventList>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d00f      	beq.n	800589a <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00c      	beq.n	800589a <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e008      	b.n	800589a <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005888:	2313      	movs	r3, #19
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	b2db      	uxtb	r3, r3
 8005892:	b259      	sxtb	r1, r3
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	2245      	movs	r2, #69	; 0x45
 8005898:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800589a:	2301      	movs	r3, #1
 800589c:	61fb      	str	r3, [r7, #28]
		{
 800589e:	e001      	b.n	80058a4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	0018      	movs	r0, r3
 80058a8:	f001 ff32 	bl	8007710 <vClearInterruptMaskFromISR>

	return xReturn;
 80058ac:	69fb      	ldr	r3, [r7, #28]
}
 80058ae:	0018      	movs	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b009      	add	sp, #36	; 0x24
 80058b4:	bd90      	pop	{r4, r7, pc}

080058b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <xQueueGiveFromISR+0x18>
 80058ca:	b672      	cpsid	i
 80058cc:	e7fe      	b.n	80058cc <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <xQueueGiveFromISR+0x24>
 80058d6:	b672      	cpsid	i
 80058d8:	e7fe      	b.n	80058d8 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <xQueueGiveFromISR+0x34>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGiveFromISR+0x38>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGiveFromISR+0x3a>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <xQueueGiveFromISR+0x42>
 80058f4:	b672      	cpsid	i
 80058f6:	e7fe      	b.n	80058f6 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f8:	f001 ff04 	bl	8007704 <ulSetInterruptMaskFromISR>
 80058fc:	0003      	movs	r3, r0
 80058fe:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d22c      	bcs.n	800596a <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005910:	200f      	movs	r0, #15
 8005912:	183b      	adds	r3, r7, r0
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	2145      	movs	r1, #69	; 0x45
 8005918:	5c52      	ldrb	r2, [r2, r1]
 800591a:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005924:	183b      	adds	r3, r7, r0
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b25b      	sxtb	r3, r3
 800592a:	3301      	adds	r3, #1
 800592c:	d111      	bne.n	8005952 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	3324      	adds	r3, #36	; 0x24
 800593a:	0018      	movs	r0, r3
 800593c:	f000 fff2 	bl	8006924 <xTaskRemoveFromEventList>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d00f      	beq.n	8005964 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e008      	b.n	8005964 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005952:	230f      	movs	r3, #15
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	b2db      	uxtb	r3, r3
 800595c:	b259      	sxtb	r1, r3
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2245      	movs	r2, #69	; 0x45
 8005962:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005964:	2301      	movs	r3, #1
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	e001      	b.n	800596e <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	0018      	movs	r0, r3
 8005972:	f001 fecd 	bl	8007710 <vClearInterruptMaskFromISR>

	return xReturn;
 8005976:	69fb      	ldr	r3, [r7, #28]
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b008      	add	sp, #32
 800597e:	bd80      	pop	{r7, pc}

08005980 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <xQueueReceive+0x1e>
 800599a:	b672      	cpsid	i
 800599c:	e7fe      	b.n	800599c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <xQueueReceive+0x2c>
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <xQueueReceive+0x30>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <xQueueReceive+0x32>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <xQueueReceive+0x3a>
 80059b6:	b672      	cpsid	i
 80059b8:	e7fe      	b.n	80059b8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ba:	f001 f951 	bl	8006c60 <xTaskGetSchedulerState>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d102      	bne.n	80059c8 <xQueueReceive+0x48>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <xQueueReceive+0x4c>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <xQueueReceive+0x4e>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <xQueueReceive+0x56>
 80059d2:	b672      	cpsid	i
 80059d4:	e7fe      	b.n	80059d4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80059d6:	f001 fe6b 	bl	80076b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01a      	beq.n	8005a1c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fa56 	bl	8005e9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	1e5a      	subs	r2, r3, #1
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	3310      	adds	r3, #16
 8005a06:	0018      	movs	r0, r3
 8005a08:	f000 ff8c 	bl	8006924 <xTaskRemoveFromEventList>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d001      	beq.n	8005a14 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a10:	f001 fe3e 	bl	8007690 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a14:	f001 fe5e 	bl	80076d4 <vPortExitCritical>
				return pdPASS;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e062      	b.n	8005ae2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a22:	f001 fe57 	bl	80076d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e05b      	b.n	8005ae2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a30:	2314      	movs	r3, #20
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 ffd1 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a3e:	f001 fe49 	bl	80076d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a42:	f000 fd77 	bl	8006534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a46:	f001 fe33 	bl	80076b0 <vPortEnterCritical>
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	2244      	movs	r2, #68	; 0x44
 8005a4e:	5c9b      	ldrb	r3, [r3, r2]
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	3301      	adds	r3, #1
 8005a54:	d103      	bne.n	8005a5e <xQueueReceive+0xde>
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2244      	movs	r2, #68	; 0x44
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	5499      	strb	r1, [r3, r2]
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	2245      	movs	r2, #69	; 0x45
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	b25b      	sxtb	r3, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	d103      	bne.n	8005a72 <xQueueReceive+0xf2>
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	2245      	movs	r2, #69	; 0x45
 8005a6e:	2100      	movs	r1, #0
 8005a70:	5499      	strb	r1, [r3, r2]
 8005a72:	f001 fe2f 	bl	80076d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a76:	1d3a      	adds	r2, r7, #4
 8005a78:	2314      	movs	r3, #20
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	0011      	movs	r1, r2
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f000 ffc0 	bl	8006a04 <xTaskCheckForTimeOut>
 8005a84:	1e03      	subs	r3, r0, #0
 8005a86:	d11e      	bne.n	8005ac6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 fa8b 	bl	8005fa6 <prvIsQueueEmpty>
 8005a90:	1e03      	subs	r3, r0, #0
 8005a92:	d011      	beq.n	8005ab8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	0011      	movs	r1, r2
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	f000 fefd 	bl	800689c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 fa20 	bl	8005eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aaa:	f000 fd4f 	bl	800654c <xTaskResumeAll>
 8005aae:	1e03      	subs	r3, r0, #0
 8005ab0:	d191      	bne.n	80059d6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005ab2:	f001 fded 	bl	8007690 <vPortYield>
 8005ab6:	e78e      	b.n	80059d6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fa15 	bl	8005eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac0:	f000 fd44 	bl	800654c <xTaskResumeAll>
 8005ac4:	e787      	b.n	80059d6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f000 fa0e 	bl	8005eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ace:	f000 fd3d 	bl	800654c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f000 fa66 	bl	8005fa6 <prvIsQueueEmpty>
 8005ada:	1e03      	subs	r3, r0, #0
 8005adc:	d100      	bne.n	8005ae0 <xQueueReceive+0x160>
 8005ade:	e77a      	b.n	80059d6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b00a      	add	sp, #40	; 0x28
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b08a      	sub	sp, #40	; 0x28
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <xQueueSemaphoreTake+0x20>
 8005b06:	b672      	cpsid	i
 8005b08:	e7fe      	b.n	8005b08 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <xQueueSemaphoreTake+0x2c>
 8005b12:	b672      	cpsid	i
 8005b14:	e7fe      	b.n	8005b14 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b16:	f001 f8a3 	bl	8006c60 <xTaskGetSchedulerState>
 8005b1a:	1e03      	subs	r3, r0, #0
 8005b1c:	d102      	bne.n	8005b24 <xQueueSemaphoreTake+0x3a>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <xQueueSemaphoreTake+0x3e>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <xQueueSemaphoreTake+0x40>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <xQueueSemaphoreTake+0x48>
 8005b2e:	b672      	cpsid	i
 8005b30:	e7fe      	b.n	8005b30 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b32:	f001 fdbd 	bl	80076b0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01d      	beq.n	8005b7e <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	1e5a      	subs	r2, r3, #1
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d104      	bne.n	8005b5c <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005b52:	f001 f9df 	bl	8006f14 <pvTaskIncrementMutexHeldCount>
 8005b56:	0002      	movs	r2, r0
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	3310      	adds	r3, #16
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 fedb 	bl	8006924 <xTaskRemoveFromEventList>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d001      	beq.n	8005b76 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b72:	f001 fd8d 	bl	8007690 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b76:	f001 fdad 	bl	80076d4 <vPortExitCritical>
				return pdPASS;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e08b      	b.n	8005c96 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d108      	bne.n	8005b96 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <xQueueSemaphoreTake+0xa4>
 8005b8a:	b672      	cpsid	i
 8005b8c:	e7fe      	b.n	8005b8c <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b8e:	f001 fda1 	bl	80076d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b92:	2300      	movs	r3, #0
 8005b94:	e07f      	b.n	8005c96 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f000 ff1b 	bl	80069dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005baa:	f001 fd93 	bl	80076d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bae:	f000 fcc1 	bl	8006534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb2:	f001 fd7d 	bl	80076b0 <vPortEnterCritical>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	2244      	movs	r2, #68	; 0x44
 8005bba:	5c9b      	ldrb	r3, [r3, r2]
 8005bbc:	b25b      	sxtb	r3, r3
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	d103      	bne.n	8005bca <xQueueSemaphoreTake+0xe0>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	2244      	movs	r2, #68	; 0x44
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	5499      	strb	r1, [r3, r2]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	2245      	movs	r2, #69	; 0x45
 8005bce:	5c9b      	ldrb	r3, [r3, r2]
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	d103      	bne.n	8005bde <xQueueSemaphoreTake+0xf4>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2245      	movs	r2, #69	; 0x45
 8005bda:	2100      	movs	r1, #0
 8005bdc:	5499      	strb	r1, [r3, r2]
 8005bde:	f001 fd79 	bl	80076d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be2:	003a      	movs	r2, r7
 8005be4:	230c      	movs	r3, #12
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	0011      	movs	r1, r2
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 ff0a 	bl	8006a04 <xTaskCheckForTimeOut>
 8005bf0:	1e03      	subs	r3, r0, #0
 8005bf2:	d12e      	bne.n	8005c52 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9d5 	bl	8005fa6 <prvIsQueueEmpty>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d021      	beq.n	8005c44 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8005c08:	f001 fd52 	bl	80076b0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f001 f841 	bl	8006c98 <xTaskPriorityInherit>
 8005c16:	0003      	movs	r3, r0
 8005c18:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8005c1a:	f001 fd5b 	bl	80076d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	3324      	adds	r3, #36	; 0x24
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	0011      	movs	r1, r2
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 fe38 	bl	800689c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f95b 	bl	8005eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c34:	f000 fc8a 	bl	800654c <xTaskResumeAll>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d000      	beq.n	8005c3e <xQueueSemaphoreTake+0x154>
 8005c3c:	e779      	b.n	8005b32 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8005c3e:	f001 fd27 	bl	8007690 <vPortYield>
 8005c42:	e776      	b.n	8005b32 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	0018      	movs	r0, r3
 8005c48:	f000 f94f 	bl	8005eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c4c:	f000 fc7e 	bl	800654c <xTaskResumeAll>
 8005c50:	e76f      	b.n	8005b32 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f948 	bl	8005eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c5a:	f000 fc77 	bl	800654c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f9a0 	bl	8005fa6 <prvIsQueueEmpty>
 8005c66:	1e03      	subs	r3, r0, #0
 8005c68:	d100      	bne.n	8005c6c <xQueueSemaphoreTake+0x182>
 8005c6a:	e762      	b.n	8005b32 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d010      	beq.n	8005c94 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8005c72:	f001 fd1d 	bl	80076b0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 f88f 	bl	8005d9c <prvGetDisinheritPriorityAfterTimeout>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	0011      	movs	r1, r2
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f001 f8ce 	bl	8006e2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c90:	f001 fd20 	bl	80076d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005c96:	0018      	movs	r0, r3
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b00a      	add	sp, #40	; 0x28
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c9e:	b590      	push	{r4, r7, lr}
 8005ca0:	b08b      	sub	sp, #44	; 0x2c
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xQueueReceiveFromISR+0x1a>
 8005cb4:	b672      	cpsid	i
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <xQueueReceiveFromISR+0x28>
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <xQueueReceiveFromISR+0x2c>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueReceiveFromISR+0x2e>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <xQueueReceiveFromISR+0x36>
 8005cd0:	b672      	cpsid	i
 8005cd2:	e7fe      	b.n	8005cd2 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cd4:	f001 fd16 	bl	8007704 <ulSetInterruptMaskFromISR>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d032      	beq.n	8005d4e <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ce8:	2417      	movs	r4, #23
 8005cea:	193b      	adds	r3, r7, r4
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	2144      	movs	r1, #68	; 0x44
 8005cf0:	5c52      	ldrb	r2, [r2, r1]
 8005cf2:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	0011      	movs	r1, r2
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f8cf 	bl	8005e9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	1e5a      	subs	r2, r3, #1
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d08:	193b      	adds	r3, r7, r4
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	3301      	adds	r3, #1
 8005d10:	d111      	bne.n	8005d36 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d016      	beq.n	8005d48 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 fe00 	bl	8006924 <xTaskRemoveFromEventList>
 8005d24:	1e03      	subs	r3, r0, #0
 8005d26:	d00f      	beq.n	8005d48 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e008      	b.n	8005d48 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d36:	2317      	movs	r3, #23
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	b259      	sxtb	r1, r3
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	2244      	movs	r2, #68	; 0x44
 8005d46:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4c:	e001      	b.n	8005d52 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f001 fcdb 	bl	8007710 <vClearInterruptMaskFromISR>

	return xReturn;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b00b      	add	sp, #44	; 0x2c
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <vQueueDelete+0x16>
 8005d76:	b672      	cpsid	i
 8005d78:	e7fe      	b.n	8005d78 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f000 f969 	bl	8006054 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2246      	movs	r2, #70	; 0x46
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f001 fdcc 	bl	800792c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2238      	movs	r2, #56	; 0x38
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e001      	b.n	8005dbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b004      	add	sp, #16
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10e      	bne.n	8005e04 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d14e      	bne.n	8005e8c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 ffbe 	bl	8006d74 <xTaskPriorityDisinherit>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	e043      	b.n	8005e8c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d119      	bne.n	8005e3e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6898      	ldr	r0, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	0019      	movs	r1, r3
 8005e16:	f001 feb5 	bl	8007b84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	18d2      	adds	r2, r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d32b      	bcc.n	8005e8c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	e026      	b.n	8005e8c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68d8      	ldr	r0, [r3, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	0019      	movs	r1, r3
 8005e4a:	f001 fe9b 	bl	8007b84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	425b      	negs	r3, r3
 8005e58:	18d2      	adds	r2, r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d207      	bcs.n	8005e7a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	425b      	negs	r3, r3
 8005e74:	18d2      	adds	r2, r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d105      	bne.n	8005e8c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e94:	697b      	ldr	r3, [r7, #20]
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b006      	add	sp, #24
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d018      	beq.n	8005ee2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	18d2      	adds	r2, r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d303      	bcc.n	8005ed2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f001 fe51 	bl	8007b84 <memcpy>
	}
}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	b002      	add	sp, #8
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ef2:	f001 fbdd 	bl	80076b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ef6:	230f      	movs	r3, #15
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	2145      	movs	r1, #69	; 0x45
 8005efe:	5c52      	ldrb	r2, [r2, r1]
 8005f00:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f02:	e013      	b.n	8005f2c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 fd07 	bl	8006924 <xTaskRemoveFromEventList>
 8005f16:	1e03      	subs	r3, r0, #0
 8005f18:	d001      	beq.n	8005f1e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f1a:	f000 fdc3 	bl	8006aa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f1e:	210f      	movs	r1, #15
 8005f20:	187b      	adds	r3, r7, r1
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	187b      	adds	r3, r7, r1
 8005f2a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f2c:	230f      	movs	r3, #15
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dce5      	bgt.n	8005f04 <prvUnlockQueue+0x1a>
 8005f38:	e000      	b.n	8005f3c <prvUnlockQueue+0x52>
					break;
 8005f3a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2245      	movs	r2, #69	; 0x45
 8005f40:	21ff      	movs	r1, #255	; 0xff
 8005f42:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005f44:	f001 fbc6 	bl	80076d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f48:	f001 fbb2 	bl	80076b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f4c:	230e      	movs	r3, #14
 8005f4e:	18fb      	adds	r3, r7, r3
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	2144      	movs	r1, #68	; 0x44
 8005f54:	5c52      	ldrb	r2, [r2, r1]
 8005f56:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f58:	e013      	b.n	8005f82 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3310      	adds	r3, #16
 8005f66:	0018      	movs	r0, r3
 8005f68:	f000 fcdc 	bl	8006924 <xTaskRemoveFromEventList>
 8005f6c:	1e03      	subs	r3, r0, #0
 8005f6e:	d001      	beq.n	8005f74 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005f70:	f000 fd98 	bl	8006aa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f74:	210e      	movs	r1, #14
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	187b      	adds	r3, r7, r1
 8005f80:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f82:	230e      	movs	r3, #14
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dce5      	bgt.n	8005f5a <prvUnlockQueue+0x70>
 8005f8e:	e000      	b.n	8005f92 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005f90:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2244      	movs	r2, #68	; 0x44
 8005f96:	21ff      	movs	r1, #255	; 0xff
 8005f98:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005f9a:	f001 fb9b 	bl	80076d4 <vPortExitCritical>
}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b004      	add	sp, #16
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fae:	f001 fb7f 	bl	80076b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	e001      	b.n	8005fc4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fc4:	f001 fb86 	bl	80076d4 <vPortExitCritical>

	return xReturn;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b004      	add	sp, #16
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fda:	f001 fb69 	bl	80076b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d102      	bne.n	8005ff0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fea:	2301      	movs	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e001      	b.n	8005ff4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ff4:	f001 fb6e 	bl	80076d4 <vPortExitCritical>

	return xReturn;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
}
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b004      	add	sp, #16
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	e015      	b.n	8006040 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006014:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <vQueueAddToRegistry+0x4c>)
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	00d2      	lsls	r2, r2, #3
 800601a:	58d3      	ldr	r3, [r2, r3]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10c      	bne.n	800603a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <vQueueAddToRegistry+0x4c>)
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	00d2      	lsls	r2, r2, #3
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <vQueueAddToRegistry+0x4c>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	18d3      	adds	r3, r2, r3
 8006032:	3304      	adds	r3, #4
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006038:	e006      	b.n	8006048 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3301      	adds	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b07      	cmp	r3, #7
 8006044:	d9e6      	bls.n	8006014 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b004      	add	sp, #16
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200009e8 	.word	0x200009e8

08006054 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e018      	b.n	8006094 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006062:	4a10      	ldr	r2, [pc, #64]	; (80060a4 <vQueueUnregisterQueue+0x50>)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	18d3      	adds	r3, r2, r3
 800606a:	3304      	adds	r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d10c      	bne.n	800608e <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006074:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <vQueueUnregisterQueue+0x50>)
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	00d2      	lsls	r2, r2, #3
 800607a:	2100      	movs	r1, #0
 800607c:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800607e:	4a09      	ldr	r2, [pc, #36]	; (80060a4 <vQueueUnregisterQueue+0x50>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	18d3      	adds	r3, r2, r3
 8006086:	3304      	adds	r3, #4
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
				break;
 800608c:	e006      	b.n	800609c <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b07      	cmp	r3, #7
 8006098:	d9e3      	bls.n	8006062 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b004      	add	sp, #16
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200009e8 	.word	0x200009e8

080060a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060b8:	f001 fafa 	bl	80076b0 <vPortEnterCritical>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2244      	movs	r2, #68	; 0x44
 80060c0:	5c9b      	ldrb	r3, [r3, r2]
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	3301      	adds	r3, #1
 80060c6:	d103      	bne.n	80060d0 <vQueueWaitForMessageRestricted+0x28>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2244      	movs	r2, #68	; 0x44
 80060cc:	2100      	movs	r1, #0
 80060ce:	5499      	strb	r1, [r3, r2]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2245      	movs	r2, #69	; 0x45
 80060d4:	5c9b      	ldrb	r3, [r3, r2]
 80060d6:	b25b      	sxtb	r3, r3
 80060d8:	3301      	adds	r3, #1
 80060da:	d103      	bne.n	80060e4 <vQueueWaitForMessageRestricted+0x3c>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2245      	movs	r2, #69	; 0x45
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]
 80060e4:	f001 faf6 	bl	80076d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	3324      	adds	r3, #36	; 0x24
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 fbed 	bl	80068d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	0018      	movs	r0, r3
 8006102:	f7ff fef2 	bl	8005eea <prvUnlockQueue>
	}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	b006      	add	sp, #24
 800610c:	bd80      	pop	{r7, pc}

0800610e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800610e:	b590      	push	{r4, r7, lr}
 8006110:	b08d      	sub	sp, #52	; 0x34
 8006112:	af04      	add	r7, sp, #16
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xTaskCreateStatic+0x18>
 8006122:	b672      	cpsid	i
 8006124:	e7fe      	b.n	8006124 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <xTaskCreateStatic+0x22>
 800612c:	b672      	cpsid	i
 800612e:	e7fe      	b.n	800612e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006130:	23bc      	movs	r3, #188	; 0xbc
 8006132:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2bbc      	cmp	r3, #188	; 0xbc
 8006138:	d001      	beq.n	800613e <xTaskCreateStatic+0x30>
 800613a:	b672      	cpsid	i
 800613c:	e7fe      	b.n	800613c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <xTaskCreateStatic+0x78>
 8006144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01d      	beq.n	8006186 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006152:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	22b9      	movs	r2, #185	; 0xb9
 8006158:	2102      	movs	r1, #2
 800615a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800615c:	683c      	ldr	r4, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	2300      	movs	r3, #0
 8006166:	9303      	str	r3, [sp, #12]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	9302      	str	r3, [sp, #8]
 800616c:	2318      	movs	r3, #24
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	0023      	movs	r3, r4
 8006178:	f000 f858 	bl	800622c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	0018      	movs	r0, r3
 8006180:	f000 f8ec 	bl	800635c <prvAddNewTaskToReadyList>
 8006184:	e001      	b.n	800618a <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800618a:	69bb      	ldr	r3, [r7, #24]
	}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b009      	add	sp, #36	; 0x24
 8006192:	bd90      	pop	{r4, r7, pc}

08006194 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b08d      	sub	sp, #52	; 0x34
 8006198:	af04      	add	r7, sp, #16
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	1dbb      	adds	r3, r7, #6
 80061a2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a4:	1dbb      	adds	r3, r7, #6
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	0018      	movs	r0, r3
 80061ac:	f001 fb18 	bl	80077e0 <pvPortMalloc>
 80061b0:	0003      	movs	r3, r0
 80061b2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80061ba:	20bc      	movs	r0, #188	; 0xbc
 80061bc:	f001 fb10 	bl	80077e0 <pvPortMalloc>
 80061c0:	0003      	movs	r3, r0
 80061c2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
 80061d0:	e006      	b.n	80061e0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f001 fba9 	bl	800792c <vPortFree>
 80061da:	e001      	b.n	80061e0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01a      	beq.n	800621c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	22b9      	movs	r2, #185	; 0xb9
 80061ea:	2100      	movs	r1, #0
 80061ec:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061ee:	1dbb      	adds	r3, r7, #6
 80061f0:	881a      	ldrh	r2, [r3, #0]
 80061f2:	683c      	ldr	r4, [r7, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9303      	str	r3, [sp, #12]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	9302      	str	r3, [sp, #8]
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	0023      	movs	r3, r4
 800620a:	f000 f80f 	bl	800622c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 f8a3 	bl	800635c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006216:	2301      	movs	r3, #1
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e002      	b.n	8006222 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800621c:	2301      	movs	r3, #1
 800621e:	425b      	negs	r3, r3
 8006220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006222:	69bb      	ldr	r3, [r7, #24]
	}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b009      	add	sp, #36	; 0x24
 800622a:	bd90      	pop	{r4, r7, pc}

0800622c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	001a      	movs	r2, r3
 8006244:	21a5      	movs	r1, #165	; 0xa5
 8006246:	f001 fca6 	bl	8007b96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	493e      	ldr	r1, [pc, #248]	; (800634c <prvInitialiseNewTask+0x120>)
 8006252:	468c      	mov	ip, r1
 8006254:	4463      	add	r3, ip
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	18d3      	adds	r3, r2, r3
 800625a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2207      	movs	r2, #7
 8006260:	4393      	bics	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2207      	movs	r2, #7
 8006268:	4013      	ands	r3, r2
 800626a:	d001      	beq.n	8006270 <prvInitialiseNewTask+0x44>
 800626c:	b672      	cpsid	i
 800626e:	e7fe      	b.n	800626e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e013      	b.n	800629e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	18d3      	adds	r3, r2, r3
 800627c:	7818      	ldrb	r0, [r3, #0]
 800627e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006280:	2134      	movs	r1, #52	; 0x34
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	185b      	adds	r3, r3, r1
 8006288:	1c02      	adds	r2, r0, #0
 800628a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d006      	beq.n	80062a6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3301      	adds	r3, #1
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b0f      	cmp	r3, #15
 80062a2:	d9e8      	bls.n	8006276 <prvInitialiseNewTask+0x4a>
 80062a4:	e000      	b.n	80062a8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80062a6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2243      	movs	r2, #67	; 0x43
 80062ac:	2100      	movs	r1, #0
 80062ae:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b37      	cmp	r3, #55	; 0x37
 80062b4:	d901      	bls.n	80062ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062b6:	2337      	movs	r3, #55	; 0x37
 80062b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	2200      	movs	r2, #0
 80062ca:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	3304      	adds	r3, #4
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fe ffeb 	bl	80052ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	3318      	adds	r3, #24
 80062da:	0018      	movs	r0, r3
 80062dc:	f7fe ffe6 	bl	80052ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	2238      	movs	r2, #56	; 0x38
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	22b4      	movs	r2, #180	; 0xb4
 80062fa:	2100      	movs	r1, #0
 80062fc:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	22b8      	movs	r2, #184	; 0xb8
 8006302:	2100      	movs	r1, #0
 8006304:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	3354      	adds	r3, #84	; 0x54
 800630a:	2260      	movs	r2, #96	; 0x60
 800630c:	2100      	movs	r1, #0
 800630e:	0018      	movs	r0, r3
 8006310:	f001 fc41 	bl	8007b96 <memset>
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	4a0e      	ldr	r2, [pc, #56]	; (8006350 <prvInitialiseNewTask+0x124>)
 8006318:	659a      	str	r2, [r3, #88]	; 0x58
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <prvInitialiseNewTask+0x128>)
 800631e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <prvInitialiseNewTask+0x12c>)
 8006324:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	68f9      	ldr	r1, [r7, #12]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	0018      	movs	r0, r3
 800632e:	f001 f927 	bl	8007580 <pxPortInitialiseStack>
 8006332:	0002      	movs	r2, r0
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b006      	add	sp, #24
 800634a:	bd80      	pop	{r7, pc}
 800634c:	3fffffff 	.word	0x3fffffff
 8006350:	080087a8 	.word	0x080087a8
 8006354:	080087c8 	.word	0x080087c8
 8006358:	08008788 	.word	0x08008788

0800635c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006364:	f001 f9a4 	bl	80076b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006368:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	4b29      	ldr	r3, [pc, #164]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 8006370:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006372:	4b29      	ldr	r3, [pc, #164]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006380:	4b24      	ldr	r3, [pc, #144]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d110      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006388:	f000 fba6 	bl	8006ad8 <prvInitialiseTaskLists>
 800638c:	e00d      	b.n	80063aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800638e:	4b23      	ldr	r3, [pc, #140]	; (800641c <prvAddNewTaskToReadyList+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d802      	bhi.n	80063aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a4:	4b1c      	ldr	r3, [pc, #112]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <prvAddNewTaskToReadyList+0xc4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <prvAddNewTaskToReadyList+0xc4>)
 80063b2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063b4:	4b1a      	ldr	r3, [pc, #104]	; (8006420 <prvAddNewTaskToReadyList+0xc4>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4b18      	ldr	r3, [pc, #96]	; (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d903      	bls.n	80063d0 <prvAddNewTaskToReadyList+0x74>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	4b15      	ldr	r3, [pc, #84]	; (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d4:	0013      	movs	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4a12      	ldr	r2, [pc, #72]	; (8006428 <prvAddNewTaskToReadyList+0xcc>)
 80063de:	189a      	adds	r2, r3, r2
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	0019      	movs	r1, r3
 80063e6:	0010      	movs	r0, r2
 80063e8:	f7fe ff6b 	bl	80052c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 f972 	bl	80076d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063f0:	4b0a      	ldr	r3, [pc, #40]	; (800641c <prvAddNewTaskToReadyList+0xc0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	429a      	cmp	r2, r3
 8006404:	d201      	bcs.n	800640a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006406:	f001 f943 	bl	8007690 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	20000efc 	.word	0x20000efc
 8006418:	20000a28 	.word	0x20000a28
 800641c:	20000f08 	.word	0x20000f08
 8006420:	20000f18 	.word	0x20000f18
 8006424:	20000f04 	.word	0x20000f04
 8006428:	20000a2c 	.word	0x20000a2c

0800642c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <vTaskDelay+0x48>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <vTaskDelay+0x1e>
 8006446:	b672      	cpsid	i
 8006448:	e7fe      	b.n	8006448 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800644a:	f000 f873 	bl	8006534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2100      	movs	r1, #0
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fd70 	bl	8006f38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006458:	f000 f878 	bl	800654c <xTaskResumeAll>
 800645c:	0003      	movs	r3, r0
 800645e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006466:	f001 f913 	bl	8007690 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b004      	add	sp, #16
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	20000f24 	.word	0x20000f24

08006478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b089      	sub	sp, #36	; 0x24
 800647c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006486:	003a      	movs	r2, r7
 8006488:	1d39      	adds	r1, r7, #4
 800648a:	2308      	movs	r3, #8
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	0018      	movs	r0, r3
 8006490:	f7fe febe 	bl	8005210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006494:	683c      	ldr	r4, [r7, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	491e      	ldr	r1, [pc, #120]	; (8006514 <vTaskStartScheduler+0x9c>)
 800649c:	481e      	ldr	r0, [pc, #120]	; (8006518 <vTaskStartScheduler+0xa0>)
 800649e:	9202      	str	r2, [sp, #8]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	2300      	movs	r3, #0
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	0022      	movs	r2, r4
 80064aa:	f7ff fe30 	bl	800610e <xTaskCreateStatic>
 80064ae:	0002      	movs	r2, r0
 80064b0:	4b1a      	ldr	r3, [pc, #104]	; (800651c <vTaskStartScheduler+0xa4>)
 80064b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064b4:	4b19      	ldr	r3, [pc, #100]	; (800651c <vTaskStartScheduler+0xa4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064bc:	2301      	movs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	e001      	b.n	80064c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d103      	bne.n	80064d4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80064cc:	f000 fd88 	bl	8006fe0 <xTimerCreateTimerTask>
 80064d0:	0003      	movs	r3, r0
 80064d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d113      	bne.n	8006502 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80064da:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <vTaskStartScheduler+0xa8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3354      	adds	r3, #84	; 0x54
 80064e2:	001a      	movs	r2, r3
 80064e4:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <vTaskStartScheduler+0xac>)
 80064e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <vTaskStartScheduler+0xb0>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	4252      	negs	r2, r2
 80064ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <vTaskStartScheduler+0xb4>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80064f6:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <vTaskStartScheduler+0xb8>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064fc:	f001 f8a4 	bl	8007648 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006500:	e004      	b.n	800650c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	d101      	bne.n	800650c <vTaskStartScheduler+0x94>
 8006508:	b672      	cpsid	i
 800650a:	e7fe      	b.n	800650a <vTaskStartScheduler+0x92>
}
 800650c:	46c0      	nop			; (mov r8, r8)
 800650e:	46bd      	mov	sp, r7
 8006510:	b005      	add	sp, #20
 8006512:	bd90      	pop	{r4, r7, pc}
 8006514:	080086c8 	.word	0x080086c8
 8006518:	08006ab9 	.word	0x08006ab9
 800651c:	20000f20 	.word	0x20000f20
 8006520:	20000a28 	.word	0x20000a28
 8006524:	20000010 	.word	0x20000010
 8006528:	20000f1c 	.word	0x20000f1c
 800652c:	20000f08 	.word	0x20000f08
 8006530:	20000f00 	.word	0x20000f00

08006534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <vTaskSuspendAll+0x14>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	4b02      	ldr	r3, [pc, #8]	; (8006548 <vTaskSuspendAll+0x14>)
 8006540:	601a      	str	r2, [r3, #0]
}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000f24 	.word	0x20000f24

0800654c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800655a:	4b3a      	ldr	r3, [pc, #232]	; (8006644 <xTaskResumeAll+0xf8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <xTaskResumeAll+0x1a>
 8006562:	b672      	cpsid	i
 8006564:	e7fe      	b.n	8006564 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006566:	f001 f8a3 	bl	80076b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800656a:	4b36      	ldr	r3, [pc, #216]	; (8006644 <xTaskResumeAll+0xf8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	4b34      	ldr	r3, [pc, #208]	; (8006644 <xTaskResumeAll+0xf8>)
 8006572:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006574:	4b33      	ldr	r3, [pc, #204]	; (8006644 <xTaskResumeAll+0xf8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d15b      	bne.n	8006634 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800657c:	4b32      	ldr	r3, [pc, #200]	; (8006648 <xTaskResumeAll+0xfc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d057      	beq.n	8006634 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006584:	e02f      	b.n	80065e6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <xTaskResumeAll+0x100>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3318      	adds	r3, #24
 8006592:	0018      	movs	r0, r3
 8006594:	f7fe feed 	bl	8005372 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3304      	adds	r3, #4
 800659c:	0018      	movs	r0, r3
 800659e:	f7fe fee8 	bl	8005372 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <xTaskResumeAll+0x104>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d903      	bls.n	80065b6 <xTaskResumeAll+0x6a>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b2:	4b27      	ldr	r3, [pc, #156]	; (8006650 <xTaskResumeAll+0x104>)
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	0013      	movs	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	189b      	adds	r3, r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4a24      	ldr	r2, [pc, #144]	; (8006654 <xTaskResumeAll+0x108>)
 80065c4:	189a      	adds	r2, r3, r2
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3304      	adds	r3, #4
 80065ca:	0019      	movs	r1, r3
 80065cc:	0010      	movs	r0, r2
 80065ce:	f7fe fe78 	bl	80052c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <xTaskResumeAll+0x10c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80065e0:	4b1e      	ldr	r3, [pc, #120]	; (800665c <xTaskResumeAll+0x110>)
 80065e2:	2201      	movs	r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e6:	4b19      	ldr	r3, [pc, #100]	; (800664c <xTaskResumeAll+0x100>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1cb      	bne.n	8006586 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065f4:	f000 fb10 	bl	8006c18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065f8:	4b19      	ldr	r3, [pc, #100]	; (8006660 <xTaskResumeAll+0x114>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00f      	beq.n	8006624 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006604:	f000 f83c 	bl	8006680 <xTaskIncrementTick>
 8006608:	1e03      	subs	r3, r0, #0
 800660a:	d002      	beq.n	8006612 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <xTaskResumeAll+0x110>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3b01      	subs	r3, #1
 8006616:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f2      	bne.n	8006604 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xTaskResumeAll+0x114>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006624:	4b0d      	ldr	r3, [pc, #52]	; (800665c <xTaskResumeAll+0x110>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d003      	beq.n	8006634 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800662c:	2301      	movs	r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006630:	f001 f82e 	bl	8007690 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006634:	f001 f84e 	bl	80076d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006638:	68bb      	ldr	r3, [r7, #8]
}
 800663a:	0018      	movs	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	b004      	add	sp, #16
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	20000f24 	.word	0x20000f24
 8006648:	20000efc 	.word	0x20000efc
 800664c:	20000ebc 	.word	0x20000ebc
 8006650:	20000f04 	.word	0x20000f04
 8006654:	20000a2c 	.word	0x20000a2c
 8006658:	20000a28 	.word	0x20000a28
 800665c:	20000f10 	.word	0x20000f10
 8006660:	20000f0c 	.word	0x20000f0c

08006664 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <xTaskGetTickCount+0x18>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006670:	687b      	ldr	r3, [r7, #4]
}
 8006672:	0018      	movs	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	b002      	add	sp, #8
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	20000f00 	.word	0x20000f00

08006680 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800668a:	4b4c      	ldr	r3, [pc, #304]	; (80067bc <xTaskIncrementTick+0x13c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d000      	beq.n	8006694 <xTaskIncrementTick+0x14>
 8006692:	e083      	b.n	800679c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006694:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <xTaskIncrementTick+0x140>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800669c:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <xTaskIncrementTick+0x140>)
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d117      	bne.n	80066d8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80066a8:	4b46      	ldr	r3, [pc, #280]	; (80067c4 <xTaskIncrementTick+0x144>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <xTaskIncrementTick+0x36>
 80066b2:	b672      	cpsid	i
 80066b4:	e7fe      	b.n	80066b4 <xTaskIncrementTick+0x34>
 80066b6:	4b43      	ldr	r3, [pc, #268]	; (80067c4 <xTaskIncrementTick+0x144>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <xTaskIncrementTick+0x148>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <xTaskIncrementTick+0x144>)
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <xTaskIncrementTick+0x148>)
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	4b40      	ldr	r3, [pc, #256]	; (80067cc <xTaskIncrementTick+0x14c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	4b3e      	ldr	r3, [pc, #248]	; (80067cc <xTaskIncrementTick+0x14c>)
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	f000 faa0 	bl	8006c18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066d8:	4b3d      	ldr	r3, [pc, #244]	; (80067d0 <xTaskIncrementTick+0x150>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d34e      	bcc.n	8006780 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066e2:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <xTaskIncrementTick+0x144>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xTaskIncrementTick+0x70>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <xTaskIncrementTick+0x72>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d004      	beq.n	8006700 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	4b36      	ldr	r3, [pc, #216]	; (80067d0 <xTaskIncrementTick+0x150>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	4252      	negs	r2, r2
 80066fc:	601a      	str	r2, [r3, #0]
					break;
 80066fe:	e03f      	b.n	8006780 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006700:	4b30      	ldr	r3, [pc, #192]	; (80067c4 <xTaskIncrementTick+0x144>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d203      	bcs.n	8006720 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006718:	4b2d      	ldr	r3, [pc, #180]	; (80067d0 <xTaskIncrementTick+0x150>)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
						break;
 800671e:	e02f      	b.n	8006780 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3304      	adds	r3, #4
 8006724:	0018      	movs	r0, r3
 8006726:	f7fe fe24 	bl	8005372 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3318      	adds	r3, #24
 8006736:	0018      	movs	r0, r3
 8006738:	f7fe fe1b 	bl	8005372 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <xTaskIncrementTick+0x154>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d903      	bls.n	8006750 <xTaskIncrementTick+0xd0>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <xTaskIncrementTick+0x154>)
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006754:	0013      	movs	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	189b      	adds	r3, r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <xTaskIncrementTick+0x158>)
 800675e:	189a      	adds	r2, r3, r2
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3304      	adds	r3, #4
 8006764:	0019      	movs	r1, r3
 8006766:	0010      	movs	r0, r2
 8006768:	f7fe fdab 	bl	80052c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <xTaskIncrementTick+0x15c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	429a      	cmp	r2, r3
 8006778:	d3b3      	bcc.n	80066e2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800677a:	2301      	movs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	e7b0      	b.n	80066e2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006780:	4b16      	ldr	r3, [pc, #88]	; (80067dc <xTaskIncrementTick+0x15c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	4914      	ldr	r1, [pc, #80]	; (80067d8 <xTaskIncrementTick+0x158>)
 8006788:	0013      	movs	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	189b      	adds	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	585b      	ldr	r3, [r3, r1]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d907      	bls.n	80067a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006796:	2301      	movs	r3, #1
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e004      	b.n	80067a6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <xTaskIncrementTick+0x160>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <xTaskIncrementTick+0x160>)
 80067a4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <xTaskIncrementTick+0x164>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067b2:	697b      	ldr	r3, [r7, #20]
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b006      	add	sp, #24
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000f24 	.word	0x20000f24
 80067c0:	20000f00 	.word	0x20000f00
 80067c4:	20000eb4 	.word	0x20000eb4
 80067c8:	20000eb8 	.word	0x20000eb8
 80067cc:	20000f14 	.word	0x20000f14
 80067d0:	20000f1c 	.word	0x20000f1c
 80067d4:	20000f04 	.word	0x20000f04
 80067d8:	20000a2c 	.word	0x20000a2c
 80067dc:	20000a28 	.word	0x20000a28
 80067e0:	20000f0c 	.word	0x20000f0c
 80067e4:	20000f10 	.word	0x20000f10

080067e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067ee:	4b25      	ldr	r3, [pc, #148]	; (8006884 <vTaskSwitchContext+0x9c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067f6:	4b24      	ldr	r3, [pc, #144]	; (8006888 <vTaskSwitchContext+0xa0>)
 80067f8:	2201      	movs	r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067fc:	e03d      	b.n	800687a <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 80067fe:	4b22      	ldr	r3, [pc, #136]	; (8006888 <vTaskSwitchContext+0xa0>)
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006804:	4b21      	ldr	r3, [pc, #132]	; (800688c <vTaskSwitchContext+0xa4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	e007      	b.n	800681c <vTaskSwitchContext+0x34>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <vTaskSwitchContext+0x2e>
 8006812:	b672      	cpsid	i
 8006814:	e7fe      	b.n	8006814 <vTaskSwitchContext+0x2c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3b01      	subs	r3, #1
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	491c      	ldr	r1, [pc, #112]	; (8006890 <vTaskSwitchContext+0xa8>)
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	0013      	movs	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	189b      	adds	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	585b      	ldr	r3, [r3, r1]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ee      	beq.n	800680c <vTaskSwitchContext+0x24>
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	0013      	movs	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	189b      	adds	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4a15      	ldr	r2, [pc, #84]	; (8006890 <vTaskSwitchContext+0xa8>)
 800683a:	189b      	adds	r3, r3, r2
 800683c:	603b      	str	r3, [r7, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	429a      	cmp	r2, r3
 8006852:	d104      	bne.n	800685e <vTaskSwitchContext+0x76>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <vTaskSwitchContext+0xac>)
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	4b08      	ldr	r3, [pc, #32]	; (800688c <vTaskSwitchContext+0xa4>)
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800686e:	4b09      	ldr	r3, [pc, #36]	; (8006894 <vTaskSwitchContext+0xac>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3354      	adds	r3, #84	; 0x54
 8006874:	001a      	movs	r2, r3
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <vTaskSwitchContext+0xb0>)
 8006878:	601a      	str	r2, [r3, #0]
}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	46bd      	mov	sp, r7
 800687e:	b002      	add	sp, #8
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	20000f24 	.word	0x20000f24
 8006888:	20000f10 	.word	0x20000f10
 800688c:	20000f04 	.word	0x20000f04
 8006890:	20000a2c 	.word	0x20000a2c
 8006894:	20000a28 	.word	0x20000a28
 8006898:	20000010 	.word	0x20000010

0800689c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <vTaskPlaceOnEventList+0x14>
 80068ac:	b672      	cpsid	i
 80068ae:	e7fe      	b.n	80068ae <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b0:	4b08      	ldr	r3, [pc, #32]	; (80068d4 <vTaskPlaceOnEventList+0x38>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3318      	adds	r3, #24
 80068b6:	001a      	movs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	0011      	movs	r1, r2
 80068bc:	0018      	movs	r0, r3
 80068be:	f7fe fd22 	bl	8005306 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2101      	movs	r1, #1
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 fb36 	bl	8006f38 <prvAddCurrentTaskToDelayedList>
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b002      	add	sp, #8
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20000a28 	.word	0x20000a28

080068d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <vTaskPlaceOnEventListRestricted+0x16>
 80068ea:	b672      	cpsid	i
 80068ec:	e7fe      	b.n	80068ec <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <vTaskPlaceOnEventListRestricted+0x48>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3318      	adds	r3, #24
 80068f4:	001a      	movs	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f7fe fce1 	bl	80052c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8006906:	2301      	movs	r3, #1
 8006908:	425b      	negs	r3, r3
 800690a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	0011      	movs	r1, r2
 8006912:	0018      	movs	r0, r3
 8006914:	f000 fb10 	bl	8006f38 <prvAddCurrentTaskToDelayedList>
	}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	46bd      	mov	sp, r7
 800691c:	b004      	add	sp, #16
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20000a28 	.word	0x20000a28

08006924 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <xTaskRemoveFromEventList+0x1a>
 800693a:	b672      	cpsid	i
 800693c:	e7fe      	b.n	800693c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3318      	adds	r3, #24
 8006942:	0018      	movs	r0, r3
 8006944:	f7fe fd15 	bl	8005372 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xTaskRemoveFromEventList+0xa0>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11d      	bne.n	800698c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3304      	adds	r3, #4
 8006954:	0018      	movs	r0, r3
 8006956:	f7fe fd0c 	bl	8005372 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <xTaskRemoveFromEventList+0xa4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d903      	bls.n	800696e <xTaskRemoveFromEventList+0x4a>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <xTaskRemoveFromEventList+0xa4>)
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	0013      	movs	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	189b      	adds	r3, r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a14      	ldr	r2, [pc, #80]	; (80069cc <xTaskRemoveFromEventList+0xa8>)
 800697c:	189a      	adds	r2, r3, r2
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	3304      	adds	r3, #4
 8006982:	0019      	movs	r1, r3
 8006984:	0010      	movs	r0, r2
 8006986:	f7fe fc9c 	bl	80052c2 <vListInsertEnd>
 800698a:	e007      	b.n	800699c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	3318      	adds	r3, #24
 8006990:	001a      	movs	r2, r3
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <xTaskRemoveFromEventList+0xac>)
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f7fe fc93 	bl	80052c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <xTaskRemoveFromEventList+0xb0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d905      	bls.n	80069b6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069aa:	2301      	movs	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <xTaskRemoveFromEventList+0xb4>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e001      	b.n	80069ba <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80069ba:	68fb      	ldr	r3, [r7, #12]
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b004      	add	sp, #16
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000f24 	.word	0x20000f24
 80069c8:	20000f04 	.word	0x20000f04
 80069cc:	20000a2c 	.word	0x20000a2c
 80069d0:	20000ebc 	.word	0x20000ebc
 80069d4:	20000a28 	.word	0x20000a28
 80069d8:	20000f10 	.word	0x20000f10

080069dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <vTaskInternalSetTimeOutState+0x20>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vTaskInternalSetTimeOutState+0x24>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	605a      	str	r2, [r3, #4]
}
 80069f4:	46c0      	nop			; (mov r8, r8)
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b002      	add	sp, #8
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000f14 	.word	0x20000f14
 8006a00:	20000f00 	.word	0x20000f00

08006a04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <xTaskCheckForTimeOut+0x14>
 8006a14:	b672      	cpsid	i
 8006a16:	e7fe      	b.n	8006a16 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <xTaskCheckForTimeOut+0x1e>
 8006a1e:	b672      	cpsid	i
 8006a20:	e7fe      	b.n	8006a20 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8006a22:	f000 fe45 	bl	80076b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <xTaskCheckForTimeOut+0x98>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	d102      	bne.n	8006a44 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e024      	b.n	8006a8e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <xTaskCheckForTimeOut+0x9c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d007      	beq.n	8006a60 <xTaskCheckForTimeOut+0x5c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e016      	b.n	8006a8e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d20c      	bcs.n	8006a84 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad2      	subs	r2, r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7ff ffaf 	bl	80069dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e004      	b.n	8006a8e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006a8e:	f000 fe21 	bl	80076d4 <vPortExitCritical>

	return xReturn;
 8006a92:	697b      	ldr	r3, [r7, #20]
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b006      	add	sp, #24
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20000f00 	.word	0x20000f00
 8006aa0:	20000f14 	.word	0x20000f14

08006aa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006aa8:	4b02      	ldr	r3, [pc, #8]	; (8006ab4 <vTaskMissedYield+0x10>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000f10 	.word	0x20000f10

08006ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ac0:	f000 f84e 	bl	8006b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <prvIdleTask+0x1c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d9f9      	bls.n	8006ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006acc:	f000 fde0 	bl	8007690 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006ad0:	e7f6      	b.n	8006ac0 <prvIdleTask+0x8>
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	20000a2c 	.word	0x20000a2c

08006ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e00c      	b.n	8006afe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	0013      	movs	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	189b      	adds	r3, r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4a14      	ldr	r2, [pc, #80]	; (8006b40 <prvInitialiseTaskLists+0x68>)
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	0018      	movs	r0, r3
 8006af4:	f7fe fbbc 	bl	8005270 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3301      	adds	r3, #1
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b37      	cmp	r3, #55	; 0x37
 8006b02:	d9ef      	bls.n	8006ae4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <prvInitialiseTaskLists+0x6c>)
 8006b06:	0018      	movs	r0, r3
 8006b08:	f7fe fbb2 	bl	8005270 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b0c:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <prvInitialiseTaskLists+0x70>)
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7fe fbae 	bl	8005270 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b14:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <prvInitialiseTaskLists+0x74>)
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fe fbaa 	bl	8005270 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <prvInitialiseTaskLists+0x78>)
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fe fba6 	bl	8005270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <prvInitialiseTaskLists+0x7c>)
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7fe fba2 	bl	8005270 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <prvInitialiseTaskLists+0x80>)
 8006b2e:	4a05      	ldr	r2, [pc, #20]	; (8006b44 <prvInitialiseTaskLists+0x6c>)
 8006b30:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b32:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <prvInitialiseTaskLists+0x84>)
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <prvInitialiseTaskLists+0x70>)
 8006b36:	601a      	str	r2, [r3, #0]
}
 8006b38:	46c0      	nop			; (mov r8, r8)
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000a2c 	.word	0x20000a2c
 8006b44:	20000e8c 	.word	0x20000e8c
 8006b48:	20000ea0 	.word	0x20000ea0
 8006b4c:	20000ebc 	.word	0x20000ebc
 8006b50:	20000ed0 	.word	0x20000ed0
 8006b54:	20000ee8 	.word	0x20000ee8
 8006b58:	20000eb4 	.word	0x20000eb4
 8006b5c:	20000eb8 	.word	0x20000eb8

08006b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b66:	e01a      	b.n	8006b9e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8006b68:	f000 fda2 	bl	80076b0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b6c:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <prvCheckTasksWaitingTermination+0x50>)
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f7fe fbfa 	bl	8005372 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b7e:	4b0d      	ldr	r3, [pc, #52]	; (8006bb4 <prvCheckTasksWaitingTermination+0x54>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <prvCheckTasksWaitingTermination+0x54>)
 8006b86:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <prvCheckTasksWaitingTermination+0x58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <prvCheckTasksWaitingTermination+0x58>)
 8006b90:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006b92:	f000 fd9f 	bl	80076d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 f80f 	bl	8006bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <prvCheckTasksWaitingTermination+0x58>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e0      	bne.n	8006b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	46c0      	nop			; (mov r8, r8)
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b002      	add	sp, #8
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000ed0 	.word	0x20000ed0
 8006bb4:	20000efc 	.word	0x20000efc
 8006bb8:	20000ee4 	.word	0x20000ee4

08006bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3354      	adds	r3, #84	; 0x54
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f001 f893 	bl	8007cf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	22b9      	movs	r2, #185	; 0xb9
 8006bd2:	5c9b      	ldrb	r3, [r3, r2]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fea5 	bl	800792c <vPortFree>
				vPortFree( pxTCB );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 fea1 	bl	800792c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006bea:	e010      	b.n	8006c0e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	22b9      	movs	r2, #185	; 0xb9
 8006bf0:	5c9b      	ldrb	r3, [r3, r2]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d104      	bne.n	8006c00 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fe97 	bl	800792c <vPortFree>
	}
 8006bfe:	e006      	b.n	8006c0e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	22b9      	movs	r2, #185	; 0xb9
 8006c04:	5c9b      	ldrb	r3, [r3, r2]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d001      	beq.n	8006c0e <prvDeleteTCB+0x52>
 8006c0a:	b672      	cpsid	i
 8006c0c:	e7fe      	b.n	8006c0c <prvDeleteTCB+0x50>
	}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <prvResetNextTaskUnblockTime+0x40>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <prvResetNextTaskUnblockTime+0x14>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <prvResetNextTaskUnblockTime+0x16>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d004      	beq.n	8006c3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c32:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <prvResetNextTaskUnblockTime+0x44>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	4252      	negs	r2, r2
 8006c38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c3a:	e008      	b.n	8006c4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <prvResetNextTaskUnblockTime+0x40>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <prvResetNextTaskUnblockTime+0x44>)
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b002      	add	sp, #8
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	20000eb4 	.word	0x20000eb4
 8006c5c:	20000f1c 	.word	0x20000f1c

08006c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <xTaskGetSchedulerState+0x30>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	607b      	str	r3, [r7, #4]
 8006c72:	e008      	b.n	8006c86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <xTaskGetSchedulerState+0x34>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d102      	bne.n	8006c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	e001      	b.n	8006c86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c86:	687b      	ldr	r3, [r7, #4]
	}
 8006c88:	0018      	movs	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	b002      	add	sp, #8
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000f08 	.word	0x20000f08
 8006c94:	20000f24 	.word	0x20000f24

08006c98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d056      	beq.n	8006d5c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb2:	4b2d      	ldr	r3, [pc, #180]	; (8006d68 <xTaskPriorityInherit+0xd0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d246      	bcs.n	8006d4a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	db06      	blt.n	8006cd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc4:	4b28      	ldr	r3, [pc, #160]	; (8006d68 <xTaskPriorityInherit+0xd0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	2238      	movs	r2, #56	; 0x38
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6959      	ldr	r1, [r3, #20]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	0013      	movs	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	189b      	adds	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a22      	ldr	r2, [pc, #136]	; (8006d6c <xTaskPriorityInherit+0xd4>)
 8006ce4:	189b      	adds	r3, r3, r2
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d101      	bne.n	8006cee <xTaskPriorityInherit+0x56>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <xTaskPriorityInherit+0x58>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d022      	beq.n	8006d3a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fe fb3a 	bl	8005372 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <xTaskPriorityInherit+0xd0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <xTaskPriorityInherit+0xd8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <xTaskPriorityInherit+0x84>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <xTaskPriorityInherit+0xd8>)
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	0013      	movs	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	189b      	adds	r3, r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4a10      	ldr	r2, [pc, #64]	; (8006d6c <xTaskPriorityInherit+0xd4>)
 8006d2a:	189a      	adds	r2, r3, r2
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	0019      	movs	r1, r3
 8006d32:	0010      	movs	r0, r2
 8006d34:	f7fe fac5 	bl	80052c2 <vListInsertEnd>
 8006d38:	e004      	b.n	8006d44 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <xTaskPriorityInherit+0xd0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e008      	b.n	8006d5c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <xTaskPriorityInherit+0xd0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d201      	bcs.n	8006d5c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b004      	add	sp, #16
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	20000a28 	.word	0x20000a28
 8006d6c:	20000a2c 	.word	0x20000a2c
 8006d70:	20000f04 	.word	0x20000f04

08006d74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d044      	beq.n	8006e14 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d8a:	4b25      	ldr	r3, [pc, #148]	; (8006e20 <xTaskPriorityDisinherit+0xac>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <xTaskPriorityDisinherit+0x24>
 8006d94:	b672      	cpsid	i
 8006d96:	e7fe      	b.n	8006d96 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <xTaskPriorityDisinherit+0x30>
 8006da0:	b672      	cpsid	i
 8006da2:	e7fe      	b.n	8006da2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da8:	1e5a      	subs	r2, r3, #1
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d02c      	beq.n	8006e14 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d128      	bne.n	8006e14 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7fe fad3 	bl	8005372 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2238      	movs	r2, #56	; 0x38
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <xTaskPriorityDisinherit+0xb0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d903      	bls.n	8006df4 <xTaskPriorityDisinherit+0x80>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <xTaskPriorityDisinherit+0xb0>)
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df8:	0013      	movs	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4a09      	ldr	r2, [pc, #36]	; (8006e28 <xTaskPriorityDisinherit+0xb4>)
 8006e02:	189a      	adds	r2, r3, r2
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3304      	adds	r3, #4
 8006e08:	0019      	movs	r1, r3
 8006e0a:	0010      	movs	r0, r2
 8006e0c:	f7fe fa59 	bl	80052c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e10:	2301      	movs	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e14:	68fb      	ldr	r3, [r7, #12]
	}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b004      	add	sp, #16
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	20000a28 	.word	0x20000a28
 8006e24:	20000f04 	.word	0x20000f04
 8006e28:	20000a2c 	.word	0x20000a2c

08006e2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d05d      	beq.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8006e4c:	b672      	cpsid	i
 8006e4e:	e7fe      	b.n	8006e4e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d902      	bls.n	8006e60 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e002      	b.n	8006e66 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e64:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d047      	beq.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d142      	bne.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e7a:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d101      	bne.n	8006e88 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8006e84:	b672      	cpsid	i
 8006e86:	e7fe      	b.n	8006e86 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db04      	blt.n	8006ea6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2238      	movs	r2, #56	; 0x38
 8006ea0:	1ad2      	subs	r2, r2, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6959      	ldr	r1, [r3, #20]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0013      	movs	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	d101      	bne.n	8006ec0 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01c      	beq.n	8006f00 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	0018      	movs	r0, r3
 8006ecc:	f7fe fa51 	bl	8005372 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d903      	bls.n	8006ee4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	0013      	movs	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	189b      	adds	r3, r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8006ef2:	189a      	adds	r2, r3, r2
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	0019      	movs	r1, r3
 8006efa:	0010      	movs	r0, r2
 8006efc:	f7fe f9e1 	bl	80052c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f00:	46c0      	nop			; (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b006      	add	sp, #24
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000a28 	.word	0x20000a28
 8006f0c:	20000a2c 	.word	0x20000a2c
 8006f10:	20000f04 	.word	0x20000f04

08006f14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <pvTaskIncrementMutexHeldCount+0x20>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <pvTaskIncrementMutexHeldCount+0x20>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f26:	3201      	adds	r2, #1
 8006f28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006f2a:	4b02      	ldr	r3, [pc, #8]	; (8006f34 <pvTaskIncrementMutexHeldCount+0x20>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
	}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000a28 	.word	0x20000a28

08006f38 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f48:	4b20      	ldr	r3, [pc, #128]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	0018      	movs	r0, r3
 8006f50:	f7fe fa0f 	bl	8005372 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3301      	adds	r3, #1
 8006f58:	d10b      	bne.n	8006f72 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f60:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	1d1a      	adds	r2, r3, #4
 8006f66:	4b1a      	ldr	r3, [pc, #104]	; (8006fd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f68:	0011      	movs	r1, r2
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f7fe f9a9 	bl	80052c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f70:	e026      	b.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	18d3      	adds	r3, r2, r3
 8006f78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d209      	bcs.n	8006f9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8a:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3304      	adds	r3, #4
 8006f94:	0019      	movs	r1, r3
 8006f96:	0010      	movs	r0, r2
 8006f98:	f7fe f9b5 	bl	8005306 <vListInsert>
}
 8006f9c:	e010      	b.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9e:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <prvAddCurrentTaskToDelayedList+0x94>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	0019      	movs	r1, r3
 8006faa:	0010      	movs	r0, r2
 8006fac:	f7fe f9ab 	bl	8005306 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d202      	bcs.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fba:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	601a      	str	r2, [r3, #0]
}
 8006fc0:	46c0      	nop			; (mov r8, r8)
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b004      	add	sp, #16
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000f00 	.word	0x20000f00
 8006fcc:	20000a28 	.word	0x20000a28
 8006fd0:	20000ee8 	.word	0x20000ee8
 8006fd4:	20000eb8 	.word	0x20000eb8
 8006fd8:	20000eb4 	.word	0x20000eb4
 8006fdc:	20000f1c 	.word	0x20000f1c

08006fe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b089      	sub	sp, #36	; 0x24
 8006fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fea:	f000 fa87 	bl	80074fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <xTimerCreateTimerTask+0x6c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d020      	beq.n	8007038 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ffe:	003a      	movs	r2, r7
 8007000:	1d39      	adds	r1, r7, #4
 8007002:	2308      	movs	r3, #8
 8007004:	18fb      	adds	r3, r7, r3
 8007006:	0018      	movs	r0, r3
 8007008:	f7fe f91a 	bl	8005240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800700c:	683c      	ldr	r4, [r7, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	490f      	ldr	r1, [pc, #60]	; (8007050 <xTimerCreateTimerTask+0x70>)
 8007014:	480f      	ldr	r0, [pc, #60]	; (8007054 <xTimerCreateTimerTask+0x74>)
 8007016:	9202      	str	r2, [sp, #8]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	2302      	movs	r3, #2
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2300      	movs	r3, #0
 8007020:	0022      	movs	r2, r4
 8007022:	f7ff f874 	bl	800610e <xTaskCreateStatic>
 8007026:	0002      	movs	r2, r0
 8007028:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <xTimerCreateTimerTask+0x78>)
 800702a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <xTimerCreateTimerTask+0x78>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8007034:	2301      	movs	r3, #1
 8007036:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <xTimerCreateTimerTask+0x62>
 800703e:	b672      	cpsid	i
 8007040:	e7fe      	b.n	8007040 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8007042:	68fb      	ldr	r3, [r7, #12]
}
 8007044:	0018      	movs	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	b005      	add	sp, #20
 800704a:	bd90      	pop	{r4, r7, pc}
 800704c:	20000f58 	.word	0x20000f58
 8007050:	080086d0 	.word	0x080086d0
 8007054:	08007161 	.word	0x08007161
 8007058:	20000f5c 	.word	0x20000f5c

0800705c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800705c:	b590      	push	{r4, r7, lr}
 800705e:	b08b      	sub	sp, #44	; 0x2c
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <xTimerGenericCommand+0x1c>
 8007074:	b672      	cpsid	i
 8007076:	e7fe      	b.n	8007076 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <xTimerGenericCommand+0x90>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d030      	beq.n	80070e2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007080:	2414      	movs	r4, #20
 8007082:	193b      	adds	r3, r7, r4
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007088:	193b      	adds	r3, r7, r4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800708e:	193b      	adds	r3, r7, r4
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	2b05      	cmp	r3, #5
 8007098:	dc19      	bgt.n	80070ce <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800709a:	f7ff fde1 	bl	8006c60 <xTaskGetSchedulerState>
 800709e:	0003      	movs	r3, r0
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d109      	bne.n	80070b8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070a4:	4b11      	ldr	r3, [pc, #68]	; (80070ec <xTimerGenericCommand+0x90>)
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070aa:	1939      	adds	r1, r7, r4
 80070ac:	2300      	movs	r3, #0
 80070ae:	f7fe facd 	bl	800564c <xQueueGenericSend>
 80070b2:	0003      	movs	r3, r0
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	e014      	b.n	80070e2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <xTimerGenericCommand+0x90>)
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	2314      	movs	r3, #20
 80070be:	18f9      	adds	r1, r7, r3
 80070c0:	2300      	movs	r3, #0
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7fe fac2 	bl	800564c <xQueueGenericSend>
 80070c8:	0003      	movs	r3, r0
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
 80070cc:	e009      	b.n	80070e2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <xTimerGenericCommand+0x90>)
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	2314      	movs	r3, #20
 80070d6:	18f9      	adds	r1, r7, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	f7fe fb7b 	bl	80057d4 <xQueueGenericSendFromISR>
 80070de:	0003      	movs	r3, r0
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b00b      	add	sp, #44	; 0x2c
 80070ea:	bd90      	pop	{r4, r7, pc}
 80070ec:	20000f58 	.word	0x20000f58

080070f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070fa:	4b18      	ldr	r3, [pc, #96]	; (800715c <prvProcessExpiredTimer+0x6c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3304      	adds	r3, #4
 8007108:	0018      	movs	r0, r3
 800710a:	f7fe f932 	bl	8005372 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d119      	bne.n	800714a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	18d1      	adds	r1, r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f8b6 	bl	8007294 <prvInsertTimerInActiveList>
 8007128:	1e03      	subs	r3, r0, #0
 800712a:	d00e      	beq.n	800714a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	2100      	movs	r1, #0
 8007138:	f7ff ff90 	bl	800705c <xTimerGenericCommand>
 800713c:	0003      	movs	r3, r0
 800713e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <prvProcessExpiredTimer+0x5a>
 8007146:	b672      	cpsid	i
 8007148:	e7fe      	b.n	8007148 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	0010      	movs	r0, r2
 8007152:	4798      	blx	r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	46bd      	mov	sp, r7
 8007158:	b004      	add	sp, #16
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20000f50 	.word	0x20000f50

08007160 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007168:	2308      	movs	r3, #8
 800716a:	18fb      	adds	r3, r7, r3
 800716c:	0018      	movs	r0, r3
 800716e:	f000 f851 	bl	8007214 <prvGetNextExpireTime>
 8007172:	0003      	movs	r3, r0
 8007174:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	0011      	movs	r1, r2
 800717c:	0018      	movs	r0, r3
 800717e:	f000 f803 	bl	8007188 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007182:	f000 f8c9 	bl	8007318 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007186:	e7ef      	b.n	8007168 <prvTimerTask+0x8>

08007188 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007192:	f7ff f9cf 	bl	8006534 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007196:	2308      	movs	r3, #8
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	0018      	movs	r0, r3
 800719c:	f000 f85a 	bl	8007254 <prvSampleTimeNow>
 80071a0:	0003      	movs	r3, r0
 80071a2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d129      	bne.n	80071fe <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10c      	bne.n	80071ca <prvProcessTimerOrBlockTask+0x42>
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d808      	bhi.n	80071ca <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 80071b8:	f7ff f9c8 	bl	800654c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	0011      	movs	r1, r2
 80071c2:	0018      	movs	r0, r3
 80071c4:	f7ff ff94 	bl	80070f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071c8:	e01b      	b.n	8007202 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071d0:	4b0e      	ldr	r3, [pc, #56]	; (800720c <prvProcessTimerOrBlockTask+0x84>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	425a      	negs	r2, r3
 80071d8:	4153      	adcs	r3, r2
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <prvProcessTimerOrBlockTask+0x88>)
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	0019      	movs	r1, r3
 80071ec:	f7fe ff5c 	bl	80060a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071f0:	f7ff f9ac 	bl	800654c <xTaskResumeAll>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d104      	bne.n	8007202 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80071f8:	f000 fa4a 	bl	8007690 <vPortYield>
}
 80071fc:	e001      	b.n	8007202 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80071fe:	f7ff f9a5 	bl	800654c <xTaskResumeAll>
}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	46bd      	mov	sp, r7
 8007206:	b004      	add	sp, #16
 8007208:	bd80      	pop	{r7, pc}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	20000f54 	.word	0x20000f54
 8007210:	20000f58 	.word	0x20000f58

08007214 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <prvGetNextExpireTime+0x3c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	425a      	negs	r2, r3
 8007224:	4153      	adcs	r3, r2
 8007226:	b2db      	uxtb	r3, r3
 8007228:	001a      	movs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d105      	bne.n	8007242 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007236:	4b06      	ldr	r3, [pc, #24]	; (8007250 <prvGetNextExpireTime+0x3c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e001      	b.n	8007246 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007246:	68fb      	ldr	r3, [r7, #12]
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000f50 	.word	0x20000f50

08007254 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800725c:	f7ff fa02 	bl	8006664 <xTaskGetTickCount>
 8007260:	0003      	movs	r3, r0
 8007262:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <prvSampleTimeNow+0x3c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	429a      	cmp	r2, r3
 800726c:	d205      	bcs.n	800727a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800726e:	f000 f8eb 	bl	8007448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e002      	b.n	8007280 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <prvSampleTimeNow+0x3c>)
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	0018      	movs	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	b004      	add	sp, #16
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20000f60 	.word	0x20000f60

08007294 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d812      	bhi.n	80072e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e01b      	b.n	8007306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072ce:	4b10      	ldr	r3, [pc, #64]	; (8007310 <prvInsertTimerInActiveList+0x7c>)
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3304      	adds	r3, #4
 80072d6:	0019      	movs	r1, r3
 80072d8:	0010      	movs	r0, r2
 80072da:	f7fe f814 	bl	8005306 <vListInsert>
 80072de:	e012      	b.n	8007306 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d206      	bcs.n	80072f6 <prvInsertTimerInActiveList+0x62>
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d302      	bcc.n	80072f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e007      	b.n	8007306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072f6:	4b07      	ldr	r3, [pc, #28]	; (8007314 <prvInsertTimerInActiveList+0x80>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3304      	adds	r3, #4
 80072fe:	0019      	movs	r1, r3
 8007300:	0010      	movs	r0, r2
 8007302:	f7fe f800 	bl	8005306 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007306:	697b      	ldr	r3, [r7, #20]
}
 8007308:	0018      	movs	r0, r3
 800730a:	46bd      	mov	sp, r7
 800730c:	b006      	add	sp, #24
 800730e:	bd80      	pop	{r7, pc}
 8007310:	20000f54 	.word	0x20000f54
 8007314:	20000f50 	.word	0x20000f50

08007318 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007318:	b590      	push	{r4, r7, lr}
 800731a:	b08d      	sub	sp, #52	; 0x34
 800731c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800731e:	e07f      	b.n	8007420 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007320:	2208      	movs	r2, #8
 8007322:	18bb      	adds	r3, r7, r2
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	da0f      	bge.n	800734a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800732a:	18bb      	adds	r3, r7, r2
 800732c:	3304      	adds	r3, #4
 800732e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <prvProcessReceivedCommands+0x22>
 8007336:	b672      	cpsid	i
 8007338:	e7fe      	b.n	8007338 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	6858      	ldr	r0, [r3, #4]
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	0019      	movs	r1, r3
 8007348:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800734a:	2208      	movs	r2, #8
 800734c:	18bb      	adds	r3, r7, r2
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db64      	blt.n	800741e <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007354:	18bb      	adds	r3, r7, r2
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	3304      	adds	r3, #4
 8007366:	0018      	movs	r0, r3
 8007368:	f7fe f803 	bl	8005372 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	0018      	movs	r0, r3
 8007370:	f7ff ff70 	bl	8007254 <prvSampleTimeNow>
 8007374:	0003      	movs	r3, r0
 8007376:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007378:	2308      	movs	r3, #8
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b09      	cmp	r3, #9
 8007380:	d84e      	bhi.n	8007420 <prvProcessReceivedCommands+0x108>
 8007382:	009a      	lsls	r2, r3, #2
 8007384:	4b2e      	ldr	r3, [pc, #184]	; (8007440 <prvProcessReceivedCommands+0x128>)
 8007386:	18d3      	adds	r3, r2, r3
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800738c:	2408      	movs	r4, #8
 800738e:	193b      	adds	r3, r7, r4
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	18d1      	adds	r1, r2, r3
 8007398:	193b      	adds	r3, r7, r4
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	6a38      	ldr	r0, [r7, #32]
 80073a0:	f7ff ff78 	bl	8007294 <prvInsertTimerInActiveList>
 80073a4:	1e03      	subs	r3, r0, #0
 80073a6:	d03b      	beq.n	8007420 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	6a3a      	ldr	r2, [r7, #32]
 80073ae:	0010      	movs	r0, r2
 80073b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d132      	bne.n	8007420 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073ba:	193b      	adds	r3, r7, r4
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	18d2      	adds	r2, r2, r3
 80073c4:	6a38      	ldr	r0, [r7, #32]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	2100      	movs	r1, #0
 80073ce:	f7ff fe45 	bl	800705c <xTimerGenericCommand>
 80073d2:	0003      	movs	r3, r0
 80073d4:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d121      	bne.n	8007420 <prvProcessReceivedCommands+0x108>
 80073dc:	b672      	cpsid	i
 80073de:	e7fe      	b.n	80073de <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073e0:	2308      	movs	r3, #8
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <prvProcessReceivedCommands+0xde>
 80073f2:	b672      	cpsid	i
 80073f4:	e7fe      	b.n	80073f4 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	18d1      	adds	r1, r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	6a38      	ldr	r0, [r7, #32]
 8007404:	f7ff ff46 	bl	8007294 <prvInsertTimerInActiveList>
					break;
 8007408:	e00a      	b.n	8007420 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	222c      	movs	r2, #44	; 0x2c
 800740e:	5c9b      	ldrb	r3, [r3, r2]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	0018      	movs	r0, r3
 8007418:	f000 fa88 	bl	800792c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800741c:	e000      	b.n	8007420 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800741e:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <prvProcessReceivedCommands+0x12c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2208      	movs	r2, #8
 8007426:	18b9      	adds	r1, r7, r2
 8007428:	2200      	movs	r2, #0
 800742a:	0018      	movs	r0, r3
 800742c:	f7fe faa8 	bl	8005980 <xQueueReceive>
 8007430:	1e03      	subs	r3, r0, #0
 8007432:	d000      	beq.n	8007436 <prvProcessReceivedCommands+0x11e>
 8007434:	e774      	b.n	8007320 <prvProcessReceivedCommands+0x8>
	}
}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b00b      	add	sp, #44	; 0x2c
 800743e:	bd90      	pop	{r4, r7, pc}
 8007440:	08008760 	.word	0x08008760
 8007444:	20000f58 	.word	0x20000f58

08007448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800744e:	e03e      	b.n	80074ce <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007450:	4b28      	ldr	r3, [pc, #160]	; (80074f4 <prvSwitchTimerLists+0xac>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800745a:	4b26      	ldr	r3, [pc, #152]	; (80074f4 <prvSwitchTimerLists+0xac>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3304      	adds	r3, #4
 8007468:	0018      	movs	r0, r3
 800746a:	f7fd ff82 	bl	8005372 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	0010      	movs	r0, r2
 8007476:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d126      	bne.n	80074ce <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d90e      	bls.n	80074b0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <prvSwitchTimerLists+0xac>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3304      	adds	r3, #4
 80074a6:	0019      	movs	r1, r3
 80074a8:	0010      	movs	r0, r2
 80074aa:	f7fd ff2c 	bl	8005306 <vListInsert>
 80074ae:	e00e      	b.n	80074ce <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	2300      	movs	r3, #0
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	2100      	movs	r1, #0
 80074bc:	f7ff fdce 	bl	800705c <xTimerGenericCommand>
 80074c0:	0003      	movs	r3, r0
 80074c2:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <prvSwitchTimerLists+0x86>
 80074ca:	b672      	cpsid	i
 80074cc:	e7fe      	b.n	80074cc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <prvSwitchTimerLists+0xac>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1bb      	bne.n	8007450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <prvSwitchTimerLists+0xac>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvSwitchTimerLists+0xb0>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <prvSwitchTimerLists+0xac>)
 80074e4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80074e6:	4b04      	ldr	r3, [pc, #16]	; (80074f8 <prvSwitchTimerLists+0xb0>)
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	601a      	str	r2, [r3, #0]
}
 80074ec:	46c0      	nop			; (mov r8, r8)
 80074ee:	46bd      	mov	sp, r7
 80074f0:	b006      	add	sp, #24
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000f50 	.word	0x20000f50
 80074f8:	20000f54 	.word	0x20000f54

080074fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007502:	f000 f8d5 	bl	80076b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007506:	4b16      	ldr	r3, [pc, #88]	; (8007560 <prvCheckForValidListAndQueue+0x64>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d123      	bne.n	8007556 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800750e:	4b15      	ldr	r3, [pc, #84]	; (8007564 <prvCheckForValidListAndQueue+0x68>)
 8007510:	0018      	movs	r0, r3
 8007512:	f7fd fead 	bl	8005270 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <prvCheckForValidListAndQueue+0x6c>)
 8007518:	0018      	movs	r0, r3
 800751a:	f7fd fea9 	bl	8005270 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <prvCheckForValidListAndQueue+0x70>)
 8007520:	4a10      	ldr	r2, [pc, #64]	; (8007564 <prvCheckForValidListAndQueue+0x68>)
 8007522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <prvCheckForValidListAndQueue+0x74>)
 8007526:	4a10      	ldr	r2, [pc, #64]	; (8007568 <prvCheckForValidListAndQueue+0x6c>)
 8007528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <prvCheckForValidListAndQueue+0x78>)
 800752c:	4a12      	ldr	r2, [pc, #72]	; (8007578 <prvCheckForValidListAndQueue+0x7c>)
 800752e:	2100      	movs	r1, #0
 8007530:	9100      	str	r1, [sp, #0]
 8007532:	2110      	movs	r1, #16
 8007534:	200a      	movs	r0, #10
 8007536:	f7fd ff98 	bl	800546a <xQueueGenericCreateStatic>
 800753a:	0002      	movs	r2, r0
 800753c:	4b08      	ldr	r3, [pc, #32]	; (8007560 <prvCheckForValidListAndQueue+0x64>)
 800753e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <prvCheckForValidListAndQueue+0x64>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d006      	beq.n	8007556 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <prvCheckForValidListAndQueue+0x64>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a0b      	ldr	r2, [pc, #44]	; (800757c <prvCheckForValidListAndQueue+0x80>)
 800754e:	0011      	movs	r1, r2
 8007550:	0018      	movs	r0, r3
 8007552:	f7fe fd57 	bl	8006004 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007556:	f000 f8bd 	bl	80076d4 <vPortExitCritical>
}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000f58 	.word	0x20000f58
 8007564:	20000f28 	.word	0x20000f28
 8007568:	20000f3c 	.word	0x20000f3c
 800756c:	20000f50 	.word	0x20000f50
 8007570:	20000f54 	.word	0x20000f54
 8007574:	20001004 	.word	0x20001004
 8007578:	20000f64 	.word	0x20000f64
 800757c:	080086d8 	.word	0x080086d8

08007580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3b04      	subs	r3, #4
 8007590:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2280      	movs	r2, #128	; 0x80
 8007596:	0452      	lsls	r2, r2, #17
 8007598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3b04      	subs	r3, #4
 800759e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3b04      	subs	r3, #4
 80075aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075ac:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <pxPortInitialiseStack+0x50>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3b14      	subs	r3, #20
 80075b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b20      	subs	r3, #32
 80075c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	0018      	movs	r0, r3
 80075c8:	46bd      	mov	sp, r7
 80075ca:	b004      	add	sp, #16
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	46c0      	nop			; (mov r8, r8)
 80075d0:	080075d5 	.word	0x080075d5

080075d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075da:	2300      	movs	r3, #0
 80075dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075de:	4b08      	ldr	r3, [pc, #32]	; (8007600 <prvTaskExitError+0x2c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	d001      	beq.n	80075ea <prvTaskExitError+0x16>
 80075e6:	b672      	cpsid	i
 80075e8:	e7fe      	b.n	80075e8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80075ea:	b672      	cpsid	i
	while( ulDummy == 0 )
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0fc      	beq.n	80075ee <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b002      	add	sp, #8
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	2000000c 	.word	0x2000000c

08007604 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007608:	46c0      	nop			; (mov r8, r8)
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007610:	4a0b      	ldr	r2, [pc, #44]	; (8007640 <pxCurrentTCBConst2>)
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	6818      	ldr	r0, [r3, #0]
 8007616:	3020      	adds	r0, #32
 8007618:	f380 8809 	msr	PSP, r0
 800761c:	2002      	movs	r0, #2
 800761e:	f380 8814 	msr	CONTROL, r0
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007628:	46ae      	mov	lr, r5
 800762a:	bc08      	pop	{r3}
 800762c:	bc04      	pop	{r2}
 800762e:	b662      	cpsie	i
 8007630:	4718      	bx	r3
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	46c0      	nop			; (mov r8, r8)
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46c0      	nop			; (mov r8, r8)

08007640 <pxCurrentTCBConst2>:
 8007640:	20000a28 	.word	0x20000a28
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	46c0      	nop			; (mov r8, r8)

08007648 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800764c:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <xPortStartScheduler+0x40>)
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	4b0d      	ldr	r3, [pc, #52]	; (8007688 <xPortStartScheduler+0x40>)
 8007652:	21ff      	movs	r1, #255	; 0xff
 8007654:	0409      	lsls	r1, r1, #16
 8007656:	430a      	orrs	r2, r1
 8007658:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <xPortStartScheduler+0x40>)
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <xPortStartScheduler+0x40>)
 8007660:	21ff      	movs	r1, #255	; 0xff
 8007662:	0609      	lsls	r1, r1, #24
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007668:	f000 f898 	bl	800779c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800766c:	4b07      	ldr	r3, [pc, #28]	; (800768c <xPortStartScheduler+0x44>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007672:	f7ff ffcd 	bl	8007610 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007676:	f7ff f8b7 	bl	80067e8 <vTaskSwitchContext>
	prvTaskExitError();
 800767a:	f7ff ffab 	bl	80075d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800767e:	2300      	movs	r3, #0
}
 8007680:	0018      	movs	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	e000ed20 	.word	0xe000ed20
 800768c:	2000000c 	.word	0x2000000c

08007690 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <vPortYield+0x1c>)
 8007696:	2280      	movs	r2, #128	; 0x80
 8007698:	0552      	lsls	r2, r2, #21
 800769a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800769c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80076a0:	f3bf 8f6f 	isb	sy
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80076b4:	b672      	cpsid	i
    uxCriticalNesting++;
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <vPortEnterCritical+0x20>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <vPortEnterCritical+0x20>)
 80076be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80076c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80076c4:	f3bf 8f6f 	isb	sy
}
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	2000000c 	.word	0x2000000c

080076d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <vPortExitCritical+0x2c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <vPortExitCritical+0x10>
 80076e0:	b672      	cpsid	i
 80076e2:	e7fe      	b.n	80076e2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <vPortExitCritical+0x2c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	1e5a      	subs	r2, r3, #1
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <vPortExitCritical+0x2c>)
 80076ec:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <vPortExitCritical+0x2c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d100      	bne.n	80076f8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80076f6:	b662      	cpsie	i
    }
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	2000000c 	.word	0x2000000c

08007704 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007704:	f3ef 8010 	mrs	r0, PRIMASK
 8007708:	b672      	cpsid	i
 800770a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	0018      	movs	r0, r3

08007710 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007710:	f380 8810 	msr	PRIMASK, r0
 8007714:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007716:	46c0      	nop			; (mov r8, r8)
	...

08007720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007720:	f3ef 8009 	mrs	r0, PSP
 8007724:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <pxCurrentTCBConst>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	3820      	subs	r0, #32
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800772e:	4644      	mov	r4, r8
 8007730:	464d      	mov	r5, r9
 8007732:	4656      	mov	r6, sl
 8007734:	465f      	mov	r7, fp
 8007736:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007738:	b508      	push	{r3, lr}
 800773a:	b672      	cpsid	i
 800773c:	f7ff f854 	bl	80067e8 <vTaskSwitchContext>
 8007740:	b662      	cpsie	i
 8007742:	bc0c      	pop	{r2, r3}
 8007744:	6811      	ldr	r1, [r2, #0]
 8007746:	6808      	ldr	r0, [r1, #0]
 8007748:	3010      	adds	r0, #16
 800774a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800774c:	46a0      	mov	r8, r4
 800774e:	46a9      	mov	r9, r5
 8007750:	46b2      	mov	sl, r6
 8007752:	46bb      	mov	fp, r7
 8007754:	f380 8809 	msr	PSP, r0
 8007758:	3820      	subs	r0, #32
 800775a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800775c:	4718      	bx	r3
 800775e:	46c0      	nop			; (mov r8, r8)

08007760 <pxCurrentTCBConst>:
 8007760:	20000a28 	.word	0x20000a28
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007764:	46c0      	nop			; (mov r8, r8)
 8007766:	46c0      	nop			; (mov r8, r8)

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800776e:	f7ff ffc9 	bl	8007704 <ulSetInterruptMaskFromISR>
 8007772:	0003      	movs	r3, r0
 8007774:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007776:	f7fe ff83 	bl	8006680 <xTaskIncrementTick>
 800777a:	1e03      	subs	r3, r0, #0
 800777c:	d003      	beq.n	8007786 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <SysTick_Handler+0x30>)
 8007780:	2280      	movs	r2, #128	; 0x80
 8007782:	0552      	lsls	r2, r2, #21
 8007784:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0018      	movs	r0, r3
 800778a:	f7ff ffc1 	bl	8007710 <vClearInterruptMaskFromISR>
}
 800778e:	46c0      	nop			; (mov r8, r8)
 8007790:	46bd      	mov	sp, r7
 8007792:	b002      	add	sp, #8
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <prvSetupTimerInterrupt+0x34>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <prvSetupTimerInterrupt+0x38>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <prvSetupTimerInterrupt+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	22fa      	movs	r2, #250	; 0xfa
 80077b2:	0091      	lsls	r1, r2, #2
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7f8 fcb1 	bl	800011c <__udivsi3>
 80077ba:	0003      	movs	r3, r0
 80077bc:	001a      	movs	r2, r3
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <prvSetupTimerInterrupt+0x40>)
 80077c0:	3a01      	subs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80077c4:	4b02      	ldr	r3, [pc, #8]	; (80077d0 <prvSetupTimerInterrupt+0x34>)
 80077c6:	2207      	movs	r2, #7
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	e000e010 	.word	0xe000e010
 80077d4:	e000e018 	.word	0xe000e018
 80077d8:	20000000 	.word	0x20000000
 80077dc:	e000e014 	.word	0xe000e014

080077e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80077ec:	f7fe fea2 	bl	8006534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077f0:	4b49      	ldr	r3, [pc, #292]	; (8007918 <pvPortMalloc+0x138>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f8:	f000 f8e0 	bl	80079bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077fc:	4b47      	ldr	r3, [pc, #284]	; (800791c <pvPortMalloc+0x13c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4013      	ands	r3, r2
 8007804:	d000      	beq.n	8007808 <pvPortMalloc+0x28>
 8007806:	e079      	b.n	80078fc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d012      	beq.n	8007834 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800780e:	2208      	movs	r2, #8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	189b      	adds	r3, r3, r2
 8007814:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2207      	movs	r2, #7
 800781a:	4013      	ands	r3, r2
 800781c:	d00a      	beq.n	8007834 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2207      	movs	r2, #7
 8007822:	4393      	bics	r3, r2
 8007824:	3308      	adds	r3, #8
 8007826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2207      	movs	r2, #7
 800782c:	4013      	ands	r3, r2
 800782e:	d001      	beq.n	8007834 <pvPortMalloc+0x54>
 8007830:	b672      	cpsid	i
 8007832:	e7fe      	b.n	8007832 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d060      	beq.n	80078fc <pvPortMalloc+0x11c>
 800783a:	4b39      	ldr	r3, [pc, #228]	; (8007920 <pvPortMalloc+0x140>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d85b      	bhi.n	80078fc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007844:	4b37      	ldr	r3, [pc, #220]	; (8007924 <pvPortMalloc+0x144>)
 8007846:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007848:	4b36      	ldr	r3, [pc, #216]	; (8007924 <pvPortMalloc+0x144>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800784e:	e004      	b.n	800785a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <pvPortMalloc+0x8c>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f1      	bne.n	8007850 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800786c:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <pvPortMalloc+0x138>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	429a      	cmp	r2, r3
 8007874:	d042      	beq.n	80078fc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	189b      	adds	r3, r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	2308      	movs	r3, #8
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	429a      	cmp	r2, r3
 8007896:	d916      	bls.n	80078c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	18d3      	adds	r3, r2, r3
 800789e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2207      	movs	r2, #7
 80078a4:	4013      	ands	r3, r2
 80078a6:	d001      	beq.n	80078ac <pvPortMalloc+0xcc>
 80078a8:	b672      	cpsid	i
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 f8db 	bl	8007a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <pvPortMalloc+0x140>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	4b13      	ldr	r3, [pc, #76]	; (8007920 <pvPortMalloc+0x140>)
 80078d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078d4:	4b12      	ldr	r3, [pc, #72]	; (8007920 <pvPortMalloc+0x140>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b13      	ldr	r3, [pc, #76]	; (8007928 <pvPortMalloc+0x148>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d203      	bcs.n	80078e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <pvPortMalloc+0x140>)
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	4b10      	ldr	r3, [pc, #64]	; (8007928 <pvPortMalloc+0x148>)
 80078e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	4b0b      	ldr	r3, [pc, #44]	; (800791c <pvPortMalloc+0x13c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078fc:	f7fe fe26 	bl	800654c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2207      	movs	r2, #7
 8007904:	4013      	ands	r3, r2
 8007906:	d001      	beq.n	800790c <pvPortMalloc+0x12c>
 8007908:	b672      	cpsid	i
 800790a:	e7fe      	b.n	800790a <pvPortMalloc+0x12a>
	return pvReturn;
 800790c:	68fb      	ldr	r3, [r7, #12]
}
 800790e:	0018      	movs	r0, r3
 8007910:	46bd      	mov	sp, r7
 8007912:	b006      	add	sp, #24
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	20001c5c 	.word	0x20001c5c
 800791c:	20001c68 	.word	0x20001c68
 8007920:	20001c60 	.word	0x20001c60
 8007924:	20001c54 	.word	0x20001c54
 8007928:	20001c64 	.word	0x20001c64

0800792c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d035      	beq.n	80079aa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800793e:	2308      	movs	r3, #8
 8007940:	425b      	negs	r3, r3
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	18d3      	adds	r3, r2, r3
 8007946:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b18      	ldr	r3, [pc, #96]	; (80079b4 <vPortFree+0x88>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4013      	ands	r3, r2
 8007956:	d101      	bne.n	800795c <vPortFree+0x30>
 8007958:	b672      	cpsid	i
 800795a:	e7fe      	b.n	800795a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <vPortFree+0x3c>
 8007964:	b672      	cpsid	i
 8007966:	e7fe      	b.n	8007966 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <vPortFree+0x88>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4013      	ands	r3, r2
 8007972:	d01a      	beq.n	80079aa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d116      	bne.n	80079aa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <vPortFree+0x88>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	43db      	mvns	r3, r3
 8007986:	401a      	ands	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800798c:	f7fe fdd2 	bl	8006534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b08      	ldr	r3, [pc, #32]	; (80079b8 <vPortFree+0x8c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	18d2      	adds	r2, r2, r3
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <vPortFree+0x8c>)
 800799c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 f86b 	bl	8007a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079a6:	f7fe fdd1 	bl	800654c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	46bd      	mov	sp, r7
 80079ae:	b004      	add	sp, #16
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	46c0      	nop			; (mov r8, r8)
 80079b4:	20001c68 	.word	0x20001c68
 80079b8:	20001c60 	.word	0x20001c60

080079bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079c2:	23c0      	movs	r3, #192	; 0xc0
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079c8:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <prvHeapInit+0xa8>)
 80079ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2207      	movs	r2, #7
 80079d0:	4013      	ands	r3, r2
 80079d2:	d00c      	beq.n	80079ee <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3307      	adds	r3, #7
 80079d8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2207      	movs	r2, #7
 80079de:	4393      	bics	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1ad2      	subs	r2, r2, r3
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <prvHeapInit+0xa8>)
 80079ea:	18d3      	adds	r3, r2, r3
 80079ec:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079f2:	4b1d      	ldr	r3, [pc, #116]	; (8007a68 <prvHeapInit+0xac>)
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079f8:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <prvHeapInit+0xac>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	18d3      	adds	r3, r2, r3
 8007a04:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a06:	2208      	movs	r2, #8
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2207      	movs	r2, #7
 8007a12:	4393      	bics	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <prvHeapInit+0xb0>)
 8007a1a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007a1c:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <prvHeapInit+0xb0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <prvHeapInit+0xb0>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <prvHeapInit+0xb0>)
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <prvHeapInit+0xb4>)
 8007a48:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <prvHeapInit+0xb8>)
 8007a50:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <prvHeapInit+0xbc>)
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	0612      	lsls	r2, r2, #24
 8007a58:	601a      	str	r2, [r3, #0]
}
 8007a5a:	46c0      	nop			; (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	b004      	add	sp, #16
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	46c0      	nop			; (mov r8, r8)
 8007a64:	20001054 	.word	0x20001054
 8007a68:	20001c54 	.word	0x20001c54
 8007a6c:	20001c5c 	.word	0x20001c5c
 8007a70:	20001c64 	.word	0x20001c64
 8007a74:	20001c60 	.word	0x20001c60
 8007a78:	20001c68 	.word	0x20001c68

08007a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a84:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <prvInsertBlockIntoFreeList+0xa8>)
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e002      	b.n	8007a90 <prvInsertBlockIntoFreeList+0x14>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d8f7      	bhi.n	8007a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	18d3      	adds	r3, r2, r3
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d108      	bne.n	8007abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	18d2      	adds	r2, r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	18d2      	adds	r2, r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d118      	bne.n	8007b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <prvInsertBlockIntoFreeList+0xac>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d00d      	beq.n	8007afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	18d2      	adds	r2, r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e008      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <prvInsertBlockIntoFreeList+0xac>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e003      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d002      	beq.n	8007b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b004      	add	sp, #16
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	20001c54 	.word	0x20001c54
 8007b28:	20001c5c 	.word	0x20001c5c

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	; (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	20000010 	.word	0x20000010

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	4d0c      	ldr	r5, [pc, #48]	; (8007b70 <__libc_init_array+0x38>)
 8007b3e:	4c0d      	ldr	r4, [pc, #52]	; (8007b74 <__libc_init_array+0x3c>)
 8007b40:	1b64      	subs	r4, r4, r5
 8007b42:	10a4      	asrs	r4, r4, #2
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	2600      	movs	r6, #0
 8007b4a:	f000 fcff 	bl	800854c <_init>
 8007b4e:	4d0a      	ldr	r5, [pc, #40]	; (8007b78 <__libc_init_array+0x40>)
 8007b50:	4c0a      	ldr	r4, [pc, #40]	; (8007b7c <__libc_init_array+0x44>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	00b3      	lsls	r3, r6, #2
 8007b5e:	58eb      	ldr	r3, [r5, r3]
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	00b3      	lsls	r3, r6, #2
 8007b68:	58eb      	ldr	r3, [r5, r3]
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	0800881c 	.word	0x0800881c
 8007b74:	0800881c 	.word	0x0800881c
 8007b78:	0800881c 	.word	0x0800881c
 8007b7c:	08008820 	.word	0x08008820

08007b80 <__retarget_lock_acquire_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_release_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <memcpy>:
 8007b84:	2300      	movs	r3, #0
 8007b86:	b510      	push	{r4, lr}
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d100      	bne.n	8007b8e <memcpy+0xa>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	5ccc      	ldrb	r4, [r1, r3]
 8007b90:	54c4      	strb	r4, [r0, r3]
 8007b92:	3301      	adds	r3, #1
 8007b94:	e7f8      	b.n	8007b88 <memcpy+0x4>

08007b96 <memset>:
 8007b96:	0003      	movs	r3, r0
 8007b98:	1882      	adds	r2, r0, r2
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d100      	bne.n	8007ba0 <memset+0xa>
 8007b9e:	4770      	bx	lr
 8007ba0:	7019      	strb	r1, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	e7f9      	b.n	8007b9a <memset+0x4>
	...

08007ba8 <sbrk_aligned>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4e0f      	ldr	r6, [pc, #60]	; (8007be8 <sbrk_aligned+0x40>)
 8007bac:	000d      	movs	r5, r1
 8007bae:	6831      	ldr	r1, [r6, #0]
 8007bb0:	0004      	movs	r4, r0
 8007bb2:	2900      	cmp	r1, #0
 8007bb4:	d102      	bne.n	8007bbc <sbrk_aligned+0x14>
 8007bb6:	f000 f903 	bl	8007dc0 <_sbrk_r>
 8007bba:	6030      	str	r0, [r6, #0]
 8007bbc:	0029      	movs	r1, r5
 8007bbe:	0020      	movs	r0, r4
 8007bc0:	f000 f8fe 	bl	8007dc0 <_sbrk_r>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d00a      	beq.n	8007bde <sbrk_aligned+0x36>
 8007bc8:	2303      	movs	r3, #3
 8007bca:	1cc5      	adds	r5, r0, #3
 8007bcc:	439d      	bics	r5, r3
 8007bce:	42a8      	cmp	r0, r5
 8007bd0:	d007      	beq.n	8007be2 <sbrk_aligned+0x3a>
 8007bd2:	1a29      	subs	r1, r5, r0
 8007bd4:	0020      	movs	r0, r4
 8007bd6:	f000 f8f3 	bl	8007dc0 <_sbrk_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d101      	bne.n	8007be2 <sbrk_aligned+0x3a>
 8007bde:	2501      	movs	r5, #1
 8007be0:	426d      	negs	r5, r5
 8007be2:	0028      	movs	r0, r5
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
 8007be6:	46c0      	nop			; (mov r8, r8)
 8007be8:	20001c74 	.word	0x20001c74

08007bec <_malloc_r>:
 8007bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bee:	2203      	movs	r2, #3
 8007bf0:	1ccb      	adds	r3, r1, #3
 8007bf2:	4393      	bics	r3, r2
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	0006      	movs	r6, r0
 8007bf8:	001f      	movs	r7, r3
 8007bfa:	2b0c      	cmp	r3, #12
 8007bfc:	d232      	bcs.n	8007c64 <_malloc_r+0x78>
 8007bfe:	270c      	movs	r7, #12
 8007c00:	42b9      	cmp	r1, r7
 8007c02:	d831      	bhi.n	8007c68 <_malloc_r+0x7c>
 8007c04:	0030      	movs	r0, r6
 8007c06:	f000 f90d 	bl	8007e24 <__malloc_lock>
 8007c0a:	4d32      	ldr	r5, [pc, #200]	; (8007cd4 <_malloc_r+0xe8>)
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	001c      	movs	r4, r3
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	d12e      	bne.n	8007c72 <_malloc_r+0x86>
 8007c14:	0039      	movs	r1, r7
 8007c16:	0030      	movs	r0, r6
 8007c18:	f7ff ffc6 	bl	8007ba8 <sbrk_aligned>
 8007c1c:	0004      	movs	r4, r0
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	d11e      	bne.n	8007c60 <_malloc_r+0x74>
 8007c22:	682c      	ldr	r4, [r5, #0]
 8007c24:	0025      	movs	r5, r4
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	d14a      	bne.n	8007cc0 <_malloc_r+0xd4>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	0029      	movs	r1, r5
 8007c2e:	18e3      	adds	r3, r4, r3
 8007c30:	0030      	movs	r0, r6
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	f000 f8c4 	bl	8007dc0 <_sbrk_r>
 8007c38:	9b01      	ldr	r3, [sp, #4]
 8007c3a:	4283      	cmp	r3, r0
 8007c3c:	d143      	bne.n	8007cc6 <_malloc_r+0xda>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	3703      	adds	r7, #3
 8007c42:	1aff      	subs	r7, r7, r3
 8007c44:	2303      	movs	r3, #3
 8007c46:	439f      	bics	r7, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	2f0c      	cmp	r7, #12
 8007c4c:	d200      	bcs.n	8007c50 <_malloc_r+0x64>
 8007c4e:	270c      	movs	r7, #12
 8007c50:	0039      	movs	r1, r7
 8007c52:	0030      	movs	r0, r6
 8007c54:	f7ff ffa8 	bl	8007ba8 <sbrk_aligned>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d034      	beq.n	8007cc6 <_malloc_r+0xda>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	19df      	adds	r7, r3, r7
 8007c60:	6027      	str	r7, [r4, #0]
 8007c62:	e013      	b.n	8007c8c <_malloc_r+0xa0>
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	dacb      	bge.n	8007c00 <_malloc_r+0x14>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	0028      	movs	r0, r5
 8007c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	1bd1      	subs	r1, r2, r7
 8007c76:	d420      	bmi.n	8007cba <_malloc_r+0xce>
 8007c78:	290b      	cmp	r1, #11
 8007c7a:	d917      	bls.n	8007cac <_malloc_r+0xc0>
 8007c7c:	19e2      	adds	r2, r4, r7
 8007c7e:	6027      	str	r7, [r4, #0]
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d111      	bne.n	8007ca8 <_malloc_r+0xbc>
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	6863      	ldr	r3, [r4, #4]
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	6053      	str	r3, [r2, #4]
 8007c8c:	0030      	movs	r0, r6
 8007c8e:	0025      	movs	r5, r4
 8007c90:	f000 f8d0 	bl	8007e34 <__malloc_unlock>
 8007c94:	2207      	movs	r2, #7
 8007c96:	350b      	adds	r5, #11
 8007c98:	1d23      	adds	r3, r4, #4
 8007c9a:	4395      	bics	r5, r2
 8007c9c:	1aea      	subs	r2, r5, r3
 8007c9e:	429d      	cmp	r5, r3
 8007ca0:	d0e5      	beq.n	8007c6e <_malloc_r+0x82>
 8007ca2:	1b5b      	subs	r3, r3, r5
 8007ca4:	50a3      	str	r3, [r4, r2]
 8007ca6:	e7e2      	b.n	8007c6e <_malloc_r+0x82>
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	e7ec      	b.n	8007c86 <_malloc_r+0x9a>
 8007cac:	6862      	ldr	r2, [r4, #4]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	d101      	bne.n	8007cb6 <_malloc_r+0xca>
 8007cb2:	602a      	str	r2, [r5, #0]
 8007cb4:	e7ea      	b.n	8007c8c <_malloc_r+0xa0>
 8007cb6:	605a      	str	r2, [r3, #4]
 8007cb8:	e7e8      	b.n	8007c8c <_malloc_r+0xa0>
 8007cba:	0023      	movs	r3, r4
 8007cbc:	6864      	ldr	r4, [r4, #4]
 8007cbe:	e7a7      	b.n	8007c10 <_malloc_r+0x24>
 8007cc0:	002c      	movs	r4, r5
 8007cc2:	686d      	ldr	r5, [r5, #4]
 8007cc4:	e7af      	b.n	8007c26 <_malloc_r+0x3a>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	0030      	movs	r0, r6
 8007cca:	6033      	str	r3, [r6, #0]
 8007ccc:	f000 f8b2 	bl	8007e34 <__malloc_unlock>
 8007cd0:	e7cd      	b.n	8007c6e <_malloc_r+0x82>
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	20001c70 	.word	0x20001c70

08007cd8 <cleanup_glue>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	000d      	movs	r5, r1
 8007cdc:	6809      	ldr	r1, [r1, #0]
 8007cde:	0004      	movs	r4, r0
 8007ce0:	2900      	cmp	r1, #0
 8007ce2:	d001      	beq.n	8007ce8 <cleanup_glue+0x10>
 8007ce4:	f7ff fff8 	bl	8007cd8 <cleanup_glue>
 8007ce8:	0029      	movs	r1, r5
 8007cea:	0020      	movs	r0, r4
 8007cec:	f000 f8aa 	bl	8007e44 <_free_r>
 8007cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007cf4 <_reclaim_reent>:
 8007cf4:	4b31      	ldr	r3, [pc, #196]	; (8007dbc <_reclaim_reent+0xc8>)
 8007cf6:	b570      	push	{r4, r5, r6, lr}
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	4283      	cmp	r3, r0
 8007cfe:	d049      	beq.n	8007d94 <_reclaim_reent+0xa0>
 8007d00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <_reclaim_reent+0x28>
 8007d06:	2500      	movs	r5, #0
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	42ab      	cmp	r3, r5
 8007d0c:	d147      	bne.n	8007d9e <_reclaim_reent+0xaa>
 8007d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d10:	6819      	ldr	r1, [r3, #0]
 8007d12:	2900      	cmp	r1, #0
 8007d14:	d002      	beq.n	8007d1c <_reclaim_reent+0x28>
 8007d16:	0020      	movs	r0, r4
 8007d18:	f000 f894 	bl	8007e44 <_free_r>
 8007d1c:	6961      	ldr	r1, [r4, #20]
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d002      	beq.n	8007d28 <_reclaim_reent+0x34>
 8007d22:	0020      	movs	r0, r4
 8007d24:	f000 f88e 	bl	8007e44 <_free_r>
 8007d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d2a:	2900      	cmp	r1, #0
 8007d2c:	d002      	beq.n	8007d34 <_reclaim_reent+0x40>
 8007d2e:	0020      	movs	r0, r4
 8007d30:	f000 f888 	bl	8007e44 <_free_r>
 8007d34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d002      	beq.n	8007d40 <_reclaim_reent+0x4c>
 8007d3a:	0020      	movs	r0, r4
 8007d3c:	f000 f882 	bl	8007e44 <_free_r>
 8007d40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d42:	2900      	cmp	r1, #0
 8007d44:	d002      	beq.n	8007d4c <_reclaim_reent+0x58>
 8007d46:	0020      	movs	r0, r4
 8007d48:	f000 f87c 	bl	8007e44 <_free_r>
 8007d4c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d002      	beq.n	8007d58 <_reclaim_reent+0x64>
 8007d52:	0020      	movs	r0, r4
 8007d54:	f000 f876 	bl	8007e44 <_free_r>
 8007d58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	d002      	beq.n	8007d64 <_reclaim_reent+0x70>
 8007d5e:	0020      	movs	r0, r4
 8007d60:	f000 f870 	bl	8007e44 <_free_r>
 8007d64:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d66:	2900      	cmp	r1, #0
 8007d68:	d002      	beq.n	8007d70 <_reclaim_reent+0x7c>
 8007d6a:	0020      	movs	r0, r4
 8007d6c:	f000 f86a 	bl	8007e44 <_free_r>
 8007d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d72:	2900      	cmp	r1, #0
 8007d74:	d002      	beq.n	8007d7c <_reclaim_reent+0x88>
 8007d76:	0020      	movs	r0, r4
 8007d78:	f000 f864 	bl	8007e44 <_free_r>
 8007d7c:	69a3      	ldr	r3, [r4, #24]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <_reclaim_reent+0xa0>
 8007d82:	0020      	movs	r0, r4
 8007d84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d86:	4798      	blx	r3
 8007d88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	d002      	beq.n	8007d94 <_reclaim_reent+0xa0>
 8007d8e:	0020      	movs	r0, r4
 8007d90:	f7ff ffa2 	bl	8007cd8 <cleanup_glue>
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	5949      	ldr	r1, [r1, r5]
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	d108      	bne.n	8007dae <_reclaim_reent+0xba>
 8007d9c:	3504      	adds	r5, #4
 8007d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da0:	68d9      	ldr	r1, [r3, #12]
 8007da2:	2d80      	cmp	r5, #128	; 0x80
 8007da4:	d1f7      	bne.n	8007d96 <_reclaim_reent+0xa2>
 8007da6:	0020      	movs	r0, r4
 8007da8:	f000 f84c 	bl	8007e44 <_free_r>
 8007dac:	e7af      	b.n	8007d0e <_reclaim_reent+0x1a>
 8007dae:	680e      	ldr	r6, [r1, #0]
 8007db0:	0020      	movs	r0, r4
 8007db2:	f000 f847 	bl	8007e44 <_free_r>
 8007db6:	0031      	movs	r1, r6
 8007db8:	e7ee      	b.n	8007d98 <_reclaim_reent+0xa4>
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	20000010 	.word	0x20000010

08007dc0 <_sbrk_r>:
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	b570      	push	{r4, r5, r6, lr}
 8007dc4:	4d06      	ldr	r5, [pc, #24]	; (8007de0 <_sbrk_r+0x20>)
 8007dc6:	0004      	movs	r4, r0
 8007dc8:	0008      	movs	r0, r1
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7f9 fe18 	bl	8001a00 <_sbrk>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d103      	bne.n	8007ddc <_sbrk_r+0x1c>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d000      	beq.n	8007ddc <_sbrk_r+0x1c>
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	20001c78 	.word	0x20001c78

08007de4 <siprintf>:
 8007de4:	b40e      	push	{r1, r2, r3}
 8007de6:	b500      	push	{lr}
 8007de8:	490b      	ldr	r1, [pc, #44]	; (8007e18 <siprintf+0x34>)
 8007dea:	b09c      	sub	sp, #112	; 0x70
 8007dec:	ab1d      	add	r3, sp, #116	; 0x74
 8007dee:	9002      	str	r0, [sp, #8]
 8007df0:	9006      	str	r0, [sp, #24]
 8007df2:	9107      	str	r1, [sp, #28]
 8007df4:	9104      	str	r1, [sp, #16]
 8007df6:	4809      	ldr	r0, [pc, #36]	; (8007e1c <siprintf+0x38>)
 8007df8:	4909      	ldr	r1, [pc, #36]	; (8007e20 <siprintf+0x3c>)
 8007dfa:	cb04      	ldmia	r3!, {r2}
 8007dfc:	9105      	str	r1, [sp, #20]
 8007dfe:	6800      	ldr	r0, [r0, #0]
 8007e00:	a902      	add	r1, sp, #8
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	f000 f8ca 	bl	8007f9c <_svfiprintf_r>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9a02      	ldr	r2, [sp, #8]
 8007e0c:	7013      	strb	r3, [r2, #0]
 8007e0e:	b01c      	add	sp, #112	; 0x70
 8007e10:	bc08      	pop	{r3}
 8007e12:	b003      	add	sp, #12
 8007e14:	4718      	bx	r3
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	7fffffff 	.word	0x7fffffff
 8007e1c:	20000010 	.word	0x20000010
 8007e20:	ffff0208 	.word	0xffff0208

08007e24 <__malloc_lock>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4802      	ldr	r0, [pc, #8]	; (8007e30 <__malloc_lock+0xc>)
 8007e28:	f7ff feaa 	bl	8007b80 <__retarget_lock_acquire_recursive>
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	20001c6c 	.word	0x20001c6c

08007e34 <__malloc_unlock>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	4802      	ldr	r0, [pc, #8]	; (8007e40 <__malloc_unlock+0xc>)
 8007e38:	f7ff fea3 	bl	8007b82 <__retarget_lock_release_recursive>
 8007e3c:	bd10      	pop	{r4, pc}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	20001c6c 	.word	0x20001c6c

08007e44 <_free_r>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	0005      	movs	r5, r0
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	d010      	beq.n	8007e6e <_free_r+0x2a>
 8007e4c:	1f0c      	subs	r4, r1, #4
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da00      	bge.n	8007e56 <_free_r+0x12>
 8007e54:	18e4      	adds	r4, r4, r3
 8007e56:	0028      	movs	r0, r5
 8007e58:	f7ff ffe4 	bl	8007e24 <__malloc_lock>
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <_free_r+0x90>)
 8007e5e:	6813      	ldr	r3, [r2, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <_free_r+0x2c>
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	6014      	str	r4, [r2, #0]
 8007e68:	0028      	movs	r0, r5
 8007e6a:	f7ff ffe3 	bl	8007e34 <__malloc_unlock>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	d908      	bls.n	8007e86 <_free_r+0x42>
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	1860      	adds	r0, r4, r1
 8007e78:	4283      	cmp	r3, r0
 8007e7a:	d1f3      	bne.n	8007e64 <_free_r+0x20>
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	1841      	adds	r1, r0, r1
 8007e82:	6021      	str	r1, [r4, #0]
 8007e84:	e7ee      	b.n	8007e64 <_free_r+0x20>
 8007e86:	001a      	movs	r2, r3
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <_free_r+0x4e>
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	d9f9      	bls.n	8007e86 <_free_r+0x42>
 8007e92:	6811      	ldr	r1, [r2, #0]
 8007e94:	1850      	adds	r0, r2, r1
 8007e96:	42a0      	cmp	r0, r4
 8007e98:	d10b      	bne.n	8007eb2 <_free_r+0x6e>
 8007e9a:	6820      	ldr	r0, [r4, #0]
 8007e9c:	1809      	adds	r1, r1, r0
 8007e9e:	1850      	adds	r0, r2, r1
 8007ea0:	6011      	str	r1, [r2, #0]
 8007ea2:	4283      	cmp	r3, r0
 8007ea4:	d1e0      	bne.n	8007e68 <_free_r+0x24>
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	1841      	adds	r1, r0, r1
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	6053      	str	r3, [r2, #4]
 8007eb0:	e7da      	b.n	8007e68 <_free_r+0x24>
 8007eb2:	42a0      	cmp	r0, r4
 8007eb4:	d902      	bls.n	8007ebc <_free_r+0x78>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	e7d5      	b.n	8007e68 <_free_r+0x24>
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	1860      	adds	r0, r4, r1
 8007ec0:	4283      	cmp	r3, r0
 8007ec2:	d103      	bne.n	8007ecc <_free_r+0x88>
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	1841      	adds	r1, r0, r1
 8007eca:	6021      	str	r1, [r4, #0]
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	6054      	str	r4, [r2, #4]
 8007ed0:	e7ca      	b.n	8007e68 <_free_r+0x24>
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	20001c70 	.word	0x20001c70

08007ed8 <__ssputs_r>:
 8007ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eda:	688e      	ldr	r6, [r1, #8]
 8007edc:	b085      	sub	sp, #20
 8007ede:	0007      	movs	r7, r0
 8007ee0:	000c      	movs	r4, r1
 8007ee2:	9203      	str	r2, [sp, #12]
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	429e      	cmp	r6, r3
 8007ee8:	d83c      	bhi.n	8007f64 <__ssputs_r+0x8c>
 8007eea:	2390      	movs	r3, #144	; 0x90
 8007eec:	898a      	ldrh	r2, [r1, #12]
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	421a      	tst	r2, r3
 8007ef2:	d034      	beq.n	8007f5e <__ssputs_r+0x86>
 8007ef4:	6909      	ldr	r1, [r1, #16]
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6960      	ldr	r0, [r4, #20]
 8007efa:	1a5b      	subs	r3, r3, r1
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	2303      	movs	r3, #3
 8007f00:	4343      	muls	r3, r0
 8007f02:	0fdd      	lsrs	r5, r3, #31
 8007f04:	18ed      	adds	r5, r5, r3
 8007f06:	9b01      	ldr	r3, [sp, #4]
 8007f08:	9802      	ldr	r0, [sp, #8]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	181b      	adds	r3, r3, r0
 8007f0e:	106d      	asrs	r5, r5, #1
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	d900      	bls.n	8007f16 <__ssputs_r+0x3e>
 8007f14:	001d      	movs	r5, r3
 8007f16:	0553      	lsls	r3, r2, #21
 8007f18:	d532      	bpl.n	8007f80 <__ssputs_r+0xa8>
 8007f1a:	0029      	movs	r1, r5
 8007f1c:	0038      	movs	r0, r7
 8007f1e:	f7ff fe65 	bl	8007bec <_malloc_r>
 8007f22:	1e06      	subs	r6, r0, #0
 8007f24:	d109      	bne.n	8007f3a <__ssputs_r+0x62>
 8007f26:	230c      	movs	r3, #12
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	89a2      	ldrh	r2, [r4, #12]
 8007f30:	4240      	negs	r0, r0
 8007f32:	4313      	orrs	r3, r2
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	b005      	add	sp, #20
 8007f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f3a:	9a02      	ldr	r2, [sp, #8]
 8007f3c:	6921      	ldr	r1, [r4, #16]
 8007f3e:	f7ff fe21 	bl	8007b84 <memcpy>
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <__ssputs_r+0xc0>)
 8007f46:	401a      	ands	r2, r3
 8007f48:	2380      	movs	r3, #128	; 0x80
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	9b02      	ldr	r3, [sp, #8]
 8007f50:	6126      	str	r6, [r4, #16]
 8007f52:	18f6      	adds	r6, r6, r3
 8007f54:	6026      	str	r6, [r4, #0]
 8007f56:	6165      	str	r5, [r4, #20]
 8007f58:	9e01      	ldr	r6, [sp, #4]
 8007f5a:	1aed      	subs	r5, r5, r3
 8007f5c:	60a5      	str	r5, [r4, #8]
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	429e      	cmp	r6, r3
 8007f62:	d900      	bls.n	8007f66 <__ssputs_r+0x8e>
 8007f64:	9e01      	ldr	r6, [sp, #4]
 8007f66:	0032      	movs	r2, r6
 8007f68:	9903      	ldr	r1, [sp, #12]
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	f000 faa3 	bl	80084b6 <memmove>
 8007f70:	68a3      	ldr	r3, [r4, #8]
 8007f72:	2000      	movs	r0, #0
 8007f74:	1b9b      	subs	r3, r3, r6
 8007f76:	60a3      	str	r3, [r4, #8]
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	199e      	adds	r6, r3, r6
 8007f7c:	6026      	str	r6, [r4, #0]
 8007f7e:	e7da      	b.n	8007f36 <__ssputs_r+0x5e>
 8007f80:	002a      	movs	r2, r5
 8007f82:	0038      	movs	r0, r7
 8007f84:	f000 faaa 	bl	80084dc <_realloc_r>
 8007f88:	1e06      	subs	r6, r0, #0
 8007f8a:	d1e0      	bne.n	8007f4e <__ssputs_r+0x76>
 8007f8c:	0038      	movs	r0, r7
 8007f8e:	6921      	ldr	r1, [r4, #16]
 8007f90:	f7ff ff58 	bl	8007e44 <_free_r>
 8007f94:	e7c7      	b.n	8007f26 <__ssputs_r+0x4e>
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	fffffb7f 	.word	0xfffffb7f

08007f9c <_svfiprintf_r>:
 8007f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9e:	b0a1      	sub	sp, #132	; 0x84
 8007fa0:	9003      	str	r0, [sp, #12]
 8007fa2:	001d      	movs	r5, r3
 8007fa4:	898b      	ldrh	r3, [r1, #12]
 8007fa6:	000f      	movs	r7, r1
 8007fa8:	0016      	movs	r6, r2
 8007faa:	061b      	lsls	r3, r3, #24
 8007fac:	d511      	bpl.n	8007fd2 <_svfiprintf_r+0x36>
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10e      	bne.n	8007fd2 <_svfiprintf_r+0x36>
 8007fb4:	2140      	movs	r1, #64	; 0x40
 8007fb6:	f7ff fe19 	bl	8007bec <_malloc_r>
 8007fba:	6038      	str	r0, [r7, #0]
 8007fbc:	6138      	str	r0, [r7, #16]
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d105      	bne.n	8007fce <_svfiprintf_r+0x32>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	9a03      	ldr	r2, [sp, #12]
 8007fc6:	3801      	subs	r0, #1
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	b021      	add	sp, #132	; 0x84
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fce:	2340      	movs	r3, #64	; 0x40
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	ac08      	add	r4, sp, #32
 8007fd6:	6163      	str	r3, [r4, #20]
 8007fd8:	3320      	adds	r3, #32
 8007fda:	7663      	strb	r3, [r4, #25]
 8007fdc:	3310      	adds	r3, #16
 8007fde:	76a3      	strb	r3, [r4, #26]
 8007fe0:	9507      	str	r5, [sp, #28]
 8007fe2:	0035      	movs	r5, r6
 8007fe4:	782b      	ldrb	r3, [r5, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <_svfiprintf_r+0x52>
 8007fea:	2b25      	cmp	r3, #37	; 0x25
 8007fec:	d147      	bne.n	800807e <_svfiprintf_r+0xe2>
 8007fee:	1bab      	subs	r3, r5, r6
 8007ff0:	9305      	str	r3, [sp, #20]
 8007ff2:	42b5      	cmp	r5, r6
 8007ff4:	d00c      	beq.n	8008010 <_svfiprintf_r+0x74>
 8007ff6:	0032      	movs	r2, r6
 8007ff8:	0039      	movs	r1, r7
 8007ffa:	9803      	ldr	r0, [sp, #12]
 8007ffc:	f7ff ff6c 	bl	8007ed8 <__ssputs_r>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d100      	bne.n	8008006 <_svfiprintf_r+0x6a>
 8008004:	e0ae      	b.n	8008164 <_svfiprintf_r+0x1c8>
 8008006:	6962      	ldr	r2, [r4, #20]
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	4694      	mov	ip, r2
 800800c:	4463      	add	r3, ip
 800800e:	6163      	str	r3, [r4, #20]
 8008010:	782b      	ldrb	r3, [r5, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d100      	bne.n	8008018 <_svfiprintf_r+0x7c>
 8008016:	e0a5      	b.n	8008164 <_svfiprintf_r+0x1c8>
 8008018:	2201      	movs	r2, #1
 800801a:	2300      	movs	r3, #0
 800801c:	4252      	negs	r2, r2
 800801e:	6062      	str	r2, [r4, #4]
 8008020:	a904      	add	r1, sp, #16
 8008022:	3254      	adds	r2, #84	; 0x54
 8008024:	1852      	adds	r2, r2, r1
 8008026:	1c6e      	adds	r6, r5, #1
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	60e3      	str	r3, [r4, #12]
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	7013      	strb	r3, [r2, #0]
 8008030:	65a3      	str	r3, [r4, #88]	; 0x58
 8008032:	2205      	movs	r2, #5
 8008034:	7831      	ldrb	r1, [r6, #0]
 8008036:	4854      	ldr	r0, [pc, #336]	; (8008188 <_svfiprintf_r+0x1ec>)
 8008038:	f000 fa32 	bl	80084a0 <memchr>
 800803c:	1c75      	adds	r5, r6, #1
 800803e:	2800      	cmp	r0, #0
 8008040:	d11f      	bne.n	8008082 <_svfiprintf_r+0xe6>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	06d3      	lsls	r3, r2, #27
 8008046:	d504      	bpl.n	8008052 <_svfiprintf_r+0xb6>
 8008048:	2353      	movs	r3, #83	; 0x53
 800804a:	a904      	add	r1, sp, #16
 800804c:	185b      	adds	r3, r3, r1
 800804e:	2120      	movs	r1, #32
 8008050:	7019      	strb	r1, [r3, #0]
 8008052:	0713      	lsls	r3, r2, #28
 8008054:	d504      	bpl.n	8008060 <_svfiprintf_r+0xc4>
 8008056:	2353      	movs	r3, #83	; 0x53
 8008058:	a904      	add	r1, sp, #16
 800805a:	185b      	adds	r3, r3, r1
 800805c:	212b      	movs	r1, #43	; 0x2b
 800805e:	7019      	strb	r1, [r3, #0]
 8008060:	7833      	ldrb	r3, [r6, #0]
 8008062:	2b2a      	cmp	r3, #42	; 0x2a
 8008064:	d016      	beq.n	8008094 <_svfiprintf_r+0xf8>
 8008066:	0035      	movs	r5, r6
 8008068:	2100      	movs	r1, #0
 800806a:	200a      	movs	r0, #10
 800806c:	68e3      	ldr	r3, [r4, #12]
 800806e:	782a      	ldrb	r2, [r5, #0]
 8008070:	1c6e      	adds	r6, r5, #1
 8008072:	3a30      	subs	r2, #48	; 0x30
 8008074:	2a09      	cmp	r2, #9
 8008076:	d94e      	bls.n	8008116 <_svfiprintf_r+0x17a>
 8008078:	2900      	cmp	r1, #0
 800807a:	d111      	bne.n	80080a0 <_svfiprintf_r+0x104>
 800807c:	e017      	b.n	80080ae <_svfiprintf_r+0x112>
 800807e:	3501      	adds	r5, #1
 8008080:	e7b0      	b.n	8007fe4 <_svfiprintf_r+0x48>
 8008082:	4b41      	ldr	r3, [pc, #260]	; (8008188 <_svfiprintf_r+0x1ec>)
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	1ac0      	subs	r0, r0, r3
 8008088:	2301      	movs	r3, #1
 800808a:	4083      	lsls	r3, r0
 800808c:	4313      	orrs	r3, r2
 800808e:	002e      	movs	r6, r5
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	e7ce      	b.n	8008032 <_svfiprintf_r+0x96>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	1d19      	adds	r1, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	9107      	str	r1, [sp, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	db01      	blt.n	80080a4 <_svfiprintf_r+0x108>
 80080a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a2:	e004      	b.n	80080ae <_svfiprintf_r+0x112>
 80080a4:	425b      	negs	r3, r3
 80080a6:	60e3      	str	r3, [r4, #12]
 80080a8:	2302      	movs	r3, #2
 80080aa:	4313      	orrs	r3, r2
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	782b      	ldrb	r3, [r5, #0]
 80080b0:	2b2e      	cmp	r3, #46	; 0x2e
 80080b2:	d10a      	bne.n	80080ca <_svfiprintf_r+0x12e>
 80080b4:	786b      	ldrb	r3, [r5, #1]
 80080b6:	2b2a      	cmp	r3, #42	; 0x2a
 80080b8:	d135      	bne.n	8008126 <_svfiprintf_r+0x18a>
 80080ba:	9b07      	ldr	r3, [sp, #28]
 80080bc:	3502      	adds	r5, #2
 80080be:	1d1a      	adds	r2, r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	9207      	str	r2, [sp, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	db2b      	blt.n	8008120 <_svfiprintf_r+0x184>
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	4e30      	ldr	r6, [pc, #192]	; (800818c <_svfiprintf_r+0x1f0>)
 80080cc:	2203      	movs	r2, #3
 80080ce:	0030      	movs	r0, r6
 80080d0:	7829      	ldrb	r1, [r5, #0]
 80080d2:	f000 f9e5 	bl	80084a0 <memchr>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d006      	beq.n	80080e8 <_svfiprintf_r+0x14c>
 80080da:	2340      	movs	r3, #64	; 0x40
 80080dc:	1b80      	subs	r0, r0, r6
 80080de:	4083      	lsls	r3, r0
 80080e0:	6822      	ldr	r2, [r4, #0]
 80080e2:	3501      	adds	r5, #1
 80080e4:	4313      	orrs	r3, r2
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	7829      	ldrb	r1, [r5, #0]
 80080ea:	2206      	movs	r2, #6
 80080ec:	4828      	ldr	r0, [pc, #160]	; (8008190 <_svfiprintf_r+0x1f4>)
 80080ee:	1c6e      	adds	r6, r5, #1
 80080f0:	7621      	strb	r1, [r4, #24]
 80080f2:	f000 f9d5 	bl	80084a0 <memchr>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d03c      	beq.n	8008174 <_svfiprintf_r+0x1d8>
 80080fa:	4b26      	ldr	r3, [pc, #152]	; (8008194 <_svfiprintf_r+0x1f8>)
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d125      	bne.n	800814c <_svfiprintf_r+0x1b0>
 8008100:	2207      	movs	r2, #7
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	3307      	adds	r3, #7
 8008106:	4393      	bics	r3, r2
 8008108:	3308      	adds	r3, #8
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	6963      	ldr	r3, [r4, #20]
 800810e:	9a04      	ldr	r2, [sp, #16]
 8008110:	189b      	adds	r3, r3, r2
 8008112:	6163      	str	r3, [r4, #20]
 8008114:	e765      	b.n	8007fe2 <_svfiprintf_r+0x46>
 8008116:	4343      	muls	r3, r0
 8008118:	0035      	movs	r5, r6
 800811a:	2101      	movs	r1, #1
 800811c:	189b      	adds	r3, r3, r2
 800811e:	e7a6      	b.n	800806e <_svfiprintf_r+0xd2>
 8008120:	2301      	movs	r3, #1
 8008122:	425b      	negs	r3, r3
 8008124:	e7d0      	b.n	80080c8 <_svfiprintf_r+0x12c>
 8008126:	2300      	movs	r3, #0
 8008128:	200a      	movs	r0, #10
 800812a:	001a      	movs	r2, r3
 800812c:	3501      	adds	r5, #1
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	7829      	ldrb	r1, [r5, #0]
 8008132:	1c6e      	adds	r6, r5, #1
 8008134:	3930      	subs	r1, #48	; 0x30
 8008136:	2909      	cmp	r1, #9
 8008138:	d903      	bls.n	8008142 <_svfiprintf_r+0x1a6>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0c5      	beq.n	80080ca <_svfiprintf_r+0x12e>
 800813e:	9209      	str	r2, [sp, #36]	; 0x24
 8008140:	e7c3      	b.n	80080ca <_svfiprintf_r+0x12e>
 8008142:	4342      	muls	r2, r0
 8008144:	0035      	movs	r5, r6
 8008146:	2301      	movs	r3, #1
 8008148:	1852      	adds	r2, r2, r1
 800814a:	e7f1      	b.n	8008130 <_svfiprintf_r+0x194>
 800814c:	ab07      	add	r3, sp, #28
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	003a      	movs	r2, r7
 8008152:	0021      	movs	r1, r4
 8008154:	4b10      	ldr	r3, [pc, #64]	; (8008198 <_svfiprintf_r+0x1fc>)
 8008156:	9803      	ldr	r0, [sp, #12]
 8008158:	e000      	b.n	800815c <_svfiprintf_r+0x1c0>
 800815a:	bf00      	nop
 800815c:	9004      	str	r0, [sp, #16]
 800815e:	9b04      	ldr	r3, [sp, #16]
 8008160:	3301      	adds	r3, #1
 8008162:	d1d3      	bne.n	800810c <_svfiprintf_r+0x170>
 8008164:	89bb      	ldrh	r3, [r7, #12]
 8008166:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008168:	065b      	lsls	r3, r3, #25
 800816a:	d400      	bmi.n	800816e <_svfiprintf_r+0x1d2>
 800816c:	e72d      	b.n	8007fca <_svfiprintf_r+0x2e>
 800816e:	2001      	movs	r0, #1
 8008170:	4240      	negs	r0, r0
 8008172:	e72a      	b.n	8007fca <_svfiprintf_r+0x2e>
 8008174:	ab07      	add	r3, sp, #28
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	003a      	movs	r2, r7
 800817a:	0021      	movs	r1, r4
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <_svfiprintf_r+0x1fc>)
 800817e:	9803      	ldr	r0, [sp, #12]
 8008180:	f000 f87c 	bl	800827c <_printf_i>
 8008184:	e7ea      	b.n	800815c <_svfiprintf_r+0x1c0>
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	080087e8 	.word	0x080087e8
 800818c:	080087ee 	.word	0x080087ee
 8008190:	080087f2 	.word	0x080087f2
 8008194:	00000000 	.word	0x00000000
 8008198:	08007ed9 	.word	0x08007ed9

0800819c <_printf_common>:
 800819c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800819e:	0015      	movs	r5, r2
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	688a      	ldr	r2, [r1, #8]
 80081a4:	690b      	ldr	r3, [r1, #16]
 80081a6:	000c      	movs	r4, r1
 80081a8:	9000      	str	r0, [sp, #0]
 80081aa:	4293      	cmp	r3, r2
 80081ac:	da00      	bge.n	80081b0 <_printf_common+0x14>
 80081ae:	0013      	movs	r3, r2
 80081b0:	0022      	movs	r2, r4
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	3243      	adds	r2, #67	; 0x43
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	d001      	beq.n	80081c0 <_printf_common+0x24>
 80081bc:	3301      	adds	r3, #1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	069b      	lsls	r3, r3, #26
 80081c4:	d502      	bpl.n	80081cc <_printf_common+0x30>
 80081c6:	682b      	ldr	r3, [r5, #0]
 80081c8:	3302      	adds	r3, #2
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	2306      	movs	r3, #6
 80081d0:	0017      	movs	r7, r2
 80081d2:	401f      	ands	r7, r3
 80081d4:	421a      	tst	r2, r3
 80081d6:	d027      	beq.n	8008228 <_printf_common+0x8c>
 80081d8:	0023      	movs	r3, r4
 80081da:	3343      	adds	r3, #67	; 0x43
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	1e5a      	subs	r2, r3, #1
 80081e0:	4193      	sbcs	r3, r2
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	0692      	lsls	r2, r2, #26
 80081e6:	d430      	bmi.n	800824a <_printf_common+0xae>
 80081e8:	0022      	movs	r2, r4
 80081ea:	9901      	ldr	r1, [sp, #4]
 80081ec:	9800      	ldr	r0, [sp, #0]
 80081ee:	9e08      	ldr	r6, [sp, #32]
 80081f0:	3243      	adds	r2, #67	; 0x43
 80081f2:	47b0      	blx	r6
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d025      	beq.n	8008244 <_printf_common+0xa8>
 80081f8:	2306      	movs	r3, #6
 80081fa:	6820      	ldr	r0, [r4, #0]
 80081fc:	682a      	ldr	r2, [r5, #0]
 80081fe:	68e1      	ldr	r1, [r4, #12]
 8008200:	2500      	movs	r5, #0
 8008202:	4003      	ands	r3, r0
 8008204:	2b04      	cmp	r3, #4
 8008206:	d103      	bne.n	8008210 <_printf_common+0x74>
 8008208:	1a8d      	subs	r5, r1, r2
 800820a:	43eb      	mvns	r3, r5
 800820c:	17db      	asrs	r3, r3, #31
 800820e:	401d      	ands	r5, r3
 8008210:	68a3      	ldr	r3, [r4, #8]
 8008212:	6922      	ldr	r2, [r4, #16]
 8008214:	4293      	cmp	r3, r2
 8008216:	dd01      	ble.n	800821c <_printf_common+0x80>
 8008218:	1a9b      	subs	r3, r3, r2
 800821a:	18ed      	adds	r5, r5, r3
 800821c:	2700      	movs	r7, #0
 800821e:	42bd      	cmp	r5, r7
 8008220:	d120      	bne.n	8008264 <_printf_common+0xc8>
 8008222:	2000      	movs	r0, #0
 8008224:	e010      	b.n	8008248 <_printf_common+0xac>
 8008226:	3701      	adds	r7, #1
 8008228:	68e3      	ldr	r3, [r4, #12]
 800822a:	682a      	ldr	r2, [r5, #0]
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	42bb      	cmp	r3, r7
 8008230:	ddd2      	ble.n	80081d8 <_printf_common+0x3c>
 8008232:	0022      	movs	r2, r4
 8008234:	2301      	movs	r3, #1
 8008236:	9901      	ldr	r1, [sp, #4]
 8008238:	9800      	ldr	r0, [sp, #0]
 800823a:	9e08      	ldr	r6, [sp, #32]
 800823c:	3219      	adds	r2, #25
 800823e:	47b0      	blx	r6
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d1f0      	bne.n	8008226 <_printf_common+0x8a>
 8008244:	2001      	movs	r0, #1
 8008246:	4240      	negs	r0, r0
 8008248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800824a:	2030      	movs	r0, #48	; 0x30
 800824c:	18e1      	adds	r1, r4, r3
 800824e:	3143      	adds	r1, #67	; 0x43
 8008250:	7008      	strb	r0, [r1, #0]
 8008252:	0021      	movs	r1, r4
 8008254:	1c5a      	adds	r2, r3, #1
 8008256:	3145      	adds	r1, #69	; 0x45
 8008258:	7809      	ldrb	r1, [r1, #0]
 800825a:	18a2      	adds	r2, r4, r2
 800825c:	3243      	adds	r2, #67	; 0x43
 800825e:	3302      	adds	r3, #2
 8008260:	7011      	strb	r1, [r2, #0]
 8008262:	e7c1      	b.n	80081e8 <_printf_common+0x4c>
 8008264:	0022      	movs	r2, r4
 8008266:	2301      	movs	r3, #1
 8008268:	9901      	ldr	r1, [sp, #4]
 800826a:	9800      	ldr	r0, [sp, #0]
 800826c:	9e08      	ldr	r6, [sp, #32]
 800826e:	321a      	adds	r2, #26
 8008270:	47b0      	blx	r6
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d0e6      	beq.n	8008244 <_printf_common+0xa8>
 8008276:	3701      	adds	r7, #1
 8008278:	e7d1      	b.n	800821e <_printf_common+0x82>
	...

0800827c <_printf_i>:
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	b08b      	sub	sp, #44	; 0x2c
 8008280:	9206      	str	r2, [sp, #24]
 8008282:	000a      	movs	r2, r1
 8008284:	3243      	adds	r2, #67	; 0x43
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	9005      	str	r0, [sp, #20]
 800828a:	9204      	str	r2, [sp, #16]
 800828c:	7e0a      	ldrb	r2, [r1, #24]
 800828e:	000c      	movs	r4, r1
 8008290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008292:	2a78      	cmp	r2, #120	; 0x78
 8008294:	d807      	bhi.n	80082a6 <_printf_i+0x2a>
 8008296:	2a62      	cmp	r2, #98	; 0x62
 8008298:	d809      	bhi.n	80082ae <_printf_i+0x32>
 800829a:	2a00      	cmp	r2, #0
 800829c:	d100      	bne.n	80082a0 <_printf_i+0x24>
 800829e:	e0c1      	b.n	8008424 <_printf_i+0x1a8>
 80082a0:	2a58      	cmp	r2, #88	; 0x58
 80082a2:	d100      	bne.n	80082a6 <_printf_i+0x2a>
 80082a4:	e08c      	b.n	80083c0 <_printf_i+0x144>
 80082a6:	0026      	movs	r6, r4
 80082a8:	3642      	adds	r6, #66	; 0x42
 80082aa:	7032      	strb	r2, [r6, #0]
 80082ac:	e022      	b.n	80082f4 <_printf_i+0x78>
 80082ae:	0010      	movs	r0, r2
 80082b0:	3863      	subs	r0, #99	; 0x63
 80082b2:	2815      	cmp	r0, #21
 80082b4:	d8f7      	bhi.n	80082a6 <_printf_i+0x2a>
 80082b6:	f7f7 ff27 	bl	8000108 <__gnu_thumb1_case_shi>
 80082ba:	0016      	.short	0x0016
 80082bc:	fff6001f 	.word	0xfff6001f
 80082c0:	fff6fff6 	.word	0xfff6fff6
 80082c4:	001ffff6 	.word	0x001ffff6
 80082c8:	fff6fff6 	.word	0xfff6fff6
 80082cc:	fff6fff6 	.word	0xfff6fff6
 80082d0:	003600a8 	.word	0x003600a8
 80082d4:	fff6009a 	.word	0xfff6009a
 80082d8:	00b9fff6 	.word	0x00b9fff6
 80082dc:	0036fff6 	.word	0x0036fff6
 80082e0:	fff6fff6 	.word	0xfff6fff6
 80082e4:	009e      	.short	0x009e
 80082e6:	0026      	movs	r6, r4
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	3642      	adds	r6, #66	; 0x42
 80082ec:	1d11      	adds	r1, r2, #4
 80082ee:	6019      	str	r1, [r3, #0]
 80082f0:	6813      	ldr	r3, [r2, #0]
 80082f2:	7033      	strb	r3, [r6, #0]
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0a7      	b.n	8008448 <_printf_i+0x1cc>
 80082f8:	6808      	ldr	r0, [r1, #0]
 80082fa:	6819      	ldr	r1, [r3, #0]
 80082fc:	1d0a      	adds	r2, r1, #4
 80082fe:	0605      	lsls	r5, r0, #24
 8008300:	d50b      	bpl.n	800831a <_printf_i+0x9e>
 8008302:	680d      	ldr	r5, [r1, #0]
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	2d00      	cmp	r5, #0
 8008308:	da03      	bge.n	8008312 <_printf_i+0x96>
 800830a:	232d      	movs	r3, #45	; 0x2d
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	426d      	negs	r5, r5
 8008310:	7013      	strb	r3, [r2, #0]
 8008312:	4b61      	ldr	r3, [pc, #388]	; (8008498 <_printf_i+0x21c>)
 8008314:	270a      	movs	r7, #10
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	e01b      	b.n	8008352 <_printf_i+0xd6>
 800831a:	680d      	ldr	r5, [r1, #0]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	0641      	lsls	r1, r0, #25
 8008320:	d5f1      	bpl.n	8008306 <_printf_i+0x8a>
 8008322:	b22d      	sxth	r5, r5
 8008324:	e7ef      	b.n	8008306 <_printf_i+0x8a>
 8008326:	680d      	ldr	r5, [r1, #0]
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	1d08      	adds	r0, r1, #4
 800832c:	6018      	str	r0, [r3, #0]
 800832e:	062e      	lsls	r6, r5, #24
 8008330:	d501      	bpl.n	8008336 <_printf_i+0xba>
 8008332:	680d      	ldr	r5, [r1, #0]
 8008334:	e003      	b.n	800833e <_printf_i+0xc2>
 8008336:	066d      	lsls	r5, r5, #25
 8008338:	d5fb      	bpl.n	8008332 <_printf_i+0xb6>
 800833a:	680d      	ldr	r5, [r1, #0]
 800833c:	b2ad      	uxth	r5, r5
 800833e:	4b56      	ldr	r3, [pc, #344]	; (8008498 <_printf_i+0x21c>)
 8008340:	2708      	movs	r7, #8
 8008342:	9303      	str	r3, [sp, #12]
 8008344:	2a6f      	cmp	r2, #111	; 0x6f
 8008346:	d000      	beq.n	800834a <_printf_i+0xce>
 8008348:	3702      	adds	r7, #2
 800834a:	0023      	movs	r3, r4
 800834c:	2200      	movs	r2, #0
 800834e:	3343      	adds	r3, #67	; 0x43
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	db03      	blt.n	8008362 <_printf_i+0xe6>
 800835a:	2204      	movs	r2, #4
 800835c:	6821      	ldr	r1, [r4, #0]
 800835e:	4391      	bics	r1, r2
 8008360:	6021      	str	r1, [r4, #0]
 8008362:	2d00      	cmp	r5, #0
 8008364:	d102      	bne.n	800836c <_printf_i+0xf0>
 8008366:	9e04      	ldr	r6, [sp, #16]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00c      	beq.n	8008386 <_printf_i+0x10a>
 800836c:	9e04      	ldr	r6, [sp, #16]
 800836e:	0028      	movs	r0, r5
 8008370:	0039      	movs	r1, r7
 8008372:	f7f7 ff59 	bl	8000228 <__aeabi_uidivmod>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	3e01      	subs	r6, #1
 800837a:	5c5b      	ldrb	r3, [r3, r1]
 800837c:	7033      	strb	r3, [r6, #0]
 800837e:	002b      	movs	r3, r5
 8008380:	0005      	movs	r5, r0
 8008382:	429f      	cmp	r7, r3
 8008384:	d9f3      	bls.n	800836e <_printf_i+0xf2>
 8008386:	2f08      	cmp	r7, #8
 8008388:	d109      	bne.n	800839e <_printf_i+0x122>
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	07db      	lsls	r3, r3, #31
 800838e:	d506      	bpl.n	800839e <_printf_i+0x122>
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	6922      	ldr	r2, [r4, #16]
 8008394:	4293      	cmp	r3, r2
 8008396:	dc02      	bgt.n	800839e <_printf_i+0x122>
 8008398:	2330      	movs	r3, #48	; 0x30
 800839a:	3e01      	subs	r6, #1
 800839c:	7033      	strb	r3, [r6, #0]
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	1b9b      	subs	r3, r3, r6
 80083a2:	6123      	str	r3, [r4, #16]
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	0021      	movs	r1, r4
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	9805      	ldr	r0, [sp, #20]
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	aa09      	add	r2, sp, #36	; 0x24
 80083b0:	f7ff fef4 	bl	800819c <_printf_common>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d14c      	bne.n	8008452 <_printf_i+0x1d6>
 80083b8:	2001      	movs	r0, #1
 80083ba:	4240      	negs	r0, r0
 80083bc:	b00b      	add	sp, #44	; 0x2c
 80083be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c0:	3145      	adds	r1, #69	; 0x45
 80083c2:	700a      	strb	r2, [r1, #0]
 80083c4:	4a34      	ldr	r2, [pc, #208]	; (8008498 <_printf_i+0x21c>)
 80083c6:	9203      	str	r2, [sp, #12]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	6821      	ldr	r1, [r4, #0]
 80083cc:	ca20      	ldmia	r2!, {r5}
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	0608      	lsls	r0, r1, #24
 80083d2:	d516      	bpl.n	8008402 <_printf_i+0x186>
 80083d4:	07cb      	lsls	r3, r1, #31
 80083d6:	d502      	bpl.n	80083de <_printf_i+0x162>
 80083d8:	2320      	movs	r3, #32
 80083da:	4319      	orrs	r1, r3
 80083dc:	6021      	str	r1, [r4, #0]
 80083de:	2710      	movs	r7, #16
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	d1b2      	bne.n	800834a <_printf_i+0xce>
 80083e4:	2320      	movs	r3, #32
 80083e6:	6822      	ldr	r2, [r4, #0]
 80083e8:	439a      	bics	r2, r3
 80083ea:	6022      	str	r2, [r4, #0]
 80083ec:	e7ad      	b.n	800834a <_printf_i+0xce>
 80083ee:	2220      	movs	r2, #32
 80083f0:	6809      	ldr	r1, [r1, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	0022      	movs	r2, r4
 80083f8:	2178      	movs	r1, #120	; 0x78
 80083fa:	3245      	adds	r2, #69	; 0x45
 80083fc:	7011      	strb	r1, [r2, #0]
 80083fe:	4a27      	ldr	r2, [pc, #156]	; (800849c <_printf_i+0x220>)
 8008400:	e7e1      	b.n	80083c6 <_printf_i+0x14a>
 8008402:	0648      	lsls	r0, r1, #25
 8008404:	d5e6      	bpl.n	80083d4 <_printf_i+0x158>
 8008406:	b2ad      	uxth	r5, r5
 8008408:	e7e4      	b.n	80083d4 <_printf_i+0x158>
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	680d      	ldr	r5, [r1, #0]
 800840e:	1d10      	adds	r0, r2, #4
 8008410:	6949      	ldr	r1, [r1, #20]
 8008412:	6018      	str	r0, [r3, #0]
 8008414:	6813      	ldr	r3, [r2, #0]
 8008416:	062e      	lsls	r6, r5, #24
 8008418:	d501      	bpl.n	800841e <_printf_i+0x1a2>
 800841a:	6019      	str	r1, [r3, #0]
 800841c:	e002      	b.n	8008424 <_printf_i+0x1a8>
 800841e:	066d      	lsls	r5, r5, #25
 8008420:	d5fb      	bpl.n	800841a <_printf_i+0x19e>
 8008422:	8019      	strh	r1, [r3, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	9e04      	ldr	r6, [sp, #16]
 8008428:	6123      	str	r3, [r4, #16]
 800842a:	e7bb      	b.n	80083a4 <_printf_i+0x128>
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	1d11      	adds	r1, r2, #4
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	6816      	ldr	r6, [r2, #0]
 8008434:	2100      	movs	r1, #0
 8008436:	0030      	movs	r0, r6
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	f000 f831 	bl	80084a0 <memchr>
 800843e:	2800      	cmp	r0, #0
 8008440:	d001      	beq.n	8008446 <_printf_i+0x1ca>
 8008442:	1b80      	subs	r0, r0, r6
 8008444:	6060      	str	r0, [r4, #4]
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	2300      	movs	r3, #0
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	7013      	strb	r3, [r2, #0]
 8008450:	e7a8      	b.n	80083a4 <_printf_i+0x128>
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	0032      	movs	r2, r6
 8008456:	9906      	ldr	r1, [sp, #24]
 8008458:	9805      	ldr	r0, [sp, #20]
 800845a:	9d07      	ldr	r5, [sp, #28]
 800845c:	47a8      	blx	r5
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	d0aa      	beq.n	80083b8 <_printf_i+0x13c>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	079b      	lsls	r3, r3, #30
 8008466:	d415      	bmi.n	8008494 <_printf_i+0x218>
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	68e0      	ldr	r0, [r4, #12]
 800846c:	4298      	cmp	r0, r3
 800846e:	daa5      	bge.n	80083bc <_printf_i+0x140>
 8008470:	0018      	movs	r0, r3
 8008472:	e7a3      	b.n	80083bc <_printf_i+0x140>
 8008474:	0022      	movs	r2, r4
 8008476:	2301      	movs	r3, #1
 8008478:	9906      	ldr	r1, [sp, #24]
 800847a:	9805      	ldr	r0, [sp, #20]
 800847c:	9e07      	ldr	r6, [sp, #28]
 800847e:	3219      	adds	r2, #25
 8008480:	47b0      	blx	r6
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d098      	beq.n	80083b8 <_printf_i+0x13c>
 8008486:	3501      	adds	r5, #1
 8008488:	68e3      	ldr	r3, [r4, #12]
 800848a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	42ab      	cmp	r3, r5
 8008490:	dcf0      	bgt.n	8008474 <_printf_i+0x1f8>
 8008492:	e7e9      	b.n	8008468 <_printf_i+0x1ec>
 8008494:	2500      	movs	r5, #0
 8008496:	e7f7      	b.n	8008488 <_printf_i+0x20c>
 8008498:	080087f9 	.word	0x080087f9
 800849c:	0800880a 	.word	0x0800880a

080084a0 <memchr>:
 80084a0:	b2c9      	uxtb	r1, r1
 80084a2:	1882      	adds	r2, r0, r2
 80084a4:	4290      	cmp	r0, r2
 80084a6:	d101      	bne.n	80084ac <memchr+0xc>
 80084a8:	2000      	movs	r0, #0
 80084aa:	4770      	bx	lr
 80084ac:	7803      	ldrb	r3, [r0, #0]
 80084ae:	428b      	cmp	r3, r1
 80084b0:	d0fb      	beq.n	80084aa <memchr+0xa>
 80084b2:	3001      	adds	r0, #1
 80084b4:	e7f6      	b.n	80084a4 <memchr+0x4>

080084b6 <memmove>:
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4288      	cmp	r0, r1
 80084ba:	d902      	bls.n	80084c2 <memmove+0xc>
 80084bc:	188b      	adds	r3, r1, r2
 80084be:	4298      	cmp	r0, r3
 80084c0:	d303      	bcc.n	80084ca <memmove+0x14>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e007      	b.n	80084d6 <memmove+0x20>
 80084c6:	5c8b      	ldrb	r3, [r1, r2]
 80084c8:	5483      	strb	r3, [r0, r2]
 80084ca:	3a01      	subs	r2, #1
 80084cc:	d2fb      	bcs.n	80084c6 <memmove+0x10>
 80084ce:	bd10      	pop	{r4, pc}
 80084d0:	5ccc      	ldrb	r4, [r1, r3]
 80084d2:	54c4      	strb	r4, [r0, r3]
 80084d4:	3301      	adds	r3, #1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d1fa      	bne.n	80084d0 <memmove+0x1a>
 80084da:	e7f8      	b.n	80084ce <memmove+0x18>

080084dc <_realloc_r>:
 80084dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084de:	0007      	movs	r7, r0
 80084e0:	000e      	movs	r6, r1
 80084e2:	0014      	movs	r4, r2
 80084e4:	2900      	cmp	r1, #0
 80084e6:	d105      	bne.n	80084f4 <_realloc_r+0x18>
 80084e8:	0011      	movs	r1, r2
 80084ea:	f7ff fb7f 	bl	8007bec <_malloc_r>
 80084ee:	0005      	movs	r5, r0
 80084f0:	0028      	movs	r0, r5
 80084f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	d103      	bne.n	8008500 <_realloc_r+0x24>
 80084f8:	f7ff fca4 	bl	8007e44 <_free_r>
 80084fc:	0025      	movs	r5, r4
 80084fe:	e7f7      	b.n	80084f0 <_realloc_r+0x14>
 8008500:	f000 f81b 	bl	800853a <_malloc_usable_size_r>
 8008504:	9001      	str	r0, [sp, #4]
 8008506:	4284      	cmp	r4, r0
 8008508:	d803      	bhi.n	8008512 <_realloc_r+0x36>
 800850a:	0035      	movs	r5, r6
 800850c:	0843      	lsrs	r3, r0, #1
 800850e:	42a3      	cmp	r3, r4
 8008510:	d3ee      	bcc.n	80084f0 <_realloc_r+0x14>
 8008512:	0021      	movs	r1, r4
 8008514:	0038      	movs	r0, r7
 8008516:	f7ff fb69 	bl	8007bec <_malloc_r>
 800851a:	1e05      	subs	r5, r0, #0
 800851c:	d0e8      	beq.n	80084f0 <_realloc_r+0x14>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	0022      	movs	r2, r4
 8008522:	429c      	cmp	r4, r3
 8008524:	d900      	bls.n	8008528 <_realloc_r+0x4c>
 8008526:	001a      	movs	r2, r3
 8008528:	0031      	movs	r1, r6
 800852a:	0028      	movs	r0, r5
 800852c:	f7ff fb2a 	bl	8007b84 <memcpy>
 8008530:	0031      	movs	r1, r6
 8008532:	0038      	movs	r0, r7
 8008534:	f7ff fc86 	bl	8007e44 <_free_r>
 8008538:	e7da      	b.n	80084f0 <_realloc_r+0x14>

0800853a <_malloc_usable_size_r>:
 800853a:	1f0b      	subs	r3, r1, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	1f18      	subs	r0, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	da01      	bge.n	8008548 <_malloc_usable_size_r+0xe>
 8008544:	580b      	ldr	r3, [r1, r0]
 8008546:	18c0      	adds	r0, r0, r3
 8008548:	4770      	bx	lr
	...

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	46c0      	nop			; (mov r8, r8)
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
