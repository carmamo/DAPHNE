
S11_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f20  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a404  0800a404  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a404  0800a404  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a404  0800a404  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000303c  20000074  0800a480  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200030b0  0800a480  000230b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe3b  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e8a  00000000  00000000  0003fed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00043d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001948  00000000  00000000  00045848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142cd  00000000  00000000  00047190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e5d8  00000000  00000000  0005b45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a2c9  00000000  00000000  00079a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3cfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006738  00000000  00000000  000f3d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009fc8 	.word	0x08009fc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08009fc8 	.word	0x08009fc8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <CANSPI_EN_Int>:

/** CAN SPI APIs */ 

/* Enable Interrupt */
void CANSPI_EN_Int(SPI_HandleTypeDef *SPI_CAN)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	22ff      	movs	r2, #255	; 0xff
 8000242:	212c      	movs	r1, #44	; 0x2c
 8000244:	f000 fcfc 	bl	8000c40 <MCP2515_BitModify>

  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTE, 0xff, 0xff);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	23ff      	movs	r3, #255	; 0xff
 800024c:	22ff      	movs	r2, #255	; 0xff
 800024e:	212b      	movs	r1, #43	; 0x2b
 8000250:	f000 fcf6 	bl	8000c40 <MCP2515_BitModify>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <CANSPI_CL_Flag_Int>:

void CANSPI_CL_Flag_Int(SPI_HandleTypeDef *SPI_CAN)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  /* Clear CAN bus wakeup interrupt */
  MCP2515_BitModify(SPI_CAN, MCP2515_CANINTF, 0xff, 0x00);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	2300      	movs	r3, #0
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	212c      	movs	r1, #44	; 0x2c
 800026c:	f000 fce8 	bl	8000c40 <MCP2515_BitModify>
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}

08000278 <CANSPI_Initialize>:
  MCP2515_SetSleepMode(SPI_CAN);
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	; 0x28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000280:	210c      	movs	r1, #12
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
  RXM0reg.RXM0SIDL = 0x00;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2200      	movs	r2, #0
 800028c:	705a      	strb	r2, [r3, #1]
  RXM0reg.RXM0EID8 = 0x00;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2200      	movs	r2, #0
 8000292:	709a      	strb	r2, [r3, #2]
  RXM0reg.RXM0EID0 = 0x00;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2200      	movs	r2, #0
 8000298:	70da      	strb	r2, [r3, #3]
  
  RXM1reg.RXM1SIDH = 0x00;
 800029a:	2108      	movs	r1, #8
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	705a      	strb	r2, [r3, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	709a      	strb	r2, [r3, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	70da      	strb	r2, [r3, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 80002b4:	2124      	movs	r1, #36	; 0x24
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2200      	movs	r2, #0
 80002c0:	705a      	strb	r2, [r3, #1]
  RXF0reg.RXF0EID8 = 0x00;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	709a      	strb	r2, [r3, #2]
  RXF0reg.RXF0EID0 = 0x00;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	70da      	strb	r2, [r3, #3]
  
  RXF1reg.RXF1SIDH = 0x00;
 80002ce:	2120      	movs	r1, #32
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2208      	movs	r2, #8
 80002da:	705a      	strb	r2, [r3, #1]
  RXF1reg.RXF1EID8 = 0x00;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	709a      	strb	r2, [r3, #2]
  RXF1reg.RXF1EID0 = 0x00;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	70da      	strb	r2, [r3, #3]
  
  RXF2reg.RXF2SIDH = 0x00;
 80002e8:	211c      	movs	r1, #28
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
  RXF2reg.RXF2SIDL = 0x00;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	705a      	strb	r2, [r3, #1]
  RXF2reg.RXF2EID8 = 0x00;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	709a      	strb	r2, [r3, #2]
  RXF2reg.RXF2EID0 = 0x00;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	70da      	strb	r2, [r3, #3]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000302:	2118      	movs	r1, #24
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
  RXF3reg.RXF3SIDL = 0x00;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	705a      	strb	r2, [r3, #1]
  RXF3reg.RXF3EID8 = 0x00;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	709a      	strb	r2, [r3, #2]
  RXF3reg.RXF3EID0 = 0x00;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	70da      	strb	r2, [r3, #3]
  
  RXF4reg.RXF4SIDH = 0x00;
 800031c:	2114      	movs	r1, #20
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	701a      	strb	r2, [r3, #0]
  RXF4reg.RXF4SIDL = 0x00;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	705a      	strb	r2, [r3, #1]
  RXF4reg.RXF4EID8 = 0x00;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	709a      	strb	r2, [r3, #2]
  RXF4reg.RXF4EID0 = 0x00;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	70da      	strb	r2, [r3, #3]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000336:	2110      	movs	r1, #16
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
  RXF5reg.RXF5SIDL = 0x08;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2208      	movs	r2, #8
 8000342:	705a      	strb	r2, [r3, #1]
  RXF5reg.RXF5EID8 = 0x00;
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2200      	movs	r2, #0
 8000348:	709a      	strb	r2, [r3, #2]
  RXF5reg.RXF5EID0 = 0x00;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	70da      	strb	r2, [r3, #3]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize(SPI_CAN))
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fabe 	bl	80008d4 <MCP2515_Initialize>
 8000358:	0003      	movs	r3, r0
 800035a:	001a      	movs	r2, r3
 800035c:	2301      	movs	r3, #1
 800035e:	4053      	eors	r3, r2
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <CANSPI_Initialize+0xf2>
    return false;
 8000366:	2300      	movs	r3, #0
 8000368:	e074      	b.n	8000454 <CANSPI_Initialize+0x1dc>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode(SPI_CAN))
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fad5 	bl	800091c <MCP2515_SetConfigMode>
 8000372:	0003      	movs	r3, r0
 8000374:	001a      	movs	r2, r3
 8000376:	2301      	movs	r3, #1
 8000378:	4053      	eors	r3, r2
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <CANSPI_Initialize+0x10c>
    return false;
 8000380:	2300      	movs	r3, #0
 8000382:	e067      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000384:	230c      	movs	r3, #12
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	2223      	movs	r2, #35	; 0x23
 800038c:	2120      	movs	r1, #32
 800038e:	f000 fb95 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000392:	2308      	movs	r3, #8
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	2227      	movs	r2, #39	; 0x27
 800039a:	2124      	movs	r1, #36	; 0x24
 800039c:	f000 fb8e 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80003a0:	2324      	movs	r3, #36	; 0x24
 80003a2:	18fb      	adds	r3, r7, r3
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	2203      	movs	r2, #3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f000 fb87 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80003ae:	2320      	movs	r3, #32
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	2207      	movs	r2, #7
 80003b6:	2104      	movs	r1, #4
 80003b8:	f000 fb80 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80003bc:	231c      	movs	r3, #28
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	220b      	movs	r2, #11
 80003c4:	2108      	movs	r1, #8
 80003c6:	f000 fb79 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80003ca:	2318      	movs	r3, #24
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	2213      	movs	r2, #19
 80003d2:	2110      	movs	r1, #16
 80003d4:	f000 fb72 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80003d8:	2314      	movs	r3, #20
 80003da:	18fb      	adds	r3, r7, r3
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	2217      	movs	r2, #23
 80003e0:	2114      	movs	r1, #20
 80003e2:	f000 fb6b 	bl	8000abc <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(SPI_CAN, MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80003e6:	2310      	movs	r3, #16
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	221b      	movs	r2, #27
 80003ee:	2118      	movs	r1, #24
 80003f0:	f000 fb64 	bl	8000abc <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2204      	movs	r2, #4
 80003f8:	2160      	movs	r1, #96	; 0x60
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fb33 	bl	8000a66 <MCP2515_WriteByte>
  MCP2515_WriteByte(SPI_CAN, MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2201      	movs	r2, #1
 8000404:	2170      	movs	r1, #112	; 0x70
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fb2d 	bl	8000a66 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF1, 0x00);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	212a      	movs	r1, #42	; 0x2a
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fb27 	bl	8000a66 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF2, 0xE5);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	22e5      	movs	r2, #229	; 0xe5
 800041c:	2129      	movs	r1, #41	; 0x29
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fb21 	bl	8000a66 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CNF3, 0x83);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2283      	movs	r2, #131	; 0x83
 8000428:	2128      	movs	r1, #40	; 0x28
 800042a:	0018      	movs	r0, r3
 800042c:	f000 fb1b 	bl	8000a66 <MCP2515_WriteByte>
  
  CANSPI_EN_Int(SPI_CAN);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fefe 	bl	8000234 <CANSPI_EN_Int>
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode(SPI_CAN))
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fa98 	bl	8000970 <MCP2515_SetNormalMode>
 8000440:	0003      	movs	r3, r0
 8000442:	001a      	movs	r2, r3
 8000444:	2301      	movs	r3, #1
 8000446:	4053      	eors	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <CANSPI_Initialize+0x1da>
    return false;
 800044e:	2300      	movs	r3, #0
 8000450:	e000      	b.n	8000454 <CANSPI_Initialize+0x1dc>
  
  return true;
 8000452:	2301      	movs	r3, #1
}
 8000454:	0018      	movs	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	b00a      	add	sp, #40	; 0x28
 800045a:	bd80      	pop	{r7, pc}

0800045c <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b087      	sub	sp, #28
 8000460:	af02      	add	r7, sp, #8
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 8000466:	240f      	movs	r4, #15
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
  
  idReg.tempSIDH = 0;
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000474:	4b40      	ldr	r3, [pc, #256]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000476:	2200      	movs	r2, #0
 8000478:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800047a:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <CANSPI_Transmit+0x11c>)
 800047c:	2200      	movs	r2, #0
 800047e:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000480:	4b3d      	ldr	r3, [pc, #244]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000482:	2200      	movs	r2, #0
 8000484:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus(SPI_CAN);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fb9b 	bl	8000bc4 <MCP2515_ReadStatus>
 800048e:	0003      	movs	r3, r0
 8000490:	001a      	movs	r2, r3
 8000492:	4b3a      	ldr	r3, [pc, #232]	; (800057c <CANSPI_Transmit+0x120>)
 8000494:	701a      	strb	r2, [r3, #0]
  
  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8000496:	4b39      	ldr	r3, [pc, #228]	; (800057c <CANSPI_Transmit+0x120>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2204      	movs	r2, #4
 800049c:	4013      	ands	r3, r2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d11b      	bne.n	80004dc <CANSPI_Transmit+0x80>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6858      	ldr	r0, [r3, #4]
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4a32      	ldr	r2, [pc, #200]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004ae:	0019      	movs	r1, r3
 80004b0:	f000 f970 	bl	8000794 <convertCANid2Reg>
    
    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	7a19      	ldrb	r1, [r3, #8]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	3309      	adds	r3, #9
 80004bc:	4a2e      	ldr	r2, [pc, #184]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	000b      	movs	r3, r1
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	f000 fb2d 	bl	8000b24 <MCP2515_LoadTxSequence>
    
    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX0);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2181      	movs	r1, #129	; 0x81
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fb5e 	bl	8000b90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e046      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80004dc:	4b27      	ldr	r3, [pc, #156]	; (800057c <CANSPI_Transmit+0x120>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2210      	movs	r2, #16
 80004e2:	4013      	ands	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d11c      	bne.n	8000524 <CANSPI_Transmit+0xc8>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	6858      	ldr	r0, [r3, #4]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4a21      	ldr	r2, [pc, #132]	; (8000578 <CANSPI_Transmit+0x11c>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	f000 f94d 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	7a19      	ldrb	r1, [r3, #8]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	3309      	adds	r3, #9
 8000502:	4a1d      	ldr	r2, [pc, #116]	; (8000578 <CANSPI_Transmit+0x11c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	000b      	movs	r3, r1
 800050a:	2142      	movs	r1, #66	; 0x42
 800050c:	f000 fb0a 	bl	8000b24 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX1);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2182      	movs	r1, #130	; 0x82
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fb3b 	bl	8000b90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	2201      	movs	r2, #1
 8000520:	701a      	strb	r2, [r3, #0]
 8000522:	e022      	b.n	800056a <CANSPI_Transmit+0x10e>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <CANSPI_Transmit+0x120>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2240      	movs	r2, #64	; 0x40
 800052a:	4013      	ands	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d11b      	bne.n	800056a <CANSPI_Transmit+0x10e>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	6858      	ldr	r0, [r3, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <CANSPI_Transmit+0x11c>)
 800053c:	0019      	movs	r1, r3
 800053e:	f000 f929 	bl	8000794 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(SPI_CAN, MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	7a19      	ldrb	r1, [r3, #8]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	3309      	adds	r3, #9
 800054a:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <CANSPI_Transmit+0x11c>)
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	000b      	movs	r3, r1
 8000552:	2144      	movs	r1, #68	; 0x44
 8000554:	f000 fae6 	bl	8000b24 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(SPI_CAN, MCP2515_RTS_TX2);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2184      	movs	r1, #132	; 0x84
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb17 	bl	8000b90 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000562:	230f      	movs	r3, #15
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 800056a:	230f      	movs	r3, #15
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b005      	add	sp, #20
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	20000094 	.word	0x20000094
 800057c:	20000090 	.word	0x20000090

08000580 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(SPI_HandleTypeDef *SPI_CAN, uCAN_MSG *tempCanMsg)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  uint8_t returnValue = 0;
 800058a:	231f      	movs	r3, #31
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus(SPI_CAN);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fb34 	bl	8000c02 <MCP2515_GetRxStatus>
 800059a:	0003      	movs	r3, r0
 800059c:	001a      	movs	r2, r3
 800059e:	210c      	movs	r1, #12
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	701a      	strb	r2, [r3, #0]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	223f      	movs	r2, #63	; 0x3f
 80005aa:	4393      	bics	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d100      	bne.n	80005b4 <CANSPI_Receive+0x34>
 80005b2:	e07e      	b.n	80006b2 <CANSPI_Receive+0x132>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	223f      	movs	r2, #63	; 0x3f
 80005ba:	4393      	bics	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3b40      	subs	r3, #64	; 0x40
 80005c0:	425a      	negs	r2, r3
 80005c2:	4153      	adcs	r3, r2
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	213f      	movs	r1, #63	; 0x3f
 80005cc:	438b      	bics	r3, r1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3bc0      	subs	r3, #192	; 0xc0
 80005d2:	4259      	negs	r1, r3
 80005d4:	414b      	adcs	r3, r1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <CANSPI_Receive+0x70>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80005e0:	2310      	movs	r3, #16
 80005e2:	18fa      	adds	r2, r7, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	230d      	movs	r3, #13
 80005e8:	2190      	movs	r1, #144	; 0x90
 80005ea:	f000 fa13 	bl	8000a14 <MCP2515_ReadRxSequence>
 80005ee:	e00e      	b.n	800060e <CANSPI_Receive+0x8e>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	223f      	movs	r2, #63	; 0x3f
 80005f8:	4393      	bics	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b80      	cmp	r3, #128	; 0x80
 80005fe:	d106      	bne.n	800060e <CANSPI_Receive+0x8e>
    {
      MCP2515_ReadRxSequence(SPI_CAN, MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000600:	2310      	movs	r3, #16
 8000602:	18fa      	adds	r2, r7, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	230d      	movs	r3, #13
 8000608:	2194      	movs	r1, #148	; 0x94
 800060a:	f000 fa03 	bl	8000a14 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800060e:	230c      	movs	r3, #12
 8000610:	18fb      	adds	r3, r7, r3
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2218      	movs	r2, #24
 8000616:	4013      	ands	r3, r2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b10      	cmp	r3, #16
 800061c:	d111      	bne.n	8000642 <CANSPI_Receive+0xc2>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2202      	movs	r2, #2
 8000622:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000624:	2410      	movs	r4, #16
 8000626:	193b      	adds	r3, r7, r4
 8000628:	7898      	ldrb	r0, [r3, #2]
 800062a:	193b      	adds	r3, r7, r4
 800062c:	78d9      	ldrb	r1, [r3, #3]
 800062e:	193b      	adds	r3, r7, r4
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	193b      	adds	r3, r7, r4
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	f000 f843 	bl	80006c0 <convertReg2ExtendedCANid>
 800063a:	0002      	movs	r2, r0
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	e00e      	b.n	8000660 <CANSPI_Receive+0xe0>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000648:	2110      	movs	r1, #16
 800064a:	187b      	adds	r3, r7, r1
 800064c:	781a      	ldrb	r2, [r3, #0]
 800064e:	187b      	adds	r3, r7, r1
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f000 f87f 	bl	8000758 <convertReg2StandardCANid>
 800065a:	0002      	movs	r2, r0
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000660:	2110      	movs	r1, #16
 8000662:	187b      	adds	r3, r7, r1
 8000664:	791a      	ldrb	r2, [r3, #4]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	795a      	ldrb	r2, [r3, #5]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	799a      	ldrb	r2, [r3, #6]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	79da      	ldrb	r2, [r3, #7]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	7a1a      	ldrb	r2, [r3, #8]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	7a5a      	ldrb	r2, [r3, #9]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	7a9a      	ldrb	r2, [r3, #10]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	7ada      	ldrb	r2, [r3, #11]
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	7b1a      	ldrb	r2, [r3, #12]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80006aa:	231f      	movs	r3, #31
 80006ac:	18fb      	adds	r3, r7, r3
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
  }
  
  return (returnValue);
 80006b2:	231f      	movs	r3, #31
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}

080006c0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0005      	movs	r5, r0
 80006c8:	000c      	movs	r4, r1
 80006ca:	0010      	movs	r0, r2
 80006cc:	0019      	movs	r1, r3
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	1c2a      	adds	r2, r5, #0
 80006d2:	701a      	strb	r2, [r3, #0]
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	1c22      	adds	r2, r4, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	1d7b      	adds	r3, r7, #5
 80006dc:	1c02      	adds	r2, r0, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	1c0a      	adds	r2, r1, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80006ee:	200f      	movs	r0, #15
 80006f0:	183b      	adds	r3, r7, r0
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	2103      	movs	r1, #3
 80006f8:	400a      	ands	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80006fc:	210e      	movs	r1, #14
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	7812      	ldrb	r2, [r2, #0]
 8000704:	0952      	lsrs	r2, r2, #5
 8000706:	701a      	strb	r2, [r3, #0]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000708:	1d7b      	adds	r3, r7, #5
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	693a      	ldr	r2, [r7, #16]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000720:	183b      	adds	r3, r7, r0
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	693a      	ldr	r2, [r7, #16]
 8000726:	18d3      	adds	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	18d3      	adds	r3, r2, r3
 8000738:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	021b      	lsls	r3, r3, #8
 800073e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000740:	1dbb      	adds	r3, r7, #6
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800074e:	697b      	ldr	r3, [r7, #20]
}
 8000750:	0018      	movs	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	b006      	add	sp, #24
 8000756:	bdb0      	pop	{r4, r5, r7, pc}

08000758 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	1c0a      	adds	r2, r1, #0
 8000768:	701a      	strb	r2, [r3, #0]
  uint32_t returnValue = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000776:	1dbb      	adds	r3, r7, #6
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	b2db      	uxtb	r3, r3
 800077e:	001a      	movs	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	189b      	adds	r3, r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b004      	add	sp, #16
 8000792:	bd80      	pop	{r7, pc}

08000794 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	200b      	movs	r0, #11
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	1c0a      	adds	r2, r1, #0
 80007a4:	701a      	strb	r2, [r3, #0]
  uint8_t wipSIDL = 0;
 80007a6:	2117      	movs	r1, #23
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 80007ae:	183b      	adds	r3, r7, r0
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d136      	bne.n	8000824 <convertCANid2Reg+0x90>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	0008      	movs	r0, r1
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2103      	movs	r1, #3
 80007dc:	400a      	ands	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 3;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	221f      	movs	r2, #31
 80007ec:	4393      	bics	r3, r2
 80007ee:	b2d9      	uxtb	r1, r3
 80007f0:	183b      	adds	r3, r7, r0
 80007f2:	183a      	adds	r2, r7, r0
 80007f4:	7812      	ldrb	r2, [r2, #0]
 80007f6:	188a      	adds	r2, r1, r2
 80007f8:	701a      	strb	r2, [r3, #0]
    wipSIDL = wipSIDL + 0x08;
 80007fa:	183b      	adds	r3, r7, r0
 80007fc:	0001      	movs	r1, r0
 80007fe:	183a      	adds	r2, r7, r0
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	3208      	adds	r2, #8
 8000804:	701a      	strb	r2, [r3, #0]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2214      	movs	r2, #20
 800080c:	4393      	bics	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000822:	e013      	b.n	800084c <convertCANid2Reg+0xb8>
    passedIdReg->tempEID8 = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	015b      	lsls	r3, r3, #5
 8000834:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b006      	add	sp, #24
 8000852:	bd80      	pop	{r7, pc}

08000854 <MCP2515_CS_HIGH>:
#define SPI_TIMEOUT             10
//#define MCP2515_CS_HIGH()   HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET)
//#define MCP2515_CS_LOW()    HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET)

void MCP2515_CS_HIGH(SPI_HandleTypeDef *SPI_CAN)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MCP2515_CS_HIGH+0x38>)
 8000860:	429a      	cmp	r2, r3
 8000862:	d107      	bne.n	8000874 <MCP2515_CS_HIGH+0x20>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_SET);
 8000864:	2390      	movs	r3, #144	; 0x90
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	0018      	movs	r0, r3
 800086e:	f002 f933 	bl	8002ad8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
}
 8000872:	e006      	b.n	8000882 <MCP2515_CS_HIGH+0x2e>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_SET);
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MCP2515_CS_HIGH+0x3c>)
 800087a:	2201      	movs	r2, #1
 800087c:	0019      	movs	r1, r3
 800087e:	f002 f92b 	bl	8002ad8 <HAL_GPIO_WritePin>
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000124 	.word	0x20000124
 8000890:	48000400 	.word	0x48000400

08000894 <MCP2515_CS_LOW>:
void MCP2515_CS_LOW(SPI_HandleTypeDef *SPI_CAN)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if (SPI_CAN == &hspi1)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MCP2515_CS_LOW+0x38>)
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d107      	bne.n	80008b4 <MCP2515_CS_LOW+0x20>
		HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80008a4:	2390      	movs	r3, #144	; 0x90
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	0018      	movs	r0, r3
 80008ae:	f002 f913 	bl	8002ad8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
}
 80008b2:	e006      	b.n	80008c2 <MCP2515_CS_LOW+0x2e>
		HAL_GPIO_WritePin(CAN2_CS_GPIO_Port, CAN2_CS_Pin, GPIO_PIN_RESET);
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	015b      	lsls	r3, r3, #5
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MCP2515_CS_LOW+0x3c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0019      	movs	r1, r3
 80008be:	f002 f90b 	bl	8002ad8 <HAL_GPIO_WritePin>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000124 	.word	0x20000124
 80008d0:	48000400 	.word	0x48000400

080008d4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN);
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(SPI_HandleTypeDef *SPI_CAN)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  MCP2515_CS_HIGH(SPI_CAN);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff ffb8 	bl	8000854 <MCP2515_CS_HIGH>
  
  uint8_t loop = 10;
 80008e4:	230f      	movs	r3, #15
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	220a      	movs	r2, #10
 80008ea:	701a      	strb	r2, [r3, #0]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	0018      	movs	r0, r3
 80008f0:	f003 fd02 	bl	80042f8 <HAL_SPI_GetState>
 80008f4:	0003      	movs	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <MCP2515_Initialize+0x2a>
      return true;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00a      	b.n	8000914 <MCP2515_Initialize+0x40>
    
    loop--;
 80008fe:	210f      	movs	r1, #15
 8000900:	187b      	adds	r3, r7, r1
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	187b      	adds	r3, r7, r1
 8000906:	3a01      	subs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 800090a:	187b      	adds	r3, r7, r1
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1ec      	bne.n	80008ec <MCP2515_Initialize+0x18>
      
  return false;
 8000912:	2300      	movs	r3, #0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}

0800091c <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(SPI_HandleTypeDef *SPI_CAN)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x80);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	210f      	movs	r1, #15
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f89b 	bl	8000a66 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000930:	230f      	movs	r3, #15
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	220a      	movs	r2, #10
 8000936:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	210e      	movs	r1, #14
 800093c:	0018      	movs	r0, r3
 800093e:	f000 f840 	bl	80009c2 <MCP2515_ReadByte>
 8000942:	0003      	movs	r3, r0
 8000944:	001a      	movs	r2, r3
 8000946:	23e0      	movs	r3, #224	; 0xe0
 8000948:	4013      	ands	r3, r2
 800094a:	2b80      	cmp	r3, #128	; 0x80
 800094c:	d101      	bne.n	8000952 <MCP2515_SetConfigMode+0x36>
      return true;
 800094e:	2301      	movs	r3, #1
 8000950:	e00a      	b.n	8000968 <MCP2515_SetConfigMode+0x4c>
    
    loop--;
 8000952:	210f      	movs	r1, #15
 8000954:	187b      	adds	r3, r7, r1
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	187b      	adds	r3, r7, r1
 800095a:	3a01      	subs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
  } while(loop > 0); 
 800095e:	187b      	adds	r3, r7, r1
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1e8      	bne.n	8000938 <MCP2515_SetConfigMode+0x1c>
  
  return false;
 8000966:	2300      	movs	r3, #0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}

08000970 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(SPI_HandleTypeDef *SPI_CAN)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(SPI_CAN, MCP2515_CANCTRL, 0x00);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	0018      	movs	r0, r3
 8000980:	f000 f871 	bl	8000a66 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000984:	230f      	movs	r3, #15
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	220a      	movs	r2, #10
 800098a:	701a      	strb	r2, [r3, #0]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(SPI_CAN, MCP2515_CANSTAT) & 0xE0) == 0x00)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	210e      	movs	r1, #14
 8000990:	0018      	movs	r0, r3
 8000992:	f000 f816 	bl	80009c2 <MCP2515_ReadByte>
 8000996:	0003      	movs	r3, r0
 8000998:	001a      	movs	r2, r3
 800099a:	23e0      	movs	r3, #224	; 0xe0
 800099c:	4013      	ands	r3, r2
 800099e:	d101      	bne.n	80009a4 <MCP2515_SetNormalMode+0x34>
      return true;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e00a      	b.n	80009ba <MCP2515_SetNormalMode+0x4a>
    
    loop--;
 80009a4:	210f      	movs	r1, #15
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	3a01      	subs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
  } while(loop > 0);
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e9      	bne.n	800098c <MCP2515_SetNormalMode+0x1c>
  
  return false;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b004      	add	sp, #16
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (SPI_HandleTypeDef *SPI_CAN, uint8_t address)
{
 80009c2:	b5b0      	push	{r4, r5, r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	000a      	movs	r2, r1
 80009cc:	1cfb      	adds	r3, r7, #3
 80009ce:	701a      	strb	r2, [r3, #0]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff ff5e 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2103      	movs	r1, #3
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 f965 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 80009e2:	1cfb      	adds	r3, r7, #3
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0011      	movs	r1, r2
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f95e 	bl	8000cac <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 80009f0:	250f      	movs	r5, #15
 80009f2:	197c      	adds	r4, r7, r5
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f97c 	bl	8000cf4 <SPI_Rx>
 80009fc:	0003      	movs	r3, r0
 80009fe:	7023      	strb	r3, [r4, #0]
      
  MCP2515_CS_HIGH(SPI_CAN);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f7ff ff26 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000a08:	197b      	adds	r3, r7, r5
 8000a0a:	781b      	ldrb	r3, [r3, #0]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bdb0      	pop	{r4, r5, r7, pc}

08000a14 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000a14:	b5b0      	push	{r4, r5, r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	0019      	movs	r1, r3
 8000a22:	240b      	movs	r4, #11
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	250a      	movs	r5, #10
 8000a2c:	197b      	adds	r3, r7, r5
 8000a2e:	1c0a      	adds	r2, r1, #0
 8000a30:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff2d 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	0011      	movs	r1, r2
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f932 	bl	8000cac <SPI_Tx>
  SPI_RxBuffer(SPI_CAN, data, length);
 8000a48:	197b      	adds	r3, r7, r5
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 f960 	bl	8000d16 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff fefb 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bdb0      	pop	{r4, r5, r7, pc}

08000a66 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t data)
{    
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	0008      	movs	r0, r1
 8000a70:	0011      	movs	r1, r2
 8000a72:	1cfb      	adds	r3, r7, #3
 8000a74:	1c02      	adds	r2, r0, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	1cbb      	adds	r3, r7, #2
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff07 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2102      	movs	r1, #2
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f90e 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000a90:	1cfb      	adds	r3, r7, #3
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 f907 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000a9e:	1cbb      	adds	r3, r7, #2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f900 	bl	8000cac <SPI_Tx>
    
  MCP2515_CS_HIGH(SPI_CAN);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f7ff fed0 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000abc:	b5b0      	push	{r4, r5, r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	240b      	movs	r4, #11
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	1c02      	adds	r2, r0, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	250a      	movs	r5, #10
 8000ad4:	197b      	adds	r3, r7, r5
 8000ad6:	1c0a      	adds	r2, r1, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff fed9 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_WRITE);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f8e0 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, startAddress);
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	0011      	movs	r1, r2
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 f8d9 	bl	8000cac <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, (endAddress - startAddress + 1));
 8000afa:	197a      	adds	r2, r7, r5
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	3301      	adds	r3, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f8dd 	bl	8000cce <SPI_TxBuffer>
  
  MCP2515_CS_HIGH(SPI_CAN);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fe9c 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bdb0      	pop	{r4, r5, r7, pc}

08000b24 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	0008      	movs	r0, r1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	0019      	movs	r1, r3
 8000b32:	250b      	movs	r5, #11
 8000b34:	197b      	adds	r3, r7, r5
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	240a      	movs	r4, #10
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	1c0a      	adds	r2, r1, #0
 8000b40:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fea5 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000b4a:	197b      	adds	r3, r7, r5
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 f8aa 	bl	8000cac <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, idReg, 4);
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 f8b5 	bl	8000cce <SPI_TxBuffer>
  SPI_Tx(SPI_CAN, dlc);
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 f89d 	bl	8000cac <SPI_Tx>
  SPI_TxBuffer(SPI_CAN, data, dlc);
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	6a39      	ldr	r1, [r7, #32]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f8a7 	bl	8000cce <SPI_TxBuffer>
       
  MCP2515_CS_HIGH(SPI_CAN);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fe66 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}

08000b90 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH(SPI_CAN);
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(SPI_HandleTypeDef *SPI_CAN, uint8_t instruction)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	000a      	movs	r2, r1
 8000b9a:	1cfb      	adds	r3, r7, #3
 8000b9c:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fe77 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, instruction);
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 f87c 	bl	8000cac <SPI_Tx>
      
  MCP2515_CS_HIGH(SPI_CAN);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fe4c 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fe60 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_READ_STATUS);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	21a0      	movs	r1, #160	; 0xa0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f867 	bl	8000cac <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000bde:	250f      	movs	r5, #15
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 f885 	bl	8000cf4 <SPI_Rx>
 8000bea:	0003      	movs	r3, r0
 8000bec:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fe2f 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000bf6:	197b      	adds	r3, r7, r5
 8000bf8:	781b      	ldrb	r3, [r3, #0]
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}

08000c02 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(SPI_HandleTypeDef *SPI_CAN)
{
 8000c02:	b5b0      	push	{r4, r5, r7, lr}
 8000c04:	b084      	sub	sp, #16
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  
  MCP2515_CS_LOW(SPI_CAN);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fe41 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_RX_STATUS);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	21b0      	movs	r1, #176	; 0xb0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 f848 	bl	8000cac <SPI_Tx>
  retVal = SPI_Rx(SPI_CAN);
 8000c1c:	250f      	movs	r5, #15
 8000c1e:	197c      	adds	r4, r7, r5
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 f866 	bl	8000cf4 <SPI_Rx>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	7023      	strb	r3, [r4, #0]
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff fe10 	bl	8000854 <MCP2515_CS_HIGH>
  
  return retVal;
 8000c34:	197b      	adds	r3, r7, r5
 8000c36:	781b      	ldrb	r3, [r3, #0]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bdb0      	pop	{r4, r5, r7, pc}

08000c40 <MCP2515_BitModify>:

/* 레지스터 값 변경 */
void MCP2515_BitModify(SPI_HandleTypeDef *SPI_CAN, uint8_t address, uint8_t mask, uint8_t data)
{    
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	000c      	movs	r4, r1
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	1c22      	adds	r2, r4, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	1cbb      	adds	r3, r7, #2
 8000c56:	1c02      	adds	r2, r0, #0
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	1c7b      	adds	r3, r7, #1
 8000c5c:	1c0a      	adds	r2, r1, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
  MCP2515_CS_LOW(SPI_CAN);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff fe16 	bl	8000894 <MCP2515_CS_LOW>
  
  SPI_Tx(SPI_CAN, MCP2515_BIT_MOD);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2105      	movs	r1, #5
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f81d 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, address);
 8000c72:	1cfb      	adds	r3, r7, #3
 8000c74:	781a      	ldrb	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 f816 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, mask);
 8000c80:	1cbb      	adds	r3, r7, #2
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 f80f 	bl	8000cac <SPI_Tx>
  SPI_Tx(SPI_CAN, data);
 8000c8e:	1c7b      	adds	r3, r7, #1
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f808 	bl	8000cac <SPI_Tx>
        
  MCP2515_CS_HIGH(SPI_CAN);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fdd8 	bl	8000854 <MCP2515_CS_HIGH>
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}

08000cac <SPI_Tx>:

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(SPI_HandleTypeDef *SPI_CAN, uint8_t data)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	000a      	movs	r2, r1
 8000cb6:	1cfb      	adds	r3, r7, #3
 8000cb8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000cba:	1cf9      	adds	r1, r7, #3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f002 fea3 	bl	8003a0c <HAL_SPI_Transmit>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	1dfb      	adds	r3, r7, #7
 8000cda:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	f002 fe90 	bl	8003a0c <HAL_SPI_Transmit>
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b004      	add	sp, #16
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(SPI_HandleTypeDef *SPI_CAN)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000cfc:	240f      	movs	r4, #15
 8000cfe:	1939      	adds	r1, r7, r4
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	230a      	movs	r3, #10
 8000d04:	2201      	movs	r2, #1
 8000d06:	f002 ffd9 	bl	8003cbc <HAL_SPI_Receive>
  return retVal;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	781b      	ldrb	r3, [r3, #0]
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b005      	add	sp, #20
 8000d14:	bd90      	pop	{r4, r7, pc}

08000d16 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(SPI_HandleTypeDef *SPI_CAN, uint8_t *buffer, uint8_t length)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	230a      	movs	r3, #10
 8000d30:	f002 ffc4 	bl	8003cbc <HAL_SPI_Receive>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b004      	add	sp, #16
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d42:	f001 f9c9 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f8d1 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4a:	f000 fb0b 	bl	8001364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d4e:	f000 fad9 	bl	8001304 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000d52:	f000 f933 	bl	8000fbc <MX_ADC_Init>
  MX_I2C1_Init();
 8000d56:	f000 f999 	bl	800108c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d5a:	f000 f9d7 	bl	800110c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d5e:	f000 fa13 	bl	8001188 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000d62:	f000 fa4f 	bl	8001204 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d66:	f005 fbfb 	bl	8006560 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uart_tx_sem */
  uart_tx_semHandle = osSemaphoreNew(1, 1, &uart_tx_sem_attributes);
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <main+0x12c>)
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2001      	movs	r0, #1
 8000d72:	f005 fd4d 	bl	8006810 <osSemaphoreNew>
 8000d76:	0002      	movs	r2, r0
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <main+0x130>)
 8000d7a:	601a      	str	r2, [r3, #0]

  /* creation of CAN_sem */
  CAN_semHandle = osSemaphoreNew(1, 1, &CAN_sem_attributes);
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	; (8000e70 <main+0x134>)
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2101      	movs	r1, #1
 8000d82:	2001      	movs	r0, #1
 8000d84:	f005 fd44 	bl	8006810 <osSemaphoreNew>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <main+0x138>)
 8000d8c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of uart_rx_queue */
  uart_rx_queueHandle = osMessageQueueNew (4, sizeof(uint8_t), &uart_rx_queue_attributes);
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <main+0x13c>)
 8000d90:	001a      	movs	r2, r3
 8000d92:	2101      	movs	r1, #1
 8000d94:	2004      	movs	r0, #4
 8000d96:	f005 fe89 	bl	8006aac <osMessageQueueNew>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <main+0x140>)
 8000d9e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000da0:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <main+0x144>)
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <main+0x148>)
 8000da4:	2100      	movs	r1, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f005 fc34 	bl	8006614 <osThreadNew>
 8000dac:	0002      	movs	r2, r0
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <main+0x14c>)
 8000db0:	601a      	str	r2, [r3, #0]

  /* creation of uart_rx */
  uart_rxHandle = osThreadNew(uart_rx_task, NULL, &uart_rx_attributes);
 8000db2:	4a36      	ldr	r2, [pc, #216]	; (8000e8c <main+0x150>)
 8000db4:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <main+0x154>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f005 fc2b 	bl	8006614 <osThreadNew>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <main+0x158>)
 8000dc2:	601a      	str	r2, [r3, #0]

  /* creation of adc */
  adcHandle = osThreadNew(adc_task, NULL, &adc_attributes);
 8000dc4:	4a34      	ldr	r2, [pc, #208]	; (8000e98 <main+0x15c>)
 8000dc6:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <main+0x160>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f005 fc22 	bl	8006614 <osThreadNew>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x164>)
 8000dd4:	601a      	str	r2, [r3, #0]

  /* creation of stepper */
  stepperHandle = osThreadNew(stepper_task, NULL, &stepper_attributes);
 8000dd6:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <main+0x168>)
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <main+0x16c>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f005 fc19 	bl	8006614 <osThreadNew>
 8000de2:	0002      	movs	r2, r0
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <main+0x170>)
 8000de6:	601a      	str	r2, [r3, #0]

  /* creation of servo */
  servoHandle = osThreadNew(servo_Task, NULL, &servo_attributes);
 8000de8:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <main+0x174>)
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <main+0x178>)
 8000dec:	2100      	movs	r1, #0
 8000dee:	0018      	movs	r0, r3
 8000df0:	f005 fc10 	bl	8006614 <osThreadNew>
 8000df4:	0002      	movs	r2, r0
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <main+0x17c>)
 8000df8:	601a      	str	r2, [r3, #0]

  /* creation of enviar_estado */
  enviar_estadoHandle = osThreadNew(enviar_estado_Task, NULL, &enviar_estado_attributes);
 8000dfa:	4a30      	ldr	r2, [pc, #192]	; (8000ebc <main+0x180>)
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <main+0x184>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	0018      	movs	r0, r3
 8000e02:	f005 fc07 	bl	8006614 <osThreadNew>
 8000e06:	0002      	movs	r2, r0
 8000e08:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <main+0x188>)
 8000e0a:	601a      	str	r2, [r3, #0]

  /* creation of enviar_tmp */
  enviar_tmpHandle = osThreadNew(enviar_tmp_task, NULL, &enviar_tmp_attributes);
 8000e0c:	4a2e      	ldr	r2, [pc, #184]	; (8000ec8 <main+0x18c>)
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <main+0x190>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f005 fbfe 	bl	8006614 <osThreadNew>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <main+0x194>)
 8000e1c:	601a      	str	r2, [r3, #0]

  /* creation of oled */
  oledHandle = osThreadNew(oled_Task, NULL, &oled_attributes);
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <main+0x198>)
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <main+0x19c>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	0018      	movs	r0, r3
 8000e26:	f005 fbf5 	bl	8006614 <osThreadNew>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <main+0x1a0>)
 8000e2e:	601a      	str	r2, [r3, #0]

  /* creation of CAN_remote */
  CAN_remoteHandle = osThreadNew(CAN_remote_task, NULL, &CAN_remote_attributes);
 8000e30:	4a2b      	ldr	r2, [pc, #172]	; (8000ee0 <main+0x1a4>)
 8000e32:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <main+0x1a8>)
 8000e34:	2100      	movs	r1, #0
 8000e36:	0018      	movs	r0, r3
 8000e38:	f005 fbec 	bl	8006614 <osThreadNew>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <main+0x1ac>)
 8000e40:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadSuspend(enviar_tmpHandle);
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <main+0x194>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	f005 fc8c 	bl	8006764 <osThreadSuspend>
	osThreadSuspend(stepperHandle);
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <main+0x170>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f005 fc87 	bl	8006764 <osThreadSuspend>
	osThreadSuspend(oledHandle);
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <main+0x1a0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f005 fc82 	bl	8006764 <osThreadSuspend>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e60:	f005 fbaa 	bl	80065b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <main+0x128>
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	0800a310 	.word	0x0800a310
 8000e6c:	200002e0 	.word	0x200002e0
 8000e70:	0800a320 	.word	0x0800a320
 8000e74:	200002e4 	.word	0x200002e4
 8000e78:	0800a2f8 	.word	0x0800a2f8
 8000e7c:	200002dc 	.word	0x200002dc
 8000e80:	0800a1b4 	.word	0x0800a1b4
 8000e84:	0800155d 	.word	0x0800155d
 8000e88:	200002b8 	.word	0x200002b8
 8000e8c:	0800a1d8 	.word	0x0800a1d8
 8000e90:	0800156d 	.word	0x0800156d
 8000e94:	200002bc 	.word	0x200002bc
 8000e98:	0800a1fc 	.word	0x0800a1fc
 8000e9c:	0800157d 	.word	0x0800157d
 8000ea0:	200002c0 	.word	0x200002c0
 8000ea4:	0800a220 	.word	0x0800a220
 8000ea8:	0800158d 	.word	0x0800158d
 8000eac:	200002c4 	.word	0x200002c4
 8000eb0:	0800a244 	.word	0x0800a244
 8000eb4:	0800159d 	.word	0x0800159d
 8000eb8:	200002c8 	.word	0x200002c8
 8000ebc:	0800a268 	.word	0x0800a268
 8000ec0:	080015ad 	.word	0x080015ad
 8000ec4:	200002cc 	.word	0x200002cc
 8000ec8:	0800a28c 	.word	0x0800a28c
 8000ecc:	080015bd 	.word	0x080015bd
 8000ed0:	200002d0 	.word	0x200002d0
 8000ed4:	0800a2b0 	.word	0x0800a2b0
 8000ed8:	080015cd 	.word	0x080015cd
 8000edc:	200002d4 	.word	0x200002d4
 8000ee0:	0800a2d4 	.word	0x0800a2d4
 8000ee4:	080015dd 	.word	0x080015dd
 8000ee8:	200002d8 	.word	0x200002d8

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b097      	sub	sp, #92	; 0x5c
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	2428      	movs	r4, #40	; 0x28
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	2330      	movs	r3, #48	; 0x30
 8000efa:	001a      	movs	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f008 fb9d 	bl	800963c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f02:	2318      	movs	r3, #24
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	0018      	movs	r0, r3
 8000f08:	2310      	movs	r3, #16
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f008 fb95 	bl	800963c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	0018      	movs	r0, r3
 8000f16:	2314      	movs	r3, #20
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f008 fb8e 	bl	800963c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000f20:	0021      	movs	r1, r4
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2212      	movs	r2, #18
 8000f26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2201      	movs	r2, #1
 8000f32:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2210      	movs	r2, #16
 8000f38:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2202      	movs	r2, #2
 8000f44:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	0212      	lsls	r2, r2, #8
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0352      	lsls	r2, r2, #13
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 ff22 	bl	8002da8 <HAL_RCC_OscConfig>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f68:	f000 fd9a 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	2118      	movs	r1, #24
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f002 fa2a 	bl	80033e4 <HAL_RCC_ClockConfig>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f94:	f000 fd84 	bl	8001aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f002 fb9a 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000fb0:	f000 fd76 	bl	8001aa0 <Error_Handler>
  }
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b017      	add	sp, #92	; 0x5c
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	001a      	movs	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f008 fb36 	bl	800963c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <MX_ADC_Init+0xc8>)
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <MX_ADC_Init+0xcc>)
 8000fd4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_ADC_Init+0xc8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_ADC_Init+0xc8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_ADC_Init+0xc8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <MX_ADC_Init+0xc8>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_ADC_Init+0xc8>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_ADC_Init+0xc8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <MX_ADC_Init+0xc8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_ADC_Init+0xc8>)
 8001002:	2201      	movs	r2, #1
 8001004:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC_Init+0xc8>)
 8001008:	2200      	movs	r2, #0
 800100a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_ADC_Init+0xc8>)
 800100e:	22c2      	movs	r2, #194	; 0xc2
 8001010:	32ff      	adds	r2, #255	; 0xff
 8001012:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_ADC_Init+0xc8>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC_Init+0xc8>)
 800101c:	2224      	movs	r2, #36	; 0x24
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_ADC_Init+0xc8>)
 8001024:	2201      	movs	r2, #1
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_ADC_Init+0xc8>)
 800102a:	0018      	movs	r0, r3
 800102c:	f001 f884 	bl	8002138 <HAL_ADC_Init>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001034:	f000 fd34 	bl	8001aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	0152      	lsls	r2, r2, #5
 8001044:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2203      	movs	r2, #3
 800104a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800104c:	1d3a      	adds	r2, r7, #4
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_ADC_Init+0xc8>)
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f9b0 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800105c:	f000 fd20 	bl	8001aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001066:	1d3a      	adds	r2, r7, #4
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_ADC_Init+0xc8>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f001 f9a3 	bl	80023b8 <HAL_ADC_ConfigChannel>
 8001072:	1e03      	subs	r3, r0, #0
 8001074:	d001      	beq.n	800107a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001076:	f000 fd13 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000098 	.word	0x20000098
 8001088:	40012400 	.word	0x40012400

0800108c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_I2C1_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_I2C1_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_I2C1_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <MX_I2C1_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_I2C1_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_I2C1_Init+0x74>)
 80010c8:	0018      	movs	r0, r3
 80010ca:	f001 fd3f 	bl	8002b4c <HAL_I2C_Init>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 fce5 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_I2C1_Init+0x74>)
 80010d8:	2100      	movs	r1, #0
 80010da:	0018      	movs	r0, r3
 80010dc:	f001 fdcc 	bl	8002c78 <HAL_I2CEx_ConfigAnalogFilter>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 fcdc 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <MX_I2C1_Init+0x74>)
 80010ea:	2100      	movs	r1, #0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 fe0f 	bl	8002d10 <HAL_I2CEx_ConfigDigitalFilter>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 fcd3 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000d8 	.word	0x200000d8
 8001104:	40005400 	.word	0x40005400
 8001108:	2000090e 	.word	0x2000090e

0800110c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_SPI1_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <MX_SPI1_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_SPI1_Init+0x74>)
 8001118:	2282      	movs	r2, #130	; 0x82
 800111a:	0052      	lsls	r2, r2, #1
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_SPI1_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI1_Init+0x74>)
 8001126:	22e0      	movs	r2, #224	; 0xe0
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_SPI1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI1_Init+0x74>)
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI1_Init+0x74>)
 8001142:	2220      	movs	r2, #32
 8001144:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI1_Init+0x74>)
 800115a:	2207      	movs	r2, #7
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_SPI1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MX_SPI1_Init+0x74>)
 800116c:	0018      	movs	r0, r3
 800116e:	f002 fb95 	bl	800389c <HAL_SPI_Init>
 8001172:	1e03      	subs	r3, r0, #0
 8001174:	d001      	beq.n	800117a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 fc93 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000124 	.word	0x20000124
 8001184:	40013000 	.word	0x40013000

08001188 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_SPI2_Init+0x74>)
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <MX_SPI2_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_SPI2_Init+0x74>)
 8001194:	2282      	movs	r2, #130	; 0x82
 8001196:	0052      	lsls	r2, r2, #1
 8001198:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_SPI2_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI2_Init+0x74>)
 80011a2:	22e0      	movs	r2, #224	; 0xe0
 80011a4:	00d2      	lsls	r2, r2, #3
 80011a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI2_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_SPI2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI2_Init+0x74>)
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI2_Init+0x74>)
 80011be:	2220      	movs	r2, #32
 80011c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI2_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI2_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_SPI2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI2_Init+0x74>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <MX_SPI2_Init+0x74>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f002 fb57 	bl	800389c <HAL_SPI_Init>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011f2:	f000 fc55 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000188 	.word	0x20000188
 8001200:	40003800 	.word	0x40003800

08001204 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	2328      	movs	r3, #40	; 0x28
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	0018      	movs	r0, r3
 8001210:	2310      	movs	r3, #16
 8001212:	001a      	movs	r2, r3
 8001214:	2100      	movs	r1, #0
 8001216:	f008 fa11 	bl	800963c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	2320      	movs	r3, #32
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	0018      	movs	r0, r3
 8001220:	2308      	movs	r3, #8
 8001222:	001a      	movs	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	f008 fa09 	bl	800963c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	0018      	movs	r0, r3
 800122e:	231c      	movs	r3, #28
 8001230:	001a      	movs	r2, r3
 8001232:	2100      	movs	r1, #0
 8001234:	f008 fa02 	bl	800963c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_TIM3_Init+0xf4>)
 800123a:	4a30      	ldr	r2, [pc, #192]	; (80012fc <MX_TIM3_Init+0xf8>)
 800123c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <MX_TIM3_Init+0xf4>)
 8001240:	222f      	movs	r2, #47	; 0x2f
 8001242:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_TIM3_Init+0xf4>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800124a:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM3_Init+0xf4>)
 800124c:	4a2c      	ldr	r2, [pc, #176]	; (8001300 <MX_TIM3_Init+0xfc>)
 800124e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_TIM3_Init+0xf4>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <MX_TIM3_Init+0xf4>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_TIM3_Init+0xf4>)
 800125e:	0018      	movs	r0, r3
 8001260:	f003 fa2a 	bl	80046b8 <HAL_TIM_Base_Init>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001268:	f000 fc1a 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	2128      	movs	r1, #40	; 0x28
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0152      	lsls	r2, r2, #5
 8001274:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001276:	187a      	adds	r2, r7, r1
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM3_Init+0xf4>)
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f003 fceb 	bl	8004c58 <HAL_TIM_ConfigClockSource>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001286:	f000 fc0b 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_TIM3_Init+0xf4>)
 800128c:	0018      	movs	r0, r3
 800128e:	f003 faaf 	bl	80047f0 <HAL_TIM_PWM_Init>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001296:	f000 fc03 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2120      	movs	r1, #32
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a8:	187a      	adds	r2, r7, r1
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_TIM3_Init+0xf4>)
 80012ac:	0011      	movs	r1, r2
 80012ae:	0018      	movs	r0, r3
 80012b0:	f004 f8d2 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80012b8:	f000 fbf2 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2260      	movs	r2, #96	; 0x60
 80012c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <MX_TIM3_Init+0xf4>)
 80012d8:	2204      	movs	r2, #4
 80012da:	0018      	movs	r0, r3
 80012dc:	f003 fbf6 	bl	8004acc <HAL_TIM_PWM_ConfigChannel>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80012e4:	f000 fbdc 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <MX_TIM3_Init+0xf4>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f000 fd44 	bl	8001d78 <HAL_TIM_MspPostInit>

}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b00e      	add	sp, #56	; 0x38
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001ec 	.word	0x200001ec
 80012fc:	40000400 	.word	0x40000400
 8001300:	00004e1f 	.word	0x00004e1f

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_USART2_UART_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001310:	2296      	movs	r2, #150	; 0x96
 8001312:	0212      	lsls	r2, r2, #8
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_USART2_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART2_UART_Init+0x58>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001348:	0018      	movs	r0, r3
 800134a:	f004 f8ed 	bl	8005528 <HAL_UART_Init>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 fba5 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000234 	.word	0x20000234
 8001360:	40004400 	.word	0x40004400

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b08b      	sub	sp, #44	; 0x2c
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	2414      	movs	r4, #20
 800136c:	193b      	adds	r3, r7, r4
 800136e:	0018      	movs	r0, r3
 8001370:	2314      	movs	r3, #20
 8001372:	001a      	movs	r2, r3
 8001374:	2100      	movs	r1, #0
 8001376:	f008 f961 	bl	800963c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <MX_GPIO_Init+0x170>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <MX_GPIO_Init+0x170>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0309      	lsls	r1, r1, #12
 8001384:	430a      	orrs	r2, r1
 8001386:	615a      	str	r2, [r3, #20]
 8001388:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <MX_GPIO_Init+0x170>)
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	031b      	lsls	r3, r3, #12
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001396:	4b4f      	ldr	r3, [pc, #316]	; (80014d4 <MX_GPIO_Init+0x170>)
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <MX_GPIO_Init+0x170>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	03c9      	lsls	r1, r1, #15
 80013a0:	430a      	orrs	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	03db      	lsls	r3, r3, #15
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	0289      	lsls	r1, r1, #10
 80013bc:	430a      	orrs	r2, r1
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	029b      	lsls	r3, r3, #10
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	02c9      	lsls	r1, r1, #11
 80013d8:	430a      	orrs	r2, r1
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <MX_GPIO_Init+0x170>)
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	02db      	lsls	r3, r3, #11
 80013e4:	4013      	ands	r3, r2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80013ea:	2390      	movs	r3, #144	; 0x90
 80013ec:	05db      	lsls	r3, r3, #23
 80013ee:	2200      	movs	r2, #0
 80013f0:	2110      	movs	r1, #16
 80013f2:	0018      	movs	r0, r3
 80013f4:	f001 fb70 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, steper_in_4_Pin|CAN2_CS_Pin|steper_in_1_Pin|steper_in_3_Pin
 80013f8:	4937      	ldr	r1, [pc, #220]	; (80014d8 <MX_GPIO_Init+0x174>)
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <MX_GPIO_Init+0x178>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 fb6a 	bl	8002ad8 <HAL_GPIO_WritePin>
                          |steper_in_2_Pin|CAN1_CSB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0192      	lsls	r2, r2, #6
 800140a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2284      	movs	r2, #132	; 0x84
 8001410:	0392      	lsls	r2, r2, #14
 8001412:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	193b      	adds	r3, r7, r4
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141a:	193b      	adds	r3, r7, r4
 800141c:	4a30      	ldr	r2, [pc, #192]	; (80014e0 <MX_GPIO_Init+0x17c>)
 800141e:	0019      	movs	r1, r3
 8001420:	0010      	movs	r0, r2
 8001422:	f001 f9e9 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	2210      	movs	r2, #16
 800142a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	193b      	adds	r3, r7, r4
 800142e:	2201      	movs	r2, #1
 8001430:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	193b      	adds	r3, r7, r4
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	193b      	adds	r3, r7, r4
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 800143e:	193a      	adds	r2, r7, r4
 8001440:	2390      	movs	r3, #144	; 0x90
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	0011      	movs	r1, r2
 8001446:	0018      	movs	r0, r3
 8001448:	f001 f9d6 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ican2_Pin */
  GPIO_InitStruct.Pin = Ican2_Pin;
 800144c:	0021      	movs	r1, r4
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2210      	movs	r2, #16
 8001452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2288      	movs	r2, #136	; 0x88
 8001458:	0352      	lsls	r2, r2, #13
 800145a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800145c:	000c      	movs	r4, r1
 800145e:	193b      	adds	r3, r7, r4
 8001460:	2202      	movs	r2, #2
 8001462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ican2_GPIO_Port, &GPIO_InitStruct);
 8001464:	193b      	adds	r3, r7, r4
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <MX_GPIO_Init+0x17c>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f001 f9c4 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : steper_in_4_Pin CAN2_CS_Pin steper_in_1_Pin steper_in_3_Pin
                           steper_in_2_Pin CAN1_CSB6_Pin */
  GPIO_InitStruct.Pin = steper_in_4_Pin|CAN2_CS_Pin|steper_in_1_Pin|steper_in_3_Pin
 8001470:	193b      	adds	r3, r7, r4
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <MX_GPIO_Init+0x174>)
 8001474:	601a      	str	r2, [r3, #0]
                          |steper_in_2_Pin|CAN1_CSB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	193b      	adds	r3, r7, r4
 8001478:	2201      	movs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	193b      	adds	r3, r7, r4
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	193b      	adds	r3, r7, r4
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	193b      	adds	r3, r7, r4
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <MX_GPIO_Init+0x178>)
 800148c:	0019      	movs	r1, r3
 800148e:	0010      	movs	r0, r2
 8001490:	f001 f9b2 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ican1_Pin */
  GPIO_InitStruct.Pin = Ican1_Pin;
 8001494:	0021      	movs	r1, r4
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2288      	movs	r2, #136	; 0x88
 80014a2:	0352      	lsls	r2, r2, #13
 80014a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2202      	movs	r2, #2
 80014aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Ican1_GPIO_Port, &GPIO_InitStruct);
 80014ac:	187a      	adds	r2, r7, r1
 80014ae:	2390      	movs	r3, #144	; 0x90
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f001 f99f 	bl	80027f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2103      	movs	r1, #3
 80014be:	2007      	movs	r0, #7
 80014c0:	f001 f8f8 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80014c4:	2007      	movs	r0, #7
 80014c6:	f001 f90a 	bl	80026de <HAL_NVIC_EnableIRQ>

}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b00b      	add	sp, #44	; 0x2c
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	40021000 	.word	0x40021000
 80014d8:	00001478 	.word	0x00001478
 80014dc:	48000400 	.word	0x48000400
 80014e0:	48000800 	.word	0x48000800

080014e4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	BaseType_t priority;
	osSemaphoreRelease(uart_tx_semHandle); //, &priority);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_UART_TxCpltCallback+0x28>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f005 fa8d 	bl	8006a10 <osSemaphoreRelease>
	portYIELD_FROM_ISR(priority);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_UART_TxCpltCallback+0x20>
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_UART_TxCpltCallback+0x2c>)
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0552      	lsls	r2, r2, #21
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002e0 	.word	0x200002e0
 8001510:	e000ed04 	.word	0xe000ed04

08001514 <HAL_GPIO_EXTI_Callback>:
	HAL_UART_Receive_IT(&huart2, &rx_data, sizeof(rx_data));
	portYIELD_FROM_ISR(priority);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	801a      	strh	r2, [r3, #0]
	BaseType_t priority;
	if (GPIO_Pin == Ican1_Pin || GPIO_Pin==Ican2_Pin) {
 8001520:	1dbb      	adds	r3, r7, #6
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	429a      	cmp	r2, r3
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_EXTI_Callback+0x20>
 800152c:	1dbb      	adds	r3, r7, #6
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	2b10      	cmp	r3, #16
 8001532:	d10b      	bne.n	800154c <HAL_GPIO_EXTI_Callback+0x38>
		osSemaphoreRelease(CAN_semHandle); //, &priority);
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_GPIO_EXTI_Callback+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f005 fa69 	bl	8006a10 <osSemaphoreRelease>
		portYIELD_FROM_ISR(priority);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_EXTI_Callback+0x38>
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <HAL_GPIO_EXTI_Callback+0x44>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	0552      	lsls	r2, r2, #21
 800154a:	601a      	str	r2, [r3, #0]
	}
}
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002e4 	.word	0x200002e4
 8001558:	e000ed04 	.word	0xe000ed04

0800155c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f005 f92b 	bl	80067c0 <osDelay>
 800156a:	e7fb      	b.n	8001564 <StartDefaultTask+0x8>

0800156c <uart_rx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart_rx_task */
void uart_rx_task(void *argument)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart_rx_task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f005 f923 	bl	80067c0 <osDelay>
 800157a:	e7fb      	b.n	8001574 <uart_rx_task+0x8>

0800157c <adc_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_task */
void adc_task(void *argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f005 f91b 	bl	80067c0 <osDelay>
 800158a:	e7fb      	b.n	8001584 <adc_task+0x8>

0800158c <stepper_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stepper_task */
void stepper_task(void *argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stepper_task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8001594:	2064      	movs	r0, #100	; 0x64
 8001596:	f005 f913 	bl	80067c0 <osDelay>
 800159a:	e7fb      	b.n	8001594 <stepper_task+0x8>

0800159c <servo_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo_Task */
void servo_Task(void *argument)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo_Task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f005 f90b 	bl	80067c0 <osDelay>
 80015aa:	e7fb      	b.n	80015a4 <servo_Task+0x8>

080015ac <enviar_estado_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_enviar_estado_Task */
void enviar_estado_Task(void *argument)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN enviar_estado_Task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80015b4:	2064      	movs	r0, #100	; 0x64
 80015b6:	f005 f903 	bl	80067c0 <osDelay>
 80015ba:	e7fb      	b.n	80015b4 <enviar_estado_Task+0x8>

080015bc <enviar_tmp_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_enviar_tmp_task */
void enviar_tmp_task(void *argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN enviar_tmp_task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80015c4:	2064      	movs	r0, #100	; 0x64
 80015c6:	f005 f8fb 	bl	80067c0 <osDelay>
 80015ca:	e7fb      	b.n	80015c4 <enviar_tmp_task+0x8>

080015cc <oled_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_oled_Task */
void oled_Task(void *argument)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN oled_Task */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f005 f8f3 	bl	80067c0 <osDelay>
 80015da:	e7fb      	b.n	80015d4 <oled_Task+0x8>

080015dc <CAN_remote_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_remote_task */
void CAN_remote_task(void *argument)
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015de:	46de      	mov	lr, fp
 80015e0:	4657      	mov	r7, sl
 80015e2:	464e      	mov	r6, r9
 80015e4:	4645      	mov	r5, r8
 80015e6:	b5e0      	push	{r5, r6, r7, lr}
 80015e8:	b099      	sub	sp, #100	; 0x64
 80015ea:	af08      	add	r7, sp, #32
 80015ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_remote_task */
	uint8_t tx_buffer[49], i=0;
 80015ee:	233f      	movs	r3, #63	; 0x3f
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]

	  if( CANSPI_Initialize(CAN1)) {
 80015f6:	4bbb      	ldr	r3, [pc, #748]	; (80018e4 <CAN_remote_task+0x308>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7fe fe3d 	bl	8000278 <CANSPI_Initialize>
 80015fe:	1e03      	subs	r3, r0, #0
 8001600:	d04d      	beq.n	800169e <CAN_remote_task+0xc2>
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001602:	4bb9      	ldr	r3, [pc, #740]	; (80018e8 <CAN_remote_task+0x30c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	4252      	negs	r2, r2
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f005 f9a1 	bl	8006954 <osSemaphoreAcquire>
			sprintf(tx_buffer, "CAN1 initialized OK\n\r");
 8001612:	4ab6      	ldr	r2, [pc, #728]	; (80018ec <CAN_remote_task+0x310>)
 8001614:	240c      	movs	r4, #12
 8001616:	193b      	adds	r3, r7, r4
 8001618:	0011      	movs	r1, r2
 800161a:	0018      	movs	r0, r3
 800161c:	f008 f934 	bl	8009888 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001620:	1939      	adds	r1, r7, r4
 8001622:	4bb3      	ldr	r3, [pc, #716]	; (80018f0 <CAN_remote_task+0x314>)
 8001624:	2231      	movs	r2, #49	; 0x31
 8001626:	0018      	movs	r0, r3
 8001628:	f003 ffd2 	bl	80055d0 <HAL_UART_Transmit_IT>
			dSTANDARD_CAN_MSG_ID_2_0B;
					    	txMessage.frame.id = 15;
 800162c:	4bb1      	ldr	r3, [pc, #708]	; (80018f4 <CAN_remote_task+0x318>)
 800162e:	220f      	movs	r2, #15
 8001630:	605a      	str	r2, [r3, #4]
					    	txMessage.frame.dlc = 8;
 8001632:	4bb0      	ldr	r3, [pc, #704]	; (80018f4 <CAN_remote_task+0x318>)
 8001634:	2208      	movs	r2, #8
 8001636:	721a      	strb	r2, [r3, #8]
					    	txMessage.frame.data0 = 1;
 8001638:	4bae      	ldr	r3, [pc, #696]	; (80018f4 <CAN_remote_task+0x318>)
 800163a:	2201      	movs	r2, #1
 800163c:	725a      	strb	r2, [r3, #9]
					    	txMessage.frame.data1 = 2;
 800163e:	4bad      	ldr	r3, [pc, #692]	; (80018f4 <CAN_remote_task+0x318>)
 8001640:	2202      	movs	r2, #2
 8001642:	729a      	strb	r2, [r3, #10]
					    	txMessage.frame.data2 = 3;
 8001644:	4bab      	ldr	r3, [pc, #684]	; (80018f4 <CAN_remote_task+0x318>)
 8001646:	2203      	movs	r2, #3
 8001648:	72da      	strb	r2, [r3, #11]
					    	txMessage.frame.data3 = 4;
 800164a:	4baa      	ldr	r3, [pc, #680]	; (80018f4 <CAN_remote_task+0x318>)
 800164c:	2204      	movs	r2, #4
 800164e:	731a      	strb	r2, [r3, #12]
					    	txMessage.frame.data4 = 5;
 8001650:	4ba8      	ldr	r3, [pc, #672]	; (80018f4 <CAN_remote_task+0x318>)
 8001652:	2205      	movs	r2, #5
 8001654:	735a      	strb	r2, [r3, #13]
					    	txMessage.frame.data5 = 6;
 8001656:	4ba7      	ldr	r3, [pc, #668]	; (80018f4 <CAN_remote_task+0x318>)
 8001658:	2206      	movs	r2, #6
 800165a:	739a      	strb	r2, [r3, #14]
					    	txMessage.frame.data6 = 7;
 800165c:	4ba5      	ldr	r3, [pc, #660]	; (80018f4 <CAN_remote_task+0x318>)
 800165e:	2207      	movs	r2, #7
 8001660:	73da      	strb	r2, [r3, #15]
					    	txMessage.frame.data7 = 8;
 8001662:	4ba4      	ldr	r3, [pc, #656]	; (80018f4 <CAN_remote_task+0x318>)
 8001664:	2208      	movs	r2, #8
 8001666:	741a      	strb	r2, [r3, #16]
					    	CANSPI_Transmit(CAN1, &txMessage);
 8001668:	4aa2      	ldr	r2, [pc, #648]	; (80018f4 <CAN_remote_task+0x318>)
 800166a:	4b9e      	ldr	r3, [pc, #632]	; (80018e4 <CAN_remote_task+0x308>)
 800166c:	0011      	movs	r1, r2
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe fef4 	bl	800045c <CANSPI_Transmit>
							osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001674:	4b9c      	ldr	r3, [pc, #624]	; (80018e8 <CAN_remote_task+0x30c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	4252      	negs	r2, r2
 800167c:	0011      	movs	r1, r2
 800167e:	0018      	movs	r0, r3
 8001680:	f005 f968 	bl	8006954 <osSemaphoreAcquire>
							sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 8001684:	4a9c      	ldr	r2, [pc, #624]	; (80018f8 <CAN_remote_task+0x31c>)
 8001686:	193b      	adds	r3, r7, r4
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f008 f8fc 	bl	8009888 <siprintf>
							HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001690:	1939      	adds	r1, r7, r4
 8001692:	4b97      	ldr	r3, [pc, #604]	; (80018f0 <CAN_remote_task+0x314>)
 8001694:	2231      	movs	r2, #49	; 0x31
 8001696:	0018      	movs	r0, r3
 8001698:	f003 ff9a 	bl	80055d0 <HAL_UART_Transmit_IT>
 800169c:	e014      	b.n	80016c8 <CAN_remote_task+0xec>
	  }
	  else
	  {
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 800169e:	4b92      	ldr	r3, [pc, #584]	; (80018e8 <CAN_remote_task+0x30c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4252      	negs	r2, r2
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f005 f953 	bl	8006954 <osSemaphoreAcquire>
			sprintf(tx_buffer, "Error CAN1 initiali\n\r");
 80016ae:	4a93      	ldr	r2, [pc, #588]	; (80018fc <CAN_remote_task+0x320>)
 80016b0:	240c      	movs	r4, #12
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f008 f8e6 	bl	8009888 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80016bc:	1939      	adds	r1, r7, r4
 80016be:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <CAN_remote_task+0x314>)
 80016c0:	2231      	movs	r2, #49	; 0x31
 80016c2:	0018      	movs	r0, r3
 80016c4:	f003 ff84 	bl	80055d0 <HAL_UART_Transmit_IT>
	  }
	  if (CANSPI_Initialize(CAN2)) {
 80016c8:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <CAN_remote_task+0x324>)
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7fe fdd4 	bl	8000278 <CANSPI_Initialize>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d04d      	beq.n	8001770 <CAN_remote_task+0x194>
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80016d4:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <CAN_remote_task+0x30c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2201      	movs	r2, #1
 80016da:	4252      	negs	r2, r2
 80016dc:	0011      	movs	r1, r2
 80016de:	0018      	movs	r0, r3
 80016e0:	f005 f938 	bl	8006954 <osSemaphoreAcquire>
			sprintf(tx_buffer, "CAN2 initialized OK\n\r");
 80016e4:	4a87      	ldr	r2, [pc, #540]	; (8001904 <CAN_remote_task+0x328>)
 80016e6:	240c      	movs	r4, #12
 80016e8:	193b      	adds	r3, r7, r4
 80016ea:	0011      	movs	r1, r2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f008 f8cb 	bl	8009888 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80016f2:	1939      	adds	r1, r7, r4
 80016f4:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <CAN_remote_task+0x314>)
 80016f6:	2231      	movs	r2, #49	; 0x31
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 ff69 	bl	80055d0 <HAL_UART_Transmit_IT>
			dSTANDARD_CAN_MSG_ID_2_0B;
					    	txMessage.frame.id = 25;
 80016fe:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <CAN_remote_task+0x318>)
 8001700:	2219      	movs	r2, #25
 8001702:	605a      	str	r2, [r3, #4]
					    	txMessage.frame.dlc = 8;
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <CAN_remote_task+0x318>)
 8001706:	2208      	movs	r2, #8
 8001708:	721a      	strb	r2, [r3, #8]
					    	txMessage.frame.data0 = 8;
 800170a:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <CAN_remote_task+0x318>)
 800170c:	2208      	movs	r2, #8
 800170e:	725a      	strb	r2, [r3, #9]
					    	txMessage.frame.data1 = 7;
 8001710:	4b78      	ldr	r3, [pc, #480]	; (80018f4 <CAN_remote_task+0x318>)
 8001712:	2207      	movs	r2, #7
 8001714:	729a      	strb	r2, [r3, #10]
					    	txMessage.frame.data2 = 6;
 8001716:	4b77      	ldr	r3, [pc, #476]	; (80018f4 <CAN_remote_task+0x318>)
 8001718:	2206      	movs	r2, #6
 800171a:	72da      	strb	r2, [r3, #11]
					    	txMessage.frame.data3 = 5;
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <CAN_remote_task+0x318>)
 800171e:	2205      	movs	r2, #5
 8001720:	731a      	strb	r2, [r3, #12]
					    	txMessage.frame.data4 = 4;
 8001722:	4b74      	ldr	r3, [pc, #464]	; (80018f4 <CAN_remote_task+0x318>)
 8001724:	2204      	movs	r2, #4
 8001726:	735a      	strb	r2, [r3, #13]
					    	txMessage.frame.data5 = 3;
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <CAN_remote_task+0x318>)
 800172a:	2203      	movs	r2, #3
 800172c:	739a      	strb	r2, [r3, #14]
					    	txMessage.frame.data6 = 2;
 800172e:	4b71      	ldr	r3, [pc, #452]	; (80018f4 <CAN_remote_task+0x318>)
 8001730:	2202      	movs	r2, #2
 8001732:	73da      	strb	r2, [r3, #15]
					    	txMessage.frame.data7 = 1;
 8001734:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <CAN_remote_task+0x318>)
 8001736:	2201      	movs	r2, #1
 8001738:	741a      	strb	r2, [r3, #16]
					    	CANSPI_Transmit(CAN2, &txMessage);
 800173a:	4a6e      	ldr	r2, [pc, #440]	; (80018f4 <CAN_remote_task+0x318>)
 800173c:	4b70      	ldr	r3, [pc, #448]	; (8001900 <CAN_remote_task+0x324>)
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f7fe fe8b 	bl	800045c <CANSPI_Transmit>
							osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001746:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <CAN_remote_task+0x30c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	4252      	negs	r2, r2
 800174e:	0011      	movs	r1, r2
 8001750:	0018      	movs	r0, r3
 8001752:	f005 f8ff 	bl	8006954 <osSemaphoreAcquire>
							sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 8001756:	4a6c      	ldr	r2, [pc, #432]	; (8001908 <CAN_remote_task+0x32c>)
 8001758:	193b      	adds	r3, r7, r4
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f008 f893 	bl	8009888 <siprintf>
							HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001762:	1939      	adds	r1, r7, r4
 8001764:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <CAN_remote_task+0x314>)
 8001766:	2231      	movs	r2, #49	; 0x31
 8001768:	0018      	movs	r0, r3
 800176a:	f003 ff31 	bl	80055d0 <HAL_UART_Transmit_IT>
 800176e:	e014      	b.n	800179a <CAN_remote_task+0x1be>
	  }
	  else
	  {
			osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 8001770:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <CAN_remote_task+0x30c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2201      	movs	r2, #1
 8001776:	4252      	negs	r2, r2
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f005 f8ea 	bl	8006954 <osSemaphoreAcquire>
			sprintf(tx_buffer, "Error CAN2 initiali\n\r");
 8001780:	4a62      	ldr	r2, [pc, #392]	; (800190c <CAN_remote_task+0x330>)
 8001782:	240c      	movs	r4, #12
 8001784:	193b      	adds	r3, r7, r4
 8001786:	0011      	movs	r1, r2
 8001788:	0018      	movs	r0, r3
 800178a:	f008 f87d 	bl	8009888 <siprintf>
			HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800178e:	1939      	adds	r1, r7, r4
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <CAN_remote_task+0x314>)
 8001792:	2231      	movs	r2, #49	; 0x31
 8001794:	0018      	movs	r0, r3
 8001796:	f003 ff1b 	bl	80055d0 <HAL_UART_Transmit_IT>
	  }

	  /* Infinite loop */
	  for(;;)
	  {
			osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <CAN_remote_task+0x334>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4252      	negs	r2, r2
 80017a2:	0011      	movs	r1, r2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f005 f8d5 	bl	8006954 <osSemaphoreAcquire>
		    if(CANSPI_Receive(CAN1, &rxMessage))
 80017aa:	4a5a      	ldr	r2, [pc, #360]	; (8001914 <CAN_remote_task+0x338>)
 80017ac:	4b4d      	ldr	r3, [pc, #308]	; (80018e4 <CAN_remote_task+0x308>)
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fee5 	bl	8000580 <CANSPI_Receive>
 80017b6:	1e03      	subs	r3, r0, #0
 80017b8:	d100      	bne.n	80017bc <CAN_remote_task+0x1e0>
 80017ba:	e0af      	b.n	800191c <CAN_remote_task+0x340>
		    {
				// Coger el semáforo de envío de trama por la UART
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <CAN_remote_task+0x30c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4252      	negs	r2, r2
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f005 f8c4 	bl	8006954 <osSemaphoreAcquire>
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017cc:	4b51      	ldr	r3, [pc, #324]	; (8001914 <CAN_remote_task+0x338>)
 80017ce:	685a      	ldr	r2, [r3, #4]
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <CAN_remote_task+0x338>)
 80017d2:	7a1b      	ldrb	r3, [r3, #8]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017d4:	469b      	mov	fp, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80017d6:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <CAN_remote_task+0x338>)
 80017d8:	7a5b      	ldrb	r3, [r3, #9]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017da:	001c      	movs	r4, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <CAN_remote_task+0x338>)
 80017de:	7a9b      	ldrb	r3, [r3, #10]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017e0:	001d      	movs	r5, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <CAN_remote_task+0x338>)
 80017e4:	7adb      	ldrb	r3, [r3, #11]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017e6:	001e      	movs	r6, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80017e8:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <CAN_remote_task+0x338>)
 80017ea:	7b1b      	ldrb	r3, [r3, #12]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017ec:	469c      	mov	ip, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <CAN_remote_task+0x338>)
 80017f0:	7b5b      	ldrb	r3, [r3, #13]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017f2:	4698      	mov	r8, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <CAN_remote_task+0x338>)
 80017f6:	7b9b      	ldrb	r3, [r3, #14]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017f8:	4699      	mov	r9, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <CAN_remote_task+0x338>)
 80017fc:	7bdb      	ldrb	r3, [r3, #15]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 80017fe:	469a      	mov	sl, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 8001800:	4b44      	ldr	r3, [pc, #272]	; (8001914 <CAN_remote_task+0x338>)
 8001802:	7c1b      	ldrb	r3, [r3, #16]
				sprintf(tx_buffer, "CAN1 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001804:	4944      	ldr	r1, [pc, #272]	; (8001918 <CAN_remote_task+0x33c>)
 8001806:	200c      	movs	r0, #12
 8001808:	1838      	adds	r0, r7, r0
 800180a:	9307      	str	r3, [sp, #28]
 800180c:	4653      	mov	r3, sl
 800180e:	9306      	str	r3, [sp, #24]
 8001810:	464b      	mov	r3, r9
 8001812:	9305      	str	r3, [sp, #20]
 8001814:	4643      	mov	r3, r8
 8001816:	9304      	str	r3, [sp, #16]
 8001818:	4663      	mov	r3, ip
 800181a:	9303      	str	r3, [sp, #12]
 800181c:	9602      	str	r6, [sp, #8]
 800181e:	9501      	str	r5, [sp, #4]
 8001820:	9400      	str	r4, [sp, #0]
 8001822:	465b      	mov	r3, fp
 8001824:	f008 f830 	bl	8009888 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001828:	200c      	movs	r0, #12
 800182a:	1839      	adds	r1, r7, r0
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <CAN_remote_task+0x314>)
 800182e:	2231      	movs	r2, #49	; 0x31
 8001830:	0018      	movs	r0, r3
 8001832:	f003 fecd 	bl	80055d0 <HAL_UART_Transmit_IT>
				CANSPI_CL_Flag_Int(CAN1);
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <CAN_remote_task+0x308>)
 8001838:	0018      	movs	r0, r3
 800183a:	f7fe fd0f 	bl	800025c <CANSPI_CL_Flag_Int>
		    	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <CAN_remote_task+0x318>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]
		    	txMessage.frame.id = 15;
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <CAN_remote_task+0x318>)
 8001846:	220f      	movs	r2, #15
 8001848:	605a      	str	r2, [r3, #4]
		    	txMessage.frame.dlc = 8;
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <CAN_remote_task+0x318>)
 800184c:	2208      	movs	r2, #8
 800184e:	721a      	strb	r2, [r3, #8]
		    	txMessage.frame.data0 = 1;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <CAN_remote_task+0x318>)
 8001852:	2201      	movs	r2, #1
 8001854:	725a      	strb	r2, [r3, #9]
		    	txMessage.frame.data1 = 2;
 8001856:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <CAN_remote_task+0x318>)
 8001858:	2202      	movs	r2, #2
 800185a:	729a      	strb	r2, [r3, #10]
		    	txMessage.frame.data2 = 3;
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <CAN_remote_task+0x318>)
 800185e:	2203      	movs	r2, #3
 8001860:	72da      	strb	r2, [r3, #11]
		    	txMessage.frame.data3 = 4;
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <CAN_remote_task+0x318>)
 8001864:	2204      	movs	r2, #4
 8001866:	731a      	strb	r2, [r3, #12]
		    	txMessage.frame.data4 = 5;
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <CAN_remote_task+0x318>)
 800186a:	2205      	movs	r2, #5
 800186c:	735a      	strb	r2, [r3, #13]
		    	txMessage.frame.data5 = 6;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <CAN_remote_task+0x318>)
 8001870:	2206      	movs	r2, #6
 8001872:	739a      	strb	r2, [r3, #14]
		    	txMessage.frame.data6 = 7;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <CAN_remote_task+0x318>)
 8001876:	2207      	movs	r2, #7
 8001878:	73da      	strb	r2, [r3, #15]
		    	txMessage.frame.data7 = 8;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <CAN_remote_task+0x318>)
 800187c:	2208      	movs	r2, #8
 800187e:	741a      	strb	r2, [r3, #16]
		    	CANSPI_Transmit(CAN1, &txMessage);
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <CAN_remote_task+0x318>)
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <CAN_remote_task+0x308>)
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f7fe fde8 	bl	800045c <CANSPI_Transmit>
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <CAN_remote_task+0x30c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4252      	negs	r2, r2
 8001894:	0011      	movs	r1, r2
 8001896:	0018      	movs	r0, r3
 8001898:	f005 f85c 	bl	8006954 <osSemaphoreAcquire>
		    	for (i=0; i<49; i++) tx_buffer[i]=0;
 800189c:	233f      	movs	r3, #63	; 0x3f
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e00b      	b.n	80018be <CAN_remote_task+0x2e2>
 80018a6:	203f      	movs	r0, #63	; 0x3f
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	220c      	movs	r2, #12
 80018ae:	18ba      	adds	r2, r7, r2
 80018b0:	2100      	movs	r1, #0
 80018b2:	54d1      	strb	r1, [r2, r3]
 80018b4:	183b      	adds	r3, r7, r0
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	3201      	adds	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	233f      	movs	r3, #63	; 0x3f
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b30      	cmp	r3, #48	; 0x30
 80018c6:	d9ee      	bls.n	80018a6 <CAN_remote_task+0x2ca>
				sprintf(tx_buffer, "CAN1 sending Msg...\n\r");
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <CAN_remote_task+0x31c>)
 80018ca:	240c      	movs	r4, #12
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f007 ffd9 	bl	8009888 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 80018d6:	1939      	adds	r1, r7, r4
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <CAN_remote_task+0x314>)
 80018da:	2231      	movs	r2, #49	; 0x31
 80018dc:	0018      	movs	r0, r3
 80018de:	f003 fe77 	bl	80055d0 <HAL_UART_Transmit_IT>
 80018e2:	e0b7      	b.n	8001a54 <CAN_remote_task+0x478>
 80018e4:	20000124 	.word	0x20000124
 80018e8:	200002e0 	.word	0x200002e0
 80018ec:	0800a05c 	.word	0x0800a05c
 80018f0:	20000234 	.word	0x20000234
 80018f4:	200002e8 	.word	0x200002e8
 80018f8:	0800a074 	.word	0x0800a074
 80018fc:	0800a08c 	.word	0x0800a08c
 8001900:	20000188 	.word	0x20000188
 8001904:	0800a0a4 	.word	0x0800a0a4
 8001908:	0800a0bc 	.word	0x0800a0bc
 800190c:	0800a0d4 	.word	0x0800a0d4
 8001910:	200002e4 	.word	0x200002e4
 8001914:	200002fc 	.word	0x200002fc
 8001918:	0800a0ec 	.word	0x0800a0ec
		    } else
		    if(CANSPI_Receive(CAN2, &rxMessage))
 800191c:	4a50      	ldr	r2, [pc, #320]	; (8001a60 <CAN_remote_task+0x484>)
 800191e:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <CAN_remote_task+0x488>)
 8001920:	0011      	movs	r1, r2
 8001922:	0018      	movs	r0, r3
 8001924:	f7fe fe2c 	bl	8000580 <CANSPI_Receive>
 8001928:	1e03      	subs	r3, r0, #0
 800192a:	d100      	bne.n	800192e <CAN_remote_task+0x352>
 800192c:	e092      	b.n	8001a54 <CAN_remote_task+0x478>
		    {
				// Coger el semáforo de envío de trama por la UART
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 800192e:	4b4e      	ldr	r3, [pc, #312]	; (8001a68 <CAN_remote_task+0x48c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	4252      	negs	r2, r2
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f005 f80b 	bl	8006954 <osSemaphoreAcquire>
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800193e:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <CAN_remote_task+0x484>)
 8001940:	685a      	ldr	r2, [r3, #4]
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <CAN_remote_task+0x484>)
 8001944:	7a1b      	ldrb	r3, [r3, #8]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001946:	469b      	mov	fp, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <CAN_remote_task+0x484>)
 800194a:	7a5b      	ldrb	r3, [r3, #9]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800194c:	001c      	movs	r4, r3
						rxMessage.frame.id, rxMessage.frame.dlc,rxMessage.frame.data0,rxMessage.frame.data1,
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <CAN_remote_task+0x484>)
 8001950:	7a9b      	ldrb	r3, [r3, #10]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001952:	001d      	movs	r5, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <CAN_remote_task+0x484>)
 8001956:	7adb      	ldrb	r3, [r3, #11]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001958:	001e      	movs	r6, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 800195a:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <CAN_remote_task+0x484>)
 800195c:	7b1b      	ldrb	r3, [r3, #12]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800195e:	469c      	mov	ip, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001960:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <CAN_remote_task+0x484>)
 8001962:	7b5b      	ldrb	r3, [r3, #13]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001964:	4698      	mov	r8, r3
						rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <CAN_remote_task+0x484>)
 8001968:	7b9b      	ldrb	r3, [r3, #14]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 800196a:	4699      	mov	r9, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <CAN_remote_task+0x484>)
 800196e:	7bdb      	ldrb	r3, [r3, #15]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001970:	469a      	mov	sl, r3
						rxMessage.frame.data6,rxMessage.frame.data7);
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <CAN_remote_task+0x484>)
 8001974:	7c1b      	ldrb	r3, [r3, #16]
				sprintf(tx_buffer, "CAN2 RX: id= %2d, dlc= %1d, datos= %1d,%1d,%1d,%1d,%1d,%1d,%1d,%1d\n\r",
 8001976:	493d      	ldr	r1, [pc, #244]	; (8001a6c <CAN_remote_task+0x490>)
 8001978:	200c      	movs	r0, #12
 800197a:	1838      	adds	r0, r7, r0
 800197c:	9307      	str	r3, [sp, #28]
 800197e:	4653      	mov	r3, sl
 8001980:	9306      	str	r3, [sp, #24]
 8001982:	464b      	mov	r3, r9
 8001984:	9305      	str	r3, [sp, #20]
 8001986:	4643      	mov	r3, r8
 8001988:	9304      	str	r3, [sp, #16]
 800198a:	4663      	mov	r3, ip
 800198c:	9303      	str	r3, [sp, #12]
 800198e:	9602      	str	r6, [sp, #8]
 8001990:	9501      	str	r5, [sp, #4]
 8001992:	9400      	str	r4, [sp, #0]
 8001994:	465b      	mov	r3, fp
 8001996:	f007 ff77 	bl	8009888 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 800199a:	200c      	movs	r0, #12
 800199c:	1839      	adds	r1, r7, r0
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <CAN_remote_task+0x494>)
 80019a0:	2231      	movs	r2, #49	; 0x31
 80019a2:	0018      	movs	r0, r3
 80019a4:	f003 fe14 	bl	80055d0 <HAL_UART_Transmit_IT>
				CANSPI_CL_Flag_Int(CAN2);
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <CAN_remote_task+0x488>)
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7fe fc56 	bl	800025c <CANSPI_CL_Flag_Int>
		    	txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <CAN_remote_task+0x498>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
		    	txMessage.frame.id = 25;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <CAN_remote_task+0x498>)
 80019b8:	2219      	movs	r2, #25
 80019ba:	605a      	str	r2, [r3, #4]
		    	txMessage.frame.dlc = 8;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <CAN_remote_task+0x498>)
 80019be:	2208      	movs	r2, #8
 80019c0:	721a      	strb	r2, [r3, #8]
		    	txMessage.frame.data0 = 8;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <CAN_remote_task+0x498>)
 80019c4:	2208      	movs	r2, #8
 80019c6:	725a      	strb	r2, [r3, #9]
		    	txMessage.frame.data1 = 7;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <CAN_remote_task+0x498>)
 80019ca:	2207      	movs	r2, #7
 80019cc:	729a      	strb	r2, [r3, #10]
		    	txMessage.frame.data2 = 6;
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <CAN_remote_task+0x498>)
 80019d0:	2206      	movs	r2, #6
 80019d2:	72da      	strb	r2, [r3, #11]
		    	txMessage.frame.data3 = 5;
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <CAN_remote_task+0x498>)
 80019d6:	2205      	movs	r2, #5
 80019d8:	731a      	strb	r2, [r3, #12]
		    	txMessage.frame.data4 = 4;
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <CAN_remote_task+0x498>)
 80019dc:	2204      	movs	r2, #4
 80019de:	735a      	strb	r2, [r3, #13]
		    	txMessage.frame.data5 = 3;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <CAN_remote_task+0x498>)
 80019e2:	2203      	movs	r2, #3
 80019e4:	739a      	strb	r2, [r3, #14]
		    	txMessage.frame.data6 = 2;
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <CAN_remote_task+0x498>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	73da      	strb	r2, [r3, #15]
		    	txMessage.frame.data7 = 1;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <CAN_remote_task+0x498>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	741a      	strb	r2, [r3, #16]
		    	CANSPI_Transmit(CAN2, &txMessage);
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <CAN_remote_task+0x498>)
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <CAN_remote_task+0x488>)
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7fe fd2f 	bl	800045c <CANSPI_Transmit>
				osSemaphoreAcquire(uart_tx_semHandle, portMAX_DELAY);
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <CAN_remote_task+0x48c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4252      	negs	r2, r2
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f004 ffa3 	bl	8006954 <osSemaphoreAcquire>
		    	for (i=0; i<49; i++) tx_buffer[i]=0;
 8001a0e:	233f      	movs	r3, #63	; 0x3f
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <CAN_remote_task+0x454>
 8001a18:	203f      	movs	r0, #63	; 0x3f
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	220c      	movs	r2, #12
 8001a20:	18ba      	adds	r2, r7, r2
 8001a22:	2100      	movs	r1, #0
 8001a24:	54d1      	strb	r1, [r2, r3]
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	183b      	adds	r3, r7, r0
 8001a2c:	3201      	adds	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	233f      	movs	r3, #63	; 0x3f
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b30      	cmp	r3, #48	; 0x30
 8001a38:	d9ee      	bls.n	8001a18 <CAN_remote_task+0x43c>
				sprintf(tx_buffer, "CAN2 sending Msg...\n\r");
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <CAN_remote_task+0x49c>)
 8001a3c:	240c      	movs	r4, #12
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f007 ff20 	bl	8009888 <siprintf>
				HAL_UART_Transmit_IT(&huart2, tx_buffer, sizeof(tx_buffer));
 8001a48:	1939      	adds	r1, r7, r4
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <CAN_remote_task+0x494>)
 8001a4c:	2231      	movs	r2, #49	; 0x31
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f003 fdbe 	bl	80055d0 <HAL_UART_Transmit_IT>
		    }
		    osDelay(1000);
 8001a54:	23fa      	movs	r3, #250	; 0xfa
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f004 feb1 	bl	80067c0 <osDelay>
			osSemaphoreAcquire(CAN_semHandle, portMAX_DELAY);
 8001a5e:	e69c      	b.n	800179a <CAN_remote_task+0x1be>
 8001a60:	200002fc 	.word	0x200002fc
 8001a64:	20000188 	.word	0x20000188
 8001a68:	200002e0 	.word	0x200002e0
 8001a6c:	0800a134 	.word	0x0800a134
 8001a70:	20000234 	.word	0x20000234
 8001a74:	200002e8 	.word	0x200002e8
 8001a78:	0800a0bc 	.word	0x0800a0bc

08001a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8e:	f000 fb37 	bl	8002100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_MspInit+0x50>)
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_MspInit+0x50>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	619a      	str	r2, [r3, #24]
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_MspInit+0x50>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_MspInit+0x50>)
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_MspInit+0x50>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0549      	lsls	r1, r1, #21
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	61da      	str	r2, [r3, #28]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_MspInit+0x50>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	055b      	lsls	r3, r3, #21
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	425b      	negs	r3, r3
 8001aea:	2200      	movs	r2, #0
 8001aec:	2103      	movs	r1, #3
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 fde0 	bl	80026b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	2414      	movs	r4, #20
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	2314      	movs	r3, #20
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f007 fd92 	bl	800963c <memset>
  if(hadc->Instance==ADC1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_ADC_MspInit+0x84>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12b      	bne.n	8001b7a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b28:	2180      	movs	r1, #128	; 0x80
 8001b2a:	0089      	lsls	r1, r1, #2
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0289      	lsls	r1, r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_ADC_MspInit+0x88>)
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	2203      	movs	r2, #3
 8001b64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	193a      	adds	r2, r7, r4
 8001b6e:	2390      	movs	r3, #144	; 0x90
 8001b70:	05db      	lsls	r3, r3, #23
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fe3f 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b00b      	add	sp, #44	; 0x2c
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40012400 	.word	0x40012400
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	; 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2414      	movs	r4, #20
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f007 fd4c 	bl	800963c <memset>
  if(hi2c->Instance==I2C1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <HAL_I2C_MspInit+0x90>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d132      	bne.n	8001c14 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	02c9      	lsls	r1, r1, #11
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	615a      	str	r2, [r3, #20]
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	22c0      	movs	r2, #192	; 0xc0
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd2:	0021      	movs	r1, r4
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2212      	movs	r2, #18
 8001bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2203      	movs	r2, #3
 8001be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2201      	movs	r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <HAL_I2C_MspInit+0x98>)
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f000 fe00 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bfa:	69da      	ldr	r2, [r3, #28]
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	0389      	lsls	r1, r1, #14
 8001c02:	430a      	orrs	r2, r1
 8001c04:	61da      	str	r2, [r3, #28]
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_I2C_MspInit+0x94>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	039b      	lsls	r3, r3, #14
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b00b      	add	sp, #44	; 0x2c
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000400 	.word	0x48000400

08001c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08d      	sub	sp, #52	; 0x34
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	241c      	movs	r4, #28
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	0018      	movs	r0, r3
 8001c36:	2314      	movs	r3, #20
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f007 fcfe 	bl	800963c <memset>
  if(hspi->Instance==SPI1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <HAL_SPI_MspInit+0x104>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d133      	bne.n	8001cb2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0149      	lsls	r1, r1, #5
 8001c54:	430a      	orrs	r2, r1
 8001c56:	619a      	str	r2, [r3, #24]
 8001c58:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	015b      	lsls	r3, r3, #5
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0289      	lsls	r1, r1, #10
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c82:	0021      	movs	r1, r4
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	22e0      	movs	r2, #224	; 0xe0
 8001c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	187a      	adds	r2, r7, r1
 8001ca4:	2390      	movs	r3, #144	; 0x90
 8001ca6:	05db      	lsls	r3, r3, #23
 8001ca8:	0011      	movs	r1, r2
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 fda4 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001cb0:	e037      	b.n	8001d22 <HAL_SPI_MspInit+0xfa>
  else if(hspi->Instance==SPI2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_SPI_MspInit+0x10c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d132      	bne.n	8001d22 <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	01c9      	lsls	r1, r1, #7
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	61da      	str	r2, [r3, #28]
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	01db      	lsls	r3, r3, #7
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	02c9      	lsls	r1, r1, #11
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_SPI_MspInit+0x108>)
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	02db      	lsls	r3, r3, #11
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001cf4:	211c      	movs	r1, #28
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	22e0      	movs	r2, #224	; 0xe0
 8001cfa:	0212      	lsls	r2, r2, #8
 8001cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2202      	movs	r2, #2
 8001d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_SPI_MspInit+0x110>)
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	0010      	movs	r0, r2
 8001d1e:	f000 fd6b 	bl	80027f8 <HAL_GPIO_Init>
}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b00d      	add	sp, #52	; 0x34
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40003800 	.word	0x40003800
 8001d38:	48000400 	.word	0x48000400

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_TIM_Base_MspInit+0x34>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10b      	bne.n	8001d66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_TIM_Base_MspInit+0x38>)
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_TIM_Base_MspInit+0x38>)
 8001d54:	2102      	movs	r1, #2
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_TIM_Base_MspInit+0x38>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40021000 	.word	0x40021000

08001d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	240c      	movs	r4, #12
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	0018      	movs	r0, r3
 8001d86:	2314      	movs	r3, #20
 8001d88:	001a      	movs	r2, r3
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f007 fc56 	bl	800963c <memset>
  if(htim->Instance==TIM3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_TIM_MspPostInit+0x74>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d123      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_TIM_MspPostInit+0x78>)
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_TIM_MspPostInit+0x78>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0309      	lsls	r1, r1, #12
 8001da4:	430a      	orrs	r2, r1
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0x78>)
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	031b      	lsls	r3, r3, #12
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001db6:	0021      	movs	r1, r4
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_TIM_MspPostInit+0x7c>)
 8001dda:	0019      	movs	r1, r3
 8001ddc:	0010      	movs	r0, r2
 8001dde:	f000 fd0b 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b009      	add	sp, #36	; 0x24
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000800 	.word	0x48000800

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	2414      	movs	r4, #20
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	2314      	movs	r3, #20
 8001e08:	001a      	movs	r2, r3
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	f007 fc16 	bl	800963c <memset>
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a20      	ldr	r2, [pc, #128]	; (8001e98 <HAL_UART_MspInit+0xa0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13a      	bne.n	8001e90 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0289      	lsls	r1, r1, #10
 8001e24:	430a      	orrs	r2, r1
 8001e26:	61da      	str	r2, [r3, #28]
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0289      	lsls	r1, r1, #10
 8001e40:	430a      	orrs	r2, r1
 8001e42:	615a      	str	r2, [r3, #20]
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_UART_MspInit+0xa4>)
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e52:	0021      	movs	r1, r4
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	220c      	movs	r2, #12
 8001e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	2201      	movs	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	187a      	adds	r2, r7, r1
 8001e74:	2390      	movs	r3, #144	; 0x90
 8001e76:	05db      	lsls	r3, r3, #23
 8001e78:	0011      	movs	r1, r2
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 fcbc 	bl	80027f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2103      	movs	r1, #3
 8001e84:	201c      	movs	r0, #28
 8001e86:	f000 fc15 	bl	80026b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e8a:	201c      	movs	r0, #28
 8001e8c:	f000 fc27 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b00b      	add	sp, #44	; 0x2c
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb0:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <HAL_InitTick+0xf4>)
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <HAL_InitTick+0xf4>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0109      	lsls	r1, r1, #4
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_InitTick+0xf4>)
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ecc:	230c      	movs	r3, #12
 8001ece:	18fa      	adds	r2, r7, r3
 8001ed0:	2410      	movs	r4, #16
 8001ed2:	193b      	adds	r3, r7, r4
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f001 fbd8 	bl	800368c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001edc:	193b      	adds	r3, r7, r4
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d104      	bne.n	8001ef2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ee8:	f001 fbba 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8001eec:	0003      	movs	r3, r0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef0:	e004      	b.n	8001efc <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ef2:	f001 fbb5 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8001ef6:	0003      	movs	r3, r0
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efe:	4926      	ldr	r1, [pc, #152]	; (8001f98 <HAL_InitTick+0xf8>)
 8001f00:	0018      	movs	r0, r3
 8001f02:	f7fe f90b 	bl	800011c <__udivsi3>
 8001f06:	0003      	movs	r3, r0
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f0e:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_InitTick+0x100>)
 8001f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <HAL_InitTick+0x104>)
 8001f16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f1a:	6a3a      	ldr	r2, [r7, #32]
 8001f1c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f30:	252b      	movs	r5, #43	; 0x2b
 8001f32:	197c      	adds	r4, r7, r5
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f36:	0018      	movs	r0, r3
 8001f38:	f002 fbbe 	bl	80046b8 <HAL_TIM_Base_Init>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001f40:	197b      	adds	r3, r7, r5
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11e      	bne.n	8001f86 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f48:	197c      	adds	r4, r7, r5
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_InitTick+0xfc>)
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f002 fc03 	bl	8004758 <HAL_TIM_Base_Start_IT>
 8001f52:	0003      	movs	r3, r0
 8001f54:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001f56:	197b      	adds	r3, r7, r5
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d113      	bne.n	8001f86 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001f5e:	200d      	movs	r0, #13
 8001f60:	f000 fbbd 	bl	80026de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d809      	bhi.n	8001f7e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	0019      	movs	r1, r3
 8001f70:	200d      	movs	r0, #13
 8001f72:	f000 fb9f 	bl	80026b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_InitTick+0x108>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	e003      	b.n	8001f86 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001f7e:	232b      	movs	r3, #43	; 0x2b
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001f86:	232b      	movs	r3, #43	; 0x2b
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b00c      	add	sp, #48	; 0x30
 8001f92:	bdb0      	pop	{r4, r5, r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	000f4240 	.word	0x000f4240
 8001f9c:	20000310 	.word	0x20000310
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	000003e7 	.word	0x000003e7
 8001fa8:	20000004 	.word	0x20000004

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ican2_Pin);
 8001fbc:	2010      	movs	r0, #16
 8001fbe:	f000 fda9 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Ican1_Pin);
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f000 fda4 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	019b      	lsls	r3, r3, #6
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f000 fd9f 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f002 fc5c 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000310 	.word	0x20000310

08001ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <USART2_IRQHandler+0x14>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f003 fb68 	bl	80056d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	20000234 	.word	0x20000234

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f007 fab6 	bl	80095ac <__errno>
 8002040:	0003      	movs	r3, r0
 8002042:	220c      	movs	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002046:	2301      	movs	r3, #1
 8002048:	425b      	negs	r3, r3
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	18d2      	adds	r2, r2, r3
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <_sbrk+0x64>)
 800205c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b006      	add	sp, #24
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20004000 	.word	0x20004000
 800206c:	00000400 	.word	0x00000400
 8002070:	20000358 	.word	0x20000358
 8002074:	200030b0 	.word	0x200030b0

08002078 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002086:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <LoopForever+0xe>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a0:	4c0b      	ldr	r4, [pc, #44]	; (80020d0 <LoopForever+0x16>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80020ae:	f7ff ffe3 	bl	8002078 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020b2:	f007 fa81 	bl	80095b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b6:	f7fe fe41 	bl	8000d3c <main>

080020ba <LoopForever>:

LoopForever:
    b LoopForever
 80020ba:	e7fe      	b.n	80020ba <LoopForever>
  ldr   r0, =_estack
 80020bc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020c8:	0800a40c 	.word	0x0800a40c
  ldr r2, =_sbss
 80020cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020d0:	200030b0 	.word	0x200030b0

080020d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_IRQHandler>
	...

080020d8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_Init+0x24>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_Init+0x24>)
 80020e2:	2110      	movs	r1, #16
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fed9 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ee:	f7ff fcdd 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_IncTick+0x1c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	001a      	movs	r2, r3
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x20>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	18d2      	adds	r2, r2, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_IncTick+0x20>)
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	20000008 	.word	0x20000008
 8002120:	2000035c 	.word	0x2000035c

08002124 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <HAL_GetTick+0x10>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	0018      	movs	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	2000035c 	.word	0x2000035c

08002138 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	230f      	movs	r3, #15
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e125      	b.n	80023a2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2234      	movs	r2, #52	; 0x34
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff fcc6 	bl	8001b00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	2210      	movs	r2, #16
 800217a:	4013      	ands	r3, r2
 800217c:	d000      	beq.n	8002180 <HAL_ADC_Init+0x48>
 800217e:	e103      	b.n	8002388 <HAL_ADC_Init+0x250>
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d000      	beq.n	800218c <HAL_ADC_Init+0x54>
 800218a:	e0fd      	b.n	8002388 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2204      	movs	r2, #4
 8002194:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002196:	d000      	beq.n	800219a <HAL_ADC_Init+0x62>
 8002198:	e0f6      	b.n	8002388 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	4a83      	ldr	r2, [pc, #524]	; (80023ac <HAL_ADC_Init+0x274>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	2202      	movs	r2, #2
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d112      	bne.n	80021de <HAL_ADC_Init+0xa6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d009      	beq.n	80021da <HAL_ADC_Init+0xa2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	401a      	ands	r2, r3
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Init+0xa6>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_ADC_Init+0xa8>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d116      	bne.n	8002212 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2218      	movs	r2, #24
 80021ec:	4393      	bics	r3, r2
 80021ee:	0019      	movs	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	0899      	lsrs	r1, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4964      	ldr	r1, [pc, #400]	; (80023b0 <HAL_ADC_Init+0x278>)
 800221e:	400a      	ands	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7e1b      	ldrb	r3, [r3, #24]
 8002226:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7e5b      	ldrb	r3, [r3, #25]
 800222c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800222e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e9b      	ldrb	r3, [r3, #26]
 8002234:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002236:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b01      	cmp	r3, #1
 800223e:	d002      	beq.n	8002246 <HAL_ADC_Init+0x10e>
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	015b      	lsls	r3, r3, #5
 8002244:	e000      	b.n	8002248 <HAL_ADC_Init+0x110>
 8002246:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002248:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800224e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d101      	bne.n	800225c <HAL_ADC_Init+0x124>
 8002258:	2304      	movs	r3, #4
 800225a:	e000      	b.n	800225e <HAL_ADC_Init+0x126>
 800225c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800225e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2124      	movs	r1, #36	; 0x24
 8002264:	5c5b      	ldrb	r3, [r3, r1]
 8002266:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002268:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	7edb      	ldrb	r3, [r3, #27]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7e9b      	ldrb	r3, [r3, #26]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	0252      	lsls	r2, r2, #9
 8002286:	4313      	orrs	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	e00b      	b.n	80022a4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	2220      	movs	r2, #32
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2201      	movs	r2, #1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	23c2      	movs	r3, #194	; 0xc2
 80022aa:	33ff      	adds	r3, #255	; 0xff
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d007      	beq.n	80022c0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80022b8:	4313      	orrs	r3, r2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68d9      	ldr	r1, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	055b      	lsls	r3, r3, #21
 80022d8:	429a      	cmp	r2, r3
 80022da:	d01b      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d017      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d013      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d00f      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d00b      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b05      	cmp	r3, #5
 8002302:	d007      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b06      	cmp	r3, #6
 800230a:	d003      	beq.n	8002314 <HAL_ADC_Init+0x1dc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	2b07      	cmp	r3, #7
 8002312:	d112      	bne.n	800233a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2107      	movs	r1, #7
 8002320:	438a      	bics	r2, r1
 8002322:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	2207      	movs	r2, #7
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_ADC_Init+0x27c>)
 8002342:	4013      	ands	r3, r2
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d10b      	bne.n	8002362 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	2203      	movs	r2, #3
 8002356:	4393      	bics	r3, r2
 8002358:	2201      	movs	r2, #1
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002360:	e01c      	b.n	800239c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	2212      	movs	r2, #18
 8002368:	4393      	bics	r3, r2
 800236a:	2210      	movs	r2, #16
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	2201      	movs	r2, #1
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800237e:	230f      	movs	r3, #15
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002386:	e009      	b.n	800239c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	2210      	movs	r2, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002394:	230f      	movs	r3, #15
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800239c:	230f      	movs	r3, #15
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	781b      	ldrb	r3, [r3, #0]
}
 80023a2:	0018      	movs	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	fffffefd 	.word	0xfffffefd
 80023b0:	fffe0219 	.word	0xfffe0219
 80023b4:	833fffe7 	.word	0x833fffe7

080023b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c2:	230f      	movs	r3, #15
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	055b      	lsls	r3, r3, #21
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d011      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d00d      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d009      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d005      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d001      	beq.n	80023fe <HAL_ADC_ConfigChannel+0x46>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2234      	movs	r2, #52	; 0x34
 8002402:	5c9b      	ldrb	r3, [r3, r2]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x54>
 8002408:	2302      	movs	r3, #2
 800240a:	e0bb      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1cc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2234      	movs	r2, #52	; 0x34
 8002410:	2101      	movs	r1, #1
 8002412:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2204      	movs	r2, #4
 800241c:	4013      	ands	r3, r2
 800241e:	d000      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x6a>
 8002420:	e09f      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a59      	ldr	r2, [pc, #356]	; (800258c <HAL_ADC_ConfigChannel+0x1d4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d100      	bne.n	800242e <HAL_ADC_ConfigChannel+0x76>
 800242c:	e077      	b.n	800251e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2201      	movs	r2, #1
 800243a:	409a      	lsls	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	055b      	lsls	r3, r3, #21
 800244c:	429a      	cmp	r2, r3
 800244e:	d037      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d033      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	2b02      	cmp	r3, #2
 800245e:	d02f      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b03      	cmp	r3, #3
 8002466:	d02b      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2b04      	cmp	r3, #4
 800246e:	d027      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b05      	cmp	r3, #5
 8002476:	d023      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b06      	cmp	r3, #6
 800247e:	d01f      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b07      	cmp	r3, #7
 8002486:	d01b      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	2107      	movs	r1, #7
 8002494:	400b      	ands	r3, r1
 8002496:	429a      	cmp	r2, r3
 8002498:	d012      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2107      	movs	r1, #7
 80024a6:	438a      	bics	r2, r1
 80024a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2207      	movs	r2, #7
 80024b6:	401a      	ands	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d003      	beq.n	80024d0 <HAL_ADC_ConfigChannel+0x118>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d152      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <HAL_ADC_ConfigChannel+0x1d8>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d102      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x12a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	e001      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x12e>
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	03db      	lsls	r3, r3, #15
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_ADC_ConfigChannel+0x1d8>)
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d140      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_ADC_ConfigChannel+0x1dc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4927      	ldr	r1, [pc, #156]	; (8002598 <HAL_ADC_ConfigChannel+0x1e0>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fd fe0e 	bl	800011c <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	001a      	movs	r2, r3
 8002504:	0013      	movs	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	189b      	adds	r3, r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800250e:	e002      	b.n	8002516 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3b01      	subs	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x158>
 800251c:	e02b      	b.n	8002576 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	4099      	lsls	r1, r3
 800252c:	000b      	movs	r3, r1
 800252e:	43d9      	mvns	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	400a      	ands	r2, r1
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b10      	cmp	r3, #16
 800253e:	d003      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x190>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b11      	cmp	r3, #17
 8002546:	d116      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <HAL_ADC_ConfigChannel+0x1d8>)
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1a0>
 8002554:	4a11      	ldr	r2, [pc, #68]	; (800259c <HAL_ADC_ConfigChannel+0x1e4>)
 8002556:	e000      	b.n	800255a <HAL_ADC_ConfigChannel+0x1a2>
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <HAL_ADC_ConfigChannel+0x1e8>)
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_ADC_ConfigChannel+0x1d8>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e009      	b.n	8002576 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	2220      	movs	r2, #32
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2234      	movs	r2, #52	; 0x34
 800257a:	2100      	movs	r1, #0
 800257c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	00001001 	.word	0x00001001
 8002590:	40012708 	.word	0x40012708
 8002594:	20000000 	.word	0x20000000
 8002598:	000f4240 	.word	0x000f4240
 800259c:	ff7fffff 	.word	0xff7fffff
 80025a0:	ffbfffff 	.word	0xffbfffff

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	0002      	movs	r2, r0
 80025ac:	1dfb      	adds	r3, r7, #7
 80025ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	1dfb      	adds	r3, r7, #7
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b7f      	cmp	r3, #127	; 0x7f
 80025b6:	d809      	bhi.n	80025cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b8:	1dfb      	adds	r3, r7, #7
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	001a      	movs	r2, r3
 80025be:	231f      	movs	r3, #31
 80025c0:	401a      	ands	r2, r3
 80025c2:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <__NVIC_EnableIRQ+0x30>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	4091      	lsls	r1, r2
 80025c8:	000a      	movs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
  }
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b002      	add	sp, #8
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	0002      	movs	r2, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	1dfb      	adds	r3, r7, #7
 80025e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b7f      	cmp	r3, #127	; 0x7f
 80025ec:	d828      	bhi.n	8002640 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ee:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <__NVIC_SetPriority+0xd4>)
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	33c0      	adds	r3, #192	; 0xc0
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	589b      	ldr	r3, [r3, r2]
 80025fe:	1dfa      	adds	r2, r7, #7
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	0011      	movs	r1, r2
 8002604:	2203      	movs	r2, #3
 8002606:	400a      	ands	r2, r1
 8002608:	00d2      	lsls	r2, r2, #3
 800260a:	21ff      	movs	r1, #255	; 0xff
 800260c:	4091      	lsls	r1, r2
 800260e:	000a      	movs	r2, r1
 8002610:	43d2      	mvns	r2, r2
 8002612:	401a      	ands	r2, r3
 8002614:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	019b      	lsls	r3, r3, #6
 800261a:	22ff      	movs	r2, #255	; 0xff
 800261c:	401a      	ands	r2, r3
 800261e:	1dfb      	adds	r3, r7, #7
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	0018      	movs	r0, r3
 8002624:	2303      	movs	r3, #3
 8002626:	4003      	ands	r3, r0
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800262c:	481f      	ldr	r0, [pc, #124]	; (80026ac <__NVIC_SetPriority+0xd4>)
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	b25b      	sxtb	r3, r3
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	430a      	orrs	r2, r1
 8002638:	33c0      	adds	r3, #192	; 0xc0
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800263e:	e031      	b.n	80026a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002640:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <__NVIC_SetPriority+0xd8>)
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	0019      	movs	r1, r3
 8002648:	230f      	movs	r3, #15
 800264a:	400b      	ands	r3, r1
 800264c:	3b08      	subs	r3, #8
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3306      	adds	r3, #6
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	18d3      	adds	r3, r2, r3
 8002656:	3304      	adds	r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1dfa      	adds	r2, r7, #7
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	0011      	movs	r1, r2
 8002660:	2203      	movs	r2, #3
 8002662:	400a      	ands	r2, r1
 8002664:	00d2      	lsls	r2, r2, #3
 8002666:	21ff      	movs	r1, #255	; 0xff
 8002668:	4091      	lsls	r1, r2
 800266a:	000a      	movs	r2, r1
 800266c:	43d2      	mvns	r2, r2
 800266e:	401a      	ands	r2, r3
 8002670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	22ff      	movs	r2, #255	; 0xff
 8002678:	401a      	ands	r2, r3
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	0018      	movs	r0, r3
 8002680:	2303      	movs	r3, #3
 8002682:	4003      	ands	r3, r0
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002688:	4809      	ldr	r0, [pc, #36]	; (80026b0 <__NVIC_SetPriority+0xd8>)
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	001c      	movs	r4, r3
 8002690:	230f      	movs	r3, #15
 8002692:	4023      	ands	r3, r4
 8002694:	3b08      	subs	r3, #8
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	430a      	orrs	r2, r1
 800269a:	3306      	adds	r3, #6
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	18c3      	adds	r3, r0, r3
 80026a0:	3304      	adds	r3, #4
 80026a2:	601a      	str	r2, [r3, #0]
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b003      	add	sp, #12
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	210f      	movs	r1, #15
 80026c0:	187b      	adds	r3, r7, r1
 80026c2:	1c02      	adds	r2, r0, #0
 80026c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b25b      	sxtb	r3, r3
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7ff ff81 	bl	80025d8 <__NVIC_SetPriority>
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	0002      	movs	r2, r0
 80026e6:	1dfb      	adds	r3, r7, #7
 80026e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7ff ff57 	bl	80025a4 <__NVIC_EnableIRQ>
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2221      	movs	r2, #33	; 0x21
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d008      	beq.n	8002724 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2204      	movs	r2, #4
 8002716:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e020      	b.n	8002766 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	210e      	movs	r1, #14
 8002730:	438a      	bics	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	438a      	bics	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	2101      	movs	r1, #1
 800274e:	4091      	lsls	r1, r2
 8002750:	000a      	movs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2221      	movs	r2, #33	; 0x21
 8002758:	2101      	movs	r1, #1
 800275a:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	2100      	movs	r1, #0
 8002762:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	0018      	movs	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	b002      	add	sp, #8
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	210f      	movs	r1, #15
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2221      	movs	r2, #33	; 0x21
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d006      	beq.n	8002798 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e028      	b.n	80027ea <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	210e      	movs	r1, #14
 80027a4:	438a      	bics	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	438a      	bics	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	2101      	movs	r1, #1
 80027c2:	4091      	lsls	r1, r2
 80027c4:	000a      	movs	r2, r1
 80027c6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2221      	movs	r2, #33	; 0x21
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d004      	beq.n	80027ea <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	0010      	movs	r0, r2
 80027e8:	4798      	blx	r3
    } 
  }
  return status;
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	781b      	ldrb	r3, [r3, #0]
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002806:	e14f      	b.n	8002aa8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4091      	lsls	r1, r2
 8002812:	000a      	movs	r2, r1
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d100      	bne.n	8002820 <HAL_GPIO_Init+0x28>
 800281e:	e140      	b.n	8002aa2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	4013      	ands	r3, r2
 8002828:	2b01      	cmp	r3, #1
 800282a:	d005      	beq.n	8002838 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2203      	movs	r2, #3
 8002832:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002834:	2b02      	cmp	r3, #2
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	409a      	lsls	r2, r3
 8002846:	0013      	movs	r3, r2
 8002848:	43da      	mvns	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	0013      	movs	r3, r2
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	43da      	mvns	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	2201      	movs	r2, #1
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
 800288c:	0013      	movs	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d017      	beq.n	80028d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	2203      	movs	r2, #3
 80028b2:	409a      	lsls	r2, r3
 80028b4:	0013      	movs	r3, r2
 80028b6:	43da      	mvns	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	409a      	lsls	r2, r3
 80028c8:	0013      	movs	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2203      	movs	r2, #3
 80028dc:	4013      	ands	r3, r2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d123      	bne.n	800292a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	0092      	lsls	r2, r2, #2
 80028ec:	58d3      	ldr	r3, [r2, r3]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2207      	movs	r2, #7
 80028f4:	4013      	ands	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	43da      	mvns	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2107      	movs	r1, #7
 800290e:	400b      	ands	r3, r1
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	409a      	lsls	r2, r3
 8002914:	0013      	movs	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	0092      	lsls	r2, r2, #2
 8002926:	6939      	ldr	r1, [r7, #16]
 8002928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	2203      	movs	r2, #3
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	43da      	mvns	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	401a      	ands	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	23c0      	movs	r3, #192	; 0xc0
 8002964:	029b      	lsls	r3, r3, #10
 8002966:	4013      	ands	r3, r2
 8002968:	d100      	bne.n	800296c <HAL_GPIO_Init+0x174>
 800296a:	e09a      	b.n	8002aa2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296c:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <HAL_GPIO_Init+0x2c8>)
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_GPIO_Init+0x2c8>)
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	619a      	str	r2, [r3, #24]
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_GPIO_Init+0x2c8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002984:	4a4f      	ldr	r2, [pc, #316]	; (8002ac4 <HAL_GPIO_Init+0x2cc>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	589b      	ldr	r3, [r3, r2]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2203      	movs	r2, #3
 8002996:	4013      	ands	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	409a      	lsls	r2, r3
 800299e:	0013      	movs	r3, r2
 80029a0:	43da      	mvns	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	2390      	movs	r3, #144	; 0x90
 80029ac:	05db      	lsls	r3, r3, #23
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0x1e2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00d      	beq.n	80029d6 <HAL_GPIO_Init+0x1de>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_GPIO_Init+0x2d4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d007      	beq.n	80029d2 <HAL_GPIO_Init+0x1da>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a42      	ldr	r2, [pc, #264]	; (8002ad0 <HAL_GPIO_Init+0x2d8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_GPIO_Init+0x1d6>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029da:	2300      	movs	r3, #0
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	2103      	movs	r1, #3
 80029e0:	400a      	ands	r2, r1
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ec:	4935      	ldr	r1, [pc, #212]	; (8002ac4 <HAL_GPIO_Init+0x2cc>)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	4013      	ands	r3, r2
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	029b      	lsls	r3, r3, #10
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a48:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	035b      	lsls	r3, r3, #13
 8002a66:	4013      	ands	r3, r2
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43da      	mvns	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	039b      	lsls	r3, r3, #14
 8002a90:	4013      	ands	r3, r2
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_GPIO_Init+0x2dc>)
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	40da      	lsrs	r2, r3
 8002ab0:	1e13      	subs	r3, r2, #0
 8002ab2:	d000      	beq.n	8002ab6 <HAL_GPIO_Init+0x2be>
 8002ab4:	e6a8      	b.n	8002808 <HAL_GPIO_Init+0x10>
  } 
}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b006      	add	sp, #24
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	48000400 	.word	0x48000400
 8002acc:	48000800 	.word	0x48000800
 8002ad0:	48000c00 	.word	0x48000c00
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	0008      	movs	r0, r1
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	1cbb      	adds	r3, r7, #2
 8002ae6:	1c02      	adds	r2, r0, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	1c7b      	adds	r3, r7, #1
 8002aec:	1c0a      	adds	r2, r1, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af0:	1c7b      	adds	r3, r7, #1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002af8:	1cbb      	adds	r3, r7, #2
 8002afa:	881a      	ldrh	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b00:	e003      	b.n	8002b0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b02:	1cbb      	adds	r3, r7, #2
 8002b04:	881a      	ldrh	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	1dbb      	adds	r3, r7, #6
 8002b1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	1dba      	adds	r2, r7, #6
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d008      	beq.n	8002b3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b2e:	1dba      	adds	r2, r7, #6
 8002b30:	8812      	ldrh	r2, [r2, #0]
 8002b32:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b34:	1dbb      	adds	r3, r7, #6
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7fe fceb 	bl	8001514 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40010400 	.word	0x40010400

08002b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e082      	b.n	8002c64 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2241      	movs	r2, #65	; 0x41
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d107      	bne.n	8002b7a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff f809 	bl	8001b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2241      	movs	r2, #65	; 0x41
 8002b7e:	2124      	movs	r1, #36	; 0x24
 8002b80:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4934      	ldr	r1, [pc, #208]	; (8002c6c <HAL_I2C_Init+0x120>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4931      	ldr	r1, [pc, #196]	; (8002c70 <HAL_I2C_Init+0x124>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d108      	bne.n	8002bca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0209      	lsls	r1, r1, #8
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	e007      	b.n	8002bda <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2184      	movs	r1, #132	; 0x84
 8002bd4:	0209      	lsls	r1, r1, #8
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d104      	bne.n	8002bec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	491f      	ldr	r1, [pc, #124]	; (8002c74 <HAL_I2C_Init+0x128>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	491a      	ldr	r1, [pc, #104]	; (8002c70 <HAL_I2C_Init+0x124>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69d9      	ldr	r1, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2101      	movs	r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2241      	movs	r2, #65	; 0x41
 8002c50:	2120      	movs	r1, #32
 8002c52:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2242      	movs	r2, #66	; 0x42
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	f0ffffff 	.word	0xf0ffffff
 8002c70:	ffff7fff 	.word	0xffff7fff
 8002c74:	02008000 	.word	0x02008000

08002c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2241      	movs	r2, #65	; 0x41
 8002c86:	5c9b      	ldrb	r3, [r3, r2]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d138      	bne.n	8002d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e032      	b.n	8002d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2241      	movs	r2, #65	; 0x41
 8002ca8:	2124      	movs	r1, #36	; 0x24
 8002caa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4911      	ldr	r1, [pc, #68]	; (8002d0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2241      	movs	r2, #65	; 0x41
 8002cf0:	2120      	movs	r1, #32
 8002cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	0018      	movs	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b002      	add	sp, #8
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	ffffefff 	.word	0xffffefff

08002d10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2241      	movs	r2, #65	; 0x41
 8002d1e:	5c9b      	ldrb	r3, [r3, r2]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d139      	bne.n	8002d9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	5c9b      	ldrb	r3, [r3, r2]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e033      	b.n	8002d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	2101      	movs	r1, #1
 8002d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2241      	movs	r2, #65	; 0x41
 8002d40:	2124      	movs	r1, #36	; 0x24
 8002d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2101      	movs	r1, #1
 8002d50:	438a      	bics	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2241      	movs	r2, #65	; 0x41
 8002d8a:	2120      	movs	r1, #32
 8002d8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	2100      	movs	r1, #0
 8002d94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	fffff0ff 	.word	0xfffff0ff

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e305      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d100      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x1e>
 8002dc4:	e08d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dc6:	4bc5      	ldr	r3, [pc, #788]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	220c      	movs	r2, #12
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d00e      	beq.n	8002df0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd2:	4bc2      	ldr	r3, [pc, #776]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x64>
 8002dde:	4bbf      	ldr	r3, [pc, #764]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	401a      	ands	r2, r3
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4bba      	ldr	r3, [pc, #744]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <HAL_RCC_OscConfig+0x56>
 8002dfc:	e070      	b.n	8002ee0 <HAL_RCC_OscConfig+0x138>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d000      	beq.n	8002e08 <HAL_RCC_OscConfig+0x60>
 8002e06:	e06b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e2dc      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_OscConfig+0x7c>
 8002e14:	4bb1      	ldr	r3, [pc, #708]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4bb0      	ldr	r3, [pc, #704]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0249      	lsls	r1, r1, #9
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e02f      	b.n	8002e84 <HAL_RCC_OscConfig+0xdc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10c      	bne.n	8002e46 <HAL_RCC_OscConfig+0x9e>
 8002e2c:	4bab      	ldr	r3, [pc, #684]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4baa      	ldr	r3, [pc, #680]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e32:	49ab      	ldr	r1, [pc, #684]	; (80030e0 <HAL_RCC_OscConfig+0x338>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4ba8      	ldr	r3, [pc, #672]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4ba7      	ldr	r3, [pc, #668]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e3e:	49a9      	ldr	r1, [pc, #676]	; (80030e4 <HAL_RCC_OscConfig+0x33c>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e01e      	b.n	8002e84 <HAL_RCC_OscConfig+0xdc>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d10e      	bne.n	8002e6c <HAL_RCC_OscConfig+0xc4>
 8002e4e:	4ba3      	ldr	r3, [pc, #652]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4ba2      	ldr	r3, [pc, #648]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	02c9      	lsls	r1, r1, #11
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	4b9f      	ldr	r3, [pc, #636]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0249      	lsls	r1, r1, #9
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xdc>
 8002e6c:	4b9b      	ldr	r3, [pc, #620]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b9a      	ldr	r3, [pc, #616]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e72:	499b      	ldr	r1, [pc, #620]	; (80030e0 <HAL_RCC_OscConfig+0x338>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b98      	ldr	r3, [pc, #608]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b97      	ldr	r3, [pc, #604]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002e7e:	4999      	ldr	r1, [pc, #612]	; (80030e4 <HAL_RCC_OscConfig+0x33c>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d014      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f94a 	bl	8002124 <HAL_GetTick>
 8002e90:	0003      	movs	r3, r0
 8002e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e96:	f7ff f945 	bl	8002124 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	; 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e28e      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	029b      	lsls	r3, r3, #10
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0xee>
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7ff f935 	bl	8002124 <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff f930 	bl	8002124 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e279      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	029b      	lsls	r3, r3, #10
 8002eda:	4013      	ands	r3, r2
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x118>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d100      	bne.n	8002eee <HAL_RCC_OscConfig+0x146>
 8002eec:	e06c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ef8:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	220c      	movs	r2, #12
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d11f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x19c>
 8002f04:	4b75      	ldr	r3, [pc, #468]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	23c0      	movs	r3, #192	; 0xc0
 8002f0a:	025b      	lsls	r3, r3, #9
 8002f0c:	401a      	ands	r2, r3
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	4b71      	ldr	r3, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x184>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e24c      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	22f8      	movs	r2, #248	; 0xf8
 8002f32:	4393      	bics	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00da      	lsls	r2, r3, #3
 8002f3c:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	e041      	b.n	8002fc8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d024      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b62      	ldr	r3, [pc, #392]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f52:	2101      	movs	r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7ff f8e4 	bl	8002124 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f62:	f7ff f8df 	bl	8002124 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e228      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d0f1      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22f8      	movs	r2, #248	; 0xf8
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00da      	lsls	r2, r3, #3
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e018      	b.n	8002fc8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f96:	4b51      	ldr	r3, [pc, #324]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	438a      	bics	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7ff f8bf 	bl	8002124 <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fac:	f7ff f8ba 	bl	8002124 <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e203      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d1f1      	bne.n	8002fac <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d036      	beq.n	8003040 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fde:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7ff f89d 	bl	8002124 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7ff f898 	bl	8002124 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1e1      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2202      	movs	r2, #2
 8003008:	4013      	ands	r3, r2
 800300a:	d0f1      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x248>
 800300c:	e018      	b.n	8003040 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003014:	2101      	movs	r1, #1
 8003016:	438a      	bics	r2, r1
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7ff f883 	bl	8002124 <HAL_GetTick>
 800301e:	0003      	movs	r3, r0
 8003020:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff f87e 	bl	8002124 <HAL_GetTick>
 8003028:	0002      	movs	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1c7      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003036:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2202      	movs	r2, #2
 800303c:	4013      	ands	r3, r2
 800303e:	d1f1      	bne.n	8003024 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2204      	movs	r2, #4
 8003046:	4013      	ands	r3, r2
 8003048:	d100      	bne.n	800304c <HAL_RCC_OscConfig+0x2a4>
 800304a:	e0b5      	b.n	80031b8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304c:	201f      	movs	r0, #31
 800304e:	183b      	adds	r3, r7, r0
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	055b      	lsls	r3, r3, #21
 800305c:	4013      	ands	r3, r2
 800305e:	d110      	bne.n	8003082 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	0549      	lsls	r1, r1, #21
 800306a:	430a      	orrs	r2, r1
 800306c:	61da      	str	r2, [r3, #28]
 800306e:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800307c:	183b      	adds	r3, r7, r0
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_OscConfig+0x340>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4013      	ands	r3, r2
 800308c:	d11a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_RCC_OscConfig+0x340>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <HAL_RCC_OscConfig+0x340>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0049      	lsls	r1, r1, #1
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309c:	f7ff f842 	bl	8002124 <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7ff f83d 	bl	8002124 <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e186      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x340>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10f      	bne.n	80030ec <HAL_RCC_OscConfig+0x344>
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 80030ce:	6a1a      	ldr	r2, [r3, #32]
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <HAL_RCC_OscConfig+0x334>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	430a      	orrs	r2, r1
 80030d6:	621a      	str	r2, [r3, #32]
 80030d8:	e036      	b.n	8003148 <HAL_RCC_OscConfig+0x3a0>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	fffeffff 	.word	0xfffeffff
 80030e4:	fffbffff 	.word	0xfffbffff
 80030e8:	40007000 	.word	0x40007000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x366>
 80030f4:	4bb6      	ldr	r3, [pc, #728]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	4bb5      	ldr	r3, [pc, #724]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80030fa:	2101      	movs	r1, #1
 80030fc:	438a      	bics	r2, r1
 80030fe:	621a      	str	r2, [r3, #32]
 8003100:	4bb3      	ldr	r3, [pc, #716]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	4bb2      	ldr	r3, [pc, #712]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003106:	2104      	movs	r1, #4
 8003108:	438a      	bics	r2, r1
 800310a:	621a      	str	r2, [r3, #32]
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x3a0>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x388>
 8003116:	4bae      	ldr	r3, [pc, #696]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	4bad      	ldr	r3, [pc, #692]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800311c:	2104      	movs	r1, #4
 800311e:	430a      	orrs	r2, r1
 8003120:	621a      	str	r2, [r3, #32]
 8003122:	4bab      	ldr	r3, [pc, #684]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003124:	6a1a      	ldr	r2, [r3, #32]
 8003126:	4baa      	ldr	r3, [pc, #680]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x3a0>
 8003130:	4ba7      	ldr	r3, [pc, #668]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003132:	6a1a      	ldr	r2, [r3, #32]
 8003134:	4ba6      	ldr	r3, [pc, #664]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003136:	2101      	movs	r1, #1
 8003138:	438a      	bics	r2, r1
 800313a:	621a      	str	r2, [r3, #32]
 800313c:	4ba4      	ldr	r3, [pc, #656]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	4ba3      	ldr	r3, [pc, #652]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003142:	2104      	movs	r1, #4
 8003144:	438a      	bics	r2, r1
 8003146:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fe ffe8 	bl	8002124 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	e009      	b.n	800316e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe ffe3 	bl	8002124 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	4a9b      	ldr	r2, [pc, #620]	; (80033d4 <HAL_RCC_OscConfig+0x62c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e12b      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b98      	ldr	r3, [pc, #608]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x3b2>
 8003178:	e013      	b.n	80031a2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7fe ffd3 	bl	8002124 <HAL_GetTick>
 800317e:	0003      	movs	r3, r0
 8003180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e009      	b.n	8003198 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe ffce 	bl	8002124 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	4a91      	ldr	r2, [pc, #580]	; (80033d4 <HAL_RCC_OscConfig+0x62c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e116      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b8d      	ldr	r3, [pc, #564]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	2202      	movs	r2, #2
 800319e:	4013      	ands	r3, r2
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031a2:	231f      	movs	r3, #31
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b88      	ldr	r3, [pc, #544]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031b2:	4989      	ldr	r1, [pc, #548]	; (80033d8 <HAL_RCC_OscConfig+0x630>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2210      	movs	r2, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d063      	beq.n	800328a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d12a      	bne.n	8003220 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031ca:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ce:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031d0:	2104      	movs	r1, #4
 80031d2:	430a      	orrs	r2, r1
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031d6:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80031dc:	2101      	movs	r1, #1
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fe ff9f 	bl	8002124 <HAL_GetTick>
 80031e6:	0003      	movs	r3, r0
 80031e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031ec:	f7fe ff9a 	bl	8002124 <HAL_GetTick>
 80031f0:	0002      	movs	r2, r0
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0e3      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80031fe:	4b74      	ldr	r3, [pc, #464]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003202:	2202      	movs	r2, #2
 8003204:	4013      	ands	r3, r2
 8003206:	d0f1      	beq.n	80031ec <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003208:	4b71      	ldr	r3, [pc, #452]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	22f8      	movs	r2, #248	; 0xf8
 800320e:	4393      	bics	r3, r2
 8003210:	0019      	movs	r1, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	00da      	lsls	r2, r3, #3
 8003218:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	e034      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	3305      	adds	r3, #5
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003228:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003234:	4b66      	ldr	r3, [pc, #408]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	22f8      	movs	r2, #248	; 0xf8
 800323a:	4393      	bics	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	00da      	lsls	r2, r3, #3
 8003244:	4b62      	ldr	r3, [pc, #392]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003246:	430a      	orrs	r2, r1
 8003248:	635a      	str	r2, [r3, #52]	; 0x34
 800324a:	e01e      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800324e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003250:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003252:	2104      	movs	r1, #4
 8003254:	430a      	orrs	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003258:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800325a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800325c:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe ff5e 	bl	8002124 <HAL_GetTick>
 8003268:	0003      	movs	r3, r0
 800326a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800326e:	f7fe ff59 	bl	8002124 <HAL_GetTick>
 8003272:	0002      	movs	r2, r0
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0a2      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003280:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	d1f1      	bne.n	800326e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d100      	bne.n	8003294 <HAL_RCC_OscConfig+0x4ec>
 8003292:	e097      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	220c      	movs	r2, #12
 800329a:	4013      	ands	r3, r2
 800329c:	2b08      	cmp	r3, #8
 800329e:	d100      	bne.n	80032a2 <HAL_RCC_OscConfig+0x4fa>
 80032a0:	e06b      	b.n	800337a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d14c      	bne.n	8003344 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032b0:	494a      	ldr	r1, [pc, #296]	; (80033dc <HAL_RCC_OscConfig+0x634>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe ff35 	bl	8002124 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe ff30 	bl	8002124 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e079      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	049b      	lsls	r3, r3, #18
 80032da:	4013      	ands	r3, r2
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	220f      	movs	r2, #15
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032f2:	4b37      	ldr	r3, [pc, #220]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_RCC_OscConfig+0x638>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	431a      	orrs	r2, r3
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	0449      	lsls	r1, r1, #17
 8003316:	430a      	orrs	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331a:	f7fe ff03 	bl	8002124 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003324:	f7fe fefe 	bl	8002124 <HAL_GetTick>
 8003328:	0002      	movs	r2, r0
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e047      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003336:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	049b      	lsls	r3, r3, #18
 800333e:	4013      	ands	r3, r2
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x57c>
 8003342:	e03f      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800334a:	4924      	ldr	r1, [pc, #144]	; (80033dc <HAL_RCC_OscConfig+0x634>)
 800334c:	400a      	ands	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe fee8 	bl	8002124 <HAL_GetTick>
 8003354:	0003      	movs	r3, r0
 8003356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fee3 	bl	8002124 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e02c      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	049b      	lsls	r3, r3, #18
 8003374:	4013      	ands	r3, r2
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x5b2>
 8003378:	e024      	b.n	80033c4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e01f      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_RCC_OscConfig+0x628>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	23c0      	movs	r3, #192	; 0xc0
 8003396:	025b      	lsls	r3, r3, #9
 8003398:	401a      	ands	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	429a      	cmp	r2, r3
 80033a0:	d10e      	bne.n	80033c0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	220f      	movs	r2, #15
 80033a6:	401a      	ands	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	23f0      	movs	r3, #240	; 0xf0
 80033b4:	039b      	lsls	r3, r3, #14
 80033b6:	401a      	ands	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b008      	add	sp, #32
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000
 80033d4:	00001388 	.word	0x00001388
 80033d8:	efffffff 	.word	0xefffffff
 80033dc:	feffffff 	.word	0xfeffffff
 80033e0:	ffc27fff 	.word	0xffc27fff

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b3      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d911      	bls.n	800342a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b58      	ldr	r3, [pc, #352]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2201      	movs	r2, #1
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	4b55      	ldr	r3, [pc, #340]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4013      	ands	r3, r2
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09a      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	4013      	ands	r3, r2
 8003432:	d015      	beq.n	8003460 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	4013      	ands	r3, r2
 800343c:	d006      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800343e:	4b4b      	ldr	r3, [pc, #300]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003444:	21e0      	movs	r1, #224	; 0xe0
 8003446:	00c9      	lsls	r1, r1, #3
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344c:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	22f0      	movs	r2, #240	; 0xf0
 8003452:	4393      	bics	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4b44      	ldr	r3, [pc, #272]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	d040      	beq.n	80034ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	4b3e      	ldr	r3, [pc, #248]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	029b      	lsls	r3, r3, #10
 800347a:	4013      	ands	r3, r2
 800347c:	d114      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06e      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b38      	ldr	r3, [pc, #224]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	049b      	lsls	r3, r3, #18
 8003492:	4013      	ands	r3, r2
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e062      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	4013      	ands	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e05b      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2203      	movs	r2, #3
 80034ae:	4393      	bics	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fe32 	bl	8002124 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c4:	e009      	b.n	80034da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe fe2d 	bl	8002124 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	4a27      	ldr	r2, [pc, #156]	; (8003570 <HAL_RCC_ClockConfig+0x18c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e042      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	220c      	movs	r2, #12
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ec      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2201      	movs	r2, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d211      	bcs.n	800351e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	4393      	bics	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x184>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e020      	b.n	8003560 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d009      	beq.n	800353c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <HAL_RCC_ClockConfig+0x190>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800353c:	f000 f820 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003540:	0001      	movs	r1, r0
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x188>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	220f      	movs	r2, #15
 800354a:	4013      	ands	r3, r2
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x194>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	000a      	movs	r2, r1
 8003552:	40da      	lsrs	r2, r3
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x198>)
 8003556:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fe fca1 	bl	8001ea0 <HAL_InitTick>
  
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	00001388 	.word	0x00001388
 8003574:	fffff8ff 	.word	0xfffff8ff
 8003578:	0800a330 	.word	0x0800a330
 800357c:	20000000 	.word	0x20000000

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b08f      	sub	sp, #60	; 0x3c
 8003584:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003586:	2314      	movs	r3, #20
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	4a2c      	ldr	r2, [pc, #176]	; (800363c <HAL_RCC_GetSysClockFreq+0xbc>)
 800358c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800358e:	c313      	stmia	r3!, {r0, r1, r4}
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003598:	ca13      	ldmia	r2!, {r0, r1, r4}
 800359a:	c313      	stmia	r3!, {r0, r1, r4}
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a8:	2300      	movs	r3, #0
 80035aa:	637b      	str	r3, [r7, #52]	; 0x34
 80035ac:	2300      	movs	r3, #0
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	220c      	movs	r2, #12
 80035be:	4013      	ands	r3, r2
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d002      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x4a>
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x50>
 80035c8:	e02f      	b.n	800362a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ca:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ce:	e02f      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	220f      	movs	r2, #15
 80035d6:	4013      	ands	r3, r2
 80035d8:	2214      	movs	r2, #20
 80035da:	18ba      	adds	r2, r7, r2
 80035dc:	5cd3      	ldrb	r3, [r2, r3]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80035e0:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	220f      	movs	r2, #15
 80035e6:	4013      	ands	r3, r2
 80035e8:	1d3a      	adds	r2, r7, #4
 80035ea:	5cd3      	ldrb	r3, [r2, r3]
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	23c0      	movs	r3, #192	; 0xc0
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	401a      	ands	r2, r3
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	025b      	lsls	r3, r3, #9
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003600:	4811      	ldr	r0, [pc, #68]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003602:	f7fc fd8b 	bl	800011c <__udivsi3>
 8003606:	0003      	movs	r3, r0
 8003608:	001a      	movs	r2, r3
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	4353      	muls	r3, r2
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
 8003610:	e008      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003616:	f7fc fd81 	bl	800011c <__udivsi3>
 800361a:	0003      	movs	r3, r0
 800361c:	001a      	movs	r2, r3
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	4353      	muls	r3, r2
 8003622:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003628:	e002      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_RCC_GetSysClockFreq+0xc8>)
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800362e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b00f      	add	sp, #60	; 0x3c
 8003638:	bd90      	pop	{r4, r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	0800a17c 	.word	0x0800a17c
 8003640:	0800a18c 	.word	0x0800a18c
 8003644:	40021000 	.word	0x40021000
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <HAL_RCC_GetHCLKFreq+0x10>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20000000 	.word	0x20000000

08003660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003664:	f7ff fff2 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003668:	0001      	movs	r1, r0
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	2207      	movs	r2, #7
 8003672:	4013      	ands	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	40d9      	lsrs	r1, r3
 800367a:	000b      	movs	r3, r1
}    
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	40021000 	.word	0x40021000
 8003688:	0800a340 	.word	0x0800a340

0800368c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_RCC_GetClockConfig+0x4c>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	401a      	ands	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_GetClockConfig+0x4c>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	22f0      	movs	r2, #240	; 0xf0
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_RCC_GetClockConfig+0x4c>)
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	23e0      	movs	r3, #224	; 0xe0
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	401a      	ands	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCC_GetClockConfig+0x50>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	401a      	ands	r2, r3
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40022000 	.word	0x40022000

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	4013      	ands	r3, r2
 80036fa:	d100      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80036fc:	e08e      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2017      	movs	r0, #23
 8003700:	183b      	adds	r3, r7, r0
 8003702:	2200      	movs	r2, #0
 8003704:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003706:	4b5f      	ldr	r3, [pc, #380]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	055b      	lsls	r3, r3, #21
 800370e:	4013      	ands	r3, r2
 8003710:	d110      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003712:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0549      	lsls	r1, r1, #21
 800371c:	430a      	orrs	r2, r1
 800371e:	61da      	str	r2, [r3, #28]
 8003720:	4b58      	ldr	r3, [pc, #352]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	055b      	lsls	r3, r3, #21
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	183b      	adds	r3, r7, r0
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b54      	ldr	r3, [pc, #336]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4013      	ands	r3, r2
 800373e:	d11a      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003740:	4b51      	ldr	r3, [pc, #324]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b50      	ldr	r3, [pc, #320]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0049      	lsls	r1, r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fe fce9 	bl	8002124 <HAL_GetTick>
 8003752:	0003      	movs	r3, r0
 8003754:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	e008      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe fce4 	bl	8002124 <HAL_GetTick>
 800375c:	0002      	movs	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e087      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	2380      	movs	r3, #128	; 0x80
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d0f0      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003776:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	23c0      	movs	r3, #192	; 0xc0
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4013      	ands	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d034      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4013      	ands	r3, r2
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d02c      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379e:	4013      	ands	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	4b37      	ldr	r3, [pc, #220]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	0249      	lsls	r1, r1, #9
 80037ac:	430a      	orrs	r2, r1
 80037ae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b0:	4b34      	ldr	r3, [pc, #208]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037b6:	4936      	ldr	r1, [pc, #216]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fe fcab 	bl	8002124 <HAL_GetTick>
 80037ce:	0003      	movs	r3, r0
 80037d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e009      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fca6 	bl	8002124 <HAL_GetTick>
 80037d8:	0002      	movs	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e048      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	2202      	movs	r2, #2
 80037ee:	4013      	ands	r3, r2
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a25      	ldr	r2, [pc, #148]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	0019      	movs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4b20      	ldr	r3, [pc, #128]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003802:	430a      	orrs	r2, r1
 8003804:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003806:	2317      	movs	r3, #23
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003816:	4920      	ldr	r1, [pc, #128]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003818:	400a      	ands	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	4013      	ands	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	2203      	movs	r2, #3
 800382c:	4393      	bics	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003836:	430a      	orrs	r2, r1
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2220      	movs	r2, #32
 8003840:	4013      	ands	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	2210      	movs	r2, #16
 800384a:	4393      	bics	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003854:	430a      	orrs	r2, r1
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	4013      	ands	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	4393      	bics	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003874:	430a      	orrs	r2, r1
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b006      	add	sp, #24
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40021000 	.word	0x40021000
 8003888:	40007000 	.word	0x40007000
 800388c:	fffffcff 	.word	0xfffffcff
 8003890:	fffeffff 	.word	0xfffeffff
 8003894:	00001388 	.word	0x00001388
 8003898:	efffffff 	.word	0xefffffff

0800389c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0a8      	b.n	8003a00 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	2382      	movs	r3, #130	; 0x82
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	429a      	cmp	r2, r3
 80038c0:	d009      	beq.n	80038d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	61da      	str	r2, [r3, #28]
 80038c8:	e005      	b.n	80038d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	225d      	movs	r2, #93	; 0x5d
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	225c      	movs	r2, #92	; 0x5c
 80038ec:	2100      	movs	r1, #0
 80038ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f7fe f998 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	225d      	movs	r2, #93	; 0x5d
 80038fc:	2102      	movs	r1, #2
 80038fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	438a      	bics	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	23e0      	movs	r3, #224	; 0xe0
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	429a      	cmp	r2, r3
 800391a:	d902      	bls.n	8003922 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	e002      	b.n	8003928 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	015b      	lsls	r3, r3, #5
 8003926:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	23f0      	movs	r3, #240	; 0xf0
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	429a      	cmp	r2, r3
 8003932:	d008      	beq.n	8003946 <HAL_SPI_Init+0xaa>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	23e0      	movs	r3, #224	; 0xe0
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	429a      	cmp	r2, r3
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	2382      	movs	r3, #130	; 0x82
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	401a      	ands	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	2384      	movs	r3, #132	; 0x84
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	400b      	ands	r3, r1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2102      	movs	r1, #2
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2101      	movs	r1, #1
 800396c:	400b      	ands	r3, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6999      	ldr	r1, [r3, #24]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	400b      	ands	r3, r1
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2138      	movs	r1, #56	; 0x38
 8003982:	400b      	ands	r3, r1
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	400b      	ands	r3, r1
 800398e:	431a      	orrs	r2, r3
 8003990:	0011      	movs	r1, r2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	401a      	ands	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	2204      	movs	r2, #4
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2110      	movs	r1, #16
 80039b4:	400b      	ands	r3, r1
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	2108      	movs	r1, #8
 80039be:	400b      	ands	r3, r1
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	23f0      	movs	r3, #240	; 0xf0
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	400b      	ands	r3, r1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	0011      	movs	r1, r2
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	015b      	lsls	r3, r3, #5
 80039d6:	401a      	ands	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4907      	ldr	r1, [pc, #28]	; (8003a08 <HAL_SPI_Init+0x16c>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	225d      	movs	r2, #93	; 0x5d
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fffff7ff 	.word	0xfffff7ff

08003a0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	1dbb      	adds	r3, r7, #6
 8003a1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a1c:	231f      	movs	r3, #31
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	225c      	movs	r2, #92	; 0x5c
 8003a28:	5c9b      	ldrb	r3, [r3, r2]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_SPI_Transmit+0x26>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e140      	b.n	8003cb4 <HAL_SPI_Transmit+0x2a8>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	225c      	movs	r2, #92	; 0x5c
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fe fb73 	bl	8002124 <HAL_GetTick>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a42:	2316      	movs	r3, #22
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	1dba      	adds	r2, r7, #6
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	225d      	movs	r2, #93	; 0x5d
 8003a50:	5c9b      	ldrb	r3, [r3, r2]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d004      	beq.n	8003a62 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003a58:	231f      	movs	r3, #31
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a60:	e11d      	b.n	8003c9e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_SPI_Transmit+0x64>
 8003a68:	1dbb      	adds	r3, r7, #6
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003a70:	231f      	movs	r3, #31
 8003a72:	18fb      	adds	r3, r7, r3
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a78:	e111      	b.n	8003c9e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	225d      	movs	r2, #93	; 0x5d
 8003a7e:	2103      	movs	r1, #3
 8003a80:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1dba      	adds	r2, r7, #6
 8003a92:	8812      	ldrh	r2, [r2, #0]
 8003a94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1dba      	adds	r2, r7, #6
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2244      	movs	r2, #68	; 0x44
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2246      	movs	r2, #70	; 0x46
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	2380      	movs	r3, #128	; 0x80
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d110      	bne.n	8003aee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2140      	movs	r1, #64	; 0x40
 8003ad8:	438a      	bics	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	01c9      	lsls	r1, r1, #7
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2240      	movs	r2, #64	; 0x40
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d007      	beq.n	8003b0c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2140      	movs	r1, #64	; 0x40
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	23e0      	movs	r3, #224	; 0xe0
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d94e      	bls.n	8003bb6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_SPI_Transmit+0x11e>
 8003b20:	2316      	movs	r3, #22
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d13f      	bne.n	8003baa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	1c9a      	adds	r2, r3, #2
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b4e:	e02c      	b.n	8003baa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2202      	movs	r2, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d112      	bne.n	8003b84 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	1c9a      	adds	r2, r3, #2
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b82:	e012      	b.n	8003baa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b84:	f7fe face 	bl	8002124 <HAL_GetTick>
 8003b88:	0002      	movs	r2, r0
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d802      	bhi.n	8003b9a <HAL_SPI_Transmit+0x18e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_SPI_Transmit+0x194>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d104      	bne.n	8003baa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003ba0:	231f      	movs	r3, #31
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ba8:	e079      	b.n	8003c9e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1cd      	bne.n	8003b50 <HAL_SPI_Transmit+0x144>
 8003bb4:	e04f      	b.n	8003c56 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_SPI_Transmit+0x1bc>
 8003bbe:	2316      	movs	r3, #22
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d141      	bne.n	8003c4c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003bee:	e02d      	b.n	8003c4c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d113      	bne.n	8003c26 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c24:	e012      	b.n	8003c4c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c26:	f7fe fa7d 	bl	8002124 <HAL_GetTick>
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d802      	bhi.n	8003c3c <HAL_SPI_Transmit+0x230>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Transmit+0x236>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003c42:	231f      	movs	r3, #31
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	2203      	movs	r2, #3
 8003c48:	701a      	strb	r2, [r3, #0]
          goto error;
 8003c4a:	e028      	b.n	8003c9e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1cc      	bne.n	8003bf0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fce5 	bl	800462c <SPI_EndRxTxTransaction>
 8003c62:	1e03      	subs	r3, r0, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003c92:	231f      	movs	r3, #31
 8003c94:	18fb      	adds	r3, r7, r3
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e000      	b.n	8003c9e <HAL_SPI_Transmit+0x292>
  }

error:
 8003c9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	225d      	movs	r2, #93	; 0x5d
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	225c      	movs	r2, #92	; 0x5c
 8003caa:	2100      	movs	r1, #0
 8003cac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003cae:	231f      	movs	r3, #31
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b008      	add	sp, #32
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	1dbb      	adds	r3, r7, #6
 8003cca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ccc:	2317      	movs	r3, #23
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	2382      	movs	r3, #130	; 0x82
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d113      	bne.n	8003d08 <HAL_SPI_Receive+0x4c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	225d      	movs	r2, #93	; 0x5d
 8003cec:	2104      	movs	r1, #4
 8003cee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003cf0:	1dbb      	adds	r3, r7, #6
 8003cf2:	881c      	ldrh	r4, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	0023      	movs	r3, r4
 8003d00:	f000 f928 	bl	8003f54 <HAL_SPI_TransmitReceive>
 8003d04:	0003      	movs	r3, r0
 8003d06:	e11c      	b.n	8003f42 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	225c      	movs	r2, #92	; 0x5c
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_Receive+0x5a>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e115      	b.n	8003f42 <HAL_SPI_Receive+0x286>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	225c      	movs	r2, #92	; 0x5c
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d1e:	f7fe fa01 	bl	8002124 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	225d      	movs	r2, #93	; 0x5d
 8003d2a:	5c9b      	ldrb	r3, [r3, r2]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d004      	beq.n	8003d3c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003d32:	2317      	movs	r3, #23
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d3a:	e0f7      	b.n	8003f2c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_SPI_Receive+0x8e>
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003d4a:	2317      	movs	r3, #23
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d52:	e0eb      	b.n	8003f2c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	225d      	movs	r2, #93	; 0x5d
 8003d58:	2104      	movs	r1, #4
 8003d5a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1dba      	adds	r2, r7, #6
 8003d6c:	2144      	movs	r1, #68	; 0x44
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1dba      	adds	r2, r7, #6
 8003d76:	2146      	movs	r1, #70	; 0x46
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	23e0      	movs	r3, #224	; 0xe0
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d908      	bls.n	8003db8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4966      	ldr	r1, [pc, #408]	; (8003f4c <HAL_SPI_Receive+0x290>)
 8003db2:	400a      	ands	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	0149      	lsls	r1, r1, #5
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d10f      	bne.n	8003df6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	438a      	bics	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4957      	ldr	r1, [pc, #348]	; (8003f50 <HAL_SPI_Receive+0x294>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2240      	movs	r2, #64	; 0x40
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d007      	beq.n	8003e14 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	23e0      	movs	r3, #224	; 0xe0
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d900      	bls.n	8003e22 <HAL_SPI_Receive+0x166>
 8003e20:	e069      	b.n	8003ef6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e22:	e031      	b.n	8003e88 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d117      	bne.n	8003e62 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	001a      	movs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2246      	movs	r2, #70	; 0x46
 8003e52:	5a9b      	ldrh	r3, [r3, r2]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2246      	movs	r2, #70	; 0x46
 8003e5e:	5299      	strh	r1, [r3, r2]
 8003e60:	e012      	b.n	8003e88 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e62:	f7fe f95f 	bl	8002124 <HAL_GetTick>
 8003e66:	0002      	movs	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d802      	bhi.n	8003e78 <HAL_SPI_Receive+0x1bc>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	d102      	bne.n	8003e7e <HAL_SPI_Receive+0x1c2>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003e7e:	2317      	movs	r3, #23
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2203      	movs	r2, #3
 8003e84:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e86:	e051      	b.n	8003f2c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2246      	movs	r2, #70	; 0x46
 8003e8c:	5a9b      	ldrh	r3, [r3, r2]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1c7      	bne.n	8003e24 <HAL_SPI_Receive+0x168>
 8003e94:	e035      	b.n	8003f02 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d115      	bne.n	8003ed0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2246      	movs	r2, #70	; 0x46
 8003ec0:	5a9b      	ldrh	r3, [r3, r2]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b299      	uxth	r1, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2246      	movs	r2, #70	; 0x46
 8003ecc:	5299      	strh	r1, [r3, r2]
 8003ece:	e012      	b.n	8003ef6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed0:	f7fe f928 	bl	8002124 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d802      	bhi.n	8003ee6 <HAL_SPI_Receive+0x22a>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_Receive+0x230>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003eec:	2317      	movs	r3, #23
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	701a      	strb	r2, [r3, #0]
          goto error;
 8003ef4:	e01a      	b.n	8003f2c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2246      	movs	r2, #70	; 0x46
 8003efa:	5a9b      	ldrh	r3, [r3, r2]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1c9      	bne.n	8003e96 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fb31 	bl	8004570 <SPI_EndRxTransaction>
 8003f0e:	1e03      	subs	r3, r0, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003f20:	2317      	movs	r3, #23
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e000      	b.n	8003f2c <HAL_SPI_Receive+0x270>
  }

error :
 8003f2a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	225d      	movs	r2, #93	; 0x5d
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	225c      	movs	r2, #92	; 0x5c
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f3c:	2317      	movs	r3, #23
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	781b      	ldrb	r3, [r3, #0]
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b007      	add	sp, #28
 8003f48:	bd90      	pop	{r4, r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	ffffefff 	.word	0xffffefff
 8003f50:	ffffbfff 	.word	0xffffbfff

08003f54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	001a      	movs	r2, r3
 8003f62:	1cbb      	adds	r3, r7, #2
 8003f64:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f66:	2301      	movs	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f6a:	2323      	movs	r3, #35	; 0x23
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	225c      	movs	r2, #92	; 0x5c
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x2c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e1b5      	b.n	80042ec <HAL_SPI_TransmitReceive+0x398>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	225c      	movs	r2, #92	; 0x5c
 8003f84:	2101      	movs	r1, #1
 8003f86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fe f8cc 	bl	8002124 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f90:	201b      	movs	r0, #27
 8003f92:	183b      	adds	r3, r7, r0
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	215d      	movs	r1, #93	; 0x5d
 8003f98:	5c52      	ldrb	r2, [r2, r1]
 8003f9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fa2:	2312      	movs	r3, #18
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	1cba      	adds	r2, r7, #2
 8003fa8:	8812      	ldrh	r2, [r2, #0]
 8003faa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fac:	183b      	adds	r3, r7, r0
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d011      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x84>
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	2382      	movs	r3, #130	; 0x82
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d107      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x7a>
 8003fc6:	183b      	adds	r3, r7, r0
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d004      	beq.n	8003fd8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003fce:	2323      	movs	r3, #35	; 0x23
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
    goto error;
 8003fd6:	e17e      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d006      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x98>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x98>
 8003fe4:	1cbb      	adds	r3, r7, #2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003fec:	2323      	movs	r3, #35	; 0x23
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ff4:	e16f      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	225d      	movs	r2, #93	; 0x5d
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d003      	beq.n	800400a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	225d      	movs	r2, #93	; 0x5d
 8004006:	2105      	movs	r1, #5
 8004008:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1cba      	adds	r2, r7, #2
 800401a:	2146      	movs	r1, #70	; 0x46
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	1cba      	adds	r2, r7, #2
 8004024:	2144      	movs	r1, #68	; 0x44
 8004026:	8812      	ldrh	r2, [r2, #0]
 8004028:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1cba      	adds	r2, r7, #2
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1cba      	adds	r2, r7, #2
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	23e0      	movs	r3, #224	; 0xe0
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	429a      	cmp	r2, r3
 8004056:	d908      	bls.n	800406a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	49a4      	ldr	r1, [pc, #656]	; (80042f4 <HAL_SPI_TransmitReceive+0x3a0>)
 8004064:	400a      	ands	r2, r1
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	e008      	b.n	800407c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	0149      	lsls	r1, r1, #5
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	4013      	ands	r3, r2
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d007      	beq.n	800409a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	23e0      	movs	r3, #224	; 0xe0
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d800      	bhi.n	80040a8 <HAL_SPI_TransmitReceive+0x154>
 80040a6:	e07f      	b.n	80041a8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_SPI_TransmitReceive+0x168>
 80040b0:	2312      	movs	r3, #18
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d000      	beq.n	80040bc <HAL_SPI_TransmitReceive+0x168>
 80040ba:	e069      	b.n	8004190 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	881a      	ldrh	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	1c9a      	adds	r2, r3, #2
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e0:	e056      	b.n	8004190 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2202      	movs	r2, #2
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d11b      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x1d4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x1d4>
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d113      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	881a      	ldrh	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	1c9a      	adds	r2, r3, #2
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2201      	movs	r2, #1
 8004130:	4013      	ands	r3, r2
 8004132:	2b01      	cmp	r3, #1
 8004134:	d11c      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x21c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2246      	movs	r2, #70	; 0x46
 800413a:	5a9b      	ldrh	r3, [r3, r2]
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68da      	ldr	r2, [r3, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	b292      	uxth	r2, r2
 800414e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	1c9a      	adds	r2, r3, #2
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2246      	movs	r2, #70	; 0x46
 800415e:	5a9b      	ldrh	r3, [r3, r2]
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b299      	uxth	r1, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2246      	movs	r2, #70	; 0x46
 800416a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004170:	f7fd ffd8 	bl	8002124 <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417c:	429a      	cmp	r2, r3
 800417e:	d807      	bhi.n	8004190 <HAL_SPI_TransmitReceive+0x23c>
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	3301      	adds	r3, #1
 8004184:	d004      	beq.n	8004190 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004186:	2323      	movs	r3, #35	; 0x23
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2203      	movs	r2, #3
 800418c:	701a      	strb	r2, [r3, #0]
        goto error;
 800418e:	e0a2      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1a3      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x18e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2246      	movs	r2, #70	; 0x46
 800419e:	5a9b      	ldrh	r3, [r3, r2]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d19d      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x18e>
 80041a6:	e085      	b.n	80042b4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x268>
 80041b0:	2312      	movs	r3, #18
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d000      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x268>
 80041ba:	e070      	b.n	800429e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	7812      	ldrb	r2, [r2, #0]
 80041c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e2:	e05c      	b.n	800429e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2202      	movs	r2, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d11c      	bne.n	800422c <HAL_SPI_TransmitReceive+0x2d8>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d017      	beq.n	800422c <HAL_SPI_TransmitReceive+0x2d8>
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d114      	bne.n	800422c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2201      	movs	r2, #1
 8004234:	4013      	ands	r3, r2
 8004236:	2b01      	cmp	r3, #1
 8004238:	d11e      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x324>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2246      	movs	r2, #70	; 0x46
 800423e:	5a9b      	ldrh	r3, [r3, r2]
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	001a      	movs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2246      	movs	r2, #70	; 0x46
 8004266:	5a9b      	ldrh	r3, [r3, r2]
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b299      	uxth	r1, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2246      	movs	r2, #70	; 0x46
 8004272:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004278:	f7fd ff54 	bl	8002124 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004284:	429a      	cmp	r2, r3
 8004286:	d802      	bhi.n	800428e <HAL_SPI_TransmitReceive+0x33a>
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	3301      	adds	r3, #1
 800428c:	d102      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x340>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004294:	2323      	movs	r3, #35	; 0x23
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	2203      	movs	r2, #3
 800429a:	701a      	strb	r2, [r3, #0]
        goto error;
 800429c:	e01b      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d19d      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x290>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2246      	movs	r2, #70	; 0x46
 80042ac:	5a9b      	ldrh	r3, [r3, r2]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d197      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f9b6 	bl	800462c <SPI_EndRxTxTransaction>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80042c4:	2323      	movs	r3, #35	; 0x23
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60
 80042d2:	e000      	b.n	80042d6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80042d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	225d      	movs	r2, #93	; 0x5d
 80042da:	2101      	movs	r1, #1
 80042dc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	225c      	movs	r2, #92	; 0x5c
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80042e6:	2323      	movs	r3, #35	; 0x23
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	781b      	ldrb	r3, [r3, #0]
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b00a      	add	sp, #40	; 0x28
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	ffffefff 	.word	0xffffefff

080042f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	225d      	movs	r2, #93	; 0x5d
 8004304:	5c9b      	ldrb	r3, [r3, r2]
 8004306:	b2db      	uxtb	r3, r3
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004320:	f7fd ff00 	bl	8002124 <HAL_GetTick>
 8004324:	0002      	movs	r2, r0
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004330:	f7fd fef8 	bl	8002124 <HAL_GetTick>
 8004334:	0003      	movs	r3, r0
 8004336:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	015b      	lsls	r3, r3, #5
 800433e:	0d1b      	lsrs	r3, r3, #20
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	4353      	muls	r3, r2
 8004344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004346:	e058      	b.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	d055      	beq.n	80043fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800434e:	f7fd fee9 	bl	8002124 <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	429a      	cmp	r2, r3
 800435c:	d902      	bls.n	8004364 <SPI_WaitFlagStateUntilTimeout+0x54>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d142      	bne.n	80043ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	21e0      	movs	r1, #224	; 0xe0
 8004370:	438a      	bics	r2, r1
 8004372:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	2382      	movs	r3, #130	; 0x82
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	429a      	cmp	r2, r3
 800437e:	d113      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	429a      	cmp	r2, r3
 800438a:	d005      	beq.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	2380      	movs	r3, #128	; 0x80
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	429a      	cmp	r2, r3
 8004396:	d107      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ac:	2380      	movs	r3, #128	; 0x80
 80043ae:	019b      	lsls	r3, r3, #6
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d110      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	491a      	ldr	r1, [pc, #104]	; (8004428 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	0189      	lsls	r1, r1, #6
 80043d2:	430a      	orrs	r2, r1
 80043d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	225d      	movs	r2, #93	; 0x5d
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	225c      	movs	r2, #92	; 0x5c
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e017      	b.n	800441a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	425a      	negs	r2, r3
 800440a:	4153      	adcs	r3, r2
 800440c:	b2db      	uxtb	r3, r3
 800440e:	001a      	movs	r2, r3
 8004410:	1dfb      	adds	r3, r7, #7
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d197      	bne.n	8004348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b008      	add	sp, #32
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000000 	.word	0x20000000
 8004428:	ffffdfff 	.word	0xffffdfff

0800442c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800443a:	2317      	movs	r3, #23
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004442:	f7fd fe6f 	bl	8002124 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	18d3      	adds	r3, r2, r3
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004452:	f7fd fe67 	bl	8002124 <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	0013      	movs	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	189b      	adds	r3, r3, r2
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	0d1b      	lsrs	r3, r3, #20
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	4353      	muls	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004478:	e068      	b.n	800454c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	23c0      	movs	r3, #192	; 0xc0
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	429a      	cmp	r2, r3
 8004482:	d10a      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	2117      	movs	r1, #23
 8004492:	187b      	adds	r3, r7, r1
 8004494:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004496:	187b      	adds	r3, r7, r1
 8004498:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	d055      	beq.n	800454c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a0:	f7fd fe40 	bl	8002124 <HAL_GetTick>
 80044a4:	0002      	movs	r2, r0
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d902      	bls.n	80044b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d142      	bne.n	800453c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	21e0      	movs	r1, #224	; 0xe0
 80044c2:	438a      	bics	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	2382      	movs	r3, #130	; 0x82
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d113      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	429a      	cmp	r2, r3
 80044dc:	d005      	beq.n	80044ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d107      	bne.n	80044fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2140      	movs	r1, #64	; 0x40
 80044f6:	438a      	bics	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	429a      	cmp	r2, r3
 8004504:	d110      	bne.n	8004528 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4916      	ldr	r1, [pc, #88]	; (800456c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004512:	400a      	ands	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2180      	movs	r1, #128	; 0x80
 8004522:	0189      	lsls	r1, r1, #6
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	225d      	movs	r2, #93	; 0x5d
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	225c      	movs	r2, #92	; 0x5c
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e010      	b.n	800455e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	3b01      	subs	r3, #1
 800454a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d18e      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b00a      	add	sp, #40	; 0x28
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	20000000 	.word	0x20000000
 800456c:	ffffdfff 	.word	0xffffdfff

08004570 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	2382      	movs	r3, #130	; 0x82
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	429a      	cmp	r2, r3
 8004586:	d113      	bne.n	80045b0 <SPI_EndRxTransaction+0x40>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	429a      	cmp	r2, r3
 8004592:	d005      	beq.n	80045a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	438a      	bics	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	0013      	movs	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	2180      	movs	r1, #128	; 0x80
 80045be:	f7ff fea7 	bl	8004310 <SPI_WaitFlagStateUntilTimeout>
 80045c2:	1e03      	subs	r3, r0, #0
 80045c4:	d007      	beq.n	80045d6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ca:	2220      	movs	r2, #32
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e026      	b.n	8004624 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	2382      	movs	r3, #130	; 0x82
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	429a      	cmp	r2, r3
 80045e0:	d11f      	bne.n	8004622 <SPI_EndRxTransaction+0xb2>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d005      	beq.n	80045fa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	2380      	movs	r3, #128	; 0x80
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d113      	bne.n	8004622 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	23c0      	movs	r3, #192	; 0xc0
 80045fe:	00d9      	lsls	r1, r3, #3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	0013      	movs	r3, r2
 8004608:	2200      	movs	r2, #0
 800460a:	f7ff ff0f 	bl	800442c <SPI_WaitFifoStateUntilTimeout>
 800460e:	1e03      	subs	r3, r0, #0
 8004610:	d007      	beq.n	8004622 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004616:	2220      	movs	r2, #32
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e000      	b.n	8004624 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b004      	add	sp, #16
 800462a:	bd80      	pop	{r7, pc}

0800462c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	23c0      	movs	r3, #192	; 0xc0
 800463c:	0159      	lsls	r1, r3, #5
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	0013      	movs	r3, r2
 8004646:	2200      	movs	r2, #0
 8004648:	f7ff fef0 	bl	800442c <SPI_WaitFifoStateUntilTimeout>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d007      	beq.n	8004660 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	2220      	movs	r2, #32
 8004656:	431a      	orrs	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e027      	b.n	80046b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	0013      	movs	r3, r2
 800466a:	2200      	movs	r2, #0
 800466c:	2180      	movs	r1, #128	; 0x80
 800466e:	f7ff fe4f 	bl	8004310 <SPI_WaitFlagStateUntilTimeout>
 8004672:	1e03      	subs	r3, r0, #0
 8004674:	d007      	beq.n	8004686 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467a:	2220      	movs	r2, #32
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e014      	b.n	80046b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	23c0      	movs	r3, #192	; 0xc0
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	0013      	movs	r3, r2
 8004694:	2200      	movs	r2, #0
 8004696:	f7ff fec9 	bl	800442c <SPI_WaitFifoStateUntilTimeout>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d007      	beq.n	80046ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a2:	2220      	movs	r2, #32
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e000      	b.n	80046b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b004      	add	sp, #16
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e042      	b.n	8004750 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	223d      	movs	r2, #61	; 0x3d
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	223c      	movs	r2, #60	; 0x3c
 80046da:	2100      	movs	r1, #0
 80046dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fd fb2b 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	223d      	movs	r2, #61	; 0x3d
 80046ea:	2102      	movs	r1, #2
 80046ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	0019      	movs	r1, r3
 80046f8:	0010      	movs	r0, r2
 80046fa:	f000 fba1 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2246      	movs	r2, #70	; 0x46
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	223e      	movs	r2, #62	; 0x3e
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	223f      	movs	r2, #63	; 0x3f
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2241      	movs	r2, #65	; 0x41
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2242      	movs	r2, #66	; 0x42
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2243      	movs	r2, #67	; 0x43
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2244      	movs	r2, #68	; 0x44
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2245      	movs	r2, #69	; 0x45
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	223d      	movs	r2, #61	; 0x3d
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	223d      	movs	r2, #61	; 0x3d
 8004764:	5c9b      	ldrb	r3, [r3, r2]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b01      	cmp	r3, #1
 800476a:	d001      	beq.n	8004770 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e035      	b.n	80047dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223d      	movs	r2, #61	; 0x3d
 8004774:	2102      	movs	r1, #2
 8004776:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2101      	movs	r1, #1
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_TIM_Base_Start_IT+0x8c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_TIM_Base_Start_IT+0x4e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_TIM_Base_Start_IT+0x90>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIM_Base_Start_IT+0x4e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a12      	ldr	r2, [pc, #72]	; (80047ec <HAL_TIM_Base_Start_IT+0x94>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d111      	bne.n	80047ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2207      	movs	r2, #7
 80047ae:	4013      	ands	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b06      	cmp	r3, #6
 80047b6:	d010      	beq.n	80047da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2101      	movs	r1, #1
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	e007      	b.n	80047da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	430a      	orrs	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40014000 	.word	0x40014000

080047f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e042      	b.n	8004888 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	223d      	movs	r2, #61	; 0x3d
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	223c      	movs	r2, #60	; 0x3c
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f000 f839 	bl	8004890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	223d      	movs	r2, #61	; 0x3d
 8004822:	2102      	movs	r1, #2
 8004824:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	0019      	movs	r1, r3
 8004830:	0010      	movs	r0, r2
 8004832:	f000 fb05 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2246      	movs	r2, #70	; 0x46
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	223e      	movs	r2, #62	; 0x3e
 8004842:	2101      	movs	r1, #1
 8004844:	5499      	strb	r1, [r3, r2]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	223f      	movs	r2, #63	; 0x3f
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	2101      	movs	r1, #1
 8004854:	5499      	strb	r1, [r3, r2]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2241      	movs	r2, #65	; 0x41
 800485a:	2101      	movs	r1, #1
 800485c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2242      	movs	r2, #66	; 0x42
 8004862:	2101      	movs	r1, #1
 8004864:	5499      	strb	r1, [r3, r2]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2243      	movs	r2, #67	; 0x43
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2244      	movs	r2, #68	; 0x44
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2245      	movs	r2, #69	; 0x45
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	223d      	movs	r2, #61	; 0x3d
 8004882:	2101      	movs	r1, #1
 8004884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d124      	bne.n	8004900 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2202      	movs	r2, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d11d      	bne.n	8004900 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2203      	movs	r2, #3
 80048ca:	4252      	negs	r2, r2
 80048cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2203      	movs	r2, #3
 80048dc:	4013      	ands	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fa94 	bl	8004e10 <HAL_TIM_IC_CaptureCallback>
 80048e8:	e007      	b.n	80048fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fa87 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 fa93 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2204      	movs	r2, #4
 8004908:	4013      	ands	r3, r2
 800490a:	2b04      	cmp	r3, #4
 800490c:	d125      	bne.n	800495a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2204      	movs	r2, #4
 8004916:	4013      	ands	r3, r2
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11e      	bne.n	800495a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2205      	movs	r2, #5
 8004922:	4252      	negs	r2, r2
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	23c0      	movs	r3, #192	; 0xc0
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f000 fa67 	bl	8004e10 <HAL_TIM_IC_CaptureCallback>
 8004942:	e007      	b.n	8004954 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fa5a 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0018      	movs	r0, r3
 8004950:	f000 fa66 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2208      	movs	r2, #8
 8004962:	4013      	ands	r3, r2
 8004964:	2b08      	cmp	r3, #8
 8004966:	d124      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2208      	movs	r2, #8
 8004970:	4013      	ands	r3, r2
 8004972:	2b08      	cmp	r3, #8
 8004974:	d11d      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2209      	movs	r2, #9
 800497c:	4252      	negs	r2, r2
 800497e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2204      	movs	r2, #4
 8004984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	2203      	movs	r2, #3
 800498e:	4013      	ands	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f000 fa3b 	bl	8004e10 <HAL_TIM_IC_CaptureCallback>
 800499a:	e007      	b.n	80049ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	0018      	movs	r0, r3
 80049a0:	f000 fa2e 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 fa3a 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2210      	movs	r2, #16
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d125      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2210      	movs	r2, #16
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d11e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2211      	movs	r2, #17
 80049d4:	4252      	negs	r2, r2
 80049d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2208      	movs	r2, #8
 80049dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	23c0      	movs	r3, #192	; 0xc0
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4013      	ands	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 fa0e 	bl	8004e10 <HAL_TIM_IC_CaptureCallback>
 80049f4:	e007      	b.n	8004a06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fa01 	bl	8004e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 fa0d 	bl	8004e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d10f      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d108      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	4252      	negs	r2, r2
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f7fd f821 	bl	8001a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d10f      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d108      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2281      	movs	r2, #129	; 0x81
 8004a5c:	4252      	negs	r2, r2
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 fd58 	bl	8005518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2240      	movs	r2, #64	; 0x40
 8004a70:	4013      	ands	r3, r2
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d10f      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2240      	movs	r2, #64	; 0x40
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d108      	bne.n	8004a96 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2241      	movs	r2, #65	; 0x41
 8004a8a:	4252      	negs	r2, r2
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f9cd 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d10f      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d108      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2221      	movs	r2, #33	; 0x21
 8004ab8:	4252      	negs	r2, r2
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fd22 	bl	8005508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2317      	movs	r3, #23
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	223c      	movs	r2, #60	; 0x3c
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x22>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ad      	b.n	8004c4a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	223c      	movs	r2, #60	; 0x3c
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d100      	bne.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x32>
 8004afc:	e076      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x120>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0c      	cmp	r3, #12
 8004b02:	d900      	bls.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004b04:	e095      	b.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d04e      	beq.n	8004baa <HAL_TIM_PWM_ConfigChannel+0xde>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d900      	bls.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004b12:	e08e      	b.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d021      	beq.n	8004b64 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004b20:	e087      	b.n	8004c32 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f9fe 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2108      	movs	r1, #8
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2104      	movs	r1, #4
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      break;
 8004b62:	e06b      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	0011      	movs	r1, r2
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 fa65 	bl	800503c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	0109      	lsls	r1, r1, #4
 8004b80:	430a      	orrs	r2, r1
 8004b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4931      	ldr	r1, [pc, #196]	; (8004c54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004b90:	400a      	ands	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6999      	ldr	r1, [r3, #24]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	619a      	str	r2, [r3, #24]
      break;
 8004ba8:	e048      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fac6 	bl	8005144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2108      	movs	r1, #8
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2104      	movs	r1, #4
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69d9      	ldr	r1, [r3, #28]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e027      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	0011      	movs	r1, r2
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f000 fb2b 	bl	8005250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	0109      	lsls	r1, r1, #4
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	490f      	ldr	r1, [pc, #60]	; (8004c54 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69d9      	ldr	r1, [r3, #28]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	021a      	lsls	r2, r3, #8
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e004      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004c32:	2317      	movs	r3, #23
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
      break;
 8004c3a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	223c      	movs	r2, #60	; 0x3c
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

  return status;
 8004c44:	2317      	movs	r3, #23
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	781b      	ldrb	r3, [r3, #0]
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b006      	add	sp, #24
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	fffffbff 	.word	0xfffffbff

08004c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	223c      	movs	r2, #60	; 0x3c
 8004c6e:	5c9b      	ldrb	r3, [r3, r2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x20>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0bc      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x19a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	223c      	movs	r2, #60	; 0x3c
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	223d      	movs	r2, #61	; 0x3d
 8004c84:	2102      	movs	r1, #2
 8004c86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2277      	movs	r2, #119	; 0x77
 8004c94:	4393      	bics	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a58      	ldr	r2, [pc, #352]	; (8004dfc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	0192      	lsls	r2, r2, #6
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d040      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0xde>
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	0192      	lsls	r2, r2, #6
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d900      	bls.n	8004cbe <HAL_TIM_ConfigClockSource+0x66>
 8004cbc:	e088      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	0152      	lsls	r2, r2, #5
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d100      	bne.n	8004cc8 <HAL_TIM_ConfigClockSource+0x70>
 8004cc6:	e088      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x182>
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	0152      	lsls	r2, r2, #5
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d900      	bls.n	8004cd2 <HAL_TIM_ConfigClockSource+0x7a>
 8004cd0:	e07e      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cd2:	2b70      	cmp	r3, #112	; 0x70
 8004cd4:	d018      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0xb0>
 8004cd6:	d900      	bls.n	8004cda <HAL_TIM_ConfigClockSource+0x82>
 8004cd8:	e07a      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cda:	2b60      	cmp	r3, #96	; 0x60
 8004cdc:	d04f      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x126>
 8004cde:	d900      	bls.n	8004ce2 <HAL_TIM_ConfigClockSource+0x8a>
 8004ce0:	e076      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004ce2:	2b50      	cmp	r3, #80	; 0x50
 8004ce4:	d03b      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x106>
 8004ce6:	d900      	bls.n	8004cea <HAL_TIM_ConfigClockSource+0x92>
 8004ce8:	e072      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d057      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x146>
 8004cee:	d900      	bls.n	8004cf2 <HAL_TIM_ConfigClockSource+0x9a>
 8004cf0:	e06e      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cf2:	2b30      	cmp	r3, #48	; 0x30
 8004cf4:	d063      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x166>
 8004cf6:	d86b      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d060      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x166>
 8004cfc:	d868      	bhi.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d05d      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x166>
 8004d02:	2b10      	cmp	r3, #16
 8004d04:	d05b      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x166>
 8004d06:	e063      	b.n	8004dd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f000 fb7e 	bl	8005418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2277      	movs	r2, #119	; 0x77
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]
      break;
 8004d34:	e052      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6899      	ldr	r1, [r3, #8]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f000 fb67 	bl	8005418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2180      	movs	r1, #128	; 0x80
 8004d56:	01c9      	lsls	r1, r1, #7
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
      break;
 8004d5c:	e03e      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	f000 fada 	bl	8005324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2150      	movs	r1, #80	; 0x50
 8004d76:	0018      	movs	r0, r3
 8004d78:	f000 fb34 	bl	80053e4 <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e02e      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	f000 faf8 	bl	8005380 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2160      	movs	r1, #96	; 0x60
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 fb24 	bl	80053e4 <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e01e      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	001a      	movs	r2, r3
 8004dac:	f000 faba 	bl	8005324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2140      	movs	r1, #64	; 0x40
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fb14 	bl	80053e4 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e00e      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	0010      	movs	r0, r2
 8004dca:	f000 fb0b 	bl	80053e4 <TIM_ITRx_SetConfig>
      break;
 8004dce:	e005      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	701a      	strb	r2, [r3, #0]
      break;
 8004dd8:	e000      	b.n	8004ddc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004dda:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	223d      	movs	r2, #61	; 0x3d
 8004de0:	2101      	movs	r1, #1
 8004de2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	223c      	movs	r2, #60	; 0x3c
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]

  return status;
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	781b      	ldrb	r3, [r3, #0]
}
 8004df2:	0018      	movs	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	ffff00ff 	.word	0xffff00ff

08004e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <TIM_Base_SetConfig+0xd0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x20>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <TIM_Base_SetConfig+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2270      	movs	r2, #112	; 0x70
 8004e64:	4393      	bics	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <TIM_Base_SetConfig+0xd0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0x62>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <TIM_Base_SetConfig+0xd4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0x62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a24      	ldr	r2, [pc, #144]	; (8004f18 <TIM_Base_SetConfig+0xd8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x62>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a23      	ldr	r2, [pc, #140]	; (8004f1c <TIM_Base_SetConfig+0xdc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0x62>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <TIM_Base_SetConfig+0xe0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0x62>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <TIM_Base_SetConfig+0xe4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a20      	ldr	r2, [pc, #128]	; (8004f28 <TIM_Base_SetConfig+0xe8>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	4393      	bics	r3, r2
 8004eba:	001a      	movs	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0c      	ldr	r2, [pc, #48]	; (8004f10 <TIM_Base_SetConfig+0xd0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0xba>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <TIM_Base_SetConfig+0xdc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0xba>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <TIM_Base_SetConfig+0xe0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0xba>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a0b      	ldr	r2, [pc, #44]	; (8004f24 <TIM_Base_SetConfig+0xe4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d103      	bne.n	8004f02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	615a      	str	r2, [r3, #20]
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40002000 	.word	0x40002000
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	40014400 	.word	0x40014400
 8004f24:	40014800 	.word	0x40014800
 8004f28:	fffffcff 	.word	0xfffffcff

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4393      	bics	r3, r2
 8004f3e:	001a      	movs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2270      	movs	r2, #112	; 0x70
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2203      	movs	r2, #3
 8004f62:	4393      	bics	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2202      	movs	r2, #2
 8004f74:	4393      	bics	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <TIM_OC1_SetConfig+0xf8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_OC1_SetConfig+0x76>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a26      	ldr	r2, [pc, #152]	; (8005028 <TIM_OC1_SetConfig+0xfc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_OC1_SetConfig+0x76>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <TIM_OC1_SetConfig+0x100>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_OC1_SetConfig+0x76>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a24      	ldr	r2, [pc, #144]	; (8005030 <TIM_OC1_SetConfig+0x104>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10c      	bne.n	8004fbc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4393      	bics	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	4393      	bics	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a19      	ldr	r2, [pc, #100]	; (8005024 <TIM_OC1_SetConfig+0xf8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <TIM_OC1_SetConfig+0xb0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a18      	ldr	r2, [pc, #96]	; (8005028 <TIM_OC1_SetConfig+0xfc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <TIM_OC1_SetConfig+0xb0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a17      	ldr	r2, [pc, #92]	; (800502c <TIM_OC1_SetConfig+0x100>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_OC1_SetConfig+0xb0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <TIM_OC1_SetConfig+0x104>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d111      	bne.n	8005000 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	4a15      	ldr	r2, [pc, #84]	; (8005034 <TIM_OC1_SetConfig+0x108>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <TIM_OC1_SetConfig+0x10c>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b006      	add	sp, #24
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800
 8005034:	fffffeff 	.word	0xfffffeff
 8005038:	fffffdff 	.word	0xfffffdff

0800503c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	2210      	movs	r2, #16
 800504c:	4393      	bics	r3, r2
 800504e:	001a      	movs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a2e      	ldr	r2, [pc, #184]	; (8005124 <TIM_OC2_SetConfig+0xe8>)
 800506a:	4013      	ands	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <TIM_OC2_SetConfig+0xec>)
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2220      	movs	r2, #32
 8005086:	4393      	bics	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a24      	ldr	r2, [pc, #144]	; (800512c <TIM_OC2_SetConfig+0xf0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10d      	bne.n	80050ba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2280      	movs	r2, #128	; 0x80
 80050a2:	4393      	bics	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	4393      	bics	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <TIM_OC2_SetConfig+0xf0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00b      	beq.n	80050da <TIM_OC2_SetConfig+0x9e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <TIM_OC2_SetConfig+0xf4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d007      	beq.n	80050da <TIM_OC2_SetConfig+0x9e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <TIM_OC2_SetConfig+0xf8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d003      	beq.n	80050da <TIM_OC2_SetConfig+0x9e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <TIM_OC2_SetConfig+0xfc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <TIM_OC2_SetConfig+0x100>)
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <TIM_OC2_SetConfig+0x104>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	46bd      	mov	sp, r7
 8005120:	b006      	add	sp, #24
 8005122:	bd80      	pop	{r7, pc}
 8005124:	ffff8fff 	.word	0xffff8fff
 8005128:	fffffcff 	.word	0xfffffcff
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800
 800513c:	fffffbff 	.word	0xfffffbff
 8005140:	fffff7ff 	.word	0xfffff7ff

08005144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	4a35      	ldr	r2, [pc, #212]	; (8005228 <TIM_OC3_SetConfig+0xe4>)
 8005154:	401a      	ands	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2270      	movs	r2, #112	; 0x70
 8005170:	4393      	bics	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2203      	movs	r2, #3
 8005178:	4393      	bics	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4a28      	ldr	r2, [pc, #160]	; (800522c <TIM_OC3_SetConfig+0xe8>)
 800518a:	4013      	ands	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a24      	ldr	r2, [pc, #144]	; (8005230 <TIM_OC3_SetConfig+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d10d      	bne.n	80051be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <TIM_OC3_SetConfig+0xf0>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <TIM_OC3_SetConfig+0xf4>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a1b      	ldr	r2, [pc, #108]	; (8005230 <TIM_OC3_SetConfig+0xec>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00b      	beq.n	80051de <TIM_OC3_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <TIM_OC3_SetConfig+0xf8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d007      	beq.n	80051de <TIM_OC3_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <TIM_OC3_SetConfig+0xfc>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_OC3_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <TIM_OC3_SetConfig+0x100>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d113      	bne.n	8005206 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <TIM_OC3_SetConfig+0x104>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4a18      	ldr	r2, [pc, #96]	; (800524c <TIM_OC3_SetConfig+0x108>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	621a      	str	r2, [r3, #32]
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b006      	add	sp, #24
 8005226:	bd80      	pop	{r7, pc}
 8005228:	fffffeff 	.word	0xfffffeff
 800522c:	fffffdff 	.word	0xfffffdff
 8005230:	40012c00 	.word	0x40012c00
 8005234:	fffff7ff 	.word	0xfffff7ff
 8005238:	fffffbff 	.word	0xfffffbff
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800
 8005248:	ffffefff 	.word	0xffffefff
 800524c:	ffffdfff 	.word	0xffffdfff

08005250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4a28      	ldr	r2, [pc, #160]	; (8005300 <TIM_OC4_SetConfig+0xb0>)
 8005260:	401a      	ands	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a22      	ldr	r2, [pc, #136]	; (8005304 <TIM_OC4_SetConfig+0xb4>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4a21      	ldr	r2, [pc, #132]	; (8005308 <TIM_OC4_SetConfig+0xb8>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <TIM_OC4_SetConfig+0xbc>)
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <TIM_OC4_SetConfig+0xc0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00b      	beq.n	80052c8 <TIM_OC4_SetConfig+0x78>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <TIM_OC4_SetConfig+0xc4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_OC4_SetConfig+0x78>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <TIM_OC4_SetConfig+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC4_SetConfig+0x78>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a16      	ldr	r2, [pc, #88]	; (800531c <TIM_OC4_SetConfig+0xcc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d109      	bne.n	80052dc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <TIM_OC4_SetConfig+0xd0>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	019b      	lsls	r3, r3, #6
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b006      	add	sp, #24
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	ffffefff 	.word	0xffffefff
 8005304:	ffff8fff 	.word	0xffff8fff
 8005308:	fffffcff 	.word	0xfffffcff
 800530c:	ffffdfff 	.word	0xffffdfff
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	ffffbfff 	.word	0xffffbfff

08005324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	2201      	movs	r2, #1
 800533c:	4393      	bics	r3, r2
 800533e:	001a      	movs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	22f0      	movs	r2, #240	; 0xf0
 800534e:	4393      	bics	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	220a      	movs	r2, #10
 8005360:	4393      	bics	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}

08005380 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	2210      	movs	r2, #16
 8005392:	4393      	bics	r3, r2
 8005394:	001a      	movs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <TIM_TI2_ConfigInputStage+0x60>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	031b      	lsls	r3, r3, #12
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	22a0      	movs	r2, #160	; 0xa0
 80053bc:	4393      	bics	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	46bd      	mov	sp, r7
 80053da:	b006      	add	sp, #24
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	ffff0fff 	.word	0xffff0fff

080053e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2270      	movs	r2, #112	; 0x70
 80053f8:	4393      	bics	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	2207      	movs	r2, #7
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	46bd      	mov	sp, r7
 8005412:	b004      	add	sp, #16
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <TIM_ETR_SetConfig+0x3c>)
 8005430:	4013      	ands	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b006      	add	sp, #24
 8005452:	bd80      	pop	{r7, pc}
 8005454:	ffff00ff 	.word	0xffff00ff

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	223c      	movs	r2, #60	; 0x3c
 8005466:	5c9b      	ldrb	r3, [r3, r2]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e041      	b.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	223c      	movs	r2, #60	; 0x3c
 8005474:	2101      	movs	r1, #1
 8005476:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	223d      	movs	r2, #61	; 0x3d
 800547c:	2102      	movs	r1, #2
 800547e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2270      	movs	r2, #112	; 0x70
 8005494:	4393      	bics	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a11      	ldr	r2, [pc, #68]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d004      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10c      	bne.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	4393      	bics	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	223d      	movs	r2, #61	; 0x3d
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	223c      	movs	r2, #60	; 0x3c
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b004      	add	sp, #16
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40014000 	.word	0x40014000

08005508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e044      	b.n	80055c4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2274      	movs	r2, #116	; 0x74
 8005546:	2100      	movs	r1, #0
 8005548:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f7fc fc53 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2224      	movs	r2, #36	; 0x24
 8005556:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2101      	movs	r1, #1
 8005564:	438a      	bics	r2, r1
 8005566:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f000 fb84 	bl	8005c78 <UART_SetConfig>
 8005570:	0003      	movs	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e024      	b.n	80055c4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	0018      	movs	r0, r3
 8005586:	f000 fccf 	bl	8005f28 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	490d      	ldr	r1, [pc, #52]	; (80055cc <HAL_UART_Init+0xa4>)
 8005596:	400a      	ands	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2108      	movs	r1, #8
 80055a6:	438a      	bics	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2101      	movs	r1, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	0018      	movs	r0, r3
 80055be:	f000 fd67 	bl	8006090 <UART_CheckIdleState>
 80055c2:	0003      	movs	r3, r0
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b002      	add	sp, #8
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	fffff7ff 	.word	0xfffff7ff

080055d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	1dbb      	adds	r3, r7, #6
 80055dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d000      	beq.n	80055e8 <HAL_UART_Transmit_IT+0x18>
 80055e6:	e06a      	b.n	80056be <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_UART_Transmit_IT+0x26>
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e062      	b.n	80056c0 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	015b      	lsls	r3, r3, #5
 8005602:	429a      	cmp	r2, r3
 8005604:	d109      	bne.n	800561a <HAL_UART_Transmit_IT+0x4a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d105      	bne.n	800561a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2201      	movs	r2, #1
 8005612:	4013      	ands	r3, r2
 8005614:	d001      	beq.n	800561a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e052      	b.n	80056c0 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2274      	movs	r2, #116	; 0x74
 800561e:	5c9b      	ldrb	r3, [r3, r2]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UART_Transmit_IT+0x58>
 8005624:	2302      	movs	r3, #2
 8005626:	e04b      	b.n	80056c0 <HAL_UART_Transmit_IT+0xf0>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2274      	movs	r2, #116	; 0x74
 800562c:	2101      	movs	r1, #1
 800562e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1dba      	adds	r2, r7, #6
 800563a:	2150      	movs	r1, #80	; 0x50
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1dba      	adds	r2, r7, #6
 8005644:	2152      	movs	r1, #82	; 0x52
 8005646:	8812      	ldrh	r2, [r2, #0]
 8005648:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	2100      	movs	r1, #0
 8005656:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2221      	movs	r2, #33	; 0x21
 800565c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	2380      	movs	r3, #128	; 0x80
 8005664:	015b      	lsls	r3, r3, #5
 8005666:	429a      	cmp	r2, r3
 8005668:	d107      	bne.n	800567a <HAL_UART_Transmit_IT+0xaa>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <HAL_UART_Transmit_IT+0xf8>)
 8005676:	669a      	str	r2, [r3, #104]	; 0x68
 8005678:	e002      	b.n	8005680 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a13      	ldr	r2, [pc, #76]	; (80056cc <HAL_UART_Transmit_IT+0xfc>)
 800567e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2274      	movs	r2, #116	; 0x74
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	613b      	str	r3, [r7, #16]
  return(result);
 800568e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	2301      	movs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f383 8810 	msr	PRIMASK, r3
}
 80056b8:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b008      	add	sp, #32
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	0800644f 	.word	0x0800644f
 80056cc:	0800639b 	.word	0x0800639b

080056d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b0ab      	sub	sp, #172	; 0xac
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	22a4      	movs	r2, #164	; 0xa4
 80056e0:	18b9      	adds	r1, r7, r2
 80056e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	20a0      	movs	r0, #160	; 0xa0
 80056ec:	1839      	adds	r1, r7, r0
 80056ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	219c      	movs	r1, #156	; 0x9c
 80056f8:	1879      	adds	r1, r7, r1
 80056fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056fc:	0011      	movs	r1, r2
 80056fe:	18bb      	adds	r3, r7, r2
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a99      	ldr	r2, [pc, #612]	; (8005968 <HAL_UART_IRQHandler+0x298>)
 8005704:	4013      	ands	r3, r2
 8005706:	2298      	movs	r2, #152	; 0x98
 8005708:	18bc      	adds	r4, r7, r2
 800570a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800570c:	18bb      	adds	r3, r7, r2
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d114      	bne.n	800573e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005714:	187b      	adds	r3, r7, r1
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2220      	movs	r2, #32
 800571a:	4013      	ands	r3, r2
 800571c:	d00f      	beq.n	800573e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800571e:	183b      	adds	r3, r7, r0
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	d00a      	beq.n	800573e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572c:	2b00      	cmp	r3, #0
 800572e:	d100      	bne.n	8005732 <HAL_UART_IRQHandler+0x62>
 8005730:	e27e      	b.n	8005c30 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	0010      	movs	r0, r2
 800573a:	4798      	blx	r3
      }
      return;
 800573c:	e278      	b.n	8005c30 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800573e:	2398      	movs	r3, #152	; 0x98
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d100      	bne.n	800574a <HAL_UART_IRQHandler+0x7a>
 8005748:	e114      	b.n	8005974 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800574a:	239c      	movs	r3, #156	; 0x9c
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	4013      	ands	r3, r2
 8005754:	d106      	bne.n	8005764 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005756:	23a0      	movs	r3, #160	; 0xa0
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a83      	ldr	r2, [pc, #524]	; (800596c <HAL_UART_IRQHandler+0x29c>)
 800575e:	4013      	ands	r3, r2
 8005760:	d100      	bne.n	8005764 <HAL_UART_IRQHandler+0x94>
 8005762:	e107      	b.n	8005974 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005764:	23a4      	movs	r3, #164	; 0xa4
 8005766:	18fb      	adds	r3, r7, r3
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	d012      	beq.n	8005796 <HAL_UART_IRQHandler+0xc6>
 8005770:	23a0      	movs	r3, #160	; 0xa0
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4013      	ands	r3, r2
 800577c:	d00b      	beq.n	8005796 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2280      	movs	r2, #128	; 0x80
 800578a:	589b      	ldr	r3, [r3, r2]
 800578c:	2201      	movs	r2, #1
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005796:	23a4      	movs	r3, #164	; 0xa4
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2202      	movs	r2, #2
 800579e:	4013      	ands	r3, r2
 80057a0:	d011      	beq.n	80057c6 <HAL_UART_IRQHandler+0xf6>
 80057a2:	239c      	movs	r3, #156	; 0x9c
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2201      	movs	r2, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2202      	movs	r2, #2
 80057b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	589b      	ldr	r3, [r3, r2]
 80057bc:	2204      	movs	r2, #4
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2180      	movs	r1, #128	; 0x80
 80057c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c6:	23a4      	movs	r3, #164	; 0xa4
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2204      	movs	r2, #4
 80057ce:	4013      	ands	r3, r2
 80057d0:	d011      	beq.n	80057f6 <HAL_UART_IRQHandler+0x126>
 80057d2:	239c      	movs	r3, #156	; 0x9c
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2201      	movs	r2, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2204      	movs	r2, #4
 80057e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	589b      	ldr	r3, [r3, r2]
 80057ec:	2202      	movs	r2, #2
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2180      	movs	r1, #128	; 0x80
 80057f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057f6:	23a4      	movs	r3, #164	; 0xa4
 80057f8:	18fb      	adds	r3, r7, r3
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	4013      	ands	r3, r2
 8005800:	d017      	beq.n	8005832 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005802:	23a0      	movs	r3, #160	; 0xa0
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2220      	movs	r2, #32
 800580a:	4013      	ands	r3, r2
 800580c:	d105      	bne.n	800581a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800580e:	239c      	movs	r3, #156	; 0x9c
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2201      	movs	r2, #1
 8005816:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005818:	d00b      	beq.n	8005832 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2208      	movs	r2, #8
 8005820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2280      	movs	r2, #128	; 0x80
 8005826:	589b      	ldr	r3, [r3, r2]
 8005828:	2208      	movs	r2, #8
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005832:	23a4      	movs	r3, #164	; 0xa4
 8005834:	18fb      	adds	r3, r7, r3
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4013      	ands	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_UART_IRQHandler+0x198>
 8005840:	23a0      	movs	r3, #160	; 0xa0
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	04db      	lsls	r3, r3, #19
 800584a:	4013      	ands	r3, r2
 800584c:	d00c      	beq.n	8005868 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2280      	movs	r2, #128	; 0x80
 8005854:	0112      	lsls	r2, r2, #4
 8005856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2280      	movs	r2, #128	; 0x80
 800585c:	589b      	ldr	r3, [r3, r2]
 800585e:	2220      	movs	r2, #32
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2180      	movs	r1, #128	; 0x80
 8005866:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	589b      	ldr	r3, [r3, r2]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <HAL_UART_IRQHandler+0x1a4>
 8005872:	e1df      	b.n	8005c34 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005874:	23a4      	movs	r3, #164	; 0xa4
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2220      	movs	r2, #32
 800587c:	4013      	ands	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005880:	23a0      	movs	r3, #160	; 0xa0
 8005882:	18fb      	adds	r3, r7, r3
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2220      	movs	r2, #32
 8005888:	4013      	ands	r3, r2
 800588a:	d008      	beq.n	800589e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	0010      	movs	r0, r2
 800589c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2280      	movs	r2, #128	; 0x80
 80058a2:	589b      	ldr	r3, [r3, r2]
 80058a4:	2194      	movs	r1, #148	; 0x94
 80058a6:	187a      	adds	r2, r7, r1
 80058a8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2240      	movs	r2, #64	; 0x40
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d004      	beq.n	80058c2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058b8:	187b      	adds	r3, r7, r1
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2228      	movs	r2, #40	; 0x28
 80058be:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058c0:	d047      	beq.n	8005952 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fcef 	bl	80062a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2240      	movs	r2, #64	; 0x40
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b40      	cmp	r3, #64	; 0x40
 80058d6:	d137      	bne.n	8005948 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8310 	mrs	r3, PRIMASK
 80058dc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80058de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e0:	2090      	movs	r0, #144	; 0x90
 80058e2:	183a      	adds	r2, r7, r0
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2140      	movs	r1, #64	; 0x40
 80058fe:	438a      	bics	r2, r1
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	183b      	adds	r3, r7, r0
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <HAL_UART_IRQHandler+0x2a0>)
 800591e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	0018      	movs	r0, r3
 8005926:	f7fc ff22 	bl	800276e <HAL_DMA_Abort_IT>
 800592a:	1e03      	subs	r3, r0, #0
 800592c:	d01a      	beq.n	8005964 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005938:	0018      	movs	r0, r3
 800593a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	e012      	b.n	8005964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f000 f985 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005946:	e00d      	b.n	8005964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	0018      	movs	r0, r3
 800594c:	f000 f980 	bl	8005c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e008      	b.n	8005964 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f000 f97b 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2280      	movs	r2, #128	; 0x80
 800595e:	2100      	movs	r1, #0
 8005960:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005962:	e167      	b.n	8005c34 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	46c0      	nop			; (mov r8, r8)
    return;
 8005966:	e165      	b.n	8005c34 <HAL_UART_IRQHandler+0x564>
 8005968:	0000080f 	.word	0x0000080f
 800596c:	04000120 	.word	0x04000120
 8005970:	0800636d 	.word	0x0800636d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005978:	2b01      	cmp	r3, #1
 800597a:	d000      	beq.n	800597e <HAL_UART_IRQHandler+0x2ae>
 800597c:	e131      	b.n	8005be2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800597e:	23a4      	movs	r3, #164	; 0xa4
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2210      	movs	r2, #16
 8005986:	4013      	ands	r3, r2
 8005988:	d100      	bne.n	800598c <HAL_UART_IRQHandler+0x2bc>
 800598a:	e12a      	b.n	8005be2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800598c:	23a0      	movs	r3, #160	; 0xa0
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2210      	movs	r2, #16
 8005994:	4013      	ands	r3, r2
 8005996:	d100      	bne.n	800599a <HAL_UART_IRQHandler+0x2ca>
 8005998:	e123      	b.n	8005be2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2210      	movs	r2, #16
 80059a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d000      	beq.n	80059b2 <HAL_UART_IRQHandler+0x2e2>
 80059b0:	e09b      	b.n	8005aea <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	217e      	movs	r1, #126	; 0x7e
 80059bc:	187b      	adds	r3, r7, r1
 80059be:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d100      	bne.n	80059ca <HAL_UART_IRQHandler+0x2fa>
 80059c8:	e136      	b.n	8005c38 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2258      	movs	r2, #88	; 0x58
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	187a      	adds	r2, r7, r1
 80059d2:	8812      	ldrh	r2, [r2, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d300      	bcc.n	80059da <HAL_UART_IRQHandler+0x30a>
 80059d8:	e12e      	b.n	8005c38 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	187a      	adds	r2, r7, r1
 80059de:	215a      	movs	r1, #90	; 0x5a
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d06e      	beq.n	8005acc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ee:	f3ef 8310 	mrs	r3, PRIMASK
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f8:	2301      	movs	r3, #1
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	498e      	ldr	r1, [pc, #568]	; (8005c48 <HAL_UART_IRQHandler+0x578>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a20:	f3ef 8310 	mrs	r3, PRIMASK
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	677b      	str	r3, [r7, #116]	; 0x74
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a30:	f383 8810 	msr	PRIMASK, r3
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2101      	movs	r1, #1
 8005a42:	438a      	bics	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
 8005a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4c:	f383 8810 	msr	PRIMASK, r3
}
 8005a50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2140      	movs	r1, #64	; 0x40
 8005a74:	438a      	bics	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a90:	f3ef 8310 	mrs	r3, PRIMASK
 8005a94:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa0:	f383 8810 	msr	PRIMASK, r3
}
 8005aa4:	46c0      	nop			; (mov r8, r8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2110      	movs	r1, #16
 8005ab2:	438a      	bics	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005abc:	f383 8810 	msr	PRIMASK, r3
}
 8005ac0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7fc fe19 	bl	80026fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2258      	movs	r2, #88	; 0x58
 8005ad0:	5a9a      	ldrh	r2, [r3, r2]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	215a      	movs	r1, #90	; 0x5a
 8005ad6:	5a5b      	ldrh	r3, [r3, r1]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0011      	movs	r1, r2
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 f8bc 	bl	8005c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ae8:	e0a6      	b.n	8005c38 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2258      	movs	r2, #88	; 0x58
 8005aee:	5a99      	ldrh	r1, [r3, r2]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	225a      	movs	r2, #90	; 0x5a
 8005af4:	5a9b      	ldrh	r3, [r3, r2]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	208e      	movs	r0, #142	; 0x8e
 8005afa:	183b      	adds	r3, r7, r0
 8005afc:	1a8a      	subs	r2, r1, r2
 8005afe:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	225a      	movs	r2, #90	; 0x5a
 8005b04:	5a9b      	ldrh	r3, [r3, r2]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d100      	bne.n	8005b0e <HAL_UART_IRQHandler+0x43e>
 8005b0c:	e096      	b.n	8005c3c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d100      	bne.n	8005b18 <HAL_UART_IRQHandler+0x448>
 8005b16:	e091      	b.n	8005c3c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b20:	2488      	movs	r4, #136	; 0x88
 8005b22:	193a      	adds	r2, r7, r4
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	2301      	movs	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f383 8810 	msr	PRIMASK, r3
}
 8005b30:	46c0      	nop			; (mov r8, r8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4943      	ldr	r1, [pc, #268]	; (8005c4c <HAL_UART_IRQHandler+0x57c>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f383 8810 	msr	PRIMASK, r3
}
 8005b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b56:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	2484      	movs	r4, #132	; 0x84
 8005b5a:	193a      	adds	r2, r7, r4
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	2301      	movs	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			; (mov r8, r8)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2101      	movs	r1, #1
 8005b76:	438a      	bics	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	193b      	adds	r3, r7, r4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f383 8810 	msr	PRIMASK, r3
}
 8005b86:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba2:	2480      	movs	r4, #128	; 0x80
 8005ba4:	193a      	adds	r2, r7, r4
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	2301      	movs	r3, #1
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2110      	movs	r1, #16
 8005bc0:	438a      	bics	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	193b      	adds	r3, r7, r4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	f383 8810 	msr	PRIMASK, r3
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd2:	183b      	adds	r3, r7, r0
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0011      	movs	r1, r2
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f000 f840 	bl	8005c60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be0:	e02c      	b.n	8005c3c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005be2:	23a4      	movs	r3, #164	; 0xa4
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2280      	movs	r2, #128	; 0x80
 8005bea:	4013      	ands	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bee:	23a0      	movs	r3, #160	; 0xa0
 8005bf0:	18fb      	adds	r3, r7, r3
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01e      	beq.n	8005c40 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	0010      	movs	r0, r2
 8005c0a:	4798      	blx	r3
    }
    return;
 8005c0c:	e018      	b.n	8005c40 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c0e:	23a4      	movs	r3, #164	; 0xa4
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2240      	movs	r2, #64	; 0x40
 8005c16:	4013      	ands	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_UART_IRQHandler+0x572>
 8005c1a:	23a0      	movs	r3, #160	; 0xa0
 8005c1c:	18fb      	adds	r3, r7, r3
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	4013      	ands	r3, r2
 8005c24:	d00d      	beq.n	8005c42 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 fc6e 	bl	800650a <UART_EndTransmit_IT>
    return;
 8005c2e:	e008      	b.n	8005c42 <HAL_UART_IRQHandler+0x572>
      return;
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	e006      	b.n	8005c42 <HAL_UART_IRQHandler+0x572>
    return;
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	e004      	b.n	8005c42 <HAL_UART_IRQHandler+0x572>
      return;
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	e002      	b.n	8005c42 <HAL_UART_IRQHandler+0x572>
      return;
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	e000      	b.n	8005c42 <HAL_UART_IRQHandler+0x572>
    return;
 8005c40:	46c0      	nop			; (mov r8, r8)
  }

}
 8005c42:	46bd      	mov	sp, r7
 8005c44:	b02b      	add	sp, #172	; 0xac
 8005c46:	bd90      	pop	{r4, r7, pc}
 8005c48:	fffffeff 	.word	0xfffffeff
 8005c4c:	fffffedf 	.word	0xfffffedf

08005c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c58:	46c0      	nop			; (mov r8, r8)
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b002      	add	sp, #8
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	000a      	movs	r2, r1
 8005c6a:	1cbb      	adds	r3, r7, #2
 8005c6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b002      	add	sp, #8
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c80:	231e      	movs	r3, #30
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a97      	ldr	r2, [pc, #604]	; (8005f04 <UART_SetConfig+0x28c>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a92      	ldr	r2, [pc, #584]	; (8005f08 <UART_SetConfig+0x290>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a89      	ldr	r2, [pc, #548]	; (8005f0c <UART_SetConfig+0x294>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a85      	ldr	r2, [pc, #532]	; (8005f10 <UART_SetConfig+0x298>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d127      	bne.n	8005d4e <UART_SetConfig+0xd6>
 8005cfe:	4b85      	ldr	r3, [pc, #532]	; (8005f14 <UART_SetConfig+0x29c>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	2203      	movs	r2, #3
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d00d      	beq.n	8005d26 <UART_SetConfig+0xae>
 8005d0a:	d81b      	bhi.n	8005d44 <UART_SetConfig+0xcc>
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d014      	beq.n	8005d3a <UART_SetConfig+0xc2>
 8005d10:	d818      	bhi.n	8005d44 <UART_SetConfig+0xcc>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0xa4>
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d00a      	beq.n	8005d30 <UART_SetConfig+0xb8>
 8005d1a:	e013      	b.n	8005d44 <UART_SetConfig+0xcc>
 8005d1c:	231f      	movs	r3, #31
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e035      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d26:	231f      	movs	r3, #31
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e030      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d30:	231f      	movs	r3, #31
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2204      	movs	r2, #4
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e02b      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d3a:	231f      	movs	r3, #31
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	2208      	movs	r2, #8
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e026      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d44:	231f      	movs	r3, #31
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2210      	movs	r2, #16
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e021      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a71      	ldr	r2, [pc, #452]	; (8005f18 <UART_SetConfig+0x2a0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0xea>
 8005d58:	231f      	movs	r3, #31
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	e017      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a6d      	ldr	r2, [pc, #436]	; (8005f1c <UART_SetConfig+0x2a4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d104      	bne.n	8005d76 <UART_SetConfig+0xfe>
 8005d6c:	231f      	movs	r3, #31
 8005d6e:	18fb      	adds	r3, r7, r3
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a69      	ldr	r2, [pc, #420]	; (8005f20 <UART_SetConfig+0x2a8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d104      	bne.n	8005d8a <UART_SetConfig+0x112>
 8005d80:	231f      	movs	r3, #31
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e003      	b.n	8005d92 <UART_SetConfig+0x11a>
 8005d8a:	231f      	movs	r3, #31
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2210      	movs	r2, #16
 8005d90:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d15d      	bne.n	8005e5a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8005d9e:	231f      	movs	r3, #31
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d015      	beq.n	8005dd4 <UART_SetConfig+0x15c>
 8005da8:	dc18      	bgt.n	8005ddc <UART_SetConfig+0x164>
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d00d      	beq.n	8005dca <UART_SetConfig+0x152>
 8005dae:	dc15      	bgt.n	8005ddc <UART_SetConfig+0x164>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <UART_SetConfig+0x142>
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d005      	beq.n	8005dc4 <UART_SetConfig+0x14c>
 8005db8:	e010      	b.n	8005ddc <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fd fc51 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	61bb      	str	r3, [r7, #24]
        break;
 8005dc2:	e012      	b.n	8005dea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc4:	4b57      	ldr	r3, [pc, #348]	; (8005f24 <UART_SetConfig+0x2ac>)
 8005dc6:	61bb      	str	r3, [r7, #24]
        break;
 8005dc8:	e00f      	b.n	8005dea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dca:	f7fd fbd9 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	61bb      	str	r3, [r7, #24]
        break;
 8005dd2:	e00a      	b.n	8005dea <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	61bb      	str	r3, [r7, #24]
        break;
 8005dda:	e006      	b.n	8005dea <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005de0:	231e      	movs	r3, #30
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
        break;
 8005de8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d100      	bne.n	8005df2 <UART_SetConfig+0x17a>
 8005df0:	e07b      	b.n	8005eea <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	005a      	lsls	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	18d2      	adds	r2, r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	0019      	movs	r1, r3
 8005e04:	0010      	movs	r0, r2
 8005e06:	f7fa f989 	bl	800011c <__udivsi3>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b0f      	cmp	r3, #15
 8005e14:	d91c      	bls.n	8005e50 <UART_SetConfig+0x1d8>
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	2380      	movs	r3, #128	; 0x80
 8005e1a:	025b      	lsls	r3, r3, #9
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d217      	bcs.n	8005e50 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	200e      	movs	r0, #14
 8005e26:	183b      	adds	r3, r7, r0
 8005e28:	210f      	movs	r1, #15
 8005e2a:	438a      	bics	r2, r1
 8005e2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	085b      	lsrs	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2207      	movs	r2, #7
 8005e36:	4013      	ands	r3, r2
 8005e38:	b299      	uxth	r1, r3
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	183a      	adds	r2, r7, r0
 8005e3e:	8812      	ldrh	r2, [r2, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	183a      	adds	r2, r7, r0
 8005e4a:	8812      	ldrh	r2, [r2, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	e04c      	b.n	8005eea <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8005e50:	231e      	movs	r3, #30
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	2201      	movs	r2, #1
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e047      	b.n	8005eea <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e5a:	231f      	movs	r3, #31
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d015      	beq.n	8005e90 <UART_SetConfig+0x218>
 8005e64:	dc18      	bgt.n	8005e98 <UART_SetConfig+0x220>
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d00d      	beq.n	8005e86 <UART_SetConfig+0x20e>
 8005e6a:	dc15      	bgt.n	8005e98 <UART_SetConfig+0x220>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <UART_SetConfig+0x1fe>
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d005      	beq.n	8005e80 <UART_SetConfig+0x208>
 8005e74:	e010      	b.n	8005e98 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e76:	f7fd fbf3 	bl	8003660 <HAL_RCC_GetPCLK1Freq>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	61bb      	str	r3, [r7, #24]
        break;
 8005e7e:	e012      	b.n	8005ea6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <UART_SetConfig+0x2ac>)
 8005e82:	61bb      	str	r3, [r7, #24]
        break;
 8005e84:	e00f      	b.n	8005ea6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e86:	f7fd fb7b 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	61bb      	str	r3, [r7, #24]
        break;
 8005e8e:	e00a      	b.n	8005ea6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	61bb      	str	r3, [r7, #24]
        break;
 8005e96:	e006      	b.n	8005ea6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e9c:	231e      	movs	r3, #30
 8005e9e:	18fb      	adds	r3, r7, r3
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	701a      	strb	r2, [r3, #0]
        break;
 8005ea4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01e      	beq.n	8005eea <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	085a      	lsrs	r2, r3, #1
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	18d2      	adds	r2, r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	0010      	movs	r0, r2
 8005ebe:	f7fa f92d 	bl	800011c <__udivsi3>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d909      	bls.n	8005ee2 <UART_SetConfig+0x26a>
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	025b      	lsls	r3, r3, #9
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d204      	bcs.n	8005ee2 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e003      	b.n	8005eea <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee2:	231e      	movs	r3, #30
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ef6:	231e      	movs	r3, #30
 8005ef8:	18fb      	adds	r3, r7, r3
 8005efa:	781b      	ldrb	r3, [r3, #0]
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b008      	add	sp, #32
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	efff69f3 	.word	0xefff69f3
 8005f08:	ffffcfff 	.word	0xffffcfff
 8005f0c:	fffff4ff 	.word	0xfffff4ff
 8005f10:	40013800 	.word	0x40013800
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40004400 	.word	0x40004400
 8005f1c:	40004800 	.word	0x40004800
 8005f20:	40004c00 	.word	0x40004c00
 8005f24:	007a1200 	.word	0x007a1200

08005f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4a4a      	ldr	r2, [pc, #296]	; (800606c <UART_AdvFeatureConfig+0x144>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	0019      	movs	r1, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2202      	movs	r2, #2
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4a43      	ldr	r2, [pc, #268]	; (8006070 <UART_AdvFeatureConfig+0x148>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2204      	movs	r2, #4
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <UART_AdvFeatureConfig+0x14c>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2208      	movs	r2, #8
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d00b      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a34      	ldr	r2, [pc, #208]	; (8006078 <UART_AdvFeatureConfig+0x150>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d00b      	beq.n	8005fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4a2c      	ldr	r2, [pc, #176]	; (800607c <UART_AdvFeatureConfig+0x154>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	0019      	movs	r1, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	2220      	movs	r2, #32
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	4a25      	ldr	r2, [pc, #148]	; (8006080 <UART_AdvFeatureConfig+0x158>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	0019      	movs	r1, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2240      	movs	r2, #64	; 0x40
 8006002:	4013      	ands	r3, r2
 8006004:	d01d      	beq.n	8006042 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <UART_AdvFeatureConfig+0x15c>)
 800600e:	4013      	ands	r3, r2
 8006010:	0019      	movs	r1, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	035b      	lsls	r3, r3, #13
 8006026:	429a      	cmp	r2, r3
 8006028:	d10b      	bne.n	8006042 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4a15      	ldr	r2, [pc, #84]	; (8006088 <UART_AdvFeatureConfig+0x160>)
 8006032:	4013      	ands	r3, r2
 8006034:	0019      	movs	r1, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2280      	movs	r2, #128	; 0x80
 8006048:	4013      	ands	r3, r2
 800604a:	d00b      	beq.n	8006064 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <UART_AdvFeatureConfig+0x164>)
 8006054:	4013      	ands	r3, r2
 8006056:	0019      	movs	r1, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	605a      	str	r2, [r3, #4]
  }
}
 8006064:	46c0      	nop			; (mov r8, r8)
 8006066:	46bd      	mov	sp, r7
 8006068:	b002      	add	sp, #8
 800606a:	bd80      	pop	{r7, pc}
 800606c:	fffdffff 	.word	0xfffdffff
 8006070:	fffeffff 	.word	0xfffeffff
 8006074:	fffbffff 	.word	0xfffbffff
 8006078:	ffff7fff 	.word	0xffff7fff
 800607c:	ffffefff 	.word	0xffffefff
 8006080:	ffffdfff 	.word	0xffffdfff
 8006084:	ffefffff 	.word	0xffefffff
 8006088:	ff9fffff 	.word	0xff9fffff
 800608c:	fff7ffff 	.word	0xfff7ffff

08006090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2280      	movs	r2, #128	; 0x80
 800609c:	2100      	movs	r1, #0
 800609e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a0:	f7fc f840 	bl	8002124 <HAL_GetTick>
 80060a4:	0003      	movs	r3, r0
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2208      	movs	r2, #8
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d10c      	bne.n	80060d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	0391      	lsls	r1, r2, #14
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4a17      	ldr	r2, [pc, #92]	; (800611c <UART_CheckIdleState+0x8c>)
 80060c0:	9200      	str	r2, [sp, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f82c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060c8:	1e03      	subs	r3, r0, #0
 80060ca:	d001      	beq.n	80060d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e021      	b.n	8006114 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2204      	movs	r2, #4
 80060d8:	4013      	ands	r3, r2
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d10c      	bne.n	80060f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	03d1      	lsls	r1, r2, #15
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4a0d      	ldr	r2, [pc, #52]	; (800611c <UART_CheckIdleState+0x8c>)
 80060e8:	9200      	str	r2, [sp, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f000 f818 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060f0:	1e03      	subs	r3, r0, #0
 80060f2:	d001      	beq.n	80060f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e00d      	b.n	8006114 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2274      	movs	r2, #116	; 0x74
 800610e:	2100      	movs	r1, #0
 8006110:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	0018      	movs	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	b004      	add	sp, #16
 800611a:	bd80      	pop	{r7, pc}
 800611c:	01ffffff 	.word	0x01ffffff

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b094      	sub	sp, #80	; 0x50
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	1dfb      	adds	r3, r7, #7
 800612e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e0a3      	b.n	800627a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006134:	3301      	adds	r3, #1
 8006136:	d100      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0x1a>
 8006138:	e09f      	b.n	800627a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fb fff3 	bl	8002124 <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614c:	2b00      	cmp	r3, #0
 800614e:	d13d      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006150:	f3ef 8310 	mrs	r3, PRIMASK
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006156:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	2301      	movs	r3, #1
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	494c      	ldr	r1, [pc, #304]	; (80062a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006172:	400a      	ands	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	f383 8810 	msr	PRIMASK, r3
}
 8006180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006182:	f3ef 8310 	mrs	r3, PRIMASK
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800618a:	643b      	str	r3, [r7, #64]	; 0x40
 800618c:	2301      	movs	r3, #1
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2101      	movs	r1, #1
 80061a4:	438a      	bics	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2274      	movs	r2, #116	; 0x74
 80061c4:	2100      	movs	r1, #0
 80061c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e067      	b.n	800629c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2204      	movs	r2, #4
 80061d4:	4013      	ands	r3, r2
 80061d6:	d050      	beq.n	800627a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69da      	ldr	r2, [r3, #28]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	401a      	ands	r2, r3
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d146      	bne.n	800627a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	0112      	lsls	r2, r2, #4
 80061f4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f6:	f3ef 8310 	mrs	r3, PRIMASK
 80061fa:	613b      	str	r3, [r7, #16]
  return(result);
 80061fc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f383 8810 	msr	PRIMASK, r3
}
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4923      	ldr	r1, [pc, #140]	; (80062a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006218:	400a      	ands	r2, r1
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f383 8810 	msr	PRIMASK, r3
}
 8006226:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006228:	f3ef 8310 	mrs	r3, PRIMASK
 800622c:	61fb      	str	r3, [r7, #28]
  return(result);
 800622e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
 8006232:	2301      	movs	r3, #1
 8006234:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f383 8810 	msr	PRIMASK, r3
}
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2101      	movs	r1, #1
 800624a:	438a      	bics	r2, r1
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	f383 8810 	msr	PRIMASK, r3
}
 8006258:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2280      	movs	r2, #128	; 0x80
 800626a:	2120      	movs	r1, #32
 800626c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2274      	movs	r2, #116	; 0x74
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e010      	b.n	800629c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	425a      	negs	r2, r3
 800628a:	4153      	adcs	r3, r2
 800628c:	b2db      	uxtb	r3, r3
 800628e:	001a      	movs	r2, r3
 8006290:	1dfb      	adds	r3, r7, #7
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d100      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006298:	e74b      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	0018      	movs	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	b014      	add	sp, #80	; 0x50
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	fffffe5f 	.word	0xfffffe5f

080062a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b0:	f3ef 8310 	mrs	r3, PRIMASK
 80062b4:	617b      	str	r3, [r7, #20]
  return(result);
 80062b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	2301      	movs	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f383 8810 	msr	PRIMASK, r3
}
 80062c4:	46c0      	nop			; (mov r8, r8)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4925      	ldr	r1, [pc, #148]	; (8006368 <UART_EndRxTransfer+0xc0>)
 80062d2:	400a      	ands	r2, r1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f383 8810 	msr	PRIMASK, r3
}
 80062e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e2:	f3ef 8310 	mrs	r3, PRIMASK
 80062e6:	623b      	str	r3, [r7, #32]
  return(result);
 80062e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	633b      	str	r3, [r7, #48]	; 0x30
 80062ec:	2301      	movs	r3, #1
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f383 8810 	msr	PRIMASK, r3
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2101      	movs	r1, #1
 8006304:	438a      	bics	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f383 8810 	msr	PRIMASK, r3
}
 8006312:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006318:	2b01      	cmp	r3, #1
 800631a:	d118      	bne.n	800634e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631c:	f3ef 8310 	mrs	r3, PRIMASK
 8006320:	60bb      	str	r3, [r7, #8]
  return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	2301      	movs	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f383 8810 	msr	PRIMASK, r3
}
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2110      	movs	r1, #16
 800633e:	438a      	bics	r2, r1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f383 8810 	msr	PRIMASK, r3
}
 800634c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b00e      	add	sp, #56	; 0x38
 8006366:	bd80      	pop	{r7, pc}
 8006368:	fffffedf 	.word	0xfffffedf

0800636c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	225a      	movs	r2, #90	; 0x5a
 800637e:	2100      	movs	r1, #0
 8006380:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2252      	movs	r2, #82	; 0x52
 8006386:	2100      	movs	r1, #0
 8006388:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	0018      	movs	r0, r3
 800638e:	f7ff fc5f 	bl	8005c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b004      	add	sp, #16
 8006398:	bd80      	pop	{r7, pc}

0800639a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a6:	2b21      	cmp	r3, #33	; 0x21
 80063a8:	d14d      	bne.n	8006446 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2252      	movs	r2, #82	; 0x52
 80063ae:	5a9b      	ldrh	r3, [r3, r2]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d132      	bne.n	800641c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80063bc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
 80063c0:	2301      	movs	r3, #1
 80063c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f383 8810 	msr	PRIMASK, r3
}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2180      	movs	r1, #128	; 0x80
 80063d8:	438a      	bics	r2, r1
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f383 8810 	msr	PRIMASK, r3
}
 80063e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063e8:	f3ef 8310 	mrs	r3, PRIMASK
 80063ec:	617b      	str	r3, [r7, #20]
  return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	2301      	movs	r3, #1
 80063f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f383 8810 	msr	PRIMASK, r3
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	430a      	orrs	r2, r1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f383 8810 	msr	PRIMASK, r3
}
 8006418:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800641a:	e014      	b.n	8006446 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b292      	uxth	r2, r2
 8006428:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2252      	movs	r2, #82	; 0x52
 8006438:	5a9b      	ldrh	r3, [r3, r2]
 800643a:	b29b      	uxth	r3, r3
 800643c:	3b01      	subs	r3, #1
 800643e:	b299      	uxth	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2252      	movs	r2, #82	; 0x52
 8006444:	5299      	strh	r1, [r3, r2]
}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	46bd      	mov	sp, r7
 800644a:	b00a      	add	sp, #40	; 0x28
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b08c      	sub	sp, #48	; 0x30
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645a:	2b21      	cmp	r3, #33	; 0x21
 800645c:	d151      	bne.n	8006502 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2252      	movs	r2, #82	; 0x52
 8006462:	5a9b      	ldrh	r3, [r3, r2]
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d132      	bne.n	80064d0 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646a:	f3ef 8310 	mrs	r3, PRIMASK
 800646e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006470:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006472:	62bb      	str	r3, [r7, #40]	; 0x28
 8006474:	2301      	movs	r3, #1
 8006476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f383 8810 	msr	PRIMASK, r3
}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2180      	movs	r1, #128	; 0x80
 800648c:	438a      	bics	r2, r1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f383 8810 	msr	PRIMASK, r3
}
 800649a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649c:	f3ef 8310 	mrs	r3, PRIMASK
 80064a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80064a2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
 80064a6:	2301      	movs	r3, #1
 80064a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	f383 8810 	msr	PRIMASK, r3
}
 80064b0:	46c0      	nop			; (mov r8, r8)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	430a      	orrs	r2, r1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f383 8810 	msr	PRIMASK, r3
}
 80064cc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80064ce:	e018      	b.n	8006502 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	05d2      	lsls	r2, r2, #23
 80064e0:	0dd2      	lsrs	r2, r2, #23
 80064e2:	b292      	uxth	r2, r2
 80064e4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2252      	movs	r2, #82	; 0x52
 80064f4:	5a9b      	ldrh	r3, [r3, r2]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b299      	uxth	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2252      	movs	r2, #82	; 0x52
 8006500:	5299      	strh	r1, [r3, r2]
}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	46bd      	mov	sp, r7
 8006506:	b00c      	add	sp, #48	; 0x30
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006512:	f3ef 8310 	mrs	r3, PRIMASK
 8006516:	60bb      	str	r3, [r7, #8]
  return(result);
 8006518:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	2301      	movs	r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f383 8810 	msr	PRIMASK, r3
}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2140      	movs	r1, #64	; 0x40
 8006534:	438a      	bics	r2, r1
 8006536:	601a      	str	r2, [r3, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f383 8810 	msr	PRIMASK, r3
}
 8006542:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	0018      	movs	r0, r3
 8006554:	f7fa ffc6 	bl	80014e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bd80      	pop	{r7, pc}

08006560 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006566:	f3ef 8305 	mrs	r3, IPSR
 800656a:	60bb      	str	r3, [r7, #8]
  return(result);
 800656c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	607b      	str	r3, [r7, #4]
  return(result);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <osKernelInitialize+0x2e>
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <osKernelInitialize+0x54>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d103      	bne.n	800658e <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8006586:	2306      	movs	r3, #6
 8006588:	425b      	negs	r3, r3
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e00c      	b.n	80065a8 <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 800658e:	4b09      	ldr	r3, [pc, #36]	; (80065b4 <osKernelInitialize+0x54>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <osKernelInitialize+0x54>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e002      	b.n	80065a8 <osKernelInitialize+0x48>
    } else {
      stat = osError;
 80065a2:	2301      	movs	r3, #1
 80065a4:	425b      	negs	r3, r3
 80065a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	0018      	movs	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b004      	add	sp, #16
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	20000360 	.word	0x20000360

080065b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065be:	f3ef 8305 	mrs	r3, IPSR
 80065c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80065c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ca:	f3ef 8310 	mrs	r3, PRIMASK
 80065ce:	607b      	str	r3, [r7, #4]
  return(result);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <osKernelStart+0x2e>
 80065d6:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <osKernelStart+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d103      	bne.n	80065e6 <osKernelStart+0x2e>
    stat = osErrorISR;
 80065de:	2306      	movs	r3, #6
 80065e0:	425b      	negs	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e00e      	b.n	8006604 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <osKernelStart+0x58>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d107      	bne.n	80065fe <osKernelStart+0x46>
      KernelState = osKernelRunning;
 80065ee:	4b08      	ldr	r3, [pc, #32]	; (8006610 <osKernelStart+0x58>)
 80065f0:	2202      	movs	r2, #2
 80065f2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80065f4:	f001 fc7a 	bl	8007eec <vTaskStartScheduler>
      stat = osOK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e002      	b.n	8006604 <osKernelStart+0x4c>
    } else {
      stat = osError;
 80065fe:	2301      	movs	r3, #1
 8006600:	425b      	negs	r3, r3
 8006602:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	0018      	movs	r0, r3
 8006608:	46bd      	mov	sp, r7
 800660a:	b004      	add	sp, #16
 800660c:	bd80      	pop	{r7, pc}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	20000360 	.word	0x20000360

08006614 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b090      	sub	sp, #64	; 0x40
 8006618:	af04      	add	r7, sp, #16
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006624:	f3ef 8305 	mrs	r3, IPSR
 8006628:	61fb      	str	r3, [r7, #28]
  return(result);
 800662a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800662c:	2b00      	cmp	r3, #0
 800662e:	d000      	beq.n	8006632 <osThreadNew+0x1e>
 8006630:	e090      	b.n	8006754 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006632:	f3ef 8310 	mrs	r3, PRIMASK
 8006636:	61bb      	str	r3, [r7, #24]
  return(result);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <osThreadNew+0x34>
 800663e:	4b48      	ldr	r3, [pc, #288]	; (8006760 <osThreadNew+0x14c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d100      	bne.n	8006648 <osThreadNew+0x34>
 8006646:	e085      	b.n	8006754 <osThreadNew+0x140>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d100      	bne.n	8006650 <osThreadNew+0x3c>
 800664e:	e081      	b.n	8006754 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006654:	2318      	movs	r3, #24
 8006656:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8006658:	2117      	movs	r1, #23
 800665a:	187b      	adds	r3, r7, r1
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8006660:	187b      	adds	r3, r7, r1
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8006664:	2301      	movs	r3, #1
 8006666:	425b      	negs	r3, r3
 8006668:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d044      	beq.n	80066fa <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <osThreadNew+0x6a>
        name = attr->name;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <osThreadNew+0x8e>
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	2b38      	cmp	r3, #56	; 0x38
 8006696:	d804      	bhi.n	80066a2 <osThreadNew+0x8e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	4013      	ands	r3, r2
 80066a0:	d001      	beq.n	80066a6 <osThreadNew+0x92>
        return (NULL);
 80066a2:	2300      	movs	r3, #0
 80066a4:	e057      	b.n	8006756 <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <osThreadNew+0xc8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2bbb      	cmp	r3, #187	; 0xbb
 80066c4:	d90a      	bls.n	80066dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <osThreadNew+0xc8>
        mem = 1;
 80066d6:	2301      	movs	r3, #1
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e010      	b.n	80066fe <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10c      	bne.n	80066fe <osThreadNew+0xea>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d108      	bne.n	80066fe <osThreadNew+0xea>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <osThreadNew+0xea>
          mem = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	623b      	str	r3, [r7, #32]
 80066f8:	e001      	b.n	80066fe <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d112      	bne.n	800672a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800670c:	68bd      	ldr	r5, [r7, #8]
 800670e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8006710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	9302      	str	r3, [sp, #8]
 8006716:	9201      	str	r2, [sp, #4]
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	002b      	movs	r3, r5
 800671e:	0022      	movs	r2, r4
 8006720:	f001 f9c9 	bl	8007ab6 <xTaskCreateStatic>
 8006724:	0003      	movs	r3, r0
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	e014      	b.n	8006754 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d111      	bne.n	8006754 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	b29a      	uxth	r2, r3
 8006734:	68bc      	ldr	r4, [r7, #8]
 8006736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	2310      	movs	r3, #16
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	0023      	movs	r3, r4
 8006746:	f001 f9f9 	bl	8007b3c <xTaskCreate>
 800674a:	0003      	movs	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d001      	beq.n	8006754 <osThreadNew+0x140>
          hTask = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006754:	693b      	ldr	r3, [r7, #16]
}
 8006756:	0018      	movs	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	b00c      	add	sp, #48	; 0x30
 800675c:	bdb0      	pop	{r4, r5, r7, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	20000360 	.word	0x20000360

08006764 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006770:	f3ef 8305 	mrs	r3, IPSR
 8006774:	60fb      	str	r3, [r7, #12]
  return(result);
 8006776:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <osThreadSuspend+0x2c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677c:	f3ef 8310 	mrs	r3, PRIMASK
 8006780:	60bb      	str	r3, [r7, #8]
  return(result);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <osThreadSuspend+0x34>
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <osThreadSuspend+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d103      	bne.n	8006798 <osThreadSuspend+0x34>
    stat = osErrorISR;
 8006790:	2306      	movs	r3, #6
 8006792:	425b      	negs	r3, r3
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e00c      	b.n	80067b2 <osThreadSuspend+0x4e>
  }
  else if (hTask == NULL) {
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <osThreadSuspend+0x42>
    stat = osErrorParameter;
 800679e:	2304      	movs	r3, #4
 80067a0:	425b      	negs	r3, r3
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e005      	b.n	80067b2 <osThreadSuspend+0x4e>
  }
  else {
    stat = osOK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f001 fb37 	bl	8007e20 <vTaskSuspend>
  }

  return (stat);
 80067b2:	697b      	ldr	r3, [r7, #20]
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b006      	add	sp, #24
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000360 	.word	0x20000360

080067c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c8:	f3ef 8305 	mrs	r3, IPSR
 80067cc:	613b      	str	r3, [r7, #16]
  return(result);
 80067ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d4:	f3ef 8310 	mrs	r3, PRIMASK
 80067d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <osDelay+0x30>
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <osDelay+0x4c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d103      	bne.n	80067f0 <osDelay+0x30>
    stat = osErrorISR;
 80067e8:	2306      	movs	r3, #6
 80067ea:	425b      	negs	r3, r3
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e008      	b.n	8006802 <osDelay+0x42>
  }
  else {
    stat = osOK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <osDelay+0x42>
      vTaskDelay(ticks);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f001 fae9 	bl	8007dd4 <vTaskDelay>
    }
  }

  return (stat);
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b006      	add	sp, #24
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000360 	.word	0x20000360

08006810 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006820:	f3ef 8305 	mrs	r3, IPSR
 8006824:	61bb      	str	r3, [r7, #24]
  return(result);
 8006826:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006828:	2b00      	cmp	r3, #0
 800682a:	d000      	beq.n	800682e <osSemaphoreNew+0x1e>
 800682c:	e08a      	b.n	8006944 <osSemaphoreNew+0x134>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800682e:	f3ef 8310 	mrs	r3, PRIMASK
 8006832:	617b      	str	r3, [r7, #20]
  return(result);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d004      	beq.n	8006844 <osSemaphoreNew+0x34>
 800683a:	4b45      	ldr	r3, [pc, #276]	; (8006950 <osSemaphoreNew+0x140>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d100      	bne.n	8006844 <osSemaphoreNew+0x34>
 8006842:	e07f      	b.n	8006944 <osSemaphoreNew+0x134>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d100      	bne.n	800684c <osSemaphoreNew+0x3c>
 800684a:	e07b      	b.n	8006944 <osSemaphoreNew+0x134>
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	429a      	cmp	r2, r3
 8006852:	d900      	bls.n	8006856 <osSemaphoreNew+0x46>
 8006854:	e076      	b.n	8006944 <osSemaphoreNew+0x134>
    mem = -1;
 8006856:	2301      	movs	r3, #1
 8006858:	425b      	negs	r3, r3
 800685a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d015      	beq.n	800688e <osSemaphoreNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <osSemaphoreNew+0x68>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b4f      	cmp	r3, #79	; 0x4f
 8006870:	d902      	bls.n	8006878 <osSemaphoreNew+0x68>
        mem = 1;
 8006872:	2301      	movs	r3, #1
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	e00c      	b.n	8006892 <osSemaphoreNew+0x82>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d108      	bne.n	8006892 <osSemaphoreNew+0x82>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <osSemaphoreNew+0x82>
          mem = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	623b      	str	r3, [r7, #32]
 800688c:	e001      	b.n	8006892 <osSemaphoreNew+0x82>
        }
      }
    }
    else {
      mem = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	3301      	adds	r3, #1
 8006896:	d055      	beq.n	8006944 <osSemaphoreNew+0x134>
      if (max_count == 1U) {
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d12b      	bne.n	80068f6 <osSemaphoreNew+0xe6>
        if (mem == 1) {
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10b      	bne.n	80068bc <osSemaphoreNew+0xac>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2203      	movs	r2, #3
 80068aa:	9200      	str	r2, [sp, #0]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	2001      	movs	r0, #1
 80068b2:	f000 faae 	bl	8006e12 <xQueueGenericCreateStatic>
 80068b6:	0003      	movs	r3, r0
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ba:	e006      	b.n	80068ca <osSemaphoreNew+0xba>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80068bc:	2203      	movs	r2, #3
 80068be:	2100      	movs	r1, #0
 80068c0:	2001      	movs	r0, #1
 80068c2:	f000 faf1 	bl	8006ea8 <xQueueGenericCreate>
 80068c6:	0003      	movs	r3, r0
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d027      	beq.n	8006920 <osSemaphoreNew+0x110>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d024      	beq.n	8006920 <osSemaphoreNew+0x110>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d8:	2300      	movs	r3, #0
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	f000 fb89 	bl	8006ff4 <xQueueGenericSend>
 80068e2:	0003      	movs	r3, r0
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d01b      	beq.n	8006920 <osSemaphoreNew+0x110>
            vSemaphoreDelete (hSemaphore);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	0018      	movs	r0, r3
 80068ec:	f000 ff0e 	bl	800770c <vQueueDelete>
            hSemaphore = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
 80068f4:	e014      	b.n	8006920 <osSemaphoreNew+0x110>
          }
        }
      }
      else {
        if (mem == 1) {
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d109      	bne.n	8006910 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	0018      	movs	r0, r3
 8006906:	f000 fb2c 	bl	8006f62 <xQueueCreateCountingSemaphoreStatic>
 800690a:	0003      	movs	r3, r0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
 800690e:	e007      	b.n	8006920 <osSemaphoreNew+0x110>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	0011      	movs	r1, r2
 8006916:	0018      	movs	r0, r3
 8006918:	f000 fb49 	bl	8006fae <xQueueCreateCountingSemaphore>
 800691c:	0003      	movs	r3, r0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <osSemaphoreNew+0x134>
        if (attr != NULL) {
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <osSemaphoreNew+0x124>
          name = attr->name;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	61fb      	str	r3, [r7, #28]
 8006932:	e001      	b.n	8006938 <osSemaphoreNew+0x128>
        } else {
          name = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	0011      	movs	r1, r2
 800693e:	0018      	movs	r0, r3
 8006940:	f001 f834 	bl	80079ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b00a      	add	sp, #40	; 0x28
 800694c:	bd80      	pop	{r7, pc}
 800694e:	46c0      	nop			; (mov r8, r8)
 8006950:	20000360 	.word	0x20000360

08006954 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d103      	bne.n	8006974 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800696c:	2304      	movs	r3, #4
 800696e:	425b      	negs	r3, r3
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	e043      	b.n	80069fc <osSemaphoreAcquire+0xa8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006974:	f3ef 8305 	mrs	r3, IPSR
 8006978:	617b      	str	r3, [r7, #20]
  return(result);
 800697a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <osSemaphoreAcquire+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006980:	f3ef 8310 	mrs	r3, PRIMASK
 8006984:	613b      	str	r3, [r7, #16]
  return(result);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d022      	beq.n	80069d2 <osSemaphoreAcquire+0x7e>
 800698c:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <osSemaphoreAcquire+0xb4>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d11e      	bne.n	80069d2 <osSemaphoreAcquire+0x7e>
    if (timeout != 0U) {
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <osSemaphoreAcquire+0x4e>
      stat = osErrorParameter;
 800699a:	2304      	movs	r3, #4
 800699c:	425b      	negs	r3, r3
 800699e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80069a0:	e02b      	b.n	80069fa <osSemaphoreAcquire+0xa6>
    }
    else {
      yield = pdFALSE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80069a6:	230c      	movs	r3, #12
 80069a8:	18fa      	adds	r2, r7, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2100      	movs	r1, #0
 80069ae:	0018      	movs	r0, r3
 80069b0:	f000 fe49 	bl	8007646 <xQueueReceiveFromISR>
 80069b4:	0003      	movs	r3, r0
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d003      	beq.n	80069c2 <osSemaphoreAcquire+0x6e>
        stat = osErrorResource;
 80069ba:	2303      	movs	r3, #3
 80069bc:	425b      	negs	r3, r3
 80069be:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80069c0:	e01b      	b.n	80069fa <osSemaphoreAcquire+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d018      	beq.n	80069fa <osSemaphoreAcquire+0xa6>
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <osSemaphoreAcquire+0xb8>)
 80069ca:	2280      	movs	r2, #128	; 0x80
 80069cc:	0552      	lsls	r2, r2, #21
 80069ce:	601a      	str	r2, [r3, #0]
    if (timeout != 0U) {
 80069d0:	e013      	b.n	80069fa <osSemaphoreAcquire+0xa6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	0011      	movs	r1, r2
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 fd5a 	bl	8007492 <xQueueSemaphoreTake>
 80069de:	0003      	movs	r3, r0
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d00b      	beq.n	80069fc <osSemaphoreAcquire+0xa8>
      if (timeout != 0U) {
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <osSemaphoreAcquire+0x9e>
        stat = osErrorTimeout;
 80069ea:	2302      	movs	r3, #2
 80069ec:	425b      	negs	r3, r3
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e004      	b.n	80069fc <osSemaphoreAcquire+0xa8>
      } else {
        stat = osErrorResource;
 80069f2:	2303      	movs	r3, #3
 80069f4:	425b      	negs	r3, r3
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	e000      	b.n	80069fc <osSemaphoreAcquire+0xa8>
    if (timeout != 0U) {
 80069fa:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return (stat);
 80069fc:	69fb      	ldr	r3, [r7, #28]
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b008      	add	sp, #32
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	20000360 	.word	0x20000360
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d103      	bne.n	8006a2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006a26:	2304      	movs	r3, #4
 8006a28:	425b      	negs	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e035      	b.n	8006a9a <osSemaphoreRelease+0x8a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a2e:	f3ef 8305 	mrs	r3, IPSR
 8006a32:	617b      	str	r3, [r7, #20]
  return(result);
 8006a34:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <osSemaphoreRelease+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3e:	613b      	str	r3, [r7, #16]
  return(result);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01b      	beq.n	8006a7e <osSemaphoreRelease+0x6e>
 8006a46:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <osSemaphoreRelease+0x94>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d117      	bne.n	8006a7e <osSemaphoreRelease+0x6e>
    yield = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a52:	230c      	movs	r3, #12
 8006a54:	18fa      	adds	r2, r7, r3
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	0011      	movs	r1, r2
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 fbff 	bl	800725e <xQueueGiveFromISR>
 8006a60:	0003      	movs	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d003      	beq.n	8006a6e <osSemaphoreRelease+0x5e>
      stat = osErrorResource;
 8006a66:	2303      	movs	r3, #3
 8006a68:	425b      	negs	r3, r3
 8006a6a:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a6c:	e014      	b.n	8006a98 <osSemaphoreRelease+0x88>
    } else {
      portYIELD_FROM_ISR (yield);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d011      	beq.n	8006a98 <osSemaphoreRelease+0x88>
 8006a74:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <osSemaphoreRelease+0x98>)
 8006a76:	2280      	movs	r2, #128	; 0x80
 8006a78:	0552      	lsls	r2, r2, #21
 8006a7a:	601a      	str	r2, [r3, #0]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a7c:	e00c      	b.n	8006a98 <osSemaphoreRelease+0x88>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a7e:	69b8      	ldr	r0, [r7, #24]
 8006a80:	2300      	movs	r3, #0
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	f000 fab5 	bl	8006ff4 <xQueueGenericSend>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d004      	beq.n	8006a9a <osSemaphoreRelease+0x8a>
      stat = osErrorResource;
 8006a90:	2303      	movs	r3, #3
 8006a92:	425b      	negs	r3, r3
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	e000      	b.n	8006a9a <osSemaphoreRelease+0x8a>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a98:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (stat);
 8006a9a:	69fb      	ldr	r3, [r7, #28]
}
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b008      	add	sp, #32
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000360 	.word	0x20000360
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006aac:	b590      	push	{r4, r7, lr}
 8006aae:	b08d      	sub	sp, #52	; 0x34
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abc:	f3ef 8305 	mrs	r3, IPSR
 8006ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ac2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d000      	beq.n	8006aca <osMessageQueueNew+0x1e>
 8006ac8:	e06f      	b.n	8006baa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ace:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <osMessageQueueNew+0x34>
 8006ad6:	4b37      	ldr	r3, [pc, #220]	; (8006bb4 <osMessageQueueNew+0x108>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d100      	bne.n	8006ae0 <osMessageQueueNew+0x34>
 8006ade:	e064      	b.n	8006baa <osMessageQueueNew+0xfe>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d100      	bne.n	8006ae8 <osMessageQueueNew+0x3c>
 8006ae6:	e060      	b.n	8006baa <osMessageQueueNew+0xfe>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d05d      	beq.n	8006baa <osMessageQueueNew+0xfe>
    mem = -1;
 8006aee:	2301      	movs	r3, #1
 8006af0:	425b      	negs	r3, r3
 8006af2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d028      	beq.n	8006b4c <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d011      	beq.n	8006b26 <osMessageQueueNew+0x7a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b4f      	cmp	r3, #79	; 0x4f
 8006b08:	d90d      	bls.n	8006b26 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	434b      	muls	r3, r1
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d302      	bcc.n	8006b26 <osMessageQueueNew+0x7a>
        mem = 1;
 8006b20:	2301      	movs	r3, #1
 8006b22:	623b      	str	r3, [r7, #32]
 8006b24:	e014      	b.n	8006b50 <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d110      	bne.n	8006b50 <osMessageQueueNew+0xa4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10c      	bne.n	8006b50 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d108      	bne.n	8006b50 <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d104      	bne.n	8006b50 <osMessageQueueNew+0xa4>
          mem = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	e001      	b.n	8006b50 <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d10c      	bne.n	8006b70 <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	2400      	movs	r4, #0
 8006b64:	9400      	str	r4, [sp, #0]
 8006b66:	f000 f954 	bl	8006e12 <xQueueGenericCreateStatic>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6e:	e00a      	b.n	8006b86 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d107      	bne.n	8006b86 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f000 f993 	bl	8006ea8 <xQueueGenericCreate>
 8006b82:	0003      	movs	r3, r0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <osMessageQueueNew+0xee>
        name = attr->name;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	e001      	b.n	8006b9e <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	0011      	movs	r1, r2
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 ff01 	bl	80079ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b00b      	add	sp, #44	; 0x2c
 8006bb2:	bd90      	pop	{r4, r7, pc}
 8006bb4:	20000360 	.word	0x20000360

08006bb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4a06      	ldr	r2, [pc, #24]	; (8006be0 <vApplicationGetIdleTaskMemory+0x28>)
 8006bc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006bce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2280      	movs	r2, #128	; 0x80
 8006bd4:	601a      	str	r2, [r3, #0]
}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b004      	add	sp, #16
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	46c0      	nop			; (mov r8, r8)
 8006be0:	20000364 	.word	0x20000364
 8006be4:	20000420 	.word	0x20000420

08006be8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <vApplicationGetTimerTaskMemory+0x28>)
 8006bf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a05      	ldr	r2, [pc, #20]	; (8006c14 <vApplicationGetTimerTaskMemory+0x2c>)
 8006bfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2280      	movs	r2, #128	; 0x80
 8006c04:	0052      	lsls	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
}
 8006c08:	46c0      	nop			; (mov r8, r8)
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b004      	add	sp, #16
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000620 	.word	0x20000620
 8006c14:	200006dc 	.word	0x200006dc

08006c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3308      	adds	r3, #8
 8006c24:	001a      	movs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4252      	negs	r2, r2
 8006c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3308      	adds	r3, #8
 8006c36:	001a      	movs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	001a      	movs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c4c:	46c0      	nop			; (mov r8, r8)
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b002      	add	sp, #8
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	46bd      	mov	sp, r7
 8006c66:	b002      	add	sp, #8
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}

08006cae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	d103      	bne.n	8006ccc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e00c      	b.n	8006ce6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3308      	adds	r3, #8
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e002      	b.n	8006cda <vListInsert+0x2c>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d2f6      	bcs.n	8006cd4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b004      	add	sp, #16
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6892      	ldr	r2, [r2, #8]
 8006d30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6852      	ldr	r2, [r2, #4]
 8006d3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d103      	bne.n	8006d4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1e5a      	subs	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
}
 8006d62:	0018      	movs	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b004      	add	sp, #16
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <xQueueGenericReset+0x18>
 8006d7e:	b672      	cpsid	i
 8006d80:	e7fe      	b.n	8006d80 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006d82:	f002 f9d5 	bl	8009130 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	434b      	muls	r3, r1
 8006d94:	18d2      	adds	r2, r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	1e59      	subs	r1, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	434b      	muls	r3, r1
 8006db8:	18d2      	adds	r2, r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2244      	movs	r2, #68	; 0x44
 8006dc2:	21ff      	movs	r1, #255	; 0xff
 8006dc4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2245      	movs	r2, #69	; 0x45
 8006dca:	21ff      	movs	r1, #255	; 0xff
 8006dcc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10d      	bne.n	8006df0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3310      	adds	r3, #16
 8006de0:	0018      	movs	r0, r3
 8006de2:	f001 fad9 	bl	8008398 <xTaskRemoveFromEventList>
 8006de6:	1e03      	subs	r3, r0, #0
 8006de8:	d00c      	beq.n	8006e04 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006dea:	f002 f991 	bl	8009110 <vPortYield>
 8006dee:	e009      	b.n	8006e04 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3310      	adds	r3, #16
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7ff ff0f 	bl	8006c18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3324      	adds	r3, #36	; 0x24
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7ff ff0a 	bl	8006c18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e04:	f002 f9a6 	bl	8009154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e08:	2301      	movs	r3, #1
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b004      	add	sp, #16
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e12:	b590      	push	{r4, r7, lr}
 8006e14:	b089      	sub	sp, #36	; 0x24
 8006e16:	af02      	add	r7, sp, #8
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <xQueueGenericCreateStatic+0x18>
 8006e26:	b672      	cpsid	i
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <xQueueGenericCreateStatic+0x22>
 8006e30:	b672      	cpsid	i
 8006e32:	e7fe      	b.n	8006e32 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <xQueueGenericCreateStatic+0x2e>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <xQueueGenericCreateStatic+0x32>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <xQueueGenericCreateStatic+0x34>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <xQueueGenericCreateStatic+0x3c>
 8006e4a:	b672      	cpsid	i
 8006e4c:	e7fe      	b.n	8006e4c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <xQueueGenericCreateStatic+0x48>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <xQueueGenericCreateStatic+0x4c>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <xQueueGenericCreateStatic+0x4e>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <xQueueGenericCreateStatic+0x56>
 8006e64:	b672      	cpsid	i
 8006e66:	e7fe      	b.n	8006e66 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e68:	2350      	movs	r3, #80	; 0x50
 8006e6a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b50      	cmp	r3, #80	; 0x50
 8006e70:	d001      	beq.n	8006e76 <xQueueGenericCreateStatic+0x64>
 8006e72:	b672      	cpsid	i
 8006e74:	e7fe      	b.n	8006e74 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00e      	beq.n	8006e9e <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2246      	movs	r2, #70	; 0x46
 8006e84:	2101      	movs	r1, #1
 8006e86:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e88:	2328      	movs	r3, #40	; 0x28
 8006e8a:	18fb      	adds	r3, r7, r3
 8006e8c:	781c      	ldrb	r4, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	0023      	movs	r3, r4
 8006e9a:	f000 f83b 	bl	8006f14 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006e9e:	697b      	ldr	r3, [r7, #20]
	}
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b007      	add	sp, #28
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ea8:	b590      	push	{r4, r7, lr}
 8006eaa:	b08b      	sub	sp, #44	; 0x2c
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	1dfb      	adds	r3, r7, #7
 8006eb4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <xQueueGenericCreate+0x18>
 8006ebc:	b672      	cpsid	i
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d102      	bne.n	8006ecc <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e003      	b.n	8006ed4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4353      	muls	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	3350      	adds	r3, #80	; 0x50
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f002 f9c1 	bl	8009260 <pvPortMalloc>
 8006ede:	0003      	movs	r3, r0
 8006ee0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d010      	beq.n	8006f0a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3350      	adds	r3, #80	; 0x50
 8006eec:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2246      	movs	r2, #70	; 0x46
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ef6:	1dfb      	adds	r3, r7, #7
 8006ef8:	781c      	ldrb	r4, [r3, #0]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	0023      	movs	r3, r4
 8006f06:	f000 f805 	bl	8006f14 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b009      	add	sp, #36	; 0x24
 8006f12:	bd90      	pop	{r4, r7, pc}

08006f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	001a      	movs	r2, r3
 8006f22:	1cfb      	adds	r3, r7, #3
 8006f24:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2101      	movs	r1, #1
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7ff ff0d 	bl	8006d6a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	1cfa      	adds	r2, r7, #3
 8006f54:	214c      	movs	r1, #76	; 0x4c
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	b004      	add	sp, #16
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b088      	sub	sp, #32
 8006f66:	af02      	add	r7, sp, #8
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <xQueueCreateCountingSemaphoreStatic+0x16>
 8006f74:	b672      	cpsid	i
 8006f76:	e7fe      	b.n	8006f76 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d901      	bls.n	8006f84 <xQueueCreateCountingSemaphoreStatic+0x22>
 8006f80:	b672      	cpsid	i
 8006f82:	e7fe      	b.n	8006f82 <xQueueCreateCountingSemaphoreStatic+0x20>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	9200      	str	r2, [sp, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	2100      	movs	r1, #0
 8006f90:	f7ff ff3f 	bl	8006e12 <xQueueGenericCreateStatic>
 8006f94:	0003      	movs	r3, r0
 8006f96:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <xQueueCreateCountingSemaphoreStatic+0x42>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006fa4:	697b      	ldr	r3, [r7, #20]
	}
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b006      	add	sp, #24
 8006fac:	bd80      	pop	{r7, pc}

08006fae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueCreateCountingSemaphore+0x14>
 8006fbe:	b672      	cpsid	i
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d901      	bls.n	8006fce <xQueueCreateCountingSemaphore+0x20>
 8006fca:	b672      	cpsid	i
 8006fcc:	e7fe      	b.n	8006fcc <xQueueCreateCountingSemaphore+0x1e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f7ff ff67 	bl	8006ea8 <xQueueGenericCreate>
 8006fda:	0003      	movs	r3, r0
 8006fdc:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006fea:	68fb      	ldr	r3, [r7, #12]
	}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b004      	add	sp, #16
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <xQueueGenericSend+0x20>
 8007010:	b672      	cpsid	i
 8007012:	e7fe      	b.n	8007012 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x2e>
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <xQueueGenericSend+0x32>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSend+0x34>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <xQueueGenericSend+0x3c>
 800702c:	b672      	cpsid	i
 800702e:	e7fe      	b.n	800702e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d103      	bne.n	800703e <xQueueGenericSend+0x4a>
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <xQueueGenericSend+0x4e>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <xQueueGenericSend+0x50>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <xQueueGenericSend+0x58>
 8007048:	b672      	cpsid	i
 800704a:	e7fe      	b.n	800704a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800704c:	f001 fb42 	bl	80086d4 <xTaskGetSchedulerState>
 8007050:	1e03      	subs	r3, r0, #0
 8007052:	d102      	bne.n	800705a <xQueueGenericSend+0x66>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <xQueueGenericSend+0x6a>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueGenericSend+0x6c>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <xQueueGenericSend+0x74>
 8007064:	b672      	cpsid	i
 8007066:	e7fe      	b.n	8007066 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007068:	f002 f862 	bl	8009130 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <xQueueGenericSend+0x8a>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d11e      	bne.n	80070bc <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 fb73 	bl	8007770 <prvCopyDataToQueue>
 800708a:	0003      	movs	r3, r0
 800708c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	3324      	adds	r3, #36	; 0x24
 800709a:	0018      	movs	r0, r3
 800709c:	f001 f97c 	bl	8008398 <xTaskRemoveFromEventList>
 80070a0:	1e03      	subs	r3, r0, #0
 80070a2:	d007      	beq.n	80070b4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070a4:	f002 f834 	bl	8009110 <vPortYield>
 80070a8:	e004      	b.n	80070b4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80070b0:	f002 f82e 	bl	8009110 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80070b4:	f002 f84e 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e05b      	b.n	8007174 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070c2:	f002 f847 	bl	8009154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e054      	b.n	8007174 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070d0:	2314      	movs	r3, #20
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	0018      	movs	r0, r3
 80070d6:	f001 f9bb 	bl	8008450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070de:	f002 f839 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070e2:	f000 ff61 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070e6:	f002 f823 	bl	8009130 <vPortEnterCritical>
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	2244      	movs	r2, #68	; 0x44
 80070ee:	5c9b      	ldrb	r3, [r3, r2]
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	d103      	bne.n	80070fe <xQueueGenericSend+0x10a>
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	2244      	movs	r2, #68	; 0x44
 80070fa:	2100      	movs	r1, #0
 80070fc:	5499      	strb	r1, [r3, r2]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2245      	movs	r2, #69	; 0x45
 8007102:	5c9b      	ldrb	r3, [r3, r2]
 8007104:	b25b      	sxtb	r3, r3
 8007106:	3301      	adds	r3, #1
 8007108:	d103      	bne.n	8007112 <xQueueGenericSend+0x11e>
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	2245      	movs	r2, #69	; 0x45
 800710e:	2100      	movs	r1, #0
 8007110:	5499      	strb	r1, [r3, r2]
 8007112:	f002 f81f 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007116:	1d3a      	adds	r2, r7, #4
 8007118:	2314      	movs	r3, #20
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	0011      	movs	r1, r2
 800711e:	0018      	movs	r0, r3
 8007120:	f001 f9aa 	bl	8008478 <xTaskCheckForTimeOut>
 8007124:	1e03      	subs	r3, r0, #0
 8007126:	d11e      	bne.n	8007166 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	0018      	movs	r0, r3
 800712c:	f000 fc25 	bl	800797a <prvIsQueueFull>
 8007130:	1e03      	subs	r3, r0, #0
 8007132:	d011      	beq.n	8007158 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	3310      	adds	r3, #16
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f001 f8e7 	bl	8008310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	0018      	movs	r0, r3
 8007146:	f000 fba4 	bl	8007892 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800714a:	f000 ff39 	bl	8007fc0 <xTaskResumeAll>
 800714e:	1e03      	subs	r3, r0, #0
 8007150:	d18a      	bne.n	8007068 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007152:	f001 ffdd 	bl	8009110 <vPortYield>
 8007156:	e787      	b.n	8007068 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	0018      	movs	r0, r3
 800715c:	f000 fb99 	bl	8007892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007160:	f000 ff2e 	bl	8007fc0 <xTaskResumeAll>
 8007164:	e780      	b.n	8007068 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	0018      	movs	r0, r3
 800716a:	f000 fb92 	bl	8007892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800716e:	f000 ff27 	bl	8007fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007172:	2300      	movs	r3, #0
		}
	}
}
 8007174:	0018      	movs	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	b00a      	add	sp, #40	; 0x28
 800717a:	bd80      	pop	{r7, pc}

0800717c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b089      	sub	sp, #36	; 0x24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <xQueueGenericSendFromISR+0x1c>
 8007194:	b672      	cpsid	i
 8007196:	e7fe      	b.n	8007196 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <xQueueGenericSendFromISR+0x2a>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <xQueueGenericSendFromISR+0x2e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <xQueueGenericSendFromISR+0x30>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <xQueueGenericSendFromISR+0x38>
 80071b0:	b672      	cpsid	i
 80071b2:	e7fe      	b.n	80071b2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d103      	bne.n	80071c2 <xQueueGenericSendFromISR+0x46>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <xQueueGenericSendFromISR+0x4a>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <xQueueGenericSendFromISR+0x4c>
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <xQueueGenericSendFromISR+0x54>
 80071cc:	b672      	cpsid	i
 80071ce:	e7fe      	b.n	80071ce <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071d0:	f001 ffd8 	bl	8009184 <ulSetInterruptMaskFromISR>
 80071d4:	0003      	movs	r3, r0
 80071d6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <xQueueGenericSendFromISR+0x6e>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d12e      	bne.n	8007248 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071ea:	2413      	movs	r4, #19
 80071ec:	193b      	adds	r3, r7, r4
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	2145      	movs	r1, #69	; 0x45
 80071f2:	5c52      	ldrb	r2, [r2, r1]
 80071f4:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	68b9      	ldr	r1, [r7, #8]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 fab7 	bl	8007770 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007202:	193b      	adds	r3, r7, r4
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b25b      	sxtb	r3, r3
 8007208:	3301      	adds	r3, #1
 800720a:	d111      	bne.n	8007230 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d016      	beq.n	8007242 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	0018      	movs	r0, r3
 800721a:	f001 f8bd 	bl	8008398 <xTaskRemoveFromEventList>
 800721e:	1e03      	subs	r3, r0, #0
 8007220:	d00f      	beq.n	8007242 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00c      	beq.n	8007242 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e008      	b.n	8007242 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007230:	2313      	movs	r3, #19
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	b259      	sxtb	r1, r3
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2245      	movs	r2, #69	; 0x45
 8007240:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007242:	2301      	movs	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
		{
 8007246:	e001      	b.n	800724c <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007248:	2300      	movs	r3, #0
 800724a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	0018      	movs	r0, r3
 8007250:	f001 ff9e 	bl	8009190 <vClearInterruptMaskFromISR>

	return xReturn;
 8007254:	69fb      	ldr	r3, [r7, #28]
}
 8007256:	0018      	movs	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	b009      	add	sp, #36	; 0x24
 800725c:	bd90      	pop	{r4, r7, pc}

0800725e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b088      	sub	sp, #32
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <xQueueGiveFromISR+0x18>
 8007272:	b672      	cpsid	i
 8007274:	e7fe      	b.n	8007274 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <xQueueGiveFromISR+0x24>
 800727e:	b672      	cpsid	i
 8007280:	e7fe      	b.n	8007280 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <xQueueGiveFromISR+0x34>
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <xQueueGiveFromISR+0x38>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <xQueueGiveFromISR+0x3a>
 8007296:	2300      	movs	r3, #0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <xQueueGiveFromISR+0x42>
 800729c:	b672      	cpsid	i
 800729e:	e7fe      	b.n	800729e <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072a0:	f001 ff70 	bl	8009184 <ulSetInterruptMaskFromISR>
 80072a4:	0003      	movs	r3, r0
 80072a6:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d22c      	bcs.n	8007312 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072b8:	200f      	movs	r0, #15
 80072ba:	183b      	adds	r3, r7, r0
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	2145      	movs	r1, #69	; 0x45
 80072c0:	5c52      	ldrb	r2, [r2, r1]
 80072c2:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072cc:	183b      	adds	r3, r7, r0
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	3301      	adds	r3, #1
 80072d4:	d111      	bne.n	80072fa <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d016      	beq.n	800730c <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3324      	adds	r3, #36	; 0x24
 80072e2:	0018      	movs	r0, r3
 80072e4:	f001 f858 	bl	8008398 <xTaskRemoveFromEventList>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d00f      	beq.n	800730c <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00c      	beq.n	800730c <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2201      	movs	r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e008      	b.n	800730c <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80072fa:	230f      	movs	r3, #15
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	b259      	sxtb	r1, r3
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2245      	movs	r2, #69	; 0x45
 800730a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800730c:	2301      	movs	r3, #1
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e001      	b.n	8007316 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	0018      	movs	r0, r3
 800731a:	f001 ff39 	bl	8009190 <vClearInterruptMaskFromISR>

	return xReturn;
 800731e:	69fb      	ldr	r3, [r7, #28]
}
 8007320:	0018      	movs	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	b008      	add	sp, #32
 8007326:	bd80      	pop	{r7, pc}

08007328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueReceive+0x1e>
 8007342:	b672      	cpsid	i
 8007344:	e7fe      	b.n	8007344 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d103      	bne.n	8007354 <xQueueReceive+0x2c>
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <xQueueReceive+0x30>
 8007354:	2301      	movs	r3, #1
 8007356:	e000      	b.n	800735a <xQueueReceive+0x32>
 8007358:	2300      	movs	r3, #0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <xQueueReceive+0x3a>
 800735e:	b672      	cpsid	i
 8007360:	e7fe      	b.n	8007360 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007362:	f001 f9b7 	bl	80086d4 <xTaskGetSchedulerState>
 8007366:	1e03      	subs	r3, r0, #0
 8007368:	d102      	bne.n	8007370 <xQueueReceive+0x48>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <xQueueReceive+0x4c>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <xQueueReceive+0x4e>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d101      	bne.n	800737e <xQueueReceive+0x56>
 800737a:	b672      	cpsid	i
 800737c:	e7fe      	b.n	800737c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800737e:	f001 fed7 	bl	8009130 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01a      	beq.n	80073c4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	0011      	movs	r1, r2
 8007394:	0018      	movs	r0, r3
 8007396:	f000 fa56 	bl	8007846 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1e5a      	subs	r2, r3, #1
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	3310      	adds	r3, #16
 80073ae:	0018      	movs	r0, r3
 80073b0:	f000 fff2 	bl	8008398 <xTaskRemoveFromEventList>
 80073b4:	1e03      	subs	r3, r0, #0
 80073b6:	d001      	beq.n	80073bc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073b8:	f001 feaa 	bl	8009110 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073bc:	f001 feca 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e062      	b.n	800748a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d103      	bne.n	80073d2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073ca:	f001 fec3 	bl	8009154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e05b      	b.n	800748a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d106      	bne.n	80073e6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073d8:	2314      	movs	r3, #20
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	0018      	movs	r0, r3
 80073de:	f001 f837 	bl	8008450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073e6:	f001 feb5 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073ea:	f000 fddd 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073ee:	f001 fe9f 	bl	8009130 <vPortEnterCritical>
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	2244      	movs	r2, #68	; 0x44
 80073f6:	5c9b      	ldrb	r3, [r3, r2]
 80073f8:	b25b      	sxtb	r3, r3
 80073fa:	3301      	adds	r3, #1
 80073fc:	d103      	bne.n	8007406 <xQueueReceive+0xde>
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	2244      	movs	r2, #68	; 0x44
 8007402:	2100      	movs	r1, #0
 8007404:	5499      	strb	r1, [r3, r2]
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	2245      	movs	r2, #69	; 0x45
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	b25b      	sxtb	r3, r3
 800740e:	3301      	adds	r3, #1
 8007410:	d103      	bne.n	800741a <xQueueReceive+0xf2>
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	2245      	movs	r2, #69	; 0x45
 8007416:	2100      	movs	r1, #0
 8007418:	5499      	strb	r1, [r3, r2]
 800741a:	f001 fe9b 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800741e:	1d3a      	adds	r2, r7, #4
 8007420:	2314      	movs	r3, #20
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	0011      	movs	r1, r2
 8007426:	0018      	movs	r0, r3
 8007428:	f001 f826 	bl	8008478 <xTaskCheckForTimeOut>
 800742c:	1e03      	subs	r3, r0, #0
 800742e:	d11e      	bne.n	800746e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 fa8b 	bl	800794e <prvIsQueueEmpty>
 8007438:	1e03      	subs	r3, r0, #0
 800743a:	d011      	beq.n	8007460 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	3324      	adds	r3, #36	; 0x24
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f000 ff63 	bl	8008310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	0018      	movs	r0, r3
 800744e:	f000 fa20 	bl	8007892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007452:	f000 fdb5 	bl	8007fc0 <xTaskResumeAll>
 8007456:	1e03      	subs	r3, r0, #0
 8007458:	d191      	bne.n	800737e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800745a:	f001 fe59 	bl	8009110 <vPortYield>
 800745e:	e78e      	b.n	800737e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 fa15 	bl	8007892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007468:	f000 fdaa 	bl	8007fc0 <xTaskResumeAll>
 800746c:	e787      	b.n	800737e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	0018      	movs	r0, r3
 8007472:	f000 fa0e 	bl	8007892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007476:	f000 fda3 	bl	8007fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	0018      	movs	r0, r3
 800747e:	f000 fa66 	bl	800794e <prvIsQueueEmpty>
 8007482:	1e03      	subs	r3, r0, #0
 8007484:	d100      	bne.n	8007488 <xQueueReceive+0x160>
 8007486:	e77a      	b.n	800737e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007488:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800748a:	0018      	movs	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	b00a      	add	sp, #40	; 0x28
 8007490:	bd80      	pop	{r7, pc}

08007492 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b08a      	sub	sp, #40	; 0x28
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <xQueueSemaphoreTake+0x20>
 80074ae:	b672      	cpsid	i
 80074b0:	e7fe      	b.n	80074b0 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <xQueueSemaphoreTake+0x2c>
 80074ba:	b672      	cpsid	i
 80074bc:	e7fe      	b.n	80074bc <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074be:	f001 f909 	bl	80086d4 <xTaskGetSchedulerState>
 80074c2:	1e03      	subs	r3, r0, #0
 80074c4:	d102      	bne.n	80074cc <xQueueSemaphoreTake+0x3a>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <xQueueSemaphoreTake+0x3e>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <xQueueSemaphoreTake+0x40>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <xQueueSemaphoreTake+0x48>
 80074d6:	b672      	cpsid	i
 80074d8:	e7fe      	b.n	80074d8 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80074da:	f001 fe29 	bl	8009130 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01d      	beq.n	8007526 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	1e5a      	subs	r2, r3, #1
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80074fa:	f001 fa45 	bl	8008988 <pvTaskIncrementMutexHeldCount>
 80074fe:	0002      	movs	r2, r0
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3310      	adds	r3, #16
 8007510:	0018      	movs	r0, r3
 8007512:	f000 ff41 	bl	8008398 <xTaskRemoveFromEventList>
 8007516:	1e03      	subs	r3, r0, #0
 8007518:	d001      	beq.n	800751e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800751a:	f001 fdf9 	bl	8009110 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800751e:	f001 fe19 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 8007522:	2301      	movs	r3, #1
 8007524:	e08b      	b.n	800763e <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d108      	bne.n	800753e <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <xQueueSemaphoreTake+0xa4>
 8007532:	b672      	cpsid	i
 8007534:	e7fe      	b.n	8007534 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007536:	f001 fe0d 	bl	8009154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800753a:	2300      	movs	r3, #0
 800753c:	e07f      	b.n	800763e <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007544:	230c      	movs	r3, #12
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	0018      	movs	r0, r3
 800754a:	f000 ff81 	bl	8008450 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800754e:	2301      	movs	r3, #1
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007552:	f001 fdff 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007556:	f000 fd27 	bl	8007fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800755a:	f001 fde9 	bl	8009130 <vPortEnterCritical>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2244      	movs	r2, #68	; 0x44
 8007562:	5c9b      	ldrb	r3, [r3, r2]
 8007564:	b25b      	sxtb	r3, r3
 8007566:	3301      	adds	r3, #1
 8007568:	d103      	bne.n	8007572 <xQueueSemaphoreTake+0xe0>
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	2244      	movs	r2, #68	; 0x44
 800756e:	2100      	movs	r1, #0
 8007570:	5499      	strb	r1, [r3, r2]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	2245      	movs	r2, #69	; 0x45
 8007576:	5c9b      	ldrb	r3, [r3, r2]
 8007578:	b25b      	sxtb	r3, r3
 800757a:	3301      	adds	r3, #1
 800757c:	d103      	bne.n	8007586 <xQueueSemaphoreTake+0xf4>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	2245      	movs	r2, #69	; 0x45
 8007582:	2100      	movs	r1, #0
 8007584:	5499      	strb	r1, [r3, r2]
 8007586:	f001 fde5 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800758a:	003a      	movs	r2, r7
 800758c:	230c      	movs	r3, #12
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	0011      	movs	r1, r2
 8007592:	0018      	movs	r0, r3
 8007594:	f000 ff70 	bl	8008478 <xTaskCheckForTimeOut>
 8007598:	1e03      	subs	r3, r0, #0
 800759a:	d12e      	bne.n	80075fa <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	0018      	movs	r0, r3
 80075a0:	f000 f9d5 	bl	800794e <prvIsQueueEmpty>
 80075a4:	1e03      	subs	r3, r0, #0
 80075a6:	d021      	beq.n	80075ec <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 80075b0:	f001 fdbe 	bl	8009130 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	0018      	movs	r0, r3
 80075ba:	f001 f8a7 	bl	800870c <xTaskPriorityInherit>
 80075be:	0003      	movs	r3, r0
 80075c0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80075c2:	f001 fdc7 	bl	8009154 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3324      	adds	r3, #36	; 0x24
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	0011      	movs	r1, r2
 80075ce:	0018      	movs	r0, r3
 80075d0:	f000 fe9e 	bl	8008310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 f95b 	bl	8007892 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075dc:	f000 fcf0 	bl	8007fc0 <xTaskResumeAll>
 80075e0:	1e03      	subs	r3, r0, #0
 80075e2:	d000      	beq.n	80075e6 <xQueueSemaphoreTake+0x154>
 80075e4:	e779      	b.n	80074da <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80075e6:	f001 fd93 	bl	8009110 <vPortYield>
 80075ea:	e776      	b.n	80074da <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	0018      	movs	r0, r3
 80075f0:	f000 f94f 	bl	8007892 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075f4:	f000 fce4 	bl	8007fc0 <xTaskResumeAll>
 80075f8:	e76f      	b.n	80074da <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 f948 	bl	8007892 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007602:	f000 fcdd 	bl	8007fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	0018      	movs	r0, r3
 800760a:	f000 f9a0 	bl	800794e <prvIsQueueEmpty>
 800760e:	1e03      	subs	r3, r0, #0
 8007610:	d100      	bne.n	8007614 <xQueueSemaphoreTake+0x182>
 8007612:	e762      	b.n	80074da <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800761a:	f001 fd89 	bl	8009130 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	0018      	movs	r0, r3
 8007622:	f000 f88f 	bl	8007744 <prvGetDisinheritPriorityAfterTimeout>
 8007626:	0003      	movs	r3, r0
 8007628:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	0011      	movs	r1, r2
 8007632:	0018      	movs	r0, r3
 8007634:	f001 f934 	bl	80088a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007638:	f001 fd8c 	bl	8009154 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800763c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800763e:	0018      	movs	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	b00a      	add	sp, #40	; 0x28
 8007644:	bd80      	pop	{r7, pc}

08007646 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007646:	b590      	push	{r4, r7, lr}
 8007648:	b08b      	sub	sp, #44	; 0x2c
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <xQueueReceiveFromISR+0x1a>
 800765c:	b672      	cpsid	i
 800765e:	e7fe      	b.n	800765e <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d103      	bne.n	800766e <xQueueReceiveFromISR+0x28>
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <xQueueReceiveFromISR+0x2c>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <xQueueReceiveFromISR+0x2e>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <xQueueReceiveFromISR+0x36>
 8007678:	b672      	cpsid	i
 800767a:	e7fe      	b.n	800767a <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800767c:	f001 fd82 	bl	8009184 <ulSetInterruptMaskFromISR>
 8007680:	0003      	movs	r3, r0
 8007682:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d032      	beq.n	80076f6 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007690:	2417      	movs	r4, #23
 8007692:	193b      	adds	r3, r7, r4
 8007694:	6a3a      	ldr	r2, [r7, #32]
 8007696:	2144      	movs	r1, #68	; 0x44
 8007698:	5c52      	ldrb	r2, [r2, r1]
 800769a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f8cf 	bl	8007846 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	1e5a      	subs	r2, r3, #1
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076b0:	193b      	adds	r3, r7, r4
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b25b      	sxtb	r3, r3
 80076b6:	3301      	adds	r3, #1
 80076b8:	d111      	bne.n	80076de <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d016      	beq.n	80076f0 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	3310      	adds	r3, #16
 80076c6:	0018      	movs	r0, r3
 80076c8:	f000 fe66 	bl	8008398 <xTaskRemoveFromEventList>
 80076cc:	1e03      	subs	r3, r0, #0
 80076ce:	d00f      	beq.n	80076f0 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00c      	beq.n	80076f0 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	e008      	b.n	80076f0 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80076de:	2317      	movs	r3, #23
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	b259      	sxtb	r1, r3
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2244      	movs	r2, #68	; 0x44
 80076ee:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80076f0:	2301      	movs	r3, #1
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
 80076f4:	e001      	b.n	80076fa <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f001 fd47 	bl	8009190 <vClearInterruptMaskFromISR>

	return xReturn;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007704:	0018      	movs	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	b00b      	add	sp, #44	; 0x2c
 800770a:	bd90      	pop	{r4, r7, pc}

0800770c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <vQueueDelete+0x16>
 800771e:	b672      	cpsid	i
 8007720:	e7fe      	b.n	8007720 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	0018      	movs	r0, r3
 8007726:	f000 f969 	bl	80079fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2246      	movs	r2, #70	; 0x46
 800772e:	5c9b      	ldrb	r3, [r3, r2]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	0018      	movs	r0, r3
 8007738:	f001 fe38 	bl	80093ac <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	46bd      	mov	sp, r7
 8007740:	b004      	add	sp, #16
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2238      	movs	r2, #56	; 0x38
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	e001      	b.n	8007766 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007762:	2300      	movs	r3, #0
 8007764:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007766:	68fb      	ldr	r3, [r7, #12]
	}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b004      	add	sp, #16
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10e      	bne.n	80077ac <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d14e      	bne.n	8007834 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	0018      	movs	r0, r3
 800779c:	f001 f824 	bl	80087e8 <xTaskPriorityDisinherit>
 80077a0:	0003      	movs	r3, r0
 80077a2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	605a      	str	r2, [r3, #4]
 80077aa:	e043      	b.n	8007834 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d119      	bne.n	80077e6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6898      	ldr	r0, [r3, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	0019      	movs	r1, r3
 80077be:	f001 ff21 	bl	8009604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	18d2      	adds	r2, r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d32b      	bcc.n	8007834 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	e026      	b.n	8007834 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	68d8      	ldr	r0, [r3, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	0019      	movs	r1, r3
 80077f2:	f001 ff07 	bl	8009604 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	425b      	negs	r3, r3
 8007800:	18d2      	adds	r2, r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d207      	bcs.n	8007822 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	425b      	negs	r3, r3
 800781c:	18d2      	adds	r2, r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b02      	cmp	r3, #2
 8007826:	d105      	bne.n	8007834 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	3b01      	subs	r3, #1
 8007832:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	0018      	movs	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	b006      	add	sp, #24
 8007844:	bd80      	pop	{r7, pc}

08007846 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d018      	beq.n	800788a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	18d2      	adds	r2, r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	429a      	cmp	r2, r3
 8007870:	d303      	bcc.n	800787a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68d9      	ldr	r1, [r3, #12]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	0018      	movs	r0, r3
 8007886:	f001 febd 	bl	8009604 <memcpy>
	}
}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	46bd      	mov	sp, r7
 800788e:	b002      	add	sp, #8
 8007890:	bd80      	pop	{r7, pc}

08007892 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800789a:	f001 fc49 	bl	8009130 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800789e:	230f      	movs	r3, #15
 80078a0:	18fb      	adds	r3, r7, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	2145      	movs	r1, #69	; 0x45
 80078a6:	5c52      	ldrb	r2, [r2, r1]
 80078a8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078aa:	e013      	b.n	80078d4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d016      	beq.n	80078e2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3324      	adds	r3, #36	; 0x24
 80078b8:	0018      	movs	r0, r3
 80078ba:	f000 fd6d 	bl	8008398 <xTaskRemoveFromEventList>
 80078be:	1e03      	subs	r3, r0, #0
 80078c0:	d001      	beq.n	80078c6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078c2:	f000 fe29 	bl	8008518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078c6:	210f      	movs	r1, #15
 80078c8:	187b      	adds	r3, r7, r1
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d4:	230f      	movs	r3, #15
 80078d6:	18fb      	adds	r3, r7, r3
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dce5      	bgt.n	80078ac <prvUnlockQueue+0x1a>
 80078e0:	e000      	b.n	80078e4 <prvUnlockQueue+0x52>
					break;
 80078e2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2245      	movs	r2, #69	; 0x45
 80078e8:	21ff      	movs	r1, #255	; 0xff
 80078ea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80078ec:	f001 fc32 	bl	8009154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80078f0:	f001 fc1e 	bl	8009130 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80078f4:	230e      	movs	r3, #14
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	2144      	movs	r1, #68	; 0x44
 80078fc:	5c52      	ldrb	r2, [r2, r1]
 80078fe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007900:	e013      	b.n	800792a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3310      	adds	r3, #16
 800790e:	0018      	movs	r0, r3
 8007910:	f000 fd42 	bl	8008398 <xTaskRemoveFromEventList>
 8007914:	1e03      	subs	r3, r0, #0
 8007916:	d001      	beq.n	800791c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8007918:	f000 fdfe 	bl	8008518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800791c:	210e      	movs	r1, #14
 800791e:	187b      	adds	r3, r7, r1
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	3b01      	subs	r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	187b      	adds	r3, r7, r1
 8007928:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800792a:	230e      	movs	r3, #14
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b25b      	sxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	dce5      	bgt.n	8007902 <prvUnlockQueue+0x70>
 8007936:	e000      	b.n	800793a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8007938:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2244      	movs	r2, #68	; 0x44
 800793e:	21ff      	movs	r1, #255	; 0xff
 8007940:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8007942:	f001 fc07 	bl	8009154 <vPortExitCritical>
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46bd      	mov	sp, r7
 800794a:	b004      	add	sp, #16
 800794c:	bd80      	pop	{r7, pc}

0800794e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007956:	f001 fbeb 	bl	8009130 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795e:	2b00      	cmp	r3, #0
 8007960:	d102      	bne.n	8007968 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e001      	b.n	800796c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800796c:	f001 fbf2 	bl	8009154 <vPortExitCritical>

	return xReturn;
 8007970:	68fb      	ldr	r3, [r7, #12]
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b004      	add	sp, #16
 8007978:	bd80      	pop	{r7, pc}

0800797a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007982:	f001 fbd5 	bl	8009130 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798e:	429a      	cmp	r2, r3
 8007990:	d102      	bne.n	8007998 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007992:	2301      	movs	r3, #1
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e001      	b.n	800799c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800799c:	f001 fbda 	bl	8009154 <vPortExitCritical>

	return xReturn;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	0018      	movs	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	b004      	add	sp, #16
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079b6:	2300      	movs	r3, #0
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e015      	b.n	80079e8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079bc:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <vQueueAddToRegistry+0x4c>)
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	00d2      	lsls	r2, r2, #3
 80079c2:	58d3      	ldr	r3, [r2, r3]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10c      	bne.n	80079e2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <vQueueAddToRegistry+0x4c>)
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	00d2      	lsls	r2, r2, #3
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079d2:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <vQueueAddToRegistry+0x4c>)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	18d3      	adds	r3, r2, r3
 80079da:	3304      	adds	r3, #4
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079e0:	e006      	b.n	80079f0 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b07      	cmp	r3, #7
 80079ec:	d9e6      	bls.n	80079bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	46c0      	nop			; (mov r8, r8)
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b004      	add	sp, #16
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000adc 	.word	0x20000adc

080079fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e018      	b.n	8007a3c <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a0a:	4a10      	ldr	r2, [pc, #64]	; (8007a4c <vQueueUnregisterQueue+0x50>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	18d3      	adds	r3, r2, r3
 8007a12:	3304      	adds	r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d10c      	bne.n	8007a36 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <vQueueUnregisterQueue+0x50>)
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	00d2      	lsls	r2, r2, #3
 8007a22:	2100      	movs	r1, #0
 8007a24:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <vQueueUnregisterQueue+0x50>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	18d3      	adds	r3, r2, r3
 8007a2e:	3304      	adds	r3, #4
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
				break;
 8007a34:	e006      	b.n	8007a44 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b07      	cmp	r3, #7
 8007a40:	d9e3      	bls.n	8007a0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	46c0      	nop			; (mov r8, r8)
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b004      	add	sp, #16
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000adc 	.word	0x20000adc

08007a50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a60:	f001 fb66 	bl	8009130 <vPortEnterCritical>
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2244      	movs	r2, #68	; 0x44
 8007a68:	5c9b      	ldrb	r3, [r3, r2]
 8007a6a:	b25b      	sxtb	r3, r3
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	d103      	bne.n	8007a78 <vQueueWaitForMessageRestricted+0x28>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2244      	movs	r2, #68	; 0x44
 8007a74:	2100      	movs	r1, #0
 8007a76:	5499      	strb	r1, [r3, r2]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2245      	movs	r2, #69	; 0x45
 8007a7c:	5c9b      	ldrb	r3, [r3, r2]
 8007a7e:	b25b      	sxtb	r3, r3
 8007a80:	3301      	adds	r3, #1
 8007a82:	d103      	bne.n	8007a8c <vQueueWaitForMessageRestricted+0x3c>
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2245      	movs	r2, #69	; 0x45
 8007a88:	2100      	movs	r1, #0
 8007a8a:	5499      	strb	r1, [r3, r2]
 8007a8c:	f001 fb62 	bl	8009154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f000 fc53 	bl	800834c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7ff fef2 	bl	8007892 <prvUnlockQueue>
	}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b006      	add	sp, #24
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ab6:	b590      	push	{r4, r7, lr}
 8007ab8:	b08d      	sub	sp, #52	; 0x34
 8007aba:	af04      	add	r7, sp, #16
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <xTaskCreateStatic+0x18>
 8007aca:	b672      	cpsid	i
 8007acc:	e7fe      	b.n	8007acc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <xTaskCreateStatic+0x22>
 8007ad4:	b672      	cpsid	i
 8007ad6:	e7fe      	b.n	8007ad6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ad8:	23bc      	movs	r3, #188	; 0xbc
 8007ada:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2bbc      	cmp	r3, #188	; 0xbc
 8007ae0:	d001      	beq.n	8007ae6 <xTaskCreateStatic+0x30>
 8007ae2:	b672      	cpsid	i
 8007ae4:	e7fe      	b.n	8007ae4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d020      	beq.n	8007b2e <xTaskCreateStatic+0x78>
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01d      	beq.n	8007b2e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	22b9      	movs	r2, #185	; 0xb9
 8007b00:	2102      	movs	r1, #2
 8007b02:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b04:	683c      	ldr	r4, [r7, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	68b9      	ldr	r1, [r7, #8]
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9303      	str	r3, [sp, #12]
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	9302      	str	r3, [sp, #8]
 8007b14:	2318      	movs	r3, #24
 8007b16:	18fb      	adds	r3, r7, r3
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	0023      	movs	r3, r4
 8007b20:	f000 f858 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 f8ec 	bl	8007d04 <prvAddNewTaskToReadyList>
 8007b2c:	e001      	b.n	8007b32 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b32:	69bb      	ldr	r3, [r7, #24]
	}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b009      	add	sp, #36	; 0x24
 8007b3a:	bd90      	pop	{r4, r7, pc}

08007b3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b08d      	sub	sp, #52	; 0x34
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	1dbb      	adds	r3, r7, #6
 8007b4a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4c:	1dbb      	adds	r3, r7, #6
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	0018      	movs	r0, r3
 8007b54:	f001 fb84 	bl	8009260 <pvPortMalloc>
 8007b58:	0003      	movs	r3, r0
 8007b5a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d010      	beq.n	8007b84 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007b62:	20bc      	movs	r0, #188	; 0xbc
 8007b64:	f001 fb7c 	bl	8009260 <pvPortMalloc>
 8007b68:	0003      	movs	r3, r0
 8007b6a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
 8007b78:	e006      	b.n	8007b88 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f001 fc15 	bl	80093ac <vPortFree>
 8007b82:	e001      	b.n	8007b88 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01a      	beq.n	8007bc4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	22b9      	movs	r2, #185	; 0xb9
 8007b92:	2100      	movs	r1, #0
 8007b94:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b96:	1dbb      	adds	r3, r7, #6
 8007b98:	881a      	ldrh	r2, [r3, #0]
 8007b9a:	683c      	ldr	r4, [r7, #0]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	0023      	movs	r3, r4
 8007bb2:	f000 f80f 	bl	8007bd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	0018      	movs	r0, r3
 8007bba:	f000 f8a3 	bl	8007d04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e002      	b.n	8007bca <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	425b      	negs	r3, r3
 8007bc8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bca:	69bb      	ldr	r3, [r7, #24]
	}
 8007bcc:	0018      	movs	r0, r3
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b009      	add	sp, #36	; 0x24
 8007bd2:	bd90      	pop	{r4, r7, pc}

08007bd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	001a      	movs	r2, r3
 8007bec:	21a5      	movs	r1, #165	; 0xa5
 8007bee:	f001 fd25 	bl	800963c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	493e      	ldr	r1, [pc, #248]	; (8007cf4 <prvInitialiseNewTask+0x120>)
 8007bfa:	468c      	mov	ip, r1
 8007bfc:	4463      	add	r3, ip
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	18d3      	adds	r3, r2, r3
 8007c02:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2207      	movs	r2, #7
 8007c08:	4393      	bics	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	2207      	movs	r2, #7
 8007c10:	4013      	ands	r3, r2
 8007c12:	d001      	beq.n	8007c18 <prvInitialiseNewTask+0x44>
 8007c14:	b672      	cpsid	i
 8007c16:	e7fe      	b.n	8007c16 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	e013      	b.n	8007c46 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	18d3      	adds	r3, r2, r3
 8007c24:	7818      	ldrb	r0, [r3, #0]
 8007c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c28:	2134      	movs	r1, #52	; 0x34
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	18d3      	adds	r3, r2, r3
 8007c2e:	185b      	adds	r3, r3, r1
 8007c30:	1c02      	adds	r2, r0, #0
 8007c32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	18d3      	adds	r3, r2, r3
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	3301      	adds	r3, #1
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b0f      	cmp	r3, #15
 8007c4a:	d9e8      	bls.n	8007c1e <prvInitialiseNewTask+0x4a>
 8007c4c:	e000      	b.n	8007c50 <prvInitialiseNewTask+0x7c>
		{
			break;
 8007c4e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2243      	movs	r2, #67	; 0x43
 8007c54:	2100      	movs	r1, #0
 8007c56:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	2b37      	cmp	r3, #55	; 0x37
 8007c5c:	d901      	bls.n	8007c62 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c5e:	2337      	movs	r3, #55	; 0x37
 8007c60:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	6a3a      	ldr	r2, [r7, #32]
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	2200      	movs	r2, #0
 8007c72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	3304      	adds	r3, #4
 8007c78:	0018      	movs	r0, r3
 8007c7a:	f7fe ffeb 	bl	8006c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	3318      	adds	r3, #24
 8007c82:	0018      	movs	r0, r3
 8007c84:	f7fe ffe6 	bl	8006c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	2238      	movs	r2, #56	; 0x38
 8007c92:	1ad2      	subs	r2, r2, r3
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	22b4      	movs	r2, #180	; 0xb4
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	22b8      	movs	r2, #184	; 0xb8
 8007caa:	2100      	movs	r1, #0
 8007cac:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	3354      	adds	r3, #84	; 0x54
 8007cb2:	2260      	movs	r2, #96	; 0x60
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f001 fcc0 	bl	800963c <memset>
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <prvInitialiseNewTask+0x124>)
 8007cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	4a0d      	ldr	r2, [pc, #52]	; (8007cfc <prvInitialiseNewTask+0x128>)
 8007cc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	4a0d      	ldr	r2, [pc, #52]	; (8007d00 <prvInitialiseNewTask+0x12c>)
 8007ccc:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	68f9      	ldr	r1, [r7, #12]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f001 f98d 	bl	8008ff4 <pxPortInitialiseStack>
 8007cda:	0002      	movs	r2, r0
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cec:	46c0      	nop			; (mov r8, r8)
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b006      	add	sp, #24
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	3fffffff 	.word	0x3fffffff
 8007cf8:	0800a390 	.word	0x0800a390
 8007cfc:	0800a3b0 	.word	0x0800a3b0
 8007d00:	0800a370 	.word	0x0800a370

08007d04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d0c:	f001 fa10 	bl	8009130 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d10:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <prvAddNewTaskToReadyList+0xb8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	4b29      	ldr	r3, [pc, #164]	; (8007dbc <prvAddNewTaskToReadyList+0xb8>)
 8007d18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007d1a:	4b29      	ldr	r3, [pc, #164]	; (8007dc0 <prvAddNewTaskToReadyList+0xbc>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d22:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <prvAddNewTaskToReadyList+0xbc>)
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d28:	4b24      	ldr	r3, [pc, #144]	; (8007dbc <prvAddNewTaskToReadyList+0xb8>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d110      	bne.n	8007d52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d30:	f000 fc0c 	bl	800854c <prvInitialiseTaskLists>
 8007d34:	e00d      	b.n	8007d52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d36:	4b23      	ldr	r3, [pc, #140]	; (8007dc4 <prvAddNewTaskToReadyList+0xc0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d3e:	4b20      	ldr	r3, [pc, #128]	; (8007dc0 <prvAddNewTaskToReadyList+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d802      	bhi.n	8007d52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d4c:	4b1c      	ldr	r3, [pc, #112]	; (8007dc0 <prvAddNewTaskToReadyList+0xbc>)
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d52:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <prvAddNewTaskToReadyList+0xc4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <prvAddNewTaskToReadyList+0xc4>)
 8007d5a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <prvAddNewTaskToReadyList+0xc4>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <prvAddNewTaskToReadyList+0xc8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d903      	bls.n	8007d78 <prvAddNewTaskToReadyList+0x74>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b15      	ldr	r3, [pc, #84]	; (8007dcc <prvAddNewTaskToReadyList+0xc8>)
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	0013      	movs	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	189b      	adds	r3, r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4a12      	ldr	r2, [pc, #72]	; (8007dd0 <prvAddNewTaskToReadyList+0xcc>)
 8007d86:	189a      	adds	r2, r3, r2
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	0019      	movs	r1, r3
 8007d8e:	0010      	movs	r0, r2
 8007d90:	f7fe ff6b 	bl	8006c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d94:	f001 f9de 	bl	8009154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvAddNewTaskToReadyList+0xc0>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvAddNewTaskToReadyList+0xbc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d201      	bcs.n	8007db2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007dae:	f001 f9af 	bl	8009110 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b002      	add	sp, #8
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	20000ff0 	.word	0x20000ff0
 8007dc0:	20000b1c 	.word	0x20000b1c
 8007dc4:	20000ffc 	.word	0x20000ffc
 8007dc8:	2000100c 	.word	0x2000100c
 8007dcc:	20000ff8 	.word	0x20000ff8
 8007dd0:	20000b20 	.word	0x20000b20

08007dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d010      	beq.n	8007e08 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007de6:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <vTaskDelay+0x48>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <vTaskDelay+0x1e>
 8007dee:	b672      	cpsid	i
 8007df0:	e7fe      	b.n	8007df0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007df2:	f000 f8d9 	bl	8007fa8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2100      	movs	r1, #0
 8007dfa:	0018      	movs	r0, r3
 8007dfc:	f000 fdd6 	bl	80089ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e00:	f000 f8de 	bl	8007fc0 <xTaskResumeAll>
 8007e04:	0003      	movs	r3, r0
 8007e06:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007e0e:	f001 f97f 	bl	8009110 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b004      	add	sp, #16
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	20001018 	.word	0x20001018

08007e20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e28:	f001 f982 	bl	8009130 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d102      	bne.n	8007e38 <vTaskSuspend+0x18>
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <vTaskSuspend+0xb8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	e000      	b.n	8007e3a <vTaskSuspend+0x1a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	0018      	movs	r0, r3
 8007e42:	f7fe ff6a 	bl	8006d1a <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3318      	adds	r3, #24
 8007e52:	0018      	movs	r0, r3
 8007e54:	f7fe ff61 	bl	8006d1a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1d1a      	adds	r2, r3, #4
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <vTaskSuspend+0xbc>)
 8007e5e:	0011      	movs	r1, r2
 8007e60:	0018      	movs	r0, r3
 8007e62:	f7fe ff02 	bl	8006c6a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	22b8      	movs	r2, #184	; 0xb8
 8007e6a:	5c9b      	ldrb	r3, [r3, r2]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d103      	bne.n	8007e7a <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	22b8      	movs	r2, #184	; 0xb8
 8007e76:	2100      	movs	r1, #0
 8007e78:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007e7a:	f001 f96b 	bl	8009154 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <vTaskSuspend+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007e86:	f001 f953 	bl	8009130 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007e8a:	f000 fbff 	bl	800868c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007e8e:	f001 f961 	bl	8009154 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <vTaskSuspend+0xb8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d118      	bne.n	8007ece <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <vTaskSuspend+0xc0>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <vTaskSuspend+0xc4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <vTaskSuspend+0x90>
 8007eac:	b672      	cpsid	i
 8007eae:	e7fe      	b.n	8007eae <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 8007eb0:	f001 f92e 	bl	8009110 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eb4:	e00b      	b.n	8007ece <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <vTaskSuspend+0xbc>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <vTaskSuspend+0xc8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d103      	bne.n	8007eca <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <vTaskSuspend+0xb8>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
	}
 8007ec8:	e001      	b.n	8007ece <vTaskSuspend+0xae>
					vTaskSwitchContext();
 8007eca:	f000 f9c7 	bl	800825c <vTaskSwitchContext>
	}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	b004      	add	sp, #16
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	20000b1c 	.word	0x20000b1c
 8007edc:	20000fdc 	.word	0x20000fdc
 8007ee0:	20000ffc 	.word	0x20000ffc
 8007ee4:	20001018 	.word	0x20001018
 8007ee8:	20000ff0 	.word	0x20000ff0

08007eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b089      	sub	sp, #36	; 0x24
 8007ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007efa:	003a      	movs	r2, r7
 8007efc:	1d39      	adds	r1, r7, #4
 8007efe:	2308      	movs	r3, #8
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	0018      	movs	r0, r3
 8007f04:	f7fe fe58 	bl	8006bb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f08:	683c      	ldr	r4, [r7, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	491e      	ldr	r1, [pc, #120]	; (8007f88 <vTaskStartScheduler+0x9c>)
 8007f10:	481e      	ldr	r0, [pc, #120]	; (8007f8c <vTaskStartScheduler+0xa0>)
 8007f12:	9202      	str	r2, [sp, #8]
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	2300      	movs	r3, #0
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	0022      	movs	r2, r4
 8007f1e:	f7ff fdca 	bl	8007ab6 <xTaskCreateStatic>
 8007f22:	0002      	movs	r2, r0
 8007f24:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <vTaskStartScheduler+0xa4>)
 8007f26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f28:	4b19      	ldr	r3, [pc, #100]	; (8007f90 <vTaskStartScheduler+0xa4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e001      	b.n	8007f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d103      	bne.n	8007f48 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8007f40:	f000 fd88 	bl	8008a54 <xTimerCreateTimerTask>
 8007f44:	0003      	movs	r3, r0
 8007f46:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d113      	bne.n	8007f76 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007f4e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f50:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <vTaskStartScheduler+0xa8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3354      	adds	r3, #84	; 0x54
 8007f56:	001a      	movs	r2, r3
 8007f58:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <vTaskStartScheduler+0xac>)
 8007f5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <vTaskStartScheduler+0xb0>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	4252      	negs	r2, r2
 8007f62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <vTaskStartScheduler+0xb4>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <vTaskStartScheduler+0xb8>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f70:	f001 f8aa 	bl	80090c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f74:	e004      	b.n	8007f80 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <vTaskStartScheduler+0x94>
 8007f7c:	b672      	cpsid	i
 8007f7e:	e7fe      	b.n	8007f7e <vTaskStartScheduler+0x92>
}
 8007f80:	46c0      	nop			; (mov r8, r8)
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b005      	add	sp, #20
 8007f86:	bd90      	pop	{r4, r7, pc}
 8007f88:	0800a19c 	.word	0x0800a19c
 8007f8c:	0800852d 	.word	0x0800852d
 8007f90:	20001014 	.word	0x20001014
 8007f94:	20000b1c 	.word	0x20000b1c
 8007f98:	20000010 	.word	0x20000010
 8007f9c:	20001010 	.word	0x20001010
 8007fa0:	20000ffc 	.word	0x20000ffc
 8007fa4:	20000ff4 	.word	0x20000ff4

08007fa8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007fac:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <vTaskSuspendAll+0x14>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <vTaskSuspendAll+0x14>)
 8007fb4:	601a      	str	r2, [r3, #0]
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20001018 	.word	0x20001018

08007fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fce:	4b3a      	ldr	r3, [pc, #232]	; (80080b8 <xTaskResumeAll+0xf8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <xTaskResumeAll+0x1a>
 8007fd6:	b672      	cpsid	i
 8007fd8:	e7fe      	b.n	8007fd8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fda:	f001 f8a9 	bl	8009130 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fde:	4b36      	ldr	r3, [pc, #216]	; (80080b8 <xTaskResumeAll+0xf8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	4b34      	ldr	r3, [pc, #208]	; (80080b8 <xTaskResumeAll+0xf8>)
 8007fe6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe8:	4b33      	ldr	r3, [pc, #204]	; (80080b8 <xTaskResumeAll+0xf8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d15b      	bne.n	80080a8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ff0:	4b32      	ldr	r3, [pc, #200]	; (80080bc <xTaskResumeAll+0xfc>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d057      	beq.n	80080a8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ff8:	e02f      	b.n	800805a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <xTaskResumeAll+0x100>)
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3318      	adds	r3, #24
 8008006:	0018      	movs	r0, r3
 8008008:	f7fe fe87 	bl	8006d1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3304      	adds	r3, #4
 8008010:	0018      	movs	r0, r3
 8008012:	f7fe fe82 	bl	8006d1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	4b2a      	ldr	r3, [pc, #168]	; (80080c4 <xTaskResumeAll+0x104>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d903      	bls.n	800802a <xTaskResumeAll+0x6a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <xTaskResumeAll+0x104>)
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	0013      	movs	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	189b      	adds	r3, r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <xTaskResumeAll+0x108>)
 8008038:	189a      	adds	r2, r3, r2
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3304      	adds	r3, #4
 800803e:	0019      	movs	r1, r3
 8008040:	0010      	movs	r0, r2
 8008042:	f7fe fe12 	bl	8006c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	4b20      	ldr	r3, [pc, #128]	; (80080cc <xTaskResumeAll+0x10c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	429a      	cmp	r2, r3
 8008052:	d302      	bcc.n	800805a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008054:	4b1e      	ldr	r3, [pc, #120]	; (80080d0 <xTaskResumeAll+0x110>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800805a:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <xTaskResumeAll+0x100>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1cb      	bne.n	8007ffa <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008068:	f000 fb10 	bl	800868c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800806c:	4b19      	ldr	r3, [pc, #100]	; (80080d4 <xTaskResumeAll+0x114>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00f      	beq.n	8008098 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008078:	f000 f83c 	bl	80080f4 <xTaskIncrementTick>
 800807c:	1e03      	subs	r3, r0, #0
 800807e:	d002      	beq.n	8008086 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <xTaskResumeAll+0x110>)
 8008082:	2201      	movs	r2, #1
 8008084:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3b01      	subs	r3, #1
 800808a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f2      	bne.n	8008078 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008092:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <xTaskResumeAll+0x114>)
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <xTaskResumeAll+0x110>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080a4:	f001 f834 	bl	8009110 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080a8:	f001 f854 	bl	8009154 <vPortExitCritical>

	return xAlreadyYielded;
 80080ac:	68bb      	ldr	r3, [r7, #8]
}
 80080ae:	0018      	movs	r0, r3
 80080b0:	46bd      	mov	sp, r7
 80080b2:	b004      	add	sp, #16
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			; (mov r8, r8)
 80080b8:	20001018 	.word	0x20001018
 80080bc:	20000ff0 	.word	0x20000ff0
 80080c0:	20000fb0 	.word	0x20000fb0
 80080c4:	20000ff8 	.word	0x20000ff8
 80080c8:	20000b20 	.word	0x20000b20
 80080cc:	20000b1c 	.word	0x20000b1c
 80080d0:	20001004 	.word	0x20001004
 80080d4:	20001000 	.word	0x20001000

080080d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080de:	4b04      	ldr	r3, [pc, #16]	; (80080f0 <xTaskGetTickCount+0x18>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080e4:	687b      	ldr	r3, [r7, #4]
}
 80080e6:	0018      	movs	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b002      	add	sp, #8
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	46c0      	nop			; (mov r8, r8)
 80080f0:	20000ff4 	.word	0x20000ff4

080080f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080fe:	4b4c      	ldr	r3, [pc, #304]	; (8008230 <xTaskIncrementTick+0x13c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d000      	beq.n	8008108 <xTaskIncrementTick+0x14>
 8008106:	e083      	b.n	8008210 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008108:	4b4a      	ldr	r3, [pc, #296]	; (8008234 <xTaskIncrementTick+0x140>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3301      	adds	r3, #1
 800810e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008110:	4b48      	ldr	r3, [pc, #288]	; (8008234 <xTaskIncrementTick+0x140>)
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d117      	bne.n	800814c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800811c:	4b46      	ldr	r3, [pc, #280]	; (8008238 <xTaskIncrementTick+0x144>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <xTaskIncrementTick+0x36>
 8008126:	b672      	cpsid	i
 8008128:	e7fe      	b.n	8008128 <xTaskIncrementTick+0x34>
 800812a:	4b43      	ldr	r3, [pc, #268]	; (8008238 <xTaskIncrementTick+0x144>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	4b42      	ldr	r3, [pc, #264]	; (800823c <xTaskIncrementTick+0x148>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	4b40      	ldr	r3, [pc, #256]	; (8008238 <xTaskIncrementTick+0x144>)
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	4b40      	ldr	r3, [pc, #256]	; (800823c <xTaskIncrementTick+0x148>)
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	4b40      	ldr	r3, [pc, #256]	; (8008240 <xTaskIncrementTick+0x14c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <xTaskIncrementTick+0x14c>)
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f000 faa0 	bl	800868c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800814c:	4b3d      	ldr	r3, [pc, #244]	; (8008244 <xTaskIncrementTick+0x150>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	d34e      	bcc.n	80081f4 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008156:	4b38      	ldr	r3, [pc, #224]	; (8008238 <xTaskIncrementTick+0x144>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <xTaskIncrementTick+0x70>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <xTaskIncrementTick+0x72>
 8008164:	2300      	movs	r3, #0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d004      	beq.n	8008174 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800816a:	4b36      	ldr	r3, [pc, #216]	; (8008244 <xTaskIncrementTick+0x150>)
 800816c:	2201      	movs	r2, #1
 800816e:	4252      	negs	r2, r2
 8008170:	601a      	str	r2, [r3, #0]
					break;
 8008172:	e03f      	b.n	80081f4 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008174:	4b30      	ldr	r3, [pc, #192]	; (8008238 <xTaskIncrementTick+0x144>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	429a      	cmp	r2, r3
 800818a:	d203      	bcs.n	8008194 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800818c:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <xTaskIncrementTick+0x150>)
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	601a      	str	r2, [r3, #0]
						break;
 8008192:	e02f      	b.n	80081f4 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	3304      	adds	r3, #4
 8008198:	0018      	movs	r0, r3
 800819a:	f7fe fdbe 	bl	8006d1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3318      	adds	r3, #24
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7fe fdb5 	bl	8006d1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	4b24      	ldr	r3, [pc, #144]	; (8008248 <xTaskIncrementTick+0x154>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d903      	bls.n	80081c4 <xTaskIncrementTick+0xd0>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	4b21      	ldr	r3, [pc, #132]	; (8008248 <xTaskIncrementTick+0x154>)
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	0013      	movs	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	189b      	adds	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	4a1e      	ldr	r2, [pc, #120]	; (800824c <xTaskIncrementTick+0x158>)
 80081d2:	189a      	adds	r2, r3, r2
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	3304      	adds	r3, #4
 80081d8:	0019      	movs	r1, r3
 80081da:	0010      	movs	r0, r2
 80081dc:	f7fe fd45 	bl	8006c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <xTaskIncrementTick+0x15c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d3b3      	bcc.n	8008156 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081f2:	e7b0      	b.n	8008156 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081f4:	4b16      	ldr	r3, [pc, #88]	; (8008250 <xTaskIncrementTick+0x15c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fa:	4914      	ldr	r1, [pc, #80]	; (800824c <xTaskIncrementTick+0x158>)
 80081fc:	0013      	movs	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	189b      	adds	r3, r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	585b      	ldr	r3, [r3, r1]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d907      	bls.n	800821a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e004      	b.n	800821a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008210:	4b10      	ldr	r3, [pc, #64]	; (8008254 <xTaskIncrementTick+0x160>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <xTaskIncrementTick+0x160>)
 8008218:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800821a:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <xTaskIncrementTick+0x164>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8008222:	2301      	movs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008226:	697b      	ldr	r3, [r7, #20]
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b006      	add	sp, #24
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20001018 	.word	0x20001018
 8008234:	20000ff4 	.word	0x20000ff4
 8008238:	20000fa8 	.word	0x20000fa8
 800823c:	20000fac 	.word	0x20000fac
 8008240:	20001008 	.word	0x20001008
 8008244:	20001010 	.word	0x20001010
 8008248:	20000ff8 	.word	0x20000ff8
 800824c:	20000b20 	.word	0x20000b20
 8008250:	20000b1c 	.word	0x20000b1c
 8008254:	20001000 	.word	0x20001000
 8008258:	20001004 	.word	0x20001004

0800825c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <vTaskSwitchContext+0x9c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <vTaskSwitchContext+0xa0>)
 800826c:	2201      	movs	r2, #1
 800826e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008270:	e03d      	b.n	80082ee <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8008272:	4b22      	ldr	r3, [pc, #136]	; (80082fc <vTaskSwitchContext+0xa0>)
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008278:	4b21      	ldr	r3, [pc, #132]	; (8008300 <vTaskSwitchContext+0xa4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	e007      	b.n	8008290 <vTaskSwitchContext+0x34>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <vTaskSwitchContext+0x2e>
 8008286:	b672      	cpsid	i
 8008288:	e7fe      	b.n	8008288 <vTaskSwitchContext+0x2c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3b01      	subs	r3, #1
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	491c      	ldr	r1, [pc, #112]	; (8008304 <vTaskSwitchContext+0xa8>)
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	0013      	movs	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	189b      	adds	r3, r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	585b      	ldr	r3, [r3, r1]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0ee      	beq.n	8008280 <vTaskSwitchContext+0x24>
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	0013      	movs	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	189b      	adds	r3, r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <vTaskSwitchContext+0xa8>)
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	605a      	str	r2, [r3, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d104      	bne.n	80082d2 <vTaskSwitchContext+0x76>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <vTaskSwitchContext+0xac>)
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	4b08      	ldr	r3, [pc, #32]	; (8008300 <vTaskSwitchContext+0xa4>)
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <vTaskSwitchContext+0xac>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3354      	adds	r3, #84	; 0x54
 80082e8:	001a      	movs	r2, r3
 80082ea:	4b08      	ldr	r3, [pc, #32]	; (800830c <vTaskSwitchContext+0xb0>)
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	46c0      	nop			; (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	b002      	add	sp, #8
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	20001018 	.word	0x20001018
 80082fc:	20001004 	.word	0x20001004
 8008300:	20000ff8 	.word	0x20000ff8
 8008304:	20000b20 	.word	0x20000b20
 8008308:	20000b1c 	.word	0x20000b1c
 800830c:	20000010 	.word	0x20000010

08008310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <vTaskPlaceOnEventList+0x14>
 8008320:	b672      	cpsid	i
 8008322:	e7fe      	b.n	8008322 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008324:	4b08      	ldr	r3, [pc, #32]	; (8008348 <vTaskPlaceOnEventList+0x38>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3318      	adds	r3, #24
 800832a:	001a      	movs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	0011      	movs	r1, r2
 8008330:	0018      	movs	r0, r3
 8008332:	f7fe fcbc 	bl	8006cae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	0018      	movs	r0, r3
 800833c:	f000 fb36 	bl	80089ac <prvAddCurrentTaskToDelayedList>
}
 8008340:	46c0      	nop			; (mov r8, r8)
 8008342:	46bd      	mov	sp, r7
 8008344:	b002      	add	sp, #8
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000b1c 	.word	0x20000b1c

0800834c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <vTaskPlaceOnEventListRestricted+0x16>
 800835e:	b672      	cpsid	i
 8008360:	e7fe      	b.n	8008360 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008362:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <vTaskPlaceOnEventListRestricted+0x48>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3318      	adds	r3, #24
 8008368:	001a      	movs	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	0011      	movs	r1, r2
 800836e:	0018      	movs	r0, r3
 8008370:	f7fe fc7b 	bl	8006c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800837a:	2301      	movs	r3, #1
 800837c:	425b      	negs	r3, r3
 800837e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	0011      	movs	r1, r2
 8008386:	0018      	movs	r0, r3
 8008388:	f000 fb10 	bl	80089ac <prvAddCurrentTaskToDelayedList>
	}
 800838c:	46c0      	nop			; (mov r8, r8)
 800838e:	46bd      	mov	sp, r7
 8008390:	b004      	add	sp, #16
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000b1c 	.word	0x20000b1c

08008398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <xTaskRemoveFromEventList+0x1a>
 80083ae:	b672      	cpsid	i
 80083b0:	e7fe      	b.n	80083b0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3318      	adds	r3, #24
 80083b6:	0018      	movs	r0, r3
 80083b8:	f7fe fcaf 	bl	8006d1a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083bc:	4b1e      	ldr	r3, [pc, #120]	; (8008438 <xTaskRemoveFromEventList+0xa0>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d11d      	bne.n	8008400 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	3304      	adds	r3, #4
 80083c8:	0018      	movs	r0, r3
 80083ca:	f7fe fca6 	bl	8006d1a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d2:	4b1a      	ldr	r3, [pc, #104]	; (800843c <xTaskRemoveFromEventList+0xa4>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <xTaskRemoveFromEventList+0x4a>
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083de:	4b17      	ldr	r3, [pc, #92]	; (800843c <xTaskRemoveFromEventList+0xa4>)
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	0013      	movs	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a14      	ldr	r2, [pc, #80]	; (8008440 <xTaskRemoveFromEventList+0xa8>)
 80083f0:	189a      	adds	r2, r3, r2
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	3304      	adds	r3, #4
 80083f6:	0019      	movs	r1, r3
 80083f8:	0010      	movs	r0, r2
 80083fa:	f7fe fc36 	bl	8006c6a <vListInsertEnd>
 80083fe:	e007      	b.n	8008410 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3318      	adds	r3, #24
 8008404:	001a      	movs	r2, r3
 8008406:	4b0f      	ldr	r3, [pc, #60]	; (8008444 <xTaskRemoveFromEventList+0xac>)
 8008408:	0011      	movs	r1, r2
 800840a:	0018      	movs	r0, r3
 800840c:	f7fe fc2d 	bl	8006c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <xTaskRemoveFromEventList+0xb0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	429a      	cmp	r2, r3
 800841c:	d905      	bls.n	800842a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800841e:	2301      	movs	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <xTaskRemoveFromEventList+0xb4>)
 8008424:	2201      	movs	r2, #1
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	e001      	b.n	800842e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	0018      	movs	r0, r3
 8008432:	46bd      	mov	sp, r7
 8008434:	b004      	add	sp, #16
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20001018 	.word	0x20001018
 800843c:	20000ff8 	.word	0x20000ff8
 8008440:	20000b20 	.word	0x20000b20
 8008444:	20000fb0 	.word	0x20000fb0
 8008448:	20000b1c 	.word	0x20000b1c
 800844c:	20001004 	.word	0x20001004

08008450 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <vTaskInternalSetTimeOutState+0x20>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <vTaskInternalSetTimeOutState+0x24>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	605a      	str	r2, [r3, #4]
}
 8008468:	46c0      	nop			; (mov r8, r8)
 800846a:	46bd      	mov	sp, r7
 800846c:	b002      	add	sp, #8
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20001008 	.word	0x20001008
 8008474:	20000ff4 	.word	0x20000ff4

08008478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <xTaskCheckForTimeOut+0x14>
 8008488:	b672      	cpsid	i
 800848a:	e7fe      	b.n	800848a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <xTaskCheckForTimeOut+0x1e>
 8008492:	b672      	cpsid	i
 8008494:	e7fe      	b.n	8008494 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008496:	f000 fe4b 	bl	8009130 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800849a:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <xTaskCheckForTimeOut+0x98>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	d102      	bne.n	80084b8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	e024      	b.n	8008502 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	4b15      	ldr	r3, [pc, #84]	; (8008514 <xTaskCheckForTimeOut+0x9c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d007      	beq.n	80084d4 <xTaskCheckForTimeOut+0x5c>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d302      	bcc.n	80084d4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084ce:	2301      	movs	r3, #1
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e016      	b.n	8008502 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d20c      	bcs.n	80084f8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1ad2      	subs	r2, r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f7ff ffaf 	bl	8008450 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e004      	b.n	8008502 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f000 fe27 	bl	8009154 <vPortExitCritical>

	return xReturn;
 8008506:	697b      	ldr	r3, [r7, #20]
}
 8008508:	0018      	movs	r0, r3
 800850a:	46bd      	mov	sp, r7
 800850c:	b006      	add	sp, #24
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000ff4 	.word	0x20000ff4
 8008514:	20001008 	.word	0x20001008

08008518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <vTaskMissedYield+0x10>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20001004 	.word	0x20001004

0800852c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008534:	f000 f84e 	bl	80085d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <prvIdleTask+0x1c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d9f9      	bls.n	8008534 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008540:	f000 fde6 	bl	8009110 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008544:	e7f6      	b.n	8008534 <prvIdleTask+0x8>
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	20000b20 	.word	0x20000b20

0800854c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008552:	2300      	movs	r3, #0
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	e00c      	b.n	8008572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	0013      	movs	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	189b      	adds	r3, r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4a14      	ldr	r2, [pc, #80]	; (80085b4 <prvInitialiseTaskLists+0x68>)
 8008564:	189b      	adds	r3, r3, r2
 8008566:	0018      	movs	r0, r3
 8008568:	f7fe fb56 	bl	8006c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3301      	adds	r3, #1
 8008570:	607b      	str	r3, [r7, #4]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b37      	cmp	r3, #55	; 0x37
 8008576:	d9ef      	bls.n	8008558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008578:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <prvInitialiseTaskLists+0x6c>)
 800857a:	0018      	movs	r0, r3
 800857c:	f7fe fb4c 	bl	8006c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008580:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <prvInitialiseTaskLists+0x70>)
 8008582:	0018      	movs	r0, r3
 8008584:	f7fe fb48 	bl	8006c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008588:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <prvInitialiseTaskLists+0x74>)
 800858a:	0018      	movs	r0, r3
 800858c:	f7fe fb44 	bl	8006c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <prvInitialiseTaskLists+0x78>)
 8008592:	0018      	movs	r0, r3
 8008594:	f7fe fb40 	bl	8006c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008598:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <prvInitialiseTaskLists+0x7c>)
 800859a:	0018      	movs	r0, r3
 800859c:	f7fe fb3c 	bl	8006c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085a0:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <prvInitialiseTaskLists+0x80>)
 80085a2:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <prvInitialiseTaskLists+0x6c>)
 80085a4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <prvInitialiseTaskLists+0x84>)
 80085a8:	4a04      	ldr	r2, [pc, #16]	; (80085bc <prvInitialiseTaskLists+0x70>)
 80085aa:	601a      	str	r2, [r3, #0]
}
 80085ac:	46c0      	nop			; (mov r8, r8)
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b002      	add	sp, #8
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000b20 	.word	0x20000b20
 80085b8:	20000f80 	.word	0x20000f80
 80085bc:	20000f94 	.word	0x20000f94
 80085c0:	20000fb0 	.word	0x20000fb0
 80085c4:	20000fc4 	.word	0x20000fc4
 80085c8:	20000fdc 	.word	0x20000fdc
 80085cc:	20000fa8 	.word	0x20000fa8
 80085d0:	20000fac 	.word	0x20000fac

080085d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085da:	e01a      	b.n	8008612 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80085dc:	f000 fda8 	bl	8009130 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085e0:	4b10      	ldr	r3, [pc, #64]	; (8008624 <prvCheckTasksWaitingTermination+0x50>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3304      	adds	r3, #4
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7fe fb94 	bl	8006d1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <prvCheckTasksWaitingTermination+0x54>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1e5a      	subs	r2, r3, #1
 80085f8:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <prvCheckTasksWaitingTermination+0x54>)
 80085fa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <prvCheckTasksWaitingTermination+0x58>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <prvCheckTasksWaitingTermination+0x58>)
 8008604:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008606:	f000 fda5 	bl	8009154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	0018      	movs	r0, r3
 800860e:	f000 f80f 	bl	8008630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <prvCheckTasksWaitingTermination+0x58>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e0      	bne.n	80085dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	46c0      	nop			; (mov r8, r8)
 800861e:	46bd      	mov	sp, r7
 8008620:	b002      	add	sp, #8
 8008622:	bd80      	pop	{r7, pc}
 8008624:	20000fc4 	.word	0x20000fc4
 8008628:	20000ff0 	.word	0x20000ff0
 800862c:	20000fd8 	.word	0x20000fd8

08008630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3354      	adds	r3, #84	; 0x54
 800863c:	0018      	movs	r0, r3
 800863e:	f001 f8ab 	bl	8009798 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	22b9      	movs	r2, #185	; 0xb9
 8008646:	5c9b      	ldrb	r3, [r3, r2]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	0018      	movs	r0, r3
 8008652:	f000 feab 	bl	80093ac <vPortFree>
				vPortFree( pxTCB );
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	0018      	movs	r0, r3
 800865a:	f000 fea7 	bl	80093ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800865e:	e010      	b.n	8008682 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	22b9      	movs	r2, #185	; 0xb9
 8008664:	5c9b      	ldrb	r3, [r3, r2]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d104      	bne.n	8008674 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	0018      	movs	r0, r3
 800866e:	f000 fe9d 	bl	80093ac <vPortFree>
	}
 8008672:	e006      	b.n	8008682 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	22b9      	movs	r2, #185	; 0xb9
 8008678:	5c9b      	ldrb	r3, [r3, r2]
 800867a:	2b02      	cmp	r3, #2
 800867c:	d001      	beq.n	8008682 <prvDeleteTCB+0x52>
 800867e:	b672      	cpsid	i
 8008680:	e7fe      	b.n	8008680 <prvDeleteTCB+0x50>
	}
 8008682:	46c0      	nop			; (mov r8, r8)
 8008684:	46bd      	mov	sp, r7
 8008686:	b002      	add	sp, #8
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008692:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <prvResetNextTaskUnblockTime+0x40>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <prvResetNextTaskUnblockTime+0x14>
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <prvResetNextTaskUnblockTime+0x16>
 80086a0:	2300      	movs	r3, #0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <prvResetNextTaskUnblockTime+0x44>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	4252      	negs	r2, r2
 80086ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086ae:	e008      	b.n	80086c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <prvResetNextTaskUnblockTime+0x40>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <prvResetNextTaskUnblockTime+0x44>)
 80086c0:	601a      	str	r2, [r3, #0]
}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b002      	add	sp, #8
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	20000fa8 	.word	0x20000fa8
 80086d0:	20001010 	.word	0x20001010

080086d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <xTaskGetSchedulerState+0x30>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80086e2:	2301      	movs	r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	e008      	b.n	80086fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <xTaskGetSchedulerState+0x34>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80086f0:	2302      	movs	r3, #2
 80086f2:	607b      	str	r3, [r7, #4]
 80086f4:	e001      	b.n	80086fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80086f6:	2300      	movs	r3, #0
 80086f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80086fa:	687b      	ldr	r3, [r7, #4]
	}
 80086fc:	0018      	movs	r0, r3
 80086fe:	46bd      	mov	sp, r7
 8008700:	b002      	add	sp, #8
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000ffc 	.word	0x20000ffc
 8008708:	20001018 	.word	0x20001018

0800870c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d056      	beq.n	80087d0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008726:	4b2d      	ldr	r3, [pc, #180]	; (80087dc <xTaskPriorityInherit+0xd0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	429a      	cmp	r2, r3
 800872e:	d246      	bcs.n	80087be <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	db06      	blt.n	8008746 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008738:	4b28      	ldr	r3, [pc, #160]	; (80087dc <xTaskPriorityInherit+0xd0>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873e:	2238      	movs	r2, #56	; 0x38
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6959      	ldr	r1, [r3, #20]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874e:	0013      	movs	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	189b      	adds	r3, r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4a22      	ldr	r2, [pc, #136]	; (80087e0 <xTaskPriorityInherit+0xd4>)
 8008758:	189b      	adds	r3, r3, r2
 800875a:	4299      	cmp	r1, r3
 800875c:	d101      	bne.n	8008762 <xTaskPriorityInherit+0x56>
 800875e:	2301      	movs	r3, #1
 8008760:	e000      	b.n	8008764 <xTaskPriorityInherit+0x58>
 8008762:	2300      	movs	r3, #0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d022      	beq.n	80087ae <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3304      	adds	r3, #4
 800876c:	0018      	movs	r0, r3
 800876e:	f7fe fad4 	bl	8006d1a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008772:	4b1a      	ldr	r3, [pc, #104]	; (80087dc <xTaskPriorityInherit+0xd0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008780:	4b18      	ldr	r3, [pc, #96]	; (80087e4 <xTaskPriorityInherit+0xd8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	429a      	cmp	r2, r3
 8008786:	d903      	bls.n	8008790 <xTaskPriorityInherit+0x84>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <xTaskPriorityInherit+0xd8>)
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008794:	0013      	movs	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	189b      	adds	r3, r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <xTaskPriorityInherit+0xd4>)
 800879e:	189a      	adds	r2, r3, r2
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3304      	adds	r3, #4
 80087a4:	0019      	movs	r1, r3
 80087a6:	0010      	movs	r0, r2
 80087a8:	f7fe fa5f 	bl	8006c6a <vListInsertEnd>
 80087ac:	e004      	b.n	80087b8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087ae:	4b0b      	ldr	r3, [pc, #44]	; (80087dc <xTaskPriorityInherit+0xd0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e008      	b.n	80087d0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <xTaskPriorityInherit+0xd0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d201      	bcs.n	80087d0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087d0:	68fb      	ldr	r3, [r7, #12]
	}
 80087d2:	0018      	movs	r0, r3
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b004      	add	sp, #16
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	20000b1c 	.word	0x20000b1c
 80087e0:	20000b20 	.word	0x20000b20
 80087e4:	20000ff8 	.word	0x20000ff8

080087e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d044      	beq.n	8008888 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087fe:	4b25      	ldr	r3, [pc, #148]	; (8008894 <xTaskPriorityDisinherit+0xac>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <xTaskPriorityDisinherit+0x24>
 8008808:	b672      	cpsid	i
 800880a:	e7fe      	b.n	800880a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <xTaskPriorityDisinherit+0x30>
 8008814:	b672      	cpsid	i
 8008816:	e7fe      	b.n	8008816 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882a:	429a      	cmp	r2, r3
 800882c:	d02c      	beq.n	8008888 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008832:	2b00      	cmp	r3, #0
 8008834:	d128      	bne.n	8008888 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3304      	adds	r3, #4
 800883a:	0018      	movs	r0, r3
 800883c:	f7fe fa6d 	bl	8006d1a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	2238      	movs	r2, #56	; 0x38
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <xTaskPriorityDisinherit+0xb0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d903      	bls.n	8008868 <xTaskPriorityDisinherit+0x80>
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <xTaskPriorityDisinherit+0xb0>)
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886c:	0013      	movs	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	189b      	adds	r3, r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4a09      	ldr	r2, [pc, #36]	; (800889c <xTaskPriorityDisinherit+0xb4>)
 8008876:	189a      	adds	r2, r3, r2
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3304      	adds	r3, #4
 800887c:	0019      	movs	r1, r3
 800887e:	0010      	movs	r0, r2
 8008880:	f7fe f9f3 	bl	8006c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008884:	2301      	movs	r3, #1
 8008886:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008888:	68fb      	ldr	r3, [r7, #12]
	}
 800888a:	0018      	movs	r0, r3
 800888c:	46bd      	mov	sp, r7
 800888e:	b004      	add	sp, #16
 8008890:	bd80      	pop	{r7, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	20000b1c 	.word	0x20000b1c
 8008898:	20000ff8 	.word	0x20000ff8
 800889c:	20000b20 	.word	0x20000b20

080088a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d05d      	beq.n	8008974 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80088c0:	b672      	cpsid	i
 80088c2:	e7fe      	b.n	80088c2 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d902      	bls.n	80088d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	e002      	b.n	80088da <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d047      	beq.n	8008974 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d142      	bne.n	8008974 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d101      	bne.n	80088fc <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80088f8:	b672      	cpsid	i
 80088fa:	e7fe      	b.n	80088fa <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	db04      	blt.n	800891a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2238      	movs	r2, #56	; 0x38
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6959      	ldr	r1, [r3, #20]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	0013      	movs	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	189b      	adds	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800892a:	189b      	adds	r3, r3, r2
 800892c:	4299      	cmp	r1, r3
 800892e:	d101      	bne.n	8008934 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <vTaskPriorityDisinheritAfterTimeout+0x96>
 8008934:	2300      	movs	r3, #0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01c      	beq.n	8008974 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3304      	adds	r3, #4
 800893e:	0018      	movs	r0, r3
 8008940:	f7fe f9eb 	bl	8006d1a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d903      	bls.n	8008958 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	0013      	movs	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	189b      	adds	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4a06      	ldr	r2, [pc, #24]	; (8008980 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8008966:	189a      	adds	r2, r3, r2
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	3304      	adds	r3, #4
 800896c:	0019      	movs	r1, r3
 800896e:	0010      	movs	r0, r2
 8008970:	f7fe f97b 	bl	8006c6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008974:	46c0      	nop			; (mov r8, r8)
 8008976:	46bd      	mov	sp, r7
 8008978:	b006      	add	sp, #24
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000b1c 	.word	0x20000b1c
 8008980:	20000b20 	.word	0x20000b20
 8008984:	20000ff8 	.word	0x20000ff8

08008988 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800898c:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <pvTaskIncrementMutexHeldCount+0x20>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <pvTaskIncrementMutexHeldCount+0x20>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800899a:	3201      	adds	r2, #1
 800899c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800899e:	4b02      	ldr	r3, [pc, #8]	; (80089a8 <pvTaskIncrementMutexHeldCount+0x20>)
 80089a0:	681b      	ldr	r3, [r3, #0]
	}
 80089a2:	0018      	movs	r0, r3
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000b1c 	.word	0x20000b1c

080089ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089b6:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <prvAddCurrentTaskToDelayedList+0x90>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089bc:	4b20      	ldr	r3, [pc, #128]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3304      	adds	r3, #4
 80089c2:	0018      	movs	r0, r3
 80089c4:	f7fe f9a9 	bl	8006d1a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3301      	adds	r3, #1
 80089cc:	d10b      	bne.n	80089e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	1d1a      	adds	r2, r3, #4
 80089da:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <prvAddCurrentTaskToDelayedList+0x98>)
 80089dc:	0011      	movs	r1, r2
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fe f943 	bl	8006c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089e4:	e026      	b.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	18d3      	adds	r3, r2, r3
 80089ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089ee:	4b14      	ldr	r3, [pc, #80]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d209      	bcs.n	8008a12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4b0f      	ldr	r3, [pc, #60]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	0019      	movs	r1, r3
 8008a0a:	0010      	movs	r0, r2
 8008a0c:	f7fe f94f 	bl	8006cae <vListInsert>
}
 8008a10:	e010      	b.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a12:	4b0e      	ldr	r3, [pc, #56]	; (8008a4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	0010      	movs	r0, r2
 8008a20:	f7fe f945 	bl	8006cae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a24:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d202      	bcs.n	8008a34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a2e:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	46c0      	nop			; (mov r8, r8)
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b004      	add	sp, #16
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	20000ff4 	.word	0x20000ff4
 8008a40:	20000b1c 	.word	0x20000b1c
 8008a44:	20000fdc 	.word	0x20000fdc
 8008a48:	20000fac 	.word	0x20000fac
 8008a4c:	20000fa8 	.word	0x20000fa8
 8008a50:	20001010 	.word	0x20001010

08008a54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a54:	b590      	push	{r4, r7, lr}
 8008a56:	b089      	sub	sp, #36	; 0x24
 8008a58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a5e:	f000 fa87 	bl	8008f70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <xTimerCreateTimerTask+0x6c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d020      	beq.n	8008aac <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a72:	003a      	movs	r2, r7
 8008a74:	1d39      	adds	r1, r7, #4
 8008a76:	2308      	movs	r3, #8
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f7fe f8b4 	bl	8006be8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a80:	683c      	ldr	r4, [r7, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	490f      	ldr	r1, [pc, #60]	; (8008ac4 <xTimerCreateTimerTask+0x70>)
 8008a88:	480f      	ldr	r0, [pc, #60]	; (8008ac8 <xTimerCreateTimerTask+0x74>)
 8008a8a:	9202      	str	r2, [sp, #8]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	2302      	movs	r3, #2
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	0022      	movs	r2, r4
 8008a96:	f7ff f80e 	bl	8007ab6 <xTaskCreateStatic>
 8008a9a:	0002      	movs	r2, r0
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <xTimerCreateTimerTask+0x78>)
 8008a9e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <xTimerCreateTimerTask+0x78>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <xTimerCreateTimerTask+0x62>
 8008ab2:	b672      	cpsid	i
 8008ab4:	e7fe      	b.n	8008ab4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
}
 8008ab8:	0018      	movs	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	b005      	add	sp, #20
 8008abe:	bd90      	pop	{r4, r7, pc}
 8008ac0:	2000104c 	.word	0x2000104c
 8008ac4:	0800a1a4 	.word	0x0800a1a4
 8008ac8:	08008bd5 	.word	0x08008bd5
 8008acc:	20001050 	.word	0x20001050

08008ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b08b      	sub	sp, #44	; 0x2c
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <xTimerGenericCommand+0x1c>
 8008ae8:	b672      	cpsid	i
 8008aea:	e7fe      	b.n	8008aea <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008aec:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <xTimerGenericCommand+0x90>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d030      	beq.n	8008b56 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008af4:	2414      	movs	r4, #20
 8008af6:	193b      	adds	r3, r7, r4
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008afc:	193b      	adds	r3, r7, r4
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008b02:	193b      	adds	r3, r7, r4
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	dc19      	bgt.n	8008b42 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b0e:	f7ff fde1 	bl	80086d4 <xTaskGetSchedulerState>
 8008b12:	0003      	movs	r3, r0
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d109      	bne.n	8008b2c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008b18:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <xTimerGenericCommand+0x90>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1e:	1939      	adds	r1, r7, r4
 8008b20:	2300      	movs	r3, #0
 8008b22:	f7fe fa67 	bl	8006ff4 <xQueueGenericSend>
 8008b26:	0003      	movs	r3, r0
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2a:	e014      	b.n	8008b56 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <xTimerGenericCommand+0x90>)
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	2314      	movs	r3, #20
 8008b32:	18f9      	adds	r1, r7, r3
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	f7fe fa5c 	bl	8006ff4 <xQueueGenericSend>
 8008b3c:	0003      	movs	r3, r0
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008b40:	e009      	b.n	8008b56 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <xTimerGenericCommand+0x90>)
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	2314      	movs	r3, #20
 8008b4a:	18f9      	adds	r1, r7, r3
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	f7fe fb15 	bl	800717c <xQueueGenericSendFromISR>
 8008b52:	0003      	movs	r3, r0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b58:	0018      	movs	r0, r3
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	b00b      	add	sp, #44	; 0x2c
 8008b5e:	bd90      	pop	{r4, r7, pc}
 8008b60:	2000104c 	.word	0x2000104c

08008b64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b6e:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <prvProcessExpiredTimer+0x6c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	f7fe f8cc 	bl	8006d1a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d119      	bne.n	8008bbe <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	699a      	ldr	r2, [r3, #24]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	18d1      	adds	r1, r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f8b6 	bl	8008d08 <prvInsertTimerInActiveList>
 8008b9c:	1e03      	subs	r3, r0, #0
 8008b9e:	d00e      	beq.n	8008bbe <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2100      	movs	r1, #0
 8008bac:	f7ff ff90 	bl	8008ad0 <xTimerGenericCommand>
 8008bb0:	0003      	movs	r3, r0
 8008bb2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <prvProcessExpiredTimer+0x5a>
 8008bba:	b672      	cpsid	i
 8008bbc:	e7fe      	b.n	8008bbc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	0010      	movs	r0, r2
 8008bc6:	4798      	blx	r3
}
 8008bc8:	46c0      	nop			; (mov r8, r8)
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	b004      	add	sp, #16
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20001044 	.word	0x20001044

08008bd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bdc:	2308      	movs	r3, #8
 8008bde:	18fb      	adds	r3, r7, r3
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 f851 	bl	8008c88 <prvGetNextExpireTime>
 8008be6:	0003      	movs	r3, r0
 8008be8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f000 f803 	bl	8008bfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bf6:	f000 f8c9 	bl	8008d8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bfa:	e7ef      	b.n	8008bdc <prvTimerTask+0x8>

08008bfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008c06:	f7ff f9cf 	bl	8007fa8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 f85a 	bl	8008cc8 <prvSampleTimeNow>
 8008c14:	0003      	movs	r3, r0
 8008c16:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d129      	bne.n	8008c72 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10c      	bne.n	8008c3e <prvProcessTimerOrBlockTask+0x42>
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d808      	bhi.n	8008c3e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8008c2c:	f7ff f9c8 	bl	8007fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	0011      	movs	r1, r2
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7ff ff94 	bl	8008b64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008c3c:	e01b      	b.n	8008c76 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c44:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <prvProcessTimerOrBlockTask+0x84>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	425a      	negs	r2, r3
 8008c4c:	4153      	adcs	r3, r2
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <prvProcessTimerOrBlockTask+0x88>)
 8008c54:	6818      	ldr	r0, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	0019      	movs	r1, r3
 8008c60:	f7fe fef6 	bl	8007a50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c64:	f7ff f9ac 	bl	8007fc0 <xTaskResumeAll>
 8008c68:	1e03      	subs	r3, r0, #0
 8008c6a:	d104      	bne.n	8008c76 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8008c6c:	f000 fa50 	bl	8009110 <vPortYield>
}
 8008c70:	e001      	b.n	8008c76 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8008c72:	f7ff f9a5 	bl	8007fc0 <xTaskResumeAll>
}
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b004      	add	sp, #16
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20001048 	.word	0x20001048
 8008c84:	2000104c 	.word	0x2000104c

08008c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c90:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <prvGetNextExpireTime+0x3c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	425a      	negs	r2, r3
 8008c98:	4153      	adcs	r3, r2
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	001a      	movs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d105      	bne.n	8008cb6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <prvGetNextExpireTime+0x3c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e001      	b.n	8008cba <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008cba:	68fb      	ldr	r3, [r7, #12]
}
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	b004      	add	sp, #16
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	20001044 	.word	0x20001044

08008cc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008cd0:	f7ff fa02 	bl	80080d8 <xTaskGetTickCount>
 8008cd4:	0003      	movs	r3, r0
 8008cd6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8008cd8:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <prvSampleTimeNow+0x3c>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d205      	bcs.n	8008cee <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8008ce2:	f000 f8eb 	bl	8008ebc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e002      	b.n	8008cf4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cf4:	4b03      	ldr	r3, [pc, #12]	; (8008d04 <prvSampleTimeNow+0x3c>)
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
}
 8008cfc:	0018      	movs	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	b004      	add	sp, #16
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20001054 	.word	0x20001054

08008d08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008d16:	2300      	movs	r3, #0
 8008d18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d812      	bhi.n	8008d54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	1ad2      	subs	r2, r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d302      	bcc.n	8008d42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	e01b      	b.n	8008d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d42:	4b10      	ldr	r3, [pc, #64]	; (8008d84 <prvInsertTimerInActiveList+0x7c>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	0010      	movs	r0, r2
 8008d4e:	f7fd ffae 	bl	8006cae <vListInsert>
 8008d52:	e012      	b.n	8008d7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d206      	bcs.n	8008d6a <prvInsertTimerInActiveList+0x62>
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d302      	bcc.n	8008d6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	e007      	b.n	8008d7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <prvInsertTimerInActiveList+0x80>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3304      	adds	r3, #4
 8008d72:	0019      	movs	r1, r3
 8008d74:	0010      	movs	r0, r2
 8008d76:	f7fd ff9a 	bl	8006cae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d7a:	697b      	ldr	r3, [r7, #20]
}
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	b006      	add	sp, #24
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	20001048 	.word	0x20001048
 8008d88:	20001044 	.word	0x20001044

08008d8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d8c:	b590      	push	{r4, r7, lr}
 8008d8e:	b08d      	sub	sp, #52	; 0x34
 8008d90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d92:	e07f      	b.n	8008e94 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d94:	2208      	movs	r2, #8
 8008d96:	18bb      	adds	r3, r7, r2
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	da0f      	bge.n	8008dbe <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d9e:	18bb      	adds	r3, r7, r2
 8008da0:	3304      	adds	r3, #4
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <prvProcessReceivedCommands+0x22>
 8008daa:	b672      	cpsid	i
 8008dac:	e7fe      	b.n	8008dac <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	6858      	ldr	r0, [r3, #4]
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	0019      	movs	r1, r3
 8008dbc:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	18bb      	adds	r3, r7, r2
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	db64      	blt.n	8008e92 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008dc8:	18bb      	adds	r3, r7, r2
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7fd ff9d 	bl	8006d1a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008de0:	1d3b      	adds	r3, r7, #4
 8008de2:	0018      	movs	r0, r3
 8008de4:	f7ff ff70 	bl	8008cc8 <prvSampleTimeNow>
 8008de8:	0003      	movs	r3, r0
 8008dea:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8008dec:	2308      	movs	r3, #8
 8008dee:	18fb      	adds	r3, r7, r3
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b09      	cmp	r3, #9
 8008df4:	d84e      	bhi.n	8008e94 <prvProcessReceivedCommands+0x108>
 8008df6:	009a      	lsls	r2, r3, #2
 8008df8:	4b2e      	ldr	r3, [pc, #184]	; (8008eb4 <prvProcessReceivedCommands+0x128>)
 8008dfa:	18d3      	adds	r3, r2, r3
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e00:	2408      	movs	r4, #8
 8008e02:	193b      	adds	r3, r7, r4
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	18d1      	adds	r1, r2, r3
 8008e0c:	193b      	adds	r3, r7, r4
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	6a38      	ldr	r0, [r7, #32]
 8008e14:	f7ff ff78 	bl	8008d08 <prvInsertTimerInActiveList>
 8008e18:	1e03      	subs	r3, r0, #0
 8008e1a:	d03b      	beq.n	8008e94 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	6a3a      	ldr	r2, [r7, #32]
 8008e22:	0010      	movs	r0, r2
 8008e24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d132      	bne.n	8008e94 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e2e:	193b      	adds	r3, r7, r4
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	18d2      	adds	r2, r2, r3
 8008e38:	6a38      	ldr	r0, [r7, #32]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2100      	movs	r1, #0
 8008e42:	f7ff fe45 	bl	8008ad0 <xTimerGenericCommand>
 8008e46:	0003      	movs	r3, r0
 8008e48:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d121      	bne.n	8008e94 <prvProcessReceivedCommands+0x108>
 8008e50:	b672      	cpsid	i
 8008e52:	e7fe      	b.n	8008e52 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e54:	2308      	movs	r3, #8
 8008e56:	18fb      	adds	r3, r7, r3
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <prvProcessReceivedCommands+0xde>
 8008e66:	b672      	cpsid	i
 8008e68:	e7fe      	b.n	8008e68 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	18d1      	adds	r1, r2, r3
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	69fa      	ldr	r2, [r7, #28]
 8008e76:	6a38      	ldr	r0, [r7, #32]
 8008e78:	f7ff ff46 	bl	8008d08 <prvInsertTimerInActiveList>
					break;
 8008e7c:	e00a      	b.n	8008e94 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	222c      	movs	r2, #44	; 0x2c
 8008e82:	5c9b      	ldrb	r3, [r3, r2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d105      	bne.n	8008e94 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f000 fa8e 	bl	80093ac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e90:	e000      	b.n	8008e94 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e92:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e94:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <prvProcessReceivedCommands+0x12c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	18b9      	adds	r1, r7, r2
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f7fe fa42 	bl	8007328 <xQueueReceive>
 8008ea4:	1e03      	subs	r3, r0, #0
 8008ea6:	d000      	beq.n	8008eaa <prvProcessReceivedCommands+0x11e>
 8008ea8:	e774      	b.n	8008d94 <prvProcessReceivedCommands+0x8>
	}
}
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	46c0      	nop			; (mov r8, r8)
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b00b      	add	sp, #44	; 0x2c
 8008eb2:	bd90      	pop	{r4, r7, pc}
 8008eb4:	0800a348 	.word	0x0800a348
 8008eb8:	2000104c 	.word	0x2000104c

08008ebc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ec2:	e03e      	b.n	8008f42 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec4:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ece:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3304      	adds	r3, #4
 8008edc:	0018      	movs	r0, r3
 8008ede:	f7fd ff1c 	bl	8006d1a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	0010      	movs	r0, r2
 8008eea:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d126      	bne.n	8008f42 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	18d3      	adds	r3, r2, r3
 8008efc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d90e      	bls.n	8008f24 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f12:	4b15      	ldr	r3, [pc, #84]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	0019      	movs	r1, r3
 8008f1c:	0010      	movs	r0, r2
 8008f1e:	f7fd fec6 	bl	8006cae <vListInsert>
 8008f22:	e00e      	b.n	8008f42 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	f7ff fdce 	bl	8008ad0 <xTimerGenericCommand>
 8008f34:	0003      	movs	r3, r0
 8008f36:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <prvSwitchTimerLists+0x86>
 8008f3e:	b672      	cpsid	i
 8008f40:	e7fe      	b.n	8008f40 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1bb      	bne.n	8008ec4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f4c:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f52:	4b06      	ldr	r3, [pc, #24]	; (8008f6c <prvSwitchTimerLists+0xb0>)
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	4b04      	ldr	r3, [pc, #16]	; (8008f68 <prvSwitchTimerLists+0xac>)
 8008f58:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8008f5a:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <prvSwitchTimerLists+0xb0>)
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	46c0      	nop			; (mov r8, r8)
 8008f62:	46bd      	mov	sp, r7
 8008f64:	b006      	add	sp, #24
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20001044 	.word	0x20001044
 8008f6c:	20001048 	.word	0x20001048

08008f70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f76:	f000 f8db 	bl	8009130 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f7a:	4b16      	ldr	r3, [pc, #88]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d123      	bne.n	8008fca <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7fd fe47 	bl	8006c18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f8a:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <prvCheckForValidListAndQueue+0x6c>)
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f7fd fe43 	bl	8006c18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f92:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <prvCheckForValidListAndQueue+0x70>)
 8008f94:	4a10      	ldr	r2, [pc, #64]	; (8008fd8 <prvCheckForValidListAndQueue+0x68>)
 8008f96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f98:	4b12      	ldr	r3, [pc, #72]	; (8008fe4 <prvCheckForValidListAndQueue+0x74>)
 8008f9a:	4a10      	ldr	r2, [pc, #64]	; (8008fdc <prvCheckForValidListAndQueue+0x6c>)
 8008f9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f9e:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <prvCheckForValidListAndQueue+0x78>)
 8008fa0:	4a12      	ldr	r2, [pc, #72]	; (8008fec <prvCheckForValidListAndQueue+0x7c>)
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	9100      	str	r1, [sp, #0]
 8008fa6:	2110      	movs	r1, #16
 8008fa8:	200a      	movs	r0, #10
 8008faa:	f7fd ff32 	bl	8006e12 <xQueueGenericCreateStatic>
 8008fae:	0002      	movs	r2, r0
 8008fb0:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008fb2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <prvCheckForValidListAndQueue+0x64>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0b      	ldr	r2, [pc, #44]	; (8008ff0 <prvCheckForValidListAndQueue+0x80>)
 8008fc2:	0011      	movs	r1, r2
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f7fe fcf1 	bl	80079ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fca:	f000 f8c3 	bl	8009154 <vPortExitCritical>
}
 8008fce:	46c0      	nop			; (mov r8, r8)
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	2000104c 	.word	0x2000104c
 8008fd8:	2000101c 	.word	0x2000101c
 8008fdc:	20001030 	.word	0x20001030
 8008fe0:	20001044 	.word	0x20001044
 8008fe4:	20001048 	.word	0x20001048
 8008fe8:	200010f8 	.word	0x200010f8
 8008fec:	20001058 	.word	0x20001058
 8008ff0:	0800a1ac 	.word	0x0800a1ac

08008ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	3b04      	subs	r3, #4
 8009004:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2280      	movs	r2, #128	; 0x80
 800900a:	0452      	lsls	r2, r2, #17
 800900c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3b04      	subs	r3, #4
 8009012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3b04      	subs	r3, #4
 800901e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009020:	4a08      	ldr	r2, [pc, #32]	; (8009044 <pxPortInitialiseStack+0x50>)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b14      	subs	r3, #20
 800902a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3b20      	subs	r3, #32
 8009036:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009038:	68fb      	ldr	r3, [r7, #12]
}
 800903a:	0018      	movs	r0, r3
 800903c:	46bd      	mov	sp, r7
 800903e:	b004      	add	sp, #16
 8009040:	bd80      	pop	{r7, pc}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	08009049 	.word	0x08009049

08009048 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800904e:	2300      	movs	r3, #0
 8009050:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009052:	4b08      	ldr	r3, [pc, #32]	; (8009074 <prvTaskExitError+0x2c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	d001      	beq.n	800905e <prvTaskExitError+0x16>
 800905a:	b672      	cpsid	i
 800905c:	e7fe      	b.n	800905c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800905e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0fc      	beq.n	8009062 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009068:	46c0      	nop			; (mov r8, r8)
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b002      	add	sp, #8
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	2000000c 	.word	0x2000000c

08009078 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800907c:	46c0      	nop			; (mov r8, r8)
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009090 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009090:	4a0b      	ldr	r2, [pc, #44]	; (80090c0 <pxCurrentTCBConst2>)
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	6818      	ldr	r0, [r3, #0]
 8009096:	3020      	adds	r0, #32
 8009098:	f380 8809 	msr	PSP, r0
 800909c:	2002      	movs	r0, #2
 800909e:	f380 8814 	msr	CONTROL, r0
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80090a8:	46ae      	mov	lr, r5
 80090aa:	bc08      	pop	{r3}
 80090ac:	bc04      	pop	{r2}
 80090ae:	b662      	cpsie	i
 80090b0:	4718      	bx	r3
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	46c0      	nop			; (mov r8, r8)
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	46c0      	nop			; (mov r8, r8)
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	46c0      	nop			; (mov r8, r8)
 80090be:	46c0      	nop			; (mov r8, r8)

080090c0 <pxCurrentTCBConst2>:
 80090c0:	20000b1c 	.word	0x20000b1c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80090c4:	46c0      	nop			; (mov r8, r8)
 80090c6:	46c0      	nop			; (mov r8, r8)

080090c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <xPortStartScheduler+0x40>)
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <xPortStartScheduler+0x40>)
 80090d2:	21ff      	movs	r1, #255	; 0xff
 80090d4:	0409      	lsls	r1, r1, #16
 80090d6:	430a      	orrs	r2, r1
 80090d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80090da:	4b0b      	ldr	r3, [pc, #44]	; (8009108 <xPortStartScheduler+0x40>)
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <xPortStartScheduler+0x40>)
 80090e0:	21ff      	movs	r1, #255	; 0xff
 80090e2:	0609      	lsls	r1, r1, #24
 80090e4:	430a      	orrs	r2, r1
 80090e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80090e8:	f000 f898 	bl	800921c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090ec:	4b07      	ldr	r3, [pc, #28]	; (800910c <xPortStartScheduler+0x44>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80090f2:	f7ff ffcd 	bl	8009090 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090f6:	f7ff f8b1 	bl	800825c <vTaskSwitchContext>
	prvTaskExitError();
 80090fa:	f7ff ffa5 	bl	8009048 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	0018      	movs	r0, r3
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	46c0      	nop			; (mov r8, r8)
 8009108:	e000ed20 	.word	0xe000ed20
 800910c:	2000000c 	.word	0x2000000c

08009110 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <vPortYield+0x1c>)
 8009116:	2280      	movs	r2, #128	; 0x80
 8009118:	0552      	lsls	r2, r2, #21
 800911a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800911c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009120:	f3bf 8f6f 	isb	sy
}
 8009124:	46c0      	nop			; (mov r8, r8)
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	e000ed04 	.word	0xe000ed04

08009130 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009134:	b672      	cpsid	i
    uxCriticalNesting++;
 8009136:	4b06      	ldr	r3, [pc, #24]	; (8009150 <vPortEnterCritical+0x20>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	4b04      	ldr	r3, [pc, #16]	; (8009150 <vPortEnterCritical+0x20>)
 800913e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009140:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009144:	f3bf 8f6f 	isb	sy
}
 8009148:	46c0      	nop			; (mov r8, r8)
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	2000000c 	.word	0x2000000c

08009154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009158:	4b09      	ldr	r3, [pc, #36]	; (8009180 <vPortExitCritical+0x2c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <vPortExitCritical+0x10>
 8009160:	b672      	cpsid	i
 8009162:	e7fe      	b.n	8009162 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <vPortExitCritical+0x2c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	1e5a      	subs	r2, r3, #1
 800916a:	4b05      	ldr	r3, [pc, #20]	; (8009180 <vPortExitCritical+0x2c>)
 800916c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800916e:	4b04      	ldr	r3, [pc, #16]	; (8009180 <vPortExitCritical+0x2c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d100      	bne.n	8009178 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009176:	b662      	cpsie	i
    }
}
 8009178:	46c0      	nop			; (mov r8, r8)
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	2000000c 	.word	0x2000000c

08009184 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009184:	f3ef 8010 	mrs	r0, PRIMASK
 8009188:	b672      	cpsid	i
 800918a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800918c:	46c0      	nop			; (mov r8, r8)
 800918e:	0018      	movs	r0, r3

08009190 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009190:	f380 8810 	msr	PRIMASK, r0
 8009194:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009196:	46c0      	nop			; (mov r8, r8)
	...

080091a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091a0:	f3ef 8009 	mrs	r0, PSP
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <pxCurrentTCBConst>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	3820      	subs	r0, #32
 80091aa:	6010      	str	r0, [r2, #0]
 80091ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80091ae:	4644      	mov	r4, r8
 80091b0:	464d      	mov	r5, r9
 80091b2:	4656      	mov	r6, sl
 80091b4:	465f      	mov	r7, fp
 80091b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80091b8:	b508      	push	{r3, lr}
 80091ba:	b672      	cpsid	i
 80091bc:	f7ff f84e 	bl	800825c <vTaskSwitchContext>
 80091c0:	b662      	cpsie	i
 80091c2:	bc0c      	pop	{r2, r3}
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	6808      	ldr	r0, [r1, #0]
 80091c8:	3010      	adds	r0, #16
 80091ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80091cc:	46a0      	mov	r8, r4
 80091ce:	46a9      	mov	r9, r5
 80091d0:	46b2      	mov	sl, r6
 80091d2:	46bb      	mov	fp, r7
 80091d4:	f380 8809 	msr	PSP, r0
 80091d8:	3820      	subs	r0, #32
 80091da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80091dc:	4718      	bx	r3
 80091de:	46c0      	nop			; (mov r8, r8)

080091e0 <pxCurrentTCBConst>:
 80091e0:	20000b1c 	.word	0x20000b1c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80091e4:	46c0      	nop			; (mov r8, r8)
 80091e6:	46c0      	nop			; (mov r8, r8)

080091e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80091ee:	f7ff ffc9 	bl	8009184 <ulSetInterruptMaskFromISR>
 80091f2:	0003      	movs	r3, r0
 80091f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091f6:	f7fe ff7d 	bl	80080f4 <xTaskIncrementTick>
 80091fa:	1e03      	subs	r3, r0, #0
 80091fc:	d003      	beq.n	8009206 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <SysTick_Handler+0x30>)
 8009200:	2280      	movs	r2, #128	; 0x80
 8009202:	0552      	lsls	r2, r2, #21
 8009204:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	0018      	movs	r0, r3
 800920a:	f7ff ffc1 	bl	8009190 <vClearInterruptMaskFromISR>
}
 800920e:	46c0      	nop			; (mov r8, r8)
 8009210:	46bd      	mov	sp, r7
 8009212:	b002      	add	sp, #8
 8009214:	bd80      	pop	{r7, pc}
 8009216:	46c0      	nop			; (mov r8, r8)
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <prvSetupTimerInterrupt+0x34>)
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009226:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <prvSetupTimerInterrupt+0x38>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <prvSetupTimerInterrupt+0x3c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	22fa      	movs	r2, #250	; 0xfa
 8009232:	0091      	lsls	r1, r2, #2
 8009234:	0018      	movs	r0, r3
 8009236:	f7f6 ff71 	bl	800011c <__udivsi3>
 800923a:	0003      	movs	r3, r0
 800923c:	001a      	movs	r2, r3
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <prvSetupTimerInterrupt+0x40>)
 8009240:	3a01      	subs	r2, #1
 8009242:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <prvSetupTimerInterrupt+0x34>)
 8009246:	2207      	movs	r2, #7
 8009248:	601a      	str	r2, [r3, #0]
}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	e000e010 	.word	0xe000e010
 8009254:	e000e018 	.word	0xe000e018
 8009258:	20000000 	.word	0x20000000
 800925c:	e000e014 	.word	0xe000e014

08009260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800926c:	f7fe fe9c 	bl	8007fa8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009270:	4b49      	ldr	r3, [pc, #292]	; (8009398 <pvPortMalloc+0x138>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009278:	f000 f8e0 	bl	800943c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800927c:	4b47      	ldr	r3, [pc, #284]	; (800939c <pvPortMalloc+0x13c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	4013      	ands	r3, r2
 8009284:	d000      	beq.n	8009288 <pvPortMalloc+0x28>
 8009286:	e079      	b.n	800937c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d012      	beq.n	80092b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800928e:	2208      	movs	r2, #8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	189b      	adds	r3, r3, r2
 8009294:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2207      	movs	r2, #7
 800929a:	4013      	ands	r3, r2
 800929c:	d00a      	beq.n	80092b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2207      	movs	r2, #7
 80092a2:	4393      	bics	r3, r2
 80092a4:	3308      	adds	r3, #8
 80092a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2207      	movs	r2, #7
 80092ac:	4013      	ands	r3, r2
 80092ae:	d001      	beq.n	80092b4 <pvPortMalloc+0x54>
 80092b0:	b672      	cpsid	i
 80092b2:	e7fe      	b.n	80092b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d060      	beq.n	800937c <pvPortMalloc+0x11c>
 80092ba:	4b39      	ldr	r3, [pc, #228]	; (80093a0 <pvPortMalloc+0x140>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d85b      	bhi.n	800937c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092c4:	4b37      	ldr	r3, [pc, #220]	; (80093a4 <pvPortMalloc+0x144>)
 80092c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80092c8:	4b36      	ldr	r3, [pc, #216]	; (80093a4 <pvPortMalloc+0x144>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ce:	e004      	b.n	80092da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d903      	bls.n	80092ec <pvPortMalloc+0x8c>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f1      	bne.n	80092d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092ec:	4b2a      	ldr	r3, [pc, #168]	; (8009398 <pvPortMalloc+0x138>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d042      	beq.n	800937c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2208      	movs	r2, #8
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	2308      	movs	r3, #8
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	429a      	cmp	r2, r3
 8009316:	d916      	bls.n	8009346 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	18d3      	adds	r3, r2, r3
 800931e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2207      	movs	r2, #7
 8009324:	4013      	ands	r3, r2
 8009326:	d001      	beq.n	800932c <pvPortMalloc+0xcc>
 8009328:	b672      	cpsid	i
 800932a:	e7fe      	b.n	800932a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	0018      	movs	r0, r3
 8009342:	f000 f8db 	bl	80094fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009346:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <pvPortMalloc+0x140>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	4b13      	ldr	r3, [pc, #76]	; (80093a0 <pvPortMalloc+0x140>)
 8009352:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009354:	4b12      	ldr	r3, [pc, #72]	; (80093a0 <pvPortMalloc+0x140>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	4b13      	ldr	r3, [pc, #76]	; (80093a8 <pvPortMalloc+0x148>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d203      	bcs.n	8009368 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <pvPortMalloc+0x140>)
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <pvPortMalloc+0x148>)
 8009366:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	4b0b      	ldr	r3, [pc, #44]	; (800939c <pvPortMalloc+0x13c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	431a      	orrs	r2, r3
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800937c:	f7fe fe20 	bl	8007fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2207      	movs	r2, #7
 8009384:	4013      	ands	r3, r2
 8009386:	d001      	beq.n	800938c <pvPortMalloc+0x12c>
 8009388:	b672      	cpsid	i
 800938a:	e7fe      	b.n	800938a <pvPortMalloc+0x12a>
	return pvReturn;
 800938c:	68fb      	ldr	r3, [r7, #12]
}
 800938e:	0018      	movs	r0, r3
 8009390:	46bd      	mov	sp, r7
 8009392:	b006      	add	sp, #24
 8009394:	bd80      	pop	{r7, pc}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	20003090 	.word	0x20003090
 800939c:	2000309c 	.word	0x2000309c
 80093a0:	20003094 	.word	0x20003094
 80093a4:	20003088 	.word	0x20003088
 80093a8:	20003098 	.word	0x20003098

080093ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d035      	beq.n	800942a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093be:	2308      	movs	r3, #8
 80093c0:	425b      	negs	r3, r3
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	18d3      	adds	r3, r2, r3
 80093c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	4b18      	ldr	r3, [pc, #96]	; (8009434 <vPortFree+0x88>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4013      	ands	r3, r2
 80093d6:	d101      	bne.n	80093dc <vPortFree+0x30>
 80093d8:	b672      	cpsid	i
 80093da:	e7fe      	b.n	80093da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <vPortFree+0x3c>
 80093e4:	b672      	cpsid	i
 80093e6:	e7fe      	b.n	80093e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <vPortFree+0x88>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4013      	ands	r3, r2
 80093f2:	d01a      	beq.n	800942a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d116      	bne.n	800942a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <vPortFree+0x88>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	43db      	mvns	r3, r3
 8009406:	401a      	ands	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800940c:	f7fe fdcc 	bl	8007fa8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	4b08      	ldr	r3, [pc, #32]	; (8009438 <vPortFree+0x8c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	18d2      	adds	r2, r2, r3
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <vPortFree+0x8c>)
 800941c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	0018      	movs	r0, r3
 8009422:	f000 f86b 	bl	80094fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009426:	f7fe fdcb 	bl	8007fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800942a:	46c0      	nop			; (mov r8, r8)
 800942c:	46bd      	mov	sp, r7
 800942e:	b004      	add	sp, #16
 8009430:	bd80      	pop	{r7, pc}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	2000309c 	.word	0x2000309c
 8009438:	20003094 	.word	0x20003094

0800943c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009442:	23fa      	movs	r3, #250	; 0xfa
 8009444:	015b      	lsls	r3, r3, #5
 8009446:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009448:	4b26      	ldr	r3, [pc, #152]	; (80094e4 <prvHeapInit+0xa8>)
 800944a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2207      	movs	r2, #7
 8009450:	4013      	ands	r3, r2
 8009452:	d00c      	beq.n	800946e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3307      	adds	r3, #7
 8009458:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2207      	movs	r2, #7
 800945e:	4393      	bics	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <prvHeapInit+0xa8>)
 800946a:	18d3      	adds	r3, r2, r3
 800946c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009472:	4b1d      	ldr	r3, [pc, #116]	; (80094e8 <prvHeapInit+0xac>)
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009478:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <prvHeapInit+0xac>)
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	18d3      	adds	r3, r2, r3
 8009484:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009486:	2208      	movs	r2, #8
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2207      	movs	r2, #7
 8009492:	4393      	bics	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4b14      	ldr	r3, [pc, #80]	; (80094ec <prvHeapInit+0xb0>)
 800949a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800949c:	4b13      	ldr	r3, [pc, #76]	; (80094ec <prvHeapInit+0xb0>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2200      	movs	r2, #0
 80094a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <prvHeapInit+0xb0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <prvHeapInit+0xb0>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <prvHeapInit+0xb4>)
 80094c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <prvHeapInit+0xb8>)
 80094d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <prvHeapInit+0xbc>)
 80094d4:	2280      	movs	r2, #128	; 0x80
 80094d6:	0612      	lsls	r2, r2, #24
 80094d8:	601a      	str	r2, [r3, #0]
}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	46bd      	mov	sp, r7
 80094de:	b004      	add	sp, #16
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	20001148 	.word	0x20001148
 80094e8:	20003088 	.word	0x20003088
 80094ec:	20003090 	.word	0x20003090
 80094f0:	20003098 	.word	0x20003098
 80094f4:	20003094 	.word	0x20003094
 80094f8:	2000309c 	.word	0x2000309c

080094fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009504:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <prvInsertBlockIntoFreeList+0xa8>)
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	e002      	b.n	8009510 <prvInsertBlockIntoFreeList+0x14>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d8f7      	bhi.n	800950a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d108      	bne.n	800953e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	18d2      	adds	r2, r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	18d2      	adds	r2, r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d118      	bne.n	8009584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d00d      	beq.n	800957a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	18d2      	adds	r2, r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e008      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <prvInsertBlockIntoFreeList+0xac>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	e003      	b.n	800958c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	429a      	cmp	r2, r3
 8009592:	d002      	beq.n	800959a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	20003088 	.word	0x20003088
 80095a8:	20003090 	.word	0x20003090

080095ac <__errno>:
 80095ac:	4b01      	ldr	r3, [pc, #4]	; (80095b4 <__errno+0x8>)
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	4770      	bx	lr
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	20000010 	.word	0x20000010

080095b8 <__libc_init_array>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	2600      	movs	r6, #0
 80095bc:	4d0c      	ldr	r5, [pc, #48]	; (80095f0 <__libc_init_array+0x38>)
 80095be:	4c0d      	ldr	r4, [pc, #52]	; (80095f4 <__libc_init_array+0x3c>)
 80095c0:	1b64      	subs	r4, r4, r5
 80095c2:	10a4      	asrs	r4, r4, #2
 80095c4:	42a6      	cmp	r6, r4
 80095c6:	d109      	bne.n	80095dc <__libc_init_array+0x24>
 80095c8:	2600      	movs	r6, #0
 80095ca:	f000 fcfd 	bl	8009fc8 <_init>
 80095ce:	4d0a      	ldr	r5, [pc, #40]	; (80095f8 <__libc_init_array+0x40>)
 80095d0:	4c0a      	ldr	r4, [pc, #40]	; (80095fc <__libc_init_array+0x44>)
 80095d2:	1b64      	subs	r4, r4, r5
 80095d4:	10a4      	asrs	r4, r4, #2
 80095d6:	42a6      	cmp	r6, r4
 80095d8:	d105      	bne.n	80095e6 <__libc_init_array+0x2e>
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	00b3      	lsls	r3, r6, #2
 80095de:	58eb      	ldr	r3, [r5, r3]
 80095e0:	4798      	blx	r3
 80095e2:	3601      	adds	r6, #1
 80095e4:	e7ee      	b.n	80095c4 <__libc_init_array+0xc>
 80095e6:	00b3      	lsls	r3, r6, #2
 80095e8:	58eb      	ldr	r3, [r5, r3]
 80095ea:	4798      	blx	r3
 80095ec:	3601      	adds	r6, #1
 80095ee:	e7f2      	b.n	80095d6 <__libc_init_array+0x1e>
 80095f0:	0800a404 	.word	0x0800a404
 80095f4:	0800a404 	.word	0x0800a404
 80095f8:	0800a404 	.word	0x0800a404
 80095fc:	0800a408 	.word	0x0800a408

08009600 <__retarget_lock_acquire_recursive>:
 8009600:	4770      	bx	lr

08009602 <__retarget_lock_release_recursive>:
 8009602:	4770      	bx	lr

08009604 <memcpy>:
 8009604:	2300      	movs	r3, #0
 8009606:	b510      	push	{r4, lr}
 8009608:	429a      	cmp	r2, r3
 800960a:	d100      	bne.n	800960e <memcpy+0xa>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	5ccc      	ldrb	r4, [r1, r3]
 8009610:	54c4      	strb	r4, [r0, r3]
 8009612:	3301      	adds	r3, #1
 8009614:	e7f8      	b.n	8009608 <memcpy+0x4>

08009616 <memmove>:
 8009616:	b510      	push	{r4, lr}
 8009618:	4288      	cmp	r0, r1
 800961a:	d902      	bls.n	8009622 <memmove+0xc>
 800961c:	188b      	adds	r3, r1, r2
 800961e:	4298      	cmp	r0, r3
 8009620:	d303      	bcc.n	800962a <memmove+0x14>
 8009622:	2300      	movs	r3, #0
 8009624:	e007      	b.n	8009636 <memmove+0x20>
 8009626:	5c8b      	ldrb	r3, [r1, r2]
 8009628:	5483      	strb	r3, [r0, r2]
 800962a:	3a01      	subs	r2, #1
 800962c:	d2fb      	bcs.n	8009626 <memmove+0x10>
 800962e:	bd10      	pop	{r4, pc}
 8009630:	5ccc      	ldrb	r4, [r1, r3]
 8009632:	54c4      	strb	r4, [r0, r3]
 8009634:	3301      	adds	r3, #1
 8009636:	429a      	cmp	r2, r3
 8009638:	d1fa      	bne.n	8009630 <memmove+0x1a>
 800963a:	e7f8      	b.n	800962e <memmove+0x18>

0800963c <memset>:
 800963c:	0003      	movs	r3, r0
 800963e:	1882      	adds	r2, r0, r2
 8009640:	4293      	cmp	r3, r2
 8009642:	d100      	bne.n	8009646 <memset+0xa>
 8009644:	4770      	bx	lr
 8009646:	7019      	strb	r1, [r3, #0]
 8009648:	3301      	adds	r3, #1
 800964a:	e7f9      	b.n	8009640 <memset+0x4>

0800964c <sbrk_aligned>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4e0f      	ldr	r6, [pc, #60]	; (800968c <sbrk_aligned+0x40>)
 8009650:	000d      	movs	r5, r1
 8009652:	6831      	ldr	r1, [r6, #0]
 8009654:	0004      	movs	r4, r0
 8009656:	2900      	cmp	r1, #0
 8009658:	d102      	bne.n	8009660 <sbrk_aligned+0x14>
 800965a:	f000 f903 	bl	8009864 <_sbrk_r>
 800965e:	6030      	str	r0, [r6, #0]
 8009660:	0029      	movs	r1, r5
 8009662:	0020      	movs	r0, r4
 8009664:	f000 f8fe 	bl	8009864 <_sbrk_r>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d00a      	beq.n	8009682 <sbrk_aligned+0x36>
 800966c:	2303      	movs	r3, #3
 800966e:	1cc5      	adds	r5, r0, #3
 8009670:	439d      	bics	r5, r3
 8009672:	42a8      	cmp	r0, r5
 8009674:	d007      	beq.n	8009686 <sbrk_aligned+0x3a>
 8009676:	1a29      	subs	r1, r5, r0
 8009678:	0020      	movs	r0, r4
 800967a:	f000 f8f3 	bl	8009864 <_sbrk_r>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d101      	bne.n	8009686 <sbrk_aligned+0x3a>
 8009682:	2501      	movs	r5, #1
 8009684:	426d      	negs	r5, r5
 8009686:	0028      	movs	r0, r5
 8009688:	bd70      	pop	{r4, r5, r6, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	200030a8 	.word	0x200030a8

08009690 <_malloc_r>:
 8009690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009692:	2203      	movs	r2, #3
 8009694:	1ccb      	adds	r3, r1, #3
 8009696:	4393      	bics	r3, r2
 8009698:	3308      	adds	r3, #8
 800969a:	0006      	movs	r6, r0
 800969c:	001f      	movs	r7, r3
 800969e:	2b0c      	cmp	r3, #12
 80096a0:	d232      	bcs.n	8009708 <_malloc_r+0x78>
 80096a2:	270c      	movs	r7, #12
 80096a4:	42b9      	cmp	r1, r7
 80096a6:	d831      	bhi.n	800970c <_malloc_r+0x7c>
 80096a8:	0030      	movs	r0, r6
 80096aa:	f000 f90d 	bl	80098c8 <__malloc_lock>
 80096ae:	4d32      	ldr	r5, [pc, #200]	; (8009778 <_malloc_r+0xe8>)
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	001c      	movs	r4, r3
 80096b4:	2c00      	cmp	r4, #0
 80096b6:	d12e      	bne.n	8009716 <_malloc_r+0x86>
 80096b8:	0039      	movs	r1, r7
 80096ba:	0030      	movs	r0, r6
 80096bc:	f7ff ffc6 	bl	800964c <sbrk_aligned>
 80096c0:	0004      	movs	r4, r0
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	d11e      	bne.n	8009704 <_malloc_r+0x74>
 80096c6:	682c      	ldr	r4, [r5, #0]
 80096c8:	0025      	movs	r5, r4
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	d14a      	bne.n	8009764 <_malloc_r+0xd4>
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	0029      	movs	r1, r5
 80096d2:	18e3      	adds	r3, r4, r3
 80096d4:	0030      	movs	r0, r6
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f000 f8c4 	bl	8009864 <_sbrk_r>
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	4283      	cmp	r3, r0
 80096e0:	d143      	bne.n	800976a <_malloc_r+0xda>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	3703      	adds	r7, #3
 80096e6:	1aff      	subs	r7, r7, r3
 80096e8:	2303      	movs	r3, #3
 80096ea:	439f      	bics	r7, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	2f0c      	cmp	r7, #12
 80096f0:	d200      	bcs.n	80096f4 <_malloc_r+0x64>
 80096f2:	270c      	movs	r7, #12
 80096f4:	0039      	movs	r1, r7
 80096f6:	0030      	movs	r0, r6
 80096f8:	f7ff ffa8 	bl	800964c <sbrk_aligned>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d034      	beq.n	800976a <_malloc_r+0xda>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	19df      	adds	r7, r3, r7
 8009704:	6027      	str	r7, [r4, #0]
 8009706:	e013      	b.n	8009730 <_malloc_r+0xa0>
 8009708:	2b00      	cmp	r3, #0
 800970a:	dacb      	bge.n	80096a4 <_malloc_r+0x14>
 800970c:	230c      	movs	r3, #12
 800970e:	2500      	movs	r5, #0
 8009710:	6033      	str	r3, [r6, #0]
 8009712:	0028      	movs	r0, r5
 8009714:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009716:	6822      	ldr	r2, [r4, #0]
 8009718:	1bd1      	subs	r1, r2, r7
 800971a:	d420      	bmi.n	800975e <_malloc_r+0xce>
 800971c:	290b      	cmp	r1, #11
 800971e:	d917      	bls.n	8009750 <_malloc_r+0xc0>
 8009720:	19e2      	adds	r2, r4, r7
 8009722:	6027      	str	r7, [r4, #0]
 8009724:	42a3      	cmp	r3, r4
 8009726:	d111      	bne.n	800974c <_malloc_r+0xbc>
 8009728:	602a      	str	r2, [r5, #0]
 800972a:	6863      	ldr	r3, [r4, #4]
 800972c:	6011      	str	r1, [r2, #0]
 800972e:	6053      	str	r3, [r2, #4]
 8009730:	0030      	movs	r0, r6
 8009732:	0025      	movs	r5, r4
 8009734:	f000 f8d0 	bl	80098d8 <__malloc_unlock>
 8009738:	2207      	movs	r2, #7
 800973a:	350b      	adds	r5, #11
 800973c:	1d23      	adds	r3, r4, #4
 800973e:	4395      	bics	r5, r2
 8009740:	1aea      	subs	r2, r5, r3
 8009742:	429d      	cmp	r5, r3
 8009744:	d0e5      	beq.n	8009712 <_malloc_r+0x82>
 8009746:	1b5b      	subs	r3, r3, r5
 8009748:	50a3      	str	r3, [r4, r2]
 800974a:	e7e2      	b.n	8009712 <_malloc_r+0x82>
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	e7ec      	b.n	800972a <_malloc_r+0x9a>
 8009750:	6862      	ldr	r2, [r4, #4]
 8009752:	42a3      	cmp	r3, r4
 8009754:	d101      	bne.n	800975a <_malloc_r+0xca>
 8009756:	602a      	str	r2, [r5, #0]
 8009758:	e7ea      	b.n	8009730 <_malloc_r+0xa0>
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	e7e8      	b.n	8009730 <_malloc_r+0xa0>
 800975e:	0023      	movs	r3, r4
 8009760:	6864      	ldr	r4, [r4, #4]
 8009762:	e7a7      	b.n	80096b4 <_malloc_r+0x24>
 8009764:	002c      	movs	r4, r5
 8009766:	686d      	ldr	r5, [r5, #4]
 8009768:	e7af      	b.n	80096ca <_malloc_r+0x3a>
 800976a:	230c      	movs	r3, #12
 800976c:	0030      	movs	r0, r6
 800976e:	6033      	str	r3, [r6, #0]
 8009770:	f000 f8b2 	bl	80098d8 <__malloc_unlock>
 8009774:	e7cd      	b.n	8009712 <_malloc_r+0x82>
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	200030a4 	.word	0x200030a4

0800977c <cleanup_glue>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	000d      	movs	r5, r1
 8009780:	6809      	ldr	r1, [r1, #0]
 8009782:	0004      	movs	r4, r0
 8009784:	2900      	cmp	r1, #0
 8009786:	d001      	beq.n	800978c <cleanup_glue+0x10>
 8009788:	f7ff fff8 	bl	800977c <cleanup_glue>
 800978c:	0029      	movs	r1, r5
 800978e:	0020      	movs	r0, r4
 8009790:	f000 f8aa 	bl	80098e8 <_free_r>
 8009794:	bd70      	pop	{r4, r5, r6, pc}
	...

08009798 <_reclaim_reent>:
 8009798:	4b31      	ldr	r3, [pc, #196]	; (8009860 <_reclaim_reent+0xc8>)
 800979a:	b570      	push	{r4, r5, r6, lr}
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	0004      	movs	r4, r0
 80097a0:	4283      	cmp	r3, r0
 80097a2:	d049      	beq.n	8009838 <_reclaim_reent+0xa0>
 80097a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00a      	beq.n	80097c0 <_reclaim_reent+0x28>
 80097aa:	2500      	movs	r5, #0
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	42ab      	cmp	r3, r5
 80097b0:	d147      	bne.n	8009842 <_reclaim_reent+0xaa>
 80097b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b4:	6819      	ldr	r1, [r3, #0]
 80097b6:	2900      	cmp	r1, #0
 80097b8:	d002      	beq.n	80097c0 <_reclaim_reent+0x28>
 80097ba:	0020      	movs	r0, r4
 80097bc:	f000 f894 	bl	80098e8 <_free_r>
 80097c0:	6961      	ldr	r1, [r4, #20]
 80097c2:	2900      	cmp	r1, #0
 80097c4:	d002      	beq.n	80097cc <_reclaim_reent+0x34>
 80097c6:	0020      	movs	r0, r4
 80097c8:	f000 f88e 	bl	80098e8 <_free_r>
 80097cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d002      	beq.n	80097d8 <_reclaim_reent+0x40>
 80097d2:	0020      	movs	r0, r4
 80097d4:	f000 f888 	bl	80098e8 <_free_r>
 80097d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80097da:	2900      	cmp	r1, #0
 80097dc:	d002      	beq.n	80097e4 <_reclaim_reent+0x4c>
 80097de:	0020      	movs	r0, r4
 80097e0:	f000 f882 	bl	80098e8 <_free_r>
 80097e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d002      	beq.n	80097f0 <_reclaim_reent+0x58>
 80097ea:	0020      	movs	r0, r4
 80097ec:	f000 f87c 	bl	80098e8 <_free_r>
 80097f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d002      	beq.n	80097fc <_reclaim_reent+0x64>
 80097f6:	0020      	movs	r0, r4
 80097f8:	f000 f876 	bl	80098e8 <_free_r>
 80097fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80097fe:	2900      	cmp	r1, #0
 8009800:	d002      	beq.n	8009808 <_reclaim_reent+0x70>
 8009802:	0020      	movs	r0, r4
 8009804:	f000 f870 	bl	80098e8 <_free_r>
 8009808:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800980a:	2900      	cmp	r1, #0
 800980c:	d002      	beq.n	8009814 <_reclaim_reent+0x7c>
 800980e:	0020      	movs	r0, r4
 8009810:	f000 f86a 	bl	80098e8 <_free_r>
 8009814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009816:	2900      	cmp	r1, #0
 8009818:	d002      	beq.n	8009820 <_reclaim_reent+0x88>
 800981a:	0020      	movs	r0, r4
 800981c:	f000 f864 	bl	80098e8 <_free_r>
 8009820:	69a3      	ldr	r3, [r4, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <_reclaim_reent+0xa0>
 8009826:	0020      	movs	r0, r4
 8009828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800982a:	4798      	blx	r3
 800982c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800982e:	2900      	cmp	r1, #0
 8009830:	d002      	beq.n	8009838 <_reclaim_reent+0xa0>
 8009832:	0020      	movs	r0, r4
 8009834:	f7ff ffa2 	bl	800977c <cleanup_glue>
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	5949      	ldr	r1, [r1, r5]
 800983c:	2900      	cmp	r1, #0
 800983e:	d108      	bne.n	8009852 <_reclaim_reent+0xba>
 8009840:	3504      	adds	r5, #4
 8009842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009844:	68d9      	ldr	r1, [r3, #12]
 8009846:	2d80      	cmp	r5, #128	; 0x80
 8009848:	d1f7      	bne.n	800983a <_reclaim_reent+0xa2>
 800984a:	0020      	movs	r0, r4
 800984c:	f000 f84c 	bl	80098e8 <_free_r>
 8009850:	e7af      	b.n	80097b2 <_reclaim_reent+0x1a>
 8009852:	680e      	ldr	r6, [r1, #0]
 8009854:	0020      	movs	r0, r4
 8009856:	f000 f847 	bl	80098e8 <_free_r>
 800985a:	0031      	movs	r1, r6
 800985c:	e7ee      	b.n	800983c <_reclaim_reent+0xa4>
 800985e:	46c0      	nop			; (mov r8, r8)
 8009860:	20000010 	.word	0x20000010

08009864 <_sbrk_r>:
 8009864:	2300      	movs	r3, #0
 8009866:	b570      	push	{r4, r5, r6, lr}
 8009868:	4d06      	ldr	r5, [pc, #24]	; (8009884 <_sbrk_r+0x20>)
 800986a:	0004      	movs	r4, r0
 800986c:	0008      	movs	r0, r1
 800986e:	602b      	str	r3, [r5, #0]
 8009870:	f7f8 fbcc 	bl	800200c <_sbrk>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	d103      	bne.n	8009880 <_sbrk_r+0x1c>
 8009878:	682b      	ldr	r3, [r5, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d000      	beq.n	8009880 <_sbrk_r+0x1c>
 800987e:	6023      	str	r3, [r4, #0]
 8009880:	bd70      	pop	{r4, r5, r6, pc}
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	200030ac 	.word	0x200030ac

08009888 <siprintf>:
 8009888:	b40e      	push	{r1, r2, r3}
 800988a:	b500      	push	{lr}
 800988c:	490b      	ldr	r1, [pc, #44]	; (80098bc <siprintf+0x34>)
 800988e:	b09c      	sub	sp, #112	; 0x70
 8009890:	ab1d      	add	r3, sp, #116	; 0x74
 8009892:	9002      	str	r0, [sp, #8]
 8009894:	9006      	str	r0, [sp, #24]
 8009896:	9107      	str	r1, [sp, #28]
 8009898:	9104      	str	r1, [sp, #16]
 800989a:	4809      	ldr	r0, [pc, #36]	; (80098c0 <siprintf+0x38>)
 800989c:	4909      	ldr	r1, [pc, #36]	; (80098c4 <siprintf+0x3c>)
 800989e:	cb04      	ldmia	r3!, {r2}
 80098a0:	9105      	str	r1, [sp, #20]
 80098a2:	6800      	ldr	r0, [r0, #0]
 80098a4:	a902      	add	r1, sp, #8
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	f000 f8ca 	bl	8009a40 <_svfiprintf_r>
 80098ac:	2300      	movs	r3, #0
 80098ae:	9a02      	ldr	r2, [sp, #8]
 80098b0:	7013      	strb	r3, [r2, #0]
 80098b2:	b01c      	add	sp, #112	; 0x70
 80098b4:	bc08      	pop	{r3}
 80098b6:	b003      	add	sp, #12
 80098b8:	4718      	bx	r3
 80098ba:	46c0      	nop			; (mov r8, r8)
 80098bc:	7fffffff 	.word	0x7fffffff
 80098c0:	20000010 	.word	0x20000010
 80098c4:	ffff0208 	.word	0xffff0208

080098c8 <__malloc_lock>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	4802      	ldr	r0, [pc, #8]	; (80098d4 <__malloc_lock+0xc>)
 80098cc:	f7ff fe98 	bl	8009600 <__retarget_lock_acquire_recursive>
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	200030a0 	.word	0x200030a0

080098d8 <__malloc_unlock>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	4802      	ldr	r0, [pc, #8]	; (80098e4 <__malloc_unlock+0xc>)
 80098dc:	f7ff fe91 	bl	8009602 <__retarget_lock_release_recursive>
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	200030a0 	.word	0x200030a0

080098e8 <_free_r>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	0005      	movs	r5, r0
 80098ec:	2900      	cmp	r1, #0
 80098ee:	d010      	beq.n	8009912 <_free_r+0x2a>
 80098f0:	1f0c      	subs	r4, r1, #4
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da00      	bge.n	80098fa <_free_r+0x12>
 80098f8:	18e4      	adds	r4, r4, r3
 80098fa:	0028      	movs	r0, r5
 80098fc:	f7ff ffe4 	bl	80098c8 <__malloc_lock>
 8009900:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <_free_r+0x90>)
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d105      	bne.n	8009914 <_free_r+0x2c>
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	6014      	str	r4, [r2, #0]
 800990c:	0028      	movs	r0, r5
 800990e:	f7ff ffe3 	bl	80098d8 <__malloc_unlock>
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	42a3      	cmp	r3, r4
 8009916:	d908      	bls.n	800992a <_free_r+0x42>
 8009918:	6821      	ldr	r1, [r4, #0]
 800991a:	1860      	adds	r0, r4, r1
 800991c:	4283      	cmp	r3, r0
 800991e:	d1f3      	bne.n	8009908 <_free_r+0x20>
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	1841      	adds	r1, r0, r1
 8009926:	6021      	str	r1, [r4, #0]
 8009928:	e7ee      	b.n	8009908 <_free_r+0x20>
 800992a:	001a      	movs	r2, r3
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <_free_r+0x4e>
 8009932:	42a3      	cmp	r3, r4
 8009934:	d9f9      	bls.n	800992a <_free_r+0x42>
 8009936:	6811      	ldr	r1, [r2, #0]
 8009938:	1850      	adds	r0, r2, r1
 800993a:	42a0      	cmp	r0, r4
 800993c:	d10b      	bne.n	8009956 <_free_r+0x6e>
 800993e:	6820      	ldr	r0, [r4, #0]
 8009940:	1809      	adds	r1, r1, r0
 8009942:	1850      	adds	r0, r2, r1
 8009944:	6011      	str	r1, [r2, #0]
 8009946:	4283      	cmp	r3, r0
 8009948:	d1e0      	bne.n	800990c <_free_r+0x24>
 800994a:	6818      	ldr	r0, [r3, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	1841      	adds	r1, r0, r1
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	6053      	str	r3, [r2, #4]
 8009954:	e7da      	b.n	800990c <_free_r+0x24>
 8009956:	42a0      	cmp	r0, r4
 8009958:	d902      	bls.n	8009960 <_free_r+0x78>
 800995a:	230c      	movs	r3, #12
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	e7d5      	b.n	800990c <_free_r+0x24>
 8009960:	6821      	ldr	r1, [r4, #0]
 8009962:	1860      	adds	r0, r4, r1
 8009964:	4283      	cmp	r3, r0
 8009966:	d103      	bne.n	8009970 <_free_r+0x88>
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	1841      	adds	r1, r0, r1
 800996e:	6021      	str	r1, [r4, #0]
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6054      	str	r4, [r2, #4]
 8009974:	e7ca      	b.n	800990c <_free_r+0x24>
 8009976:	46c0      	nop			; (mov r8, r8)
 8009978:	200030a4 	.word	0x200030a4

0800997c <__ssputs_r>:
 800997c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997e:	688e      	ldr	r6, [r1, #8]
 8009980:	b085      	sub	sp, #20
 8009982:	0007      	movs	r7, r0
 8009984:	000c      	movs	r4, r1
 8009986:	9203      	str	r2, [sp, #12]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	429e      	cmp	r6, r3
 800998c:	d83c      	bhi.n	8009a08 <__ssputs_r+0x8c>
 800998e:	2390      	movs	r3, #144	; 0x90
 8009990:	898a      	ldrh	r2, [r1, #12]
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	421a      	tst	r2, r3
 8009996:	d034      	beq.n	8009a02 <__ssputs_r+0x86>
 8009998:	6909      	ldr	r1, [r1, #16]
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	6960      	ldr	r0, [r4, #20]
 800999e:	1a5b      	subs	r3, r3, r1
 80099a0:	9302      	str	r3, [sp, #8]
 80099a2:	2303      	movs	r3, #3
 80099a4:	4343      	muls	r3, r0
 80099a6:	0fdd      	lsrs	r5, r3, #31
 80099a8:	18ed      	adds	r5, r5, r3
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	9802      	ldr	r0, [sp, #8]
 80099ae:	3301      	adds	r3, #1
 80099b0:	181b      	adds	r3, r3, r0
 80099b2:	106d      	asrs	r5, r5, #1
 80099b4:	42ab      	cmp	r3, r5
 80099b6:	d900      	bls.n	80099ba <__ssputs_r+0x3e>
 80099b8:	001d      	movs	r5, r3
 80099ba:	0553      	lsls	r3, r2, #21
 80099bc:	d532      	bpl.n	8009a24 <__ssputs_r+0xa8>
 80099be:	0029      	movs	r1, r5
 80099c0:	0038      	movs	r0, r7
 80099c2:	f7ff fe65 	bl	8009690 <_malloc_r>
 80099c6:	1e06      	subs	r6, r0, #0
 80099c8:	d109      	bne.n	80099de <__ssputs_r+0x62>
 80099ca:	230c      	movs	r3, #12
 80099cc:	603b      	str	r3, [r7, #0]
 80099ce:	2340      	movs	r3, #64	; 0x40
 80099d0:	2001      	movs	r0, #1
 80099d2:	89a2      	ldrh	r2, [r4, #12]
 80099d4:	4240      	negs	r0, r0
 80099d6:	4313      	orrs	r3, r2
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	b005      	add	sp, #20
 80099dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099de:	9a02      	ldr	r2, [sp, #8]
 80099e0:	6921      	ldr	r1, [r4, #16]
 80099e2:	f7ff fe0f 	bl	8009604 <memcpy>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	4a14      	ldr	r2, [pc, #80]	; (8009a3c <__ssputs_r+0xc0>)
 80099ea:	401a      	ands	r2, r3
 80099ec:	2380      	movs	r3, #128	; 0x80
 80099ee:	4313      	orrs	r3, r2
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	9b02      	ldr	r3, [sp, #8]
 80099f4:	6126      	str	r6, [r4, #16]
 80099f6:	18f6      	adds	r6, r6, r3
 80099f8:	6026      	str	r6, [r4, #0]
 80099fa:	6165      	str	r5, [r4, #20]
 80099fc:	9e01      	ldr	r6, [sp, #4]
 80099fe:	1aed      	subs	r5, r5, r3
 8009a00:	60a5      	str	r5, [r4, #8]
 8009a02:	9b01      	ldr	r3, [sp, #4]
 8009a04:	429e      	cmp	r6, r3
 8009a06:	d900      	bls.n	8009a0a <__ssputs_r+0x8e>
 8009a08:	9e01      	ldr	r6, [sp, #4]
 8009a0a:	0032      	movs	r2, r6
 8009a0c:	9903      	ldr	r1, [sp, #12]
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	f7ff fe01 	bl	8009616 <memmove>
 8009a14:	68a3      	ldr	r3, [r4, #8]
 8009a16:	2000      	movs	r0, #0
 8009a18:	1b9b      	subs	r3, r3, r6
 8009a1a:	60a3      	str	r3, [r4, #8]
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	199e      	adds	r6, r3, r6
 8009a20:	6026      	str	r6, [r4, #0]
 8009a22:	e7da      	b.n	80099da <__ssputs_r+0x5e>
 8009a24:	002a      	movs	r2, r5
 8009a26:	0038      	movs	r0, r7
 8009a28:	f000 fa97 	bl	8009f5a <_realloc_r>
 8009a2c:	1e06      	subs	r6, r0, #0
 8009a2e:	d1e0      	bne.n	80099f2 <__ssputs_r+0x76>
 8009a30:	0038      	movs	r0, r7
 8009a32:	6921      	ldr	r1, [r4, #16]
 8009a34:	f7ff ff58 	bl	80098e8 <_free_r>
 8009a38:	e7c7      	b.n	80099ca <__ssputs_r+0x4e>
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	fffffb7f 	.word	0xfffffb7f

08009a40 <_svfiprintf_r>:
 8009a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a42:	b0a1      	sub	sp, #132	; 0x84
 8009a44:	9003      	str	r0, [sp, #12]
 8009a46:	001d      	movs	r5, r3
 8009a48:	898b      	ldrh	r3, [r1, #12]
 8009a4a:	000f      	movs	r7, r1
 8009a4c:	0016      	movs	r6, r2
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	d511      	bpl.n	8009a76 <_svfiprintf_r+0x36>
 8009a52:	690b      	ldr	r3, [r1, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10e      	bne.n	8009a76 <_svfiprintf_r+0x36>
 8009a58:	2140      	movs	r1, #64	; 0x40
 8009a5a:	f7ff fe19 	bl	8009690 <_malloc_r>
 8009a5e:	6038      	str	r0, [r7, #0]
 8009a60:	6138      	str	r0, [r7, #16]
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d105      	bne.n	8009a72 <_svfiprintf_r+0x32>
 8009a66:	230c      	movs	r3, #12
 8009a68:	9a03      	ldr	r2, [sp, #12]
 8009a6a:	3801      	subs	r0, #1
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	b021      	add	sp, #132	; 0x84
 8009a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a72:	2340      	movs	r3, #64	; 0x40
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	2300      	movs	r3, #0
 8009a78:	ac08      	add	r4, sp, #32
 8009a7a:	6163      	str	r3, [r4, #20]
 8009a7c:	3320      	adds	r3, #32
 8009a7e:	7663      	strb	r3, [r4, #25]
 8009a80:	3310      	adds	r3, #16
 8009a82:	76a3      	strb	r3, [r4, #26]
 8009a84:	9507      	str	r5, [sp, #28]
 8009a86:	0035      	movs	r5, r6
 8009a88:	782b      	ldrb	r3, [r5, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <_svfiprintf_r+0x52>
 8009a8e:	2b25      	cmp	r3, #37	; 0x25
 8009a90:	d147      	bne.n	8009b22 <_svfiprintf_r+0xe2>
 8009a92:	1bab      	subs	r3, r5, r6
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	42b5      	cmp	r5, r6
 8009a98:	d00c      	beq.n	8009ab4 <_svfiprintf_r+0x74>
 8009a9a:	0032      	movs	r2, r6
 8009a9c:	0039      	movs	r1, r7
 8009a9e:	9803      	ldr	r0, [sp, #12]
 8009aa0:	f7ff ff6c 	bl	800997c <__ssputs_r>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d100      	bne.n	8009aaa <_svfiprintf_r+0x6a>
 8009aa8:	e0ae      	b.n	8009c08 <_svfiprintf_r+0x1c8>
 8009aaa:	6962      	ldr	r2, [r4, #20]
 8009aac:	9b05      	ldr	r3, [sp, #20]
 8009aae:	4694      	mov	ip, r2
 8009ab0:	4463      	add	r3, ip
 8009ab2:	6163      	str	r3, [r4, #20]
 8009ab4:	782b      	ldrb	r3, [r5, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d100      	bne.n	8009abc <_svfiprintf_r+0x7c>
 8009aba:	e0a5      	b.n	8009c08 <_svfiprintf_r+0x1c8>
 8009abc:	2201      	movs	r2, #1
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4252      	negs	r2, r2
 8009ac2:	6062      	str	r2, [r4, #4]
 8009ac4:	a904      	add	r1, sp, #16
 8009ac6:	3254      	adds	r2, #84	; 0x54
 8009ac8:	1852      	adds	r2, r2, r1
 8009aca:	1c6e      	adds	r6, r5, #1
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	60e3      	str	r3, [r4, #12]
 8009ad0:	60a3      	str	r3, [r4, #8]
 8009ad2:	7013      	strb	r3, [r2, #0]
 8009ad4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ad6:	2205      	movs	r2, #5
 8009ad8:	7831      	ldrb	r1, [r6, #0]
 8009ada:	4854      	ldr	r0, [pc, #336]	; (8009c2c <_svfiprintf_r+0x1ec>)
 8009adc:	f000 fa32 	bl	8009f44 <memchr>
 8009ae0:	1c75      	adds	r5, r6, #1
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d11f      	bne.n	8009b26 <_svfiprintf_r+0xe6>
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	06d3      	lsls	r3, r2, #27
 8009aea:	d504      	bpl.n	8009af6 <_svfiprintf_r+0xb6>
 8009aec:	2353      	movs	r3, #83	; 0x53
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	185b      	adds	r3, r3, r1
 8009af2:	2120      	movs	r1, #32
 8009af4:	7019      	strb	r1, [r3, #0]
 8009af6:	0713      	lsls	r3, r2, #28
 8009af8:	d504      	bpl.n	8009b04 <_svfiprintf_r+0xc4>
 8009afa:	2353      	movs	r3, #83	; 0x53
 8009afc:	a904      	add	r1, sp, #16
 8009afe:	185b      	adds	r3, r3, r1
 8009b00:	212b      	movs	r1, #43	; 0x2b
 8009b02:	7019      	strb	r1, [r3, #0]
 8009b04:	7833      	ldrb	r3, [r6, #0]
 8009b06:	2b2a      	cmp	r3, #42	; 0x2a
 8009b08:	d016      	beq.n	8009b38 <_svfiprintf_r+0xf8>
 8009b0a:	0035      	movs	r5, r6
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	200a      	movs	r0, #10
 8009b10:	68e3      	ldr	r3, [r4, #12]
 8009b12:	782a      	ldrb	r2, [r5, #0]
 8009b14:	1c6e      	adds	r6, r5, #1
 8009b16:	3a30      	subs	r2, #48	; 0x30
 8009b18:	2a09      	cmp	r2, #9
 8009b1a:	d94e      	bls.n	8009bba <_svfiprintf_r+0x17a>
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	d111      	bne.n	8009b44 <_svfiprintf_r+0x104>
 8009b20:	e017      	b.n	8009b52 <_svfiprintf_r+0x112>
 8009b22:	3501      	adds	r5, #1
 8009b24:	e7b0      	b.n	8009a88 <_svfiprintf_r+0x48>
 8009b26:	4b41      	ldr	r3, [pc, #260]	; (8009c2c <_svfiprintf_r+0x1ec>)
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	1ac0      	subs	r0, r0, r3
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4083      	lsls	r3, r0
 8009b30:	4313      	orrs	r3, r2
 8009b32:	002e      	movs	r6, r5
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	e7ce      	b.n	8009ad6 <_svfiprintf_r+0x96>
 8009b38:	9b07      	ldr	r3, [sp, #28]
 8009b3a:	1d19      	adds	r1, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	9107      	str	r1, [sp, #28]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	db01      	blt.n	8009b48 <_svfiprintf_r+0x108>
 8009b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b46:	e004      	b.n	8009b52 <_svfiprintf_r+0x112>
 8009b48:	425b      	negs	r3, r3
 8009b4a:	60e3      	str	r3, [r4, #12]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	782b      	ldrb	r3, [r5, #0]
 8009b54:	2b2e      	cmp	r3, #46	; 0x2e
 8009b56:	d10a      	bne.n	8009b6e <_svfiprintf_r+0x12e>
 8009b58:	786b      	ldrb	r3, [r5, #1]
 8009b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b5c:	d135      	bne.n	8009bca <_svfiprintf_r+0x18a>
 8009b5e:	9b07      	ldr	r3, [sp, #28]
 8009b60:	3502      	adds	r5, #2
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	9207      	str	r2, [sp, #28]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	db2b      	blt.n	8009bc4 <_svfiprintf_r+0x184>
 8009b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6e:	4e30      	ldr	r6, [pc, #192]	; (8009c30 <_svfiprintf_r+0x1f0>)
 8009b70:	2203      	movs	r2, #3
 8009b72:	0030      	movs	r0, r6
 8009b74:	7829      	ldrb	r1, [r5, #0]
 8009b76:	f000 f9e5 	bl	8009f44 <memchr>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d006      	beq.n	8009b8c <_svfiprintf_r+0x14c>
 8009b7e:	2340      	movs	r3, #64	; 0x40
 8009b80:	1b80      	subs	r0, r0, r6
 8009b82:	4083      	lsls	r3, r0
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	3501      	adds	r5, #1
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	7829      	ldrb	r1, [r5, #0]
 8009b8e:	2206      	movs	r2, #6
 8009b90:	4828      	ldr	r0, [pc, #160]	; (8009c34 <_svfiprintf_r+0x1f4>)
 8009b92:	1c6e      	adds	r6, r5, #1
 8009b94:	7621      	strb	r1, [r4, #24]
 8009b96:	f000 f9d5 	bl	8009f44 <memchr>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d03c      	beq.n	8009c18 <_svfiprintf_r+0x1d8>
 8009b9e:	4b26      	ldr	r3, [pc, #152]	; (8009c38 <_svfiprintf_r+0x1f8>)
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d125      	bne.n	8009bf0 <_svfiprintf_r+0x1b0>
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	9b07      	ldr	r3, [sp, #28]
 8009ba8:	3307      	adds	r3, #7
 8009baa:	4393      	bics	r3, r2
 8009bac:	3308      	adds	r3, #8
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	6963      	ldr	r3, [r4, #20]
 8009bb2:	9a04      	ldr	r2, [sp, #16]
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	6163      	str	r3, [r4, #20]
 8009bb8:	e765      	b.n	8009a86 <_svfiprintf_r+0x46>
 8009bba:	4343      	muls	r3, r0
 8009bbc:	0035      	movs	r5, r6
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	e7a6      	b.n	8009b12 <_svfiprintf_r+0xd2>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	425b      	negs	r3, r3
 8009bc8:	e7d0      	b.n	8009b6c <_svfiprintf_r+0x12c>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	200a      	movs	r0, #10
 8009bce:	001a      	movs	r2, r3
 8009bd0:	3501      	adds	r5, #1
 8009bd2:	6063      	str	r3, [r4, #4]
 8009bd4:	7829      	ldrb	r1, [r5, #0]
 8009bd6:	1c6e      	adds	r6, r5, #1
 8009bd8:	3930      	subs	r1, #48	; 0x30
 8009bda:	2909      	cmp	r1, #9
 8009bdc:	d903      	bls.n	8009be6 <_svfiprintf_r+0x1a6>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0c5      	beq.n	8009b6e <_svfiprintf_r+0x12e>
 8009be2:	9209      	str	r2, [sp, #36]	; 0x24
 8009be4:	e7c3      	b.n	8009b6e <_svfiprintf_r+0x12e>
 8009be6:	4342      	muls	r2, r0
 8009be8:	0035      	movs	r5, r6
 8009bea:	2301      	movs	r3, #1
 8009bec:	1852      	adds	r2, r2, r1
 8009bee:	e7f1      	b.n	8009bd4 <_svfiprintf_r+0x194>
 8009bf0:	ab07      	add	r3, sp, #28
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	003a      	movs	r2, r7
 8009bf6:	0021      	movs	r1, r4
 8009bf8:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <_svfiprintf_r+0x1fc>)
 8009bfa:	9803      	ldr	r0, [sp, #12]
 8009bfc:	e000      	b.n	8009c00 <_svfiprintf_r+0x1c0>
 8009bfe:	bf00      	nop
 8009c00:	9004      	str	r0, [sp, #16]
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	3301      	adds	r3, #1
 8009c06:	d1d3      	bne.n	8009bb0 <_svfiprintf_r+0x170>
 8009c08:	89bb      	ldrh	r3, [r7, #12]
 8009c0a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	d400      	bmi.n	8009c12 <_svfiprintf_r+0x1d2>
 8009c10:	e72d      	b.n	8009a6e <_svfiprintf_r+0x2e>
 8009c12:	2001      	movs	r0, #1
 8009c14:	4240      	negs	r0, r0
 8009c16:	e72a      	b.n	8009a6e <_svfiprintf_r+0x2e>
 8009c18:	ab07      	add	r3, sp, #28
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	003a      	movs	r2, r7
 8009c1e:	0021      	movs	r1, r4
 8009c20:	4b06      	ldr	r3, [pc, #24]	; (8009c3c <_svfiprintf_r+0x1fc>)
 8009c22:	9803      	ldr	r0, [sp, #12]
 8009c24:	f000 f87c 	bl	8009d20 <_printf_i>
 8009c28:	e7ea      	b.n	8009c00 <_svfiprintf_r+0x1c0>
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	0800a3d0 	.word	0x0800a3d0
 8009c30:	0800a3d6 	.word	0x0800a3d6
 8009c34:	0800a3da 	.word	0x0800a3da
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	0800997d 	.word	0x0800997d

08009c40 <_printf_common>:
 8009c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c42:	0015      	movs	r5, r2
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	688a      	ldr	r2, [r1, #8]
 8009c48:	690b      	ldr	r3, [r1, #16]
 8009c4a:	000c      	movs	r4, r1
 8009c4c:	9000      	str	r0, [sp, #0]
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	da00      	bge.n	8009c54 <_printf_common+0x14>
 8009c52:	0013      	movs	r3, r2
 8009c54:	0022      	movs	r2, r4
 8009c56:	602b      	str	r3, [r5, #0]
 8009c58:	3243      	adds	r2, #67	; 0x43
 8009c5a:	7812      	ldrb	r2, [r2, #0]
 8009c5c:	2a00      	cmp	r2, #0
 8009c5e:	d001      	beq.n	8009c64 <_printf_common+0x24>
 8009c60:	3301      	adds	r3, #1
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	069b      	lsls	r3, r3, #26
 8009c68:	d502      	bpl.n	8009c70 <_printf_common+0x30>
 8009c6a:	682b      	ldr	r3, [r5, #0]
 8009c6c:	3302      	adds	r3, #2
 8009c6e:	602b      	str	r3, [r5, #0]
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	2306      	movs	r3, #6
 8009c74:	0017      	movs	r7, r2
 8009c76:	401f      	ands	r7, r3
 8009c78:	421a      	tst	r2, r3
 8009c7a:	d027      	beq.n	8009ccc <_printf_common+0x8c>
 8009c7c:	0023      	movs	r3, r4
 8009c7e:	3343      	adds	r3, #67	; 0x43
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	1e5a      	subs	r2, r3, #1
 8009c84:	4193      	sbcs	r3, r2
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	0692      	lsls	r2, r2, #26
 8009c8a:	d430      	bmi.n	8009cee <_printf_common+0xae>
 8009c8c:	0022      	movs	r2, r4
 8009c8e:	9901      	ldr	r1, [sp, #4]
 8009c90:	9800      	ldr	r0, [sp, #0]
 8009c92:	9e08      	ldr	r6, [sp, #32]
 8009c94:	3243      	adds	r2, #67	; 0x43
 8009c96:	47b0      	blx	r6
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d025      	beq.n	8009ce8 <_printf_common+0xa8>
 8009c9c:	2306      	movs	r3, #6
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	682a      	ldr	r2, [r5, #0]
 8009ca2:	68e1      	ldr	r1, [r4, #12]
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	4003      	ands	r3, r0
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d103      	bne.n	8009cb4 <_printf_common+0x74>
 8009cac:	1a8d      	subs	r5, r1, r2
 8009cae:	43eb      	mvns	r3, r5
 8009cb0:	17db      	asrs	r3, r3, #31
 8009cb2:	401d      	ands	r5, r3
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	6922      	ldr	r2, [r4, #16]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	dd01      	ble.n	8009cc0 <_printf_common+0x80>
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	18ed      	adds	r5, r5, r3
 8009cc0:	2700      	movs	r7, #0
 8009cc2:	42bd      	cmp	r5, r7
 8009cc4:	d120      	bne.n	8009d08 <_printf_common+0xc8>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e010      	b.n	8009cec <_printf_common+0xac>
 8009cca:	3701      	adds	r7, #1
 8009ccc:	68e3      	ldr	r3, [r4, #12]
 8009cce:	682a      	ldr	r2, [r5, #0]
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	42bb      	cmp	r3, r7
 8009cd4:	ddd2      	ble.n	8009c7c <_printf_common+0x3c>
 8009cd6:	0022      	movs	r2, r4
 8009cd8:	2301      	movs	r3, #1
 8009cda:	9901      	ldr	r1, [sp, #4]
 8009cdc:	9800      	ldr	r0, [sp, #0]
 8009cde:	9e08      	ldr	r6, [sp, #32]
 8009ce0:	3219      	adds	r2, #25
 8009ce2:	47b0      	blx	r6
 8009ce4:	1c43      	adds	r3, r0, #1
 8009ce6:	d1f0      	bne.n	8009cca <_printf_common+0x8a>
 8009ce8:	2001      	movs	r0, #1
 8009cea:	4240      	negs	r0, r0
 8009cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cee:	2030      	movs	r0, #48	; 0x30
 8009cf0:	18e1      	adds	r1, r4, r3
 8009cf2:	3143      	adds	r1, #67	; 0x43
 8009cf4:	7008      	strb	r0, [r1, #0]
 8009cf6:	0021      	movs	r1, r4
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	3145      	adds	r1, #69	; 0x45
 8009cfc:	7809      	ldrb	r1, [r1, #0]
 8009cfe:	18a2      	adds	r2, r4, r2
 8009d00:	3243      	adds	r2, #67	; 0x43
 8009d02:	3302      	adds	r3, #2
 8009d04:	7011      	strb	r1, [r2, #0]
 8009d06:	e7c1      	b.n	8009c8c <_printf_common+0x4c>
 8009d08:	0022      	movs	r2, r4
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	9901      	ldr	r1, [sp, #4]
 8009d0e:	9800      	ldr	r0, [sp, #0]
 8009d10:	9e08      	ldr	r6, [sp, #32]
 8009d12:	321a      	adds	r2, #26
 8009d14:	47b0      	blx	r6
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d0e6      	beq.n	8009ce8 <_printf_common+0xa8>
 8009d1a:	3701      	adds	r7, #1
 8009d1c:	e7d1      	b.n	8009cc2 <_printf_common+0x82>
	...

08009d20 <_printf_i>:
 8009d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d22:	b08b      	sub	sp, #44	; 0x2c
 8009d24:	9206      	str	r2, [sp, #24]
 8009d26:	000a      	movs	r2, r1
 8009d28:	3243      	adds	r2, #67	; 0x43
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	9005      	str	r0, [sp, #20]
 8009d2e:	9204      	str	r2, [sp, #16]
 8009d30:	7e0a      	ldrb	r2, [r1, #24]
 8009d32:	000c      	movs	r4, r1
 8009d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d36:	2a78      	cmp	r2, #120	; 0x78
 8009d38:	d807      	bhi.n	8009d4a <_printf_i+0x2a>
 8009d3a:	2a62      	cmp	r2, #98	; 0x62
 8009d3c:	d809      	bhi.n	8009d52 <_printf_i+0x32>
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	d100      	bne.n	8009d44 <_printf_i+0x24>
 8009d42:	e0c1      	b.n	8009ec8 <_printf_i+0x1a8>
 8009d44:	2a58      	cmp	r2, #88	; 0x58
 8009d46:	d100      	bne.n	8009d4a <_printf_i+0x2a>
 8009d48:	e08c      	b.n	8009e64 <_printf_i+0x144>
 8009d4a:	0026      	movs	r6, r4
 8009d4c:	3642      	adds	r6, #66	; 0x42
 8009d4e:	7032      	strb	r2, [r6, #0]
 8009d50:	e022      	b.n	8009d98 <_printf_i+0x78>
 8009d52:	0010      	movs	r0, r2
 8009d54:	3863      	subs	r0, #99	; 0x63
 8009d56:	2815      	cmp	r0, #21
 8009d58:	d8f7      	bhi.n	8009d4a <_printf_i+0x2a>
 8009d5a:	f7f6 f9d5 	bl	8000108 <__gnu_thumb1_case_shi>
 8009d5e:	0016      	.short	0x0016
 8009d60:	fff6001f 	.word	0xfff6001f
 8009d64:	fff6fff6 	.word	0xfff6fff6
 8009d68:	001ffff6 	.word	0x001ffff6
 8009d6c:	fff6fff6 	.word	0xfff6fff6
 8009d70:	fff6fff6 	.word	0xfff6fff6
 8009d74:	003600a8 	.word	0x003600a8
 8009d78:	fff6009a 	.word	0xfff6009a
 8009d7c:	00b9fff6 	.word	0x00b9fff6
 8009d80:	0036fff6 	.word	0x0036fff6
 8009d84:	fff6fff6 	.word	0xfff6fff6
 8009d88:	009e      	.short	0x009e
 8009d8a:	0026      	movs	r6, r4
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	3642      	adds	r6, #66	; 0x42
 8009d90:	1d11      	adds	r1, r2, #4
 8009d92:	6019      	str	r1, [r3, #0]
 8009d94:	6813      	ldr	r3, [r2, #0]
 8009d96:	7033      	strb	r3, [r6, #0]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e0a7      	b.n	8009eec <_printf_i+0x1cc>
 8009d9c:	6808      	ldr	r0, [r1, #0]
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	1d0a      	adds	r2, r1, #4
 8009da2:	0605      	lsls	r5, r0, #24
 8009da4:	d50b      	bpl.n	8009dbe <_printf_i+0x9e>
 8009da6:	680d      	ldr	r5, [r1, #0]
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	da03      	bge.n	8009db6 <_printf_i+0x96>
 8009dae:	232d      	movs	r3, #45	; 0x2d
 8009db0:	9a04      	ldr	r2, [sp, #16]
 8009db2:	426d      	negs	r5, r5
 8009db4:	7013      	strb	r3, [r2, #0]
 8009db6:	4b61      	ldr	r3, [pc, #388]	; (8009f3c <_printf_i+0x21c>)
 8009db8:	270a      	movs	r7, #10
 8009dba:	9303      	str	r3, [sp, #12]
 8009dbc:	e01b      	b.n	8009df6 <_printf_i+0xd6>
 8009dbe:	680d      	ldr	r5, [r1, #0]
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	0641      	lsls	r1, r0, #25
 8009dc4:	d5f1      	bpl.n	8009daa <_printf_i+0x8a>
 8009dc6:	b22d      	sxth	r5, r5
 8009dc8:	e7ef      	b.n	8009daa <_printf_i+0x8a>
 8009dca:	680d      	ldr	r5, [r1, #0]
 8009dcc:	6819      	ldr	r1, [r3, #0]
 8009dce:	1d08      	adds	r0, r1, #4
 8009dd0:	6018      	str	r0, [r3, #0]
 8009dd2:	062e      	lsls	r6, r5, #24
 8009dd4:	d501      	bpl.n	8009dda <_printf_i+0xba>
 8009dd6:	680d      	ldr	r5, [r1, #0]
 8009dd8:	e003      	b.n	8009de2 <_printf_i+0xc2>
 8009dda:	066d      	lsls	r5, r5, #25
 8009ddc:	d5fb      	bpl.n	8009dd6 <_printf_i+0xb6>
 8009dde:	680d      	ldr	r5, [r1, #0]
 8009de0:	b2ad      	uxth	r5, r5
 8009de2:	4b56      	ldr	r3, [pc, #344]	; (8009f3c <_printf_i+0x21c>)
 8009de4:	2708      	movs	r7, #8
 8009de6:	9303      	str	r3, [sp, #12]
 8009de8:	2a6f      	cmp	r2, #111	; 0x6f
 8009dea:	d000      	beq.n	8009dee <_printf_i+0xce>
 8009dec:	3702      	adds	r7, #2
 8009dee:	0023      	movs	r3, r4
 8009df0:	2200      	movs	r2, #0
 8009df2:	3343      	adds	r3, #67	; 0x43
 8009df4:	701a      	strb	r2, [r3, #0]
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	60a3      	str	r3, [r4, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	db03      	blt.n	8009e06 <_printf_i+0xe6>
 8009dfe:	2204      	movs	r2, #4
 8009e00:	6821      	ldr	r1, [r4, #0]
 8009e02:	4391      	bics	r1, r2
 8009e04:	6021      	str	r1, [r4, #0]
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	d102      	bne.n	8009e10 <_printf_i+0xf0>
 8009e0a:	9e04      	ldr	r6, [sp, #16]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <_printf_i+0x10a>
 8009e10:	9e04      	ldr	r6, [sp, #16]
 8009e12:	0028      	movs	r0, r5
 8009e14:	0039      	movs	r1, r7
 8009e16:	f7f6 fa07 	bl	8000228 <__aeabi_uidivmod>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	3e01      	subs	r6, #1
 8009e1e:	5c5b      	ldrb	r3, [r3, r1]
 8009e20:	7033      	strb	r3, [r6, #0]
 8009e22:	002b      	movs	r3, r5
 8009e24:	0005      	movs	r5, r0
 8009e26:	429f      	cmp	r7, r3
 8009e28:	d9f3      	bls.n	8009e12 <_printf_i+0xf2>
 8009e2a:	2f08      	cmp	r7, #8
 8009e2c:	d109      	bne.n	8009e42 <_printf_i+0x122>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	07db      	lsls	r3, r3, #31
 8009e32:	d506      	bpl.n	8009e42 <_printf_i+0x122>
 8009e34:	6863      	ldr	r3, [r4, #4]
 8009e36:	6922      	ldr	r2, [r4, #16]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	dc02      	bgt.n	8009e42 <_printf_i+0x122>
 8009e3c:	2330      	movs	r3, #48	; 0x30
 8009e3e:	3e01      	subs	r6, #1
 8009e40:	7033      	strb	r3, [r6, #0]
 8009e42:	9b04      	ldr	r3, [sp, #16]
 8009e44:	1b9b      	subs	r3, r3, r6
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	0021      	movs	r1, r4
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	9805      	ldr	r0, [sp, #20]
 8009e50:	9b06      	ldr	r3, [sp, #24]
 8009e52:	aa09      	add	r2, sp, #36	; 0x24
 8009e54:	f7ff fef4 	bl	8009c40 <_printf_common>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d14c      	bne.n	8009ef6 <_printf_i+0x1d6>
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	4240      	negs	r0, r0
 8009e60:	b00b      	add	sp, #44	; 0x2c
 8009e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e64:	3145      	adds	r1, #69	; 0x45
 8009e66:	700a      	strb	r2, [r1, #0]
 8009e68:	4a34      	ldr	r2, [pc, #208]	; (8009f3c <_printf_i+0x21c>)
 8009e6a:	9203      	str	r2, [sp, #12]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	6821      	ldr	r1, [r4, #0]
 8009e70:	ca20      	ldmia	r2!, {r5}
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	0608      	lsls	r0, r1, #24
 8009e76:	d516      	bpl.n	8009ea6 <_printf_i+0x186>
 8009e78:	07cb      	lsls	r3, r1, #31
 8009e7a:	d502      	bpl.n	8009e82 <_printf_i+0x162>
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	4319      	orrs	r1, r3
 8009e80:	6021      	str	r1, [r4, #0]
 8009e82:	2710      	movs	r7, #16
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	d1b2      	bne.n	8009dee <_printf_i+0xce>
 8009e88:	2320      	movs	r3, #32
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	439a      	bics	r2, r3
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	e7ad      	b.n	8009dee <_printf_i+0xce>
 8009e92:	2220      	movs	r2, #32
 8009e94:	6809      	ldr	r1, [r1, #0]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	6022      	str	r2, [r4, #0]
 8009e9a:	0022      	movs	r2, r4
 8009e9c:	2178      	movs	r1, #120	; 0x78
 8009e9e:	3245      	adds	r2, #69	; 0x45
 8009ea0:	7011      	strb	r1, [r2, #0]
 8009ea2:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <_printf_i+0x220>)
 8009ea4:	e7e1      	b.n	8009e6a <_printf_i+0x14a>
 8009ea6:	0648      	lsls	r0, r1, #25
 8009ea8:	d5e6      	bpl.n	8009e78 <_printf_i+0x158>
 8009eaa:	b2ad      	uxth	r5, r5
 8009eac:	e7e4      	b.n	8009e78 <_printf_i+0x158>
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	680d      	ldr	r5, [r1, #0]
 8009eb2:	1d10      	adds	r0, r2, #4
 8009eb4:	6949      	ldr	r1, [r1, #20]
 8009eb6:	6018      	str	r0, [r3, #0]
 8009eb8:	6813      	ldr	r3, [r2, #0]
 8009eba:	062e      	lsls	r6, r5, #24
 8009ebc:	d501      	bpl.n	8009ec2 <_printf_i+0x1a2>
 8009ebe:	6019      	str	r1, [r3, #0]
 8009ec0:	e002      	b.n	8009ec8 <_printf_i+0x1a8>
 8009ec2:	066d      	lsls	r5, r5, #25
 8009ec4:	d5fb      	bpl.n	8009ebe <_printf_i+0x19e>
 8009ec6:	8019      	strh	r1, [r3, #0]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9e04      	ldr	r6, [sp, #16]
 8009ecc:	6123      	str	r3, [r4, #16]
 8009ece:	e7bb      	b.n	8009e48 <_printf_i+0x128>
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	1d11      	adds	r1, r2, #4
 8009ed4:	6019      	str	r1, [r3, #0]
 8009ed6:	6816      	ldr	r6, [r2, #0]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	0030      	movs	r0, r6
 8009edc:	6862      	ldr	r2, [r4, #4]
 8009ede:	f000 f831 	bl	8009f44 <memchr>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d001      	beq.n	8009eea <_printf_i+0x1ca>
 8009ee6:	1b80      	subs	r0, r0, r6
 8009ee8:	6060      	str	r0, [r4, #4]
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	7013      	strb	r3, [r2, #0]
 8009ef4:	e7a8      	b.n	8009e48 <_printf_i+0x128>
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	0032      	movs	r2, r6
 8009efa:	9906      	ldr	r1, [sp, #24]
 8009efc:	9805      	ldr	r0, [sp, #20]
 8009efe:	9d07      	ldr	r5, [sp, #28]
 8009f00:	47a8      	blx	r5
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d0aa      	beq.n	8009e5c <_printf_i+0x13c>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	079b      	lsls	r3, r3, #30
 8009f0a:	d415      	bmi.n	8009f38 <_printf_i+0x218>
 8009f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0e:	68e0      	ldr	r0, [r4, #12]
 8009f10:	4298      	cmp	r0, r3
 8009f12:	daa5      	bge.n	8009e60 <_printf_i+0x140>
 8009f14:	0018      	movs	r0, r3
 8009f16:	e7a3      	b.n	8009e60 <_printf_i+0x140>
 8009f18:	0022      	movs	r2, r4
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	9906      	ldr	r1, [sp, #24]
 8009f1e:	9805      	ldr	r0, [sp, #20]
 8009f20:	9e07      	ldr	r6, [sp, #28]
 8009f22:	3219      	adds	r2, #25
 8009f24:	47b0      	blx	r6
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d098      	beq.n	8009e5c <_printf_i+0x13c>
 8009f2a:	3501      	adds	r5, #1
 8009f2c:	68e3      	ldr	r3, [r4, #12]
 8009f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f30:	1a9b      	subs	r3, r3, r2
 8009f32:	42ab      	cmp	r3, r5
 8009f34:	dcf0      	bgt.n	8009f18 <_printf_i+0x1f8>
 8009f36:	e7e9      	b.n	8009f0c <_printf_i+0x1ec>
 8009f38:	2500      	movs	r5, #0
 8009f3a:	e7f7      	b.n	8009f2c <_printf_i+0x20c>
 8009f3c:	0800a3e1 	.word	0x0800a3e1
 8009f40:	0800a3f2 	.word	0x0800a3f2

08009f44 <memchr>:
 8009f44:	b2c9      	uxtb	r1, r1
 8009f46:	1882      	adds	r2, r0, r2
 8009f48:	4290      	cmp	r0, r2
 8009f4a:	d101      	bne.n	8009f50 <memchr+0xc>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	4770      	bx	lr
 8009f50:	7803      	ldrb	r3, [r0, #0]
 8009f52:	428b      	cmp	r3, r1
 8009f54:	d0fb      	beq.n	8009f4e <memchr+0xa>
 8009f56:	3001      	adds	r0, #1
 8009f58:	e7f6      	b.n	8009f48 <memchr+0x4>

08009f5a <_realloc_r>:
 8009f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f5c:	0007      	movs	r7, r0
 8009f5e:	000e      	movs	r6, r1
 8009f60:	0014      	movs	r4, r2
 8009f62:	2900      	cmp	r1, #0
 8009f64:	d105      	bne.n	8009f72 <_realloc_r+0x18>
 8009f66:	0011      	movs	r1, r2
 8009f68:	f7ff fb92 	bl	8009690 <_malloc_r>
 8009f6c:	0005      	movs	r5, r0
 8009f6e:	0028      	movs	r0, r5
 8009f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	d103      	bne.n	8009f7e <_realloc_r+0x24>
 8009f76:	f7ff fcb7 	bl	80098e8 <_free_r>
 8009f7a:	0025      	movs	r5, r4
 8009f7c:	e7f7      	b.n	8009f6e <_realloc_r+0x14>
 8009f7e:	f000 f81b 	bl	8009fb8 <_malloc_usable_size_r>
 8009f82:	9001      	str	r0, [sp, #4]
 8009f84:	4284      	cmp	r4, r0
 8009f86:	d803      	bhi.n	8009f90 <_realloc_r+0x36>
 8009f88:	0035      	movs	r5, r6
 8009f8a:	0843      	lsrs	r3, r0, #1
 8009f8c:	42a3      	cmp	r3, r4
 8009f8e:	d3ee      	bcc.n	8009f6e <_realloc_r+0x14>
 8009f90:	0021      	movs	r1, r4
 8009f92:	0038      	movs	r0, r7
 8009f94:	f7ff fb7c 	bl	8009690 <_malloc_r>
 8009f98:	1e05      	subs	r5, r0, #0
 8009f9a:	d0e8      	beq.n	8009f6e <_realloc_r+0x14>
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	0022      	movs	r2, r4
 8009fa0:	429c      	cmp	r4, r3
 8009fa2:	d900      	bls.n	8009fa6 <_realloc_r+0x4c>
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	0031      	movs	r1, r6
 8009fa8:	0028      	movs	r0, r5
 8009faa:	f7ff fb2b 	bl	8009604 <memcpy>
 8009fae:	0031      	movs	r1, r6
 8009fb0:	0038      	movs	r0, r7
 8009fb2:	f7ff fc99 	bl	80098e8 <_free_r>
 8009fb6:	e7da      	b.n	8009f6e <_realloc_r+0x14>

08009fb8 <_malloc_usable_size_r>:
 8009fb8:	1f0b      	subs	r3, r1, #4
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	1f18      	subs	r0, r3, #4
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	da01      	bge.n	8009fc6 <_malloc_usable_size_r+0xe>
 8009fc2:	580b      	ldr	r3, [r1, r0]
 8009fc4:	18c0      	adds	r0, r0, r3
 8009fc6:	4770      	bx	lr

08009fc8 <_init>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	46c0      	nop			; (mov r8, r8)
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_fini>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr
