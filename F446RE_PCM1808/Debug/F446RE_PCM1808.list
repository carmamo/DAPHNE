
F446RE_PCM1808.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800aed8  0800aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b028  0800b028  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b030  0800b030  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b034  0800b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000074  0800b0ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  0800b0ac  00020dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186a3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ba  00000000  00000000  00038747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556f  00000000  00000000  0003e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abe5  00000000  00000000  0006397f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b2c  00000000  00000000  0007e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d44  00000000  00000000  001580e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aec0 	.word	0x0800aec0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800aec0 	.word	0x0800aec0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b0c0      	sub	sp, #256	; 0x100
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 ffc1 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f84b 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f9cf 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e6:	f000 f98f 	bl	8000908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f963 	bl	80008b4 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80005ee:	f000 f8c3 	bl	8000778 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 80005f2:	f000 f8ef 	bl	80007d4 <MX_SDIO_SD_Init>
  MX_CRC_Init();
 80005f6:	f000 f8ab 	bl	8000750 <MX_CRC_Init>
  MX_FATFS_Init();
 80005fa:	f006 ffb7 	bl	800756c <MX_FATFS_Init>
  MX_TIM3_Init();
 80005fe:	f000 f90b 	bl	8000818 <MX_TIM3_Init>
  /* USER CODE BEGIN WHILE */
  char filename[256];

  do
  {
	  res = f_mount(&SDFatFS, SDPath, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	4916      	ldr	r1, [pc, #88]	; (8000660 <main+0x8c>)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <main+0x90>)
 8000608:	f008 ffa2 	bl	8009550 <f_mount>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <main+0x94>)
 8000612:	701a      	strb	r2, [r3, #0]
  }
  while( res != FR_OK);
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <main+0x94>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f2      	bne.n	8000602 <main+0x2e>

  do
  {
	  res = Format_SD();
 800061c:	f000 fbfc 	bl	8000e18 <Format_SD>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <main+0x94>)
 8000626:	701a      	strb	r2, [r3, #0]
  }
  while (res != FR_OK);
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <main+0x94>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f5      	bne.n	800061c <main+0x48>

  while (1)
  {
	  if(audio_state == STATE_START_RECORDING)
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <main+0x98>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b03      	cmp	r3, #3
 8000636:	d1fb      	bne.n	8000630 <main+0x5c>
	  	  {
	  		  HAL_Delay(1);
 8000638:	2001      	movs	r0, #1
 800063a:	f001 f803 	bl	8001644 <HAL_Delay>
	  		  sprintf(filename, "%sr_%05d.wav", SDPath, count++);
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <main+0x9c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	b291      	uxth	r1, r2
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0x9c>)
 8000648:	8011      	strh	r1, [r2, #0]
 800064a:	4638      	mov	r0, r7
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <main+0x8c>)
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <main+0xa0>)
 8000650:	f00a f8b8 	bl	800a7c4 <siprintf>
	  		  startRecord(filename);
 8000654:	463b      	mov	r3, r7
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb08 	bl	8000c6c <startRecord>
	  if(audio_state == STATE_START_RECORDING)
 800065c:	e7e8      	b.n	8000630 <main+0x5c>
 800065e:	bf00      	nop
 8000660:	20000b44 	.word	0x20000b44
 8000664:	20000b48 	.word	0x20000b48
 8000668:	20000b18 	.word	0x20000b18
 800066c:	20000002 	.word	0x20000002
 8000670:	20000b1a 	.word	0x20000b1a
 8000674:	0800aed8 	.word	0x0800aed8

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f009 ffa4 	bl	800a5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <SystemClock_Config+0xd0>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a28      	ldr	r2, [pc, #160]	; (8000748 <SystemClock_Config+0xd0>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a22      	ldr	r2, [pc, #136]	; (800074c <SystemClock_Config+0xd4>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	; 0xa8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f4:	2307      	movs	r3, #7
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fb91 	bl	8003e28 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 fbea 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2105      	movs	r1, #5
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fabe 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f000 fbd3 	bl	8000ee4 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_CRC_Init+0x20>)
 8000756:	4a07      	ldr	r2, [pc, #28]	; (8000774 <MX_CRC_Init+0x24>)
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_CRC_Init+0x20>)
 800075c:	f001 f8a7 	bl	80018ae <HAL_CRC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000766:	f000 fbbd 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000090 	.word	0x20000090
 8000774:	40023000 	.word	0x40023000

08000778 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <MX_I2S2_Init+0x58>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2S2_Init+0x54>)
 8000784:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_I2S2_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2S2_Init+0x54>)
 8000792:	2203      	movs	r2, #3
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_I2S2_Init+0x54>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_I2S2_Init+0x54>)
 800079e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80007a2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2S2_Init+0x54>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_I2S2_Init+0x54>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2S2_Init+0x54>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_I2S2_Init+0x54>)
 80007b8:	f001 fe76 	bl	80024a8 <HAL_I2S_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80007c2:	f000 fb8f 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000098 	.word	0x20000098
 80007d0:	40003800 	.word	0x40003800

080007d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <MX_SDIO_SD_Init+0x40>)
 80007dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 80007f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fc:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <MX_SDIO_SD_Init+0x3c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000140 	.word	0x20000140
 8000814:	40012c00 	.word	0x40012c00

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM3_Init+0x94>)
 8000836:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <MX_TIM3_Init+0x98>)
 8000838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM3_Init+0x94>)
 800083c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8000840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM3_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_TIM3_Init+0x94>)
 800084a:	f241 3288 	movw	r2, #5000	; 0x1388
 800084e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_TIM3_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_TIM3_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_TIM3_Init+0x94>)
 800085e:	f005 f9a0 	bl	8005ba2 <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000868:	f000 fb3c 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_TIM3_Init+0x94>)
 800087a:	f005 fb88 	bl	8005f8e <HAL_TIM_ConfigClockSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 fb2e 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_TIM3_Init+0x94>)
 8000896:	f005 fda3 	bl	80063e0 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 fb20 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000284 	.word	0x20000284
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f005 fe08 	bl	8006500 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 faf5 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200002cc 	.word	0x200002cc
 8000904:	40004400 	.word	0x40004400

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_DMA_Init+0x78>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <MX_DMA_Init+0x78>)
 8000918:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_DMA_Init+0x78>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_DMA_Init+0x78>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_DMA_Init+0x78>)
 8000934:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_DMA_Init+0x78>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200e      	movs	r0, #14
 800094c:	f000 ff79 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000950:	200e      	movs	r0, #14
 8000952:	f000 ff92 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	203b      	movs	r0, #59	; 0x3b
 800095c:	f000 ff71 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000960:	203b      	movs	r0, #59	; 0x3b
 8000962:	f000 ff8a 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2045      	movs	r0, #69	; 0x45
 800096c:	f000 ff69 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000970:	2045      	movs	r0, #69	; 0x45
 8000972:	f000 ff82 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b3f      	ldr	r3, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a3e      	ldr	r2, [pc, #248]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a30      	ldr	r2, [pc, #192]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x118>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_GPIO_Init+0x118>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <MX_GPIO_Init+0x118>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <MX_GPIO_Init+0x118>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x118>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2120      	movs	r1, #32
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 8000a2c:	f001 fd0a 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <MX_GPIO_Init+0x120>)
 8000a48:	f001 fb50 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480f      	ldr	r0, [pc, #60]	; (8000aa0 <MX_GPIO_Init+0x11c>)
 8000a64:	f001 fb42 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <MX_GPIO_Init+0x124>)
 8000a7e:	f001 fb35 	bl	80020ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2028      	movs	r0, #40	; 0x28
 8000a88:	f000 fedb 	bl	8001842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a8c:	2028      	movs	r0, #40	; 0x28
 8000a8e:	f000 fef4 	bl	800187a <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020400 	.word	0x40020400

08000aac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13 && contando == false) {
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000abc:	d10c      	bne.n	8000ad8 <HAL_GPIO_EXTI_Callback+0x2c>
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	f083 0301 	eor.w	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d005      	beq.n	8000ad8 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_TIM_Base_Start_IT(&htim3);
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ace:	f005 f8b7 	bl	8005c40 <HAL_TIM_Base_Start_IT>
		contando = true;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
	}
	__NOP();
 8000ad8:	bf00      	nop
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000b19 	.word	0x20000b19
 8000ae8:	20000284 	.word	0x20000284

08000aec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000afa:	f001 fc8b 	bl	8002414 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11d      	bne.n	8000b40 <HAL_TIM_PeriodElapsedCallback+0x54>
		switch (audio_state) {
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d012      	beq.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x46>
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	dc0c      	bgt.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d002      	beq.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d004      	beq.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000b18:	e007      	b.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x3e>
		case STATE_STOP:
			audio_state = STATE_START_RECORDING;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
			break;
 8000b20:	e008      	b.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x48>
		case STATE_RECORDING:
			audio_state = STATE_STOP;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
			break;
 8000b28:	e004      	b.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x48>
		case STATE_START_RECORDING:
			break;
		default:
			audio_state = STATE_STOP;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
			break;
 8000b30:	e000      	b.n	8000b34 <HAL_TIM_PeriodElapsedCallback+0x48>
			break;
 8000b32:	bf00      	nop
		}
		contando = false;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b3c:	f005 f8f0 	bl	8005d20 <HAL_TIM_Base_Stop_IT>
	}
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	20000002 	.word	0x20000002
 8000b50:	20000b19 	.word	0x20000b19
 8000b54:	20000284 	.word	0x20000284

08000b58 <HAL_I2S_RxCpltCallback>:
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint8_t rcvCplt = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
	uint16_t* rpt, *wpt, *temppt;

	rCount++;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_I2S_RxCpltCallback+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_I2S_RxCpltCallback+0x40>)
 8000b6c:	6013      	str	r3, [r2, #0]
	rpt = (rcvBuf)+(rCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_I2S_RxCpltCallback+0x40>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_I2S_RxCpltCallback+0x44>)
 8000b78:	8812      	ldrh	r2, [r2, #0]
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_I2S_RxCpltCallback+0x48>)
 8000b82:	4413      	add	r3, r2
 8000b84:	60bb      	str	r3, [r7, #8]
	HAL_I2S_Receive_DMA(hi2s, rpt, DMA_READ_SIZE);
 8000b86:	2280      	movs	r2, #128	; 0x80
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f001 fd84 	bl	8002698 <HAL_I2S_Receive_DMA>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000b10 	.word	0x20000b10
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000310 	.word	0x20000310

08000ba4 <fwrite_wav_header>:

FRESULT fwrite_wav_header(FIL* file, uint16_t sampleRate, uint8_t bitsPerSample, uint8_t channels) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	; 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	807b      	strh	r3, [r7, #2]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	707b      	strb	r3, [r7, #1]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	703b      	strb	r3, [r7, #0]
	UINT bw;
	WAVE_HEADER wave_header;
	wave_header.riff[0] = 'R';wave_header.riff[1] = 'I';
 8000bbe:	2352      	movs	r3, #82	; 0x52
 8000bc0:	723b      	strb	r3, [r7, #8]
 8000bc2:	2349      	movs	r3, #73	; 0x49
 8000bc4:	727b      	strb	r3, [r7, #9]
	wave_header.riff[2] = 'F';wave_header.riff[3] = 'F';
 8000bc6:	2346      	movs	r3, #70	; 0x46
 8000bc8:	72bb      	strb	r3, [r7, #10]
 8000bca:	2346      	movs	r3, #70	; 0x46
 8000bcc:	72fb      	strb	r3, [r7, #11]
	wave_header.size = (uint32_t)0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
	wave_header.wave[0] = 'W';wave_header.wave[1] = 'A';
 8000bd2:	2357      	movs	r3, #87	; 0x57
 8000bd4:	743b      	strb	r3, [r7, #16]
 8000bd6:	2341      	movs	r3, #65	; 0x41
 8000bd8:	747b      	strb	r3, [r7, #17]
	wave_header.wave[2] = 'V';wave_header.wave[3] = 'E';
 8000bda:	2356      	movs	r3, #86	; 0x56
 8000bdc:	74bb      	strb	r3, [r7, #18]
 8000bde:	2345      	movs	r3, #69	; 0x45
 8000be0:	74fb      	strb	r3, [r7, #19]
	wave_header.fmt[0] = 'f';wave_header.fmt[1] = 'm';
 8000be2:	2366      	movs	r3, #102	; 0x66
 8000be4:	753b      	strb	r3, [r7, #20]
 8000be6:	236d      	movs	r3, #109	; 0x6d
 8000be8:	757b      	strb	r3, [r7, #21]
	wave_header.fmt[2] = 't';wave_header.fmt[3] = ' ';
 8000bea:	2374      	movs	r3, #116	; 0x74
 8000bec:	75bb      	strb	r3, [r7, #22]
 8000bee:	2320      	movs	r3, #32
 8000bf0:	75fb      	strb	r3, [r7, #23]
	wave_header.fmt_size = 16;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	61bb      	str	r3, [r7, #24]
	wave_header.format = 1; // PCM
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	83bb      	strh	r3, [r7, #28]
	wave_header.channels = channels; // channels
 8000bfa:	783b      	ldrb	r3, [r7, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	83fb      	strh	r3, [r7, #30]
	wave_header.sampleRate=sampleRate;  // sample rate
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	623b      	str	r3, [r7, #32]
	wave_header.rbc = sampleRate*bitsPerSample*channels/8;
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	787a      	ldrb	r2, [r7, #1]
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	783a      	ldrb	r2, [r7, #0]
 8000c0e:	fb02 f303 	mul.w	r3, r2, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da00      	bge.n	8000c18 <fwrite_wav_header+0x74>
 8000c16:	3307      	adds	r3, #7
 8000c18:	10db      	asrs	r3, r3, #3
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
	wave_header.bc =  bitsPerSample*channels/8;
 8000c1c:	787b      	ldrb	r3, [r7, #1]
 8000c1e:	783a      	ldrb	r2, [r7, #0]
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da00      	bge.n	8000c2a <fwrite_wav_header+0x86>
 8000c28:	3307      	adds	r3, #7
 8000c2a:	10db      	asrs	r3, r3, #3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	853b      	strh	r3, [r7, #40]	; 0x28
	wave_header.bitsPerSample = bitsPerSample; //bitsPerSample
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	857b      	strh	r3, [r7, #42]	; 0x2a
	wave_header.data[0] = 'd'; wave_header.data[1] = 'a';
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000c3c:	2361      	movs	r3, #97	; 0x61
 8000c3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	wave_header.data[2] = 't'; wave_header.data[3] = 'a';
 8000c42:	2374      	movs	r3, #116	; 0x74
 8000c44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000c48:	2361      	movs	r3, #97	; 0x61
 8000c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	wave_header.data_size = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
	return f_write(file, (uint8_t*)&wave_header, sizeof(wave_header), &bw);
 8000c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c56:	f107 0108 	add.w	r1, r7, #8
 8000c5a:	222c      	movs	r2, #44	; 0x2c
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f008 fe7b 	bl	8009958 <f_write>
 8000c62:	4603      	mov	r3, r0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3738      	adds	r7, #56	; 0x38
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <startRecord>:

void startRecord(char *filename) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000c78:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000c7c:	6018      	str	r0, [r3, #0]
	uint16_t* rpt, *wpt, *temppt;
	UINT bw;
	UINT writeBytes;
	UINT skipCount=125;// skip 0.5 second
 8000c7e:	237d      	movs	r3, #125	; 0x7d
 8000c80:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	FIL fp;
	FRESULT res;

	writeBytes = DMA_TxRx_SIZE*2;
 8000c84:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <startRecord+0x190>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	do
	{
		res = f_open(&fp, filename, FA_CREATE_ALWAYS|FA_WRITE);
 8000c8e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000c92:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8000c96:	f107 0010 	add.w	r0, r7, #16
 8000c9a:	220a      	movs	r2, #10
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	f008 fc9d 	bl	80095dc <f_open>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
	}
	while(res != FR_OK);
 8000ca8:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1ee      	bne.n	8000c8e <startRecord+0x22>
	res = fwrite_wav_header(&fp, 48000, 32, 2);
 8000cb0:	f107 0010 	add.w	r0, r7, #16
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	2220      	movs	r2, #32
 8000cb8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000cbc:	f7ff ff72 	bl	8000ba4 <fwrite_wav_header>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2120      	movs	r1, #32
 8000cca:	484d      	ldr	r0, [pc, #308]	; (8000e00 <startRecord+0x194>)
 8000ccc:	f001 fbba 	bl	8002444 <HAL_GPIO_WritePin>
	audio_state = STATE_RECORDING;
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <startRecord+0x198>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	701a      	strb	r2, [r3, #0]
	rpt = rcvBuf;
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <startRecord+0x19c>)
 8000cd8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	wpt = rpt;
 8000cdc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8000ce0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
	rCount=0; wCount=0;
 8000ce4:	4b49      	ldr	r3, [pc, #292]	; (8000e0c <startRecord+0x1a0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <startRecord+0x1a4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
	HAL_I2S_Receive_DMA(&hi2s2, rpt, DMA_READ_SIZE);
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8000cf6:	4847      	ldr	r0, [pc, #284]	; (8000e14 <startRecord+0x1a8>)
 8000cf8:	f001 fcce 	bl	8002698 <HAL_I2S_Receive_DMA>

	while (1)
	{
		if (wCount < rCount ) {
 8000cfc:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <startRecord+0x1a4>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b42      	ldr	r3, [pc, #264]	; (8000e0c <startRecord+0x1a0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d224      	bcs.n	8000d52 <startRecord+0xe6>
			if (rCount > skipCount)
 8000d08:	4b40      	ldr	r3, [pc, #256]	; (8000e0c <startRecord+0x1a0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d20c      	bcs.n	8000d2e <startRecord+0xc2>
			{
				res = f_write(&fp, wpt, writeBytes, &bw);
 8000d14:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000d18:	f107 0010 	add.w	r0, r7, #16
 8000d1c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000d20:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8000d24:	f008 fe18 	bl	8009958 <f_write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
			}
			 wCount++;
 8000d2e:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <startRecord+0x1a4>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <startRecord+0x1a4>)
 8000d36:	6013      	str	r3, [r2, #0]
			 wpt = (rcvBuf)+(wCount%BUFFER_COUNT)*DMA_TxRx_SIZE;
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <startRecord+0x1a4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	4a2e      	ldr	r2, [pc, #184]	; (8000dfc <startRecord+0x190>)
 8000d42:	8812      	ldrh	r2, [r2, #0]
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	; (8000e08 <startRecord+0x19c>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		  }

		  if (audio_state == STATE_STOP || rCount > MAX_DMA_ACCESS_COUNT)
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <startRecord+0x198>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d004      	beq.n	8000d64 <startRecord+0xf8>
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <startRecord+0x1a0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8000d62:	d9cb      	bls.n	8000cfc <startRecord+0x90>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000d64:	482b      	ldr	r0, [pc, #172]	; (8000e14 <startRecord+0x1a8>)
 8000d66:	f001 fd53 	bl	8002810 <HAL_I2S_DMAStop>
			  break;
 8000d6a:	bf00      	nop
		  }
	}
	uint32_t data_len = (wCount-1) * writeBytes;
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <startRecord+0x1a4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8000d76:	fb03 f202 	mul.w	r2, r3, r2
 8000d7a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000d82:	601a      	str	r2, [r3, #0]
	uint32_t total_len = data_len+36;
 8000d84:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000d92:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000d96:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8000d9a:	601a      	str	r2, [r3, #0]
	f_lseek(&fp, 4);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 fff5 	bl	8009d92 <f_lseek>
	f_write(&fp, (uint8_t*)&total_len, 4, &bw);
 8000da8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000dac:	f107 0108 	add.w	r1, r7, #8
 8000db0:	f107 0010 	add.w	r0, r7, #16
 8000db4:	2204      	movs	r2, #4
 8000db6:	f008 fdcf 	bl	8009958 <f_write>
	f_lseek(&fp, 40);
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	2128      	movs	r1, #40	; 0x28
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 ffe6 	bl	8009d92 <f_lseek>
	f_write(&fp, (uint8_t*)&data_len, 4, &bw);
 8000dc6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000dca:	f107 010c 	add.w	r1, r7, #12
 8000dce:	f107 0010 	add.w	r0, r7, #16
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	f008 fdc0 	bl	8009958 <f_write>
	f_close(&fp);
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f008 ffae 	bl	8009d3e <f_close>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <startRecord+0x194>)
 8000de8:	f001 fb2c 	bl	8002444 <HAL_GPIO_WritePin>
	audio_state = STATE_STOP;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <startRecord+0x198>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	40020000 	.word	0x40020000
 8000e04:	20000002 	.word	0x20000002
 8000e08:	20000310 	.word	0x20000310
 8000e0c:	20000b10 	.word	0x20000b10
 8000e10:	20000b14 	.word	0x20000b14
 8000e14:	20000098 	.word	0x20000098

08000e18 <Format_SD>:

FRESULT Format_SD (void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
    DIR dir;
    static FILINFO fno;
    static FRESULT fresult;

    char *path = malloc(20*sizeof (char));
 8000e1e:	2014      	movs	r0, #20
 8000e20:	f009 fbc8 	bl	800a5b4 <malloc>
 8000e24:	4603      	mov	r3, r0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8000e28:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <Format_SD+0xb4>)
 8000e2a:	4929      	ldr	r1, [pc, #164]	; (8000ed0 <Format_SD+0xb8>)
 8000e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e2e:	f009 fcc9 	bl	800a7c4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 f9b4 	bl	800a1a4 <f_opendir>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <Format_SD+0xbc>)
 8000e42:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <Format_SD+0xbc>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d136      	bne.n	8000eba <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4922      	ldr	r1, [pc, #136]	; (8000ed8 <Format_SD+0xc0>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 fa40 	bl	800a2d6 <f_readdir>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <Format_SD+0xbc>)
 8000e5c:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <Format_SD+0xbc>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d125      	bne.n	8000eb2 <Format_SD+0x9a>
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <Format_SD+0xc0>)
 8000e68:	7a5b      	ldrb	r3, [r3, #9]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d021      	beq.n	8000eb2 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <Format_SD+0xc0>)
 8000e70:	7a1b      	ldrb	r3, [r3, #8]
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d011      	beq.n	8000e9e <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000e7a:	4918      	ldr	r1, [pc, #96]	; (8000edc <Format_SD+0xc4>)
 8000e7c:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <Format_SD+0xc8>)
 8000e7e:	f7ff f9c7 	bl	8000210 <strcmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d012      	beq.n	8000eae <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 8000e88:	4814      	ldr	r0, [pc, #80]	; (8000edc <Format_SD+0xc4>)
 8000e8a:	f009 fa61 	bl	800a350 <f_unlink>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <Format_SD+0xbc>)
 8000e94:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <Format_SD+0xbc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b07      	cmp	r3, #7
 8000e9c:	e7d6      	b.n	8000e4c <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000e9e:	480f      	ldr	r0, [pc, #60]	; (8000edc <Format_SD+0xc4>)
 8000ea0:	f009 fa56 	bl	800a350 <f_unlink>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <Format_SD+0xbc>)
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e7ce      	b.n	8000e4c <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000eae:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000eb0:	e7cc      	b.n	8000e4c <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f009 f9e8 	bl	800a28a <f_closedir>
    }
    free(path);
 8000eba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ebc:	f009 fb82 	bl	800a5c4 <free>
    return fresult;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <Format_SD+0xbc>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800aee8 	.word	0x0800aee8
 8000ed0:	0800aeec 	.word	0x0800aeec
 8000ed4:	20000b1c 	.word	0x20000b1c
 8000ed8:	20000b20 	.word	0x20000b20
 8000edc:	20000b29 	.word	0x20000b29
 8000ee0:	0800aef0 	.word	0x0800aef0

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_MspInit+0x4c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f2e:	2007      	movs	r0, #7
 8000f30:	f000 fc7c 	bl	800182c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_CRC_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10d      	bne.n	8000f6e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023000 	.word	0x40023000
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a0      	sub	sp, #128	; 0x80
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	225c      	movs	r2, #92	; 0x5c
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f009 fb15 	bl	800a5d4 <memset>
  if(hi2s->Instance==SPI2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a3e      	ldr	r2, [pc, #248]	; (80010a8 <HAL_I2S_MspInit+0x124>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d175      	bne.n	80010a0 <HAL_I2S_MspInit+0x11c>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000fb8:	2332      	movs	r3, #50	; 0x32
 8000fba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 ff83 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2S_MspInit+0x64>
    {
      Error_Handler();
 8000fe4:	f7ff ff7e 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_I2S_MspInit+0x128>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a2e      	ldr	r2, [pc, #184]	; (80010ac <HAL_I2S_MspInit+0x128>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <HAL_I2S_MspInit+0x128>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_I2S_MspInit+0x128>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_I2S_MspInit+0x128>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_I2S_MspInit+0x128>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001020:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001024:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001032:	2305      	movs	r3, #5
 8001034:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800103a:	4619      	mov	r1, r3
 800103c:	481c      	ldr	r0, [pc, #112]	; (80010b0 <HAL_I2S_MspInit+0x12c>)
 800103e:	f001 f855 	bl	80020ec <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_I2S_MspInit+0x134>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 800105c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001060:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 800106c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001070:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001086:	f000 fc2f 	bl	80018e8 <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2S_MspInit+0x110>
    {
      Error_Handler();
 8001090:	f7ff ff28 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c
 800109a:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_I2S_MspInit+0x130>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3780      	adds	r7, #128	; 0x80
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40003800 	.word	0x40003800
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	200000e0 	.word	0x200000e0
 80010b8:	40026058 	.word	0x40026058

080010bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0a2      	sub	sp, #136	; 0x88
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	225c      	movs	r2, #92	; 0x5c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f009 fa79 	bl	800a5d4 <memset>
  if(hsd->Instance==SDIO)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a73      	ldr	r2, [pc, #460]	; (80012b4 <HAL_SD_MspInit+0x1f8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	f040 80de 	bne.w	80012aa <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80010ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80010f8:	2300      	movs	r3, #0
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f001 feef 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800110c:	f7ff feea 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 800111a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800111e:	6453      	str	r3, [r2, #68]	; 0x44
 8001120:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	4a60      	ldr	r2, [pc, #384]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	4b5e      	ldr	r3, [pc, #376]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a59      	ldr	r2, [pc, #356]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 8001152:	f043 0308 	orr.w	r3, r3, #8
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <HAL_SD_MspInit+0x1fc>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001164:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001168:	677b      	str	r3, [r7, #116]	; 0x74
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001178:	230c      	movs	r3, #12
 800117a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001182:	4619      	mov	r1, r3
 8001184:	484d      	ldr	r0, [pc, #308]	; (80012bc <HAL_SD_MspInit+0x200>)
 8001186:	f000 ffb1 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118a:	2304      	movs	r3, #4
 800118c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800119c:	230c      	movs	r3, #12
 800119e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011a6:	4619      	mov	r1, r3
 80011a8:	4845      	ldr	r0, [pc, #276]	; (80012c0 <HAL_SD_MspInit+0x204>)
 80011aa:	f000 ff9f 	bl	80020ec <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011b0:	4a45      	ldr	r2, [pc, #276]	; (80012c8 <HAL_SD_MspInit+0x20c>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b40      	ldr	r3, [pc, #256]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d0:	4b3c      	ldr	r3, [pc, #240]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d8:	4b3a      	ldr	r3, [pc, #232]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011de:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011f4:	2203      	movs	r2, #3
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_SD_MspInit+0x208>)
 80011fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_SD_MspInit+0x208>)
 8001202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001208:	482e      	ldr	r0, [pc, #184]	; (80012c4 <HAL_SD_MspInit+0x208>)
 800120a:	f000 fb6d 	bl	80018e8 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001214:	f7ff fe66 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a2a      	ldr	r2, [pc, #168]	; (80012c4 <HAL_SD_MspInit+0x208>)
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
 800121e:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <HAL_SD_MspInit+0x208>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001226:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <HAL_SD_MspInit+0x214>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <HAL_SD_MspInit+0x210>)
 800122c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001230:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <HAL_SD_MspInit+0x210>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001254:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001258:	2220      	movs	r2, #32
 800125a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_SD_MspInit+0x210>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001264:	2204      	movs	r2, #4
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_SD_MspInit+0x210>)
 800126a:	2203      	movs	r2, #3
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001270:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001278:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800127c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800127e:	4813      	ldr	r0, [pc, #76]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001280:	f000 fb32 	bl	80018e8 <HAL_DMA_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800128a:	f7ff fe2b 	bl	8000ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_SD_MspInit+0x210>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2031      	movs	r0, #49	; 0x31
 80012a0:	f000 facf 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80012a4:	2031      	movs	r0, #49	; 0x31
 80012a6:	f000 fae8 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3788      	adds	r7, #136	; 0x88
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	200001c4 	.word	0x200001c4
 80012c8:	40026458 	.word	0x40026458
 80012cc:	20000224 	.word	0x20000224
 80012d0:	400264a0 	.word	0x400264a0

080012d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_TIM_Base_MspInit+0x48>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d115      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_Base_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a0c      	ldr	r2, [pc, #48]	; (8001320 <HAL_TIM_Base_MspInit+0x4c>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_TIM_Base_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	201d      	movs	r0, #29
 8001308:	f000 fa9b 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800130c:	201d      	movs	r0, #29
 800130e:	f000 fab4 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40000400 	.word	0x40000400
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_UART_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_UART_MspInit+0x88>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137e:	230c      	movs	r3, #12
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138e:	2307      	movs	r3, #7
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_UART_MspInit+0x8c>)
 800139a:	f000 fea7 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	; 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <NMI_Handler+0x4>

080013ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <HardFault_Handler+0x4>

080013c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <MemManage_Handler+0x4>

080013c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001400:	f000 f900 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}

08001408 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <DMA1_Stream3_IRQHandler+0x10>)
 800140e:	f000 fc03 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000e0 	.word	0x200000e0

0800141c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM3_IRQHandler+0x10>)
 8001422:	f004 fcac 	bl	8005d7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000284 	.word	0x20000284

08001430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001438:	f001 f81e 	bl	8002478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <SDIO_IRQHandler+0x10>)
 8001446:	f003 fba1 	bl	8004b8c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000140 	.word	0x20000140

08001454 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <DMA2_Stream3_IRQHandler+0x10>)
 800145a:	f000 fbdd 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001c4 	.word	0x200001c4

08001468 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA2_Stream6_IRQHandler+0x10>)
 800146e:	f000 fbd3 	bl	8001c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000224 	.word	0x20000224

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f009 f858 	bl	800a560 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20020000 	.word	0x20020000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	20000b38 	.word	0x20000b38
 80014e4:	20000dc0 	.word	0x20000dc0

080014e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x20>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SystemInit+0x20>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001544 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001512:	490e      	ldr	r1, [pc, #56]	; (800154c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001514:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001528:	4c0b      	ldr	r4, [pc, #44]	; (8001558 <LoopFillZerobss+0x26>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001536:	f7ff ffd7 	bl	80014e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f009 f817 	bl	800a56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153e:	f7ff f849 	bl	80005d4 <main>
  bx  lr    
 8001542:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001550:	0800b038 	.word	0x0800b038
  ldr r2, =_sbss
 8001554:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001558:	20000dbc 	.word	0x20000dbc

0800155c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_Init+0x40>)
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_Init+0x40>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <HAL_Init+0x40>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001588:	2003      	movs	r0, #3
 800158a:	f000 f94f 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f808 	bl	80015a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001594:	f7ff fcac 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x54>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x58>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4619      	mov	r1, r3
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80015be:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f967 	bl	8001896 <HAL_SYSTICK_Config>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00e      	b.n	80015f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d80a      	bhi.n	80015ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d8:	2200      	movs	r2, #0
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e0:	f000 f92f 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_InitTick+0x5c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000004 	.word	0x20000004
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x20>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x24>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_IncTick+0x24>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000b3c 	.word	0x20000b3c

0800162c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_GetTick+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000b3c 	.word	0x20000b3c

08001644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff ffee 	bl	800162c <HAL_GetTick>
 8001650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d005      	beq.n	800166a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_Delay+0x44>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166a:	bf00      	nop
 800166c:	f7ff ffde 	bl	800162c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	429a      	cmp	r2, r3
 800167a:	d8f7      	bhi.n	800166c <HAL_Delay+0x28>
  {
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000000c 	.word	0x2000000c

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e00e      	b.n	80018de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	795b      	ldrb	r3, [r3, #5]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fb35 	bl	8000f40 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff fe9a 	bl	800162c <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e099      	b.n	8001a38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001924:	e00f      	b.n	8001946 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001926:	f7ff fe81 	bl	800162c <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b05      	cmp	r3, #5
 8001932:	d908      	bls.n	8001946 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2220      	movs	r2, #32
 8001938:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2203      	movs	r2, #3
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e078      	b.n	8001a38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e8      	bne.n	8001926 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_DMA_Init+0x158>)
 8001960:	4013      	ands	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001972:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b04      	cmp	r3, #4
 800199e:	d107      	bne.n	80019b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4313      	orrs	r3, r2
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f023 0307 	bic.w	r3, r3, #7
 80019c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d117      	bne.n	8001a0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fb01 	bl	8001ff4 <DMA_CheckFifoParam>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2240      	movs	r2, #64	; 0x40
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a06:	2301      	movs	r3, #1
 8001a08:	e016      	b.n	8001a38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fab8 	bl	8001f88 <DMA_CalcBaseAndBitshift>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a20:	223f      	movs	r2, #63	; 0x3f
 8001a22:	409a      	lsls	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	f010803f 	.word	0xf010803f

08001a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Start_IT+0x26>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e040      	b.n	8001aec <HAL_DMA_Start_IT+0xa8>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12f      	bne.n	8001ade <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2202      	movs	r2, #2
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa4a 	bl	8001f2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0216 	orr.w	r2, r2, #22
 8001ab2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0208 	orr.w	r2, r2, #8
 8001aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e005      	b.n	8001aea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b02:	f7ff fd93 	bl	800162c <HAL_GetTick>
 8001b06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e052      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0216 	bic.w	r2, r2, #22
 8001b34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d103      	bne.n	8001b56 <HAL_DMA_Abort+0x62>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0208 	bic.w	r2, r2, #8
 8001b64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b76:	e013      	b.n	8001ba0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b78:	f7ff fd58 	bl	800162c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d90c      	bls.n	8001ba0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e015      	b.n	8001bcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1e4      	bne.n	8001b78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	223f      	movs	r2, #63	; 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d004      	beq.n	8001bf2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00c      	b.n	8001c0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <HAL_DMA_IRQHandler+0x248>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a8e      	ldr	r2, [pc, #568]	; (8001e64 <HAL_DMA_IRQHandler+0x24c>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2208      	movs	r2, #8
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01a      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d013      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c70:	2208      	movs	r2, #8
 8001c72:	409a      	lsls	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d012      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d012      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	2204      	movs	r2, #4
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2210      	movs	r2, #16
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d043      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03c      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	2210      	movs	r2, #16
 8001d14:	409a      	lsls	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d024      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
 8001d46:	e01f      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	4798      	blx	r3
 8001d58:	e016      	b.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 808f 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8087 	beq.w	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2220      	movs	r2, #32
 8001db0:	409a      	lsls	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d136      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_IRQHandler+0x1da>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	223f      	movs	r2, #63	; 0x3f
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d07e      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
        }
        return;
 8001e2e:	e079      	b.n	8001f24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d01d      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10d      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e02c      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
 8001e5e:	bf00      	nop
 8001e60:	20000004 	.word	0x20000004
 8001e64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
 8001e78:	e01e      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10f      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d032      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2205      	movs	r2, #5
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d307      	bcc.n	8001f00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x2cc>
 8001efe:	e000      	b.n	8001f02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e000      	b.n	8001f26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f24:	bf00      	nop
    }
  }
}
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d108      	bne.n	8001f6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f6a:	e007      	b.n	8001f7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	60da      	str	r2, [r3, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3b10      	subs	r3, #16
 8001f98:	4a14      	ldr	r2, [pc, #80]	; (8001fec <DMA_CalcBaseAndBitshift+0x64>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa2:	4a13      	ldr	r2, [pc, #76]	; (8001ff0 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d909      	bls.n	8001fca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fbe:	f023 0303 	bic.w	r3, r3, #3
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fc8:	e007      	b.n	8001fda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	aaaaaaab 	.word	0xaaaaaaab
 8001ff0:	0800af58 	.word	0x0800af58

08001ff4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b03      	cmp	r3, #3
 8002012:	d856      	bhi.n	80020c2 <DMA_CheckFifoParam+0xce>
 8002014:	a201      	add	r2, pc, #4	; (adr r2, 800201c <DMA_CheckFifoParam+0x28>)
 8002016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201a:	bf00      	nop
 800201c:	0800202d 	.word	0x0800202d
 8002020:	0800203f 	.word	0x0800203f
 8002024:	0800202d 	.word	0x0800202d
 8002028:	080020c3 	.word	0x080020c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d046      	beq.n	80020c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203c:	e043      	b.n	80020c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002046:	d140      	bne.n	80020ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e03d      	b.n	80020ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d121      	bne.n	800209c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d837      	bhi.n	80020ce <DMA_CheckFifoParam+0xda>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <DMA_CheckFifoParam+0x70>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	0800207b 	.word	0x0800207b
 800206c:	08002075 	.word	0x08002075
 8002070:	0800208d 	.word	0x0800208d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e030      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d025      	beq.n	80020d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208a:	e022      	b.n	80020d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002094:	d11f      	bne.n	80020d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800209a:	e01c      	b.n	80020d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d903      	bls.n	80020aa <DMA_CheckFifoParam+0xb6>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d003      	beq.n	80020b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020a8:	e018      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      break;
 80020ae:	e015      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      break;
 80020c0:	e00b      	b.n	80020da <DMA_CheckFifoParam+0xe6>
      break;
 80020c2:	bf00      	nop
 80020c4:	e00a      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020c6:	bf00      	nop
 80020c8:	e008      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ca:	bf00      	nop
 80020cc:	e006      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020ce:	bf00      	nop
 80020d0:	e004      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020d2:	bf00      	nop
 80020d4:	e002      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;   
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
    }
  } 
  
  return status; 
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e165      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8154 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ae 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a5c      	ldr	r2, [pc, #368]	; (80023ec <HAL_GPIO_Init+0x300>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	; (80023f4 <HAL_GPIO_Init+0x308>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	; (80023f8 <HAL_GPIO_Init+0x30c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x310>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	; (8002400 <HAL_GPIO_Init+0x314>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x318>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x20a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x31c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x206>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_GPIO_Init+0x320>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x202>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <HAL_GPIO_Init+0x324>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_GPIO_Init+0x324>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_GPIO_Init+0x324>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_GPIO_Init+0x324>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_GPIO_Init+0x324>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_GPIO_Init+0x324>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae96 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e001      	b.n	8002436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fb08 	bl	8000aac <HAL_GPIO_EXTI_Callback>
  }
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0e1      	b.n	800267e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a6d      	ldr	r2, [pc, #436]	; (8002688 <HAL_I2S_Init+0x1e0>)
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7fe fd55 	bl	8000f84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024f0:	f023 030f 	bic.w	r3, r3, #15
 80024f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2202      	movs	r2, #2
 80024fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d06f      	beq.n	80025e6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d102      	bne.n	8002514 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800250e:	2310      	movs	r3, #16
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e001      	b.n	8002518 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b20      	cmp	r3, #32
 800251e:	d802      	bhi.n	8002526 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_I2S_Init+0x1e4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_I2S_Init+0x92>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a56      	ldr	r2, [pc, #344]	; (8002690 <HAL_I2S_Init+0x1e8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d104      	bne.n	8002544 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 fffc 	bl	8003538 <HAL_RCCEx_GetPeriphCLKFreq>
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	e003      	b.n	800254c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002544:	2002      	movs	r0, #2
 8002546:	f000 fff7 	bl	8003538 <HAL_RCCEx_GetPeriphCLKFreq>
 800254a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d125      	bne.n	80025a2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	3305      	adds	r3, #5
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e01f      	b.n	80025c0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	fbb2 f2f3 	udiv	r2, r2, r3
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	461a      	mov	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	3305      	adds	r3, #5
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e00e      	b.n	80025c0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	3305      	adds	r3, #5
 80025be:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <HAL_I2S_Init+0x1ec>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e003      	b.n	80025ee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d902      	bls.n	80025fa <HAL_I2S_Init+0x152>
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2bff      	cmp	r3, #255	; 0xff
 80025f8:	d907      	bls.n	800260a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e039      	b.n	800267e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	ea42 0103 	orr.w	r1, r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	430a      	orrs	r2, r1
 800261c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002628:	f023 030f 	bic.w	r3, r3, #15
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6851      	ldr	r1, [r2, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6992      	ldr	r2, [r2, #24]
 8002640:	430a      	orrs	r2, r1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b30      	cmp	r3, #48	; 0x30
 8002654:	d003      	beq.n	800265e <HAL_I2S_Init+0x1b6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2bb0      	cmp	r3, #176	; 0xb0
 800265c:	d107      	bne.n	800266e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800266c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	08002b29 	.word	0x08002b29
 800268c:	40003800 	.word	0x40003800
 8002690:	40003c00 	.word	0x40003c00
 8002694:	cccccccd 	.word	0xcccccccd

08002698 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_I2S_Receive_DMA+0x1a>
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0a1      	b.n	80027fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2S_Receive_DMA+0x2e>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e099      	b.n	80027fa <HAL_I2S_Receive_DMA+0x162>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e089      	b.n	80027fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2204      	movs	r2, #4
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d002      	beq.n	8002712 <HAL_I2S_Receive_DMA+0x7a>
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10a      	bne.n	8002728 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	865a      	strh	r2, [r3, #50]	; 0x32
 8002726:	e005      	b.n	8002734 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	4a32      	ldr	r2, [pc, #200]	; (8002804 <HAL_I2S_Receive_DMA+0x16c>)
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_I2S_Receive_DMA+0x170>)
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_I2S_Receive_DMA+0x174>)
 800274a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800275a:	d10a      	bne.n	8002772 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	330c      	adds	r3, #12
 800277c:	4619      	mov	r1, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002788:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800278a:	f7ff f95b 	bl	8001a44 <HAL_DMA_Start_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00f      	beq.n	80027b4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002798:	f043 0208 	orr.w	r2, r3, #8
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e022      	b.n	80027fa <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	08002a07 	.word	0x08002a07
 8002808:	080029c5 	.word	0x080029c5
 800280c:	08002a23 	.word	0x08002a23

08002810 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d003      	beq.n	800282e <HAL_I2S_DMAStop+0x1e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d155      	bne.n	80028da <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00f      	beq.n	8002856 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f95a 	bl	8001af4 <HAL_DMA_Abort>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0208 	orr.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002856:	2364      	movs	r3, #100	; 0x64
 8002858:	2201      	movs	r2, #1
 800285a:	2102      	movs	r1, #2
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f9ed 	bl	8002c3c <I2S_WaitFlagStateUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002880:	2364      	movs	r3, #100	; 0x64
 8002882:	2200      	movs	r2, #0
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9d8 	bl	8002c3c <I2S_WaitFlagStateUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0202 	bic.w	r2, r2, #2
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	e04d      	b.n	8002976 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028e2:	d004      	beq.n	80028ee <HAL_I2S_DMAStop+0xde>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ec:	d143      	bne.n	8002976 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00f      	beq.n	8002916 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f8fa 	bl	8001af4 <HAL_DMA_Abort>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f043 0208 	orr.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002924:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d10c      	bne.n	8002970 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
 800296e:	e002      	b.n	8002976 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800297e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7fe f8ad 	bl	8000b58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff ffc1 	bl	800299c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0203 	bic.w	r2, r2, #3
 8002a3e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	f043 0208 	orr.w	r2, r3, #8
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f7ff ffa5 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a66:	bf00      	nop
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	881a      	ldrh	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c9a      	adds	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10e      	bne.n	8002ac2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ab2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff63 	bl	8002988 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	b292      	uxth	r2, r2
 8002ade:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f81c 	bl	8000b58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d13a      	bne.n	8002bba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d109      	bne.n	8002b62 <I2S_IRQHandler+0x3a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d102      	bne.n	8002b62 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ffb4 	bl	8002aca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d126      	bne.n	8002bba <I2S_IRQHandler+0x92>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d11f      	bne.n	8002bba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b88:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f043 0202 	orr.w	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fefb 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d136      	bne.n	8002c34 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d109      	bne.n	8002be4 <I2S_IRQHandler+0xbc>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d102      	bne.n	8002be4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff45 	bl	8002a6e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d122      	bne.n	8002c34 <I2S_IRQHandler+0x10c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d11b      	bne.n	8002c34 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c0a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff febe 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7fe fcee 	bl	800162c <HAL_GetTick>
 8002c50:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002c52:	e018      	b.n	8002c86 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5a:	d014      	beq.n	8002c86 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002c5c:	f7fe fce6 	bl	800162c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d902      	bls.n	8002c72 <I2S_WaitFlagStateUntilTimeout+0x36>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e00f      	b.n	8002ca6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1d7      	bne.n	8002c54 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cc      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d90c      	bls.n	8002cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d044      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e067      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4934      	ldr	r1, [pc, #208]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fc44 	bl	800162c <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7fe fc40 	bl	800162c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d20c      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 fdc7 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe fba4 	bl	80015a4 <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	0800af40 	.word	0x0800af40
 8002e74:	20000004 	.word	0x20000004
 8002e78:	20000008 	.word	0x20000008

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000004 	.word	0x20000004

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	0800af50 	.word	0x0800af50

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffdc 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0b5b      	lsrs	r3, r3, #13
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	0800af50 	.word	0x0800af50

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	; 0x30
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f22:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	496c      	ldr	r1, [pc, #432]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002f4a:	4b64      	ldr	r3, [pc, #400]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f50:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	4960      	ldr	r1, [pc, #384]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f78:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4955      	ldr	r1, [pc, #340]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f96:	d101      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d017      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	4946      	ldr	r1, [pc, #280]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 808a 	beq.w	8003106 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a38      	ldr	r2, [pc, #224]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a33      	ldr	r2, [pc, #204]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800301a:	f7fe fb07 	bl	800162c <HAL_GetTick>
 800301e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fb03 	bl	800162c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e278      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02f      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	429a      	cmp	r2, r3
 800305c:	d028      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800305e:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d114      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe fad1 	bl	800162c <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe facd 	bl	800162c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e240      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ee      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030bc:	d114      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	4902      	ldr	r1, [pc, #8]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
 80030d8:	e00c      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42470e40 	.word	0x42470e40
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a49      	ldr	r2, [pc, #292]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030f2:	6093      	str	r3, [r2, #8]
 80030f4:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80030f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	4944      	ldr	r1, [pc, #272]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003102:	4313      	orrs	r3, r2
 8003104:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003118:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800311a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003128:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800312a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4937      	ldr	r1, [pc, #220]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800314a:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800314c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003150:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003158:	492e      	ldr	r1, [pc, #184]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d011      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003172:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	4926      	ldr	r1, [pc, #152]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318a:	d101      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800318c:	2301      	movs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	491a      	ldr	r1, [pc, #104]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	4911      	ldr	r1, [pc, #68]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031dc:	d101      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80031de:	2301      	movs	r3, #1
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80031e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d005      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f0:	f040 80ff 	bne.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031fa:	f7fe fa17 	bl	800162c <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003202:	f7fe fa13 	bl	800162c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d907      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e188      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003214:	40023800 	.word	0x40023800
 8003218:	424711e0 	.word	0x424711e0
 800321c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003220:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ea      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003248:	2b00      	cmp	r3, #0
 800324a:	d028      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d124      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003254:	4b71      	ldr	r3, [pc, #452]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325a:	0c1b      	lsrs	r3, r3, #16
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	3301      	adds	r3, #1
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003266:	4b6d      	ldr	r3, [pc, #436]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	0e1b      	lsrs	r3, r3, #24
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	019b      	lsls	r3, r3, #6
 800327e:	431a      	orrs	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	431a      	orrs	r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	071b      	lsls	r3, r3, #28
 8003296:	4961      	ldr	r1, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d035      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c8:	d130      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80032ca:	4b54      	ldr	r3, [pc, #336]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	019b      	lsls	r3, r3, #6
 80032f4:	431a      	orrs	r2, r3
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	4943      	ldr	r1, [pc, #268]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f023 021f 	bic.w	r2, r3, #31
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	493d      	ldr	r1, [pc, #244]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d029      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003340:	d124      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003342:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	3301      	adds	r3, #1
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003354:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335a:	0f1b      	lsrs	r3, r3, #28
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	019b      	lsls	r3, r3, #6
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	085b      	lsrs	r3, r3, #1
 8003374:	3b01      	subs	r3, #1
 8003376:	041b      	lsls	r3, r3, #16
 8003378:	431a      	orrs	r2, r3
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	061b      	lsls	r3, r3, #24
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	071b      	lsls	r3, r3, #28
 8003384:	4925      	ldr	r1, [pc, #148]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	3b01      	subs	r3, #1
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	061b      	lsls	r3, r3, #24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	071b      	lsls	r3, r3, #28
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033cc:	f7fe f92e 	bl	800162c <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033d4:	f7fe f92a 	bl	800162c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e09f      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 8095 	bne.w	8003524 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003400:	f7fe f914 	bl	800162c <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003406:	e00f      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003408:	f7fe f910 	bl	800162c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d908      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e085      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	42470068 	.word	0x42470068
 8003424:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003428:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003434:	d0e8      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02b      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d127      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800345e:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	0c1b      	lsrs	r3, r3, #16
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	3301      	adds	r3, #1
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	431a      	orrs	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	3b01      	subs	r3, #1
 8003482:	041b      	lsls	r3, r3, #16
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	4928      	ldr	r1, [pc, #160]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800349a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	3b01      	subs	r3, #1
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	4922      	ldr	r1, [pc, #136]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01d      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c2:	d118      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	0e1b      	lsrs	r3, r3, #24
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	061b      	lsls	r3, r3, #24
 80034ee:	4910      	ldr	r1, [pc, #64]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fe f896 	bl	800162c <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003504:	f7fe f892 	bl	800162c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e007      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800351e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003522:	d1ef      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3730      	adds	r7, #48	; 0x30
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	42470070 	.word	0x42470070

08003538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	2b07      	cmp	r3, #7
 800355e:	f200 8224 	bhi.w	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800376b 	.word	0x0800376b
 800356c:	08003895 	.word	0x08003895
 8003570:	080039ab 	.word	0x080039ab
 8003574:	08003589 	.word	0x08003589
 8003578:	080039ab 	.word	0x080039ab
 800357c:	080039ab 	.word	0x080039ab
 8003580:	080039ab 	.word	0x080039ab
 8003584:	08003589 	.word	0x08003589
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003588:	4ba8      	ldr	r3, [pc, #672]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800358a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800358e:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800359e:	f000 80d6 	beq.w	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035a8:	f200 80dd 	bhi.w	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b2:	f000 809f 	beq.w	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035bc:	f200 80d3 	bhi.w	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d05b      	beq.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ce:	f200 80ca 	bhi.w	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035d8:	f000 80b6 	beq.w	8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035e2:	f200 80c0 	bhi.w	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ec:	f000 8082 	beq.w	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f6:	f200 80b6 	bhi.w	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003606:	d03b      	beq.n	8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003608:	e0ad      	b.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800360a:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003616:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003620:	4a83      	ldr	r2, [pc, #524]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e008      	b.n	800363c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800362a:	4b80      	ldr	r3, [pc, #512]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	4a7f      	ldr	r2, [pc, #508]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800363c:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	0e1b      	lsrs	r3, r3, #24
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800364a:	4b78      	ldr	r3, [pc, #480]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	fb03 f202 	mul.w	r2, r3, r2
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003664:	4b71      	ldr	r3, [pc, #452]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61fb      	str	r3, [r7, #28]
          break;
 800367e:	e073      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800368c:	4b67      	ldr	r3, [pc, #412]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003696:	4a66      	ldr	r2, [pc, #408]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	e008      	b.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80036a0:	4b62      	ldr	r3, [pc, #392]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036aa:	4a62      	ldr	r2, [pc, #392]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80036b2:	4b5e      	ldr	r3, [pc, #376]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	fb03 f202 	mul.w	r2, r3, r2
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80036da:	4b54      	ldr	r3, [pc, #336]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	3301      	adds	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f0:	61fb      	str	r3, [r7, #28]
          break;
 80036f2:	e039      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80036f4:	4b4d      	ldr	r3, [pc, #308]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003700:	4b4a      	ldr	r3, [pc, #296]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003708:	4a49      	ldr	r2, [pc, #292]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e007      	b.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003712:	4b46      	ldr	r3, [pc, #280]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371a:	4a46      	ldr	r2, [pc, #280]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0f1b      	lsrs	r3, r3, #28
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800372e:	4b3f      	ldr	r3, [pc, #252]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	61fb      	str	r3, [r7, #28]
          break;
 8003746:	e00f      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800374a:	61fb      	str	r3, [r7, #28]
          break;
 800374c:	e00c      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800375a:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800375c:	61fb      	str	r3, [r7, #28]
          break;
 800375e:	e003      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003762:	61fb      	str	r3, [r7, #28]
          break;
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003766:	bf00      	nop
        }
      }
      break;
 8003768:	e11f      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800376a:	4b30      	ldr	r3, [pc, #192]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003770:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800377c:	d079      	beq.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003784:	f200 8082 	bhi.w	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378e:	d03c      	beq.n	800380a <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003796:	d879      	bhi.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d006      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d172      	bne.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80037a8:	61fb      	str	r3, [r7, #28]
          break;
 80037aa:	e072      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d109      	bne.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	e008      	b.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	0f1b      	lsrs	r3, r3, #28
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	61fb      	str	r3, [r7, #28]
          break;
 8003808:	e043      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d111      	bne.n	800383c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e010      	b.n	800384c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200
 8003838:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800383c:	4b5e      	ldr	r3, [pc, #376]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	4a5d      	ldr	r2, [pc, #372]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800384c:	4b5a      	ldr	r3, [pc, #360]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800385e:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0f1b      	lsrs	r3, r3, #28
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	61fb      	str	r3, [r7, #28]
          break;
 8003870:	e00f      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003872:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387e:	d102      	bne.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8003880:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003882:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8003884:	e005      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 8003886:	4b4d      	ldr	r3, [pc, #308]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003888:	61fb      	str	r3, [r7, #28]
          break;
 800388a:	e002      	b.n	8003892 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	61fb      	str	r3, [r7, #28]
          break;
 8003890:	bf00      	nop
        }
      }
      break;
 8003892:	e08a      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8003894:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389a:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038a6:	d06f      	beq.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038ae:	d878      	bhi.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038b6:	d03c      	beq.n	8003932 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038be:	d870      	bhi.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038cc:	d169      	bne.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80038d0:	61fb      	str	r3, [r7, #28]
          break;
 80038d2:	e069      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80038d4:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e0:	d109      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	e008      	b.n	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80038f6:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003900:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003908:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390e:	099b      	lsrs	r3, r3, #6
 8003910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800391c:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003922:	0f1b      	lsrs	r3, r3, #28
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	61fb      	str	r3, [r7, #28]
          break;
 8003930:	e03a      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393e:	d108      	bne.n	8003952 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e007      	b.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003952:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	099b      	lsrs	r3, r3, #6
 8003968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	0f1b      	lsrs	r3, r3, #28
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	61fb      	str	r3, [r7, #28]
          break;
 8003986:	e00f      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d102      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003998:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800399a:	e005      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800399e:	61fb      	str	r3, [r7, #28]
          break;
 80039a0:	e002      	b.n	80039a8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
          break;
 80039a6:	bf00      	nop
        }
      }
      break;
 80039a8:	bf00      	nop
    }
  }
  return frequency;
 80039aa:	69fb      	ldr	r3, [r7, #28]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3724      	adds	r7, #36	; 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	00bb8000 	.word	0x00bb8000

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b0ae      	sub	sp, #184	; 0xb8
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ee:	4bcb      	ldr	r3, [pc, #812]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	f200 8206 	bhi.w	8003e08 <HAL_RCC_GetSysClockFreq+0x440>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a39 	.word	0x08003a39
 8003a08:	08003e09 	.word	0x08003e09
 8003a0c:	08003e09 	.word	0x08003e09
 8003a10:	08003e09 	.word	0x08003e09
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003e09 	.word	0x08003e09
 8003a1c:	08003e09 	.word	0x08003e09
 8003a20:	08003e09 	.word	0x08003e09
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003e09 	.word	0x08003e09
 8003a2c:	08003e09 	.word	0x08003e09
 8003a30:	08003e09 	.word	0x08003e09
 8003a34:	08003c39 	.word	0x08003c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4bb9      	ldr	r3, [pc, #740]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a3e:	e1e7      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a40:	4bb8      	ldr	r3, [pc, #736]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a46:	e1e3      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4bb4      	ldr	r3, [pc, #720]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a54:	4bb1      	ldr	r3, [pc, #708]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d071      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a60:	4bae      	ldr	r3, [pc, #696]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	1a51      	subs	r1, r2, r1
 8003aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ab8:	4649      	mov	r1, r9
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	4641      	mov	r1, r8
 8003abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	018a      	lsls	r2, r1, #6
 8003ac6:	4641      	mov	r1, r8
 8003ac8:	1a51      	subs	r1, r2, r1
 8003aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003acc:	4649      	mov	r1, r9
 8003ace:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	00cb      	lsls	r3, r1, #3
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aea:	4641      	mov	r1, r8
 8003aec:	00ca      	lsls	r2, r1, #3
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	4622      	mov	r2, r4
 8003af6:	189b      	adds	r3, r3, r2
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
 8003afa:	462b      	mov	r3, r5
 8003afc:	460a      	mov	r2, r1
 8003afe:	eb42 0303 	adc.w	r3, r2, r3
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b10:	4629      	mov	r1, r5
 8003b12:	024b      	lsls	r3, r1, #9
 8003b14:	4621      	mov	r1, r4
 8003b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	024a      	lsls	r2, r1, #9
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b34:	f7fc fbcc 	bl	80002d0 <__aeabi_uldivmod>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b42:	e067      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b44:	4b75      	ldr	r3, [pc, #468]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	099b      	lsrs	r3, r3, #6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	f04f 0000 	mov.w	r0, #0
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	0159      	lsls	r1, r3, #5
 8003b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b78:	0150      	lsls	r0, r2, #5
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4621      	mov	r1, r4
 8003b80:	1a51      	subs	r1, r2, r1
 8003b82:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b84:	4629      	mov	r1, r5
 8003b86:	eb63 0301 	sbc.w	r3, r3, r1
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b98:	4649      	mov	r1, r9
 8003b9a:	018b      	lsls	r3, r1, #6
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	018a      	lsls	r2, r1, #6
 8003ba6:	4641      	mov	r1, r8
 8003ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bac:	4649      	mov	r1, r9
 8003bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc6:	4692      	mov	sl, r2
 8003bc8:	469b      	mov	fp, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	462b      	mov	r3, r5
 8003bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8003c00:	677a      	str	r2, [r7, #116]	; 0x74
 8003c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c06:	f7fc fb63 	bl	80002d0 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c36:	e0eb      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c38:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d06b      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	099b      	lsrs	r3, r3, #6
 8003c56:	2200      	movs	r2, #0
 8003c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	663b      	str	r3, [r7, #96]	; 0x60
 8003c64:	2300      	movs	r3, #0
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
 8003c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4621      	mov	r1, r4
 8003c86:	1a51      	subs	r1, r2, r1
 8003c88:	61b9      	str	r1, [r7, #24]
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c9e:	4659      	mov	r1, fp
 8003ca0:	018b      	lsls	r3, r1, #6
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca8:	4651      	mov	r1, sl
 8003caa:	018a      	lsls	r2, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ebb2 0801 	subs.w	r8, r2, r1
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ccc:	4690      	mov	r8, r2
 8003cce:	4699      	mov	r9, r3
 8003cd0:	4623      	mov	r3, r4
 8003cd2:	eb18 0303 	adds.w	r3, r8, r3
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	462b      	mov	r3, r5
 8003cda:	eb49 0303 	adc.w	r3, r9, r3
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	024b      	lsls	r3, r1, #9
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	024a      	lsls	r2, r1, #9
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d02:	2200      	movs	r2, #0
 8003d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d0c:	f7fc fae0 	bl	80002d0 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d1a:	e065      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x420>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	4611      	mov	r1, r2
 8003d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d42:	4642      	mov	r2, r8
 8003d44:	464b      	mov	r3, r9
 8003d46:	f04f 0000 	mov.w	r0, #0
 8003d4a:	f04f 0100 	mov.w	r1, #0
 8003d4e:	0159      	lsls	r1, r3, #5
 8003d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d54:	0150      	lsls	r0, r2, #5
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	1a51      	subs	r1, r2, r1
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	4649      	mov	r1, r9
 8003d62:	eb63 0301 	sbc.w	r3, r3, r1
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d74:	4659      	mov	r1, fp
 8003d76:	018b      	lsls	r3, r1, #6
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7e:	4651      	mov	r1, sl
 8003d80:	018a      	lsls	r2, r1, #6
 8003d82:	4651      	mov	r1, sl
 8003d84:	1a54      	subs	r4, r2, r1
 8003d86:	4659      	mov	r1, fp
 8003d88:	eb63 0501 	sbc.w	r5, r3, r1
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	00eb      	lsls	r3, r5, #3
 8003d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	4614      	mov	r4, r2
 8003d9e:	461d      	mov	r5, r3
 8003da0:	4643      	mov	r3, r8
 8003da2:	18e3      	adds	r3, r4, r3
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	464b      	mov	r3, r9
 8003da8:	eb45 0303 	adc.w	r3, r5, r3
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dba:	4629      	mov	r1, r5
 8003dbc:	028b      	lsls	r3, r1, #10
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	028a      	lsls	r2, r1, #10
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dda:	f7fc fa79 	bl	80002d0 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4613      	mov	r3, r2
 8003de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0f1b      	lsrs	r3, r3, #28
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	37b8      	adds	r7, #184	; 0xb8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800
 8003e24:	00f42400 	.word	0x00f42400

08003e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e28d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8083 	beq.w	8003f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e48:	4b94      	ldr	r3, [pc, #592]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 030c 	and.w	r3, r3, #12
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d019      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e54:	4b91      	ldr	r3, [pc, #580]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e60:	4b8e      	ldr	r3, [pc, #568]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d112      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	4b84      	ldr	r3, [pc, #528]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d05b      	beq.n	8003f4c <HAL_RCC_OscConfig+0x124>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d157      	bne.n	8003f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e25a      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x90>
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7b      	ldr	r2, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e01d      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0xb4>
 8003ec2:	4b76      	ldr	r3, [pc, #472]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a75      	ldr	r2, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0xcc>
 8003edc:	4b6f      	ldr	r3, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efc:	f7fd fb96 	bl	800162c <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f04:	f7fd fb92 	bl	800162c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e21f      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	4b61      	ldr	r3, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0xdc>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fd fb82 	bl	800162c <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fb7e 	bl	800162c <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e20b      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	4b57      	ldr	r3, [pc, #348]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x104>
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06f      	beq.n	800403a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f5a:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d017      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f66:	4b4d      	ldr	r3, [pc, #308]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b47      	ldr	r3, [pc, #284]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1d3      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4937      	ldr	r1, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x278>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fb2b 	bl	800162c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fd fb27 	bl	800162c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e1b4      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b2b      	ldr	r3, [pc, #172]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b28      	ldr	r3, [pc, #160]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4925      	ldr	r1, [pc, #148]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_RCC_OscConfig+0x278>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd fb0a 	bl	800162c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800401c:	f7fd fb06 	bl	800162c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e193      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d036      	beq.n	80040b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCC_OscConfig+0x27c>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd faea 	bl	800162c <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405c:	f7fd fae6 	bl	800162c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e173      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x274>)
 8004070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x234>
 800407a:	e01b      	b.n	80040b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407c:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_OscConfig+0x27c>)
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd fad3 	bl	800162c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004088:	e00e      	b.n	80040a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd facf 	bl	800162c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d907      	bls.n	80040a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e15c      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470000 	.word	0x42470000
 80040a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a8:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1ea      	bne.n	800408a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8097 	beq.w	80041f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c6:	4b83      	ldr	r3, [pc, #524]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
 80040d6:	4b7f      	ldr	r3, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ee:	2301      	movs	r3, #1
 80040f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d118      	bne.n	8004130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410a:	f7fd fa8f 	bl	800162c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004112:	f7fd fa8b 	bl	800162c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e118      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x4b0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x31e>
 8004138:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	e01c      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x340>
 800414e:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a60      	ldr	r2, [pc, #384]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415e:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6713      	str	r3, [r2, #112]	; 0x70
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0x358>
 8004168:	4b5a      	ldr	r3, [pc, #360]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a59      	ldr	r2, [pc, #356]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
 8004174:	4b57      	ldr	r3, [pc, #348]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f023 0304 	bic.w	r3, r3, #4
 800417e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004188:	f7fd fa50 	bl	800162c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004190:	f7fd fa4c 	bl	800162c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	; 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e0d7      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a6:	4b4b      	ldr	r3, [pc, #300]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0ee      	beq.n	8004190 <HAL_RCC_OscConfig+0x368>
 80041b2:	e014      	b.n	80041de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fa3a 	bl	800162c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd fa36 	bl	800162c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e0c1      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d2:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ee      	bne.n	80041bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d105      	bne.n	80041f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e4:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80ad 	beq.w	8004354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b08      	cmp	r3, #8
 8004204:	d060      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d145      	bne.n	800429a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b33      	ldr	r3, [pc, #204]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fd fa0a 	bl	800162c <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fd fa06 	bl	800162c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e093      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	3b01      	subs	r3, #1
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	071b      	lsls	r3, r3, #28
 8004266:	491b      	ldr	r1, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800426e:	2201      	movs	r2, #1
 8004270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fd f9db 	bl	800162c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fd f9d7 	bl	800162c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e064      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x452>
 8004298:	e05c      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	4b10      	ldr	r3, [pc, #64]	; (80042dc <HAL_RCC_OscConfig+0x4b4>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fd f9c4 	bl	800162c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd f9c0 	bl	800162c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e04d      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x480>
 80042c6:	e045      	b.n	8004354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e040      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40007000 	.word	0x40007000
 80042dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e0:	4b1f      	ldr	r3, [pc, #124]	; (8004360 <HAL_RCC_OscConfig+0x538>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d030      	beq.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d129      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d122      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004318:	4293      	cmp	r3, r2
 800431a:	d119      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	3b01      	subs	r3, #1
 800432a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432c:	429a      	cmp	r2, r3
 800432e:	d10f      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800

08004364 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fc fe97 	bl	80010bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f814 	bl	80043c4 <HAL_SD_InitCard>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00a      	b.n	80043bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043e0:	2376      	movs	r3, #118	; 0x76
 80043e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681d      	ldr	r5, [r3, #0]
 80043e8:	466c      	mov	r4, sp
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043fc:	4628      	mov	r0, r5
 80043fe:	f002 fb41 	bl	8006a84 <SDIO_Init>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04f      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_SD_InitCard+0xf8>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f002 fb79 	bl	8006b16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <HAL_SD_InitCard+0xf8>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800442a:	2002      	movs	r0, #2
 800442c:	f7fd f90a 	bl	8001644 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f001 f8f1 	bl	8005618 <SD_PowerON>
 8004436:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e02e      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 f810 	bl	800547c <SD_InitCard>
 800445c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e01b      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004484:	4618      	mov	r0, r3
 8004486:	f002 fbd8 	bl	8006c3a <SDMMC_CmdBlockLength>
 800448a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <HAL_SD_InitCard+0xfc>)
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3728      	adds	r7, #40	; 0x28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	422580a0 	.word	0x422580a0
 80044c0:	004005ff 	.word	0x004005ff

080044c4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b092      	sub	sp, #72	; 0x48
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044d2:	f7fd f8ab 	bl	800162c <HAL_GetTick>
 80044d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1bd      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	f040 81b0 	bne.w	8004864 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	429a      	cmp	r2, r3
 8004516:	d907      	bls.n	8004528 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e1a4      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2203      	movs	r2, #3
 800452c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2b01      	cmp	r3, #1
 800453e:	d002      	beq.n	8004546 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	025b      	lsls	r3, r3, #9
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800454a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004552:	2390      	movs	r3, #144	; 0x90
 8004554:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004556:	2302      	movs	r3, #2
 8004558:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800455e:	2301      	movs	r3, #1
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f107 0214 	add.w	r2, r7, #20
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f002 fb38 	bl	8006be2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d90a      	bls.n	800458e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2202      	movs	r2, #2
 800457c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004584:	4618      	mov	r0, r3
 8004586:	f002 fb9c 	bl	8006cc2 <SDMMC_CmdReadMultiBlock>
 800458a:	6478      	str	r0, [r7, #68]	; 0x44
 800458c:	e009      	b.n	80045a2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800459a:	4618      	mov	r0, r3
 800459c:	f002 fb6f 	bl	8006c7e <SDMMC_CmdReadSingleBlock>
 80045a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80045a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a7a      	ldr	r2, [pc, #488]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e151      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80045d2:	e061      	b.n	8004698 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d03c      	beq.n	800465c <HAL_SD_ReadBlocks+0x198>
 80045e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d039      	beq.n	800465c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80045e8:	2300      	movs	r3, #0
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
 80045ec:	e033      	b.n	8004656 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f002 fa71 	bl	8006ada <SDIO_ReadFIFO>
 80045f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	3301      	adds	r3, #1
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	3b01      	subs	r3, #1
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b2da      	uxtb	r2, r3
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461a:	3301      	adds	r3, #1
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800461e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004620:	3b01      	subs	r3, #1
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	0c1b      	lsrs	r3, r3, #16
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800462e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004630:	3301      	adds	r3, #1
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004636:	3b01      	subs	r3, #1
 8004638:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	b2da      	uxtb	r2, r3
 8004640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004642:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	3301      	adds	r3, #1
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	3b01      	subs	r3, #1
 800464e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004652:	3301      	adds	r3, #1
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	2b07      	cmp	r3, #7
 800465a:	d9c8      	bls.n	80045ee <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800465c:	f7fc ffe6 	bl	800162c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004668:	429a      	cmp	r2, r3
 800466a:	d902      	bls.n	8004672 <HAL_SD_ReadBlocks+0x1ae>
 800466c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d112      	bne.n	8004698 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0ec      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d096      	beq.n	80045d4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d022      	beq.n	80046fa <HAL_SD_ReadBlocks+0x236>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d91f      	bls.n	80046fa <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d01b      	beq.n	80046fa <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 fb62 	bl	8006d90 <SDMMC_CmdStopTransfer>
 80046cc:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 80046da:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0bb      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	f043 0208 	orr.w	r2, r3, #8
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0a1      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	f043 0202 	orr.w	r2, r3, #2
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e087      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d064      	beq.n	800483a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <HAL_SD_ReadBlocks+0x2d4>)
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06d      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
 8004796:	bf00      	nop
 8004798:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 f99a 	bl	8006ada <SDIO_ReadFIFO>
 80047a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	3301      	adds	r3, #1
 80047b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b8:	3b01      	subs	r3, #1
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	3301      	adds	r3, #1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	3b01      	subs	r3, #1
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	3301      	adds	r3, #1
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	3b01      	subs	r3, #1
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	0e1b      	lsrs	r3, r3, #24
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f4:	3301      	adds	r3, #1
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	3b01      	subs	r3, #1
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047fe:	f7fc ff15 	bl	800162c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800480a:	429a      	cmp	r2, r3
 800480c:	d902      	bls.n	8004814 <HAL_SD_ReadBlocks+0x350>
 800480e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004810:	2b00      	cmp	r3, #0
 8004812:	d112      	bne.n	800483a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_SD_ReadBlocks+0x3b8>)
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e01b      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SD_ReadBlocks+0x38a>
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1a6      	bne.n	800479c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f240 523a 	movw	r2, #1338	; 0x53a
 8004856:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e006      	b.n	8004872 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3748      	adds	r7, #72	; 0x48
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	004005ff 	.word	0x004005ff

08004880 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b092      	sub	sp, #72	; 0x48
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800488e:	f7fc fecd 	bl	800162c <HAL_GetTick>
 8004892:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d107      	bne.n	80048b2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e165      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	f040 8158 	bne.w	8004b70 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	441a      	add	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d907      	bls.n	80048e4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e14c      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2200      	movs	r2, #0
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d002      	beq.n	8004902 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	025b      	lsls	r3, r3, #9
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004906:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	025b      	lsls	r3, r3, #9
 800490c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800490e:	2390      	movs	r3, #144	; 0x90
 8004910:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004916:	2300      	movs	r3, #0
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800491a:	2301      	movs	r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0218 	add.w	r2, r7, #24
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f002 f95a 	bl	8006be2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d90a      	bls.n	800494a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004940:	4618      	mov	r0, r3
 8004942:	f002 fa02 	bl	8006d4a <SDMMC_CmdWriteMultiBlock>
 8004946:	6478      	str	r0, [r7, #68]	; 0x44
 8004948:	e009      	b.n	800495e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2210      	movs	r2, #16
 800494e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004956:	4618      	mov	r0, r3
 8004958:	f002 f9d5 	bl	8006d06 <SDMMC_CmdWriteSingleBlock>
 800495c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800495e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004960:	2b00      	cmp	r3, #0
 8004962:	d012      	beq.n	800498a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a87      	ldr	r2, [pc, #540]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0f9      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800498e:	e065      	b.n	8004a5c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d040      	beq.n	8004a20 <HAL_SD_WriteBlocks+0x1a0>
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d03d      	beq.n	8004a20 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40
 80049a8:	e037      	b.n	8004a1a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	3301      	adds	r3, #1
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b8:	3b01      	subs	r3, #1
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	021a      	lsls	r2, r3, #8
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	3301      	adds	r3, #1
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	3b01      	subs	r3, #1
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	041a      	lsls	r2, r3, #16
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	3301      	adds	r3, #1
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	3b01      	subs	r3, #1
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	061a      	lsls	r2, r3, #24
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	3301      	adds	r3, #1
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	3b01      	subs	r3, #1
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f107 0214 	add.w	r2, r7, #20
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 f870 	bl	8006af4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a16:	3301      	adds	r3, #1
 8004a18:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	d9c4      	bls.n	80049aa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004a20:	f7fc fe04 	bl	800162c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d902      	bls.n	8004a36 <HAL_SD_WriteBlocks+0x1b6>
 8004a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d112      	bne.n	8004a5c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a53      	ldr	r2, [pc, #332]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e090      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d092      	beq.n	8004990 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d022      	beq.n	8004abe <HAL_SD_WriteBlocks+0x23e>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d91f      	bls.n	8004abe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d01b      	beq.n	8004abe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 f980 	bl	8006d90 <SDMMC_CmdStopTransfer>
 8004a90:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3a      	ldr	r2, [pc, #232]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e05f      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d012      	beq.n	8004af2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	f043 0208 	orr.w	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e045      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	f043 0202 	orr.w	r2, r3, #2
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e02b      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d012      	beq.n	8004b5a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <HAL_SD_WriteBlocks+0x308>)
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f043 0210 	orr.w	r2, r3, #16
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e011      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e006      	b.n	8004b7e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3748      	adds	r7, #72	; 0x48
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	004005ff 	.word	0x004005ff

08004b8c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_SD_IRQHandler+0x2e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 ff4f 	bl	8005a56 <SD_Read_IT>
 8004bb8:	e155      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 808f 	beq.w	8004ce8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004be2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004be6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d039      	beq.n	8004c76 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <HAL_SD_IRQHandler+0x8a>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d011      	beq.n	8004c3a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f002 f8b8 	bl	8006d90 <SDMMC_CmdStopTransfer>
 8004c20:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f91f 	bl	8004e78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_SD_IRQHandler+0xda>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f002 fd2e 	bl	80076c8 <HAL_SD_RxCpltCallback>
 8004c6c:	e0fb      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f002 fd20 	bl	80076b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c74:	e0f7      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80f2 	beq.w	8004e66 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d011      	beq.n	8004cb0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f002 f87d 	bl	8006d90 <SDMMC_CmdStopTransfer>
 8004c96:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8e4 	bl	8004e78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 80d5 	bne.w	8004e66 <HAL_SD_IRQHandler+0x2da>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 80cf 	bne.w	8004e66 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0208 	bic.w	r2, r2, #8
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f002 fce7 	bl	80076b4 <HAL_SD_TxCpltCallback>
}
 8004ce6:	e0be      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_SD_IRQHandler+0x17c>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fef9 	bl	8005af8 <SD_Write_IT>
 8004d06:	e0ae      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80a7 	beq.w	8004e66 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	f043 0208 	orr.w	r2, r3, #8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	f043 0210 	orr.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fff6 	bl	8006d90 <SDMMC_CmdStopTransfer>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f855 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 8004dce:	e04a      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d045      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <HAL_SD_IRQHandler+0x262>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_SD_IRQHandler+0x2e4>)
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fc feea 	bl	8001bd4 <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02f      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fac8 	bl	80053a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e10:	e029      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_SD_IRQHandler+0x29a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d011      	beq.n	8004e4a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <HAL_SD_IRQHandler+0x2e8>)
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc fece 	bl	8001bd4 <HAL_DMA_Abort_IT>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d013      	beq.n	8004e66 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fae3 	bl	800540e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e48:	e00d      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fc1e 	bl	80076a0 <HAL_SD_AbortCallback>
}
 8004e64:	e7ff      	b.n	8004e66 <HAL_SD_IRQHandler+0x2da>
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	080053a1 	.word	0x080053a1
 8004e74:	0800540f 	.word	0x0800540f

08004e78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9a:	0f9b      	lsrs	r3, r3, #30
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea6:	0e9b      	lsrs	r3, r3, #26
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eec:	0d1b      	lsrs	r3, r3, #20
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0a:	0bdb      	lsrs	r3, r3, #15
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1c:	0b9b      	lsrs	r3, r3, #14
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2e:	0b5b      	lsrs	r3, r3, #13
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f40:	0b1b      	lsrs	r3, r3, #12
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d163      	bne.n	8005024 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f6c:	0f92      	lsrs	r2, r2, #30
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f78:	0edb      	lsrs	r3, r3, #27
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	0e1b      	lsrs	r3, r3, #24
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9c:	0d5b      	lsrs	r3, r3, #21
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fae:	0c9b      	lsrs	r3, r3, #18
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc0:	0bdb      	lsrs	r3, r3, #15
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	7e1b      	ldrb	r3, [r3, #24]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fee:	fb03 f202 	mul.w	r2, r3, r2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	7a1b      	ldrb	r3, [r3, #8]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2201      	movs	r2, #1
 8005002:	409a      	lsls	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005010:	0a52      	lsrs	r2, r2, #9
 8005012:	fb03 f202 	mul.w	r2, r3, r2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
 8005022:	e031      	b.n	8005088 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	2b01      	cmp	r3, #1
 800502a:	d11d      	bne.n	8005068 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	431a      	orrs	r2, r3
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	3301      	adds	r3, #1
 8005048:	029a      	lsls	r2, r3, #10
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800505c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	661a      	str	r2, [r3, #96]	; 0x60
 8005066:	e00f      	b.n	8005088 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_SD_GetCardCSD+0x344>)
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e09d      	b.n	80051c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508c:	0b9b      	lsrs	r3, r3, #14
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	0fdb      	lsrs	r3, r3, #31
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	0f5b      	lsrs	r3, r3, #29
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	0e9b      	lsrs	r3, r3, #26
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	0d9b      	lsrs	r3, r3, #22
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	0d5b      	lsrs	r3, r3, #21
 8005104:	b2db      	uxtb	r3, r3
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	0bdb      	lsrs	r3, r3, #15
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	0b9b      	lsrs	r3, r3, #14
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	0b5b      	lsrs	r3, r3, #13
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	b2da      	uxtb	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	0b1b      	lsrs	r3, r3, #12
 8005170:	b2db      	uxtb	r3, r3
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	0a9b      	lsrs	r3, r3, #10
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	b2da      	uxtb	r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	004005ff 	.word	0x004005ff

080051d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af04      	add	r7, sp, #16
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2203      	movs	r2, #3
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	2b03      	cmp	r3, #3
 800524a:	d02e      	beq.n	80052aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d106      	bne.n	8005262 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
 8005260:	e029      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d10a      	bne.n	8005280 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa8a 	bl	8005784 <SD_WideBus_Enable>
 8005270:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
 800527e:	e01a      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fac7 	bl	800581a <SD_WideBus_Disable>
 800528c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e00c      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
 80052a8:	e005      	b.n	80052b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a26      	ldr	r2, [pc, #152]	; (800535c <HAL_SD_ConfigWideBusOperation+0x130>)
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052d4:	e01f      	b.n	8005316 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681d      	ldr	r5, [r3, #0]
 80052fc:	466c      	mov	r4, sp
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005310:	4628      	mov	r0, r5
 8005312:	f001 fbb7 	bl	8006a84 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fc8b 	bl	8006c3a <SDMMC_CmdBlockLength>
 8005324:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800534e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005352:	4618      	mov	r0, r3
 8005354:	3728      	adds	r7, #40	; 0x28
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	004005ff 	.word	0x004005ff

08005360 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9de 	bl	8005734 <SD_SendStatus>
 8005378:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005396:	693b      	ldr	r3, [r7, #16]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ffd1 	bl	8005360 <HAL_SD_GetCardState>
 80053be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d002      	beq.n	80053da <SD_DMATxAbort+0x3a>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d10a      	bne.n	80053f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fcd6 	bl	8006d90 <SDMMC_CmdStopTransfer>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f002 f951 	bl	80076a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80053fe:	e002      	b.n	8005406 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff fd39 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f240 523a 	movw	r2, #1338	; 0x53a
 8005424:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff ff9a 	bl	8005360 <HAL_SD_GetCardState>
 800542c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d002      	beq.n	8005448 <SD_DMARxAbort+0x3a>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b05      	cmp	r3, #5
 8005446:	d10a      	bne.n	800545e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f001 fc9f 	bl	8006d90 <SDMMC_CmdStopTransfer>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	431a      	orrs	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f002 f91a 	bl	80076a0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800546c:	e002      	b.n	8005474 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff fd02 	bl	8004e78 <HAL_SD_ErrorCallback>
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800547c:	b5b0      	push	{r4, r5, r7, lr}
 800547e:	b094      	sub	sp, #80	; 0x50
 8005480:	af04      	add	r7, sp, #16
 8005482:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005484:	2301      	movs	r3, #1
 8005486:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f001 fb50 	bl	8006b32 <SDIO_GetPowerState>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800549c:	e0b8      	b.n	8005610 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d02f      	beq.n	8005506 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 fd7a 	bl	8006fa4 <SDMMC_CmdSendCID>
 80054b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <SD_InitCard+0x40>
    {
      return errorstate;
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	e0a9      	b.n	8005610 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 fb7a 	bl	8006bbc <SDIO_GetResponse>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2104      	movs	r1, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fb71 	bl	8006bbc <SDIO_GetResponse>
 80054da:	4602      	mov	r2, r0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2108      	movs	r1, #8
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fb68 	bl	8006bbc <SDIO_GetResponse>
 80054ec:	4602      	mov	r2, r0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	210c      	movs	r1, #12
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 fb5f 	bl	8006bbc <SDIO_GetResponse>
 80054fe:	4602      	mov	r2, r0
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	2b03      	cmp	r3, #3
 800550c:	d00d      	beq.n	800552a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f107 020e 	add.w	r2, r7, #14
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fd80 	bl	800701e <SDMMC_CmdSetRelAdd>
 800551e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <SD_InitCard+0xae>
    {
      return errorstate;
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005528:	e072      	b.n	8005610 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552e:	2b03      	cmp	r3, #3
 8005530:	d036      	beq.n	80055a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005532:	89fb      	ldrh	r3, [r7, #14]
 8005534:	461a      	mov	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f001 fd4a 	bl	8006fe0 <SDMMC_CmdSendCSD>
 800554c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005556:	e05b      	b.n	8005610 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f001 fb2c 	bl	8006bbc <SDIO_GetResponse>
 8005564:	4602      	mov	r2, r0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2104      	movs	r1, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f001 fb23 	bl	8006bbc <SDIO_GetResponse>
 8005576:	4602      	mov	r2, r0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2108      	movs	r1, #8
 8005582:	4618      	mov	r0, r3
 8005584:	f001 fb1a 	bl	8006bbc <SDIO_GetResponse>
 8005588:	4602      	mov	r2, r0
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	210c      	movs	r1, #12
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fb11 	bl	8006bbc <SDIO_GetResponse>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2104      	movs	r1, #4
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fb08 	bl	8006bbc <SDIO_GetResponse>
 80055ac:	4603      	mov	r3, r0
 80055ae:	0d1a      	lsrs	r2, r3, #20
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80055b4:	f107 0310 	add.w	r3, r7, #16
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fc66 	bl	8004e8c <HAL_SD_GetCardCSD>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055ca:	e021      	b.n	8005610 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	2200      	movs	r2, #0
 80055d8:	461c      	mov	r4, r3
 80055da:	4615      	mov	r5, r2
 80055dc:	4622      	mov	r2, r4
 80055de:	462b      	mov	r3, r5
 80055e0:	4608      	mov	r0, r1
 80055e2:	f001 fbf7 	bl	8006dd4 <SDMMC_CmdSelDesel>
 80055e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80055e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <SD_InitCard+0x176>
  {
    return errorstate;
 80055ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f0:	e00e      	b.n	8005610 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681d      	ldr	r5, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	466c      	mov	r4, sp
 80055fa:	f103 0210 	add.w	r2, r3, #16
 80055fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8005600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005604:	3304      	adds	r3, #4
 8005606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005608:	4628      	mov	r0, r5
 800560a:	f001 fa3b 	bl	8006a84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3740      	adds	r7, #64	; 0x40
 8005614:	46bd      	mov	sp, r7
 8005616:	bdb0      	pop	{r4, r5, r7, pc}

08005618 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f001 fbf2 	bl	8006e1a <SDMMC_CmdGoIdleState>
 8005636:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <SD_PowerON+0x2a>
  {
    return errorstate;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	e072      	b.n	8005728 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f001 fc05 	bl	8006e56 <SDMMC_CmdOperCond>
 800564c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f001 fbdb 	bl	8006e1a <SDMMC_CmdGoIdleState>
 8005664:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <SD_PowerON+0x5e>
    {
      return errorstate;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	e05b      	b.n	8005728 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	2b01      	cmp	r3, #1
 800567c:	d137      	bne.n	80056ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fc05 	bl	8006e94 <SDMMC_CmdAppCommand>
 800568a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02d      	beq.n	80056ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005696:	e047      	b.n	8005728 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fbf8 	bl	8006e94 <SDMMC_CmdAppCommand>
 80056a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	e03b      	b.n	8005728 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	491e      	ldr	r1, [pc, #120]	; (8005730 <SD_PowerON+0x118>)
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fc0e 	bl	8006ed8 <SDMMC_CmdAppOperCommand>
 80056bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80056c8:	e02e      	b.n	8005728 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fa73 	bl	8006bbc <SDIO_GetResponse>
 80056d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	0fdb      	lsrs	r3, r3, #31
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <SD_PowerON+0xcc>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <SD_PowerON+0xce>
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]

    count++;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d802      	bhi.n	80056fe <SD_PowerON+0xe6>
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0cc      	beq.n	8005698 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005704:	4293      	cmp	r3, r2
 8005706:	d902      	bls.n	800570e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800570c:	e00c      	b.n	8005728 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	645a      	str	r2, [r3, #68]	; 0x44
 800571e:	e002      	b.n	8005726 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	c1100000 	.word	0xc1100000

08005734 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d102      	bne.n	800574a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005748:	e018      	b.n	800577c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f001 fc82 	bl	8007060 <SDMMC_CmdSendStatus>
 800575c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	e009      	b.n	800577c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fa24 	bl	8006bbc <SDIO_GetResponse>
 8005774:	4602      	mov	r2, r0
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f001 fa0e 	bl	8006bbc <SDIO_GetResponse>
 80057a0:	4603      	mov	r3, r0
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057aa:	d102      	bne.n	80057b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057b0:	e02f      	b.n	8005812 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80057b2:	f107 030c 	add.w	r3, r7, #12
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f879 	bl	80058b0 <SD_FindSCR>
 80057be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	e023      	b.n	8005812 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01c      	beq.n	800580e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f001 fb57 	bl	8006e94 <SDMMC_CmdAppCommand>
 80057e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	e00f      	b.n	8005812 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fb90 	bl	8006f1e <SDMMC_CmdBusWidth>
 80057fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e003      	b.n	8005812 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800580a:	2300      	movs	r3, #0
 800580c:	e001      	b.n	8005812 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800580e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 f9c3 	bl	8006bbc <SDIO_GetResponse>
 8005836:	4603      	mov	r3, r0
 8005838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005840:	d102      	bne.n	8005848 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005846:	e02f      	b.n	80058a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f82e 	bl	80058b0 <SD_FindSCR>
 8005854:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	e023      	b.n	80058a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01c      	beq.n	80058a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f001 fb0c 	bl	8006e94 <SDMMC_CmdAppCommand>
 800587c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	e00f      	b.n	80058a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fb45 	bl	8006f1e <SDMMC_CmdBusWidth>
 8005894:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	e003      	b.n	80058a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e001      	b.n	80058a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b08f      	sub	sp, #60	; 0x3c
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058ba:	f7fb feb7 	bl	800162c <HAL_GetTick>
 80058be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80058c4:	2300      	movs	r3, #0
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2108      	movs	r1, #8
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 f9af 	bl	8006c3a <SDMMC_CmdBlockLength>
 80058dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	e0b2      	b.n	8005a4e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f001 facd 	bl	8006e94 <SDMMC_CmdAppCommand>
 80058fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	e0a3      	b.n	8005a4e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800590a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800590c:	2308      	movs	r3, #8
 800590e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005910:	2330      	movs	r3, #48	; 0x30
 8005912:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005914:	2302      	movs	r3, #2
 8005916:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005918:	2300      	movs	r3, #0
 800591a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800591c:	2301      	movs	r3, #1
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f107 0210 	add.w	r2, r7, #16
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f001 f959 	bl	8006be2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f001 fb14 	bl	8006f62 <SDMMC_CmdSendSCR>
 800593a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02a      	beq.n	8005998 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	e083      	b.n	8005a4e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00f      	beq.n	8005974 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	f107 0208 	add.w	r2, r7, #8
 8005960:	18d4      	adds	r4, r2, r3
 8005962:	4608      	mov	r0, r1
 8005964:	f001 f8b9 	bl	8006ada <SDIO_ReadFIFO>
 8005968:	4603      	mov	r3, r0
 800596a:	6023      	str	r3, [r4, #0]
      index++;
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	3301      	adds	r3, #1
 8005970:	637b      	str	r3, [r7, #52]	; 0x34
 8005972:	e006      	b.n	8005982 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d012      	beq.n	80059a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005982:	f7fb fe53 	bl	800162c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005990:	d102      	bne.n	8005998 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005996:	e05a      	b.n	8005a4e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0cf      	beq.n	8005946 <SD_FindSCR+0x96>
 80059a6:	e000      	b.n	80059aa <SD_FindSCR+0xfa>
      break;
 80059a8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80059c0:	2308      	movs	r3, #8
 80059c2:	e044      	b.n	8005a4e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2202      	movs	r2, #2
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80059da:	2302      	movs	r3, #2
 80059dc:	e037      	b.n	8005a4e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2220      	movs	r2, #32
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80059f4:	2320      	movs	r3, #32
 80059f6:	e02a      	b.n	8005a4e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	061a      	lsls	r2, r3, #24
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a0e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0a1b      	lsrs	r3, r3, #8
 8005a14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a18:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	0e1b      	lsrs	r3, r3, #24
 8005a1e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	601a      	str	r2, [r3, #0]
    scr++;
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	3304      	adds	r3, #4
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	061a      	lsls	r2, r3, #24
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a36:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a40:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	0e1b      	lsrs	r3, r3, #24
 8005a46:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	373c      	adds	r7, #60	; 0x3c
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}

08005a56 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b086      	sub	sp, #24
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d03f      	beq.n	8005af0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e033      	b.n	8005ade <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 f82d 	bl	8006ada <SDIO_ReadFIFO>
 8005a80:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	0c1b      	lsrs	r3, r3, #16
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0e1b      	lsrs	r3, r3, #24
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	3301      	adds	r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d9c8      	bls.n	8005a76 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d043      	beq.n	8005b9a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e037      	b.n	8005b88 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	021a      	lsls	r2, r3, #8
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	041a      	lsls	r2, r3, #16
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	061a      	lsls	r2, r3, #24
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f107 0208 	add.w	r2, r7, #8
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 ffb9 	bl	8006af4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	3301      	adds	r3, #1
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b07      	cmp	r3, #7
 8005b8c:	d9c4      	bls.n	8005b18 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e041      	b.n	8005c38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7fb fb83 	bl	80012d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 fac3 	bl	800616c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d001      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e04e      	b.n	8005cf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c82:	d01d      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1e      	ldr	r2, [pc, #120]	; (8005d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d111      	bne.n	8005ce4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b06      	cmp	r3, #6
 8005cd0:	d010      	beq.n	8005cf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce2:	e007      	b.n	8005cf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40010000 	.word	0x40010000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40010400 	.word	0x40010400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40001800 	.word	0x40001800

08005d20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0201 	bic.w	r2, r2, #1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6a1a      	ldr	r2, [r3, #32]
 8005d3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d42:	4013      	ands	r3, r2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10f      	bne.n	8005d68 <HAL_TIM_Base_Stop_IT+0x48>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a1a      	ldr	r2, [r3, #32]
 8005d4e:	f240 4344 	movw	r3, #1092	; 0x444
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <HAL_TIM_Base_Stop_IT+0x48>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b082      	sub	sp, #8
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d122      	bne.n	8005dda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d11b      	bne.n	8005dda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f06f 0202 	mvn.w	r2, #2
 8005daa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9b5 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005dc6:	e005      	b.n	8005dd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9a7 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9b8 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b04      	cmp	r3, #4
 8005de6:	d122      	bne.n	8005e2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d11b      	bne.n	8005e2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0204 	mvn.w	r2, #4
 8005dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f98b 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005e1a:	e005      	b.n	8005e28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f97d 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f98e 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d122      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d11b      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0208 	mvn.w	r2, #8
 8005e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2204      	movs	r2, #4
 8005e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f961 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005e6e:	e005      	b.n	8005e7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f953 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f964 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d122      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b10      	cmp	r3, #16
 8005e9c:	d11b      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0210 	mvn.w	r2, #16
 8005ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f937 	bl	8006130 <HAL_TIM_IC_CaptureCallback>
 8005ec2:	e005      	b.n	8005ed0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f929 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f93a 	bl	8006144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10e      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d107      	bne.n	8005f02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f06f 0201 	mvn.w	r2, #1
 8005efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fa fdf5 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0c:	2b80      	cmp	r3, #128	; 0x80
 8005f0e:	d10e      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d107      	bne.n	8005f2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fadf 	bl	80064ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d10e      	bne.n	8005f5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f46:	2b40      	cmp	r3, #64	; 0x40
 8005f48:	d107      	bne.n	8005f5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8ff 	bl	8006158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d10e      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d107      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f06f 0220 	mvn.w	r2, #32
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 faa9 	bl	80064d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_ConfigClockSource+0x1c>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e0b4      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x186>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fc8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d03e      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xd4>
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	f200 8087 	bhi.w	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	f000 8086 	beq.w	8006100 <HAL_TIM_ConfigClockSource+0x172>
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	d87f      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 8005ffa:	2b70      	cmp	r3, #112	; 0x70
 8005ffc:	d01a      	beq.n	8006034 <HAL_TIM_ConfigClockSource+0xa6>
 8005ffe:	2b70      	cmp	r3, #112	; 0x70
 8006000:	d87b      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 8006002:	2b60      	cmp	r3, #96	; 0x60
 8006004:	d050      	beq.n	80060a8 <HAL_TIM_ConfigClockSource+0x11a>
 8006006:	2b60      	cmp	r3, #96	; 0x60
 8006008:	d877      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 800600a:	2b50      	cmp	r3, #80	; 0x50
 800600c:	d03c      	beq.n	8006088 <HAL_TIM_ConfigClockSource+0xfa>
 800600e:	2b50      	cmp	r3, #80	; 0x50
 8006010:	d873      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d058      	beq.n	80060c8 <HAL_TIM_ConfigClockSource+0x13a>
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d86f      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 800601a:	2b30      	cmp	r3, #48	; 0x30
 800601c:	d064      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x15a>
 800601e:	2b30      	cmp	r3, #48	; 0x30
 8006020:	d86b      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 8006022:	2b20      	cmp	r3, #32
 8006024:	d060      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x15a>
 8006026:	2b20      	cmp	r3, #32
 8006028:	d867      	bhi.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d05c      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x15a>
 800602e:	2b10      	cmp	r3, #16
 8006030:	d05a      	beq.n	80060e8 <HAL_TIM_ConfigClockSource+0x15a>
 8006032:	e062      	b.n	80060fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6899      	ldr	r1, [r3, #8]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f000 f9ac 	bl	80063a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006056:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	609a      	str	r2, [r3, #8]
      break;
 8006060:	e04f      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6899      	ldr	r1, [r3, #8]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f000 f995 	bl	80063a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006084:	609a      	str	r2, [r3, #8]
      break;
 8006086:	e03c      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	461a      	mov	r2, r3
 8006096:	f000 f909 	bl	80062ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2150      	movs	r1, #80	; 0x50
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 f962 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060a6:	e02c      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	461a      	mov	r2, r3
 80060b6:	f000 f928 	bl	800630a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2160      	movs	r1, #96	; 0x60
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f952 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060c6:	e01c      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6859      	ldr	r1, [r3, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	461a      	mov	r2, r3
 80060d6:	f000 f8e9 	bl	80062ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2140      	movs	r1, #64	; 0x40
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f942 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060e6:	e00c      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f000 f939 	bl	800636a <TIM_ITRx_SetConfig>
      break;
 80060f8:	e003      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	e000      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006100:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a40      	ldr	r2, [pc, #256]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3d      	ldr	r2, [pc, #244]	; (8006284 <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3c      	ldr	r2, [pc, #240]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3b      	ldr	r2, [pc, #236]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3a      	ldr	r2, [pc, #232]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_Base_SetConfig+0x114>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d02b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d027      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <TIM_Base_SetConfig+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d023      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2b      	ldr	r2, [pc, #172]	; (8006288 <TIM_Base_SetConfig+0x11c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <TIM_Base_SetConfig+0x120>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <TIM_Base_SetConfig+0x124>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d017      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a28      	ldr	r2, [pc, #160]	; (8006294 <TIM_Base_SetConfig+0x128>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <TIM_Base_SetConfig+0x12c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00f      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <TIM_Base_SetConfig+0x130>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00b      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <TIM_Base_SetConfig+0x134>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a24      	ldr	r2, [pc, #144]	; (80062a4 <TIM_Base_SetConfig+0x138>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d003      	beq.n	800621e <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <TIM_Base_SetConfig+0x13c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d108      	bne.n	8006230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <TIM_Base_SetConfig+0x124>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	615a      	str	r2, [r3, #20]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40001800 	.word	0x40001800
 80062a4:	40001c00 	.word	0x40001c00
 80062a8:	40002000 	.word	0x40002000

080062ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f023 0201 	bic.w	r2, r3, #1
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f023 030a 	bic.w	r3, r3, #10
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f023 0210 	bic.w	r2, r3, #16
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	031b      	lsls	r3, r3, #12
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	bf00      	nop
 8006360:	371c      	adds	r7, #28
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	f043 0307 	orr.w	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	021a      	lsls	r2, r3, #8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	609a      	str	r2, [r3, #8]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e05a      	b.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a21      	ldr	r2, [pc, #132]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d01d      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1b      	ldr	r2, [pc, #108]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1a      	ldr	r2, [pc, #104]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a18      	ldr	r2, [pc, #96]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a17      	ldr	r2, [pc, #92]	; (80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d10c      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	4313      	orrs	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40001800 	.word	0x40001800

080064d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e03f      	b.n	8006592 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fa fefc 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2224      	movs	r2, #36	; 0x24
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f829 	bl	800659c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a0:	b0c0      	sub	sp, #256	; 0x100
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	68d9      	ldr	r1, [r3, #12]
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	ea40 0301 	orr.w	r3, r0, r1
 80065c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065f4:	f021 010c 	bic.w	r1, r1, #12
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006602:	430b      	orrs	r3, r1
 8006604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006616:	6999      	ldr	r1, [r3, #24]
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	ea40 0301 	orr.w	r3, r0, r1
 8006622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b8f      	ldr	r3, [pc, #572]	; (8006868 <UART_SetConfig+0x2cc>)
 800662c:	429a      	cmp	r2, r3
 800662e:	d005      	beq.n	800663c <UART_SetConfig+0xa0>
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b8d      	ldr	r3, [pc, #564]	; (800686c <UART_SetConfig+0x2d0>)
 8006638:	429a      	cmp	r2, r3
 800663a:	d104      	bne.n	8006646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800663c:	f7fc fc3e 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8006640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006644:	e003      	b.n	800664e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006646:	f7fc fc25 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800664a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006658:	f040 810c 	bne.w	8006874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800665c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006660:	2200      	movs	r2, #0
 8006662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800666a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	1891      	adds	r1, r2, r2
 8006674:	65b9      	str	r1, [r7, #88]	; 0x58
 8006676:	415b      	adcs	r3, r3
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800667e:	4621      	mov	r1, r4
 8006680:	eb12 0801 	adds.w	r8, r2, r1
 8006684:	4629      	mov	r1, r5
 8006686:	eb43 0901 	adc.w	r9, r3, r1
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800669a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800669e:	4690      	mov	r8, r2
 80066a0:	4699      	mov	r9, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	eb18 0303 	adds.w	r3, r8, r3
 80066a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066ac:	462b      	mov	r3, r5
 80066ae:	eb49 0303 	adc.w	r3, r9, r3
 80066b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066ca:	460b      	mov	r3, r1
 80066cc:	18db      	adds	r3, r3, r3
 80066ce:	653b      	str	r3, [r7, #80]	; 0x50
 80066d0:	4613      	mov	r3, r2
 80066d2:	eb42 0303 	adc.w	r3, r2, r3
 80066d6:	657b      	str	r3, [r7, #84]	; 0x54
 80066d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066e0:	f7f9 fdf6 	bl	80002d0 <__aeabi_uldivmod>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4b61      	ldr	r3, [pc, #388]	; (8006870 <UART_SetConfig+0x2d4>)
 80066ea:	fba3 2302 	umull	r2, r3, r3, r2
 80066ee:	095b      	lsrs	r3, r3, #5
 80066f0:	011c      	lsls	r4, r3, #4
 80066f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006704:	4642      	mov	r2, r8
 8006706:	464b      	mov	r3, r9
 8006708:	1891      	adds	r1, r2, r2
 800670a:	64b9      	str	r1, [r7, #72]	; 0x48
 800670c:	415b      	adcs	r3, r3
 800670e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006714:	4641      	mov	r1, r8
 8006716:	eb12 0a01 	adds.w	sl, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb43 0b01 	adc.w	fp, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800672c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006734:	4692      	mov	sl, r2
 8006736:	469b      	mov	fp, r3
 8006738:	4643      	mov	r3, r8
 800673a:	eb1a 0303 	adds.w	r3, sl, r3
 800673e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006742:	464b      	mov	r3, r9
 8006744:	eb4b 0303 	adc.w	r3, fp, r3
 8006748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800674c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800675c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006760:	460b      	mov	r3, r1
 8006762:	18db      	adds	r3, r3, r3
 8006764:	643b      	str	r3, [r7, #64]	; 0x40
 8006766:	4613      	mov	r3, r2
 8006768:	eb42 0303 	adc.w	r3, r2, r3
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006776:	f7f9 fdab 	bl	80002d0 <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4611      	mov	r1, r2
 8006780:	4b3b      	ldr	r3, [pc, #236]	; (8006870 <UART_SetConfig+0x2d4>)
 8006782:	fba3 2301 	umull	r2, r3, r3, r1
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	2264      	movs	r2, #100	; 0x64
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	1acb      	subs	r3, r1, r3
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006796:	4b36      	ldr	r3, [pc, #216]	; (8006870 <UART_SetConfig+0x2d4>)
 8006798:	fba3 2302 	umull	r2, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a4:	441c      	add	r4, r3
 80067a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	1891      	adds	r1, r2, r2
 80067be:	63b9      	str	r1, [r7, #56]	; 0x38
 80067c0:	415b      	adcs	r3, r3
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067c8:	4641      	mov	r1, r8
 80067ca:	1851      	adds	r1, r2, r1
 80067cc:	6339      	str	r1, [r7, #48]	; 0x30
 80067ce:	4649      	mov	r1, r9
 80067d0:	414b      	adcs	r3, r1
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067e0:	4659      	mov	r1, fp
 80067e2:	00cb      	lsls	r3, r1, #3
 80067e4:	4651      	mov	r1, sl
 80067e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ea:	4651      	mov	r1, sl
 80067ec:	00ca      	lsls	r2, r1, #3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	4642      	mov	r2, r8
 80067f6:	189b      	adds	r3, r3, r2
 80067f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067fc:	464b      	mov	r3, r9
 80067fe:	460a      	mov	r2, r1
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800681c:	460b      	mov	r3, r1
 800681e:	18db      	adds	r3, r3, r3
 8006820:	62bb      	str	r3, [r7, #40]	; 0x28
 8006822:	4613      	mov	r3, r2
 8006824:	eb42 0303 	adc.w	r3, r2, r3
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800682e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006832:	f7f9 fd4d 	bl	80002d0 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <UART_SetConfig+0x2d4>)
 800683c:	fba3 1302 	umull	r1, r3, r3, r2
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	2164      	movs	r1, #100	; 0x64
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	3332      	adds	r3, #50	; 0x32
 800684e:	4a08      	ldr	r2, [pc, #32]	; (8006870 <UART_SetConfig+0x2d4>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	f003 0207 	and.w	r2, r3, #7
 800685a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4422      	add	r2, r4
 8006862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006864:	e105      	b.n	8006a72 <UART_SetConfig+0x4d6>
 8006866:	bf00      	nop
 8006868:	40011000 	.word	0x40011000
 800686c:	40011400 	.word	0x40011400
 8006870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800687e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	1891      	adds	r1, r2, r2
 800688c:	6239      	str	r1, [r7, #32]
 800688e:	415b      	adcs	r3, r3
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006896:	4641      	mov	r1, r8
 8006898:	1854      	adds	r4, r2, r1
 800689a:	4649      	mov	r1, r9
 800689c:	eb43 0501 	adc.w	r5, r3, r1
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	00eb      	lsls	r3, r5, #3
 80068aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068ae:	00e2      	lsls	r2, r4, #3
 80068b0:	4614      	mov	r4, r2
 80068b2:	461d      	mov	r5, r3
 80068b4:	4643      	mov	r3, r8
 80068b6:	18e3      	adds	r3, r4, r3
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068bc:	464b      	mov	r3, r9
 80068be:	eb45 0303 	adc.w	r3, r5, r3
 80068c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068e2:	4629      	mov	r1, r5
 80068e4:	008b      	lsls	r3, r1, #2
 80068e6:	4621      	mov	r1, r4
 80068e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ec:	4621      	mov	r1, r4
 80068ee:	008a      	lsls	r2, r1, #2
 80068f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068f4:	f7f9 fcec 	bl	80002d0 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4b60      	ldr	r3, [pc, #384]	; (8006a80 <UART_SetConfig+0x4e4>)
 80068fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	011c      	lsls	r4, r3, #4
 8006906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	1891      	adds	r1, r2, r2
 800691e:	61b9      	str	r1, [r7, #24]
 8006920:	415b      	adcs	r3, r3
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006928:	4641      	mov	r1, r8
 800692a:	1851      	adds	r1, r2, r1
 800692c:	6139      	str	r1, [r7, #16]
 800692e:	4649      	mov	r1, r9
 8006930:	414b      	adcs	r3, r1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006940:	4659      	mov	r1, fp
 8006942:	00cb      	lsls	r3, r1, #3
 8006944:	4651      	mov	r1, sl
 8006946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694a:	4651      	mov	r1, sl
 800694c:	00ca      	lsls	r2, r1, #3
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	4603      	mov	r3, r0
 8006954:	4642      	mov	r2, r8
 8006956:	189b      	adds	r3, r3, r2
 8006958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800695c:	464b      	mov	r3, r9
 800695e:	460a      	mov	r2, r1
 8006960:	eb42 0303 	adc.w	r3, r2, r3
 8006964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	67bb      	str	r3, [r7, #120]	; 0x78
 8006972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006992:	f7f9 fc9d 	bl	80002d0 <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	; 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	; 0x32
 80069ae:	4a34      	ldr	r2, [pc, #208]	; (8006a80 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ba:	441c      	add	r4, r3
 80069bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c0:	2200      	movs	r2, #0
 80069c2:	673b      	str	r3, [r7, #112]	; 0x70
 80069c4:	677a      	str	r2, [r7, #116]	; 0x74
 80069c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	1891      	adds	r1, r2, r2
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	415b      	adcs	r3, r3
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069da:	4641      	mov	r1, r8
 80069dc:	1851      	adds	r1, r2, r1
 80069de:	6039      	str	r1, [r7, #0]
 80069e0:	4649      	mov	r1, r9
 80069e2:	414b      	adcs	r3, r1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f2:	4659      	mov	r1, fp
 80069f4:	00cb      	lsls	r3, r1, #3
 80069f6:	4651      	mov	r1, sl
 80069f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fc:	4651      	mov	r1, sl
 80069fe:	00ca      	lsls	r2, r1, #3
 8006a00:	4610      	mov	r0, r2
 8006a02:	4619      	mov	r1, r3
 8006a04:	4603      	mov	r3, r0
 8006a06:	4642      	mov	r2, r8
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	460a      	mov	r2, r1
 8006a10:	eb42 0303 	adc.w	r3, r2, r3
 8006a14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006a20:	667a      	str	r2, [r7, #100]	; 0x64
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a2e:	4649      	mov	r1, r9
 8006a30:	008b      	lsls	r3, r1, #2
 8006a32:	4641      	mov	r1, r8
 8006a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a38:	4641      	mov	r1, r8
 8006a3a:	008a      	lsls	r2, r1, #2
 8006a3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a40:	f7f9 fc46 	bl	80002d0 <__aeabi_uldivmod>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2164      	movs	r1, #100	; 0x64
 8006a52:	fb01 f303 	mul.w	r3, r1, r3
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	3332      	adds	r3, #50	; 0x32
 8006a5c:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <UART_SetConfig+0x4e4>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4422      	add	r2, r4
 8006a70:	609a      	str	r2, [r3, #8]
}
 8006a72:	bf00      	nop
 8006a74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7e:	bf00      	nop
 8006a80:	51eb851f 	.word	0x51eb851f

08006a84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006a84:	b084      	sub	sp, #16
 8006a86:	b480      	push	{r7}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	f107 001c 	add.w	r0, r7, #28
 8006a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006a9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006a9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006aa2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006aa6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006aaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006aae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006abe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	b004      	add	sp, #16
 8006ad8:	4770      	bx	lr

08006ada <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006b16:	b480      	push	{r7}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2203      	movs	r2, #3
 8006b22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b6c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006b72:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006b78:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006b88:	f023 030f 	bic.w	r3, r3, #15
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	b2db      	uxtb	r3, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	461a      	mov	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	4413      	add	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
}  
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c08:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006c0e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006c14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0

}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b088      	sub	sp, #32
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006c48:	2310      	movs	r3, #16
 8006c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c5a:	f107 0308 	add.w	r3, r7, #8
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff74 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa19 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c74:	69fb      	ldr	r3, [r7, #28]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b088      	sub	sp, #32
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006c8c:	2311      	movs	r3, #17
 8006c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c9e:	f107 0308 	add.w	r3, r7, #8
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff ff52 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cae:	2111      	movs	r1, #17
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f9f7 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b088      	sub	sp, #32
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006cd0:	2312      	movs	r3, #18
 8006cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff30 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	2112      	movs	r1, #18
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f9d5 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b088      	sub	sp, #32
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006d14:	2318      	movs	r3, #24
 8006d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff0e 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d36:	2118      	movs	r1, #24
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f9b3 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d40:	69fb      	ldr	r3, [r7, #28]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b088      	sub	sp, #32
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006d58:	2319      	movs	r3, #25
 8006d5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d5c:	2340      	movs	r3, #64	; 0x40
 8006d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d6a:	f107 0308 	add.w	r3, r7, #8
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff feec 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	2119      	movs	r1, #25
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f991 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006d82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d84:	69fb      	ldr	r3, [r7, #28]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dae:	f107 0308 	add.w	r3, r7, #8
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff feca 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006dba:	4a05      	ldr	r2, [pc, #20]	; (8006dd0 <SDMMC_CmdStopTransfer+0x40>)
 8006dbc:	210c      	movs	r1, #12
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f970 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	05f5e100 	.word	0x05f5e100

08006dd4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006de4:	2307      	movs	r3, #7
 8006de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dec:	2300      	movs	r3, #0
 8006dee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006df6:	f107 0310 	add.w	r3, r7, #16
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fea6 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e06:	2107      	movs	r1, #7
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f94b 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006e0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3728      	adds	r7, #40	; 0x28
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b088      	sub	sp, #32
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e38:	f107 0308 	add.w	r3, r7, #8
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe85 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb65 	bl	8007514 <SDMMC_GetCmdError>
 8006e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b088      	sub	sp, #32
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006e62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e64:	2308      	movs	r3, #8
 8006e66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e68:	2340      	movs	r3, #64	; 0x40
 8006e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff fe66 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 faf8 	bl	8007478 <SDMMC_GetCmdResp7>
 8006e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006ea2:	2337      	movs	r3, #55	; 0x37
 8006ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eb4:	f107 0308 	add.w	r3, r7, #8
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fe47 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ec4:	2137      	movs	r1, #55	; 0x37
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f8ec 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ece:	69fb      	ldr	r3, [r7, #28]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006eee:	2329      	movs	r3, #41	; 0x29
 8006ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fe21 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9ff 	bl	8007310 <SDMMC_GetCmdResp3>
 8006f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f14:	69fb      	ldr	r3, [r7, #28]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b088      	sub	sp, #32
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006f2c:	2306      	movs	r3, #6
 8006f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f30:	2340      	movs	r3, #64	; 0x40
 8006f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f3e:	f107 0308 	add.w	r3, r7, #8
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fe02 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4e:	2106      	movs	r1, #6
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8a7 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f58:	69fb      	ldr	r3, [r7, #28]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b088      	sub	sp, #32
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006f6e:	2333      	movs	r3, #51	; 0x33
 8006f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f72:	2340      	movs	r3, #64	; 0x40
 8006f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f80:	f107 0308 	add.w	r3, r7, #8
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fde1 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	2133      	movs	r1, #51	; 0x33
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f886 	bl	80070a4 <SDMMC_GetCmdResp1>
 8006f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006fb4:	23c0      	movs	r3, #192	; 0xc0
 8006fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fdc0 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f956 	bl	8007280 <SDMMC_GetCmdResp2>
 8006fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fd6:	69fb      	ldr	r3, [r7, #28]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006fee:	2309      	movs	r3, #9
 8006ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006ff2:	23c0      	movs	r3, #192	; 0xc0
 8006ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff fda1 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f937 	bl	8007280 <SDMMC_GetCmdResp2>
 8007012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007014:	69fb      	ldr	r3, [r7, #28]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b088      	sub	sp, #32
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800702c:	2303      	movs	r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800703c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800703e:	f107 0308 	add.w	r3, r7, #8
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fd82 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	2103      	movs	r1, #3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f99c 	bl	800738c <SDMMC_GetCmdResp6>
 8007054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007056:	69fb      	ldr	r3, [r7, #28]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800706e:	230d      	movs	r3, #13
 8007070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800707a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fd61 	bl	8006b4e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800708c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007090:	210d      	movs	r1, #13
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f806 	bl	80070a4 <SDMMC_GetCmdResp1>
 8007098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800709a:	69fb      	ldr	r3, [r7, #28]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	460b      	mov	r3, r1
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80070b2:	4b70      	ldr	r3, [pc, #448]	; (8007274 <SDMMC_GetCmdResp1+0x1d0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a70      	ldr	r2, [pc, #448]	; (8007278 <SDMMC_GetCmdResp1+0x1d4>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	0a5a      	lsrs	r2, r3, #9
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	61fa      	str	r2, [r7, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070d4:	e0c9      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ef      	beq.n	80070c6 <SDMMC_GetCmdResp1+0x22>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1ea      	bne.n	80070c6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2204      	movs	r2, #4
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007102:	2304      	movs	r3, #4
 8007104:	e0b1      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d004      	beq.n	800711c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007118:	2301      	movs	r3, #1
 800711a:	e0a6      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	22c5      	movs	r2, #197	; 0xc5
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fd3d 	bl	8006ba2 <SDIO_GetCommandResponse>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	7afb      	ldrb	r3, [r7, #11]
 800712e:	4293      	cmp	r3, r2
 8007130:	d001      	beq.n	8007136 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007132:	2301      	movs	r3, #1
 8007134:	e099      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007136:	2100      	movs	r1, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fd3f 	bl	8006bbc <SDIO_GetResponse>
 800713e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4b4e      	ldr	r3, [pc, #312]	; (800727c <SDMMC_GetCmdResp1+0x1d8>)
 8007144:	4013      	ands	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800714a:	2300      	movs	r3, #0
 800714c:	e08d      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da02      	bge.n	800715a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007154:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007158:	e087      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	e080      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007172:	2380      	movs	r3, #128	; 0x80
 8007174:	e079      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007184:	e071      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007194:	e069      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80071a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071a4:	e061      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80071b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071b4:	e059      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80071c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071c4:	e051      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071d4:	e049      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80071e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071e4:	e041      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80071f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f4:	e039      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007204:	e031      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007210:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007214:	e029      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007220:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007224:	e021      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007230:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007234:	e019      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007244:	e011      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007250:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007254:	e009      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007260:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007264:	e001      	b.n	800726a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000004 	.word	0x20000004
 8007278:	10624dd3 	.word	0x10624dd3
 800727c:	fdffe008 	.word	0xfdffe008

08007280 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <SDMMC_GetCmdResp2+0x88>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <SDMMC_GetCmdResp2+0x8c>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	0a5b      	lsrs	r3, r3, #9
 8007294:	f241 3288 	movw	r2, #5000	; 0x1388
 8007298:	fb02 f303 	mul.w	r3, r2, r3
 800729c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1e5a      	subs	r2, r3, #1
 80072a2:	60fa      	str	r2, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072ac:	e026      	b.n	80072fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0ef      	beq.n	800729e <SDMMC_GetCmdResp2+0x1e>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1ea      	bne.n	800729e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2204      	movs	r2, #4
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072da:	2304      	movs	r3, #4
 80072dc:	e00e      	b.n	80072fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e003      	b.n	80072fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	22c5      	movs	r2, #197	; 0xc5
 80072f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	20000004 	.word	0x20000004
 800730c:	10624dd3 	.word	0x10624dd3

08007310 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007318:	4b1a      	ldr	r3, [pc, #104]	; (8007384 <SDMMC_GetCmdResp3+0x74>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a1a      	ldr	r2, [pc, #104]	; (8007388 <SDMMC_GetCmdResp3+0x78>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	0a5b      	lsrs	r3, r3, #9
 8007324:	f241 3288 	movw	r2, #5000	; 0x1388
 8007328:	fb02 f303 	mul.w	r3, r2, r3
 800732c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	60fa      	str	r2, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800733c:	e01b      	b.n	8007376 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ef      	beq.n	800732e <SDMMC_GetCmdResp3+0x1e>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1ea      	bne.n	800732e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2204      	movs	r2, #4
 8007368:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800736a:	2304      	movs	r3, #4
 800736c:	e003      	b.n	8007376 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	22c5      	movs	r2, #197	; 0xc5
 8007372:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000004 	.word	0x20000004
 8007388:	10624dd3 	.word	0x10624dd3

0800738c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	460b      	mov	r3, r1
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800739a:	4b35      	ldr	r3, [pc, #212]	; (8007470 <SDMMC_GetCmdResp6+0xe4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a35      	ldr	r2, [pc, #212]	; (8007474 <SDMMC_GetCmdResp6+0xe8>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	0a5b      	lsrs	r3, r3, #9
 80073a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
 80073ae:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	1e5a      	subs	r2, r3, #1
 80073b4:	61fa      	str	r2, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d102      	bne.n	80073c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073be:	e052      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ef      	beq.n	80073b0 <SDMMC_GetCmdResp6+0x24>
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1ea      	bne.n	80073b0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2204      	movs	r2, #4
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073ec:	2304      	movs	r3, #4
 80073ee:	e03a      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2201      	movs	r2, #1
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007402:	2301      	movs	r3, #1
 8007404:	e02f      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f7ff fbcb 	bl	8006ba2 <SDIO_GetCommandResponse>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	7afb      	ldrb	r3, [r7, #11]
 8007412:	4293      	cmp	r3, r2
 8007414:	d001      	beq.n	800741a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007416:	2301      	movs	r3, #1
 8007418:	e025      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	22c5      	movs	r2, #197	; 0xc5
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007420:	2100      	movs	r1, #0
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fbca 	bl	8006bbc <SDIO_GetResponse>
 8007428:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	0c1b      	lsrs	r3, r3, #16
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800743e:	2300      	movs	r3, #0
 8007440:	e011      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800744c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007450:	e009      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800745c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007460:	e001      	b.n	8007466 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000004 	.word	0x20000004
 8007474:	10624dd3 	.word	0x10624dd3

08007478 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007480:	4b22      	ldr	r3, [pc, #136]	; (800750c <SDMMC_GetCmdResp7+0x94>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a22      	ldr	r2, [pc, #136]	; (8007510 <SDMMC_GetCmdResp7+0x98>)
 8007486:	fba2 2303 	umull	r2, r3, r2, r3
 800748a:	0a5b      	lsrs	r3, r3, #9
 800748c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007490:	fb02 f303 	mul.w	r3, r2, r3
 8007494:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	1e5a      	subs	r2, r3, #1
 800749a:	60fa      	str	r2, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074a4:	e02c      	b.n	8007500 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0ef      	beq.n	8007496 <SDMMC_GetCmdResp7+0x1e>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ea      	bne.n	8007496 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d004      	beq.n	80074d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2204      	movs	r2, #4
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074d2:	2304      	movs	r3, #4
 80074d4:	e014      	b.n	8007500 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e009      	b.n	8007500 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2240      	movs	r2, #64	; 0x40
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074fe:	2300      	movs	r3, #0
  
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	20000004 	.word	0x20000004
 8007510:	10624dd3 	.word	0x10624dd3

08007514 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <SDMMC_GetCmdError+0x50>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a11      	ldr	r2, [pc, #68]	; (8007568 <SDMMC_GetCmdError+0x54>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	fb02 f303 	mul.w	r3, r2, r3
 8007530:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1e5a      	subs	r2, r3, #1
 8007536:	60fa      	str	r2, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d102      	bne.n	8007542 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800753c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007540:	e009      	b.n	8007556 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f1      	beq.n	8007532 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	22c5      	movs	r2, #197	; 0xc5
 8007552:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000004 	.word	0x20000004
 8007568:	10624dd3 	.word	0x10624dd3

0800756c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007570:	4904      	ldr	r1, [pc, #16]	; (8007584 <MX_FATFS_Init+0x18>)
 8007572:	4805      	ldr	r0, [pc, #20]	; (8007588 <MX_FATFS_Init+0x1c>)
 8007574:	f002 ffe4 	bl	800a540 <FATFS_LinkDriver>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	4b03      	ldr	r3, [pc, #12]	; (800758c <MX_FATFS_Init+0x20>)
 800757e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007580:	bf00      	nop
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000b44 	.word	0x20000b44
 8007588:	0800af60 	.word	0x0800af60
 800758c:	20000b40 	.word	0x20000b40

08007590 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007594:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007596:	4618      	mov	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80075aa:	f000 f8ac 	bl	8007706 <BSP_SD_IsDetected>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d001      	beq.n	80075b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e012      	b.n	80075de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80075b8:	480b      	ldr	r0, [pc, #44]	; (80075e8 <BSP_SD_Init+0x48>)
 80075ba:	f7fc fed3 	bl	8004364 <HAL_SD_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d109      	bne.n	80075dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80075c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075cc:	4806      	ldr	r0, [pc, #24]	; (80075e8 <BSP_SD_Init+0x48>)
 80075ce:	f7fd fe2d 	bl	800522c <HAL_SD_ConfigWideBusOperation>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80075dc:	79fb      	ldrb	r3, [r7, #7]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000140 	.word	0x20000140

080075ec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b088      	sub	sp, #32
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	4806      	ldr	r0, [pc, #24]	; (8007624 <BSP_SD_ReadBlocks+0x38>)
 800760a:	f7fc ff5b 	bl	80044c4 <HAL_SD_ReadBlocks>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000140 	.word	0x20000140

08007628 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	68f9      	ldr	r1, [r7, #12]
 8007644:	4806      	ldr	r0, [pc, #24]	; (8007660 <BSP_SD_WriteBlocks+0x38>)
 8007646:	f7fd f91b 	bl	8004880 <HAL_SD_WriteBlocks>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007654:	7dfb      	ldrb	r3, [r7, #23]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000140 	.word	0x20000140

08007664 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <BSP_SD_GetCardState+0x1c>)
 800766a:	f7fd fe79 	bl	8005360 <HAL_SD_GetCardState>
 800766e:	4603      	mov	r3, r0
 8007670:	2b04      	cmp	r3, #4
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
}
 800767a:	4618      	mov	r0, r3
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20000140 	.word	0x20000140

08007684 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800768c:	6879      	ldr	r1, [r7, #4]
 800768e:	4803      	ldr	r0, [pc, #12]	; (800769c <BSP_SD_GetCardInfo+0x18>)
 8007690:	f7fd fda0 	bl	80051d4 <HAL_SD_GetCardInfo>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000140 	.word	0x20000140

080076a0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80076a8:	f000 f818 	bl	80076dc <BSP_SD_AbortCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80076bc:	f000 f815 	bl	80076ea <BSP_SD_WriteCpltCallback>
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80076d0:	f000 f812 	bl	80076f8 <BSP_SD_ReadCpltCallback>
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0

}
 80076e0:	bf00      	nop
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80076ea:	b480      	push	{r7}
 80076ec:	af00      	add	r7, sp, #0

}
 80076ee:	bf00      	nop
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0

}
 80076fc:	bf00      	nop
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800770c:	2301      	movs	r3, #1
 800770e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007710:	f000 f80c 	bl	800772c <BSP_PlatformIsDetected>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800771a:	2300      	movs	r3, #0
 800771c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	b2db      	uxtb	r3, r3
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007732:	2301      	movs	r3, #1
 8007734:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800773a:	4806      	ldr	r0, [pc, #24]	; (8007754 <BSP_PlatformIsDetected+0x28>)
 800773c:	f7fa fe6a 	bl	8002414 <HAL_GPIO_ReadPin>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007746:	2300      	movs	r3, #0
 8007748:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800774a:	79fb      	ldrb	r3, [r7, #7]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40020400 	.word	0x40020400

08007758 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <SD_CheckStatus+0x38>)
 8007764:	2201      	movs	r2, #1
 8007766:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007768:	f7ff ff7c 	bl	8007664 <BSP_SD_GetCardState>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <SD_CheckStatus+0x38>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f023 0301 	bic.w	r3, r3, #1
 800777c:	b2da      	uxtb	r2, r3
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <SD_CheckStatus+0x38>)
 8007780:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007782:	4b03      	ldr	r3, [pc, #12]	; (8007790 <SD_CheckStatus+0x38>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	2000000d 	.word	0x2000000d

08007794 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <SD_initialize+0x38>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80077a4:	f7ff fefc 	bl	80075a0 <BSP_SD_Init>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d107      	bne.n	80077be <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff ffd1 	bl	8007758 <SD_CheckStatus>
 80077b6:	4603      	mov	r3, r0
 80077b8:	461a      	mov	r2, r3
 80077ba:	4b04      	ldr	r3, [pc, #16]	; (80077cc <SD_initialize+0x38>)
 80077bc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80077be:	4b03      	ldr	r3, [pc, #12]	; (80077cc <SD_initialize+0x38>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	b2db      	uxtb	r3, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	2000000d 	.word	0x2000000d

080077d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff ffbb 	bl	8007758 <SD_CheckStatus>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	68b8      	ldr	r0, [r7, #8]
 800780a:	f7ff feef 	bl	80075ec <BSP_SD_ReadBlocks>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007814:	bf00      	nop
 8007816:	f7ff ff25 	bl	8007664 <BSP_SD_GetCardState>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1fa      	bne.n	8007816 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007824:	7dfb      	ldrb	r3, [r7, #23]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	68b8      	ldr	r0, [r7, #8]
 800784c:	f7ff feec 	bl	8007628 <BSP_SD_WriteBlocks>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007856:	bf00      	nop
 8007858:	f7ff ff04 	bl	8007664 <BSP_SD_GetCardState>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1fa      	bne.n	8007858 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007866:	7dfb      	ldrb	r3, [r7, #23]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08c      	sub	sp, #48	; 0x30
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	603a      	str	r2, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
 800787c:	460b      	mov	r3, r1
 800787e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007886:	4b25      	ldr	r3, [pc, #148]	; (800791c <SD_ioctl+0xac>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_ioctl+0x28>
 8007894:	2303      	movs	r3, #3
 8007896:	e03c      	b.n	8007912 <SD_ioctl+0xa2>

  switch (cmd)
 8007898:	79bb      	ldrb	r3, [r7, #6]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d834      	bhi.n	8007908 <SD_ioctl+0x98>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <SD_ioctl+0x34>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078bd 	.word	0x080078bd
 80078ac:	080078d5 	.word	0x080078d5
 80078b0:	080078ef 	.word	0x080078ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80078ba:	e028      	b.n	800790e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fedf 	bl	8007684 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80078c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80078d2:	e01c      	b.n	800790e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fed3 	bl	8007684 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80078ec:	e00f      	b.n	800790e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80078ee:	f107 030c 	add.w	r3, r7, #12
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff fec6 	bl	8007684 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80078f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fa:	0a5a      	lsrs	r2, r3, #9
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007906:	e002      	b.n	800790e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007908:	2304      	movs	r3, #4
 800790a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800790e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007912:	4618      	mov	r0, r3
 8007914:	3730      	adds	r7, #48	; 0x30
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	2000000d 	.word	0x2000000d

08007920 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	4a08      	ldr	r2, [pc, #32]	; (8007950 <disk_status+0x30>)
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	79fa      	ldrb	r2, [r7, #7]
 8007938:	4905      	ldr	r1, [pc, #20]	; (8007950 <disk_status+0x30>)
 800793a:	440a      	add	r2, r1
 800793c:	7a12      	ldrb	r2, [r2, #8]
 800793e:	4610      	mov	r0, r2
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000da0 	.word	0x20000da0

08007954 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	4a0d      	ldr	r2, [pc, #52]	; (800799c <disk_initialize+0x48>)
 8007966:	5cd3      	ldrb	r3, [r2, r3]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d111      	bne.n	8007990 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	4a0b      	ldr	r2, [pc, #44]	; (800799c <disk_initialize+0x48>)
 8007970:	2101      	movs	r1, #1
 8007972:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	4a09      	ldr	r2, [pc, #36]	; (800799c <disk_initialize+0x48>)
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	79fa      	ldrb	r2, [r7, #7]
 8007982:	4906      	ldr	r1, [pc, #24]	; (800799c <disk_initialize+0x48>)
 8007984:	440a      	add	r2, r1
 8007986:	7a12      	ldrb	r2, [r2, #8]
 8007988:	4610      	mov	r0, r2
 800798a:	4798      	blx	r3
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000da0 	.word	0x20000da0

080079a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	4a0a      	ldr	r2, [pc, #40]	; (80079dc <disk_read+0x3c>)
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	689c      	ldr	r4, [r3, #8]
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	4a07      	ldr	r2, [pc, #28]	; (80079dc <disk_read+0x3c>)
 80079c0:	4413      	add	r3, r2
 80079c2:	7a18      	ldrb	r0, [r3, #8]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	47a0      	blx	r4
 80079cc:	4603      	mov	r3, r0
 80079ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd90      	pop	{r4, r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000da0 	.word	0x20000da0

080079e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	4a0a      	ldr	r2, [pc, #40]	; (8007a1c <disk_write+0x3c>)
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	68dc      	ldr	r4, [r3, #12]
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4a07      	ldr	r2, [pc, #28]	; (8007a1c <disk_write+0x3c>)
 8007a00:	4413      	add	r3, r2
 8007a02:	7a18      	ldrb	r0, [r3, #8]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	47a0      	blx	r4
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd90      	pop	{r4, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000da0 	.word	0x20000da0

08007a20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	603a      	str	r2, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <disk_ioctl+0x38>)
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	79fa      	ldrb	r2, [r7, #7]
 8007a3e:	4906      	ldr	r1, [pc, #24]	; (8007a58 <disk_ioctl+0x38>)
 8007a40:	440a      	add	r2, r1
 8007a42:	7a10      	ldrb	r0, [r2, #8]
 8007a44:	79b9      	ldrb	r1, [r7, #6]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4798      	blx	r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000da0 	.word	0x20000da0

08007a5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3301      	adds	r3, #1
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007a6c:	89fb      	ldrh	r3, [r7, #14]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	b21a      	sxth	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b21b      	sxth	r3, r3
 8007a7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3303      	adds	r3, #3
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	021b      	lsls	r3, r3, #8
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	3202      	adds	r2, #2
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	887a      	ldrh	r2, [r7, #2]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	887b      	ldrh	r3, [r7, #2]
 8007aec:	0a1b      	lsrs	r3, r3, #8
 8007aee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	887a      	ldrh	r2, [r7, #2]
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	701a      	strb	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	0a1b      	lsrs	r3, r3, #8
 8007b22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	607a      	str	r2, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	0a1b      	lsrs	r3, r3, #8
 8007b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	b2d2      	uxtb	r2, r2
 8007b52:	701a      	strb	r2, [r3, #0]
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00d      	beq.n	8007b96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	1c53      	adds	r3, r2, #1
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1c59      	adds	r1, r3, #1
 8007b84:	6179      	str	r1, [r7, #20]
 8007b86:	7812      	ldrb	r2, [r2, #0]
 8007b88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1f1      	bne.n	8007b7a <mem_cpy+0x1a>
	}
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007ba2:	b480      	push	{r7}
 8007ba4:	b087      	sub	sp, #28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	60f8      	str	r0, [r7, #12]
 8007baa:	60b9      	str	r1, [r7, #8]
 8007bac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	617a      	str	r2, [r7, #20]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f3      	bne.n	8007bb2 <mem_set+0x10>
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007bd8:	b480      	push	{r7}
 8007bda:	b089      	sub	sp, #36	; 0x24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	61fa      	str	r2, [r7, #28]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	61ba      	str	r2, [r7, #24]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	1acb      	subs	r3, r1, r3
 8007c04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	607b      	str	r3, [r7, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <mem_cmp+0x40>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0eb      	beq.n	8007bf0 <mem_cmp+0x18>

	return r;
 8007c18:	697b      	ldr	r3, [r7, #20]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3724      	adds	r7, #36	; 0x24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007c30:	e002      	b.n	8007c38 <chk_chr+0x12>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3301      	adds	r3, #1
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <chk_chr+0x26>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d1f2      	bne.n	8007c32 <chk_chr+0xc>
	return *str;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e029      	b.n	8007cc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007c70:	4a27      	ldr	r2, [pc, #156]	; (8007d10 <chk_lock+0xb4>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	4413      	add	r3, r2
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01d      	beq.n	8007cba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c7e:	4a24      	ldr	r2, [pc, #144]	; (8007d10 <chk_lock+0xb4>)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	4413      	add	r3, r2
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d116      	bne.n	8007cbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007c90:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <chk_lock+0xb4>)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	4413      	add	r3, r2
 8007c98:	3304      	adds	r3, #4
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d10c      	bne.n	8007cbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <chk_lock+0xb4>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	4413      	add	r3, r2
 8007cac:	3308      	adds	r3, #8
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d102      	bne.n	8007cbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007cb8:	e007      	b.n	8007cca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d9d2      	bls.n	8007c70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d109      	bne.n	8007ce4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <chk_lock+0x80>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d101      	bne.n	8007ce0 <chk_lock+0x84>
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e010      	b.n	8007d02 <chk_lock+0xa6>
 8007ce0:	2312      	movs	r3, #18
 8007ce2:	e00e      	b.n	8007d02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d108      	bne.n	8007cfc <chk_lock+0xa0>
 8007cea:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <chk_lock+0xb4>)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	4413      	add	r3, r2
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cfa:	d101      	bne.n	8007d00 <chk_lock+0xa4>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	e000      	b.n	8007d02 <chk_lock+0xa6>
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000d80 	.word	0x20000d80

08007d14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	e002      	b.n	8007d26 <enq_lock+0x12>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3301      	adds	r3, #1
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d806      	bhi.n	8007d3a <enq_lock+0x26>
 8007d2c:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <enq_lock+0x40>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	4413      	add	r3, r2
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1f2      	bne.n	8007d20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	bf14      	ite	ne
 8007d40:	2301      	movne	r3, #1
 8007d42:	2300      	moveq	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000d80 	.word	0x20000d80

08007d58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e01f      	b.n	8007da8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007d68:	4a41      	ldr	r2, [pc, #260]	; (8007e70 <inc_lock+0x118>)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	4413      	add	r3, r2
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d113      	bne.n	8007da2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007d7a:	4a3d      	ldr	r2, [pc, #244]	; (8007e70 <inc_lock+0x118>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	4413      	add	r3, r2
 8007d82:	3304      	adds	r3, #4
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d109      	bne.n	8007da2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007d8e:	4a38      	ldr	r2, [pc, #224]	; (8007e70 <inc_lock+0x118>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	3308      	adds	r3, #8
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d006      	beq.n	8007db0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d9dc      	bls.n	8007d68 <inc_lock+0x10>
 8007dae:	e000      	b.n	8007db2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007db0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d132      	bne.n	8007e1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e002      	b.n	8007dc4 <inc_lock+0x6c>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d806      	bhi.n	8007dd8 <inc_lock+0x80>
 8007dca:	4a29      	ldr	r2, [pc, #164]	; (8007e70 <inc_lock+0x118>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	4413      	add	r3, r2
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1f2      	bne.n	8007dbe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d101      	bne.n	8007de2 <inc_lock+0x8a>
 8007dde:	2300      	movs	r3, #0
 8007de0:	e040      	b.n	8007e64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	4922      	ldr	r1, [pc, #136]	; (8007e70 <inc_lock+0x118>)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	440b      	add	r3, r1
 8007dee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	491e      	ldr	r1, [pc, #120]	; (8007e70 <inc_lock+0x118>)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	491a      	ldr	r1, [pc, #104]	; (8007e70 <inc_lock+0x118>)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	440b      	add	r3, r1
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007e10:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <inc_lock+0x118>)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4413      	add	r3, r2
 8007e18:	330c      	adds	r3, #12
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d009      	beq.n	8007e38 <inc_lock+0xe0>
 8007e24:	4a12      	ldr	r2, [pc, #72]	; (8007e70 <inc_lock+0x118>)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <inc_lock+0xe0>
 8007e34:	2300      	movs	r3, #0
 8007e36:	e015      	b.n	8007e64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d108      	bne.n	8007e50 <inc_lock+0xf8>
 8007e3e:	4a0c      	ldr	r2, [pc, #48]	; (8007e70 <inc_lock+0x118>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	4413      	add	r3, r2
 8007e46:	330c      	adds	r3, #12
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	e001      	b.n	8007e54 <inc_lock+0xfc>
 8007e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e54:	4906      	ldr	r1, [pc, #24]	; (8007e70 <inc_lock+0x118>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	440b      	add	r3, r1
 8007e5c:	330c      	adds	r3, #12
 8007e5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000d80 	.word	0x20000d80

08007e74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d825      	bhi.n	8007ed4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007e88:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <dec_lock+0x74>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	4413      	add	r3, r2
 8007e90:	330c      	adds	r3, #12
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007e96:	89fb      	ldrh	r3, [r7, #14]
 8007e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9c:	d101      	bne.n	8007ea2 <dec_lock+0x2e>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007ea2:	89fb      	ldrh	r3, [r7, #14]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <dec_lock+0x3a>
 8007ea8:	89fb      	ldrh	r3, [r7, #14]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007eae:	4a0e      	ldr	r2, [pc, #56]	; (8007ee8 <dec_lock+0x74>)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	89fa      	ldrh	r2, [r7, #14]
 8007eba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <dec_lock+0x5a>
 8007ec2:	4a09      	ldr	r2, [pc, #36]	; (8007ee8 <dec_lock+0x74>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	4413      	add	r3, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	737b      	strb	r3, [r7, #13]
 8007ed2:	e001      	b.n	8007ed8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ed8:	7b7b      	ldrb	r3, [r7, #13]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000d80 	.word	0x20000d80

08007eec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e010      	b.n	8007f1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007efa:	4a0d      	ldr	r2, [pc, #52]	; (8007f30 <clear_lock+0x44>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	4413      	add	r3, r2
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d105      	bne.n	8007f16 <clear_lock+0x2a>
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <clear_lock+0x44>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	4413      	add	r3, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d9eb      	bls.n	8007efa <clear_lock+0xe>
	}
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20000d80 	.word	0x20000d80

08007f34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	78db      	ldrb	r3, [r3, #3]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d034      	beq.n	8007fb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7858      	ldrb	r0, [r3, #1]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f58:	2301      	movs	r3, #1
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	f7ff fd40 	bl	80079e0 <disk_write>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	e022      	b.n	8007fb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	1ad2      	subs	r2, r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d217      	bcs.n	8007fb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	789b      	ldrb	r3, [r3, #2]
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e010      	b.n	8007fac <sync_window+0x78>
					wsect += fs->fsize;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7858      	ldrb	r0, [r3, #1]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	f7ff fd1d 	bl	80079e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d8eb      	bhi.n	8007f8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d01b      	beq.n	800800c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ffad 	bl	8007f34 <sync_window>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d113      	bne.n	800800c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	7858      	ldrb	r0, [r3, #1]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fee:	2301      	movs	r3, #1
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	f7ff fcd5 	bl	80079a0 <disk_read>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008000:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008002:	2301      	movs	r3, #1
 8008004:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff ff87 	bl	8007f34 <sync_window>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d158      	bne.n	80080e2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d148      	bne.n	80080ca <sync_fs+0xb2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	791b      	ldrb	r3, [r3, #4]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d144      	bne.n	80080ca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3330      	adds	r3, #48	; 0x30
 8008044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fda9 	bl	8007ba2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3330      	adds	r3, #48	; 0x30
 8008054:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008058:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fd38 	bl	8007ad2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3330      	adds	r3, #48	; 0x30
 8008066:	4921      	ldr	r1, [pc, #132]	; (80080ec <sync_fs+0xd4>)
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff fd4d 	bl	8007b08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3330      	adds	r3, #48	; 0x30
 8008072:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008076:	491e      	ldr	r1, [pc, #120]	; (80080f0 <sync_fs+0xd8>)
 8008078:	4618      	mov	r0, r3
 800807a:	f7ff fd45 	bl	8007b08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3330      	adds	r3, #48	; 0x30
 8008082:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f7ff fd3b 	bl	8007b08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3330      	adds	r3, #48	; 0x30
 8008096:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7ff fd31 	bl	8007b08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	7858      	ldrb	r0, [r3, #1]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	2301      	movs	r3, #1
 80080c0:	f7ff fc8e 	bl	80079e0 <disk_write>
			fs->fsi_flag = 0;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fca4 	bl	8007a20 <disk_ioctl>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <sync_fs+0xca>
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	41615252 	.word	0x41615252
 80080f0:	61417272 	.word	0x61417272

080080f4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	3b02      	subs	r3, #2
 8008102:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	3b02      	subs	r3, #2
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d301      	bcc.n	8008114 <clust2sect+0x20>
 8008110:	2300      	movs	r3, #0
 8008112:	e008      	b.n	8008126 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	895b      	ldrh	r3, [r3, #10]
 8008118:	461a      	mov	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	fb03 f202 	mul.w	r2, r3, r2
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	4413      	add	r3, r2
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b086      	sub	sp, #24
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d904      	bls.n	8008152 <get_fat+0x20>
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d302      	bcc.n	8008158 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008152:	2301      	movs	r3, #1
 8008154:	617b      	str	r3, [r7, #20]
 8008156:	e08f      	b.n	8008278 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b03      	cmp	r3, #3
 8008164:	d062      	beq.n	800822c <get_fat+0xfa>
 8008166:	2b03      	cmp	r3, #3
 8008168:	dc7c      	bgt.n	8008264 <get_fat+0x132>
 800816a:	2b01      	cmp	r3, #1
 800816c:	d002      	beq.n	8008174 <get_fat+0x42>
 800816e:	2b02      	cmp	r3, #2
 8008170:	d042      	beq.n	80081f8 <get_fat+0xc6>
 8008172:	e077      	b.n	8008264 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6a1a      	ldr	r2, [r3, #32]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	0a5b      	lsrs	r3, r3, #9
 800818a:	4413      	add	r3, r2
 800818c:	4619      	mov	r1, r3
 800818e:	6938      	ldr	r0, [r7, #16]
 8008190:	f7ff ff14 	bl	8007fbc <move_window>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d167      	bne.n	800826a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	60fa      	str	r2, [r7, #12]
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4413      	add	r3, r2
 80081a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6a1a      	ldr	r2, [r3, #32]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	0a5b      	lsrs	r3, r3, #9
 80081b6:	4413      	add	r3, r2
 80081b8:	4619      	mov	r1, r3
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f7ff fefe 	bl	8007fbc <move_window>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d153      	bne.n	800826e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4413      	add	r3, r2
 80081d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	461a      	mov	r2, r3
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <get_fat+0xbc>
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	e002      	b.n	80081f4 <get_fat+0xc2>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f4:	617b      	str	r3, [r7, #20]
			break;
 80081f6:	e03f      	b.n	8008278 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	4413      	add	r3, r2
 8008202:	4619      	mov	r1, r3
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f7ff fed9 	bl	8007fbc <move_window>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d130      	bne.n	8008272 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800821e:	4413      	add	r3, r2
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fc1b 	bl	8007a5c <ld_word>
 8008226:	4603      	mov	r3, r0
 8008228:	617b      	str	r3, [r7, #20]
			break;
 800822a:	e025      	b.n	8008278 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	6a1a      	ldr	r2, [r3, #32]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	09db      	lsrs	r3, r3, #7
 8008234:	4413      	add	r3, r2
 8008236:	4619      	mov	r1, r3
 8008238:	6938      	ldr	r0, [r7, #16]
 800823a:	f7ff febf 	bl	8007fbc <move_window>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d118      	bne.n	8008276 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008252:	4413      	add	r3, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fc19 	bl	8007a8c <ld_dword>
 800825a:	4603      	mov	r3, r0
 800825c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008260:	617b      	str	r3, [r7, #20]
			break;
 8008262:	e009      	b.n	8008278 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008264:	2301      	movs	r3, #1
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	e006      	b.n	8008278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800826a:	bf00      	nop
 800826c:	e004      	b.n	8008278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800826e:	bf00      	nop
 8008270:	e002      	b.n	8008278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008272:	bf00      	nop
 8008274:	e000      	b.n	8008278 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008276:	bf00      	nop
		}
	}

	return val;
 8008278:	697b      	ldr	r3, [r7, #20]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008282:	b590      	push	{r4, r7, lr}
 8008284:	b089      	sub	sp, #36	; 0x24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800828e:	2302      	movs	r3, #2
 8008290:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b01      	cmp	r3, #1
 8008296:	f240 80d2 	bls.w	800843e <put_fat+0x1bc>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	f080 80cc 	bcs.w	800843e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	f000 8096 	beq.w	80083dc <put_fat+0x15a>
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	f300 80cd 	bgt.w	8008450 <put_fat+0x1ce>
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d002      	beq.n	80082c0 <put_fat+0x3e>
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d06e      	beq.n	800839c <put_fat+0x11a>
 80082be:	e0c7      	b.n	8008450 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	4413      	add	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1a      	ldr	r2, [r3, #32]
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	0a5b      	lsrs	r3, r3, #9
 80082d6:	4413      	add	r3, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fe6e 	bl	8007fbc <move_window>
 80082e0:	4603      	mov	r3, r0
 80082e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082e4:	7ffb      	ldrb	r3, [r7, #31]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 80ab 	bne.w	8008442 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	1c59      	adds	r1, r3, #1
 80082f6:	61b9      	str	r1, [r7, #24]
 80082f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fc:	4413      	add	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00d      	beq.n	8008326 <put_fat+0xa4>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b25b      	sxtb	r3, r3
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	b25a      	sxtb	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	b25b      	sxtb	r3, r3
 800831e:	4313      	orrs	r3, r2
 8008320:	b25b      	sxtb	r3, r3
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e001      	b.n	800832a <put_fat+0xa8>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	b2db      	uxtb	r3, r3
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	0a5b      	lsrs	r3, r3, #9
 800833c:	4413      	add	r3, r2
 800833e:	4619      	mov	r1, r3
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fe3b 	bl	8007fbc <move_window>
 8008346:	4603      	mov	r3, r0
 8008348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800834a:	7ffb      	ldrb	r3, [r7, #31]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d17a      	bne.n	8008446 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835c:	4413      	add	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <put_fat+0xf0>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	091b      	lsrs	r3, r3, #4
 800836e:	b2db      	uxtb	r3, r3
 8008370:	e00e      	b.n	8008390 <put_fat+0x10e>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b25b      	sxtb	r3, r3
 8008378:	f023 030f 	bic.w	r3, r3, #15
 800837c:	b25a      	sxtb	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	b25b      	sxtb	r3, r3
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	b25b      	sxtb	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b25b      	sxtb	r3, r3
 800838e:	b2db      	uxtb	r3, r3
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	70da      	strb	r2, [r3, #3]
			break;
 800839a:	e059      	b.n	8008450 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a1a      	ldr	r2, [r3, #32]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	4413      	add	r3, r2
 80083a6:	4619      	mov	r1, r3
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fe07 	bl	8007fbc <move_window>
 80083ae:	4603      	mov	r3, r0
 80083b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083b2:	7ffb      	ldrb	r3, [r7, #31]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d148      	bne.n	800844a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	005b      	lsls	r3, r3, #1
 80083c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80083c6:	4413      	add	r3, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	b292      	uxth	r2, r2
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fb7f 	bl	8007ad2 <st_word>
			fs->wflag = 1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2201      	movs	r2, #1
 80083d8:	70da      	strb	r2, [r3, #3]
			break;
 80083da:	e039      	b.n	8008450 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1a      	ldr	r2, [r3, #32]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	09db      	lsrs	r3, r3, #7
 80083e4:	4413      	add	r3, r2
 80083e6:	4619      	mov	r1, r3
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fde7 	bl	8007fbc <move_window>
 80083ee:	4603      	mov	r3, r0
 80083f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083f2:	7ffb      	ldrb	r3, [r7, #31]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d12a      	bne.n	800844e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800840c:	4413      	add	r3, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fb3c 	bl	8007a8c <ld_dword>
 8008414:	4603      	mov	r3, r0
 8008416:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800841a:	4323      	orrs	r3, r4
 800841c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800842c:	4413      	add	r3, r2
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fb69 	bl	8007b08 <st_dword>
			fs->wflag = 1;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	70da      	strb	r2, [r3, #3]
			break;
 800843c:	e008      	b.n	8008450 <put_fat+0x1ce>
		}
	}
 800843e:	bf00      	nop
 8008440:	e006      	b.n	8008450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008442:	bf00      	nop
 8008444:	e004      	b.n	8008450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008446:	bf00      	nop
 8008448:	e002      	b.n	8008450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800844a:	bf00      	nop
 800844c:	e000      	b.n	8008450 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800844e:	bf00      	nop
	return res;
 8008450:	7ffb      	ldrb	r3, [r7, #31]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}

0800845a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b088      	sub	sp, #32
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d904      	bls.n	8008480 <remove_chain+0x26>
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	695b      	ldr	r3, [r3, #20]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	429a      	cmp	r2, r3
 800847e:	d301      	bcc.n	8008484 <remove_chain+0x2a>
 8008480:	2302      	movs	r3, #2
 8008482:	e04b      	b.n	800851c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800848a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	69b8      	ldr	r0, [r7, #24]
 8008492:	f7ff fef6 	bl	8008282 <put_fat>
 8008496:	4603      	mov	r3, r0
 8008498:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800849a:	7ffb      	ldrb	r3, [r7, #31]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <remove_chain+0x4a>
 80084a0:	7ffb      	ldrb	r3, [r7, #31]
 80084a2:	e03b      	b.n	800851c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff fe43 	bl	8008132 <get_fat>
 80084ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d031      	beq.n	8008518 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d101      	bne.n	80084be <remove_chain+0x64>
 80084ba:	2302      	movs	r3, #2
 80084bc:	e02e      	b.n	800851c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d101      	bne.n	80084ca <remove_chain+0x70>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e028      	b.n	800851c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084ca:	2200      	movs	r2, #0
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	69b8      	ldr	r0, [r7, #24]
 80084d0:	f7ff fed7 	bl	8008282 <put_fat>
 80084d4:	4603      	mov	r3, r0
 80084d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084d8:	7ffb      	ldrb	r3, [r7, #31]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <remove_chain+0x88>
 80084de:	7ffb      	ldrb	r3, [r7, #31]
 80084e0:	e01c      	b.n	800851c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	691a      	ldr	r2, [r3, #16]
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	3b02      	subs	r3, #2
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d20b      	bcs.n	8008508 <remove_chain+0xae>
			fs->free_clst++;
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	f043 0301 	orr.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	d3c6      	bcc.n	80084a4 <remove_chain+0x4a>
 8008516:	e000      	b.n	800851a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008518:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10d      	bne.n	8008556 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d004      	beq.n	8008550 <create_chain+0x2c>
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d31b      	bcc.n	8008588 <create_chain+0x64>
 8008550:	2301      	movs	r3, #1
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e018      	b.n	8008588 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff fdea 	bl	8008132 <get_fat>
 800855e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d801      	bhi.n	800856a <create_chain+0x46>
 8008566:	2301      	movs	r3, #1
 8008568:	e070      	b.n	800864c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008570:	d101      	bne.n	8008576 <create_chain+0x52>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	e06a      	b.n	800864c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d201      	bcs.n	8008584 <create_chain+0x60>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	e063      	b.n	800864c <create_chain+0x128>
		scl = clst;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	429a      	cmp	r2, r3
 800859a:	d307      	bcc.n	80085ac <create_chain+0x88>
				ncl = 2;
 800859c:	2302      	movs	r3, #2
 800859e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d901      	bls.n	80085ac <create_chain+0x88>
 80085a8:	2300      	movs	r3, #0
 80085aa:	e04f      	b.n	800864c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fdbf 	bl	8008132 <get_fat>
 80085b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00e      	beq.n	80085da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d003      	beq.n	80085ca <create_chain+0xa6>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c8:	d101      	bne.n	80085ce <create_chain+0xaa>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	e03e      	b.n	800864c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d1da      	bne.n	800858c <create_chain+0x68>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e038      	b.n	800864c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80085da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085e0:	69f9      	ldr	r1, [r7, #28]
 80085e2:	6938      	ldr	r0, [r7, #16]
 80085e4:	f7ff fe4d 	bl	8008282 <put_fat>
 80085e8:	4603      	mov	r3, r0
 80085ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80085ec:	7dfb      	ldrb	r3, [r7, #23]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <create_chain+0xe2>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d006      	beq.n	8008606 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6938      	ldr	r0, [r7, #16]
 80085fe:	f7ff fe40 	bl	8008282 <put_fat>
 8008602:	4603      	mov	r3, r0
 8008604:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d116      	bne.n	800863a <create_chain+0x116>
		fs->last_clst = ncl;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	691a      	ldr	r2, [r3, #16]
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	3b02      	subs	r3, #2
 800861c:	429a      	cmp	r2, r3
 800861e:	d804      	bhi.n	800862a <create_chain+0x106>
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	1e5a      	subs	r2, r3, #1
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	f043 0301 	orr.w	r3, r3, #1
 8008632:	b2da      	uxtb	r2, r3
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	711a      	strb	r2, [r3, #4]
 8008638:	e007      	b.n	800864a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d102      	bne.n	8008646 <create_chain+0x122>
 8008640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008644:	e000      	b.n	8008648 <create_chain+0x124>
 8008646:	2301      	movs	r3, #1
 8008648:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800864a:	69fb      	ldr	r3, [r7, #28]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3720      	adds	r7, #32
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	3304      	adds	r3, #4
 800866a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	0a5b      	lsrs	r3, r3, #9
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	8952      	ldrh	r2, [r2, #10]
 8008674:	fbb3 f3f2 	udiv	r3, r3, r2
 8008678:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1d1a      	adds	r2, r3, #4
 800867e:	613a      	str	r2, [r7, #16]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <clmt_clust+0x3a>
 800868a:	2300      	movs	r3, #0
 800868c:	e010      	b.n	80086b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	429a      	cmp	r2, r3
 8008694:	d307      	bcc.n	80086a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3304      	adds	r3, #4
 80086a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086a4:	e7e9      	b.n	800867a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80086a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4413      	add	r3, r2
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086d2:	d204      	bcs.n	80086de <dir_sdi+0x22>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80086de:	2302      	movs	r3, #2
 80086e0:	e063      	b.n	80087aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d106      	bne.n	8008702 <dir_sdi+0x46>
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d902      	bls.n	8008702 <dir_sdi+0x46>
		clst = fs->dirbase;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10c      	bne.n	8008722 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	095b      	lsrs	r3, r3, #5
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	8912      	ldrh	r2, [r2, #8]
 8008710:	4293      	cmp	r3, r2
 8008712:	d301      	bcc.n	8008718 <dir_sdi+0x5c>
 8008714:	2302      	movs	r3, #2
 8008716:	e048      	b.n	80087aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	61da      	str	r2, [r3, #28]
 8008720:	e029      	b.n	8008776 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	895b      	ldrh	r3, [r3, #10]
 8008726:	025b      	lsls	r3, r3, #9
 8008728:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800872a:	e019      	b.n	8008760 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6979      	ldr	r1, [r7, #20]
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fcfe 	bl	8008132 <get_fat>
 8008736:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d101      	bne.n	8008744 <dir_sdi+0x88>
 8008740:	2301      	movs	r3, #1
 8008742:	e032      	b.n	80087aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d904      	bls.n	8008754 <dir_sdi+0x98>
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	429a      	cmp	r2, r3
 8008752:	d301      	bcc.n	8008758 <dir_sdi+0x9c>
 8008754:	2302      	movs	r3, #2
 8008756:	e028      	b.n	80087aa <dir_sdi+0xee>
			ofs -= csz;
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	429a      	cmp	r2, r3
 8008766:	d2e1      	bcs.n	800872c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008768:	6979      	ldr	r1, [r7, #20]
 800876a:	6938      	ldr	r0, [r7, #16]
 800876c:	f7ff fcc2 	bl	80080f4 <clust2sect>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <dir_sdi+0xcc>
 8008784:	2302      	movs	r3, #2
 8008786:	e010      	b.n	80087aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	0a5b      	lsrs	r3, r3, #9
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	441a      	add	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	3320      	adds	r3, #32
 80087c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <dir_next+0x28>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087d8:	d301      	bcc.n	80087de <dir_next+0x2c>
 80087da:	2304      	movs	r3, #4
 80087dc:	e0aa      	b.n	8008934 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f040 8098 	bne.w	800891a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	8912      	ldrh	r2, [r2, #8]
 8008804:	4293      	cmp	r3, r2
 8008806:	f0c0 8088 	bcc.w	800891a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	61da      	str	r2, [r3, #28]
 8008810:	2304      	movs	r3, #4
 8008812:	e08f      	b.n	8008934 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	0a5b      	lsrs	r3, r3, #9
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	8952      	ldrh	r2, [r2, #10]
 800881c:	3a01      	subs	r2, #1
 800881e:	4013      	ands	r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d17a      	bne.n	800891a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	4619      	mov	r1, r3
 800882c:	4610      	mov	r0, r2
 800882e:	f7ff fc80 	bl	8008132 <get_fat>
 8008832:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d801      	bhi.n	800883e <dir_next+0x8c>
 800883a:	2302      	movs	r3, #2
 800883c:	e07a      	b.n	8008934 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008844:	d101      	bne.n	800884a <dir_next+0x98>
 8008846:	2301      	movs	r3, #1
 8008848:	e074      	b.n	8008934 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	429a      	cmp	r2, r3
 8008852:	d358      	bcc.n	8008906 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	61da      	str	r2, [r3, #28]
 8008860:	2304      	movs	r3, #4
 8008862:	e067      	b.n	8008934 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f7ff fe59 	bl	8008524 <create_chain>
 8008872:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <dir_next+0xcc>
 800887a:	2307      	movs	r3, #7
 800887c:	e05a      	b.n	8008934 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <dir_next+0xd6>
 8008884:	2302      	movs	r3, #2
 8008886:	e055      	b.n	8008934 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888e:	d101      	bne.n	8008894 <dir_next+0xe2>
 8008890:	2301      	movs	r3, #1
 8008892:	e04f      	b.n	8008934 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fb4d 	bl	8007f34 <sync_window>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <dir_next+0xf2>
 80088a0:	2301      	movs	r3, #1
 80088a2:	e047      	b.n	8008934 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3330      	adds	r3, #48	; 0x30
 80088a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ac:	2100      	movs	r1, #0
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff f977 	bl	8007ba2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	6979      	ldr	r1, [r7, #20]
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff fc1a 	bl	80080f4 <clust2sect>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80088c6:	e012      	b.n	80088ee <dir_next+0x13c>
						fs->wflag = 1;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fb30 	bl	8007f34 <sync_window>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <dir_next+0x12c>
 80088da:	2301      	movs	r3, #1
 80088dc:	e02a      	b.n	8008934 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	3301      	adds	r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	895b      	ldrh	r3, [r3, #10]
 80088f2:	461a      	mov	r2, r3
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d3e6      	bcc.n	80088c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800890c:	6979      	ldr	r1, [r7, #20]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff fbf0 	bl	80080f4 <clust2sect>
 8008914:	4602      	mov	r2, r0
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892c:	441a      	add	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff feb4 	bl	80086bc <dir_sdi>
 8008954:	4603      	mov	r3, r0
 8008956:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d12b      	bne.n	80089b6 <dir_alloc+0x7a>
		n = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	4619      	mov	r1, r3
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff fb27 	bl	8007fbc <move_window>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d11d      	bne.n	80089b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2be5      	cmp	r3, #229	; 0xe5
 8008980:	d004      	beq.n	800898c <dir_alloc+0x50>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d107      	bne.n	800899c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	3301      	adds	r3, #1
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d102      	bne.n	80089a0 <dir_alloc+0x64>
 800899a:	e00c      	b.n	80089b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80089a0:	2101      	movs	r1, #1
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff ff05 	bl	80087b2 <dir_next>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0d7      	beq.n	8008962 <dir_alloc+0x26>
 80089b2:	e000      	b.n	80089b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80089b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d101      	bne.n	80089c0 <dir_alloc+0x84>
 80089bc:	2307      	movs	r3, #7
 80089be:	75fb      	strb	r3, [r7, #23]
	return res;
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	331a      	adds	r3, #26
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff f83f 	bl	8007a5c <ld_word>
 80089de:	4603      	mov	r3, r0
 80089e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d109      	bne.n	80089fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	3314      	adds	r3, #20
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff f834 	bl	8007a5c <ld_word>
 80089f4:	4603      	mov	r3, r0
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80089fe:	68fb      	ldr	r3, [r7, #12]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	331a      	adds	r3, #26
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	b292      	uxth	r2, r2
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff f857 	bl	8007ad2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d109      	bne.n	8008a40 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f103 0214 	add.w	r2, r3, #20
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0c1b      	lsrs	r3, r3, #16
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7ff f849 	bl	8007ad2 <st_word>
	}
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008a52:	2304      	movs	r3, #4
 8008a54:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8008a5c:	e03c      	b.n	8008ad8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6938      	ldr	r0, [r7, #16]
 8008a66:	f7ff faa9 	bl	8007fbc <move_window>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d136      	bne.n	8008ae2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d102      	bne.n	8008a88 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008a82:	2304      	movs	r3, #4
 8008a84:	75fb      	strb	r3, [r7, #23]
 8008a86:	e031      	b.n	8008aec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	330b      	adds	r3, #11
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a94:	73bb      	strb	r3, [r7, #14]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7bba      	ldrb	r2, [r7, #14]
 8008a9a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2be5      	cmp	r3, #229	; 0xe5
 8008aa0:	d011      	beq.n	8008ac6 <dir_read+0x7e>
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008aa6:	d00e      	beq.n	8008ac6 <dir_read+0x7e>
 8008aa8:	7bbb      	ldrb	r3, [r7, #14]
 8008aaa:	2b0f      	cmp	r3, #15
 8008aac:	d00b      	beq.n	8008ac6 <dir_read+0x7e>
 8008aae:	7bbb      	ldrb	r3, [r7, #14]
 8008ab0:	f023 0320 	bic.w	r3, r3, #32
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00f      	beq.n	8008ae6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff fe72 	bl	80087b2 <dir_next>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d108      	bne.n	8008aea <dir_read+0xa2>
	while (dp->sect) {
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69db      	ldr	r3, [r3, #28]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1be      	bne.n	8008a5e <dir_read+0x16>
 8008ae0:	e004      	b.n	8008aec <dir_read+0xa4>
		if (res != FR_OK) break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <dir_read+0xa4>
				break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <dir_read+0xa4>
		if (res != FR_OK) break;
 8008aea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <dir_read+0xb0>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	61da      	str	r2, [r3, #28]
	return res;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b086      	sub	sp, #24
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fdd2 	bl	80086bc <dir_sdi>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <dir_find+0x24>
 8008b22:	7dfb      	ldrb	r3, [r7, #23]
 8008b24:	e03e      	b.n	8008ba4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6938      	ldr	r0, [r7, #16]
 8008b2e:	f7ff fa45 	bl	8007fbc <move_window>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d12f      	bne.n	8008b9c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <dir_find+0x4e>
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	e028      	b.n	8008ba2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	330b      	adds	r3, #11
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	330b      	adds	r3, #11
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <dir_find+0x86>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a18      	ldr	r0, [r3, #32]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3324      	adds	r3, #36	; 0x24
 8008b7a:	220b      	movs	r2, #11
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	f7ff f82b 	bl	8007bd8 <mem_cmp>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00b      	beq.n	8008ba0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff fe11 	bl	80087b2 <dir_next>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0c5      	beq.n	8008b26 <dir_find+0x24>
 8008b9a:	e002      	b.n	8008ba2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008b9c:	bf00      	nop
 8008b9e:	e000      	b.n	8008ba2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ba0:	bf00      	nop

	return res;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008bba:	2101      	movs	r1, #1
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff febd 	bl	800893c <dir_alloc>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d11c      	bne.n	8008c06 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	68b8      	ldr	r0, [r7, #8]
 8008bd4:	f7ff f9f2 	bl	8007fbc <move_window>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d111      	bne.n	8008c06 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	2220      	movs	r2, #32
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe ffd9 	bl	8007ba2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a18      	ldr	r0, [r3, #32]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3324      	adds	r3, #36	; 0x24
 8008bf8:	220b      	movs	r2, #11
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	f7fe ffb0 	bl	8007b60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2201      	movs	r2, #1
 8008c04:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff f9c9 	bl	8007fbc <move_window>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	22e5      	movs	r2, #229	; 0xe5
 8008c3a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d04e      	beq.n	8008d02 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008c6c:	e021      	b.n	8008cb2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	1c59      	adds	r1, r3, #1
 8008c76:	6179      	str	r1, [r7, #20]
 8008c78:	4413      	add	r3, r2
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d100      	bne.n	8008c86 <get_fileinfo+0x3a>
 8008c84:	e015      	b.n	8008cb2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b05      	cmp	r3, #5
 8008c8a:	d101      	bne.n	8008c90 <get_fileinfo+0x44>
 8008c8c:	23e5      	movs	r3, #229	; 0xe5
 8008c8e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b09      	cmp	r3, #9
 8008c94:	d106      	bne.n	8008ca4 <get_fileinfo+0x58>
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	613a      	str	r2, [r7, #16]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	222e      	movs	r2, #46	; 0x2e
 8008ca2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	613a      	str	r2, [r7, #16]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	4413      	add	r3, r2
 8008cae:	7bfa      	ldrb	r2, [r7, #15]
 8008cb0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	2b0a      	cmp	r3, #10
 8008cb6:	d9da      	bls.n	8008c6e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3309      	adds	r3, #9
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	7ada      	ldrb	r2, [r3, #11]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	331c      	adds	r3, #28
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fe fed9 	bl	8007a8c <ld_dword>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	3316      	adds	r3, #22
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fed0 	bl	8007a8c <ld_dword>
 8008cec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	80da      	strh	r2, [r3, #6]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	0c1b      	lsrs	r3, r3, #16
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	809a      	strh	r2, [r3, #4]
 8008d00:	e000      	b.n	8008d04 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008d02:	bf00      	nop
}
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3324      	adds	r3, #36	; 0x24
 8008d20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008d22:	220b      	movs	r2, #11
 8008d24:	2120      	movs	r1, #32
 8008d26:	68b8      	ldr	r0, [r7, #8]
 8008d28:	f7fe ff3b 	bl	8007ba2 <mem_set>
	si = i = 0; ni = 8;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	2308      	movs	r3, #8
 8008d36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	61fa      	str	r2, [r7, #28]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4413      	add	r3, r2
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d46:	7efb      	ldrb	r3, [r7, #27]
 8008d48:	2b20      	cmp	r3, #32
 8008d4a:	d94e      	bls.n	8008dea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008d4c:	7efb      	ldrb	r3, [r7, #27]
 8008d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8008d50:	d006      	beq.n	8008d60 <create_name+0x54>
 8008d52:	7efb      	ldrb	r3, [r7, #27]
 8008d54:	2b5c      	cmp	r3, #92	; 0x5c
 8008d56:	d110      	bne.n	8008d7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d58:	e002      	b.n	8008d60 <create_name+0x54>
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	61fb      	str	r3, [r7, #28]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	4413      	add	r3, r2
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b2f      	cmp	r3, #47	; 0x2f
 8008d6a:	d0f6      	beq.n	8008d5a <create_name+0x4e>
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b5c      	cmp	r3, #92	; 0x5c
 8008d76:	d0f0      	beq.n	8008d5a <create_name+0x4e>
			break;
 8008d78:	e038      	b.n	8008dec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008d7a:	7efb      	ldrb	r3, [r7, #27]
 8008d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d7e:	d003      	beq.n	8008d88 <create_name+0x7c>
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d30c      	bcc.n	8008da2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b0b      	cmp	r3, #11
 8008d8c:	d002      	beq.n	8008d94 <create_name+0x88>
 8008d8e:	7efb      	ldrb	r3, [r7, #27]
 8008d90:	2b2e      	cmp	r3, #46	; 0x2e
 8008d92:	d001      	beq.n	8008d98 <create_name+0x8c>
 8008d94:	2306      	movs	r3, #6
 8008d96:	e044      	b.n	8008e22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008d98:	2308      	movs	r3, #8
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	230b      	movs	r3, #11
 8008d9e:	617b      	str	r3, [r7, #20]
			continue;
 8008da0:	e022      	b.n	8008de8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008da2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da04      	bge.n	8008db4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008daa:	7efb      	ldrb	r3, [r7, #27]
 8008dac:	3b80      	subs	r3, #128	; 0x80
 8008dae:	4a1f      	ldr	r2, [pc, #124]	; (8008e2c <create_name+0x120>)
 8008db0:	5cd3      	ldrb	r3, [r2, r3]
 8008db2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008db4:	7efb      	ldrb	r3, [r7, #27]
 8008db6:	4619      	mov	r1, r3
 8008db8:	481d      	ldr	r0, [pc, #116]	; (8008e30 <create_name+0x124>)
 8008dba:	f7fe ff34 	bl	8007c26 <chk_chr>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <create_name+0xbc>
 8008dc4:	2306      	movs	r3, #6
 8008dc6:	e02c      	b.n	8008e22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008dc8:	7efb      	ldrb	r3, [r7, #27]
 8008dca:	2b60      	cmp	r3, #96	; 0x60
 8008dcc:	d905      	bls.n	8008dda <create_name+0xce>
 8008dce:	7efb      	ldrb	r3, [r7, #27]
 8008dd0:	2b7a      	cmp	r3, #122	; 0x7a
 8008dd2:	d802      	bhi.n	8008dda <create_name+0xce>
 8008dd4:	7efb      	ldrb	r3, [r7, #27]
 8008dd6:	3b20      	subs	r3, #32
 8008dd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	613a      	str	r2, [r7, #16]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	4413      	add	r3, r2
 8008de4:	7efa      	ldrb	r2, [r7, #27]
 8008de6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008de8:	e7a6      	b.n	8008d38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008dea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	441a      	add	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <create_name+0xf4>
 8008dfc:	2306      	movs	r3, #6
 8008dfe:	e010      	b.n	8008e22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2be5      	cmp	r3, #229	; 0xe5
 8008e06:	d102      	bne.n	8008e0e <create_name+0x102>
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2205      	movs	r2, #5
 8008e0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e0e:	7efb      	ldrb	r3, [r7, #27]
 8008e10:	2b20      	cmp	r3, #32
 8008e12:	d801      	bhi.n	8008e18 <create_name+0x10c>
 8008e14:	2204      	movs	r2, #4
 8008e16:	e000      	b.n	8008e1a <create_name+0x10e>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	330b      	adds	r3, #11
 8008e1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3720      	adds	r7, #32
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	0800af74 	.word	0x0800af74
 8008e30:	0800aefc 	.word	0x0800aefc

08008e34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e48:	e002      	b.n	8008e50 <follow_path+0x1c>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b2f      	cmp	r3, #47	; 0x2f
 8008e56:	d0f8      	beq.n	8008e4a <follow_path+0x16>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8008e5e:	d0f4      	beq.n	8008e4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2200      	movs	r2, #0
 8008e64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b1f      	cmp	r3, #31
 8008e6c:	d80a      	bhi.n	8008e84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2280      	movs	r2, #128	; 0x80
 8008e72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008e76:	2100      	movs	r1, #0
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff fc1f 	bl	80086bc <dir_sdi>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]
 8008e82:	e043      	b.n	8008f0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e84:	463b      	mov	r3, r7
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff3f 	bl	8008d0c <create_name>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d134      	bne.n	8008f02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff fe32 	bl	8008b02 <dir_find>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ea8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008eaa:	7dfb      	ldrb	r3, [r7, #23]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00a      	beq.n	8008ec6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d127      	bne.n	8008f06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008eb6:	7afb      	ldrb	r3, [r7, #11]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d122      	bne.n	8008f06 <follow_path+0xd2>
 8008ec0:	2305      	movs	r3, #5
 8008ec2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ec4:	e01f      	b.n	8008f06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ec6:	7afb      	ldrb	r3, [r7, #11]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11c      	bne.n	8008f0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	799b      	ldrb	r3, [r3, #6]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008edc:	2305      	movs	r3, #5
 8008ede:	75fb      	strb	r3, [r7, #23]
 8008ee0:	e014      	b.n	8008f0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f7ff fd68 	bl	80089ca <ld_clust>
 8008efa:	4602      	mov	r2, r0
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f00:	e7c0      	b.n	8008e84 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f02:	bf00      	nop
 8008f04:	e002      	b.n	8008f0c <follow_path+0xd8>
				break;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f0a:	bf00      	nop
			}
		}
	}

	return res;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b087      	sub	sp, #28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d031      	beq.n	8008f90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e002      	b.n	8008f3a <get_ldnumber+0x24>
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3301      	adds	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b20      	cmp	r3, #32
 8008f40:	d903      	bls.n	8008f4a <get_ldnumber+0x34>
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b3a      	cmp	r3, #58	; 0x3a
 8008f48:	d1f4      	bne.n	8008f34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b3a      	cmp	r3, #58	; 0x3a
 8008f50:	d11c      	bne.n	8008f8c <get_ldnumber+0x76>
			tp = *path;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	60fa      	str	r2, [r7, #12]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	3b30      	subs	r3, #48	; 0x30
 8008f62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b09      	cmp	r3, #9
 8008f68:	d80e      	bhi.n	8008f88 <get_ldnumber+0x72>
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d10a      	bne.n	8008f88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d107      	bne.n	8008f88 <get_ldnumber+0x72>
					vol = (int)i;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	e002      	b.n	8008f92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f90:	693b      	ldr	r3, [r7, #16]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
	...

08008fa0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	70da      	strb	r2, [r3, #3]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7fe fffe 	bl	8007fbc <move_window>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <check_fs+0x2a>
 8008fc6:	2304      	movs	r3, #4
 8008fc8:	e038      	b.n	800903c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3330      	adds	r3, #48	; 0x30
 8008fce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fd42 	bl	8007a5c <ld_word>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d001      	beq.n	8008fe8 <check_fs+0x48>
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e029      	b.n	800903c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fee:	2be9      	cmp	r3, #233	; 0xe9
 8008ff0:	d009      	beq.n	8009006 <check_fs+0x66>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ff8:	2beb      	cmp	r3, #235	; 0xeb
 8008ffa:	d11e      	bne.n	800903a <check_fs+0x9a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009002:	2b90      	cmp	r3, #144	; 0x90
 8009004:	d119      	bne.n	800903a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3330      	adds	r3, #48	; 0x30
 800900a:	3336      	adds	r3, #54	; 0x36
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fd3d 	bl	8007a8c <ld_dword>
 8009012:	4603      	mov	r3, r0
 8009014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009018:	4a0a      	ldr	r2, [pc, #40]	; (8009044 <check_fs+0xa4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d101      	bne.n	8009022 <check_fs+0x82>
 800901e:	2300      	movs	r3, #0
 8009020:	e00c      	b.n	800903c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3330      	adds	r3, #48	; 0x30
 8009026:	3352      	adds	r3, #82	; 0x52
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fd2f 	bl	8007a8c <ld_dword>
 800902e:	4603      	mov	r3, r0
 8009030:	4a05      	ldr	r2, [pc, #20]	; (8009048 <check_fs+0xa8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d101      	bne.n	800903a <check_fs+0x9a>
 8009036:	2300      	movs	r3, #0
 8009038:	e000      	b.n	800903c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800903a:	2302      	movs	r3, #2
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	00544146 	.word	0x00544146
 8009048:	33544146 	.word	0x33544146

0800904c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b096      	sub	sp, #88	; 0x58
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	4613      	mov	r3, r2
 8009058:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff ff58 	bl	8008f16 <get_ldnumber>
 8009066:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906a:	2b00      	cmp	r3, #0
 800906c:	da01      	bge.n	8009072 <find_volume+0x26>
 800906e:	230b      	movs	r3, #11
 8009070:	e22d      	b.n	80094ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009072:	4aa1      	ldr	r2, [pc, #644]	; (80092f8 <find_volume+0x2ac>)
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800907a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <find_volume+0x3a>
 8009082:	230c      	movs	r3, #12
 8009084:	e223      	b.n	80094ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01a      	beq.n	80090d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	785b      	ldrb	r3, [r3, #1]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fe fc3d 	bl	8007920 <disk_status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80090ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10c      	bne.n	80090d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <find_volume+0x82>
 80090be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80090ca:	230a      	movs	r3, #10
 80090cc:	e1ff      	b.n	80094ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80090ce:	2300      	movs	r3, #0
 80090d0:	e1fd      	b.n	80094ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe fc35 	bl	8007954 <disk_initialize>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090fc:	2303      	movs	r3, #3
 80090fe:	e1e6      	b.n	80094ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <find_volume+0xca>
 8009106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009112:	230a      	movs	r3, #10
 8009114:	e1db      	b.n	80094ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800911a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800911c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800911e:	f7ff ff3f 	bl	8008fa0 <check_fs>
 8009122:	4603      	mov	r3, r0
 8009124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009128:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800912c:	2b02      	cmp	r3, #2
 800912e:	d149      	bne.n	80091c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009130:	2300      	movs	r3, #0
 8009132:	643b      	str	r3, [r7, #64]	; 0x40
 8009134:	e01e      	b.n	8009174 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800913c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009144:	4413      	add	r3, r2
 8009146:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	3304      	adds	r3, #4
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <find_volume+0x114>
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	3308      	adds	r3, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fc98 	bl	8007a8c <ld_dword>
 800915c:	4602      	mov	r2, r0
 800915e:	e000      	b.n	8009162 <find_volume+0x116>
 8009160:	2200      	movs	r2, #0
 8009162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	3358      	adds	r3, #88	; 0x58
 8009168:	443b      	add	r3, r7
 800916a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800916e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009170:	3301      	adds	r3, #1
 8009172:	643b      	str	r3, [r7, #64]	; 0x40
 8009174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009176:	2b03      	cmp	r3, #3
 8009178:	d9dd      	bls.n	8009136 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800917a:	2300      	movs	r3, #0
 800917c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800917e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <find_volume+0x13e>
 8009184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009186:	3b01      	subs	r3, #1
 8009188:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800918a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	3358      	adds	r3, #88	; 0x58
 8009190:	443b      	add	r3, r7
 8009192:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009196:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <find_volume+0x15e>
 800919e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091a2:	f7ff fefd 	bl	8008fa0 <check_fs>
 80091a6:	4603      	mov	r3, r0
 80091a8:	e000      	b.n	80091ac <find_volume+0x160>
 80091aa:	2303      	movs	r3, #3
 80091ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80091b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d905      	bls.n	80091c4 <find_volume+0x178>
 80091b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ba:	3301      	adds	r3, #1
 80091bc:	643b      	str	r3, [r7, #64]	; 0x40
 80091be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d9e2      	bls.n	800918a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d101      	bne.n	80091d0 <find_volume+0x184>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e17e      	b.n	80094ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d901      	bls.n	80091dc <find_volume+0x190>
 80091d8:	230d      	movs	r3, #13
 80091da:	e178      	b.n	80094ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	3330      	adds	r3, #48	; 0x30
 80091e0:	330b      	adds	r3, #11
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fc3a 	bl	8007a5c <ld_word>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ee:	d001      	beq.n	80091f4 <find_volume+0x1a8>
 80091f0:	230d      	movs	r3, #13
 80091f2:	e16c      	b.n	80094ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	3330      	adds	r3, #48	; 0x30
 80091f8:	3316      	adds	r3, #22
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fc2e 	bl	8007a5c <ld_word>
 8009200:	4603      	mov	r3, r0
 8009202:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <find_volume+0x1cc>
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	3330      	adds	r3, #48	; 0x30
 800920e:	3324      	adds	r3, #36	; 0x24
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fc3b 	bl	8007a8c <ld_dword>
 8009216:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800921c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	789b      	ldrb	r3, [r3, #2]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d005      	beq.n	800923c <find_volume+0x1f0>
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	789b      	ldrb	r3, [r3, #2]
 8009234:	2b02      	cmp	r3, #2
 8009236:	d001      	beq.n	800923c <find_volume+0x1f0>
 8009238:	230d      	movs	r3, #13
 800923a:	e148      	b.n	80094ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	789b      	ldrb	r3, [r3, #2]
 8009240:	461a      	mov	r2, r3
 8009242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009244:	fb02 f303 	mul.w	r3, r2, r3
 8009248:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009250:	b29a      	uxth	r2, r3
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009258:	895b      	ldrh	r3, [r3, #10]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d008      	beq.n	8009270 <find_volume+0x224>
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	895b      	ldrh	r3, [r3, #10]
 8009262:	461a      	mov	r2, r3
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	895b      	ldrh	r3, [r3, #10]
 8009268:	3b01      	subs	r3, #1
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <find_volume+0x228>
 8009270:	230d      	movs	r3, #13
 8009272:	e12c      	b.n	80094ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	3330      	adds	r3, #48	; 0x30
 8009278:	3311      	adds	r3, #17
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe fbee 	bl	8007a5c <ld_word>
 8009280:	4603      	mov	r3, r0
 8009282:	461a      	mov	r2, r3
 8009284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	891b      	ldrh	r3, [r3, #8]
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <find_volume+0x24e>
 8009296:	230d      	movs	r3, #13
 8009298:	e119      	b.n	80094ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	3330      	adds	r3, #48	; 0x30
 800929e:	3313      	adds	r3, #19
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fe fbdb 	bl	8007a5c <ld_word>
 80092a6:	4603      	mov	r3, r0
 80092a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d106      	bne.n	80092be <find_volume+0x272>
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	3330      	adds	r3, #48	; 0x30
 80092b4:	3320      	adds	r3, #32
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fbe8 	bl	8007a8c <ld_dword>
 80092bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	3330      	adds	r3, #48	; 0x30
 80092c2:	330e      	adds	r3, #14
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe fbc9 	bl	8007a5c <ld_word>
 80092ca:	4603      	mov	r3, r0
 80092cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d101      	bne.n	80092d8 <find_volume+0x28c>
 80092d4:	230d      	movs	r3, #13
 80092d6:	e0fa      	b.n	80094ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092dc:	4413      	add	r3, r2
 80092de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092e0:	8912      	ldrh	r2, [r2, #8]
 80092e2:	0912      	lsrs	r2, r2, #4
 80092e4:	b292      	uxth	r2, r2
 80092e6:	4413      	add	r3, r2
 80092e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d204      	bcs.n	80092fc <find_volume+0x2b0>
 80092f2:	230d      	movs	r3, #13
 80092f4:	e0eb      	b.n	80094ce <find_volume+0x482>
 80092f6:	bf00      	nop
 80092f8:	20000d78 	.word	0x20000d78
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009304:	8952      	ldrh	r2, [r2, #10]
 8009306:	fbb3 f3f2 	udiv	r3, r3, r2
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <find_volume+0x2ca>
 8009312:	230d      	movs	r3, #13
 8009314:	e0db      	b.n	80094ce <find_volume+0x482>
		fmt = FS_FAT32;
 8009316:	2303      	movs	r3, #3
 8009318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009322:	4293      	cmp	r3, r2
 8009324:	d802      	bhi.n	800932c <find_volume+0x2e0>
 8009326:	2302      	movs	r3, #2
 8009328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009332:	4293      	cmp	r3, r2
 8009334:	d802      	bhi.n	800933c <find_volume+0x2f0>
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	1c9a      	adds	r2, r3, #2
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009348:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800934a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800934c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800934e:	441a      	add	r2, r3
 8009350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009352:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009354:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	441a      	add	r2, r3
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800935e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009362:	2b03      	cmp	r3, #3
 8009364:	d11e      	bne.n	80093a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009368:	3330      	adds	r3, #48	; 0x30
 800936a:	332a      	adds	r3, #42	; 0x2a
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe fb75 	bl	8007a5c <ld_word>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <find_volume+0x330>
 8009378:	230d      	movs	r3, #13
 800937a:	e0a8      	b.n	80094ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	891b      	ldrh	r3, [r3, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <find_volume+0x33c>
 8009384:	230d      	movs	r3, #13
 8009386:	e0a2      	b.n	80094ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938a:	3330      	adds	r3, #48	; 0x30
 800938c:	332c      	adds	r3, #44	; 0x2c
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fb7c 	bl	8007a8c <ld_dword>
 8009394:	4602      	mov	r2, r0
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	647b      	str	r3, [r7, #68]	; 0x44
 80093a2:	e01f      	b.n	80093e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <find_volume+0x364>
 80093ac:	230d      	movs	r3, #13
 80093ae:	e08e      	b.n	80094ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b6:	441a      	add	r2, r3
 80093b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d103      	bne.n	80093cc <find_volume+0x380>
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	e00a      	b.n	80093e2 <find_volume+0x396>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	695a      	ldr	r2, [r3, #20]
 80093d0:	4613      	mov	r3, r2
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	4413      	add	r3, r2
 80093d6:	085a      	lsrs	r2, r3, #1
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80093ee:	0a5b      	lsrs	r3, r3, #9
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d201      	bcs.n	80093f8 <find_volume+0x3ac>
 80093f4:	230d      	movs	r3, #13
 80093f6:	e06a      	b.n	80094ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fe:	611a      	str	r2, [r3, #16]
 8009400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800940e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009412:	2b03      	cmp	r3, #3
 8009414:	d149      	bne.n	80094aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	3330      	adds	r3, #48	; 0x30
 800941a:	3330      	adds	r3, #48	; 0x30
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fb1d 	bl	8007a5c <ld_word>
 8009422:	4603      	mov	r3, r0
 8009424:	2b01      	cmp	r3, #1
 8009426:	d140      	bne.n	80094aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800942a:	3301      	adds	r3, #1
 800942c:	4619      	mov	r1, r3
 800942e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009430:	f7fe fdc4 	bl	8007fbc <move_window>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d137      	bne.n	80094aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	2200      	movs	r2, #0
 800943e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	3330      	adds	r3, #48	; 0x30
 8009444:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009448:	4618      	mov	r0, r3
 800944a:	f7fe fb07 	bl	8007a5c <ld_word>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009456:	429a      	cmp	r2, r3
 8009458:	d127      	bne.n	80094aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800945a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945c:	3330      	adds	r3, #48	; 0x30
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe fb14 	bl	8007a8c <ld_dword>
 8009464:	4603      	mov	r3, r0
 8009466:	4a1c      	ldr	r2, [pc, #112]	; (80094d8 <find_volume+0x48c>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d11e      	bne.n	80094aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	3330      	adds	r3, #48	; 0x30
 8009470:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fb09 	bl	8007a8c <ld_dword>
 800947a:	4603      	mov	r3, r0
 800947c:	4a17      	ldr	r2, [pc, #92]	; (80094dc <find_volume+0x490>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d113      	bne.n	80094aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	3330      	adds	r3, #48	; 0x30
 8009486:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fafe 	bl	8007a8c <ld_dword>
 8009490:	4602      	mov	r2, r0
 8009492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009494:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	3330      	adds	r3, #48	; 0x30
 800949a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe faf4 	bl	8007a8c <ld_dword>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80094b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80094b2:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <find_volume+0x494>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <find_volume+0x494>)
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	4b08      	ldr	r3, [pc, #32]	; (80094e0 <find_volume+0x494>)
 80094c0:	881a      	ldrh	r2, [r3, #0]
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80094c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094c8:	f7fe fd10 	bl	8007eec <clear_lock>
#endif
	return FR_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3758      	adds	r7, #88	; 0x58
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	41615252 	.word	0x41615252
 80094dc:	61417272 	.word	0x61417272
 80094e0:	20000d7c 	.word	0x20000d7c

080094e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094ee:	2309      	movs	r3, #9
 80094f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01c      	beq.n	8009532 <validate+0x4e>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d018      	beq.n	8009532 <validate+0x4e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d013      	beq.n	8009532 <validate+0x4e>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	889a      	ldrh	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	88db      	ldrh	r3, [r3, #6]
 8009514:	429a      	cmp	r2, r3
 8009516:	d10c      	bne.n	8009532 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe f9fe 	bl	8007920 <disk_status>
 8009524:	4603      	mov	r3, r0
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <validate+0x4e>
			res = FR_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <validate+0x5a>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	e000      	b.n	8009540 <validate+0x5c>
 800953e:	2300      	movs	r3, #0
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	6013      	str	r3, [r2, #0]
	return res;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009562:	f107 0310 	add.w	r3, r7, #16
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fcd5 	bl	8008f16 <get_ldnumber>
 800956c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2b00      	cmp	r3, #0
 8009572:	da01      	bge.n	8009578 <f_mount+0x28>
 8009574:	230b      	movs	r3, #11
 8009576:	e02b      	b.n	80095d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009578:	4a17      	ldr	r2, [pc, #92]	; (80095d8 <f_mount+0x88>)
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009580:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009588:	69b8      	ldr	r0, [r7, #24]
 800958a:	f7fe fcaf 	bl	8007eec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2200      	movs	r2, #0
 8009592:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	490d      	ldr	r1, [pc, #52]	; (80095d8 <f_mount+0x88>)
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <f_mount+0x66>
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d001      	beq.n	80095ba <f_mount+0x6a>
 80095b6:	2300      	movs	r3, #0
 80095b8:	e00a      	b.n	80095d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80095ba:	f107 010c 	add.w	r1, r7, #12
 80095be:	f107 0308 	add.w	r3, r7, #8
 80095c2:	2200      	movs	r2, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fd41 	bl	800904c <find_volume>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	20000d78 	.word	0x20000d78

080095dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b098      	sub	sp, #96	; 0x60
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <f_open+0x18>
 80095f0:	2309      	movs	r3, #9
 80095f2:	e1ad      	b.n	8009950 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80095fc:	79fa      	ldrb	r2, [r7, #7]
 80095fe:	f107 0110 	add.w	r1, r7, #16
 8009602:	f107 0308 	add.w	r3, r7, #8
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fd20 	bl	800904c <find_volume>
 800960c:	4603      	mov	r3, r0
 800960e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 8191 	bne.w	800993e <f_open+0x362>
		dj.obj.fs = fs;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	f107 0314 	add.w	r3, r7, #20
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fc03 	bl	8008e34 <follow_path>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11a      	bne.n	8009672 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800963c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009640:	b25b      	sxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	da03      	bge.n	800964e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009646:	2306      	movs	r3, #6
 8009648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800964c:	e011      	b.n	8009672 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	f023 0301 	bic.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	bf14      	ite	ne
 8009658:	2301      	movne	r3, #1
 800965a:	2300      	moveq	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	461a      	mov	r2, r3
 8009660:	f107 0314 	add.w	r3, r7, #20
 8009664:	4611      	mov	r1, r2
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe faf8 	bl	8007c5c <chk_lock>
 800966c:	4603      	mov	r3, r0
 800966e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009672:	79fb      	ldrb	r3, [r7, #7]
 8009674:	f003 031c 	and.w	r3, r3, #28
 8009678:	2b00      	cmp	r3, #0
 800967a:	d07f      	beq.n	800977c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800967c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009680:	2b00      	cmp	r3, #0
 8009682:	d017      	beq.n	80096b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009688:	2b04      	cmp	r3, #4
 800968a:	d10e      	bne.n	80096aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800968c:	f7fe fb42 	bl	8007d14 <enq_lock>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <f_open+0xc8>
 8009696:	f107 0314 	add.w	r3, r7, #20
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fa86 	bl	8008bac <dir_register>
 80096a0:	4603      	mov	r3, r0
 80096a2:	e000      	b.n	80096a6 <f_open+0xca>
 80096a4:	2312      	movs	r3, #18
 80096a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	f043 0308 	orr.w	r3, r3, #8
 80096b0:	71fb      	strb	r3, [r7, #7]
 80096b2:	e010      	b.n	80096d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096b4:	7ebb      	ldrb	r3, [r7, #26]
 80096b6:	f003 0311 	and.w	r3, r3, #17
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <f_open+0xea>
					res = FR_DENIED;
 80096be:	2307      	movs	r3, #7
 80096c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096c4:	e007      	b.n	80096d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <f_open+0xfa>
 80096d0:	2308      	movs	r3, #8
 80096d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d168      	bne.n	80097b0 <f_open+0x1d4>
 80096de:	79fb      	ldrb	r3, [r7, #7]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d063      	beq.n	80097b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80096e8:	f7fd ff52 	bl	8007590 <get_fattime>
 80096ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	330e      	adds	r3, #14
 80096f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fa07 	bl	8007b08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fc:	3316      	adds	r3, #22
 80096fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fa01 	bl	8007b08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009708:	330b      	adds	r3, #11
 800970a:	2220      	movs	r2, #32
 800970c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff f958 	bl	80089ca <ld_clust>
 800971a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009720:	2200      	movs	r2, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f970 	bl	8008a08 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972a:	331c      	adds	r3, #28
 800972c:	2100      	movs	r1, #0
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe f9ea 	bl	8007b08 <st_dword>
					fs->wflag = 1;
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	2201      	movs	r2, #1
 8009738:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800973a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800973c:	2b00      	cmp	r3, #0
 800973e:	d037      	beq.n	80097b0 <f_open+0x1d4>
						dw = fs->winsect;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009746:	f107 0314 	add.w	r3, r7, #20
 800974a:	2200      	movs	r2, #0
 800974c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe fe83 	bl	800845a <remove_chain>
 8009754:	4603      	mov	r3, r0
 8009756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800975a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800975e:	2b00      	cmp	r3, #0
 8009760:	d126      	bne.n	80097b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe fc28 	bl	8007fbc <move_window>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009776:	3a01      	subs	r2, #1
 8009778:	60da      	str	r2, [r3, #12]
 800977a:	e019      	b.n	80097b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800977c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009780:	2b00      	cmp	r3, #0
 8009782:	d115      	bne.n	80097b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009784:	7ebb      	ldrb	r3, [r7, #26]
 8009786:	f003 0310 	and.w	r3, r3, #16
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <f_open+0x1ba>
					res = FR_NO_FILE;
 800978e:	2304      	movs	r3, #4
 8009790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009794:	e00c      	b.n	80097b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d007      	beq.n	80097b0 <f_open+0x1d4>
 80097a0:	7ebb      	ldrb	r3, [r7, #26]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <f_open+0x1d4>
						res = FR_DENIED;
 80097aa:	2307      	movs	r3, #7
 80097ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80097b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d128      	bne.n	800980a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80097c2:	79fb      	ldrb	r3, [r7, #7]
 80097c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80097d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097d8:	79fb      	ldrb	r3, [r7, #7]
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bf14      	ite	ne
 80097e2:	2301      	movne	r3, #1
 80097e4:	2300      	moveq	r3, #0
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	f107 0314 	add.w	r3, r7, #20
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fab1 	bl	8007d58 <inc_lock>
 80097f6:	4602      	mov	r2, r0
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <f_open+0x22e>
 8009804:	2302      	movs	r3, #2
 8009806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800980a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 8095 	bne.w	800993e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff f8d5 	bl	80089ca <ld_clust>
 8009820:	4602      	mov	r2, r0
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009828:	331c      	adds	r3, #28
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe f92e 	bl	8007a8c <ld_dword>
 8009830:	4602      	mov	r2, r0
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	88da      	ldrh	r2, [r3, #6]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	79fa      	ldrb	r2, [r7, #7]
 800984e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3330      	adds	r3, #48	; 0x30
 8009866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe f998 	bl	8007ba2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d060      	beq.n	800993e <f_open+0x362>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d05c      	beq.n	800993e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	895b      	ldrh	r3, [r3, #10]
 8009890:	025b      	lsls	r3, r3, #9
 8009892:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	657b      	str	r3, [r7, #84]	; 0x54
 80098a0:	e016      	b.n	80098d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fc43 	bl	8008132 <get_fat>
 80098ac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80098ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d802      	bhi.n	80098ba <f_open+0x2de>
 80098b4:	2302      	movs	r3, #2
 80098b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80098ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c0:	d102      	bne.n	80098c8 <f_open+0x2ec>
 80098c2:	2301      	movs	r3, #1
 80098c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	657b      	str	r3, [r7, #84]	; 0x54
 80098d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d103      	bne.n	80098e0 <f_open+0x304>
 80098d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098dc:	429a      	cmp	r2, r3
 80098de:	d8e0      	bhi.n	80098a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80098e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d127      	bne.n	800993e <f_open+0x362>
 80098ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d022      	beq.n	800993e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fe fbf9 	bl	80080f4 <clust2sect>
 8009902:	6478      	str	r0, [r7, #68]	; 0x44
 8009904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <f_open+0x336>
						res = FR_INT_ERR;
 800990a:	2302      	movs	r3, #2
 800990c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009910:	e015      	b.n	800993e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009914:	0a5a      	lsrs	r2, r3, #9
 8009916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009918:	441a      	add	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	7858      	ldrb	r0, [r3, #1]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a1a      	ldr	r2, [r3, #32]
 800992c:	2301      	movs	r3, #1
 800992e:	f7fe f837 	bl	80079a0 <disk_read>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <f_open+0x362>
 8009938:	2301      	movs	r3, #1
 800993a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800993e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009942:	2b00      	cmp	r3, #0
 8009944:	d002      	beq.n	800994c <f_open+0x370>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800994c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009950:	4618      	mov	r0, r3
 8009952:	3760      	adds	r7, #96	; 0x60
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08c      	sub	sp, #48	; 0x30
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f107 0210 	add.w	r2, r7, #16
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fdb3 	bl	80094e4 <validate>
 800997e:	4603      	mov	r3, r0
 8009980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009988:	2b00      	cmp	r3, #0
 800998a:	d107      	bne.n	800999c <f_write+0x44>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	7d5b      	ldrb	r3, [r3, #21]
 8009990:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <f_write+0x4a>
 800999c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099a0:	e14b      	b.n	8009c3a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7d1b      	ldrb	r3, [r3, #20]
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <f_write+0x5a>
 80099ae:	2307      	movs	r3, #7
 80099b0:	e143      	b.n	8009c3a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699a      	ldr	r2, [r3, #24]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	441a      	add	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	429a      	cmp	r2, r3
 80099c0:	f080 812d 	bcs.w	8009c1e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	43db      	mvns	r3, r3
 80099ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80099cc:	e127      	b.n	8009c1e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f040 80e3 	bne.w	8009ba2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	0a5b      	lsrs	r3, r3, #9
 80099e2:	693a      	ldr	r2, [r7, #16]
 80099e4:	8952      	ldrh	r2, [r2, #10]
 80099e6:	3a01      	subs	r2, #1
 80099e8:	4013      	ands	r3, r2
 80099ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d143      	bne.n	8009a7a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10c      	bne.n	8009a14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d11a      	bne.n	8009a3c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fd8a 	bl	8008524 <create_chain>
 8009a10:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a12:	e013      	b.n	8009a3c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	4619      	mov	r1, r3
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7fe fe16 	bl	8008654 <clmt_clust>
 8009a28:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a2a:	e007      	b.n	8009a3c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7fe fd75 	bl	8008524 <create_chain>
 8009a3a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80f2 	beq.w	8009c28 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d104      	bne.n	8009a54 <f_write+0xfc>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	755a      	strb	r2, [r3, #21]
 8009a50:	2302      	movs	r3, #2
 8009a52:	e0f2      	b.n	8009c3a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a5a:	d104      	bne.n	8009a66 <f_write+0x10e>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	755a      	strb	r2, [r3, #21]
 8009a62:	2301      	movs	r3, #1
 8009a64:	e0e9      	b.n	8009c3a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <f_write+0x122>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	7d1b      	ldrb	r3, [r3, #20]
 8009a7e:	b25b      	sxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da18      	bge.n	8009ab6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	7858      	ldrb	r0, [r3, #1]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1a      	ldr	r2, [r3, #32]
 8009a92:	2301      	movs	r3, #1
 8009a94:	f7fd ffa4 	bl	80079e0 <disk_write>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <f_write+0x150>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	755a      	strb	r2, [r3, #21]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e0c8      	b.n	8009c3a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	7d1b      	ldrb	r3, [r3, #20]
 8009aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fb18 	bl	80080f4 <clust2sect>
 8009ac4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d104      	bne.n	8009ad6 <f_write+0x17e>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	755a      	strb	r2, [r3, #21]
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e0b1      	b.n	8009c3a <f_write+0x2e2>
			sect += csect;
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	4413      	add	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	0a5b      	lsrs	r3, r3, #9
 8009ae2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d03c      	beq.n	8009b64 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	4413      	add	r3, r2
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	8952      	ldrh	r2, [r2, #10]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d905      	bls.n	8009b04 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	895b      	ldrh	r3, [r3, #10]
 8009afc:	461a      	mov	r2, r3
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	7858      	ldrb	r0, [r3, #1]
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	f7fd ff67 	bl	80079e0 <disk_write>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <f_write+0x1ca>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	755a      	strb	r2, [r3, #21]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e08b      	b.n	8009c3a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6a1a      	ldr	r2, [r3, #32]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	6a3a      	ldr	r2, [r7, #32]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d915      	bls.n	8009b5c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	025b      	lsls	r3, r3, #9
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f7fe f809 	bl	8007b60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	7d1b      	ldrb	r3, [r3, #20]
 8009b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	025b      	lsls	r3, r3, #9
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009b62:	e03f      	b.n	8009be4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d016      	beq.n	8009b9c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d210      	bcs.n	8009b9c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	7858      	ldrb	r0, [r3, #1]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b84:	2301      	movs	r3, #1
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	f7fd ff0a 	bl	80079a0 <disk_read>
 8009b8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	755a      	strb	r2, [r3, #21]
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e04e      	b.n	8009c3a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009baa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d901      	bls.n	8009bbc <f_write+0x264>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bca:	4413      	add	r3, r2
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bce:	69f9      	ldr	r1, [r7, #28]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fd ffc5 	bl	8007b60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	7d1b      	ldrb	r3, [r3, #20]
 8009bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009be4:	69fa      	ldr	r2, [r7, #28]
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	4413      	add	r3, r2
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	619a      	str	r2, [r3, #24]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	bf38      	it	cc
 8009c04:	461a      	movcc	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	60da      	str	r2, [r3, #12]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c10:	441a      	add	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f47f aed4 	bne.w	80099ce <f_write+0x76>
 8009c26:	e000      	b.n	8009c2a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	7d1b      	ldrb	r3, [r3, #20]
 8009c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3730      	adds	r7, #48	; 0x30
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f107 0208 	add.w	r2, r7, #8
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff fc46 	bl	80094e4 <validate>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d168      	bne.n	8009d34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7d1b      	ldrb	r3, [r3, #20]
 8009c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d062      	beq.n	8009d34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7d1b      	ldrb	r3, [r3, #20]
 8009c72:	b25b      	sxtb	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da15      	bge.n	8009ca4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	7858      	ldrb	r0, [r3, #1]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1a      	ldr	r2, [r3, #32]
 8009c86:	2301      	movs	r3, #1
 8009c88:	f7fd feaa 	bl	80079e0 <disk_write>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <f_sync+0x54>
 8009c92:	2301      	movs	r3, #1
 8009c94:	e04f      	b.n	8009d36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7d1b      	ldrb	r3, [r3, #20]
 8009c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009ca4:	f7fd fc74 	bl	8007590 <get_fattime>
 8009ca8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7fe f982 	bl	8007fbc <move_window>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d138      	bne.n	8009d34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	330b      	adds	r3, #11
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	330b      	adds	r3, #11
 8009cd2:	f042 0220 	orr.w	r2, r2, #32
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6818      	ldr	r0, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	f7fe fe8f 	bl	8008a08 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f103 021c 	add.w	r2, r3, #28
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fd ff06 	bl	8007b08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	3316      	adds	r3, #22
 8009d00:	6939      	ldr	r1, [r7, #16]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd ff00 	bl	8007b08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3312      	adds	r3, #18
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fd fedf 	bl	8007ad2 <st_word>
					fs->wflag = 1;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2201      	movs	r2, #1
 8009d18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe f97b 	bl	8008018 <sync_fs>
 8009d22:	4603      	mov	r3, r0
 8009d24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	7d1b      	ldrb	r3, [r3, #20]
 8009d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ff7b 	bl	8009c42 <f_sync>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d118      	bne.n	8009d88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f107 0208 	add.w	r2, r7, #8
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff fbc0 	bl	80094e4 <validate>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10c      	bne.n	8009d88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe f87e 	bl	8007e74 <dec_lock>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b090      	sub	sp, #64	; 0x40
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f107 0208 	add.w	r2, r7, #8
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff fb9d 	bl	80094e4 <validate>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009db0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d103      	bne.n	8009dc0 <f_lseek+0x2e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d5b      	ldrb	r3, [r3, #21]
 8009dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009dc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <f_lseek+0x3c>
 8009dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dcc:	e1e6      	b.n	800a19c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 80d1 	beq.w	8009f7a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dde:	d15a      	bne.n	8009e96 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	1d1a      	adds	r2, r3, #4
 8009dea:	627a      	str	r2, [r7, #36]	; 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	2302      	movs	r3, #2
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d03a      	beq.n	8009e76 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	613b      	str	r3, [r7, #16]
 8009e04:	2300      	movs	r3, #0
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	3302      	adds	r3, #2
 8009e0c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e14:	3301      	adds	r3, #1
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe f988 	bl	8008132 <get_fat>
 8009e22:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d804      	bhi.n	8009e34 <f_lseek+0xa2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	755a      	strb	r2, [r3, #21]
 8009e30:	2302      	movs	r3, #2
 8009e32:	e1b3      	b.n	800a19c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e3a:	d104      	bne.n	8009e46 <f_lseek+0xb4>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	755a      	strb	r2, [r3, #21]
 8009e42:	2301      	movs	r3, #1
 8009e44:	e1aa      	b.n	800a19c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d0de      	beq.n	8009e0e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d809      	bhi.n	8009e6c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8009e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	1d1a      	adds	r2, r3, #4
 8009e66:	627a      	str	r2, [r7, #36]	; 0x24
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d3c4      	bcc.n	8009e00 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e7c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d803      	bhi.n	8009e8e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	e184      	b.n	800a198 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009e8e:	2311      	movs	r3, #17
 8009e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009e94:	e180      	b.n	800a198 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d902      	bls.n	8009ea6 <f_lseek+0x114>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8172 	beq.w	800a198 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fe fbca 	bl	8008654 <clmt_clust>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7fe f910 	bl	80080f4 <clust2sect>
 8009ed4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <f_lseek+0x154>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	755a      	strb	r2, [r3, #21]
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e15a      	b.n	800a19c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	0a5b      	lsrs	r3, r3, #9
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	8952      	ldrh	r2, [r2, #10]
 8009ef0:	3a01      	subs	r2, #1
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 8148 	beq.w	800a198 <f_lseek+0x406>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	f000 8142 	beq.w	800a198 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
 8009f18:	b25b      	sxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	da18      	bge.n	8009f50 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	7858      	ldrb	r0, [r3, #1]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1a      	ldr	r2, [r3, #32]
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f7fd fd57 	bl	80079e0 <disk_write>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <f_lseek+0x1b0>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	755a      	strb	r2, [r3, #21]
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e12c      	b.n	800a19c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	7d1b      	ldrb	r3, [r3, #20]
 8009f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	7858      	ldrb	r0, [r3, #1]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	69ba      	ldr	r2, [r7, #24]
 8009f5e:	f7fd fd1f 	bl	80079a0 <disk_read>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d004      	beq.n	8009f72 <f_lseek+0x1e0>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	755a      	strb	r2, [r3, #21]
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e114      	b.n	800a19c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	69ba      	ldr	r2, [r7, #24]
 8009f76:	621a      	str	r2, [r3, #32]
 8009f78:	e10e      	b.n	800a198 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d908      	bls.n	8009f96 <f_lseek+0x204>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	7d1b      	ldrb	r3, [r3, #20]
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d102      	bne.n	8009f96 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fa4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80a7 	beq.w	800a0fc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	025b      	lsls	r3, r3, #9
 8009fb4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01b      	beq.n	8009ff4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	1e5a      	subs	r2, r3, #1
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	1e59      	subs	r1, r3, #1
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d30f      	bcc.n	8009ff4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	1e5a      	subs	r2, r3, #1
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	425b      	negs	r3, r3
 8009fdc:	401a      	ands	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	69db      	ldr	r3, [r3, #28]
 8009ff0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ff2:	e022      	b.n	800a03a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d119      	bne.n	800a034 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe fa8d 	bl	8008524 <create_chain>
 800a00a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d104      	bne.n	800a01c <f_lseek+0x28a>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2202      	movs	r2, #2
 800a016:	755a      	strb	r2, [r3, #21]
 800a018:	2302      	movs	r3, #2
 800a01a:	e0bf      	b.n	800a19c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a022:	d104      	bne.n	800a02e <f_lseek+0x29c>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	755a      	strb	r2, [r3, #21]
 800a02a:	2301      	movs	r3, #1
 800a02c:	e0b6      	b.n	800a19c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a032:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a038:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d05d      	beq.n	800a0fc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a040:	e03a      	b.n	800a0b8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699a      	ldr	r2, [r3, #24]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7d1b      	ldrb	r3, [r3, #20]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fa5c 	bl	8008524 <create_chain>
 800a06c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <f_lseek+0x2f4>
							ofs = 0; break;
 800a074:	2300      	movs	r3, #0
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	e022      	b.n	800a0c0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f857 	bl	8008132 <get_fat>
 800a084:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a08c:	d104      	bne.n	800a098 <f_lseek+0x306>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	755a      	strb	r2, [r3, #21]
 800a094:	2301      	movs	r3, #1
 800a096:	e081      	b.n	800a19c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d904      	bls.n	800a0a8 <f_lseek+0x316>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d304      	bcc.n	800a0b2 <f_lseek+0x320>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	755a      	strb	r2, [r3, #21]
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e074      	b.n	800a19c <f_lseek+0x40a>
					fp->clust = clst;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0b6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a0b8:	683a      	ldr	r2, [r7, #0]
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d8c0      	bhi.n	800a042 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	699a      	ldr	r2, [r3, #24]
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d012      	beq.n	800a0fc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe f80a 	bl	80080f4 <clust2sect>
 800a0e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <f_lseek+0x360>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	755a      	strb	r2, [r3, #21]
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e054      	b.n	800a19c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	0a5b      	lsrs	r3, r3, #9
 800a0f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0f8:	4413      	add	r3, r2
 800a0fa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	699a      	ldr	r2, [r3, #24]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	429a      	cmp	r2, r3
 800a106:	d90a      	bls.n	800a11e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7d1b      	ldrb	r3, [r3, #20]
 800a114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a118:	b2da      	uxtb	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a126:	2b00      	cmp	r3, #0
 800a128:	d036      	beq.n	800a198 <f_lseek+0x406>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a130:	429a      	cmp	r2, r3
 800a132:	d031      	beq.n	800a198 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	7d1b      	ldrb	r3, [r3, #20]
 800a138:	b25b      	sxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da18      	bge.n	800a170 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	7858      	ldrb	r0, [r3, #1]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a1a      	ldr	r2, [r3, #32]
 800a14c:	2301      	movs	r3, #1
 800a14e:	f7fd fc47 	bl	80079e0 <disk_write>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <f_lseek+0x3d0>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	755a      	strb	r2, [r3, #21]
 800a15e:	2301      	movs	r3, #1
 800a160:	e01c      	b.n	800a19c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	7d1b      	ldrb	r3, [r3, #20]
 800a166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	7858      	ldrb	r0, [r3, #1]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a17a:	2301      	movs	r3, #1
 800a17c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a17e:	f7fd fc0f 	bl	80079a0 <disk_read>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <f_lseek+0x400>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	755a      	strb	r2, [r3, #21]
 800a18e:	2301      	movs	r3, #1
 800a190:	e004      	b.n	800a19c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a196:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3740      	adds	r7, #64	; 0x40
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <f_opendir+0x14>
 800a1b4:	2309      	movs	r3, #9
 800a1b6:	e064      	b.n	800a282 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800a1bc:	f107 010c 	add.w	r1, r7, #12
 800a1c0:	463b      	mov	r3, r7
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fe ff41 	bl	800904c <find_volume>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d14f      	bne.n	800a274 <f_opendir+0xd0>
		obj->fs = fs;
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fe fe28 	bl	8008e34 <follow_path>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d13d      	bne.n	800a26a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	db12      	blt.n	800a220 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	799b      	ldrb	r3, [r3, #6]
 800a1fe:	f003 0310 	and.w	r3, r3, #16
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	4619      	mov	r1, r3
 800a20e:	4610      	mov	r0, r2
 800a210:	f7fe fbdb 	bl	80089ca <ld_clust>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	609a      	str	r2, [r3, #8]
 800a21a:	e001      	b.n	800a220 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a21c:	2305      	movs	r3, #5
 800a21e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d121      	bne.n	800a26a <f_opendir+0xc6>
				obj->id = fs->id;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	88da      	ldrh	r2, [r3, #6]
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a22e:	2100      	movs	r1, #0
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7fe fa43 	bl	80086bc <dir_sdi>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d114      	bne.n	800a26a <f_opendir+0xc6>
					if (obj->sclust) {
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00d      	beq.n	800a264 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a248:	2100      	movs	r1, #0
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7fd fd84 	bl	8007d58 <inc_lock>
 800a250:	4602      	mov	r2, r0
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d105      	bne.n	800a26a <f_opendir+0xc6>
 800a25e:	2312      	movs	r3, #18
 800a260:	75fb      	strb	r3, [r7, #23]
 800a262:	e002      	b.n	800a26a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	2200      	movs	r2, #0
 800a268:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d101      	bne.n	800a274 <f_opendir+0xd0>
 800a270:	2305      	movs	r3, #5
 800a272:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <f_opendir+0xdc>
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a280:	7dfb      	ldrb	r3, [r7, #23]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f107 0208 	add.w	r2, r7, #8
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff f922 	bl	80094e4 <validate>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d110      	bne.n	800a2cc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d006      	beq.n	800a2c0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fd fddc 	bl	8007e74 <dec_lock>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b084      	sub	sp, #16
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f107 0208 	add.w	r2, r7, #8
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7ff f8fb 	bl	80094e4 <validate>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d126      	bne.n	800a346 <f_readdir+0x70>
		if (!fno) {
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a2fe:	2100      	movs	r1, #0
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7fe f9db 	bl	80086bc <dir_sdi>
 800a306:	4603      	mov	r3, r0
 800a308:	73fb      	strb	r3, [r7, #15]
 800a30a:	e01c      	b.n	800a346 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a30c:	2100      	movs	r1, #0
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fe fb9a 	bl	8008a48 <dir_read>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a318:	7bfb      	ldrb	r3, [r7, #15]
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	d101      	bne.n	800a322 <f_readdir+0x4c>
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10e      	bne.n	800a346 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a328:	6839      	ldr	r1, [r7, #0]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe fc8e 	bl	8008c4c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a330:	2100      	movs	r1, #0
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7fe fa3d 	bl	80087b2 <dir_next>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d101      	bne.n	800a346 <f_readdir+0x70>
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a346:	7bfb      	ldrb	r3, [r7, #15]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b09e      	sub	sp, #120	; 0x78
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a35c:	f107 010c 	add.w	r1, r7, #12
 800a360:	1d3b      	adds	r3, r7, #4
 800a362:	2202      	movs	r2, #2
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fe71 	bl	800904c <find_volume>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800a374:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 808e 	bne.w	800a49a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a384:	4611      	mov	r1, r2
 800a386:	4618      	mov	r0, r3
 800a388:	f7fe fd54 	bl	8008e34 <follow_path>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a396:	2b00      	cmp	r3, #0
 800a398:	d108      	bne.n	800a3ac <f_unlink+0x5c>
 800a39a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a39e:	2102      	movs	r1, #2
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fd fc5b 	bl	8007c5c <chk_lock>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a3ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d172      	bne.n	800a49a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a3b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	da03      	bge.n	800a3c6 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a3be:	2306      	movs	r3, #6
 800a3c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800a3c4:	e008      	b.n	800a3d8 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a3c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a3d2:	2307      	movs	r3, #7
 800a3d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800a3d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d134      	bne.n	800a44a <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe faef 	bl	80089ca <ld_clust>
 800a3ec:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a3ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a3f2:	f003 0310 	and.w	r3, r3, #16
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d027      	beq.n	800a44a <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800a3fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a400:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a402:	f107 0310 	add.w	r3, r7, #16
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe f957 	bl	80086bc <dir_sdi>
 800a40e:	4603      	mov	r3, r0
 800a410:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800a414:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d116      	bne.n	800a44a <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a41c:	f107 0310 	add.w	r3, r7, #16
 800a420:	2100      	movs	r1, #0
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fb10 	bl	8008a48 <dir_read>
 800a428:	4603      	mov	r3, r0
 800a42a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a42e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <f_unlink+0xec>
 800a436:	2307      	movs	r3, #7
 800a438:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a43c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a440:	2b04      	cmp	r3, #4
 800a442:	d102      	bne.n	800a44a <f_unlink+0xfa>
 800a444:	2300      	movs	r3, #0
 800a446:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800a44a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d123      	bne.n	800a49a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fbda 	bl	8008c10 <dir_remove>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a462:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10c      	bne.n	800a484 <f_unlink+0x134>
 800a46a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d009      	beq.n	800a484 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a474:	2200      	movs	r2, #0
 800a476:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd ffee 	bl	800845a <remove_chain>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a484:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <f_unlink+0x14a>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fd fdc2 	bl	8008018 <sync_fs>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a49a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3778      	adds	r7, #120	; 0x78
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a4be:	4b1f      	ldr	r3, [pc, #124]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4c0:	7a5b      	ldrb	r3, [r3, #9]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d131      	bne.n	800a52c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a4c8:	4b1c      	ldr	r3, [pc, #112]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4ca:	7a5b      	ldrb	r3, [r3, #9]
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a4d6:	4b19      	ldr	r3, [pc, #100]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4d8:	7a5b      	ldrb	r3, [r3, #9]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	4a17      	ldr	r2, [pc, #92]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a4e6:	4b15      	ldr	r3, [pc, #84]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4e8:	7a5b      	ldrb	r3, [r3, #9]
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4f0:	4413      	add	r3, r2
 800a4f2:	79fa      	ldrb	r2, [r7, #7]
 800a4f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a4f8:	7a5b      	ldrb	r3, [r3, #9]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	b2d1      	uxtb	r1, r2
 800a500:	4a0e      	ldr	r2, [pc, #56]	; (800a53c <FATFS_LinkDriverEx+0x94>)
 800a502:	7251      	strb	r1, [r2, #9]
 800a504:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a506:	7dbb      	ldrb	r3, [r7, #22]
 800a508:	3330      	adds	r3, #48	; 0x30
 800a50a:	b2da      	uxtb	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	3301      	adds	r3, #1
 800a514:	223a      	movs	r2, #58	; 0x3a
 800a516:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	3302      	adds	r3, #2
 800a51c:	222f      	movs	r2, #47	; 0x2f
 800a51e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	3303      	adds	r3, #3
 800a524:	2200      	movs	r2, #0
 800a526:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	20000da0 	.word	0x20000da0

0800a540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a54a:	2200      	movs	r2, #0
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff ffaa 	bl	800a4a8 <FATFS_LinkDriverEx>
 800a554:	4603      	mov	r3, r0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
	...

0800a560 <__errno>:
 800a560:	4b01      	ldr	r3, [pc, #4]	; (800a568 <__errno+0x8>)
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	20000010 	.word	0x20000010

0800a56c <__libc_init_array>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	4d0d      	ldr	r5, [pc, #52]	; (800a5a4 <__libc_init_array+0x38>)
 800a570:	4c0d      	ldr	r4, [pc, #52]	; (800a5a8 <__libc_init_array+0x3c>)
 800a572:	1b64      	subs	r4, r4, r5
 800a574:	10a4      	asrs	r4, r4, #2
 800a576:	2600      	movs	r6, #0
 800a578:	42a6      	cmp	r6, r4
 800a57a:	d109      	bne.n	800a590 <__libc_init_array+0x24>
 800a57c:	4d0b      	ldr	r5, [pc, #44]	; (800a5ac <__libc_init_array+0x40>)
 800a57e:	4c0c      	ldr	r4, [pc, #48]	; (800a5b0 <__libc_init_array+0x44>)
 800a580:	f000 fc9e 	bl	800aec0 <_init>
 800a584:	1b64      	subs	r4, r4, r5
 800a586:	10a4      	asrs	r4, r4, #2
 800a588:	2600      	movs	r6, #0
 800a58a:	42a6      	cmp	r6, r4
 800a58c:	d105      	bne.n	800a59a <__libc_init_array+0x2e>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	f855 3b04 	ldr.w	r3, [r5], #4
 800a594:	4798      	blx	r3
 800a596:	3601      	adds	r6, #1
 800a598:	e7ee      	b.n	800a578 <__libc_init_array+0xc>
 800a59a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a59e:	4798      	blx	r3
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	e7f2      	b.n	800a58a <__libc_init_array+0x1e>
 800a5a4:	0800b030 	.word	0x0800b030
 800a5a8:	0800b030 	.word	0x0800b030
 800a5ac:	0800b030 	.word	0x0800b030
 800a5b0:	0800b034 	.word	0x0800b034

0800a5b4 <malloc>:
 800a5b4:	4b02      	ldr	r3, [pc, #8]	; (800a5c0 <malloc+0xc>)
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	f000 b87f 	b.w	800a6bc <_malloc_r>
 800a5be:	bf00      	nop
 800a5c0:	20000010 	.word	0x20000010

0800a5c4 <free>:
 800a5c4:	4b02      	ldr	r3, [pc, #8]	; (800a5d0 <free+0xc>)
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	f000 b80b 	b.w	800a5e4 <_free_r>
 800a5ce:	bf00      	nop
 800a5d0:	20000010 	.word	0x20000010

0800a5d4 <memset>:
 800a5d4:	4402      	add	r2, r0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d100      	bne.n	800a5de <memset+0xa>
 800a5dc:	4770      	bx	lr
 800a5de:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e2:	e7f9      	b.n	800a5d8 <memset+0x4>

0800a5e4 <_free_r>:
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	d044      	beq.n	800a674 <_free_r+0x90>
 800a5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ee:	9001      	str	r0, [sp, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a5f6:	bfb8      	it	lt
 800a5f8:	18e4      	addlt	r4, r4, r3
 800a5fa:	f000 f903 	bl	800a804 <__malloc_lock>
 800a5fe:	4a1e      	ldr	r2, [pc, #120]	; (800a678 <_free_r+0x94>)
 800a600:	9801      	ldr	r0, [sp, #4]
 800a602:	6813      	ldr	r3, [r2, #0]
 800a604:	b933      	cbnz	r3, 800a614 <_free_r+0x30>
 800a606:	6063      	str	r3, [r4, #4]
 800a608:	6014      	str	r4, [r2, #0]
 800a60a:	b003      	add	sp, #12
 800a60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a610:	f000 b8fe 	b.w	800a810 <__malloc_unlock>
 800a614:	42a3      	cmp	r3, r4
 800a616:	d908      	bls.n	800a62a <_free_r+0x46>
 800a618:	6825      	ldr	r5, [r4, #0]
 800a61a:	1961      	adds	r1, r4, r5
 800a61c:	428b      	cmp	r3, r1
 800a61e:	bf01      	itttt	eq
 800a620:	6819      	ldreq	r1, [r3, #0]
 800a622:	685b      	ldreq	r3, [r3, #4]
 800a624:	1949      	addeq	r1, r1, r5
 800a626:	6021      	streq	r1, [r4, #0]
 800a628:	e7ed      	b.n	800a606 <_free_r+0x22>
 800a62a:	461a      	mov	r2, r3
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	b10b      	cbz	r3, 800a634 <_free_r+0x50>
 800a630:	42a3      	cmp	r3, r4
 800a632:	d9fa      	bls.n	800a62a <_free_r+0x46>
 800a634:	6811      	ldr	r1, [r2, #0]
 800a636:	1855      	adds	r5, r2, r1
 800a638:	42a5      	cmp	r5, r4
 800a63a:	d10b      	bne.n	800a654 <_free_r+0x70>
 800a63c:	6824      	ldr	r4, [r4, #0]
 800a63e:	4421      	add	r1, r4
 800a640:	1854      	adds	r4, r2, r1
 800a642:	42a3      	cmp	r3, r4
 800a644:	6011      	str	r1, [r2, #0]
 800a646:	d1e0      	bne.n	800a60a <_free_r+0x26>
 800a648:	681c      	ldr	r4, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	6053      	str	r3, [r2, #4]
 800a64e:	4421      	add	r1, r4
 800a650:	6011      	str	r1, [r2, #0]
 800a652:	e7da      	b.n	800a60a <_free_r+0x26>
 800a654:	d902      	bls.n	800a65c <_free_r+0x78>
 800a656:	230c      	movs	r3, #12
 800a658:	6003      	str	r3, [r0, #0]
 800a65a:	e7d6      	b.n	800a60a <_free_r+0x26>
 800a65c:	6825      	ldr	r5, [r4, #0]
 800a65e:	1961      	adds	r1, r4, r5
 800a660:	428b      	cmp	r3, r1
 800a662:	bf04      	itt	eq
 800a664:	6819      	ldreq	r1, [r3, #0]
 800a666:	685b      	ldreq	r3, [r3, #4]
 800a668:	6063      	str	r3, [r4, #4]
 800a66a:	bf04      	itt	eq
 800a66c:	1949      	addeq	r1, r1, r5
 800a66e:	6021      	streq	r1, [r4, #0]
 800a670:	6054      	str	r4, [r2, #4]
 800a672:	e7ca      	b.n	800a60a <_free_r+0x26>
 800a674:	b003      	add	sp, #12
 800a676:	bd30      	pop	{r4, r5, pc}
 800a678:	20000dac 	.word	0x20000dac

0800a67c <sbrk_aligned>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4e0e      	ldr	r6, [pc, #56]	; (800a6b8 <sbrk_aligned+0x3c>)
 800a680:	460c      	mov	r4, r1
 800a682:	6831      	ldr	r1, [r6, #0]
 800a684:	4605      	mov	r5, r0
 800a686:	b911      	cbnz	r1, 800a68e <sbrk_aligned+0x12>
 800a688:	f000 f88c 	bl	800a7a4 <_sbrk_r>
 800a68c:	6030      	str	r0, [r6, #0]
 800a68e:	4621      	mov	r1, r4
 800a690:	4628      	mov	r0, r5
 800a692:	f000 f887 	bl	800a7a4 <_sbrk_r>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	d00a      	beq.n	800a6b0 <sbrk_aligned+0x34>
 800a69a:	1cc4      	adds	r4, r0, #3
 800a69c:	f024 0403 	bic.w	r4, r4, #3
 800a6a0:	42a0      	cmp	r0, r4
 800a6a2:	d007      	beq.n	800a6b4 <sbrk_aligned+0x38>
 800a6a4:	1a21      	subs	r1, r4, r0
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f000 f87c 	bl	800a7a4 <_sbrk_r>
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d101      	bne.n	800a6b4 <sbrk_aligned+0x38>
 800a6b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	20000db0 	.word	0x20000db0

0800a6bc <_malloc_r>:
 800a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c0:	1ccd      	adds	r5, r1, #3
 800a6c2:	f025 0503 	bic.w	r5, r5, #3
 800a6c6:	3508      	adds	r5, #8
 800a6c8:	2d0c      	cmp	r5, #12
 800a6ca:	bf38      	it	cc
 800a6cc:	250c      	movcc	r5, #12
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	db01      	blt.n	800a6d8 <_malloc_r+0x1c>
 800a6d4:	42a9      	cmp	r1, r5
 800a6d6:	d905      	bls.n	800a6e4 <_malloc_r+0x28>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	2600      	movs	r6, #0
 800a6de:	4630      	mov	r0, r6
 800a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e4:	4e2e      	ldr	r6, [pc, #184]	; (800a7a0 <_malloc_r+0xe4>)
 800a6e6:	f000 f88d 	bl	800a804 <__malloc_lock>
 800a6ea:	6833      	ldr	r3, [r6, #0]
 800a6ec:	461c      	mov	r4, r3
 800a6ee:	bb34      	cbnz	r4, 800a73e <_malloc_r+0x82>
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	f7ff ffc2 	bl	800a67c <sbrk_aligned>
 800a6f8:	1c43      	adds	r3, r0, #1
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	d14d      	bne.n	800a79a <_malloc_r+0xde>
 800a6fe:	6834      	ldr	r4, [r6, #0]
 800a700:	4626      	mov	r6, r4
 800a702:	2e00      	cmp	r6, #0
 800a704:	d140      	bne.n	800a788 <_malloc_r+0xcc>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	4631      	mov	r1, r6
 800a70a:	4638      	mov	r0, r7
 800a70c:	eb04 0803 	add.w	r8, r4, r3
 800a710:	f000 f848 	bl	800a7a4 <_sbrk_r>
 800a714:	4580      	cmp	r8, r0
 800a716:	d13a      	bne.n	800a78e <_malloc_r+0xd2>
 800a718:	6821      	ldr	r1, [r4, #0]
 800a71a:	3503      	adds	r5, #3
 800a71c:	1a6d      	subs	r5, r5, r1
 800a71e:	f025 0503 	bic.w	r5, r5, #3
 800a722:	3508      	adds	r5, #8
 800a724:	2d0c      	cmp	r5, #12
 800a726:	bf38      	it	cc
 800a728:	250c      	movcc	r5, #12
 800a72a:	4629      	mov	r1, r5
 800a72c:	4638      	mov	r0, r7
 800a72e:	f7ff ffa5 	bl	800a67c <sbrk_aligned>
 800a732:	3001      	adds	r0, #1
 800a734:	d02b      	beq.n	800a78e <_malloc_r+0xd2>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	442b      	add	r3, r5
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	e00e      	b.n	800a75c <_malloc_r+0xa0>
 800a73e:	6822      	ldr	r2, [r4, #0]
 800a740:	1b52      	subs	r2, r2, r5
 800a742:	d41e      	bmi.n	800a782 <_malloc_r+0xc6>
 800a744:	2a0b      	cmp	r2, #11
 800a746:	d916      	bls.n	800a776 <_malloc_r+0xba>
 800a748:	1961      	adds	r1, r4, r5
 800a74a:	42a3      	cmp	r3, r4
 800a74c:	6025      	str	r5, [r4, #0]
 800a74e:	bf18      	it	ne
 800a750:	6059      	strne	r1, [r3, #4]
 800a752:	6863      	ldr	r3, [r4, #4]
 800a754:	bf08      	it	eq
 800a756:	6031      	streq	r1, [r6, #0]
 800a758:	5162      	str	r2, [r4, r5]
 800a75a:	604b      	str	r3, [r1, #4]
 800a75c:	4638      	mov	r0, r7
 800a75e:	f104 060b 	add.w	r6, r4, #11
 800a762:	f000 f855 	bl	800a810 <__malloc_unlock>
 800a766:	f026 0607 	bic.w	r6, r6, #7
 800a76a:	1d23      	adds	r3, r4, #4
 800a76c:	1af2      	subs	r2, r6, r3
 800a76e:	d0b6      	beq.n	800a6de <_malloc_r+0x22>
 800a770:	1b9b      	subs	r3, r3, r6
 800a772:	50a3      	str	r3, [r4, r2]
 800a774:	e7b3      	b.n	800a6de <_malloc_r+0x22>
 800a776:	6862      	ldr	r2, [r4, #4]
 800a778:	42a3      	cmp	r3, r4
 800a77a:	bf0c      	ite	eq
 800a77c:	6032      	streq	r2, [r6, #0]
 800a77e:	605a      	strne	r2, [r3, #4]
 800a780:	e7ec      	b.n	800a75c <_malloc_r+0xa0>
 800a782:	4623      	mov	r3, r4
 800a784:	6864      	ldr	r4, [r4, #4]
 800a786:	e7b2      	b.n	800a6ee <_malloc_r+0x32>
 800a788:	4634      	mov	r4, r6
 800a78a:	6876      	ldr	r6, [r6, #4]
 800a78c:	e7b9      	b.n	800a702 <_malloc_r+0x46>
 800a78e:	230c      	movs	r3, #12
 800a790:	603b      	str	r3, [r7, #0]
 800a792:	4638      	mov	r0, r7
 800a794:	f000 f83c 	bl	800a810 <__malloc_unlock>
 800a798:	e7a1      	b.n	800a6de <_malloc_r+0x22>
 800a79a:	6025      	str	r5, [r4, #0]
 800a79c:	e7de      	b.n	800a75c <_malloc_r+0xa0>
 800a79e:	bf00      	nop
 800a7a0:	20000dac 	.word	0x20000dac

0800a7a4 <_sbrk_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d06      	ldr	r5, [pc, #24]	; (800a7c0 <_sbrk_r+0x1c>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	f7f6 fe64 	bl	800147c <_sbrk>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_sbrk_r+0x1a>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_sbrk_r+0x1a>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20000db4 	.word	0x20000db4

0800a7c4 <siprintf>:
 800a7c4:	b40e      	push	{r1, r2, r3}
 800a7c6:	b500      	push	{lr}
 800a7c8:	b09c      	sub	sp, #112	; 0x70
 800a7ca:	ab1d      	add	r3, sp, #116	; 0x74
 800a7cc:	9002      	str	r0, [sp, #8]
 800a7ce:	9006      	str	r0, [sp, #24]
 800a7d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7d4:	4809      	ldr	r0, [pc, #36]	; (800a7fc <siprintf+0x38>)
 800a7d6:	9107      	str	r1, [sp, #28]
 800a7d8:	9104      	str	r1, [sp, #16]
 800a7da:	4909      	ldr	r1, [pc, #36]	; (800a800 <siprintf+0x3c>)
 800a7dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e0:	9105      	str	r1, [sp, #20]
 800a7e2:	6800      	ldr	r0, [r0, #0]
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	a902      	add	r1, sp, #8
 800a7e8:	f000 f874 	bl	800a8d4 <_svfiprintf_r>
 800a7ec:	9b02      	ldr	r3, [sp, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	b01c      	add	sp, #112	; 0x70
 800a7f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f8:	b003      	add	sp, #12
 800a7fa:	4770      	bx	lr
 800a7fc:	20000010 	.word	0x20000010
 800a800:	ffff0208 	.word	0xffff0208

0800a804 <__malloc_lock>:
 800a804:	4801      	ldr	r0, [pc, #4]	; (800a80c <__malloc_lock+0x8>)
 800a806:	f000 baf9 	b.w	800adfc <__retarget_lock_acquire_recursive>
 800a80a:	bf00      	nop
 800a80c:	20000db8 	.word	0x20000db8

0800a810 <__malloc_unlock>:
 800a810:	4801      	ldr	r0, [pc, #4]	; (800a818 <__malloc_unlock+0x8>)
 800a812:	f000 baf4 	b.w	800adfe <__retarget_lock_release_recursive>
 800a816:	bf00      	nop
 800a818:	20000db8 	.word	0x20000db8

0800a81c <__ssputs_r>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	688e      	ldr	r6, [r1, #8]
 800a822:	429e      	cmp	r6, r3
 800a824:	4682      	mov	sl, r0
 800a826:	460c      	mov	r4, r1
 800a828:	4690      	mov	r8, r2
 800a82a:	461f      	mov	r7, r3
 800a82c:	d838      	bhi.n	800a8a0 <__ssputs_r+0x84>
 800a82e:	898a      	ldrh	r2, [r1, #12]
 800a830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a834:	d032      	beq.n	800a89c <__ssputs_r+0x80>
 800a836:	6825      	ldr	r5, [r4, #0]
 800a838:	6909      	ldr	r1, [r1, #16]
 800a83a:	eba5 0901 	sub.w	r9, r5, r1
 800a83e:	6965      	ldr	r5, [r4, #20]
 800a840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a848:	3301      	adds	r3, #1
 800a84a:	444b      	add	r3, r9
 800a84c:	106d      	asrs	r5, r5, #1
 800a84e:	429d      	cmp	r5, r3
 800a850:	bf38      	it	cc
 800a852:	461d      	movcc	r5, r3
 800a854:	0553      	lsls	r3, r2, #21
 800a856:	d531      	bpl.n	800a8bc <__ssputs_r+0xa0>
 800a858:	4629      	mov	r1, r5
 800a85a:	f7ff ff2f 	bl	800a6bc <_malloc_r>
 800a85e:	4606      	mov	r6, r0
 800a860:	b950      	cbnz	r0, 800a878 <__ssputs_r+0x5c>
 800a862:	230c      	movs	r3, #12
 800a864:	f8ca 3000 	str.w	r3, [sl]
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a878:	6921      	ldr	r1, [r4, #16]
 800a87a:	464a      	mov	r2, r9
 800a87c:	f000 fac0 	bl	800ae00 <memcpy>
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	6126      	str	r6, [r4, #16]
 800a88e:	6165      	str	r5, [r4, #20]
 800a890:	444e      	add	r6, r9
 800a892:	eba5 0509 	sub.w	r5, r5, r9
 800a896:	6026      	str	r6, [r4, #0]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	463e      	mov	r6, r7
 800a89c:	42be      	cmp	r6, r7
 800a89e:	d900      	bls.n	800a8a2 <__ssputs_r+0x86>
 800a8a0:	463e      	mov	r6, r7
 800a8a2:	6820      	ldr	r0, [r4, #0]
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	f000 fab8 	bl	800ae1c <memmove>
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	1b9b      	subs	r3, r3, r6
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	6823      	ldr	r3, [r4, #0]
 800a8b4:	4433      	add	r3, r6
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7db      	b.n	800a874 <__ssputs_r+0x58>
 800a8bc:	462a      	mov	r2, r5
 800a8be:	f000 fac7 	bl	800ae50 <_realloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d1e1      	bne.n	800a88c <__ssputs_r+0x70>
 800a8c8:	6921      	ldr	r1, [r4, #16]
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	f7ff fe8a 	bl	800a5e4 <_free_r>
 800a8d0:	e7c7      	b.n	800a862 <__ssputs_r+0x46>
	...

0800a8d4 <_svfiprintf_r>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4698      	mov	r8, r3
 800a8da:	898b      	ldrh	r3, [r1, #12]
 800a8dc:	061b      	lsls	r3, r3, #24
 800a8de:	b09d      	sub	sp, #116	; 0x74
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	d50e      	bpl.n	800a906 <_svfiprintf_r+0x32>
 800a8e8:	690b      	ldr	r3, [r1, #16]
 800a8ea:	b963      	cbnz	r3, 800a906 <_svfiprintf_r+0x32>
 800a8ec:	2140      	movs	r1, #64	; 0x40
 800a8ee:	f7ff fee5 	bl	800a6bc <_malloc_r>
 800a8f2:	6028      	str	r0, [r5, #0]
 800a8f4:	6128      	str	r0, [r5, #16]
 800a8f6:	b920      	cbnz	r0, 800a902 <_svfiprintf_r+0x2e>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	603b      	str	r3, [r7, #0]
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a900:	e0d1      	b.n	800aaa6 <_svfiprintf_r+0x1d2>
 800a902:	2340      	movs	r3, #64	; 0x40
 800a904:	616b      	str	r3, [r5, #20]
 800a906:	2300      	movs	r3, #0
 800a908:	9309      	str	r3, [sp, #36]	; 0x24
 800a90a:	2320      	movs	r3, #32
 800a90c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a910:	f8cd 800c 	str.w	r8, [sp, #12]
 800a914:	2330      	movs	r3, #48	; 0x30
 800a916:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aac0 <_svfiprintf_r+0x1ec>
 800a91a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a91e:	f04f 0901 	mov.w	r9, #1
 800a922:	4623      	mov	r3, r4
 800a924:	469a      	mov	sl, r3
 800a926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92a:	b10a      	cbz	r2, 800a930 <_svfiprintf_r+0x5c>
 800a92c:	2a25      	cmp	r2, #37	; 0x25
 800a92e:	d1f9      	bne.n	800a924 <_svfiprintf_r+0x50>
 800a930:	ebba 0b04 	subs.w	fp, sl, r4
 800a934:	d00b      	beq.n	800a94e <_svfiprintf_r+0x7a>
 800a936:	465b      	mov	r3, fp
 800a938:	4622      	mov	r2, r4
 800a93a:	4629      	mov	r1, r5
 800a93c:	4638      	mov	r0, r7
 800a93e:	f7ff ff6d 	bl	800a81c <__ssputs_r>
 800a942:	3001      	adds	r0, #1
 800a944:	f000 80aa 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94a:	445a      	add	r2, fp
 800a94c:	9209      	str	r2, [sp, #36]	; 0x24
 800a94e:	f89a 3000 	ldrb.w	r3, [sl]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 80a2 	beq.w	800aa9c <_svfiprintf_r+0x1c8>
 800a958:	2300      	movs	r3, #0
 800a95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a95e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a962:	f10a 0a01 	add.w	sl, sl, #1
 800a966:	9304      	str	r3, [sp, #16]
 800a968:	9307      	str	r3, [sp, #28]
 800a96a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a96e:	931a      	str	r3, [sp, #104]	; 0x68
 800a970:	4654      	mov	r4, sl
 800a972:	2205      	movs	r2, #5
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4851      	ldr	r0, [pc, #324]	; (800aac0 <_svfiprintf_r+0x1ec>)
 800a97a:	f7f5 fc59 	bl	8000230 <memchr>
 800a97e:	9a04      	ldr	r2, [sp, #16]
 800a980:	b9d8      	cbnz	r0, 800a9ba <_svfiprintf_r+0xe6>
 800a982:	06d0      	lsls	r0, r2, #27
 800a984:	bf44      	itt	mi
 800a986:	2320      	movmi	r3, #32
 800a988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98c:	0711      	lsls	r1, r2, #28
 800a98e:	bf44      	itt	mi
 800a990:	232b      	movmi	r3, #43	; 0x2b
 800a992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a996:	f89a 3000 	ldrb.w	r3, [sl]
 800a99a:	2b2a      	cmp	r3, #42	; 0x2a
 800a99c:	d015      	beq.n	800a9ca <_svfiprintf_r+0xf6>
 800a99e:	9a07      	ldr	r2, [sp, #28]
 800a9a0:	4654      	mov	r4, sl
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f04f 0c0a 	mov.w	ip, #10
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ae:	3b30      	subs	r3, #48	; 0x30
 800a9b0:	2b09      	cmp	r3, #9
 800a9b2:	d94e      	bls.n	800aa52 <_svfiprintf_r+0x17e>
 800a9b4:	b1b0      	cbz	r0, 800a9e4 <_svfiprintf_r+0x110>
 800a9b6:	9207      	str	r2, [sp, #28]
 800a9b8:	e014      	b.n	800a9e4 <_svfiprintf_r+0x110>
 800a9ba:	eba0 0308 	sub.w	r3, r0, r8
 800a9be:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	9304      	str	r3, [sp, #16]
 800a9c6:	46a2      	mov	sl, r4
 800a9c8:	e7d2      	b.n	800a970 <_svfiprintf_r+0x9c>
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	9103      	str	r1, [sp, #12]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	bfbb      	ittet	lt
 800a9d6:	425b      	neglt	r3, r3
 800a9d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a9dc:	9307      	strge	r3, [sp, #28]
 800a9de:	9307      	strlt	r3, [sp, #28]
 800a9e0:	bfb8      	it	lt
 800a9e2:	9204      	strlt	r2, [sp, #16]
 800a9e4:	7823      	ldrb	r3, [r4, #0]
 800a9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e8:	d10c      	bne.n	800aa04 <_svfiprintf_r+0x130>
 800a9ea:	7863      	ldrb	r3, [r4, #1]
 800a9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a9ee:	d135      	bne.n	800aa5c <_svfiprintf_r+0x188>
 800a9f0:	9b03      	ldr	r3, [sp, #12]
 800a9f2:	1d1a      	adds	r2, r3, #4
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	9203      	str	r2, [sp, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bfb8      	it	lt
 800a9fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa00:	3402      	adds	r4, #2
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad0 <_svfiprintf_r+0x1fc>
 800aa08:	7821      	ldrb	r1, [r4, #0]
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	4650      	mov	r0, sl
 800aa0e:	f7f5 fc0f 	bl	8000230 <memchr>
 800aa12:	b140      	cbz	r0, 800aa26 <_svfiprintf_r+0x152>
 800aa14:	2340      	movs	r3, #64	; 0x40
 800aa16:	eba0 000a 	sub.w	r0, r0, sl
 800aa1a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	4303      	orrs	r3, r0
 800aa22:	3401      	adds	r4, #1
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4826      	ldr	r0, [pc, #152]	; (800aac4 <_svfiprintf_r+0x1f0>)
 800aa2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa30:	2206      	movs	r2, #6
 800aa32:	f7f5 fbfd 	bl	8000230 <memchr>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d038      	beq.n	800aaac <_svfiprintf_r+0x1d8>
 800aa3a:	4b23      	ldr	r3, [pc, #140]	; (800aac8 <_svfiprintf_r+0x1f4>)
 800aa3c:	bb1b      	cbnz	r3, 800aa86 <_svfiprintf_r+0x1b2>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	3308      	adds	r3, #8
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	4433      	add	r3, r6
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e767      	b.n	800a922 <_svfiprintf_r+0x4e>
 800aa52:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa56:	460c      	mov	r4, r1
 800aa58:	2001      	movs	r0, #1
 800aa5a:	e7a5      	b.n	800a9a8 <_svfiprintf_r+0xd4>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	3401      	adds	r4, #1
 800aa60:	9305      	str	r3, [sp, #20]
 800aa62:	4619      	mov	r1, r3
 800aa64:	f04f 0c0a 	mov.w	ip, #10
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6e:	3a30      	subs	r2, #48	; 0x30
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d903      	bls.n	800aa7c <_svfiprintf_r+0x1a8>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c5      	beq.n	800aa04 <_svfiprintf_r+0x130>
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	e7c3      	b.n	800aa04 <_svfiprintf_r+0x130>
 800aa7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa80:	4604      	mov	r4, r0
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7f0      	b.n	800aa68 <_svfiprintf_r+0x194>
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aa8e:	a904      	add	r1, sp, #16
 800aa90:	4638      	mov	r0, r7
 800aa92:	f3af 8000 	nop.w
 800aa96:	1c42      	adds	r2, r0, #1
 800aa98:	4606      	mov	r6, r0
 800aa9a:	d1d6      	bne.n	800aa4a <_svfiprintf_r+0x176>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af2c 	bmi.w	800a8fc <_svfiprintf_r+0x28>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	b01d      	add	sp, #116	; 0x74
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	ab03      	add	r3, sp, #12
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	462a      	mov	r2, r5
 800aab2:	4b06      	ldr	r3, [pc, #24]	; (800aacc <_svfiprintf_r+0x1f8>)
 800aab4:	a904      	add	r1, sp, #16
 800aab6:	4638      	mov	r0, r7
 800aab8:	f000 f87a 	bl	800abb0 <_printf_i>
 800aabc:	e7eb      	b.n	800aa96 <_svfiprintf_r+0x1c2>
 800aabe:	bf00      	nop
 800aac0:	0800aff4 	.word	0x0800aff4
 800aac4:	0800affe 	.word	0x0800affe
 800aac8:	00000000 	.word	0x00000000
 800aacc:	0800a81d 	.word	0x0800a81d
 800aad0:	0800affa 	.word	0x0800affa

0800aad4 <_printf_common>:
 800aad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad8:	4616      	mov	r6, r2
 800aada:	4699      	mov	r9, r3
 800aadc:	688a      	ldr	r2, [r1, #8]
 800aade:	690b      	ldr	r3, [r1, #16]
 800aae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aae4:	4293      	cmp	r3, r2
 800aae6:	bfb8      	it	lt
 800aae8:	4613      	movlt	r3, r2
 800aaea:	6033      	str	r3, [r6, #0]
 800aaec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b10a      	cbz	r2, 800aafa <_printf_common+0x26>
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	6033      	str	r3, [r6, #0]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	0699      	lsls	r1, r3, #26
 800aafe:	bf42      	ittt	mi
 800ab00:	6833      	ldrmi	r3, [r6, #0]
 800ab02:	3302      	addmi	r3, #2
 800ab04:	6033      	strmi	r3, [r6, #0]
 800ab06:	6825      	ldr	r5, [r4, #0]
 800ab08:	f015 0506 	ands.w	r5, r5, #6
 800ab0c:	d106      	bne.n	800ab1c <_printf_common+0x48>
 800ab0e:	f104 0a19 	add.w	sl, r4, #25
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	6832      	ldr	r2, [r6, #0]
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	42ab      	cmp	r3, r5
 800ab1a:	dc26      	bgt.n	800ab6a <_printf_common+0x96>
 800ab1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab20:	1e13      	subs	r3, r2, #0
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	bf18      	it	ne
 800ab26:	2301      	movne	r3, #1
 800ab28:	0692      	lsls	r2, r2, #26
 800ab2a:	d42b      	bmi.n	800ab84 <_printf_common+0xb0>
 800ab2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab30:	4649      	mov	r1, r9
 800ab32:	4638      	mov	r0, r7
 800ab34:	47c0      	blx	r8
 800ab36:	3001      	adds	r0, #1
 800ab38:	d01e      	beq.n	800ab78 <_printf_common+0xa4>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	68e5      	ldr	r5, [r4, #12]
 800ab3e:	6832      	ldr	r2, [r6, #0]
 800ab40:	f003 0306 	and.w	r3, r3, #6
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	bf08      	it	eq
 800ab48:	1aad      	subeq	r5, r5, r2
 800ab4a:	68a3      	ldr	r3, [r4, #8]
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	bf0c      	ite	eq
 800ab50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab54:	2500      	movne	r5, #0
 800ab56:	4293      	cmp	r3, r2
 800ab58:	bfc4      	itt	gt
 800ab5a:	1a9b      	subgt	r3, r3, r2
 800ab5c:	18ed      	addgt	r5, r5, r3
 800ab5e:	2600      	movs	r6, #0
 800ab60:	341a      	adds	r4, #26
 800ab62:	42b5      	cmp	r5, r6
 800ab64:	d11a      	bne.n	800ab9c <_printf_common+0xc8>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e008      	b.n	800ab7c <_printf_common+0xa8>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	4649      	mov	r1, r9
 800ab70:	4638      	mov	r0, r7
 800ab72:	47c0      	blx	r8
 800ab74:	3001      	adds	r0, #1
 800ab76:	d103      	bne.n	800ab80 <_printf_common+0xac>
 800ab78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab80:	3501      	adds	r5, #1
 800ab82:	e7c6      	b.n	800ab12 <_printf_common+0x3e>
 800ab84:	18e1      	adds	r1, r4, r3
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	2030      	movs	r0, #48	; 0x30
 800ab8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab8e:	4422      	add	r2, r4
 800ab90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab98:	3302      	adds	r3, #2
 800ab9a:	e7c7      	b.n	800ab2c <_printf_common+0x58>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	4622      	mov	r2, r4
 800aba0:	4649      	mov	r1, r9
 800aba2:	4638      	mov	r0, r7
 800aba4:	47c0      	blx	r8
 800aba6:	3001      	adds	r0, #1
 800aba8:	d0e6      	beq.n	800ab78 <_printf_common+0xa4>
 800abaa:	3601      	adds	r6, #1
 800abac:	e7d9      	b.n	800ab62 <_printf_common+0x8e>
	...

0800abb0 <_printf_i>:
 800abb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb4:	7e0f      	ldrb	r7, [r1, #24]
 800abb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abb8:	2f78      	cmp	r7, #120	; 0x78
 800abba:	4691      	mov	r9, r2
 800abbc:	4680      	mov	r8, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	469a      	mov	sl, r3
 800abc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abc6:	d807      	bhi.n	800abd8 <_printf_i+0x28>
 800abc8:	2f62      	cmp	r7, #98	; 0x62
 800abca:	d80a      	bhi.n	800abe2 <_printf_i+0x32>
 800abcc:	2f00      	cmp	r7, #0
 800abce:	f000 80d8 	beq.w	800ad82 <_printf_i+0x1d2>
 800abd2:	2f58      	cmp	r7, #88	; 0x58
 800abd4:	f000 80a3 	beq.w	800ad1e <_printf_i+0x16e>
 800abd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abe0:	e03a      	b.n	800ac58 <_printf_i+0xa8>
 800abe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abe6:	2b15      	cmp	r3, #21
 800abe8:	d8f6      	bhi.n	800abd8 <_printf_i+0x28>
 800abea:	a101      	add	r1, pc, #4	; (adr r1, 800abf0 <_printf_i+0x40>)
 800abec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abf0:	0800ac49 	.word	0x0800ac49
 800abf4:	0800ac5d 	.word	0x0800ac5d
 800abf8:	0800abd9 	.word	0x0800abd9
 800abfc:	0800abd9 	.word	0x0800abd9
 800ac00:	0800abd9 	.word	0x0800abd9
 800ac04:	0800abd9 	.word	0x0800abd9
 800ac08:	0800ac5d 	.word	0x0800ac5d
 800ac0c:	0800abd9 	.word	0x0800abd9
 800ac10:	0800abd9 	.word	0x0800abd9
 800ac14:	0800abd9 	.word	0x0800abd9
 800ac18:	0800abd9 	.word	0x0800abd9
 800ac1c:	0800ad69 	.word	0x0800ad69
 800ac20:	0800ac8d 	.word	0x0800ac8d
 800ac24:	0800ad4b 	.word	0x0800ad4b
 800ac28:	0800abd9 	.word	0x0800abd9
 800ac2c:	0800abd9 	.word	0x0800abd9
 800ac30:	0800ad8b 	.word	0x0800ad8b
 800ac34:	0800abd9 	.word	0x0800abd9
 800ac38:	0800ac8d 	.word	0x0800ac8d
 800ac3c:	0800abd9 	.word	0x0800abd9
 800ac40:	0800abd9 	.word	0x0800abd9
 800ac44:	0800ad53 	.word	0x0800ad53
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	602a      	str	r2, [r5, #0]
 800ac50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e0a3      	b.n	800ada4 <_printf_i+0x1f4>
 800ac5c:	6820      	ldr	r0, [r4, #0]
 800ac5e:	6829      	ldr	r1, [r5, #0]
 800ac60:	0606      	lsls	r6, r0, #24
 800ac62:	f101 0304 	add.w	r3, r1, #4
 800ac66:	d50a      	bpl.n	800ac7e <_printf_i+0xce>
 800ac68:	680e      	ldr	r6, [r1, #0]
 800ac6a:	602b      	str	r3, [r5, #0]
 800ac6c:	2e00      	cmp	r6, #0
 800ac6e:	da03      	bge.n	800ac78 <_printf_i+0xc8>
 800ac70:	232d      	movs	r3, #45	; 0x2d
 800ac72:	4276      	negs	r6, r6
 800ac74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac78:	485e      	ldr	r0, [pc, #376]	; (800adf4 <_printf_i+0x244>)
 800ac7a:	230a      	movs	r3, #10
 800ac7c:	e019      	b.n	800acb2 <_printf_i+0x102>
 800ac7e:	680e      	ldr	r6, [r1, #0]
 800ac80:	602b      	str	r3, [r5, #0]
 800ac82:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac86:	bf18      	it	ne
 800ac88:	b236      	sxthne	r6, r6
 800ac8a:	e7ef      	b.n	800ac6c <_printf_i+0xbc>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	1d19      	adds	r1, r3, #4
 800ac92:	6029      	str	r1, [r5, #0]
 800ac94:	0601      	lsls	r1, r0, #24
 800ac96:	d501      	bpl.n	800ac9c <_printf_i+0xec>
 800ac98:	681e      	ldr	r6, [r3, #0]
 800ac9a:	e002      	b.n	800aca2 <_printf_i+0xf2>
 800ac9c:	0646      	lsls	r6, r0, #25
 800ac9e:	d5fb      	bpl.n	800ac98 <_printf_i+0xe8>
 800aca0:	881e      	ldrh	r6, [r3, #0]
 800aca2:	4854      	ldr	r0, [pc, #336]	; (800adf4 <_printf_i+0x244>)
 800aca4:	2f6f      	cmp	r7, #111	; 0x6f
 800aca6:	bf0c      	ite	eq
 800aca8:	2308      	moveq	r3, #8
 800acaa:	230a      	movne	r3, #10
 800acac:	2100      	movs	r1, #0
 800acae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acb2:	6865      	ldr	r5, [r4, #4]
 800acb4:	60a5      	str	r5, [r4, #8]
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	bfa2      	ittt	ge
 800acba:	6821      	ldrge	r1, [r4, #0]
 800acbc:	f021 0104 	bicge.w	r1, r1, #4
 800acc0:	6021      	strge	r1, [r4, #0]
 800acc2:	b90e      	cbnz	r6, 800acc8 <_printf_i+0x118>
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	d04d      	beq.n	800ad64 <_printf_i+0x1b4>
 800acc8:	4615      	mov	r5, r2
 800acca:	fbb6 f1f3 	udiv	r1, r6, r3
 800acce:	fb03 6711 	mls	r7, r3, r1, r6
 800acd2:	5dc7      	ldrb	r7, [r0, r7]
 800acd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acd8:	4637      	mov	r7, r6
 800acda:	42bb      	cmp	r3, r7
 800acdc:	460e      	mov	r6, r1
 800acde:	d9f4      	bls.n	800acca <_printf_i+0x11a>
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d10b      	bne.n	800acfc <_printf_i+0x14c>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	07de      	lsls	r6, r3, #31
 800ace8:	d508      	bpl.n	800acfc <_printf_i+0x14c>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6861      	ldr	r1, [r4, #4]
 800acee:	4299      	cmp	r1, r3
 800acf0:	bfde      	ittt	le
 800acf2:	2330      	movle	r3, #48	; 0x30
 800acf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800acfc:	1b52      	subs	r2, r2, r5
 800acfe:	6122      	str	r2, [r4, #16]
 800ad00:	f8cd a000 	str.w	sl, [sp]
 800ad04:	464b      	mov	r3, r9
 800ad06:	aa03      	add	r2, sp, #12
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f7ff fee2 	bl	800aad4 <_printf_common>
 800ad10:	3001      	adds	r0, #1
 800ad12:	d14c      	bne.n	800adae <_printf_i+0x1fe>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad18:	b004      	add	sp, #16
 800ad1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1e:	4835      	ldr	r0, [pc, #212]	; (800adf4 <_printf_i+0x244>)
 800ad20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad24:	6829      	ldr	r1, [r5, #0]
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad2c:	6029      	str	r1, [r5, #0]
 800ad2e:	061d      	lsls	r5, r3, #24
 800ad30:	d514      	bpl.n	800ad5c <_printf_i+0x1ac>
 800ad32:	07df      	lsls	r7, r3, #31
 800ad34:	bf44      	itt	mi
 800ad36:	f043 0320 	orrmi.w	r3, r3, #32
 800ad3a:	6023      	strmi	r3, [r4, #0]
 800ad3c:	b91e      	cbnz	r6, 800ad46 <_printf_i+0x196>
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	f023 0320 	bic.w	r3, r3, #32
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	2310      	movs	r3, #16
 800ad48:	e7b0      	b.n	800acac <_printf_i+0xfc>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	f043 0320 	orr.w	r3, r3, #32
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	2378      	movs	r3, #120	; 0x78
 800ad54:	4828      	ldr	r0, [pc, #160]	; (800adf8 <_printf_i+0x248>)
 800ad56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad5a:	e7e3      	b.n	800ad24 <_printf_i+0x174>
 800ad5c:	0659      	lsls	r1, r3, #25
 800ad5e:	bf48      	it	mi
 800ad60:	b2b6      	uxthmi	r6, r6
 800ad62:	e7e6      	b.n	800ad32 <_printf_i+0x182>
 800ad64:	4615      	mov	r5, r2
 800ad66:	e7bb      	b.n	800ace0 <_printf_i+0x130>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	6826      	ldr	r6, [r4, #0]
 800ad6c:	6961      	ldr	r1, [r4, #20]
 800ad6e:	1d18      	adds	r0, r3, #4
 800ad70:	6028      	str	r0, [r5, #0]
 800ad72:	0635      	lsls	r5, r6, #24
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	d501      	bpl.n	800ad7c <_printf_i+0x1cc>
 800ad78:	6019      	str	r1, [r3, #0]
 800ad7a:	e002      	b.n	800ad82 <_printf_i+0x1d2>
 800ad7c:	0670      	lsls	r0, r6, #25
 800ad7e:	d5fb      	bpl.n	800ad78 <_printf_i+0x1c8>
 800ad80:	8019      	strh	r1, [r3, #0]
 800ad82:	2300      	movs	r3, #0
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	4615      	mov	r5, r2
 800ad88:	e7ba      	b.n	800ad00 <_printf_i+0x150>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	1d1a      	adds	r2, r3, #4
 800ad8e:	602a      	str	r2, [r5, #0]
 800ad90:	681d      	ldr	r5, [r3, #0]
 800ad92:	6862      	ldr	r2, [r4, #4]
 800ad94:	2100      	movs	r1, #0
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7f5 fa4a 	bl	8000230 <memchr>
 800ad9c:	b108      	cbz	r0, 800ada2 <_printf_i+0x1f2>
 800ad9e:	1b40      	subs	r0, r0, r5
 800ada0:	6060      	str	r0, [r4, #4]
 800ada2:	6863      	ldr	r3, [r4, #4]
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	2300      	movs	r3, #0
 800ada8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adac:	e7a8      	b.n	800ad00 <_printf_i+0x150>
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	462a      	mov	r2, r5
 800adb2:	4649      	mov	r1, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	47d0      	blx	sl
 800adb8:	3001      	adds	r0, #1
 800adba:	d0ab      	beq.n	800ad14 <_printf_i+0x164>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	079b      	lsls	r3, r3, #30
 800adc0:	d413      	bmi.n	800adea <_printf_i+0x23a>
 800adc2:	68e0      	ldr	r0, [r4, #12]
 800adc4:	9b03      	ldr	r3, [sp, #12]
 800adc6:	4298      	cmp	r0, r3
 800adc8:	bfb8      	it	lt
 800adca:	4618      	movlt	r0, r3
 800adcc:	e7a4      	b.n	800ad18 <_printf_i+0x168>
 800adce:	2301      	movs	r3, #1
 800add0:	4632      	mov	r2, r6
 800add2:	4649      	mov	r1, r9
 800add4:	4640      	mov	r0, r8
 800add6:	47d0      	blx	sl
 800add8:	3001      	adds	r0, #1
 800adda:	d09b      	beq.n	800ad14 <_printf_i+0x164>
 800addc:	3501      	adds	r5, #1
 800adde:	68e3      	ldr	r3, [r4, #12]
 800ade0:	9903      	ldr	r1, [sp, #12]
 800ade2:	1a5b      	subs	r3, r3, r1
 800ade4:	42ab      	cmp	r3, r5
 800ade6:	dcf2      	bgt.n	800adce <_printf_i+0x21e>
 800ade8:	e7eb      	b.n	800adc2 <_printf_i+0x212>
 800adea:	2500      	movs	r5, #0
 800adec:	f104 0619 	add.w	r6, r4, #25
 800adf0:	e7f5      	b.n	800adde <_printf_i+0x22e>
 800adf2:	bf00      	nop
 800adf4:	0800b005 	.word	0x0800b005
 800adf8:	0800b016 	.word	0x0800b016

0800adfc <__retarget_lock_acquire_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <__retarget_lock_release_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <memcpy>:
 800ae00:	440a      	add	r2, r1
 800ae02:	4291      	cmp	r1, r2
 800ae04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae08:	d100      	bne.n	800ae0c <memcpy+0xc>
 800ae0a:	4770      	bx	lr
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae16:	4291      	cmp	r1, r2
 800ae18:	d1f9      	bne.n	800ae0e <memcpy+0xe>
 800ae1a:	bd10      	pop	{r4, pc}

0800ae1c <memmove>:
 800ae1c:	4288      	cmp	r0, r1
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	eb01 0402 	add.w	r4, r1, r2
 800ae24:	d902      	bls.n	800ae2c <memmove+0x10>
 800ae26:	4284      	cmp	r4, r0
 800ae28:	4623      	mov	r3, r4
 800ae2a:	d807      	bhi.n	800ae3c <memmove+0x20>
 800ae2c:	1e43      	subs	r3, r0, #1
 800ae2e:	42a1      	cmp	r1, r4
 800ae30:	d008      	beq.n	800ae44 <memmove+0x28>
 800ae32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae3a:	e7f8      	b.n	800ae2e <memmove+0x12>
 800ae3c:	4402      	add	r2, r0
 800ae3e:	4601      	mov	r1, r0
 800ae40:	428a      	cmp	r2, r1
 800ae42:	d100      	bne.n	800ae46 <memmove+0x2a>
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae4e:	e7f7      	b.n	800ae40 <memmove+0x24>

0800ae50 <_realloc_r>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	4680      	mov	r8, r0
 800ae56:	4614      	mov	r4, r2
 800ae58:	460e      	mov	r6, r1
 800ae5a:	b921      	cbnz	r1, 800ae66 <_realloc_r+0x16>
 800ae5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae60:	4611      	mov	r1, r2
 800ae62:	f7ff bc2b 	b.w	800a6bc <_malloc_r>
 800ae66:	b92a      	cbnz	r2, 800ae74 <_realloc_r+0x24>
 800ae68:	f7ff fbbc 	bl	800a5e4 <_free_r>
 800ae6c:	4625      	mov	r5, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	f000 f81b 	bl	800aeae <_malloc_usable_size_r>
 800ae78:	4284      	cmp	r4, r0
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	d802      	bhi.n	800ae84 <_realloc_r+0x34>
 800ae7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae82:	d812      	bhi.n	800aeaa <_realloc_r+0x5a>
 800ae84:	4621      	mov	r1, r4
 800ae86:	4640      	mov	r0, r8
 800ae88:	f7ff fc18 	bl	800a6bc <_malloc_r>
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	2800      	cmp	r0, #0
 800ae90:	d0ed      	beq.n	800ae6e <_realloc_r+0x1e>
 800ae92:	42bc      	cmp	r4, r7
 800ae94:	4622      	mov	r2, r4
 800ae96:	4631      	mov	r1, r6
 800ae98:	bf28      	it	cs
 800ae9a:	463a      	movcs	r2, r7
 800ae9c:	f7ff ffb0 	bl	800ae00 <memcpy>
 800aea0:	4631      	mov	r1, r6
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fb9e 	bl	800a5e4 <_free_r>
 800aea8:	e7e1      	b.n	800ae6e <_realloc_r+0x1e>
 800aeaa:	4635      	mov	r5, r6
 800aeac:	e7df      	b.n	800ae6e <_realloc_r+0x1e>

0800aeae <_malloc_usable_size_r>:
 800aeae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb2:	1f18      	subs	r0, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfbc      	itt	lt
 800aeb8:	580b      	ldrlt	r3, [r1, r0]
 800aeba:	18c0      	addlt	r0, r0, r3
 800aebc:	4770      	bx	lr
	...

0800aec0 <_init>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	bf00      	nop
 800aec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec6:	bc08      	pop	{r3}
 800aec8:	469e      	mov	lr, r3
 800aeca:	4770      	bx	lr

0800aecc <_fini>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	bf00      	nop
 800aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed2:	bc08      	pop	{r3}
 800aed4:	469e      	mov	lr, r3
 800aed6:	4770      	bx	lr
